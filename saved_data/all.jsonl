{"label": 1, "index": 0, "code": "h1 = int(input())\nh2 = int(input())\nprint(h1 - h2)"}
{"label": 1, "index": 1, "code": "x = int(input())\ny = int(input())\nprint(x - y)"}
{"label": 1, "index": 2, "code": "h1 = int(input())\nh2 = int(input())\nprint(h1 - h2)\n"}
{"label": 1, "index": 3, "code": "# at kengamine peak\nprint input()-input()"}
{"label": 1, "index": 4, "code": "# -*- coding: utf-8 -*-\n# \u5fc5\u8981\u306aimport\u3092\u5897\u3084\u3059\n\nclass Solver(object):\n\n    def run(self):\n        h1 = int(input())\n        h2 = int(input())\n        print(h1-h2)\n\n\n####################################\n# \u3053\u3053\u304b\u3089\u306f\u898b\u3061\u3083\u30c0\u30e1!\n\n### \u3053\u3053\u306b\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8a18\u8f09 ###\n\nif __name__ == '__main__':\n    Solver().run()\n"}
{"label": 1, "index": 5, "code": "# coding -*- utf-8 -*-\nH1 = int(raw_input())\nH2 = int(raw_input())\n\nprint (H1 - H2)"}
{"label": 1, "index": 6, "code": "a = int(input())\nb = int(input())\nprint(a-b)"}
{"label": 1, "index": 7, "code": "h1 = int(input())\nh2 = int(input())\nprint(h1-h2)"}
{"label": 1, "index": 8, "code": "A = input()\nB = input() \nprint A-B"}
{"label": 1, "index": 9, "code": "h1 = input()\nh2 = input()\nprint h1 - h2"}
{"label": 1, "index": 10, "code": "H1 = int(input())\nH2 = int(input())\nprint(H1 - H2)"}
{"label": 1, "index": 11, "code": "H1,H2 = input(),input()\nprint H1-H2"}
{"label": 1, "index": 12, "code": "print(int(input()) - int(input()))\n"}
{"label": 1, "index": 13, "code": "A = int(input())\nB = int(input())\n\nprint(A - B)"}
{"label": 1, "index": 14, "code": "print(int(input())-int(input()))"}
{"label": 1, "index": 15, "code": "a = int(input())\nb = int(input())\nprint(a-b)"}
{"label": 1, "index": 16, "code": "print(int(input())-int(input()))"}
{"label": 1, "index": 17, "code": "H1=int(input())\nH2=int(input())\nprint(str(H1-H2))"}
{"label": 1, "index": 18, "code": "import sys\n\na = []\nfor line in sys.stdin:\n    a.append(int(line.strip()))\nprint(a[0] - a[1])"}
{"label": 1, "index": 19, "code": "print(int(input()) - int(input()))"}
{"label": 1, "index": 20, "code": "h1 = int(input())\nh2 = int(input())\nprint(h1 - h2)"}
{"label": 1, "index": 21, "code": "print input()-input()"}
{"label": 1, "index": 22, "code": "from collections import defaultdict\nfrom itertools import product, groupby\nfrom math import pi\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right\nINF = 10 ** 10\n\n\ndef main():\n    H1, H2 = int(input()), int(input())\n    print(H1 - H2)\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 1, "index": 23, "code": "#! /usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n#\u7a4d\u96ea\u6df1\u5dee\nH1 = int(input())\nH2 = int(input())\n\nprint(H1-H2)"}
{"label": 1, "index": 24, "code": "h1 = int(raw_input())\nh2 = int(raw_input())\n\nprint h1 - h2"}
{"label": 1, "index": 25, "code": "h1 = int(input())\nh2 = int(input())\n\nprint(h1-h2)"}
{"label": 1, "index": 26, "code": "H1 = int(input())\nH2 = int(input())\nprint(H1-H2)"}
{"label": 1, "index": 27, "code": "h1=int(input())\nh2=int(input())\n\nprint(h1-h2)"}
{"label": 1, "index": 28, "code": "h1 = int(input())\nh2 = int(input())\n\nprint(h1 - h2)"}
{"label": 1, "index": 29, "code": "a = int(input())\nb = int(input())\n\nprint(a - b)\n"}
{"label": 1, "index": 30, "code": "a=int(input())\nb=int(input())\nprint(a-b)"}
{"label": 1, "index": 31, "code": "h1 = input()\nh2 = input()\n\nprint h1 - h2\n"}
{"label": 1, "index": 32, "code": "# coding: utf-8\nH1 = int(input())\nH2 = int(input())\n\nprint(H1 - H2)"}
{"label": 1, "index": 33, "code": "print(int(input()) - int(input()))\n"}
{"label": 1, "index": 34, "code": "N1 = input()\nN2 = input()\nprint(N1-N2)\n\n"}
{"label": 1, "index": 35, "code": "H1=int(input())\nH2=int(input())\nprint (H1-H2)"}
{"label": 1, "index": 36, "code": "print(int(input()) - int(input()))"}
{"label": 1, "index": 37, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\n\ndef main():\n    h1 = int(input())\n    h2 = int(input())\n\n    print(h1 - h2)\n\nif __name__ == \"__main__\": main()\n"}
{"label": 1, "index": 38, "code": "# coding:utf-8\n\nH1 = input()\nH2 = input()\n\nanswer = int(H1) - int(H2)\n\nprint(answer)"}
{"label": 1, "index": 39, "code": "h1 = input()\nh2 = input()\nprint str(h1-h2)"}
{"label": 1, "index": 40, "code": "# -*- coding: utf-8 -*-\n\n#\u8907\u6570\u884c\u306b1\u3064\u306eint\n# n = int(input())\n# t = [int(input()) for i in range(n)]\n\n#1 gyou int split\n# t = [int(i) for i in input().split()]\n\nn1 = int(input())\nn2 = int(input())\n\nprint (n1-n2)\n"}
{"label": 1, "index": 41, "code": "H1 = int(input())\nH2 = int(input())\nprint(H1 - H2)"}
{"label": 1, "index": 42, "code": "import sys\n\ndef solve():\n    h1 = int(input())\n    h2 = int(input())\n    print(h1 - h2)\n\nif __name__ == '__main__':\n    solve()"}
{"label": 1, "index": 43, "code": "a = int(input())\nb = int(input())\nprint(a - b)"}
{"label": 1, "index": 44, "code": "h1 = input()\nh2 = input()\nprint h1 - h2"}
{"label": 1, "index": 45, "code": "H1=int(raw_input())\nH2=int(raw_input())\nprint H1-H2"}
{"label": 1, "index": 46, "code": "a=int(input())\nb=int(input())\nprint(a-b)\n"}
{"label": 1, "index": 47, "code": "H1 = int(input())\nH2 = int(input())\n\nprint(H1 - H2)"}
{"label": 1, "index": 48, "code": "a = int(raw_input())\nb = int(raw_input())\nprint int(a-b)"}
{"label": 1, "index": 49, "code": "# -*- coding: utf_8 -*-\n\n\"\"\"\nAtCoder Begginer Contest 001 A\n\"\"\"\n\nimport sys\n\n# get a\nH1 = int(sys.stdin.readline().rstrip(\"\\n\"))\n\n# get b,c\nH2 = int(sys.stdin.readline().rstrip(\"\\n\"))\n\n# print answer\nprint(H1 - H2)"}
{"label": 1, "index": 50, "code": "print(int(input())-int(input()))"}
{"label": 1, "index": 51, "code": "print(int(input()) - int(input()))"}
{"label": 1, "index": 52, "code": "H1 = int(raw_input())\nH2 = int(raw_input())\nprint H1 - H2"}
{"label": 1, "index": 53, "code": "a = int(raw_input())\nb = int(raw_input())\nprint a - b"}
{"label": 1, "index": 54, "code": "a = int(input())\nb = int(input())\nprint(a-b)"}
{"label": 1, "index": 55, "code": "H1 = int(input())\nH2 = int(input())\nprint(H1 - H2)"}
{"label": 1, "index": 56, "code": "def A():\n    h1 = input()\n    h2 = input()\n    print(\"{0}\".format(int(h1)-int(h2)))\n\nA()"}
{"label": 1, "index": 57, "code": "import numpy as np\n\na = np.zeros(2, dtype = np.int32)\na[0] = input()\na[1] = input()\nprint(a[0] - a[1])"}
{"label": 1, "index": 58, "code": "a = int(input())\nb = int(input())\nprint(a-b)\n"}
{"label": 1, "index": 59, "code": "i=0\nj=0\n\ni = int(input())\nj = int(input())\n\nprint(i-j)\n"}
{"label": 1, "index": 60, "code": "# coding:utf-8\n\nh1 = int(input())\nh2 = int(input())\nprint(\"{}\".format(h1-h2))\n"}
{"label": 1, "index": 61, "code": "a=int(input())\nb=int(input())\nprint(a-b)"}
{"label": 1, "index": 62, "code": "h1 = int(input())\nh2 = int(input())\nprint(h1 - h2)"}
{"label": 1, "index": 63, "code": "# -*- coding: utf-8 -*-\n\ndef main():\n    h1 = int(input())\n    h2 = int(input())\n\n    print(h1 - h2)\n\n\nif __name__ == '__main__':\n    main()"}
{"label": 1, "index": 64, "code": "a = int(input())\nb = int(input())\nprint(str(a-b))"}
{"label": 1, "index": 65, "code": "# coding: utf-8\n\nh1 = int(input())\nh2 = int(input())\nprint(h1 - h2)\n"}
{"label": 1, "index": 66, "code": "H1 = int(input())\nH2 = int(input())\n\na = H1 - H2\nprint(a)"}
{"label": 1, "index": 67, "code": "H1=int(input())\nH2=int(input())\nprint(H1-H2)"}
{"label": 1, "index": 68, "code": "h1 = int(raw_input())\nh2 = int(raw_input())\nprint h1-h2"}
{"label": 1, "index": 69, "code": "H1 = int(input())\nH2 = int(input())\n\nprint(H1 - H2)\n"}
{"label": 1, "index": 70, "code": "H1 = int(input())\nH2 = int(input())\nprint(H1 - H2)\n"}
{"label": 1, "index": 71, "code": "H1 = int(input())\nH2 = int(input())\nprint(str(H1 - H2))"}
{"label": 1, "index": 72, "code": "a = int(input().strip())\nb = int(input().strip())\nprint(a-b)"}
{"label": 1, "index": 73, "code": "h1 = int(input())\nh2 = int(input())\n\n\nprint(h1 - h2)\n"}
{"label": 1, "index": 74, "code": "# coding: utf-8\ndef get_ln_inputs():\n    return input().split()\n \n \ndef get_ln_int_inputs():\n    return list(map(int, get_ln_inputs()))\n \n\ndef main():\n    h1 = get_ln_int_inputs()[0]\n    h2 = get_ln_int_inputs()[0]\n    print(h1 - h2)\n\n\nmain()"}
{"label": 1, "index": 75, "code": "H1 =int(input())\nH2 = int(input())\nprint (H1-H2)\n"}
{"label": 1, "index": 76, "code": "H1 = int(input())\nH2 = int(input())\nprint(str(H1 - H2))\n"}
{"label": 1, "index": 77, "code": "a = int(input())\nb = int(input())\nprint(a - b)\n"}
{"label": 1, "index": 78, "code": "# coding: utf-8\n\nh1 = input()\nh2 = input()\n\nprint h1 - h2\n"}
{"label": 1, "index": 79, "code": "h1 = input()\nh2 = input()\nprint(str(int(h1)-int(h2)))"}
{"label": 1, "index": 80, "code": "a = int(input())\nb = int(input())\n\nprint(a-b)\n"}
{"label": 1, "index": 81, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\"\"\"001-A\"\"\"\n\n\nimport sys\n\n\ndef main():\n    \"\"\"Main function.\"\"\"\n    H1 = int(sys.stdin.readline())\n    H2 = int(sys.stdin.readline())\n\n    print(H1 - H2)\n\n\nif __name__ == '__main__':\n    sys.exit(main())\n"}
{"label": 1, "index": 82, "code": "H1 = int(input())\nH2 = int(input())\nprint(H1 - H2)"}
{"label": 1, "index": 83, "code": "a = int(input())\nb = int(input())\n\nprint(a-b)"}
{"label": 1, "index": 84, "code": "H1 = int(input())\nH2 = int(input())\nprint(H1 - H2)"}
{"label": 1, "index": 85, "code": "h1=int(input())\nh2=int(input())\nprint(h1-h2)\n"}
{"label": 1, "index": 86, "code": "h1 = int(input())\nh2 = int(input())\nprint(h1 - h2)"}
{"label": 1, "index": 87, "code": "after = int(raw_input())\nbefore = int(raw_input())\nprint str(after - before)\n"}
{"label": 1, "index": 88, "code": "print(int(input())-int(input()))"}
{"label": 1, "index": 89, "code": "H = int(input())\nh = int(input())\n\nprint(H-h)"}
{"label": 1, "index": 90, "code": "H1 = int(input())\nH2 = int(input())\n\nprint(H1 - H2)"}
{"label": 1, "index": 91, "code": "H1 = int(input())\nH2 = int(input())\n\nprint(H1 - H2)"}
{"label": 1, "index": 92, "code": "H1 = int(input())\nH2 = int(input())\nprint(H1 - H2)"}
{"label": 1, "index": 93, "code": "# -*- coding: utf-8 -*-\n\nH1 = int(input())\nH2 = int(input())\n\nprint(str(H1 - H2))\n"}
{"label": 1, "index": 94, "code": "h1 = input()\nh2 = input()\nprint h1-h2\n"}
{"label": 1, "index": 95, "code": "print(int(input()) - int(input()))"}
{"label": 1, "index": 96, "code": "print(int(input())-int(input()))\n"}
{"label": 1, "index": 97, "code": "h1 = int(input())\nh2 = int(input())\n\nprint(h1 - h2)\n"}
{"label": 1, "index": 98, "code": "h1 = int(input())\nh2 = int(input())\nprint(h1-h2)\n"}
{"label": 1, "index": 99, "code": "h1 = int(input())\nh2 = int(input())\nprint(h1 - h2)"}
{"label": 1, "index": 100, "code": "print(int(input())-int(input()))"}
{"label": 1, "index": 101, "code": "def A(H1, H2):\n    return H1 - H2\n\nH1 = int(input())\nH2 = int(input())\nprint(A(H1,H2))"}
{"label": 1, "index": 102, "code": "H1 = int(input())\nH2 = int(input())\n\nprint(H1 - H2)"}
{"label": 1, "index": 103, "code": "h1 = int(input())\nh2 = int(input())\n\nprint(h1 - h2)\n"}
{"label": 1, "index": 104, "code": "H1 = int(input())\nH2 = int(input())\nprint(H1 - H2)"}
{"label": 1, "index": 105, "code": "# coding: utf-8\na = int(raw_input())\nb = int(raw_input())\n\nresult = a - b\n\nprint(result)"}
{"label": 1, "index": 106, "code": "a = int(input())\nb = int(input())\nprint(a - b)"}
{"label": 1, "index": 107, "code": "#testtest\nprint input()-input()"}
{"label": 1, "index": 108, "code": "def main():\n    H1 = int(input())\n    H2 = int(input())\n\n    print(H1 - H2)\n\nmain()\n"}
{"label": 1, "index": 109, "code": "a = input()\nb = input()\nc = a - b\nprint c\n"}
{"label": 1, "index": 110, "code": "a = int(input())\nb = int(input())\nprint(a-b)"}
{"label": 1, "index": 111, "code": "a = int(input())\nb = int(input())\nprint(a-b)"}
{"label": 1, "index": 112, "code": "print input()-input()"}
{"label": 1, "index": 113, "code": "# -*- coding: utf-8 -*-\nH1 = int(input())\nH2 = int(input())\nprint(H1-H2)\n"}
{"label": 1, "index": 114, "code": "h1 = int(input())\nh2 = int(input())\n\nd = h1 - h2\n\nprint(d)"}
{"label": 1, "index": 115, "code": "import sys\n\nh1 = int(sys.stdin.readline())\nh2 = int(sys.stdin.readline())\nprint (h1-h2)\n"}
{"label": 1, "index": 116, "code": "print input() - input()"}
{"label": 1, "index": 117, "code": "H1 = int(raw_input())\nH2 = int(raw_input())\nprint H1-H2\n"}
{"label": 1, "index": 118, "code": "H_1 = int(input())\nH_2 = int(input())\n\nres = H_1 - H_2\n\nprint(res)"}
{"label": 1, "index": 119, "code": "print input()-input()"}
{"label": 1, "index": 120, "code": "print input()-input()"}
{"label": 1, "index": 121, "code": "H1=int(input())\nH2=int(input())\nprint(H1-H2)\n"}
{"label": 1, "index": 122, "code": "n = int(input())\nm = int(input())\n\nprint(n - m)"}
{"label": 1, "index": 123, "code": "# \u6574\u6570\u306e\u5165\u529b\nh1 = int(input())\nh2 = int(input())\nprint(str(h1-h2))"}
{"label": 1, "index": 124, "code": "h1 = int(input())\nh2 = int(input())\nprint (h1 - h2)"}
{"label": 1, "index": 125, "code": "h1,h2 = int(input()),int(input())\n\nprint(h1-h2)"}
{"label": 1, "index": 126, "code": "h1 = int(input())\nh2 = int(input())\n\nprint(h1 - h2)\n"}
{"label": 1, "index": 127, "code": "H1 = int(input())\nH2 = int(input())\nprint(H1 - H2)"}
{"label": 1, "index": 128, "code": "print(int(input())-int(input()))"}
{"label": 1, "index": 129, "code": "print(int(input())-int(input()))"}
{"label": 2, "index": 130, "code": "W,H=map(int,raw_input().strip().split(\" \"))\n\nif W*3 == H*4:\n\tprint \"4:3\"\nelse:\n\tprint \"16:9\"\n"}
{"label": 2, "index": 131, "code": "w,h = list(map(int, input().split()))\nif w / h > 16/10:\n\tprint('16:9')\nelse:\n\tprint('4:3')"}
{"label": 2, "index": 132, "code": "from fractions import gcd as gcd\n\ndef main():\n    a,b = map(int,input().split())\n    g = gcd(a,b)\n    a = a // g\n    b = b // g\n    if (a == 4) & (b == 3):\n        print(\"4:3\")\n    else:\n        print(\"16:9\")\n    \nif __name__ == \"__main__\":\n    main()\n"}
{"label": 2, "index": 133, "code": "w, h = map(int ,input().split())\n#print(h/w)\nif h/w == 0.75:\n\tprint('4:3')\nelse:\n\tprint('16:9')"}
{"label": 2, "index": 134, "code": "w, h = map(int, raw_input().split())\nprint \"4:3\" if w < h * 1.5 else \"16:9\""}
{"label": 2, "index": 135, "code": "import sys\nfor line in sys.stdin:\n    a,b = map(int,line.split())\n    if a % 16 == 0 and b % 9 == 0:\n        print \"16:9\"\n    else:\n        print \"4:3\"\n\n"}
{"label": 2, "index": 136, "code": "W,H = map(int, input().split())\nif W%16==0 and H%9==0:\n    print(\"16:9\")\nelif W%4==0 and H%3==0:\n    print(\"4:3\")"}
{"label": 2, "index": 137, "code": "W, H = map(int, input().split())\nif  W % 16 == 0\\\nand H % 9 == 0:\n    print(\"16:9\")\nelse:\n    print(\"4:3\")\n"}
{"label": 2, "index": 138, "code": "W, H = map(int, raw_input().split())\nprint \"4:3\" if (W * 3 == H * 4) else \"16:9\""}
{"label": 2, "index": 139, "code": "a=map(int, raw_input().split())\n\nif float(a[0])/a[1] == float(4)/3:\n        print '4:3'\n\nelse:\n        print '16:9'"}
{"label": 2, "index": 140, "code": "w,h = map(int, raw_input().split())\nif w%16==0 and h%9==0:\n  print \"16:9\"\nelse:\n  print \"4:3\""}
{"label": 2, "index": 141, "code": "n = input()\nn = n.split()\nn = list(map(int, n))\n\nif (n[0]/4*3) == n[1]:\n    print(\"4:3\")\nelse:\n    print(\"16:9\")"}
{"label": 2, "index": 142, "code": "W, H = map(int, raw_input().split())\nratio = float(W) / H\nratio_4_3 = abs(ratio * ( 3.0 / 4) - 1)\nratio_16_9 = abs(ratio * (9.0 / 16) - 1)\n\nif ratio_4_3 < ratio_16_9:\n    print('4:3')\nelse:\n    print('16:9')"}
{"label": 2, "index": 143, "code": "a, b = map(int, raw_input().split())\n\nx = a * 3 / 4 \nif x == b:\n    print(\"4:3\")\nelse:\n    print(\"16:9\")"}
{"label": 2, "index": 144, "code": "# coding: utf-8;\n\ndef main():\n    w, h = map(int, input().split())\n    a = w\n    b = h\n    while a % b != 0:\n        t = a % b\n        a = b\n        b = t\n    print('{}:{}'.format(w // b, h // b))\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 2, "index": 145, "code": "w,h = map(int ,raw_input().split())\nif 3 * w == 4 * h:\n  print \"4:3\"\nelse:\n  print \"16:9\"\n"}
{"label": 2, "index": 146, "code": "import math\nfrom sys import stdin, stdout\ndef readLine_int_list():return list(map(int, stdin.readline().split()))\ndef readLine_int_list_reverse(): return list(map(int, stdin.readline().split())).reverse()\ndef readAll_int(): return list(map(int, stdin))\ndef readLine_str_list():return list(map(str, stdin.readline().split()))\ndef readAll_str(): return list(map(str, stdin))\ndef readLine_int_set(): return set(list(map(int, stdin.readline().split())))\ndef g_twoD_list(p,q): return [[0 for i in range(p)] for j in range(q)]\n \ndef main():\n    w,h=readLine_int_list()\n    \n    print(\"16:9\" if w%16==0 and h%9==0 else \"4:3\")    \nif __name__ == \"__main__\":\n    main()"}
{"label": 2, "index": 147, "code": "w, h = map(int, raw_input().split())\nif w * 1.0 / h == 4. / 3:\n    print \"4:3\"\nelse:\n    print \"16:9\"\n"}
{"label": 2, "index": 148, "code": "w,h=map(int,input().split())\nprint(['4:3','16:9'][w%16==0 and h%9==0])"}
{"label": 2, "index": 149, "code": "l = input().split()\na = int(l[0])\nb = int(l[1])\n\nif (a % 16 == 0) and (b % 9 == 0):\n    print(\"16:9\")\n        \nelse:\n    print(\"4:3\")"}
{"label": 2, "index": 150, "code": "W, H = list(map(int, input().split()))\n\nif (W / 4 * 3 == H):\n    print(\"4:3\")\nelse:\n    print(\"16:9\")\n"}
{"label": 2, "index": 151, "code": "w,h=map(int,raw_input().split())\nif w/4==h/3:\n    print('4:3')\nelse:\n    print(\"16:9\")"}
{"label": 2, "index": 152, "code": "from fractions import gcd\na,b = map(int,raw_input().split())\nc = gcd(a,b)\na //= c\nb //= c\nprint str(a) + ':' + str(b)"}
{"label": 2, "index": 153, "code": "w, h = map(int, raw_input().split())\nif float(w)/h == 4./3:\n    print \"4:3\"\nelse:\n    print \"16:9\""}
{"label": 2, "index": 154, "code": "W, H = map(int, input().split())\nprint(\"4:3\") if W * 3 == H * 4 else print(\"16:9\")\n"}
{"label": 2, "index": 155, "code": "# -*- coding:utf-8 -*-\nW, H = map(int, input().split())\nif W//4 == H//3:\n    print(\"4:3\")\nelif W//16 == H//9:\n    print(\"16:9\")"}
{"label": 2, "index": 156, "code": "w,h=map(int,input().split());print([\"16:9\",\"4:3\"][w%16+h%9>0])"}
{"label": 2, "index": 157, "code": "a,b=map(int,input().split())\n\nif a*3==b*4:\n\tprint(\"4:3\")\nelse:\n\tprint(\"16:9\")"}
{"label": 2, "index": 158, "code": "W,H =map(int,input().split())\n\nif W/16==H/9:\n    print(\"16:9\")\n\nelse:\n    print(\"4:3\")"}
{"label": 2, "index": 159, "code": "w, h = map(int, input().rstrip().split())\nif w * 3 == h * 4:\n    print('4:3')\nelse:\n    print('16:9')"}
{"label": 2, "index": 160, "code": "import fractions\n\nW,H = map(int, input().split())\ngcd = fractions.gcd(W, H)\nW = W // gcd\nH = H // gcd\nprint (str(W) + \":\" + str(H))\n"}
{"label": 2, "index": 161, "code": "w, h = map(int, input().split())\n\nif w * 3 == h * 4:\n  print(\"4:3\")\nelse:\n  print(\"16:9\")\n"}
{"label": 2, "index": 162, "code": "def euclideanAlgorithm(a, b):\n\twhile b:\n\t\ta, b = b, a%b\n\treturn a\n\nw, h = (int(i) for i in input().split())\na = euclideanAlgorithm(w, h)\n\nif w/a == 4 and h/a == 3:\n\tprint(\"4:3\")\nelif w/a == 16 and h/a == 9:\n\tprint(\"16:9\")"}
{"label": 2, "index": 163, "code": "W, H = map(int, input().split())\nif (W%16==0)and(H%9==0):\n    print(\"16:9\")\nelse:\n    print(\"4:3\")\n\n"}
{"label": 2, "index": 164, "code": "l = map(int, raw_input().split())\na=l[0]\nb=l[1]\nif a/4==b/3:\n\tprint \"4:3\"\nelif a/16==b/9:\n\tprint \"16:9\"\n"}
{"label": 2, "index": 165, "code": "W, H = map(int, input().split())\nif W / H == 4 / 3 :\n print(\"4:3\")\nelse:\n print(\"16:9\")\n"}
{"label": 2, "index": 166, "code": "w, h = map(int, input().split())\nif w % 16 == 0 and h % 9 == 0:\n    print('16:9')\nelse:\n    print('4:3')"}
{"label": 2, "index": 167, "code": "a, b = map(int, raw_input().split())\n\nif a * 3 / 4 == b:\n    print \"4:3\"\nelse:\n    print \"16:9\""}
{"label": 2, "index": 168, "code": "w, h = map(int, input().split())\nif w % 16 == 0 and h % 9 == 0:\n    print(\"16:9\")\nelse:\n    print(\"4:3\")\n"}
{"label": 2, "index": 169, "code": "from fractions import gcd as gcd\n\ndef main():\n    a,b = map(int,input().split())\n    g = gcd(a,b)\n    a = a // g\n    b = b // g\n    if a == 4 and b == 3:\n        print(\"4:3\")\n    else:\n        print(\"16:9\")\n    \nif __name__ == \"__main__\":\n    main()"}
{"label": 2, "index": 170, "code": "input_line1 = map(int,raw_input().split(\" \"))\n#input_line2 = map(int,raw_input().split(\" \"))\ntmpW = input_line1[0]\ntmpH = input_line1[1]\nw = tmpW\nh = tmpH\nr = w - (w/h) * h\nwhile r != 0:\n\tw = h\n\th = r\n\tr = r = w - (w/h) * h\nprint str(tmpW / h) + \":\" + str(tmpH / h)"}
{"label": 2, "index": 171, "code": "w, h = map(int, input().split())\n\nif h % int(w / 4) ==\t0:\n    print(\"4:3\")\nelse:\n    print(\"16:9\")"}
{"label": 2, "index": 172, "code": "W, H = map(int, input().split())\nprint('4:3' if W / 4 * 3 == H else '16:9')\n"}
{"label": 2, "index": 173, "code": "w, h = map(int, raw_input().split())\n\nif w*9 == h*16 : print\"16:9\"\nelse : print\"4:3\""}
{"label": 2, "index": 174, "code": "W,H = map(int,raw_input().split())\nprint '4:3' if W*3 == H*4 else '16:9'"}
{"label": 2, "index": 175, "code": "# coding:utf-8\nW,H = map(int, raw_input().split())\nif float(W)/H == float(4)/3:\n\tprint '4:3'\nelif float(W)/H == float(16)/9:\n\tprint '16:9'"}
{"label": 2, "index": 176, "code": "x, y = (int(x) for x in input().split())\nprint(\"16:9\" if x/y == 16/9 else \"4:3\")"}
{"label": 2, "index": 177, "code": "# -*- coding: utf-8 -*-\n\n# \u554f\u984c\uff1ahttp://abc035.contest.atcoder.jp/tasks/abc035_a\n\nif __name__ == '__main__':\n\tW, H = map(int, raw_input().split(' '))\n\n\tif W*3==H*4: # a:b=4:3 => 3a=4b\n\t\tprint '4:3'\n\telse:        # 4:3\u304b16:9\u306b\u306a\u308b\u3053\u3068\u304c\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u308b\u304b\u3089\u30c1\u30a7\u30c3\u30af\u5fc5\u8981\u306a\u3057\n\t\tprint '16:9'\n"}
{"label": 2, "index": 178, "code": "w,h=map(int,raw_input().split())\nprint '16:9' if w%16==0 and h/(w/16)==9 else '4:3'"}
{"label": 2, "index": 179, "code": "w,h = map(int,raw_input().split())\nif 4 * h == w * 3:\n    print '4:3'\nelse:\n    print '16:9'\n"}
{"label": 2, "index": 180, "code": "from Queue import * # Queue, LifoQueue, PriorityQueue\nfrom bisect import * #bisect, insort\nfrom collections import * #deque, Counter,OrderedDict,defaultdict\n#set([]) \nimport math\nimport copy\nimport itertools\nimport string\nimport sys\nmyread = lambda : map(int,raw_input().split())\ndef solver():\n    W,H = myread()\n    if W * 3 == H * 4:\n        print \"4:3\"\n    else:\n        print \"16:9\"\n\n\n\nif __name__ == \"__main__\":\n    solver()\n    \n"}
{"label": 2, "index": 181, "code": "w,h = map(int, raw_input().split())\n\nif(w/4 == h/3):\n\tprint '4:3'\nelif(w/16 == h/9):\n\tprint '16:9'\nelse:\n\tprint 'error'"}
{"label": 2, "index": 182, "code": "w, h = map(int, input().strip().split())\nif w/h == 4/3:\n    print('4:3')\nelse:\n    print('16:9')"}
{"label": 2, "index": 183, "code": "w,h=map(int,input().split())\n\nif w*3==h*4:\n\tprint(\"4:3\")\nelse:\n\tprint(\"16:9\")\n"}
{"label": 2, "index": 184, "code": "from fractions import gcd\nW,H = map(int,raw_input().split())\nGCD = gcd(W,H)\nprint \"%d:%d\" % (W/GCD,H/GCD)"}
{"label": 2, "index": 185, "code": "#coding:utf-8\n\nW,H=map(int,raw_input().split())\n\nif W%16==0 and H%9==0:\n\tprint '16:9'\nelse:\n\tprint '4:3'"}
{"label": 2, "index": 186, "code": "w,h = map(int,raw_input().split())\n\nif w * 10 / h == 13:\n    print \"4:3\" \nelse:\n    print \"16:9\""}
{"label": 2, "index": 187, "code": "#coding: utf-8\n\nif __name__ == \"__main__\":\n    isRatio = False\n    l = list(input().split())\n    w, h = list(map(int, l))\n\n    if 3*w == 4*h:\n        print(\"4:3\")\n\n    if 9*w == 16*h:\n        print(\"16:9\")"}
{"label": 2, "index": 188, "code": "a = map(int, raw_input().split())\nb=a[0]/4.0\nc=a[1]/b\nif c==3.0:\n    print(\"4:3\")\nelse:\n    print(\"16:9\")        \n"}
{"label": 2, "index": 189, "code": "w, h = map(int,input().split())\n\nif w*3 == h*4:\n    print('4:3')\nelse:\n    print('16:9')\n"}
{"label": 2, "index": 190, "code": "w,h = map(int, input().split())\nif w/h==4/3:\n    print('4:3')\nelse:\n    print('16:9')\n\n"}
{"label": 2, "index": 191, "code": "w, h = input().split()\nw = int(w)\nh = int(h)\nif(4*h == 3*w):\n\tprint('4:3')\nelse:\n\tprint('16:9')\n"}
{"label": 2, "index": 192, "code": "def list_map(func, xs: list) -> list: return list(map(func, xs))\ndef input_str()      -> str:   return input().strip()\ndef input_int()      -> int:   return int(input().strip())\ndef input_list()     -> [str]: return input().strip().split()\ndef input_int_list() -> [int]: return list_map(int, input_list())\n\ndef main():\n    w, h = input_int_list()\n    if (w / 4 * 3 == h):\n        print('4:3')\n    else:\n        print('16:9')\n\nif __name__ == '__main__':\n    main()"}
{"label": 2, "index": 193, "code": "from fractions import gcd as gcd\n\na,b = map(int,input().split())\ng = gcd(a,b)\na = a // g\nb = b // g\nprint(str(a)+\":\"+str(b))\n"}
{"label": 2, "index": 194, "code": "W, H = map(int,input().split())\n\nif W % 16 == 0 and H % 9 == 0:\n    print(\"16:9\")\nelif W % 4 == 0 and H % 3 == 0:\n    print(\"4:3\")\nelse:\n    print()"}
{"label": 2, "index": 195, "code": "import sys\n\ndef solve():\n    W, H = map(int, input().split())\n\n    if 3 * W == 4 * H:\n        ans = '4:3'\n    else:\n        ans = '16:9'\n\n    print(ans)\n\ndef debug(x, table):\n    for name, val in table.items():\n        if x is val:\n            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)\n            return None\n\n\nif __name__ == '__main__':\n    solve()"}
{"label": 2, "index": 196, "code": "# coding: utf-8\n\n\ndef gcd(a, b):\n    return gcd(b, a % b) if b else a\n\nif __name__ == '__main__':\n    a, b = [int(i) for i in input().split(' ')]\n    c = gcd(a, b)\n    print('{}:{}'.format(a // c, b // c))"}
{"label": 2, "index": 197, "code": "w, h = map(int, input().split())\nprint('4:3' if w * 3 == h * 4 else '16:9')\n"}
{"label": 2, "index": 198, "code": "a,b = map(int,raw_input().split())\nc = 75*a\nif 100*b == c:\n\tprint \"4:3\"\nelse:\n\tprint \"16:9\"\n"}
{"label": 2, "index": 199, "code": "a, b = map(int, raw_input().split())\n\nif (a/4 * 3) == b:\n    print \"4:3\"\nelse:\n    print \"16:9\""}
{"label": 2, "index": 200, "code": "a, b = map(float, raw_input().split())\nif abs(b / a - 3.0/4) < 1e-6:\n    print \"4:3\"\nelse:\n    print \"16:9\""}
{"label": 2, "index": 201, "code": "#!/usr/bin/env\n# coding:utf-8\n\nfrom fractions import gcd\n\na,b = map(int,raw_input().split())\nprint \"4:3\" if a/gcd(a,b)==4 else \"16:9\""}
{"label": 2, "index": 202, "code": "w, h = (int(x) for x in input().split())\nprint('4:3' if 3*w == 4*h else '16:9')"}
{"label": 2, "index": 203, "code": "A, B = map(int, raw_input().split())\nif B/3 * 4 == A:\n  print '4:3'\nelse:\n  print '16:9'"}
{"label": 2, "index": 204, "code": "# -*- coding: utf-8 -*-\n# \u6574\u6570\u306e\u5165\u529b\na =map(int,raw_input().split(' '))\nif a[0]/4*3 == a[1]:\n    print '4:3'\nelse:\n    print '16:9'"}
{"label": 2, "index": 205, "code": "x,y = map(int, raw_input().split())\nif x/(y*1.0) == 4/3.0:\n    print(\"4:3\")\nelse:\n    print(\"16:9\")\n"}
{"label": 2, "index": 206, "code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nw, h = map(int, input().split())\ng = gcd(w, h)\nprint('4:3' if w/g == 4 else '16:9')\n"}
{"label": 2, "index": 207, "code": "\n\ndef lcd(a,b):\n    while (a % b) != 0:\n        amari = a % b\n        a = b\n        b = amari\n    return b\n\nif __name__ == '__main__':\n    w,h = map(int,input().split())\n\n    small = lcd(w,h)\n    if small == 1:\n        print(str(w)+\":\"+str(h))\n    else:\n        w = int (w / small)\n        h = int (h / small)\n        print(str(w)+':'+str(h))\n"}
{"label": 2, "index": 208, "code": "s = list(map(int, input().split()))\n\nw = s[0]\nh = s[1]\n\nif w / h == 4 / 3:\n    print(\"4:3\")\nelse:\n    print(\"16:9\")"}
{"label": 2, "index": 209, "code": "w, h = [int(i) for i in input().split()]\ntmp = w/h\nif w/h == 4/3:\n    print('4:3')\nelse:\n    print('16:9')"}
{"label": 2, "index": 210, "code": "w, h = list(map(int, input().split()));\nprint('4:3' if(w/4*3 == h) else '16:9')\n"}
{"label": 2, "index": 211, "code": "def main():\n    W, H = map(int, input().split())\n\n    if W * 3 == H * 4:\n        print('4:3')\n    else:\n        print('16:9')\n\nmain()\n"}
{"label": 2, "index": 212, "code": "w,h = map(int, raw_input().split())\nif w * 3 == h * 4:\n\tprint \"4:3\"\nelse:\n\tprint \"16:9\""}
{"label": 2, "index": 213, "code": "# coding: utf-8\nwh = [float(i) for i in raw_input().split(' ')]\nasp = wh[0]/wh[1]\nif asp==(4.0/3.0):\n    print('4:3')\nelse:\n    print('16:9')\n"}
{"label": 2, "index": 214, "code": "input_str = raw_input()\ninput_list_str = input_str.split()\ninput_list_int = map(int, input_list_str)\n\nif input_list_int[0] % 16 == 0 and input_list_int[1] % 9 == 0:\n    print \"16:9\"\nelse:\n    print \"4:3\""}
{"label": 2, "index": 215, "code": "W, H = list(map(int, input().split()))\n\nif H/W == 3/4:\n    print('4:3')\nelse:\n    print('16:9')"}
{"label": 2, "index": 216, "code": "W, H = [int(x) for x in raw_input().strip().split()]\n\nproportion = (W+0.0)/ H\n\nif abs(proportion-(4./3)) < 1e-9:\n    print \"4:3\"\nelse:\n    print \"16:9\""}
{"label": 2, "index": 217, "code": "m, n = map(int, input().split())\nif m / 4 == n / 3:\n    print(\"4:3\")\nelif m / 16 == n / 9:\n    print(\"16:9\")\n"}
{"label": 2, "index": 218, "code": "# -*- coding: utf-8 -*-\n\nw, h = map(int, input().split())\n\nif (h * 4) == (w * 3) :\n    print(\"4:3\")\nelif (h * 16) == (w * 9) :\n    print(\"16:9\")"}
{"label": 2, "index": 219, "code": "w, h = map(int, raw_input().split())\n\nif w / 4 * 3 == h:\n    print \"4:3\"\nelse:\n    print \"16:9\"\n"}
{"label": 2, "index": 220, "code": "import sys\nfrom fractions import gcd\n\ndef solve():\n    W, H = map(int, input().split())\n    g = gcd(W, H)\n    \n    W /= g\n    H /= g\n\n    if (W, H) == (4, 3):\n        ans = '4:3'\n    else:\n        ans = '16:9'\n\n    print(ans)\n\ndef debug(x, table):\n    for name, val in table.items():\n        if x is val:\n            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)\n            return None\n\n\nif __name__ == '__main__':\n    solve()"}
{"label": 2, "index": 221, "code": "# coding: utf-8\nW,H = map(int, raw_input().split())\n\nif W*1.0/H == 4.0/3:\n    print '4:3'\nelse:\n    print '16:9'\n"}
{"label": 2, "index": 222, "code": "w, h = input().split()\n\nw = int(w)\nh = int(h)\nif w / h < 1.5:\n    print('4:3')\nelif w / h > 1.5:\n    print('16:9')\n"}
{"label": 2, "index": 223, "code": "w, h = map(int, raw_input().split())\nm = w / 4\nif h / m is 3:\n\tprint '4:3'\nelse:\n\tprint '16:9'"}
{"label": 2, "index": 224, "code": "def ini(): return int(input())\ndef inli(): return list(map(int, input().split()))\ndef inf(): return float(input())\ndef inlf(): return list(map(float, input().split()))\ndef inl(): return list(input())\ndef pli(): return \"\".join(list(map(str, ans)))\n\na = inli()\nw = a[0]\nh = a[1]\nif w/16 ==h/9:\n    print(\"16:9\")\nelse :\n    print(\"4:3\")"}
{"label": 2, "index": 225, "code": "# -*- coding: utf-8 -*-\n\nW, H = map(int, input().split())\n\nprint(\"4:3\" if abs((W /H) - (4/3)) < 1e-5 else \"16:9\")"}
{"label": 2, "index": 226, "code": "# coding: utf-8\n\nw, h = map(int, input().split())\n\nif h == w / 4 * 3:\n    print('4:3')\nelse:\n    print('16:9')"}
{"label": 2, "index": 227, "code": "w, h = map(int,input().split())\n\nif (w * 3 == h * 4):\n\tprint('4:3')\nelse:\n\tprint('16:9')"}
{"label": 2, "index": 228, "code": "(W,H) = input().strip().split()\n\nif(int(W)/16 == int(H)/9):\n    print(\"16:9\")\nif(int(W)/4 == int(H)/3):\n    print(\"4:3\")\n"}
{"label": 2, "index": 229, "code": "w, h = map(int, input().split())\nprint('4:3' if w / h == 4 / 3 else '16:9')"}
{"label": 2, "index": 230, "code": "w,h = map(int,raw_input().split())\nn = w - h\nif n*3 == h:\n    print \"4:3\"\nelse:\n    print \"16:9\"\n"}
{"label": 2, "index": 231, "code": "#coding:utf-8\n\nw, h = map(int, raw_input(). split())\n#4:3\u306e\u5834\u5408\nx = 4 * h / 3\n\nif x == w:\n    print(\"4:3\")\nelse:\n    print(\"16:9\")\n"}
{"label": 2, "index": 232, "code": "w, h = [int(x) for x in input().split()]\nprint('4:3' if h / w == 0.75 else '16:9')\n"}
{"label": 2, "index": 233, "code": "# -*- coding: utf-8 -*-\nimport sys,copy,math,heapq,itertools as it,fractions,re,bisect,collections as coll\n\nW, H = map(int, raw_input().split())\n\nprint \"4:3\" if 3*W == 4*H else \"16:9\"\n"}
{"label": 2, "index": 234, "code": "w, h = list(map(int, input().split()))\n\nif (w % 16 == 0)&(h % 9 == 0):\n    print('16:9')\nelse:\n    print('4:3')\n"}
{"label": 2, "index": 235, "code": "lcm = lambda a, b: b if a % b == 0 else lcm(b, a % b)\nw, h = map(int, input().split(' '))\ntmp = lcm(w, h)\nw, h = w // tmp, h // tmp\nprint('{}:{}'.format(w, h))"}
{"label": 2, "index": 236, "code": "import sys\nW,H=map(int,raw_input().split())\nif W % 4 == 0:\n    if H % (W/4) == 0:\n        print '4:3' \n        sys.exit()        \nprint '16:9'\n"}
{"label": 2, "index": 237, "code": "(w,h)=raw_input().split()\nif int(w)*3/int(h) == 4:\n\tprint '4:3'\nelse:\n\tprint '16:9'\n"}
{"label": 2, "index": 238, "code": "from collections import defaultdict\n\n\ndef main():\n    W, H = map(int, input().split())\n    if W * 3 == H * 4:\n        print(\"4:3\")\n    else:\n        print(\"16:9\")\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 2, "index": 239, "code": "w, h = map(int, raw_input().split())\nif 1.0*w/h > 1.5:\n    print \"16:9\"\nelse:\n    print \"4:3\""}
{"label": 2, "index": 240, "code": "W,H = map(int,input().split())\n\nif W % 16 == 0 and H % 9 == 0:\n\tstr = '16:9'\n\tprint(str)\nelse:\n\tstr = '4:3'\n\tprint(str)"}
{"label": 2, "index": 241, "code": "w, h = map(int, input().split())\nprint(\"16:9\" if w % 16 == 0 and h % 9 == 0 else \"4:3\")"}
{"label": 2, "index": 242, "code": "w, h = map(int, input().split())\nx = w//4\nif h//3 == x:\n    print(\"4:3\")\nelse:\n    print(\"16:9\")\n"}
{"label": 2, "index": 243, "code": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\"\"\"One line explanation of a.py.\n\nMore explanations of a.py.\"\"\"\n\nimport sys\n\n\ndef main(argv):\n    for line in sys.stdin:\n        items = line.strip().split(' ')\n        x = int(items[0])\n        y = int(items[1])\n        if x * 3 - y * 4 == 0:\n            ans = '4:3\\n'\n        else:\n            ans = '16:9\\n'\n        sys.stdout.write(ans)\n\nif __name__ == '__main__':\n    main(sys.argv)\n"}
{"label": 2, "index": 244, "code": "def main():\n    w, h = map(int, input().split())\n    if h * 4 == w * 3:\n        print(\"4:3\")\n    else:\n        print(\"16:9\")\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 2, "index": 245, "code": "# -*- coding: utf-8 -*-\nINF=10**10\n     \n\ndef main():\n    w,h=list(map(int,input().split()))\n    if w*3/4==h:\n        print(\"4:3\")\n    else:\n        print(\"16:9\")\n    \nif __name__==\"__main__\":\n    main()\n    "}
{"label": 2, "index": 246, "code": "#!/usr/bin/python\n\ndef main():\n        W,H = [ int(x) for x in raw_input().split() ]\n\n        if W % 16 == 0 and H % 9 == 0 :\n                print \"16:9\"\n        else:\n                print \"4:3\"\n\nmain()"}
{"label": 2, "index": 247, "code": "# coding: utf-8\n# atcoder_ABC035_A\n\nw,h=map(int,raw_input().split())\n\nif w/4==h/3:\n print \"4:3\"\nelif w/16==h/9:\n print \"16:9\"\n"}
{"label": 2, "index": 248, "code": "W,H=map(int,input().split())\nif W/H==4/3:\n  print(\"4:3\")\nelse:\n  print(\"16:9\")"}
{"label": 2, "index": 249, "code": "W, H = map(int, raw_input().split())\nif W*3 == H*4:\n    print \"4:3\"\nif W*9 == H*16:\n    print \"16:9\"\n\n"}
{"label": 2, "index": 250, "code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nw, h = map(int, raw_input().split())\n\nd = gcd(w, h)\n\nprint \"{}:{}\".format(w / d, h / d)"}
{"label": 2, "index": 251, "code": "w, h = map(int, raw_input().split())\n\nif (w%16 == 0) & (h%9 == 0) & (w/16 == h/9) : print\"16:9\"\nelse : print\"4:3\""}
{"label": 2, "index": 252, "code": "W, H = map(int, raw_input().split())\ni = 1\nif W % 4 == 0 and W / 4 == H / 3:\n    print \"4:3\"\nelse:\n    print \"16:9\"\n"}
{"label": 2, "index": 253, "code": "# _*_ encoding: utf-8 _*_\n\nw, h = map(int, raw_input().split())\n\nif w*3 == h*4:\n\tprint('4:3')\nelse:\n\tprint('16:9')"}
{"label": 2, "index": 254, "code": "w,h = map(int,input().split())\nif w/h > 1.5:\n    print(\"16:9\")\nelse:\n    print(\"4:3\")\n"}
{"label": 2, "index": 255, "code": "def main():\n    W, H = map(int, input().split())\n\n    if (W + H) % 7 == 0:\n        print('4:3')\n    else:\n        print('16:9')\n\nmain()\n"}
{"label": 2, "index": 256, "code": "W, H = map(int, input().split())\n\nif W / H == (4 / 3):\n    print(\"4:3\")\nelif W / H == (16 / 9):\n    print(\"16:9\")\nelse:\n    print()\n\n"}
{"label": 2, "index": 257, "code": "W,H=map(int,raw_input().split())\nif(W%16==0 and H%9==0 and W>=16 and H>=9):\n    print(\"16:9\")\nelse:\n    print(\"4:3\")"}
{"label": 2, "index": 258, "code": "W, H = [int(i) for i in input().split()]\n\nif  W == H*4/3:\n    print('4:3')\nelif W == H*16/9:\n    print('16:9')"}
{"label": 2, "index": 259, "code": "a, b = map(int, input().split())\nif a / b == 4 / 3 :\n    print('4:3')\nelse :\n    print('16:9')"}
{"label": 3, "index": 260, "code": "def main():\n    A, B = map(int, input().split())\n\n    ans = int((A + B - 1) / A)\n    print(ans)\n\nmain()\n"}
{"label": 3, "index": 261, "code": "A, B = map(int, raw_input().split())\n\nprint (B+A-1)/A\n"}
{"label": 3, "index": 262, "code": "from Queue import * # Queue, LifoQueue, PriorityQueue\nfrom bisect import * #bisect, insort\nfrom collections import * #deque, Counter,OrderedDict,defaultdict\n#set([]) \nimport math\nimport copy\nimport itertools\nimport string\nimport sys\nmyread = lambda : map(int,raw_input().split())\ndef solver():\n    A,B = myread()\n    print B / A + min(1, B % A)\n\n\nif __name__ == \"__main__\":\n    solver()\n    \n"}
{"label": 3, "index": 263, "code": "#!/usr/bin/env python\n# coding: utf-8 :\n#\n# Author:   Ryo Akita\n# URL:      http://www.ai.cs.kobe-u.ac.jp/~akita/\n# License:  MIT License\n# Created:  2016-04-30\n#\n\nimport math\n\na, b = map(float, raw_input().split())\n\nnum = b / a\n\nprint int(math.ceil(num))\n"}
{"label": 3, "index": 264, "code": "A,B = map(int,raw_input().split(\" \"))\nprint B/A+(1 if B%A else 0)"}
{"label": 3, "index": 265, "code": "A, B = map(int, raw_input().split())\nprint (B+A-1)/A\n"}
{"label": 3, "index": 266, "code": "a,b = map(int, input().split())\nfor  i in range(10000):\n    if a*i >= b:\n        print(i)\n        exit()\n"}
{"label": 3, "index": 267, "code": "A, B = map(int, input().split())\nif B % A:\n    print(B // A + 1)\nelse:\n    print(B // A)\n"}
{"label": 3, "index": 268, "code": "input_line1 = map(int,raw_input().split(\" \"))\n#input_line2 = map(int,raw_input().split(\" \"))\na = input_line1[0]\nb = input_line1[1]\n\nif b % a != 0:\n\tprint (b/a) + 1\nelse:\n\tprint b / a"}
{"label": 3, "index": 269, "code": "from math import ceil\nA, B = map(float, raw_input().split())\nprint int(ceil(B/A))"}
{"label": 3, "index": 270, "code": "num, needs = raw_input().split( )\ni = 1\nwhile i*int(num) < int(needs) :\n    i = i + 1\nprint i\n"}
{"label": 3, "index": 271, "code": "x = raw_input()\nq = int(x.split(\" \")[1])\nr = int(x.split(\" \")[0])\nif q % r == 0:\n  print q/r\nelse:\n  print (q/r+1)\n"}
{"label": 3, "index": 272, "code": "import math\na, b= map(int, input().split())\nans = b/a\nprint(math.ceil(ans))\n"}
{"label": 3, "index": 273, "code": "a,b=map(int, input().split())\nprint((int)((b-1)/a)+1)"}
{"label": 3, "index": 274, "code": "import math\na, b = map(int,input().split())\nprint(math.ceil(b/a))"}
{"label": 3, "index": 275, "code": "# coding: utf-8\n# atcoder_ABC036_A\n\na,b=map(int,raw_input().split())\n\nif b%a==0:\n print b/a\nelse:\n print b/a+1\n"}
{"label": 3, "index": 276, "code": "# -*- coding: utf-8 -*-\nimport sys,copy,math,heapq,itertools as it,fractions,re,bisect,collections as coll\n\nA, B = map(int, raw_input().split())\nprint (B + A - 1)/A\n"}
{"label": 3, "index": 277, "code": "# coding: utf-8\nimport math\na, b = map(int, input().split())\nif a>b:\n    print(1)\nelse:\n    print(math.ceil(b/a))"}
{"label": 3, "index": 278, "code": "a,b=map(int,input().split())\nprint((a+b-1)//a)"}
{"label": 3, "index": 279, "code": "a, b = map(int, input().split())\nprint(b//a if (b%a == 0) else b//a+1)\n"}
{"label": 3, "index": 280, "code": "a,b = map(int, raw_input().split())\nprint (b+a-1) / a\n"}
{"label": 3, "index": 281, "code": "a,b=map(int,raw_input().split())\nif(b%a==0):\n    print(b/a)\nelse:\n    print (b/a+1)"}
{"label": 3, "index": 282, "code": "# -*- coding: utf-8 -*-\n\na,b = map(int, raw_input().strip().split())\nans = b/a\nif b%a == 0:\n\tprint ans\nelse:\n\tprint ans+1"}
{"label": 3, "index": 283, "code": "A, B = map(int, raw_input().strip().split())\n\nif A <= B:\n    print B / A + (1 if B % A else 0)\nelse:\n    print 1"}
{"label": 3, "index": 284, "code": "# -*- coding: utf-8 -*-\n\nimport math\n\nA, B = map(float, raw_input().split())\n\nprint int(math.ceil(B / A))\n"}
{"label": 3, "index": 285, "code": "#coding: utf-8\n\nif __name__ == \"__main__\":\n    l = input().split()\n    a, b = list(map(int, l))\n\n    divInt = int(b/a)\n    if b%a > 0:\n        divInt += 1\n    print(divInt)"}
{"label": 3, "index": 286, "code": "A,B = map(int, input().split(' '))\n\nif  B%A ==0 :\n    print(B//A)\nelse:\n    print(B//A+1)"}
{"label": 3, "index": 287, "code": "import math\n\n# python3\nA,B=map(int, input().split())\n\nboxCnt = math.ceil( B / A )\n\nprint( boxCnt )\n"}
{"label": 3, "index": 288, "code": "l = map(int, raw_input().split())\nif l[1]%l[0]==0:\n\tprint l[1]/l[0]\nelse:\n\tprint l[1]/l[0]+1"}
{"label": 3, "index": 289, "code": "\na, b = list(map(lambda each: int(each), str(input()).split(\" \")))\n\nif b % a == 0:\n    print(b//a)\nelse:\n    print(b//a + 1)\n"}
{"label": 3, "index": 290, "code": "a, b = map(int, raw_input().split())\nif b%a==0:\n    print b/a\nelse:\n    print b/a + 1\n"}
{"label": 3, "index": 291, "code": "A, B = list(map(int, input().split()))\nprint(B // A + bool(B % A))\n"}
{"label": 3, "index": 292, "code": "import math\n\nA, B = map(float, input().split())\nprint(math.ceil(B / A))\n"}
{"label": 3, "index": 293, "code": "# -*- coding:utf-8 -*-\nimport sys\n\ndef split_int(string):\n    return [int(x) for x in string.split()]\n\ndef get_line(integer=False):\n    string = sys.stdin.readline().rstrip()\n    if integer:\n        return split_int(string)\n    else:\n        return string\n\nN = get_line(integer=True)\n\nprint (N[1] + N[0] - 1) / N[0]\n"}
{"label": 3, "index": 294, "code": "a, b = map(int, input().split())\nprint((b + a - 1) // a)"}
{"label": 3, "index": 295, "code": "import math\n\nA, B = list(map(int, input().split()))\n\nprint(math.ceil(B/A*1.0))"}
{"label": 3, "index": 296, "code": "A,B = map(int, input().split())\nprint ((B + A - 1) // A)\n"}
{"label": 3, "index": 297, "code": "# -*- coding: utf-8 -*-\nA,B = map(int,raw_input().split(\" \"))\n\nif B%A == 0:\n    print B/A\nelse:\n    print (B/A) +1"}
{"label": 3, "index": 298, "code": "a, b = map(int, raw_input().split())\nprint (b-1)/a+1"}
{"label": 3, "index": 299, "code": "import math as ma\nA, B = map(int, input().split())\nprint(ma.ceil(B/A))"}
{"label": 3, "index": 300, "code": "# -*- coding:utf-8 -*-\nimport sys\n\ndef split_int(string):\n    return [int(x) for x in string.split()]\n\ndef get_line(integer=False):\n    string = sys.stdin.readline().rstrip()\n    if integer:\n        return split_int(string)\n    else:\n        return string\n\nN = get_line(integer=True)\n\nprint (N[1] + N[0] - 1) / N[0]\n"}
{"label": 3, "index": 301, "code": "A, B = map(int, raw_input().split())\nans = B/A\nif B%A !=0:\n  ans += 1\nprint ans"}
{"label": 3, "index": 302, "code": "#!/usr/bin/env python\n#-*- encoding: utf-8 -*-\n\nimport math\nimport sys\nimport time\n\n\"\"\"\nA - \u304a\u8336\n\"\"\"\n\nab = map(int, raw_input().split() )\n\n\nstart = time.clock()\n\nA = ab[0]\nB = ab[1]\n\nr = 0\nif B < A:\n    r = 1\nelse:\n    r = int( math.ceil( float( B ) / A ) )\n\nend = time.clock()\n#print end - start\nprint r\nsys.exit(0)\n"}
{"label": 3, "index": 303, "code": "a, b = map(int, input().split())\nnum_box = 0\nwhile a*num_box < b:\n    num_box += 1\nprint(num_box)"}
{"label": 3, "index": 304, "code": "a,b=map(int,input().split());print((a+b-1)//a)"}
{"label": 3, "index": 305, "code": "# coding=utf-8\n\nimport math\n\nnum = raw_input().split()\nprint int(math.ceil(float(num[1]) / float(num[0])))"}
{"label": 3, "index": 306, "code": "A,B=map(int,raw_input().split())\n\nif(B%A == 0):\n    print(B/A)\nelse:\n    print(B/A+1)\n\n\n"}
{"label": 3, "index": 307, "code": "def solve():\n    A, B = map(int, input().split())\n\n    print((B + A - 1) // A)\n\n\nif __name__ == '__main__':\n    solve()\n"}
{"label": 3, "index": 308, "code": "a, b = map(int, raw_input().split(' '))\nprint b/a + (b % a > 0)\n"}
{"label": 3, "index": 309, "code": "a, b = map(int, raw_input().split())\nprint (b + a - 1) / a"}
{"label": 3, "index": 310, "code": "A, B = map(int, input().split())\nprint(B // A + (1 if B % A != 0 else 0))\n"}
{"label": 3, "index": 311, "code": "a, b = [int(i) for i in input().split()]\nif not b%a:\n    print(int(b/a))\nelse:\n    print(int(b//a+1))\n"}
{"label": 3, "index": 312, "code": "# coding:utf-8\n\nimport math\n\na, b = map(int, raw_input().split())\nprint(int(math.ceil(1. * b / a)))\n"}
{"label": 3, "index": 313, "code": "# -*- cording: utf-8 -*-\nA,B=map(int, raw_input().split())\nif B%A!=0:\n    print B/A+1\nelse:\n    print B/A"}
{"label": 3, "index": 314, "code": "import math\na,b = input().split()\nprint(math.ceil(int(b)/int(a)))"}
{"label": 3, "index": 315, "code": "a, b = [int(i) for i in input().split(\" \")]\nif b % a == 0:\n    print(b//a)\nelse:\n    print(b//a+1)\n"}
{"label": 3, "index": 316, "code": "import math\na, b = [float(x) for x in raw_input().split()]\nans = int(math.ceil(b/a))\nprint ans"}
{"label": 3, "index": 317, "code": "import math\n\na, b = map(int, input().split())\nprint(math.ceil(b / a))\n"}
{"label": 3, "index": 318, "code": "A,B = map(int, raw_input().split())\nprint (B+A-1)/A\n"}
{"label": 3, "index": 319, "code": "a, b = map(int, raw_input().split())\nprint (b + a - 1) / a\n"}
{"label": 3, "index": 320, "code": "a, b = map(int, input().split())\nprint((b + a - 1) // a)"}
{"label": 3, "index": 321, "code": "# -*- coding: utf-8 -*-\n\n\na, b = map(int, input().split())\n\n\ndef main(a, b):\n    i = 1\n    while a * i < b:\n        i += 1\n    return i\n\n\nprint(main(a, b))\n"}
{"label": 3, "index": 322, "code": "b,a = map(int,input().split())\n\nprint((a+b-1)//b)"}
{"label": 3, "index": 323, "code": "import math\na,b=map(int,raw_input().split())\nprint int(math.ceil(float(b)/a))"}
{"label": 3, "index": 324, "code": "a, b = [int(i) for i in input().split(\" \")]\nif b % a == 0:\n    print(b//a)\nelse:\n    print(b//a+1)\n"}
{"label": 3, "index": 325, "code": "import math\n\nA, B = map(int, input().split())\nNum = math.ceil(B / A)\nprint(Num)\n"}
{"label": 3, "index": 326, "code": "a, b = map(int, input().split())\n\nif b%a == 0:\n    print(b//a)\nelse:\n    print(b//a+1)"}
{"label": 3, "index": 327, "code": "A,B =map(int,input().split())\n\nif B%A==0:\n    print(int(B/A))\n\nelse:\n    print(int((B/A)+1))"}
{"label": 3, "index": 328, "code": "a, b = map(int, input().split())\n\nif b%a == 0:\n    print(int(b/a))\nelse:\n    print(int(b//a +1))"}
{"label": 3, "index": 329, "code": "a, b = map(int, raw_input().split())\nprint b/a + (b % a != 0)\n"}
{"label": 3, "index": 330, "code": "a, b = map(int, input().split())\ni = 1\nwhile a*i < b:\n    i += 1\nprint(i)"}
{"label": 3, "index": 331, "code": "A, want = map(int, input().split())\nprint((want + A - 1) // A)\n"}
{"label": 3, "index": 332, "code": "A,B = map(int,input().split())\ncnt = 0\ncurr = 0\nwhile curr < B:\n    curr += A\n    cnt += 1\nprint(cnt)\n"}
{"label": 3, "index": 333, "code": "A, B = map(int, input().split())\nprint((B + A - 1) // A)"}
{"label": 3, "index": 334, "code": "A, B = map(int, raw_input().split())\nif B % A is 0:\n    print(B / A)\nelse:\n    print(B / A + 1)"}
{"label": 3, "index": 335, "code": "a,b=map(int,input().split())\nprint((b+a-1)//a)"}
{"label": 3, "index": 336, "code": "# -*- coding: utf-8 -*-\n\nimport math\n\na, b = map(int,input().split())\nprint(math.ceil(b/a))"}
{"label": 3, "index": 337, "code": "A, B = map(int, input().split())\nprint(int((B - 1) / A) + 1)\n"}
{"label": 3, "index": 338, "code": "A, B = map(int, raw_input().split())\nprint B / A + (1 if B % A else 0)\n"}
{"label": 3, "index": 339, "code": "from sys import stdin, stdout\nimport math\ndef readLine_int_list():return list(map(int, stdin.readline().split()))\ndef readLine_int_list_reverse(): return list(map(int, stdin.readline().split())).reverse()\ndef readAll_int(): return list(map(int, stdin))\ndef readLine_str_list():return list(map(str, stdin.readline().split()))\ndef readAll_str(): return list(map(str, stdin))\ndef readLine_int_set(): return set(list(map(int, stdin.readline().split())))\ndef g_twoD_list(p,q): return [[0 for i in range(p)] for j in range(q)]\n\n\ndef main():\n    a,b = readLine_int_list()\n    print(math.ceil(b/a))\n    \nif __name__ == \"__main__\":\n    main()\n"}
{"label": 3, "index": 340, "code": "a, b = map(int, raw_input().split())\nprint b / a + (b % a > 0)\n"}
{"label": 3, "index": 341, "code": "A,B=map(int,input().split())\nc=(B%A)\nif c==0:\n d=(B//A)\nelse:\n d=(B//A+1)\nprint(d)"}
{"label": 3, "index": 342, "code": "A, B = map(int, input().split())\n\nif B % A == 0:\n    print(B // A)\nelse:\n    print((B // A) + 1)\n\n"}
{"label": 3, "index": 343, "code": "def ri(): return int(input())\ndef rli(): return list(map(int, input().split()))\ndef rls(): return list(input())\ndef pli(a): return \"\".join(list(map(str, a)))\n\na, b = rli()\nans = b // a\nif(b % a != 0):\n    ans += 1\nprint(ans)"}
{"label": 3, "index": 344, "code": "a, b = list(map(int, input().split()))\nans = int(b / a)\nif b % a != 0:\n    ans += 1\nprint(ans)\n"}
{"label": 3, "index": 345, "code": "A, B = map(int, raw_input().split())\nif B % A == 0:\n    print B / A\nelse:\n    print B / A + 1\n"}
{"label": 3, "index": 346, "code": "a, b = map(int, input().split())\nprint((b+a-1) // a)\n"}
{"label": 3, "index": 347, "code": "a,b=map(int,raw_input().split())\nprint b/a if b%a==0 else b/a+1"}
{"label": 3, "index": 348, "code": "import math\na, b = map(int, input().split())\nprint(int(math.ceil(b/a)))"}
{"label": 3, "index": 349, "code": "A,B=map(int,raw_input().split())\nprint (B+A-1)/A\n"}
{"label": 3, "index": 350, "code": "# coding: utf-8\nfrom math import ceil\n\n\nif __name__ == '__main__':\n    a, b = [int(i) for i in input().split(' ')]\n    print(ceil(b / a))"}
{"label": 3, "index": 351, "code": "A,B=map(int,input().split())\nc=B//A\nd=B%A\n\nif d==0:\n print(str(c))\nelse:\n print(str(c+1))"}
{"label": 3, "index": 352, "code": "a,b = map(int,raw_input().split())\nif b%a == 0 :\n\tprint b/a\nelse:\n\tprint b/a+1\n"}
{"label": 3, "index": 353, "code": "a,b=map(int,raw_input().split())\nprint (b+a-1)/a"}
{"label": 3, "index": 354, "code": "a, b = map(int, input().strip().split())\n\nn = b // a\nif b % a > 0:\n    n += 1\nprint(n)"}
{"label": 3, "index": 355, "code": "A,B=map(int,input().split())\nc=(B%A)\nif c==0:\n d=(B//A)\nelse:\n d=(B//A+1)\nprint(d)"}
{"label": 3, "index": 356, "code": "A, B = input().split()\na = int(A)\nb = int(B)\n\nc = b / a\nif c == int(c):\n    d = c\nelse:\n    d = int(c) + 1\n\nprint(int(d))"}
{"label": 3, "index": 357, "code": "from __future__ import print_function\nfrom __future__ import unicode_literals\nfrom __future__ import division\nfrom __future__ import absolute_import\nimport os\nimport sys\nimport codecs\nimport re\nimport collections\nimport math\n\nil = raw_input()\na, b = [int(i) for i in il.split(\" \")]\nprint(int(math.ceil(b / a)))"}
{"label": 3, "index": 358, "code": "a, b = map(int, raw_input().split())\nprint (a+b-1)/a\n"}
{"label": 3, "index": 359, "code": "#-*- coding:utf-8 -*-\n\na,b=raw_input().split(' ')\n\n\nc=int(b)%int(a)\nd=int(b)/int(a)\n\nif c == 0:\n    print d \nelse:\n    print d+1"}
{"label": 3, "index": 360, "code": "input = raw_input()\nA_B = input.split(\" \")\nA = int(A_B[0])\nB = int(A_B[1])\n\nR = B % A\nif R == 0:\n\tprint(B / A)\nelse:\n\tprint(B / A + 1)\n"}
{"label": 3, "index": 361, "code": "x = map(int, raw_input().split(\" \"))\n\nif x[1] % x[0] == 0:\n    print x[1] / x[0]\nelse:\n    print x[1] / x[0] + 1"}
{"label": 3, "index": 362, "code": "A, B = map(int, raw_input().split())\nimport math\nprint int(math.ceil(1.0*B/A))"}
{"label": 3, "index": 363, "code": "a, b = map(int, input().split())\nprint(b//a + (1 if b%a else 0))"}
{"label": 3, "index": 364, "code": "a,b=map(int,raw_input().split());print(b%a>1)+b/a"}
{"label": 3, "index": 365, "code": "N = map(int,raw_input().split())\n\nans = 0\ni = 0\nwhile(i < N[1]):\n\ti += N[0]\n\tans += 1\nprint(ans)\n"}
{"label": 3, "index": 366, "code": "A, B = list(map(int, input().split()))\nprint(B // A + min(1, B % A))\n"}
{"label": 3, "index": 367, "code": "a,b = map(int,input().split())\nif b%a == 0:\n    ans = b//a\nelse:\n    ans = b//a + 1\nprint(ans)\n"}
{"label": 3, "index": 368, "code": "a,b = map(int,input().split())\n\nif b % a == 0:\n\tprint(b//a)\nelse:\n\tprint((b//a)+1)\n"}
{"label": 3, "index": 369, "code": "import math\nm, n = map(int, input().split())\nans = n / m\nprint(math.ceil(ans))\n"}
{"label": 3, "index": 370, "code": "import math\na,b = list(map(int, input().split()))\n\nprint(math.ceil(b / a))"}
{"label": 3, "index": 371, "code": "# _*_ encoding: utf-8 _*_\n\na, b = map(int, raw_input().split())\n\nans = b / a if b % a == 0 else b / a + 1\n\nprint ans"}
{"label": 3, "index": 372, "code": "import math\nA,B=map(int,input().split())\nprint(math.ceil(B/A))"}
{"label": 3, "index": 373, "code": "import math\n\nn = input()\nn = n.split()\nn = list(map(int, n))\n\nans = math.ceil(n[1] / n[0])\n\nprint(ans)\n"}
{"label": 3, "index": 374, "code": "# -*- Coding: utf-8 -*-\nfrom decimal import *\nimport sys\n\ndef main():\n\ta = list(map(int, input().split(\" \")))\n\tcnt = 0;\n\t\n\tfor i in range(0, 1000):\n\t\tif a[1] <= 0:\n\t\t\tbreak;\n\t\ta[1] = a[1] - a[0]\n\t\tcnt = cnt + 1\n\t\n\tprint(cnt)\n\nif __name__ == '__main__':\n\tmain()\n"}
{"label": 3, "index": 375, "code": "a,b = map(int,raw_input().split())\nif b%a == 0:\n    print b/a\nelse:\n    print b/a+1\n"}
{"label": 3, "index": 376, "code": "def main():\n    [A ,B]= raw_input().rstrip(\"\\n\").split(\" \")\n    need=int(B) / int(A)\n    mod=int(B) % int(A)\n    if mod == 0:\n        print need\n    else :\n        print need+1\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 3, "index": 377, "code": "import math\na,b=map(float,raw_input().split())\nprint int(math.ceil(b/a))"}
{"label": 3, "index": 378, "code": "A, B = map(int, input().split())\nif int(B/A) == B/A:\n    x=int(B/A)\nelse:\n    x = int(B / A)+1\nprint(x)"}
{"label": 3, "index": 379, "code": "A, B = map(int, input().split(\" \"))\n\nans = B // A\nif B % A > 0:\n  ans += 1\nprint(ans)"}
{"label": 3, "index": 380, "code": "bottle,want = map(int, input().split())\n\nif want%bottle==0:\n    box = int(want/bottle)\nelse:\n    box = int(want/bottle) + 1\n\nprint(box)\n"}
{"label": 3, "index": 381, "code": "import math\n(A,B) = [int(i) for i in input().strip().split()]\nprint(str(math.ceil(B/A)))"}
{"label": 3, "index": 382, "code": "b,c=map(int,raw_input().split())\nprint (c-1)/b+1"}
{"label": 3, "index": 383, "code": "A, B = map(int, raw_input().split())\nprint B//A if (B%A) == 0 else (B//A)+1\n"}
{"label": 3, "index": 384, "code": "n = list(map(int, input().split()))\n\na = n[0]\nb = n[1]\n\ndef slv(a, b):\n    for i in range(0, 1001):\n        if a * i >= b:\n            print(i)\n            return\nslv(a, b)"}
{"label": 3, "index": 385, "code": "A, B = map(int, raw_input().split())\nprint (A + B - 1) / A"}
{"label": 3, "index": 386, "code": "x,y = map(int, raw_input().split())\ni = 1\nwhile True:\n    if x*i >= y:\n        break\n    else: i += 1\nprint i\n"}
{"label": 3, "index": 387, "code": "from collections import defaultdict\n\n\ndef main():\n    A, B = map(int, input().split())\n    print(B // A + (B % A != 0))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 3, "index": 388, "code": "import math\n\ndef do_it():\n    a, b = tuple(int(i) for i in input().split())\n    print(math.ceil(b / a))\n\nif __name__ == '__main__':\n    do_it()"}
{"label": 3, "index": 389, "code": "# coding: utf-8\n\ndef main():\n    a, b = map(int, input().split())\n    if b % a == 0:\n        print(b // a)\n    else:\n        print(b // a + 1)\nif __name__ == '__main__':\n    main()"}
{"label": 4, "index": 390, "code": "N = int(raw_input())\ns = []\nfor i in range(N):\n    s.append(raw_input())\n\nfor i in range(N):\n    print ''.join([s[j][i] for j in range(N)])[::-1]\n"}
{"label": 4, "index": 391, "code": "n = int(raw_input())\n\na = []\nfor i in range(0, n):\n\ta.append(raw_input())\n\nfor i in range(0, n):\n\ts = \"\"\n\tfor j in range(n - 1, -1, -1):\n\t\ts += a[j][i]\n\tprint s"}
{"label": 4, "index": 392, "code": "N = int(input())\ns = []\nW = []\nfor i in range(N):\n    for w in input():\n        W.append(w)\n    s.append(W)\n    W = []\nfor i in range(N):\n    for j in range(N-1, -1, -1):\n        if j == 0:\n            print(s[j][i])\n        else:\n            print(s[j][i], end=\"\")\n"}
{"label": 4, "index": 393, "code": "N = int(input())\n\nmat = []\n\nfor i in range(N):\n\tmat.append(input())\n\nfor m in zip(*mat):\n\tprint (\"\".join((reversed(list(m)))))"}
{"label": 4, "index": 394, "code": "N = int(input())\ns = []\nfor i in range(N):\n  ss = input()\n  s.append(ss)\n\nfor i in range(N):\n  ss = \"\"\n  for j in range(N):\n    ss += s[N-1-j][i]\n  print(ss)"}
{"label": 4, "index": 395, "code": "N = input()\nf = [raw_input() for _ in xrange(N)]\nprint \"\\n\".join(\"\".join(ff[::-1]) for ff in zip(*f))\n"}
{"label": 4, "index": 396, "code": "mat = []\nn = int(input())\nfor i in range(n):\n    s = list(input())\n    mat.append(s)\nfor i in range(n):\n    s = \"\"\n    for j in range(n):\n        s += mat[n-1-j][i]\n    print(s)"}
{"label": 4, "index": 397, "code": "\nn = int(raw_input())\n\nxs = [raw_input() for _ in xrange(n)]\n\nprint \"\\n\".join(\"\".join(xs[::-1]) for xs in zip(*xs))\n"}
{"label": 4, "index": 398, "code": "N = int(input())\nmatrix = [\"\" for n in range(N)]\nfor n in range(N):\n    matrix[n] = input()\n\nnewMatrix = [\"\" for n in range(N)]\nfor n in range(N):\n    newMatrix[n] = reversed([m[n] for m in matrix])\n\nfor n in range(N):\n    for m in newMatrix[n]:\n        print(m,end=\"\")\n    print()\n"}
{"label": 4, "index": 399, "code": "#!/usr/bin/env python\n# coding: utf-8 :\n#\n# Author:   Ryo Akita\n# URL:      http://www.ai.cs.kobe-u.ac.jp/~akita/\n# License:  MIT License\n# Created:  2016-04-30\n#\n\nN = int(raw_input())\n\ninputs = []\nfor i in xrange(N):\n    inputs.append(raw_input())\n\nrotate = [['o' for i in xrange(N)] for i in xrange(N)]\nfor i in xrange(N):\n    for j in xrange(N):\n        rotate[j][N - i - 1] = inputs[i][j]\n\nfor l in rotate:\n    print \"\".join(l)\n"}
{"label": 4, "index": 400, "code": "n = int(input())\n\narray = []\nfor i in range(n):\n    array.append(list(input().rstrip()))\n\nrotated = []\nfor i in range(n):\n    rotated.append([])\n    for j in range(n):\n        rotated[i].append(array[n - j - 1][i])\n\nfor i in range(n):\n    print(''.join(rotated[i]))\n"}
{"label": 4, "index": 401, "code": "from collections import defaultdict\n\ndef rotate(field):\n    ans = [[0] * len(field[0]) for _ in range(len(field))]\n    for i in range(len(field)):\n        for j in range(len(field[0])):\n            ans[j][len(field) - i - 1] = field[i][j]\n    return ans\n\n\ndef main():\n    N = int(input())\n    field = [input() for _ in range(N)]\n\n    r = rotate(field)\n    for line in r:\n        print(\"\".join(line))\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 4, "index": 402, "code": "N = int(input())\n\nS = []\n\nfor i in range(N):\n    S.append(input())\n\nfor i in range(N):\n    for j in range(N-1, -1, -1):\n        print(S[j][i], end = \"\")\n    print()"}
{"label": 4, "index": 403, "code": "n = int(input())\nstr = [list(input()) for i in range(n)]\n\n\nstr2 = [[\"\"] * n for i in range(n)]\nfor i in range(n):\n    for j in range(n):\n        str2[i].append(str[n - j - 1][i])\n\nfor i in range(n):\n    print(\"\".join(str2[i]))\n"}
{"label": 4, "index": 404, "code": "n = int(raw_input())\ns = [''] * n\n\nfor i in range(n):\n    s[i] = list(raw_input())\n\nfor i in range(n):\n    t = ''\n    for j in range(n):\n        t += s[n-1-j][i]\n    print t"}
{"label": 4, "index": 405, "code": "N = int(raw_input())\ns = [raw_input() for _ in range(N)]\nfor j in range(N):\n    print \"\".join([s[i][j] for i in range(N)[::-1]])\n"}
{"label": 4, "index": 406, "code": "n = int(input())\n\nmatrix = []\nfor i in range(n):\n    matrix.append(list(input()))\n\n\ndef reverse(matrix_, size_):\n    to_return = [[None for j in range(size_)] for i in range(size_)]\n    for i in range(size_):\n        for j in range(size_):\n            to_return[j][size_ - i - 1] = matrix_[i][j]\n\n    return to_return\n\n\ndef print_matrix(matrix_):\n    for each_line in matrix_:\n        print(\"\".join(each_line))\n\n\nprint_matrix(\n    reverse(\n        matrix, n\n    )\n)\n"}
{"label": 4, "index": 407, "code": "N = int(input())\n\na = []\nfor i in range(N):\n    A = input()\n    a.append(A)\n\nfor j in range(N):\n    for i in range(N - 1,-1,-1):\n        print(a[i][j],end = \"\")\n    print(\"\")"}
{"label": 4, "index": 408, "code": "n = int(raw_input())\narr = list()\nfor i in range(n):\n    arr.append(list(raw_input()))\n\nfor i in range(n/2):\n    for j in range(i, n-i-1):\n        tmp = arr[i][j]\n        arr[i][j] = arr[n-j-1][i]\n        arr[n-j-1][i] = arr[n-i-1][n-j-1]\n        arr[n-i-1][n-j-1] = arr[j][n-i-1]\n        arr[j][n-i-1] = tmp\n\nfor i in range(n):\n    print ''.join(arr[i])"}
{"label": 4, "index": 409, "code": "# coding: utf-8\n\"\"\"docstring\"\"\"\n\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\nfrom __future__ import division\nfrom __future__ import absolute_import\nimport os\nimport sys\nimport codecs\nimport re\nimport collections\n\nn = input()\ntable = []\nfor i in range(n):\n    line = raw_input()\n    table.append(list(line))\n\ns = \"\"\nfor i in range(n):\n    for j in range(n):\n        s += table[-j-1][i]\n    s += \"\\n\"\nprint(s)\n"}
{"label": 4, "index": 410, "code": "n = input()\ns = [raw_input() for i in xrange(n)]\n\nfor i in xrange(n):\n    print ''.join(s[n-1-j][i] for j in xrange(n))\n"}
{"label": 4, "index": 411, "code": "import sys\n\ndef solve():\n    N = int(input())\n    S = [[c for c in input()] for i in range(N)]\n    D = [['' for j in range(N)] for i in range(N)]\n\n    for i in range(N):\n        for j in range(N):\n            D[i][j] = S[N - 1 - j][i]\n\n    for i in range(N):\n        print(''.join(D[i]))\n\ndef debug(x, table):\n    for name, val in table.items():\n        if x is val:\n            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)\n            return None\n\nif __name__ == '__main__':\n    solve()"}
{"label": 4, "index": 412, "code": "N=int(input())\ns=[]\ne=[]\nfor i in range(N):\n a=input()\n s.append(a)\nfor j in range(N):\n ss=\"\"\n for i in range(1,N+1):\n  ss+=s[N-i][j]\n e.append(ss)\n print(e[j])"}
{"label": 4, "index": 413, "code": "N=int(input())\ns=[input() for i in range(N)]\nfor i in range(N):\n\tnew=[s[N-1-j][i] for j in range(N)]\n\tprint(\"\".join(new))\t\t\n"}
{"label": 4, "index": 414, "code": "n = int(input())\nm = [input() for i in range(n)]\na = [[[] for i in range(n)] for j in range(n)]\n\nfor i in range(n):\n    for j in range(n):\n        a[j][n-1-i] = m[i][j]\n        \nfor i in a:\n    print(''.join(map(str, i)))\n"}
{"label": 4, "index": 415, "code": "n = input()\na = []\nfor i in xrange(n):\n  a.append(raw_input())\n\nfor i in xrange(n):\n  ans = \"\"\n  for j in xrange(n):\n    ans += a[n - j - 1][i]\n  print ans\n  \n"}
{"label": 4, "index": 416, "code": "import copy\nN = int(input())\nmatrix = []\nfor i in range(N):\n    tmp = input()\n    matrix.append(list(tmp))\nans = copy.deepcopy(matrix)\nfor i in range(N):\n    for j in range(N):\n        ans[i][j] = matrix[(N - 1) - j][i]\nfor i in range(N):\n    print (\"\".join(ans[i]))\n"}
{"label": 4, "index": 417, "code": "N = int(input())\n#String = input()\n#a,b = (int(i) for i in input().split())\n#Ints = list(map(int, input().split())) #split by space\n#Ints = [int(input()) for _ in range(N)] #split by line\n#Intss = [[int(i) for i in input().split()] for _ in range(N)]\nsss = [list(input()) for _ in range(N)]\n\nar = [[None for col in range(N)] for row in range(N)]\n\nfor i in range(N):\n  for j in range(N):\n    ar[i][j] = sss[N-1-j][i]\n\nfor k in range(N):\n  print(\"\".join(ar[k]))"}
{"label": 4, "index": 418, "code": "\nN = int(input())\nT = [list(input()) for i in range(N)]\n\nfor i in range(N):\n    for j in range(N):\n        print(T[N-j-1][i], end='')\n    print()\n"}
{"label": 4, "index": 419, "code": "n = input()\na = []\n\nfor i in range(n):\n    a.append(raw_input())\n\nfor i in range(n):\n    ans = ''\n    for j in range(n):\n        ans += a[n-j-1][i]\n    print ans\n"}
{"label": 4, "index": 420, "code": "import sys\nn = int(input())\nvv = [[] for i in range(n)]\nfor i in range(n):\n\tvv[i] = input()\nfor i in range(n):\n\tfor j in range(n):\n\t\tsys.stdout.write(vv[n-1-j][i])\n\tprint()"}
{"label": 4, "index": 421, "code": "N=int(input())\nboard=[ list(input()) for _ in range(N) ]\n\n# \u5168\u5ea7\u6a19\u306b\u3064\u3044\u3066\u3001\n# X\u3068Y\u3092\u7f6e\u63db\n# Y\u3092\u53cd\u8ee2\u3057\u305f\u3082\u306e\u3092X\u306b\n\n# print(board)\n\nnewBoard=[ [ None for _ in range(N)] for _ in range(N)]\n\nfor y in range(N):\n\tfor x in range(N):\n\t\tnewBoard[x][N-1-y]=board[y][x]\n\nfor row in newBoard:\n\tprint( ''.join(row) )\n"}
{"label": 4, "index": 422, "code": "n=int(input())\nt=[input() for i in range(n)]\nfor i in range(n): print(''.join([t[n-j-1][i] for j in range(n)]))"}
{"label": 4, "index": 423, "code": "import sys\n\nif __name__ == '__main__':\n    n = input()\n    table     = [['' for y in xrange(n)] for x in xrange(n)]\n    table_ans = [['' for y in xrange(n)] for x in xrange(n)]\n    c = n % 2 \n    if c == 0:\n        c = 1\n    else:\n        c = 0\n    for x in xrange(n):\n        s = raw_input()\n        table[x] = s\n    for x in xrange(n):\n        for y in xrange(n):\n            x_ = x - int(n/2)\n            y_ = y - int(n/2)\n            x__ = y_\n            y__ = -x_\n            x___ = x__ + int(n/2) \n            y___ = y__ + int(n/2) - c\n            table_ans[x___][y___] = table[x][y]\n    for x in xrange(n):\n        for y in xrange(n):\n            sys.stdout.write(table_ans[x][y])\n        sys.stdout.write('\\n')\n"}
{"label": 4, "index": 424, "code": "# -*- coding: utf-8 -*-\n\nfrom __future__ import print_function\n\nn = input()\nl = [[''] * n for i in xrange(n)]\ntmp = [i for i in xrange(n)]\nfor i in xrange(n):\n\tl[i] = list(raw_input())\n\nfor x in xrange(n):\n\tfor i in xrange(n):\n\t\ta = -i-1\n\t\tprint (l[a][x], end = \"\")\n\tprint (\"\\n\")"}
{"label": 4, "index": 425, "code": "# -*- coding: utf-8 -*-\nimport sys,copy,math,heapq,itertools as it,fractions,re,bisect,collections as coll\n\nN = int(raw_input())\ns = [raw_input() for i in xrange(N)]\nfor j in xrange(N):\n    print \"\".join(s[i][j] for i in xrange(N - 1, -1, -1))\n"}
{"label": 4, "index": 426, "code": "n = int(input())\ns = [0] * n\nfor i in range(n):\n    s[i] = list(input())\n\nfor i in range(n):\n    for j in reversed(range(n)):\n        print(s[j][i], end='')\n    print()\n"}
{"label": 4, "index": 427, "code": "N = int(input())\nS = []\nfor _ in range(N):\n    S.append(list(input()))\nfor i in range(N):\n    for j in range(N):\n        print(S[N - j - 1][i], end='')\n    print()\n"}
{"label": 4, "index": 428, "code": "def main():\n    n = int(input())\n    f = []\n    for _ in range(n):\n        f.append(input())\n\n    for x in range(len(f[0])):\n        print(*[f[-y - 1][x] for y in range(len(f))], sep=\"\")\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 4, "index": 429, "code": "N = int(raw_input())\ns = [0 for i in range(N)]\n\nfor i in range(N):\n  s[i] = raw_input()\n\nt = [[0 for j in range(N)] for i in range(N)]\n\nfor i in range(N):\n  for j in range(N):\n    t[j][N-i-1] = s[i][j]\n\nfor i in range(N):\n  print ''.join(t[i])"}
{"label": 4, "index": 430, "code": "n=int(raw_input())\nc=[raw_input() for i in range(n)]\nfor l in zip(*reversed(c)):\n  print \"\".join(l)"}
{"label": 4, "index": 431, "code": "N=int(input())\nS=[]\nS+=[str(input()) for i in range(N)]\n\nR=[\"\"]*N\nfor i in range(N):\n  for j in range(N):\n    R[i]+=S[N-1-j][i]\n[print(R[i]) for i in range(N)]"}
{"label": 4, "index": 432, "code": "def solve():\n    N = int(input())\n    s = []\n    for i in range(N):\n        s.append(input())\n\n    for i in range(N):\n        for j in range(N-1, -1, -1):\n            print(s[j][i], end='')\n        print()\n\n\nif __name__ == '__main__':\n    solve()\n"}
{"label": 4, "index": 433, "code": "n = input()\ns = [raw_input() for i in range(n)]\nfor i in range(n):\n    t = ''\n    for j in range(n):\n        t += s[n - j - 1][i]\n    print t\n"}
{"label": 4, "index": 434, "code": "N = input()\ngrid = [list(raw_input()) for i in range(N)]\nans = [[\"\" for i in range(N)] for j in range(N)]\nfor i in range(N):\n    for j in range(N):\n        ans[j][N-1-i] = grid[i][j]\n\nfor i in range(N):\n    print \"\".join(ans[i])"}
{"label": 4, "index": 435, "code": "n = int(input())\nmatrix = []\nfor _ in range(n):\n    matrix.append(input())\n\nfor y in range(n):\n    for x in range(n):\n        print(matrix[n-1-x][y], end='')\n    print()\n"}
{"label": 4, "index": 436, "code": "n = int(input())\n\nmatrix = []\nfor i in range(n):\n    matrix.append(list(input()))\n\n\ndef reverse(matrix_, size_):\n    to_return = [[None for j in range(size_)] for i in range(size_)]\n    for i in range(size_):\n        for j in range(size_):\n            to_return[j][size_ - i - 1] = matrix_[i][j]\n\n    return to_return\n\n\ndef print_matrix(matrix_):\n    for each_line in matrix_:\n        print(\"\".join(each_line))\n\n\nprint_matrix(\n    reverse(\n        matrix, n\n    )\n)\n"}
{"label": 4, "index": 437, "code": "n = int(input())\ns = [input() for x in range(n)]\nfor i in range(n):\n    o = \"\"\n    for j in range(n):\n        o += s[n-j-1][i]\n    print(o)"}
{"label": 4, "index": 438, "code": "N = input()\nS = [list(raw_input()) for i in range(N)]\nfor row in zip(*S):\n    print \"\".join(row[::-1])"}
{"label": 4, "index": 439, "code": "n = int(input())\nlis = []\nfor i in range(n):\n    lis.append(input())\nans = ''\nfor i in range(n):\n    for j in range(n):\n        ans += lis[n-j-1][i]\n    ans += '\\n'\nprint(ans.strip())\n"}
{"label": 4, "index": 440, "code": "\nn = int(raw_input())\n\n\ndef transpose(m):\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            if i < j:\n                t = m[i][j]\n                m[i][j] = m[j][i]\n                m[j][i] = t\n    return m\n\ndef flip(m):\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            if j < len(m[i]) - j - 1:\n                t = m[i][j]\n                m[i][j] = m[i][len(m[i]) - j - 1]\n                m[i][len(m[i]) - j - 1] = t\n    return m\n\nxs = []\nfor _ in xrange(n):\n    xs.append(list(raw_input()))\n\nfor s in flip(transpose(xs)):\n    print \"\".join(s)\n\n\n\n\n"}
{"label": 4, "index": 441, "code": "# -*- Coding: utf-8 -*-\nfrom decimal import *\nimport sys\nimport io\nimport re\n\ndef main():\n\tn = int(input())\n\tS = []\n\tfor i in range(0,n):\n\t\tS.append(input())\n\t\t\n\t\n\tfor i in range(0,n):\n\t\tfor j in range(n-1,0-1,-1):\n\t\t\tprint(S[j][i], end=\"\")\n\t\tprint(\"\")\n\nif __name__ == '__main__':\n\tmain()\n"}
{"label": 4, "index": 442, "code": "def solve():\n    n = int(input())\n    d = [input() for _ in range(n)]\n    res = [[0]*n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            res[j][n-i-1] = d[i][j]\n    for e in res:\n        print(\"\".join(e))\n\n\nif __name__==\"__main__\":\n    solve()"}
{"label": 4, "index": 443, "code": "n = int(input())\nchizu = [0]*n\n\nfor i in range(n):\n\tchizu[i] = input()\n\nfor i in range(n):\n\tfor j in range(n):\n\t\tprint(chizu[n-1-j][i], end=\"\")\n\tprint()"}
{"label": 4, "index": 444, "code": "N = int(input())\n[print(s) for s in map(\"\".join, zip(*[input() for _ in range(N)][::-1]))]"}
{"label": 4, "index": 445, "code": "N = input()\ns = [list(raw_input()) for _ in range(N)]\nfor i in range(0, N):\n    ans = ''\n    for j in range(N, 0, -1):\n        ans += s[j-1][i]\n    print ans\n"}
{"label": 4, "index": 446, "code": "n = int(raw_input())\ninput = []\nresult = [[0 for i in range(n)] for j in range(n)]\nfor i in range(n):\n    input.append(list(raw_input()))\nfor i in range(n):\n    for j in range(n):\n        result[j][n-1-i] = input[i][j]\nfor a in result:\n    print \"\".join(a)\n"}
{"label": 4, "index": 447, "code": "n = int(input())\ns = [list(input()) for j in range(n)]\nans = [[\"\" for i in range(n)] for j in range(n)]\nfor j in range(n):\n    for i in range(n):\n        ans[i][n-1-j] = s[j][i]\n\nfor j in range(n):\n    print(\"\".join(ans[j][:]))"}
{"label": 4, "index": 448, "code": "n=input()\ns=[[\"a\"]*n for i in xrange(n)]\nfor i in xrange(n):\n    k=0\n    en=raw_input()\n    for j in en:\n        s[i][k]=j\n        k+=1\nss=[[\"a\"]*n for i in xrange(n)]\nfor i in xrange(n):\n    for j in xrange(n):\n        ss[j][n-1-i]=s[i][j]\nfor i in xrange(n):\n    print(''.join(ss[i]))"}
{"label": 4, "index": 449, "code": "N = int(input())\n\nboard = []\nfor i in range(N):\n    board.append(input())\n\nfor i in range(N):\n    print(''.join(s[i] for s in board[::-1]))\n"}
{"label": 4, "index": 450, "code": "N = int(input())\ns = tuple(input() for i in range(N))\nans = tuple(tuple(s[N-1-j][i] for j in range(N)) for i in range(N))\nfor i in range(N):\n    print(''.join(ans[i]))\n"}
{"label": 4, "index": 451, "code": "n = int(input())\ninput_data = []\nfor i in range(n):\n    input_row = input()\n    input_data.append(input_row)\n\nfor j in range(n):\n    for i in range(n-1, -1, -1):\n        print(input_data[i][j], end=\"\")\n    print()"}
{"label": 4, "index": 452, "code": "N = int(input())\na = []\nfor i in range(N):\n a.append(input())\nb = []\nfor i in range(N):\n c = \"\"\n for j in range(N-1, -1, -1):\n  c += a[j][i]\n b.append(c)\nfor i in range(N):\n print(b[i])"}
{"label": 4, "index": 453, "code": "# -*- coding:utf-8 -*-\nN = int(input())\ns = [ list(input()) for tmp in range(N)]\nx, y = (0,N-1)\nwhile x < N:\n    ans = []\n    y = N-1\n    while y >= 0:\n        ans.append(s[y][x])\n        y -= 1\n    print(''.join(ans))\n    x += 1"}
{"label": 4, "index": 454, "code": "# -*- coding: utf-8 -*-\n\nN = int(input())\n\nS = [list(input()) for _ in range(N)]\nassert len(S[0]) == N\n\nfor l in range(int(N/2)):\n    for i in range(l, N-l-1):\n        temp = S[l][i]\n        S[l][i] = S[N-1-i][l]\n        S[N-1-i][l] = S[N-1-l][N-1-i]\n        S[N-1-l][N-1-i] = S[i][N-1-l]\n        S[i][N-1-l] = temp\n\nfor i in range(N):\n    print(''.join(S[i]))\n"}
{"label": 4, "index": 455, "code": "n = int(input())\n\na = []\nfor i in range(n):\n    a.append(input())\n\nfor i in range(n):\n    for\tj in range(n):\n        print(a[n - j - 1][i], end = '')\n#        print(a[n - j - 1][i], end = '')\n    print('')\n\n"}
{"label": 4, "index": 456, "code": "N = int(input())\n\nS = []\n\nfor i in range(N):\n    S.append(input())\n    \nfor i in range(N):\n    for j in range(N):\n        print(S[N-j-1][i],end=\"\")\n        \n    print(\"\")"}
{"label": 4, "index": 457, "code": "N = input()\ns = [raw_input() for _ in range(N)]\nfor y in range(N):\n    print \"\".join(s[N-x-1][y] for x in range(N))\n"}
{"label": 4, "index": 458, "code": "# coding: utf-8\n# Here your code !\nn = input()\nl = [\"\"]*n\nfor i in xrange(n):\n    sn = raw_input()\n    cnt = 0\n    for j in sn:\n        l[cnt] = j + l[cnt]\n        cnt += 1\nfor i in l:\n    print i"}
{"label": 4, "index": 459, "code": "n=int(raw_input())\nl=[]\nfor i in range(n):\n    l.append(raw_input())\n\nfor i in range(n):\n    tmp=''\n    for j in range(n):\n        tmp+=l[j*-1-1][i]\n    print tmp"}
{"label": 4, "index": 460, "code": "#!/usr/bin/env python\n#-*- encoding: utf-8 -*-\n\nimport math\nimport sys\nimport time\n\n\"\"\"\nB - \u56de\u8ee2\n\"\"\"\n\nN = int( raw_input() )\nns = [ raw_input() for _ in xrange( N ) ]\n\nstart = time.clock()\n\nrs = [ [ \"\" for _ in xrange( N ) ] for _ in xrange( N ) ]\n\nfor i in xrange( N ):\n    for j in xrange( N ):\n        rs[i][j] = ns[N-1-j][i]\n\nfor s in rs:\n    print( \"\".join( s ) )\n\nend = time.clock()\n#print end - start\n\nsys.exit(0)"}
{"label": 4, "index": 461, "code": "import sys\nfst = True\nboard = []\nfor l in iter(sys.stdin.readline, ''):\n    if fst:\n        N = int(l.strip())\n        fst = False\n    else:\n        board.append(list(l.strip()))\nrotated = [['' for _ in range(N)] for _ in range(N)]\nfor i in range(N):\n    for j in range(N):\n        rotated[j][i] = board[-(i+1)][j]\nprint '\\n'.join([''.join(b) for b in rotated])\n"}
{"label": 4, "index": 462, "code": "N = int(raw_input())\n\nlattice = [[None for i in range(N)] for i in range(N)]\n\nfor i in range(N):\n\t\n\tll = list(raw_input().rstrip(\"\\n\"))\n\tfor j, word in enumerate(ll):\n\t\tlattice[i][j] = word\n\t\nfor i in range(N):\n\tstr = \"\"\n\tfor j in range(N):\n\t\tstr += lattice[N - j - 1][i]\n\tprint(str)\n"}
{"label": 4, "index": 463, "code": "# coding: utf-8\n# abc036b\n\nn=int(raw_input())\nl=[['' for i in xrange(n)] for j in xrange(n)]\nm=[['' for i in xrange(n)] for j in xrange(n)]\nfor i in xrange(n):\n s=raw_input()\n for j in xrange(n):\n  l[i][j]=s[j]\nfor i in xrange(n):\n for j in xrange(n):\n  m[j][n-i-1]=l[i][j]\nfor i in xrange(n):\n t=\"\"\n for j in xrange(n):\n  t=t+m[i][j]\n print t\n"}
{"label": 4, "index": 464, "code": "n = int(input())\ns = []\nfor i in range(n):\n    s.append(input())\nfor s in zip(*reversed(s)):\n    print(''.join(s))"}
{"label": 4, "index": 465, "code": "N = input()\ndata = [raw_input() for i in range(N)]\nfor i in range(N):\n    l = []\n    for j in range(N):\n        l += [data[j][i]]\n    \n    ret = \"\"\n    for x in reversed(l):\n        ret += x\n    print ret\n"}
{"label": 4, "index": 466, "code": "n = int(input())\na = []\n\nfor i in range(n):\n    a.append(input())\n\nfor i in range(n):\n    x = \"\"\n    for j in range(n):\n        x += a[n - 1 - len(x)][i]\n    print(x)\n"}
{"label": 4, "index": 467, "code": "# coding: utf-8\n\nn = int(input())\ntable = [list(input()) for _ in range(n)]\n[[print(table[y][x]) if y==0 else print(table[y][x], end='') for y in range(n)[::-1]] for x in range(n)]"}
{"label": 4, "index": 468, "code": "# -*- cording: utf-8 -*-\nN=int(raw_input())\ncounter = 1\nlist=[]\nwhile counter <= N:\n    counter+=1\n    list.append(raw_input())\n\nrow_counter=1\ncolumn_counter=1\ns=''\nwhile  row_counter <= N:\n    column_counter=1\n    while column_counter <= N:\n        s+=list[N-column_counter][row_counter-1]\n        column_counter+=1\n    print s\n    s=''\n    row_counter+=1"}
{"label": 4, "index": 469, "code": "N = int(input())\nS = [input() for i in range(N)]\nfor y in range(N):\n    for x in range(N):\n        print(S[N - x - 1][y], end=\"\")\n    print(\"\")\n"}
{"label": 4, "index": 470, "code": "n = int(input())\n\nmatrix = []\nfor i in range(n):\n    matrix.append(list(input()))\n\n\ndef reverse(matrix_, size_):\n    to_return = [[None for j in range(size_)] for i in range(size_)]\n    for i in range(size_):\n        for j in range(size_):\n            to_return[j][i] = matrix_[i][j]\n\n    for i in range(size_):\n        to_return[i] = to_return[i][::-1]\n\n    return to_return\n\n\ndef print_matrix(matrix_):\n    for each_line in matrix_:\n        print(\"\".join(each_line))\n\n\nprint_matrix(\n    reverse(\n        matrix, n\n    )\n)\n"}
{"label": 4, "index": 471, "code": "n = int(input())\ns = [input() for _ in range(n)]\nprint('\\n'.join(''.join(s[n - 1- j][i] for j in range(n)) for i in range(n)))"}
{"label": 4, "index": 472, "code": "n = input()\ns = [raw_input().strip() for _ in range(n)]\ns = [[a for a in b] for b in s]\nfor i in range(n):\n    for j in range(i + 1, n):\n        s[i][j], s[j][i] = s[j][i], s[i][j]\n\nfor c in s:\n    print \"\".join(c[::-1])"}
{"label": 4, "index": 473, "code": "n = int(input())\ns = [list(input()) for i in range(n)]\nans = [[None] * n for i in range(n)]\n\nfor i in range(n):\n    for j in range(n):\n        ans[j][n - 1 - i] = s[i][j]\n\nfor i in ans:\n    print(''.join(i))\n"}
{"label": 4, "index": 474, "code": "# -*- coding: utf-8 -*-\nimport sys\n\nN = int(raw_input())\n\nMATRIX = list()\nfor i in xrange(N):\n    l = list(raw_input())\n    MATRIX.append(l)\n    \nfor y in range(N):\n    for x in xrange(N):\n        sys.stdout.write(str(MATRIX[N-1-x][y]))\n    sys.stdout.write(\"\\n\")\n"}
{"label": 4, "index": 475, "code": "n = int(input())\n\na = []\n\nfor i in range(n):\n    a.append(input())\n \nfor i in range(n):\n    for j in range(n):\n        print(a[n - j - 1][i], end = '')\n    print()"}
{"label": 4, "index": 476, "code": "N = int(input())\nS = [input().strip() for _ in range(N)]\nprint(\"\\n\".join(\"\".join([S[j][i] for j in reversed(range(N))]) for i in range(N)))"}
{"label": 4, "index": 477, "code": "# -*- coding: utf-8 -*-\n\nn = int(raw_input())\nmat = [[\"\" for i in range(n)]for j in range(n)]\nMmat = [[\"\" for i in range(n)]for j in range(n)]\nNmat = [[\"\" for i in range(n)]for j in range(n)]\nfor i in range(n):\n    st = str(raw_input())\n    for j in range(n):\n        mat[i][j] = st[j:j+1]\n\nfor i in range(n):\n    for j in range(n):\n        Mmat[i][j] = mat[j][i]\n#print Mmat\n\nfor i in range(n):\n    ans = \"\"\n    for j in range(n):\n        Nmat[i][j] = Mmat[i][n-1-j]\n        ans += Nmat[i][j]\n    print ans\n#print Nmat"}
{"label": 4, "index": 478, "code": "N = int(raw_input())\nclockwise = [[0] * N for _ in range(N)]\nfor i in range(N):\n    row = raw_input()\n    for ii in range(N):\n        clockwise[ii][N - 1 - i] = row[ii]\nfor i in range(N):\n    print(''.join(clockwise[i]))\n"}
{"label": 4, "index": 479, "code": "n = int(input())\nlis = []\nfor i in range(n):\n    s = input()\n    lis.append(s)\nans = \"\"\nfor i in range(n):\n    for j in range(n):\n        ans += lis[n-j-1][i]\n    print(ans)\n    ans = \"\""}
{"label": 4, "index": 480, "code": "N = int(raw_input())\ns = [\" \" for i in range(N)]\nfor i in range(N):\n  s[i] = raw_input()\ndef nc(s, i, j):\n  return s[N - 1 - j][i]\nimport sys\nfor i in range(N):\n  for j in range(N):\n    if j == N-1:\n      print nc(s, i, j)\n    else:\n      sys.stdout.write(nc(s, i, j))\n"}
{"label": 4, "index": 481, "code": "#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n\ndef main():\n    N = int(input())\n    s = [input() for _ in range(N)]\n    for w in range(N):\n        print(\"\".join([s[h][w] for h in range(N)][::-1]))\n\nif __name__ == \"__main__\":\n    main()\n"}
{"label": 4, "index": 482, "code": "n=int(input())\na=[[i for i in input()] for j in range(n)]\nb=[[\"\"]*n for i in range(n)]\nfor i in range(n):\n    for j in range(n):\n        b[j][n-1-i]=a[i][j]\nfor i in range(n):\n    for j in range(n):\n        print(b[i][j],end=\"\")\n    print()"}
{"label": 4, "index": 483, "code": "# -*- coding: utf-8 -*-\n\nn = int(input())\na = [[] for i in range(n)]\nfor i in range(n):\n\ta[i] = input()\nfor i in range(n):\n\tfor j in range(n):\n\t\tprint(a[n-j-1][i],end=\"\")\n\tprint()"}
{"label": 4, "index": 484, "code": "import sys\nimport copy\nN = int(input())\nI = [list(input()) for i in range(N)]\nA = copy.deepcopy(I)\nfor i in range(N):\n    for j in range(N):\n        A[j][i] = I[i][j]\nfor i in range(N):\n    for j in range(N):\n        sys.stdout.write(A[i][N-j-1])\n    print()\n"}
{"label": 4, "index": 485, "code": "# -*- coding: utf-8 -*-\n\n\ndef solve(N, test_data=None):\n    l = [[0] * N for _ in range(N)]\n\n    for i in range(N):\n        row = input()\n        for j, cell in enumerate(row):\n            l[i][j] = cell\n\n    ret = [[0] * N for _ in range(N)]\n\n    for t in range(N):\n        for u in range(N-1, -1, -1):\n            ret[t][u] = l[u][t]\n\n    for r in ret:\n        print(\"\".join(reversed(r)))\n\n\nif __name__ == '__main__':\n    N = int(input())\n    solve(N)\n\n"}
{"label": 4, "index": 486, "code": "N = int(input())\narr=[list(input()) for i in range(N)]\nfor i in range(N):\n    for j in range(N - 1,-1,-1):\n        print (arr[j][i], end='')\n    print('')"}
{"label": 4, "index": 487, "code": "n = input()\ns = []\nfor i in range(n):\n    s.append(raw_input())\nans = []\nfor i in range(n):\n    ans.append([])\n    for j in range(n):\n        ans[i].append(s[n-j-1][i])\n        \nfor i in range(n):\n    print ''.join(ans[i])\n"}
{"label": 4, "index": 488, "code": "import sys\nn = int(input())\ns = [[0 for i in range(n)] for j in range(n)]\n\nfor i in range(n):\n    s[i] = raw_input()\n\nfor i in range(n):\n    for j in range(n):\n        sys.stdout.write(s[n-j-1][i])\n    print \"\"\n"}
{"label": 4, "index": 489, "code": "n=input()\na=[]\nfor i in range(n): a.append(list(raw_input()))\nfor i in range(n):\n s=\"\"\n for j in range(n): s+=a[n-j-1][i]\n print s"}
{"label": 4, "index": 490, "code": "n = int(input())\nli = []\n\nfor i in range(n):\n    s = input()\n    li.append(s)\n\nans = \"\".join(map(str, li))\n\nfor i in range(n):\n    target = ans[i::n]\n    target = target[::-1]\n    print(target)\n"}
{"label": 4, "index": 491, "code": "n = int(input())\nx = []\ny = []\nstr = \"x\" * n\nfor i in range(n):\n    x.append(list(input()))\n    y.append(list(str))\n\nfor i in range(n):\n    for j in range(n):\n        y[j][n-1-i] = x[i][j]\n\nfor i in range(n):\n    for j in range(n):\n        print(y[i][j], end=\"\")\n    print()\n"}
{"label": 4, "index": 492, "code": "n = input()\nm = [[0 for i in range(n)] for j in range(n)]\n\nfor i in range(n):\n\tq = raw_input()\n\tfor j in range(n):\n\t\tm[i][j] = q[j]\n\nmm = [[0 for i in range(n)] for j in range(n)]\n\nfor i in range(n):\n\tfor j in range(n):\n\t\tmm[j][n - i - 1] = m[i][j]\n\nfor i in range(n):\n\ts = \"\"\n\tfor j in range(n):\n\t\ts = s + mm[i][j]\n\tprint s"}
{"label": 4, "index": 493, "code": "n = int(input())\n\na = []\nfor i in range(n):\n    a.append(input())\n\nfor i in range(n):\n    for\tj in range(n):\n#        print(a[n - j - 1][i], end = '')\n        print(a[n - j - 1][i], end = '')\n    print('')\n\n"}
{"label": 4, "index": 494, "code": "n = int(raw_input())\nl = [raw_input() for _ in range(n)]\nls = []\nfor x in range(n):\n    s = ''\n    for y in range(n-1, -1, -1):\n        s += l[y][x]\n    ls.append(s)\nfor s in ls:\n    print s\n"}
{"label": 4, "index": 495, "code": "import sys\nn = input()\ns = []\nfor i in xrange(n):\n\ts.append(raw_input())\nfor i in xrange(n):\n\tfor j in xrange(n):\n\t\tsys.stdout.write(s[n-1-j][i])\n\tprint\"\""}
{"label": 4, "index": 496, "code": "n=int(raw_input())\nl=[]\nfor i in range(n):\n    l.append(raw_input())\nfor i in range(n):\n    t=''\n    for j in range(n):\n        t+=l[-1*(j+1)][i]\n    print t"}
{"label": 4, "index": 497, "code": "n = int(raw_input())\nls = [raw_input().strip() for i in xrange(n)]\n\nans = [[None] * n for i in xrange(n)]\nfor i in xrange(n):\n    for j in xrange(n):\n        ans[i][j] = ls[n-1-j][i]\nfor i in xrange(n):\n    print ''.join(ans[i])\n"}
{"label": 4, "index": 498, "code": "def rotate90(s):\n    n = len(s)\n    ret = [['?' for i in range(n)] for j in range(n)]\n    for y in range(n):\n        for x in range(n):\n            ret[y][x] = s[n-1-x][y]\n    return ret\n\ndef main():\n    n = int(input())\n    s = [[c for c in input()] for i in range(n)]\n    s = rotate90(s)\n    for i in range(n):\n        print(\"\".join(s[i]))\n\nif __name__ == \"__main__\":\n    main()"}
{"label": 4, "index": 499, "code": "def ri(): return int(input())\ndef rli(): return list(map(int, input().split()))\ndef rls(): return list(input())\ndef pli(a): return \"\".join(list(map(str, a)))\n\nn = ri()\ns = [0 for j in range(n)]\nfor i in range(n):\n    s[i] = rls()\nfor i in range(n):\n    for j in range(n)[::-1]:\n        print(s[j][i],end='')\n    print(\"\")"}
{"label": 4, "index": 500, "code": "#coding:utf-8\n\nN=input()\nc=[list(raw_input()) for i in range(N)]\nc1=[['x']*N for i in range(N)]\n\nfor i in range(N):\n\tfor j in range(N):\n\t\tc1[j][N-1-i]=c[i][j]\n\nfor i in c1:\n\tprint ''.join(i)\n"}
{"label": 4, "index": 501, "code": "from sys import stdin\na = []\nfor line in stdin:\n    a.append(str(line))\nb,d=len(a),[]\nfor i in xrange(b):\n    c=map(str,a[i][:-1].split(\" \"))\n    d.append(c)\nx=int(d[0][0])\ny=d[1:]\ne=\"\"\nfor i in range(x):\n    for j in range(x-1,-1,-1):\n        e=e+y[j][0][i]\n        if j==0:\n            print(e)\n            e=\"\""}
{"label": 4, "index": 502, "code": "# coding: utf-8\n\ndef main():\n    n = int(input())\n    rs = [['' for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        s = input()\n        for j in range(n):\n            rs[j][n - i - 1] = s[j]\n    for l in rs:\n        print(''.join(l))\n\nif __name__ == '__main__':\n    main()"}
{"label": 4, "index": 503, "code": "n = int(input())\ns = [['' for j in range(n)] for i in range(n)]\nfor i in range(n):\n    t = input()\n    for j in range(n):\n        s[j][n-i-1] = t[j]\nfor i in range(n):\n    print(''.join(s[i]))\n"}
{"label": 4, "index": 504, "code": "# coding:utf-8\n\nn = input()\ncurcuit = [list(raw_input()) for i in range(n)]\n\nfor i in range(n):\n    line = \"\"\n    for j in range(n):\n        line += curcuit[j][i]\n    print line[::-1]\n"}
{"label": 4, "index": 505, "code": "n = int(input())\ns = []\nfor _ in range(n):\n\ts.append(input())\n\nout = []\nfor i in range(n):\n\tfor j in range(n):\n\t\tout.append(s[-(j+1)][i])\n\t\nfor i in range(n):\n\tprint(\"\".join(out[i*n:(i+1)*n]))"}
{"label": 4, "index": 506, "code": "n = input()\na = []\n \nfor i in range(n):\n    a.append(raw_input())\n \nfor i in range(n):\n    b = ''\n    for j in range(n):\n        b += a[n-j-1][i]\n    print b"}
{"label": 4, "index": 507, "code": "n = int(input())\ns = []\nfor i in range(n):\n    s.append(list(input()))\nfor i in range(n):\n    for j in range(n):\n        print(s[n-1-j][i], end='')\n    print()"}
{"label": 4, "index": 508, "code": "a=[input() for _ in [0]*int(input())]\na=list(zip(*a[::-1]))\nfor x in a:print(*x,sep='')"}
{"label": 4, "index": 509, "code": "N = int(input())\nmat = []\nfor _ in range(N):\n    mat.append(input())\nfor i in range(N):\n    ans = \"\"\n    for j in range(N):\n        ans += mat[N - j - 1][i]\n    print(ans)\n"}
{"label": 4, "index": 510, "code": "import sys\n\ndef main():\n    count = int(sys.stdin.readline())\n    pattern = [x.strip() for x in sys.stdin.readlines()]\n    for x in zip(*reversed(pattern)):\n        print \"\".join(x)\n\nif __name__ == '__main__':\n    main()"}
{"label": 4, "index": 511, "code": "N = int(input())\n\narr1 = [input() for i in range(N)]\narr2 = [[None for col in range(N)] for row in range(N)]\nfor i in range(N):\n    for j in range(N):\n        arr2[i][j] = arr1[N-1-j][i]\n\nfor k in range(N):\n    print(\"\".join(arr2[k]))"}
{"label": 4, "index": 512, "code": "a = input()\nb = [[0 for i in range(a)] for j in range(a)]\nfor i in range(a):\n\tc = raw_input()\n\tfor j in range(a):\n\t\tb[i][j] = c[j]\n\nd = [[0 for i in range(a)] for j in range(a)]\n\nfor i in range(a):\n\tfor j in range(a):\n\t\td[i][j] = b[a-j-1][i]\n\nfor i in range(a):\n\tprint \"\".join(d[i])\n"}
{"label": 4, "index": 513, "code": "n = input()\ns = [raw_input() for i in range(n)]\nfor i in range(n):\n    print ''.join([s[n - j - 1][i] for j in range(n)])\n"}
{"label": 4, "index": 514, "code": "def main():\n    N = int(input())\n    S = [input() for i in range(N)]\n\n    s = S[::-1]\n    for i in range(N):\n        for j in range(N):\n            print(s[j][i], end='')\n        print('')\n\nmain()\n"}
{"label": 4, "index": 515, "code": "n = int(input())\n\na = []\nfor i in range(n):\n    a.append(input())\n\nfor i in range(n):\n    for j in range(n):\n        print(a[n - j - 1][i], end = '')\n#        print(a[n - j - 1][i], end = '')\n    print('')\n\n"}
{"label": 4, "index": 516, "code": "n = int(input())\n\nlst = []\n\nfor i in range(n) :\n    lst.append(input())\n\nfor i in range(n) :\n    s = \"\"\n    j = n - 1\n    while (j >= 0) :\n        s += lst[j][i]\n        j -= 1\n    print(s)\n"}
{"label": 4, "index": 517, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport itertools\n\n\ndef rotate(size, board):\n    new_board = [[\".\" for _ in range(size)] for _ in range(size)]\n    for r0, c0 in itertools.product(range(size), repeat=2):\n        (r, c) = (c0, size - r0 - 1)\n        assert r >= 0\n        assert c >= 0\n        new_board[r][c] = board[r0][c0]\n    return new_board\n\n\ndef main():\n    size = int(input())\n    board = [list(input()) for _ in range(size)]\n    new_board = rotate(size, board)\n    for line in new_board:\n        print(\"\".join(line))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 4, "index": 518, "code": "N = int(raw_input())\nS = [list(raw_input()) for i in xrange(N)]\nfor i in xrange(N):\n\tprint \"\".join(S[N-1-j][i] for j in xrange(N))"}
{"label": 4, "index": 519, "code": "from copy import deepcopy\nnum = input()\narr = [['o' for i in range(num)] for j in range(num)]\nfor i in range(num) :\n    arr[i] = list(raw_input())\ntemp = deepcopy(arr)\nstring = [\"\" for i in range(num)]\n\nfor i in range(num):\n    for j in range(num):\n        arr[i][j] = temp[num-j-1][i]\n\nfor i in xrange(num):\n    for j in xrange(num):\n        string[i] = string[i] + str(arr[i][j])\n    print string[i]\n"}
{"label": 5, "index": 520, "code": "# coding:utf-8\ndef main():\n\tline = map(int,raw_input().split(u' '))\n\td = min(line[0],line[1])\n\tif 1<=line[0]<=1000 and 1<=line[1]<=1000 and 1<=line[2]<=10000000:\n\t\tprint line[2]/d\n\telse:\n\t\tprint 'Error'\n\nif __name__=='__main__':\n\tmain()"}
{"label": 5, "index": 521, "code": "entry = raw_input().split(' ')\nA = int(entry[0])\nB = int(entry[1])\nC = int(entry[2])\nresult = C / min(A,B)\nresult += (C % min(A,B)) / max(A,B)\nprint result"}
{"label": 5, "index": 522, "code": "a, b, c = map(int, input().split())\nprint(c // min(a, b))\n"}
{"label": 5, "index": 523, "code": "A,B,C = map(int, raw_input().split())\nprint C/min(A,B)\n"}
{"label": 5, "index": 524, "code": "a, b, c = map(int, input().split())\nprint(c//min(a,b))"}
{"label": 5, "index": 525, "code": "a,b,c = map(int,raw_input().split(' '))\n\nif a > b:\n    print c/b\nelse:\n    print c/a"}
{"label": 5, "index": 526, "code": "a, b, c = map(int, input().split())\nprint(c // min(a, b))"}
{"label": 5, "index": 527, "code": "#coding:utf-8\nnum=input()\nnum=num.split()\na1=min(int(num[0]),int(num[1]))\na2=max(int(num[0]),int(num[1]))\nb=int(num[2])//a1\n\nprint(b)\n"}
{"label": 5, "index": 528, "code": "def read_int_list():\n    return list(int(i) for i in input().split())\n \na,b,c=read_int_list()\nprint(c//min(a,b))"}
{"label": 5, "index": 529, "code": "a, b, c = map(int, input().split())\nprint(c // min(a, b) + c % min(a, b) // max(a, b))"}
{"label": 5, "index": 530, "code": "a, b, c = map(int, raw_input().split())\n\nif a < b:\n    print c / a\nelse:\n    print c / b\n"}
{"label": 5, "index": 531, "code": "a, b, c = map(int, input().split())\nprint(c // a if a <= b else c // b)"}
{"label": 5, "index": 532, "code": "A,B,C =map(int,input().split())\n\nif A<B:\n    print(C//A)\n\nelse:\n    print(C//B)"}
{"label": 5, "index": 533, "code": "A, B, C = map(int, raw_input().split())\nprint C / min(A, B)\n"}
{"label": 5, "index": 534, "code": "a,b,c=map(int,raw_input().split())\nprint c/min(a,b)"}
{"label": 5, "index": 535, "code": "a, b, c = (int(x) for x in input().split())\n\nfunc = lambda x, y: c//x + (c-(c//x)*x)//b\n\nif a < b:\n    print(func(a, b))\nelse:\n    print(func(b, a))\n"}
{"label": 5, "index": 536, "code": "a, b, c = map(int,input().split())\nprint(c//min(a,b))"}
{"label": 5, "index": 537, "code": "a, b, c = map(int, input().split())\n\nif a<b:\n    print(int(c/a))\nelse:\n    print(int(c/b))\n"}
{"label": 5, "index": 538, "code": "A,B,C = map(int, raw_input().split())\nprint C / min(A,B)"}
{"label": 5, "index": 539, "code": "a, b, c = map(int, input().split())\nif a < b:   d = a\nelse:   d = b\nprint(c//d)"}
{"label": 5, "index": 540, "code": "a, b, c = map(int, input().split())\nh = max(a, b)\nl = min(a, b)\nprint(c//l)\n"}
{"label": 5, "index": 541, "code": "A, B, C = map(int, input().split())\nr = C // min(A, B)\nprint(r)"}
{"label": 5, "index": 542, "code": "A, B, C = map(int, raw_input().split())\ni = 0\nmx = 0\nwhile A * i <= C:\n    mx = max(mx, i + (C - A * i) / B)\n\n    i += 1\n\nprint mx\n"}
{"label": 5, "index": 543, "code": "A,B,C = map(int,raw_input().split())\nprint C / min(A,B)"}
{"label": 5, "index": 544, "code": "a,b,c = map(int,input().split())\n\nif a < b:\n    print(c//a)\nelse:\n    print(c//b)"}
{"label": 5, "index": 545, "code": "# coding: utf-8;\n\ndef main():\n    a, b, c = map(int, input().split())\n    print(c // min(a, b))\n    \nif __name__ == '__main__':\n    main()\n"}
{"label": 5, "index": 546, "code": "import math\nA,B,C = map(int, input().split())\n\nif A < B:\n    print(math.floor(C/A))\nelse:\n    print(math.floor(C/B))\n"}
{"label": 5, "index": 547, "code": "a,b,c = map(int, raw_input().split())\nprint(c//min(a,b))\n"}
{"label": 5, "index": 548, "code": "# -*- coding:utf-8 -*-\nA,B,C = map(int, input().split())\nprint(C//min(A,B))"}
{"label": 5, "index": 549, "code": "a, b, c = map(int, raw_input().split())\n\nif a <= b:\n    print c / a\nelse:\n    print c / b\n"}
{"label": 5, "index": 550, "code": "def main():\n    A, B, C = map(int, input().split())\n\n    ans = C // min(A, B)\n    print(ans)\n\nmain()\n"}
{"label": 5, "index": 551, "code": "A,B,C = map(int, input().split())\nif A > B:\n    print(int(C/B))\nelse:\n    print(int(C/A))"}
{"label": 5, "index": 552, "code": "a,b,c=map(int,raw_input().split(' '));print c/min(a,b)\n"}
{"label": 5, "index": 553, "code": "\ndef solve(A, B, C):\n    return C // min(A, B)\n\n\nif __name__ == '__main__':\n    from sys import stdin\n    A, B, C = map(int, stdin.readline().strip().split())\n    ans = solve(A, B, C)\n    print(ans)"}
{"label": 5, "index": 554, "code": "a, b, c = map(int, input().split())\nprint(c//min(a, b))"}
{"label": 5, "index": 555, "code": "a, b, c = list(map(int, input().split()))\nprint(int(c / min(a, b)))\n"}
{"label": 5, "index": 556, "code": "# -*- coding: utf-8 -*-\nfrom math import floor\n\n\na, b, c = map(int, input().split())\n\n\ndef main(a, b, c):\n    n = 0\n    low, high = (a, b) if a < b else (b, a)\n\n    n += floor(c / low)\n    c -= n * low\n\n    n += floor(c / high)\n\n    return n\n\n\nprint(main(a, b, c))"}
{"label": 5, "index": 557, "code": "l = list(map(int, input().split()))\n\nif l[0] > l[1]:\n    print(l[2] // l[1])\nelse:\n    print(l[2] // l[0])\n\n"}
{"label": 5, "index": 558, "code": "a, b, c = map(int, input().split())\n\nif a<=b:\n    print(c//a)\nelse:\n    print(c//b)"}
{"label": 5, "index": 559, "code": "a,b,c = map(int, input().split(' '))\nprint(c//min(a,b))"}
{"label": 5, "index": 560, "code": "a,b,c=map(int,input().split())\nprint(c//min(a,b))"}
{"label": 5, "index": 561, "code": "a, b, c = map(int, raw_input().split())\nif a < b:\n    a, b = b, a\nprint(c / b)\n"}
{"label": 5, "index": 562, "code": "A, B, C = list(map(int, input().split()))\nprint(C // min(A, B))\n"}
{"label": 5, "index": 563, "code": "a,b,c = list(map(int, input().split()))\nif a<=b:\n\tprint((int)(c/a))\nelse:\n\tprint((int)(c/b))"}
{"label": 5, "index": 564, "code": "A,B,C=map(int,raw_input().split())\nif A<B:\n    print(C/A)\nelse:\n    print(C/B)"}
{"label": 5, "index": 565, "code": "A,B,C=map(int,input().split())\nsmaller=min(A,B)\nprint(C//smaller)\n"}
{"label": 5, "index": 566, "code": "a,b,c = map(int,input().split())\nprint(max(c//a,c//b))\n"}
{"label": 5, "index": 567, "code": "a, b, c = map(int, raw_input().split())\nma = 0\n\nfor i in range(c / a + 1):\n\tma = max((c - i * a) / b + i, ma)\n\nprint ma"}
{"label": 5, "index": 568, "code": "a, b, c = map(int, input().split())\nprint(max(c // a, c // b))\n"}
{"label": 5, "index": 569, "code": "a = list(map(int, input().split()))\nif a[0]<=a[1]:\n\tprint((int)(a[2]/a[0]))\nelse:\n\tprint((int)(a[2]/a[1]))"}
{"label": 5, "index": 570, "code": "# _*_ encoding: utf-8 _*_\n\na, b, c = map(int, raw_input().split())\n\nmini = min(a, b)\nsum = ret = 0\n\nwhile True:\n\tsum += mini\n\tif sum > c:\n\t\tbreak\n\telse:\n\t\tret += 1\n\nprint ret"}
{"label": 5, "index": 571, "code": "a,b,c = map(int,input().split())\nprint(c//min(a,b))"}
{"label": 5, "index": 572, "code": "line = map(int,raw_input().split(\" \"))\n\nif (line[2]- line[2]%line[0]) / line[0] >(line[2]-line[2]%line[1]) /line[1]:\n    print (line[2]-line[2]%line[0])/line[0]\nelse :\n    print (line[2]-line[2]%line[1])/line[1]\n"}
{"label": 5, "index": 573, "code": "a,b,c = map(int, raw_input().split())\ncheaper = min(a,b)\nbuy_num = c / cheaper\nprint str(buy_num)"}
{"label": 5, "index": 574, "code": "# coding: utf-8\n\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\nfrom __future__ import division\nfrom __future__ import absolute_import\nimport math\nimport string\nimport itertools\nimport fractions\nimport heapq\nimport collections\nimport re\nimport array\nimport bisect\n\ndef array2d(d1, d2, init = None):\n    return [[init for _ in range(d1)] for _ in range(d2)]\n\na, b, c = map(int, input().split(\" \"))\nprint(c // min(a, b))\n"}
{"label": 5, "index": 575, "code": "# -*- coding: utf-8 -*-\n\na, b, c = map(int,input().split())\n\nif a > b:\n    a = b\n\nprint(int(c/a))\n"}
{"label": 5, "index": 576, "code": "a, b, c = input().split()\na, b, c = int(a), int(b), int(c)\ncount = 0\nif a < b:\n    kau = a\nelse:\n    kau = b\n\nwhile c >= kau:\n    c -= kau\n    count += 1\n\nprint(count)\n"}
{"label": 5, "index": 577, "code": "def ini(): return int(input())\ndef inli(): return list(map(int, input().split()))\ndef inf(): return float(input())\ndef inlf(): return list(map(float, input().split()))\ndef inl(): return list(input())\ndef pli(): return \"\".join(list(map(str, ans)))\n\nx = inli()\na = x[0]\nb = x[1]\nc = x[2]\n\nif a<b:\n    print(int(c/a))\nelse:\n    print(int(c/b))"}
{"label": 5, "index": 578, "code": "# -*- coding: utf-8 -*-\n\na,b,c, = map(int,input().split())\na = min(a,b)\nprint(c//a)"}
{"label": 5, "index": 579, "code": "A, B, C = map(int, input().split())\nif A > B:\n    A, B = B, A\nc = C // A\nc += (C - A * c) // B\nprint(c)\n"}
{"label": 5, "index": 580, "code": "# coding: utf-8\n\n# \u6574\u6570\u306e\u5165\u529b\nA,B,C = map(int, raw_input().split())\n\nh_price = 0\nl_price = 0\nnum = 0\n\nif(A<B):\n    h_price = B\n    l_price = A\n    \nelse:\n    h_price = A\n    l_price = B  \n    \nnum = C/l_price\n\n\n\n# \u51fa\u529b\nprint str(num)"}
{"label": 5, "index": 581, "code": "data = input()\ndata = data.split()\nA = int(data[0])\nB = int(data[1])\nC = int(data[2])\n\nif(A < B):\n    count = int(C/A)\nelse:\n    count = int(C/B)\n\nprint(count)\n"}
{"label": 5, "index": 582, "code": "a, b,c = map(int, input().split())\nprint(max(c//a,c//b))\n"}
{"label": 5, "index": 583, "code": "a, b, c = map(int, raw_input().split())\nif a>=b:\n    print c/b\nelse:\n    print c/a"}
{"label": 5, "index": 584, "code": "manjus = map(int, raw_input().split(\" \"))\nprint manjus[2]/manjus[0] if manjus[0] < manjus[1] else manjus[2] / manjus[1]"}
{"label": 5, "index": 585, "code": "A, B, C = map(int, input().split())\n\nprint( max(C//A, C//B))\n"}
{"label": 5, "index": 586, "code": "a,b,c=map(int,input().split());print(int(c/min(a,b)))"}
{"label": 5, "index": 587, "code": "print((lambda a: a[2]//min(a[0], a[1]))([int(i) for i in input().split()]))"}
{"label": 5, "index": 588, "code": "a, b, c = map(int, input(). split())\nx = min(a, b)\ncnt = 0\n\nwhile True:\n    if c < x:\n        break\n    c -= x\n    cnt += 1\n\nprint(cnt)"}
{"label": 5, "index": 589, "code": "a, b, c = map(int, input().split())\nprint(int(c / min(a, b)))"}
{"label": 5, "index": 590, "code": "from Queue import * # Queue, LifoQueue, PriorityQueue\nfrom bisect import * #bisect, insort\nfrom collections import * #deque, Counter,OrderedDict,defaultdict\n#set([]) \nimport math\nimport copy\nimport itertools\nimport string\nimport sys\nmyread = lambda : map(int,raw_input().split())\ndef solver():\n    A,B,C = myread()\n    A = min(A,B)\n    print C / A\n\n\n\nif __name__ == \"__main__\":\n    solver()\n    \n"}
{"label": 5, "index": 591, "code": "def main():\n    a, b, c = map(int, input().split())\n    print(max(c // a, c // b))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 5, "index": 592, "code": "def ri(): return int(input())\ndef rli(): return list(map(int, input().split()))\ndef rls(): return list(input())\ndef pli(a): return \"\".join(list(map(str, a)))\n\na,b,c = rli()\nprint(c // min(a,b))"}
{"label": 5, "index": 593, "code": "a, b, c = map(int, raw_input().split())\nprint max(c/a, c/b)\n"}
{"label": 5, "index": 594, "code": "a,b,c = map(int,raw_input().split())\nif a > b:\n\tprint c / b\nelse:\n\tprint c / a\n"}
{"label": 5, "index": 595, "code": "a,b,c = map(int,raw_input().split())\n\nif a < b:\n    print c / a\nelse:\n    print c / b"}
{"label": 5, "index": 596, "code": "l = map(int, raw_input().split())\nprint l[2]/min(l[1],l[0])"}
{"label": 5, "index": 597, "code": "A, B, C = map(int, raw_input().split())\nprint C/min(A, B)\n"}
{"label": 5, "index": 598, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\ncost_a, cost_b, my_money = map(int, input().split())\ncheaper = min(cost_a, cost_b)\nnum_manju = my_money // cheaper\nprint(num_manju)"}
{"label": 5, "index": 599, "code": "a,b,c = map(int, raw_input().split())\n\nif a<b:\n\tprint c/a\nelse:\n\tprint c/b"}
{"label": 5, "index": 600, "code": "a,b,c = [int(i) for i in input().split()]\na = min(a, b)\nprint(c//a)"}
{"label": 5, "index": 601, "code": "a,b,c=map(int,input().split());print(c//min(a,b))"}
{"label": 5, "index": 602, "code": "A, B, C = map(int, raw_input().split())\nif A > B :\n\tprint C/B\nelse :\n\tprint C/A"}
{"label": 5, "index": 603, "code": "a,b,c=map(int,raw_input().split())\na=min(a,b)\nprint c/a"}
{"label": 5, "index": 604, "code": "A, B, C = map(int, raw_input().split())\nprint C / min(A, B)"}
{"label": 5, "index": 605, "code": "a,b,c = map(int, raw_input().split())\nif a > b:\n\tprint c/b\nelse:\n\tprint c/a"}
{"label": 5, "index": 606, "code": "A,B,C = map(int, input().split())\nresult = 0\nif(A>B):\n    result = int(C/B)\nelse:\n    result = int(C/A)\nprint(result)\n"}
{"label": 5, "index": 607, "code": "a,b,c = [ int(x) for x in input().split()]\nm = min(a,b)\n\nprint(c//m)\n"}
{"label": 5, "index": 608, "code": "a,b,c = map(int,input().split())\nprint(c//min(a,b))"}
{"label": 5, "index": 609, "code": "a,b,c = map(int, input().split())\na = min(a, b)\nprint (c // a)\n"}
{"label": 5, "index": 610, "code": "a,b,c = map(int,input().split())\n\nif a > b :\n  print(c//b)\nelse :\n  print(c//a)"}
{"label": 5, "index": 611, "code": "A,B,C,=map(int,input().split(' '))\nprint(C//min([A,B]))"}
{"label": 5, "index": 612, "code": "a, b, c = map(int, raw_input().split())\n\nans = c / min(a, b)\nprint ans\n"}
{"label": 5, "index": 613, "code": "#cording:UTF-8                                                                  \nimport sys \n\nline = sys.stdin.readline().split()\n\nsmaller = int(line[0])\nif smaller > int(line[1]):\n  smaller = int(line[1])\nres = int(line[2]) / smaller\nprint res "}
{"label": 5, "index": 614, "code": "A, B, C = map(int, input().split())\nprint(C // min(A, B))"}
{"label": 5, "index": 615, "code": "A, B, C = list(map(int, input().split()))\nprint (C // min(A, B))"}
{"label": 5, "index": 616, "code": "a,b,c = map(int, raw_input().split())\nif a < b:\n    print c / a\nelse:\n    print c / b\n"}
{"label": 5, "index": 617, "code": "# coding: utf-8\n\na, b, c = map(int, input().split())\nprint(c//min(a, b) + c%min(a, b)//max(a, b))"}
{"label": 5, "index": 618, "code": "A, B, C = map(int, input().split())\nprint(C // min(A, B))\n"}
{"label": 5, "index": 619, "code": "n = map(int,list(raw_input().split()))\nM=0\nm=0\ncount=0\nsave=n[2]\nif(n[0] > n[1] ):\n    M = n[0]\n    m = n[1]\nelse:\n    M = n[1]\n    m = n[0]\n\nwhile(save >= m ):\n    save = save - m\n    count = count+1\nprint  count\n"}
{"label": 5, "index": 620, "code": "a, b, c = map(int, raw_input().split())\n\nif c / a > c / b:\n    num = c / a\nelse:\n    num = c / b\n\nprint num"}
{"label": 5, "index": 621, "code": "# -*- coding: utf-8 -*-\nimport sys,copy,math,heapq,itertools as it,fractions,re,bisect,collections as coll\n\nA, B, C = map(int, raw_input().split())\nprint C/min(A, B)\n"}
{"label": 5, "index": 622, "code": "x=map(int,raw_input().split())\nprint x[2]/min(x[0],x[1])"}
{"label": 5, "index": 623, "code": "A, B, C = map(int, input().split())\nif A < B:\n    print(C // A)\nelse:\n    print(C // B)\n    "}
{"label": 5, "index": 624, "code": "a, b, c = list(map(int, input().split()))\nprint(int(c / min(a, b)))\n"}
{"label": 5, "index": 625, "code": "import sys\n\n\nstdin = sys.stdin\n\na,b,c=map(int,stdin.readline().split())\nprint(c//min(a,b))\n"}
{"label": 5, "index": 626, "code": "import math\na,b,c = input().split()\nif int(a) > int(b):\n\tprint(math.floor(int(c)/int(b)))\nelse:\n\tprint(math.floor(int(c)/int(a)))\n"}
{"label": 5, "index": 627, "code": "a, b, c = map(int, raw_input().split())\nprint c / min(a, b)"}
{"label": 5, "index": 628, "code": "A,B,C = input().split(' ')\nA = int(A)\nB = int(B)\nC = int(C)\nif(A <= B):\n    print(C // A)\nelif(B < A):\n    print(C // B)\n"}
{"label": 5, "index": 629, "code": "a, b, c = map(int, raw_input().split( ))\n\nif a >= b :\n    small = b\n    big = a\nelse :\n    small = a\n    big = b\ncount = 0\nwhile c >= small :\n    c = c - small\n    count = count + 1\nprint count\n"}
{"label": 5, "index": 630, "code": "a, b, c = map(int, input().split())\n\nif a > b:\n  print(c // b)\nelse:\n  print(c // a)\n"}
{"label": 5, "index": 631, "code": "A, B, C = map(int, raw_input().split())\n\nminNum = min(A, B)\nmaxNum = max(A, B)\n\ncount = 0\n\nwhile C >= minNum:\n    C = C - minNum\n    count += 1\n\nprint count\n"}
{"label": 5, "index": 632, "code": "a, b, c = map(int, input().split())\n\nprint(c // min(a, b))\n"}
{"label": 5, "index": 633, "code": "def solve():\n    A, B, C = map(int, input().split())\n    if A > B:\n        ans = int(C / B)\n    else:\n        ans = int(C / A)\n    print(ans)\n\nif __name__ == '__main__':\n    solve()"}
{"label": 5, "index": 634, "code": "a,b,c=[int(i) for i in input().strip().split()]\n\nprint(int(c/min(a,b)))\n"}
{"label": 5, "index": 635, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys\nmod = 1000000007\n\na,b,c = list(map(int, input().split()))\nr = max([c//a,c//b])\n\nprint(r)\n"}
{"label": 5, "index": 636, "code": "a, b, c = map(int, raw_input().split())\nprint c/min(a, b)\n"}
{"label": 5, "index": 637, "code": "# coding: utf-8\n\ninput_lines = map(int, raw_input().split())\na = input_lines[0]\nb = input_lines[1]\nc = input_lines[2]\nif a < b:\n  ch = a\n  ex = b\nelse:\n  ch = b\n  ex = a\nprint c/ch\n"}
{"label": 5, "index": 638, "code": "A,B,C=map(int,input().split())\nprint(int(C/(min(A,B))))"}
{"label": 5, "index": 639, "code": "a,b,c=map(int,raw_input().split())\nm=min(a,b)\nprint c/m"}
{"label": 5, "index": 640, "code": "A, B, C = map(int,input().split())\n\nif A >= B:\n    print(C // B)\nelse:\n    print(C // A)"}
{"label": 5, "index": 641, "code": "a, b, c = map(int, input().split())\nprint(c//a if a<=b else c//b)\n"}
{"label": 5, "index": 642, "code": "#get input\nA,B,C = map(int,input().split( ))\n\n#initialize max \nmax = 0 \n\n#computation of max\nif A<B:\n    max = C//A +(C%A)//B\nelse :\n    max = C//B +(C%B)//A\n\n#output\nprint(max)"}
{"label": 5, "index": 643, "code": "A, B, C = map(int, input().split())\nlc, hc = min(A,B), max(A,B)\nans = max(C // lc, 0)\nC -= ans * lc\nans += max(C // hc, 0)\nprint(ans)\n"}
{"label": 5, "index": 644, "code": "a,b,c = input().split()\n\nif int(a) <= int(b):\n    x = int(c) / int(a)\n    print(int(x))\nelse:\n    x = int(c) / int(b)\n    print(int(x))"}
{"label": 5, "index": 645, "code": "# coding: utf-8\n# abc037a\n\na,b,c=map(int,raw_input().split())\nprint c/min(a,b)\n"}
{"label": 5, "index": 646, "code": "a, b, c = map(int,input().split())\nmn = min(a, b)\nprint(c // mn)"}
{"label": 5, "index": 647, "code": "a = [int(x) for x in input().strip().split(' ')]\n\np = min(a[0], a[1])\nprint(a[2] // p)"}
{"label": 5, "index": 648, "code": "a, b, c = map(int, input().split())\nif a < b :\n    print (c//a)\nelse :\n    print (c//b)"}
{"label": 5, "index": 649, "code": "a,b,c = map(int, raw_input().split(\" \"))\nprint (c/( b if a > b else a))"}
{"label": 6, "index": 650, "code": "\nN, Q = [int(_) for _ in input().split()]\nT = [[int(_) for _ in input().split()] for i in range(Q)]\n\nans = [0] * N\nfor l, r, t in T:\n    for i in range(l-1,r):\n        ans[i] = t\n\nfor x in ans:\n    print(x)\n"}
{"label": 6, "index": 651, "code": "import numpy as np\nn,q=map(int,raw_input().split())\na=np.zeros(n,dtype=np.int)\nfor _ in range(q):\n l,r,t=map(int,raw_input().split())\n a[l-1:r]=t\n\nprint '\\n'.join([str(i) for i in a])"}
{"label": 6, "index": 652, "code": "# -*- coding: utf-8 -*-\n# problem B\n\nN, Q = map(int, input().split())\nls = [0] * N\n\nfor i in range(Q):\n    L, R, T = map(int, input().split())\n    for j in range(L-1, R):\n        ls[j] = T\n    \nfor item in ls:\n    print(item)\n    "}
{"label": 6, "index": 653, "code": "n,q=map(int,raw_input().split())\na=[0]*n\nfor i in xrange(q):\n    l,r,t=map(int,raw_input().split())\n    for j in xrange(l-1,r):\n        a[j]=t\nfor i in xrange(n):\n    print(a[i])\n"}
{"label": 6, "index": 654, "code": "n, q = map(int,input().split())\nm = [0 for i in range(n)]\n\nfor i in range(q):\n    a, b, c = map(int,input().split())\n    for i in range(a-1,b):\n        m[i] = c\n        \nprint('\\n'.join(map(str,m)))"}
{"label": 6, "index": 655, "code": "N, Q = map(int, raw_input().split())\n\nret = [0 for i in range(N)]\n\nfor _ in range(Q):\n    f, t, val = map(int, raw_input().split())\n    f -= 1\n    for i in range(f, t):\n        ret[i] = val\n\nfor r in ret:\n    print(r)\n"}
{"label": 6, "index": 656, "code": "data = input()\ndata = data.split()\n\nN = int(data[0])\nQ = int(data[1])\n\nline = N*[0]\n\nfor i in range(Q):\n    data = input()\n    data = data.split()\n    L = int(data[0]) - 1\n    R = int(data[1])\n    T = int(data[2])\n    for j in range(L, R):\n        line[j] = T\n\nfor i in line:\n    print(i)\n"}
{"label": 6, "index": 657, "code": "N, Q = map(int, input().split())\nNumArray = [0 for i in range(N)]\n\nfor i in range(Q):\n    L, R, T = map(int, input().split())\n    EditRange = range(L-1, R)\n    for j in EditRange:\n        NumArray[j] = T\n\n\nfor i in range(N):\n    print(NumArray[i])\n\n"}
{"label": 6, "index": 658, "code": "n, q = map(int, input().split())\nl = []\nfor i in range(n):\n    l.append(0)\nfor i in range(q):\n    left, right, new = map(int, input().split())\n    for j in range(left-1, right):\n        l[j] = new\nfor i in l:\n    print(i)"}
{"label": 6, "index": 659, "code": "# coding: utf-8\n\n\nif __name__ == '__main__':\n\n    n, q = [int(i) for i in input().split(' ')]\n    arr = [0] * n\n\n    for _ in range(q):\n        l, r, t = [int(i) for i in input().split(' ')]\n        arr[l - 1:r] = [t] * (r - l + 1)\n\n    print('\\n'.join(str(a) for a in arr))"}
{"label": 6, "index": 660, "code": "n, q = map(int, input().split())\n\na = [0 for i in range(n)]\n\nfor i in range(q):\n    l, r, t = map(int, input().split())\n    a[l - 1:r] = [t for i in range(r - l + 1)]\n\nfor i in range(n):\n    print(a[i])"}
{"label": 6, "index": 661, "code": "N, Q = [int(intStr) for intStr in input().split()]\na = [0] * N\n\nfor i in range(Q):\n    l, r, t = [int(intStr) for intStr in input().split()]\n    a[l - 1:r] = [t] * (r - l + 1)\n\nfor val in a:\n    print(val)\n\n"}
{"label": 6, "index": 662, "code": "def input_to_int():\n    return map(int, raw_input().split())\n\nN, Q = input_to_int()\nop = [0 for i in range(N)]\nfor i in range(Q):\n    L, R, T = input_to_int()\n    for j in range(L-1, R):\n        op[j] = T\n\nfor i in op:\n    print i"}
{"label": 6, "index": 663, "code": "N,Q=map(int,input().split())\na=[0]*N\nfor _ in range(Q):\n    L,R,T=map(int,input().split())\n    a[L-1:R] = [T]*(R-L+1)\nfor ai in a:\n    print(ai)"}
{"label": 6, "index": 664, "code": "input_line = map(int,raw_input().split(\" \"))\nN = input_line[0]\nQ = input_line[1]\na = [0 for i in range(N)]\nfor q in range(Q):\n\tinput_line = map(int,raw_input().split(\" \"))\n\tL = input_line[0]\n\tR = input_line[1]\n\tT = input_line[2]\n\ta[(L-1):R] = [T for i in range(R - L + 1)]\n\nfor a_ in a:\n\tprint a_"}
{"label": 6, "index": 665, "code": "N, Q = list(map(int, input().split()))\nans = [0] * N\nfor _ in range(Q):\n    L, R, T = list(map(int, input().split()))\n    for i in range(L-1, R):\n        ans[i] = T\nprint(*ans, sep=\"\\n\")\n        \n"}
{"label": 6, "index": 666, "code": "n = map(int,raw_input().split())\nN = n[0]\nQ = n[1]\n\nlist = list()\n\nfor i in xrange(0,N):\n    list.append(0)\n\nfor i in xrange(0,Q):\n    n = map(int,raw_input().split())\n    for j in xrange(n[0]-1, n[1]):\n        list[j]=n[2]\nfor k in list:\n    print k"}
{"label": 6, "index": 667, "code": "l = map(int, raw_input().split())\nN = l[0]\nQ = l[1]\nA = [0] * N\nfor i in xrange(Q):\n    l = map(int, raw_input().split())\n    if (l[0]  - l[1]) == 0:\n        A[l[0]-1] = l[2]\n    else:\n        A[l[0] - 1: l[1]] = [l[2]] * (l[1] - l[0] +1)\nfor a in A:\n    print a"}
{"label": 6, "index": 668, "code": "N, Q = map(int, input().split())\nl = [0 for _ in range(N)]\n\nfor i in range(Q):\n\tinit, end, rep = map(int, input().split())\n\tfor j in range(init-1, end):\n\t\tl[j] = rep\n\nfor k in range(N):\n\tprint(l[k])"}
{"label": 6, "index": 669, "code": "\nimport numpy as np\n\na = np.array([ int(c) for c in raw_input().split()])\nN = a[0]\nQ = a[1]\nRET = np.zeros(N,np.int)\n\nfor no_meaning in range(Q):\n\ta = np.array([ int(c) for c in raw_input().split()],np.int)\n\tL = a[0] - 1\n\tR = a[1]\n\tT = a[2]\n\t\n\tRET[L:R] = T\n\nfor i in range(N):\n\tprint ( RET[i] )"}
{"label": 6, "index": 670, "code": "# -*- coding: utf-8 -*-\n\nn,q = map(int,input().split())\na = [0 for i in range(n)]\nfor i in range(q):\n\tr,l,t = map(int,input().split())\n\tr = r-1\n\tl = l\n\tfor j in range(r,l):\n\t\ta[j] = t\nfor i in range(n):\n\tprint(a[i])"}
{"label": 6, "index": 671, "code": "n, q = map(int, input().split())\nv = dict()\nfor i in range(1, n+1):\n    v[i] = 0\nfor _ in range(q):\n    l,r,t = map(int, input().split())\n    for i in range(l, r+1):\n        v[i] = t\n\nfor _ in range(1, n+1):\n    print(v[_])\n"}
{"label": 6, "index": 672, "code": "def main():\n    N, Q = map(int, input().split())\n    T = [tuple(map(int, input().split())) for _ in range(Q)]\n\n    a = [0] * N\n    for t in T:\n        for i in range(t[0]-1, t[1]):\n            a[i] = t[2]\n\n    for i in range(N):\n        print(a[i])\n\nmain()\n"}
{"label": 6, "index": 673, "code": "#!/usr/bin/env python\n\n\ndef read():\n    N, Q = map(int, raw_input().split())\n    qList = []\n    for i in range(Q):\n        qList.append(map(int, raw_input().split()))\n    return N, qList\n\n\ndef work((N, qList)):\n    ary = [0 for i in range(N)]\n\n    for (L, R, T) in qList:\n        for i in range(L - 1, R):\n            ary[i] = T\n\n    print \"\\n\".join(map(str, ary))\n\n\nif __name__ == \"__main__\":\n    work(read())\n"}
{"label": 6, "index": 674, "code": "from sys import stdin\na = []\nfor line in stdin:\n    a.append(str(line))\nb,d=len(a),[]\nfor i in xrange(b):\n    c=map(int,a[i][:-1].split(\" \"))\n    d.append(c)\ne=[]\nfor i in xrange(d[0][0]):\n    e.append(0)\nfor i in xrange(d[0][1]):\n    for j in xrange(d[i+1][0],d[i+1][1]+1):\n        e[j-1]=d[i+1][2]\nfor i in xrange(len(e)):\n    print(e[i])"}
{"label": 6, "index": 675, "code": "\ndef solve(N, Q, LRTs):\n    a = [0] * N\n    for L, R, T in LRTs:\n        a[L - 1:R] = [T] * (R - L + 1)\n    return a\n\n\nif __name__ == '__main__':\n    from sys import stdin\n    N, Q = map(int, stdin.readline().strip().split())\n    LRTs = map(lambda x: map(int, x.strip().split()) , stdin.readlines())\n    ans = solve(N, Q, LRTs)\n    for v in ans:\n        print(v)"}
{"label": 6, "index": 676, "code": "N, Q = map(int, input().split())\nans = [0]*N\nfor k in range(Q):\n\tL, R, T = map(int, input().split())\n\tfor i in range(L-1, R):\n\t\tans[i] = T\n\nfor e in ans:\n\tprint(e)\n"}
{"label": 6, "index": 677, "code": "N, Q = list(map(int, input().split()))\nA = [0] * N\nfor i in range(Q):\n    L, R, T = list(map(int, input().split()))\n    for j in range(L - 1, R):\n        A[j] = T\nfor i in A : print(i)\n"}
{"label": 6, "index": 678, "code": "n, q = map(int, raw_input().split())\nans = [0]*n\nfor i in range(q):\n    l, r, t = map(int, raw_input().split())\n    for i in range(l-1,r):\n        ans[i] = t\nfor i in ans:\n    print i"}
{"label": 6, "index": 679, "code": "n, q = map(int, raw_input().split())\nA = [0]*n\nfor _ in xrange(q):\n    l, r, t = map(int, raw_input().split())\n    for i in xrange(l-1, r):\n        A[i] = t\nfor i in xrange(n):\n    print A[i]\n"}
{"label": 6, "index": 680, "code": "n, q = map(int, input().split())\na = [0] * n\nfor i in range(0, q):\n    l, r, t = map(int, input().split())\n    a[l - 1 : r] = [t] * (r - l + 1) \n\nfor i in a:\n    print(i)"}
{"label": 6, "index": 681, "code": "# -*- coding: utf-8 -*-\n\nn, q = map(int, input().split())\ndata = []\nfor i in range(q):\n    data.append(list(map(int, input().split())))\n\na = [0] * n\nfor i in data:\n    a[i[0]-1:i[1]] = [i[2]] * (i[1] - i[0] + 1)\nfor put in a:\n    print(str(put))"}
{"label": 6, "index": 682, "code": "N, Q = map(int, input().split())\na = [0]*N\nL = []\nR = []\nT = []\nfor i in range(Q):\n M = list(map(int, input().split()))\n L.append(M[0])\n R.append(M[1])\n T.append(M[2])\nfor i in range(Q):\n for j in range(L[i]-1, R[i]):\n  a[j] = T[i]\nfor i in range(N):\n print(a[i])\n"}
{"label": 6, "index": 683, "code": "N,Q=map(int,raw_input().split())\nS=[0]*N\nfor _ in range(Q):\n L,R,T=map(int,raw_input().split())\n for i in range(L-1,R): S[i]=T\nfor s in S: print s\n"}
{"label": 6, "index": 684, "code": "n,q = map(int,input().split())\na = [0]*n\n\nfor _ in range(q):\n\tl,r,t = map(int,input().split())\n\tfor i in range(r-l+1):\n\t\ta[(l-1)+i] = t\n\nfor i in range(n):\n\tprint(a[i])"}
{"label": 6, "index": 685, "code": "N, Q = map(int, input().split())\nr = [0] * N\nfor i in range(Q):\n    L, R, T = map(int, input().split())\n    r[L-1:R] = [T] * (R-L+1)\nfor v in r:\n    print(v)\n"}
{"label": 6, "index": 686, "code": "n,q=map(int,input().split())\na=[0] * n\nfor i in range(q):\n    l,r,t=map(int,input().split())\n    l -= 1\n    r -= 1\n    a[l:r+1] = [t]*(r-l+1)\nfor v in a:\n    print(v)"}
{"label": 6, "index": 687, "code": "def main():\n    n, q = map(int, input().split())\n    a = [0] * n\n    for _ in range(q):\n        l, r, t = map(int, input().split())\n        for i in range(l - 1, r):\n            a[i] = t\n    print(*a, sep=\"\\n\")\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 6, "index": 688, "code": "n, q = map(int,input().split())\na = [0 for i in range(n)]\n\nfor i in range(q):\n    d,e,f = map(int,input().split())\n    for k in range(e-d+1):\n        a[d+k-1] = f\n\nfor i in range(n):\n    print(a[i])"}
{"label": 6, "index": 689, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\ndef add_range(new_range):\n    new_left, new_right, new_value = new_range\n    global ranges\n    index = 0\n    new_ranges = [new_range]\n    while index < len(ranges):\n        range_ = ranges[index]\n        left, right, value = range_\n        if right <= new_left or new_right <= left:\n            index += 1\n            continue\n        del ranges[index]\n        if new_left <= left and right <= new_right:\n            continue\n        if left < new_left and new_right < right:\n            new_ranges.append((left, new_left, value))\n            new_ranges.append((new_right, right, value))\n            continue\n        if left < new_left:\n            new_ranges.append((left, new_left, value))\n        else:\n            new_ranges.append((new_right, right, value))\n    ranges.extend(new_ranges)\nranges = []\nlength, num_queries = map(int, input().split())\nranges.append((0, length, 0))\nfor _ in range(num_queries):\n    left, right, value = map(int, input().split())\n    left -= 1\n    add_range((left, right, value))\nranges.sort()\nfor range_ in ranges:\n    left, right, value = range_\n    for _ in range(left, right):\n        print(value)"}
{"label": 6, "index": 690, "code": "def print_result(seq = []):\n    for i in seq:\n        print(i)\nif __name__ == '__main__':\n    N, Q = map(int, input().split())\n    seq = N*[0]\n    for i in range(Q):\n        L, R, T = map(int, input().split())\n        while L <= R:\n            seq[L - 1] = T\n            L += 1\nprint_result(seq)"}
{"label": 6, "index": 691, "code": "N, Q = map(int, input().split())\na = [0 for i in range(N)]\n\nfor _ in range(Q):\n    L, R, T = map(int, input().split())\n    for l in range(L-1, R):\n        a[l] = T\nfor i in a:\n    print(i)\n"}
{"label": 6, "index": 692, "code": "n, q = [ int(x) for x in input().split()]\narr = [0 for i in range(n)]\n\nfor i in range(q):\n    l, r, t = [int(x) for x in input().split()]\n    for i in range(l-1, r):\n        arr[i] = t\n\n\nfor i in arr:\n    print(i)\n"}
{"label": 6, "index": 693, "code": "import numpy as np\nN,Q,=map(int,input().split(' '))\nA=[0 for _ in range(N)]\nfor _ in range(Q):\n    L,R,T,=map(int,input().split(' '))\n    A[L-1:R]=[T for _ in range(R-L+1)]\nfor a in A:\n    print(a)"}
{"label": 6, "index": 694, "code": "N,Q=map(int,input().split())\na=[0]*N\nfor i in range(Q):\n  l,r,t=map(int,input().split())\n  for j in range(l-1,r):\n    a[j]=t\nfor i in range(N):\n  print(a[i])"}
{"label": 6, "index": 695, "code": "n,q = map(int,input().split())\na=[]\nfor i in range(n):\n    a.append(0)\nfor i in range(q):\n    l,r,t = map(int ,input().split())\n    for j in range(l-1,r):\n        a[j] = t\nfor i in range(n):\n    print(a[i])"}
{"label": 6, "index": 696, "code": "N, Q = map(int, raw_input().split())\nL = [0 for i in range(Q)]\nR = [0 for i in range(Q)]\nT = [0 for i in range(Q)]\nfor i in range(Q):\n    L[i], R[i], T[i] = map(int, raw_input().split())\na = [0 for i in range(N)]\nfor i in range(Q):\n    a[L[i]-1:R[i]] = [T[i] for j in range(R[i]-L[i]+1)]\nfor i in range(N):\n    print a[i]\n\n"}
{"label": 6, "index": 697, "code": "#get initial input\nN,Q = map(int,input().split( ))\n\n#initialize array \narray = [0]*N \n\n#computation of max\nfor i in range(0,Q):\n    L,R,T = map(int,input().split( ))\n    for j in range(L-1,R):\n        array[j] = T\n   \n#output\nfor i in range(0,N):\n    print(array[i])\n"}
{"label": 6, "index": 698, "code": "n, q = map(int, raw_input().split())\na = [0] * n\nfor i in range(q):\n    l, r, t = map(int, raw_input().split())\n    for j in range(l-1, r):\n        a[j] = t\nfor i in a:\n    print i\n"}
{"label": 6, "index": 699, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys\nmod = 1000000007\n\nn,q = list(map(int, input().split()))\na = [0]*n\n\nfor _ in range(q):\n    l,r,t = list(map(int, input().split()))\n    for i in range(l-1,r):\n        a[i] = t\n\nfor r in a:\n    print(r)\n"}
{"label": 6, "index": 700, "code": "n, q = map(int, raw_input().split( ))\norder = [map(int, raw_input().split( )) for i in xrange(q)]\n\narr = [0 for i in xrange(n)]\n\nfor i in xrange(q) :\n    for j in xrange(order[i][0]-1, order[i][1]):\n        arr[j] = order[i][2]\n\nfor i in xrange(len(arr)):\n    print arr[i]\n"}
{"label": 6, "index": 701, "code": "n, q = (int(i) for i in input().split())\n\nlis = []\n\nfor i in range(n):\n    lis.append(0)\n    \nfor j in range(q):\n    l, r, t = (int(i) for i in input().split())\n    for k in range(l, r + 1):\n        lis[k - 1] = t\n        \nfor i in lis:\n    print(i)"}
{"label": 6, "index": 702, "code": "import sys\n\ndef solve():\n    N, Q = map(int, input().split())\n    a = [0] * N\n\n    for q in range(Q):\n        L, R, T = map(int, input().split())\n        L, R = L - 1, R - 1\n        a[L:R + 1] = [T] * (R + 1 - L)\n\n    print(*a, sep='\\n')\n\n\ndef debug(x, table):\n    for name, val in table.items():\n        if x is val:\n            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)\n            return None\n\nif __name__ == '__main__':\n    solve()"}
{"label": 6, "index": 703, "code": "# coding: utf-8;\n\ndef main():\n    n, q = map(int, input().split())\n    nl = [0 for _ in range(n)]\n\n    for _ in range(q):\n        l, r, t = map(int, input().split())\n        for i in range(l, r + 1):\n            nl[i - 1] = t\n\n    for i in nl: print(i)\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 6, "index": 704, "code": "#coding: UTF-8                                                                  \nimport sys \n\nN, Q = sys.stdin.readline().split()\nres = [0]*int(N)\nlists = []\n\nfor i in range(int(Q)):\n  lists.append(map(int, sys.stdin.readline().split()))\n\nfor i in lists:\n  for j in range(i[0],i[1]+1):\n    res[j-1] = i[2]\n\nfor i in res:\n  print i"}
{"label": 6, "index": 705, "code": "#B\nN, Q = input().split()\na = []\nfor i in range(int(Q)):\n    a.append(list(map(int, input().split())))\n#print(a[1][1])\n#print(a)\n\nb = [0] * int(N)\n#print(b)\n\nfor j in range(1, int(Q) + 1):\n    b[(int(a[j-1][0]) - 1):(int(a[j-1][1]))] = [int(a[j-1][2])] * (int(a[j-1][1]) - int(a[j-1][0]) + 1)\n\nfor i in range(int(N)):\n    print(b[i])"}
{"label": 6, "index": 706, "code": "a, b = map(int, input().split())\nN = [0] * a\nfor i in range(b):\n    l, r, t = map(int, input().split())\n    for j in range(l-1, r):\n        N[j] = t\nfor i in N:\n    print(i)"}
{"label": 6, "index": 707, "code": "import numpy as np\n\nn, q = map(int, raw_input().split())\nqueries = [map(int, raw_input().split()) for i in range(q)]\n\nseq = np.zeros(n)\n\nfor query in queries:\n    L, R, T = query\n    seq[L - 1:R] = T\n\nfor e in seq:\n    print int(e)\n"}
{"label": 6, "index": 708, "code": "a,b = input().split()\nN = int(a)\n\nl = []\nfor i in range(N):\n    l.append(0)\n\n\nfor i in range(int(b)):\n    x,y,z = input().split()\n    for j in range(int(x),int(y)+1):\n        l[j-1] = int(z)\n\nfor i in range(N):\n    print(l[i])"}
{"label": 6, "index": 709, "code": "n, q = map(int, input().split())\nlist = [0]*n\nfor i in range(q):\n    l, r, t = map(int, input().split())\n    for j in range(l-1, r):\n        list[j] = t\n\nfor i in list:\n    print(i)\n"}
{"label": 6, "index": 710, "code": "N,Q = map(int, input().split())\narray = [0 for _ in range(N)]\nfor _ in range(Q):\n    L,R,T = map(int, input().split())\n    for i in range(L-1,R):\n        array[i] = T\nfor a in array:\n    print(a)\n"}
{"label": 6, "index": 711, "code": "# -*- coding: utf-8 -*-\n\nn, q = map(int, input().split())\na = [0] * n\n\nfor i in range(0, q):\n    l, r, t = map(int, input().split())\n    for j in range(l-1, r):\n        a[j] = t\n    \nfor x in range(len(a)):\n    print(a[x])"}
{"label": 6, "index": 712, "code": "N, Q = map(int, input().split())\nA = [0] * N\nfor L, R, val in [map(int, input().split()) for i in range(Q)]:\n    A[L - 1:R] = [val] * (R - L + 1)\nprint(\"\\n\".join([str(v) for v in A]))\n"}
{"label": 6, "index": 713, "code": "n,q=map(int,input().split())\na=[0]*n\nfor i in range(q):\n    L,R,T=map(int,input().split())\n    for j in range(L-1,R):\n        a[j]=T\n\nfor i in a:\n    print(i)"}
{"label": 6, "index": 714, "code": "n, q = map(int, input().split())\na = [0] * n\nfor i in range(q):\n    l, r, t = map(int, input().split())\n    l -= 1\n    for j in range(l, r):\n        a[j] = t\nfor x in a:\n    print(x)\n"}
{"label": 6, "index": 715, "code": "N, Q = map(int, input().split())\nL = [0] * Q\nR = [0] * Q\nT = [0] * Q\na = [0] * N\nfor i in range(Q):\n    L[i], R[i], T[i] = map(int, input().split())\n\nfor i in range(Q):\n    for j in range(L[i] - 1, R[i]):\n        a[j] = T[i]\n\nfor i in range(N):\n    print(a[i])\n"}
{"label": 6, "index": 716, "code": "n, q = map(int, input().split())\n\na = [0] * n\nfor cnt in range(q):\n  l,r,t = map(int, input().split())\n  for i in range(l-1, r):\n    a[i] = t\n\nfor e in a:\n  print(e)"}
{"label": 6, "index": 717, "code": "# coding: utf-8\n\nn, q = map(int, input().split())\ns = [0 for _ in range(n)]\nfor _ in range(q):\n    l, r, t = map(int, input().split())\n    s = s[0:l-1] + [t for _ in range(r-l+1)] + s[r:]\n\n[print(v) for v in s]"}
{"label": 6, "index": 718, "code": "N, Q = map(int, input().split())\na = [0]*N\nfor i in range(Q):\n    l, r, t = map(int, input().split())\n    for j in range(l-1, r):\n        a[j] = t\nprint(\"\\n\".join((str(n) for n in a)))"}
{"label": 6, "index": 719, "code": "n, q = map(int, input().rstrip().split())\na_s = [0] * n\nfor i in range(q):\n    l, r, t = map(int, input().rstrip().split())\n    for j in range(l - 1, r):\n        a_s[j] = t\n\nfor a in a_s:\n    print(a)"}
{"label": 6, "index": 720, "code": "# -*- coding: utf-8 -*-\nimport sys,copy,math,heapq,itertools as it,fractions,re,bisect,collections as coll\n\nN, Q = map(int, raw_input().split())\na = [0]*N\nfor loop in xrange(Q):\n    L, R, T = map(int, raw_input().split())\n    L -= 1\n    R -= 1\n    for i in xrange(L, R + 1):\n        a[i] = T\n\nfor ai in a:\n    print ai\n"}
{"label": 6, "index": 721, "code": "N, Q = map(int, raw_input().split())\nA = [0]*N\nfor i in xrange(Q):\n    l, r, t = map(int, raw_input().split())\n    A[l-1:r] = [t]*(r-l+1)\nfor x in A:\n    print x"}
{"label": 6, "index": 722, "code": "n, q = map(int, raw_input().split())\n\na = [0 for _ in range(n + 1)]\n\nfor _ in range(q):\n\tl, r, t = map(int, raw_input().split())\n\tfor i in range(l, r + 1):\n\t\ta[i] = t\n\nfor i in range(1, n + 1):\n\tprint a[i]"}
{"label": 6, "index": 723, "code": "def readline():\n    return map(int, input().split())\n\nn, q = readline()\na = [0] * n\n\nfor i in range(q):\n    l, r, t = readline()\n    l -= 1; r -= 1;\n    for j in range(l, r+1):\n        a[j] = t\n\nfor i in a:\n    print(i)"}
{"label": 6, "index": 724, "code": "# -*- coding: utf-8 -*-\n\n\ndef solve(N, Q):\n    d = {i + 1: 0 for i in range(N)}\n\n    for _ in range(Q):\n        start, stop, v = map(int, input().split())\n        for i in range(start, stop + 1):\n            d[i] = v\n\n    for v in d.values():\n        print(v)\n\n\nif __name__ == '__main__':\n    N, Q = map(int, input().split())\n    solve(N, Q)\n"}
{"label": 6, "index": 725, "code": "n, q = map(int, input().split())\na = [0] * n\nfor i in range(q):\n    l, r, t = map(int, input().split())\n    for j in range(l - 1, r):\n        a[j] = t\nprint(*a, sep='\\n')"}
{"label": 6, "index": 726, "code": "n,q=map(int,raw_input().split())\np=[0]*n\nfor i in range(q):\n    l,r,t=map(int,raw_input().split())\n    for j in range(l-1,r):\n        p[j]=t\nfor i in p:\n    print i"}
{"label": 6, "index": 727, "code": "N,Q = map(int, raw_input().split())\nA = [0]*N\nfor _ in range(Q):\n    L,R,T = map(int, raw_input().split())\n    A[L-1:R] = [T]*(R-L+1)\nfor a in A:\n    print a\n"}
{"label": 6, "index": 728, "code": "n, q = map(int, input().split())\na = [0 for i in range(n)]\nfor i in range(q):\n    l, r, t = map(int, input().split())\n    for j in range(l-1, r):\n        a[j] = t\nfor i in a:\n    print(i)"}
{"label": 6, "index": 729, "code": "N, Q=map(int, input().split())\nL_R = [list(map(int, input().split())) for i in range(Q)]\n\nL=[i[0] for i in L_R]\nR=[i[1] for i in L_R]\nT=[i[2] for i in L_R]\nli=[]\nfor i in range(N):\n    li.append(0)\nfor i in range(Q):\n    for j in range(L[i],R[i]+1):\n            li[j-1]=T[i]\nfor i in range(N):\n    print(li[i])"}
{"label": 6, "index": 730, "code": "# coding:utf-8\ndef main():\n\tline = map(int,raw_input().split(u' '))\n\tN = line[0]\n\tQ = line[1]\n\tflag = 0\n\n\tif 1<=N<=100 and 1<=Q<=100:\n\t\tarraw = [0]*N\n\t\tfor i in xrange(Q):\n\t\t\tLRT = map(int,raw_input().split(u' '))\n\t\t\tif 1<=LRT[0]<=LRT[1]<=N and 1<=LRT[2]<=10**9:\n\t\t\t\tfor j in xrange(LRT[0]-1,LRT[1]):\n\t\t\t\t\tarraw[j] = LRT[2]\n\t\t\t\tcontinue\n\t\t\telse:\n\t\t\t\tflag = 1\n\t\t\t\tbreak\n\telse:\n\t\tflag = 1\n\n\tif flag == 0:\n\t\tfor i in arraw:\n\t\t\tprint i\n\telse:\n\t\tprint 'Error'\n\n\nif __name__=='__main__':\n\tmain()"}
{"label": 6, "index": 731, "code": "n, q = map(int, raw_input().split())\na = [0] * n\nfor i in range(q):\n    l, r, t = map(int, raw_input().split())\n    for j in range(l-1, r):\n        a[j] = t\n\nfor i in range(n):\n    print a[i]\n"}
{"label": 6, "index": 732, "code": "import numpy as np\nN, Q = map(int, raw_input().split())\na = np.zeros(N, dtype=int)\nfor i in range(Q):\n    L, R, T = map(int, raw_input().split())\n    a[L-1:R] = T\nprint \"\\n\".join(map(str, a))"}
{"label": 6, "index": 733, "code": "n, q = map(int, input().split())\nli = []\n\nfor i in range(n):\n    li.append(0)\n\nfor i in range(q):\n    l, r, t = map(int, input().split())\n    for j in range(r-l+1):\n        li[j+l-1] = t\n\nfor i in range(n):\n    print(li[i])\n"}
{"label": 6, "index": 734, "code": "N, Q = list(map(int, input().split()))\nA = [0] * N\nfor i in range(Q):\n    L, R, T = list(map(int, input().split()))\n    for j in range(L - 1, R):\n        A[j] = T\nfor i in A : print(i)\n"}
{"label": 6, "index": 735, "code": "n,q = map(int, raw_input().split())\nl = [0]*q\nr = [0]*q\nt = [0]*q\na = [0]*n\n\nfor i in range(q):\n\tl[i],r[i],t[i] = map(int, raw_input().split())\n\ttmp = r[i]-l[i]+1\n\ta[l[i]-1:r[i]] = [t[i]]*tmp\n\nfor i in range(n):\n\tprint a[i]"}
{"label": 6, "index": 736, "code": "N, Q = map(int, raw_input().split())\na = ['0' for i in range(N)]\nfor i in range(Q):\n    L, R, T = raw_input().split()\n    L, R = map(int, (L, R))\n    a[L-1:R] = [str(T) for j in range(R-L+1)]\nelse:\n    print '\\n'.join(a)\n"}
{"label": 6, "index": 737, "code": "N, Q = map(int, input().split())\na = [0 for _ in range(N)]\nwhile Q > 0:\n    L, R, T = map(int, input().split())\n    a[L - 1:R] = [T for _ in range(R - L + 1)]\n    Q -= 1\nprint(\"\\n\".join(map(str, a)))"}
{"label": 6, "index": 738, "code": "nums = [0]*100\n\nN, Q = list(map(int, input().split()))\n\nfor i in range(Q):\n    inp = list(map(int, input().split()))\n    inp[0] = inp[0] - 1\n    inp[1] = inp[1]\n    \n    for j in range(inp[0], inp[1]):\n        nums[j] = inp[2]\n\nfor n in range(N):\n    print(nums[n])\n"}
{"label": 6, "index": 739, "code": "from Queue import * # Queue, LifoQueue, PriorityQueue\nfrom bisect import * #bisect, insort\nfrom collections import * #deque, Counter,OrderedDict,defaultdict\n#set([]) \nimport math\nimport copy\nimport itertools\nimport string\nimport sys\nmyread = lambda : map(int,raw_input().split())\ndef solver():\n    N,Q = myread()\n    nums = [0] * N\n    for _ in xrange(Q):\n        l,r,t = myread()\n        l -= 1\n        r -= 1\n        for i in xrange(l,r+1):\n            nums[i] = t\n\n    for x in nums:\n        print x\n\nif __name__ == \"__main__\":\n    solver()\n    \n"}
{"label": 6, "index": 740, "code": "n,q = map(int, raw_input().split())\nls = [0 for _ in range(n)]\nfor _ in range(q):\n    l,r,t = map(int, raw_input().split())\n    for p in range(l-1,r):\n        ls[p] = t\nfor i in ls:\n    print i\n"}
{"label": 6, "index": 741, "code": "n, q = map(int,input().split())\na = [0] * n\nfor i in range(q):\n    l, r, t = map(int,input().split())\n    for j in range(l-1, r):\n        a[j] = t\nfor i in range(n):\n    print(a[i])"}
{"label": 6, "index": 742, "code": "N, Q = map(int, raw_input().split())\na = [0] * N\nfor i in xrange(Q):\n  l, r, t = map(int, raw_input().split())\n  l -= 1\n  r -= 1\n  for i in xrange(l, r + 1):\n    a[i] = t\nfor i in a:\n  print i\n"}
{"label": 6, "index": 743, "code": "n, q = map(int, raw_input().split())\na = [0 for i in range(n)]\nfor i in range(q):\n    l, r, t = map(int, raw_input().split())\n    for j in range(l-1, r):\n        a[j] = t\n\nfor ele in a:\n    print ele\n"}
{"label": 6, "index": 744, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nlength, num_queries = map(int, input().split())\narray = [0] * length\nfor _ in range(num_queries):\n    left, right, value = map(int, input().split())\n    left -= 1\n    array[left : right] = [value] * (right - left)\nfor value in array:\n    print(value)"}
{"label": 6, "index": 745, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\ndef add_range(new_range):\n    new_left, new_right, new_value = new_range\n    global ranges\n    index = 0\n    new_ranges = [new_range]\n    while index < len(ranges):\n        range_ = ranges[index]\n        left, right, value = range_\n        if right <= new_left or new_right <= left:\n            index += 1\n            continue\n        del ranges[index]\n        if new_left <= left and right <= new_right:\n            continue\n        if left < new_left and new_right < right:\n            new_ranges.append((left, new_left, value))\n            new_ranges.append((new_right, right, value))\n            continue\n        if left < new_left:\n            new_ranges.append((left, new_left, value))\n        else:\n            new_ranges.append((new_right, right, value))\n    ranges.extend(new_ranges)\nranges = []\nlength, num_queries = map(int, input().split())\nranges.append((0, length, 0))\nfor _ in range(num_queries):\n    left, right, value = map(int, input().split())\n    left -= 1\n    add_range((left, right, value))\nranges.sort()\nfor range_ in ranges:\n    left, right, value = range_\n    for _ in range(left, right):\n        print(value)"}
{"label": 6, "index": 746, "code": "from functools import reduce\nimport numpy as np\nN, Q = map(int, input().split())\nA = np.zeros(N, dtype=np.int64)\nfor q in range(Q):\n    Lp1, Rp1, T = map(int, input().split())\n    L, R = Lp1 - 1, Rp1 - 1\n    A[L:Rp1] = T\n\nfor a in A:\n    print(a)\n"}
{"label": 6, "index": 747, "code": "N,Q = map(int, input().split())\ndata = [0] * N\nfor i in range(Q):\n    L,R,T = map(int, input().split())\n    L -= 1\n    R -= 1\n    for i in range(L, R + 1):\n        data[i] = T\nfor x in data:\n    print (x)\n"}
{"label": 6, "index": 748, "code": "N,Q=[int(i) for i in input().strip().split()]\nl=[0 for i in range(N)]\nfor j in range(Q):\n    L,R,T=[int(i) for i in input().strip().split()]\n    for k in range(L-1,R):\n        l[k]=T\nfor i in l:\n    print(i)\n"}
{"label": 6, "index": 749, "code": "import sys\n\nline = sys.stdin.readline()\nN, Q = map(int, line.split())\n\na = [0] * N\nfor _ in range(Q):\n    line = sys.stdin.readline()\n    (L, R, T) = map(int, line.split())\n    for i in range(L - 1, R):\n        a[i] = T\n\nfor i in a:\n    print(i)"}
{"label": 6, "index": 750, "code": "N,Q=map(int,input().split())\na=[0 for i in range(N)]\nLRTs=[list(map(int,input().split())) for i in range(Q)]\nfor i, j, t in LRTs:\n\ta[i-1:j]=[t]*(j-i+1)\n\nprint(\"\\n\".join(map(str,a)))\n"}
{"label": 6, "index": 751, "code": "n, q = map(int, input().split())\nx = []\nfor i in range(q):\n    x.append(list(map(int, input().split())))\na = [0]*n\nfor i in range(q):\n    for j in range(x[i][0]-1, x[i][1], 1):\n        a[j] = x[i][2]\n\nfor i in range(n):\n    print(a[i])\n\n\n\n"}
{"label": 6, "index": 752, "code": "# coding: utf-8\n\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\nfrom __future__ import division\nfrom __future__ import absolute_import\nimport math\nimport string\nimport itertools\nimport fractions\nimport heapq\nimport collections\nimport re\nimport array\nimport bisect\n\ndef array2d(d1, d2, init = None):\n    return [[init for _ in range(d1)] for _ in range(d2)]\n\nN, Q = map(int, input().split(\" \"))\nna = [0] * N\nfor _ in range(Q):\n    l, r, t = map(int, input().split(\" \"))\n    for i in range(l-1, r):\n        na[i] = t\nfor i in na:\n    print(i)\n"}
{"label": 6, "index": 753, "code": "N, Q = input().split()\nA = [0] * int(N)\n\nfor i in range(int(Q)):\n    l = list(map(int, input().split()))\n    for k in range(l[0] - 1 ,l[1]):\n        A[k] = l[2]\n\nfor j in range(int(N)):\n    print(A[j])\n    j = j + 1\n"}
{"label": 6, "index": 754, "code": "import numpy as np\n\nN, Q= [int(intStr) for intStr in input().split()]\na = np.zeros(N, dtype=np.int)\n\nfor i in range(Q):\n    l, r, t = [int(intStr) for intStr in input().split()]\n    a[l-1:r] = t\n\nfor val in a:\n    print(val)"}
{"label": 6, "index": 755, "code": "N,Q = map(int, raw_input().split(\" \"))\nx = [0 for i in range(N)]\nfor i in range(Q):\n\tL,R,T = map(int, raw_input().split(\" \"))\n\tfor j in range(L-1,R):\n\t\tx[j] = T\nfor i in x:\n\tprint i"}
{"label": 6, "index": 756, "code": "N, Q = map(int, input().split())\narray = [0 for i in range(N)]\nfor i in range(Q):\n    L, R, T = map(int, input().split())\n    for i in range(L-1, R):\n        array[i] = T\nfor i in range(N):\n    print(array[i])\n"}
{"label": 6, "index": 757, "code": "import sys\n\ndata=[int(n) for n in sys.stdin.readline().strip().split(\" \")]\nseq=[ 0 for n in range(data[0])]\nl=0 ; r=0\n\nfor line in sys.stdin :\n\tline=[int(n) for n in line.strip().split(\" \")]\n\tl=line[0]-1 ; r=line[1]\n\tfor i in range(l,r) :\n\t\tseq[i]=line[2]\n\nfor ans in seq :\n\tprint(ans)"}
{"label": 6, "index": 758, "code": "n, q = map(int, input().split())\n\narr = [0] * n\nfor i in range(q):\n    l, r, t = map(int, input().split())\n    arr[l-1:r] = [t] * (r-l+1)\n\nfor x in arr:\n    print(x)\n"}
{"label": 6, "index": 759, "code": "n, q = map(int, raw_input().split())\narray = [0] * n\n\nfor j in range(q):\n    l, r, t = map(int, raw_input().split())\n    for target in range(l-1, r):\n        array[target] = t\nfor item in array:\n    print str(item)\n"}
{"label": 6, "index": 760, "code": "N,Q = map(int, raw_input().split())\narr = [0 for i in range(N)]\nfor i in range(Q):\n    L,R,T = map(int, raw_input().split())\n    for j in range(L-1, R):\n        arr[j] = T\nfor a in arr:\n    print a"}
{"label": 6, "index": 761, "code": "N, Q = map(int, raw_input().split())\nA = [0] * N\nfor i in xrange(Q):\n    L, R, T = map(int, raw_input().split())\n    for j in range(L-1, R):\n        A[j] = T\nfor i in xrange(N):\n    print(A[i])\n"}
{"label": 6, "index": 762, "code": "#coding:'utf-8'\n\nx=input()\nx=x.split()\nN=int(x[0])\nQ=int(x[1])\nA=[]\nfor i in range(N):\n    A.append(0)\n\nfor i in range(Q):\n    y=input()\n    y=y.split()\n    L=int(y[0])\n    R=int(y[1])\n    T=int(y[2])\n    for n in range(L,R+1):\n        A[n-1]=T\n\nfor num in A:\n    print(num)\n"}
{"label": 6, "index": 763, "code": "\n[N, Q] = map(int, raw_input().split())\nA = [0] * N\nfor i in xrange(Q):\n    [L, R, V] = map(int, raw_input().split())\n    if (L - R) == 0:\n        A[L - 1] = V\n    else:\n        A[L - 1:R] = [V] * (R - L + 1)\nfor a in A:\n    print a\n"}
{"label": 6, "index": 764, "code": "a,b = map(int,raw_input().split())\nc = []\nfor i in range(a):\n\tc.append(0)\nfor i in range(b):\n\td,e,f = map(int,raw_input().split())\n\tfor i in range(d-1,e):\n\t\tc[i] = f\nfor i in c:\n\tprint i"}
{"label": 6, "index": 765, "code": "N, Q = map(int, input().split())\nL_R_T = [list(map(int, input().split())) for i in range(Q)]\na = [0] * N\nfor l ,r ,t in  L_R_T:\n    l -= 1\n    for i in range(l, r):\n        a[i] = t\n\nfor i in a:\n    print(i)"}
{"label": 6, "index": 766, "code": "def read_ints():\n    return [int(i) for i in input().split(\" \")]\n\nn, q = read_ints()\na = [0 for i in range(n)]\nfor i in range(q):\n    l, r, t = read_ints()\n    l -= 1\n    r -= 1\n    for j in range(l, r+1):\n        a[j] = t\n\nfor i in a:\n    print(i)\n"}
{"label": 6, "index": 767, "code": "l=lambda:map(int,raw_input().split())\nn,q=l()\na=[0]*n\nfor i in[0]*q:x,y,z=l();a[x-1:y]=[z]*(y-x+1)\nfor i in a:print i"}
{"label": 6, "index": 768, "code": "N, Q = map(int,input().split())\n\nS=[]\nfor y in range(N):\n    S.append(0)\n    \n\n\nfor i in range(Q):\n    L, R, T = map(int,input().split())\n    S=S[:(L-1)]+[T]*(R-L+1)+S[(R):]\n\n    \nP=\"\\n\".join(map(str,(S)))\nprint(P)"}
{"label": 6, "index": 769, "code": "import sys\n\nstdin = sys.stdin\n\nn,q = map(int,stdin.readline().split())\na = [0]*n\nfor i in range(q):\n    l,r,t = map(int,stdin.readline().split())\n    for j in range(l,r+1):\n        a[j-1] = t\nfor v in a:\n    print(v)"}
{"label": 6, "index": 770, "code": "N,Q = map(int,raw_input().split())\na = [0]*N\nfor i in xrange(Q):\n\tL,R,T = map(int,raw_input().split())\n\tfor j in xrange(L-1,R):\n\t\ta[j] = T\nfor a_i in a:\n\tprint a_i"}
{"label": 6, "index": 771, "code": "# -*- coding:utf-8 -*-\nN, Q = map(int, input().split())\nans = [ 0 for tmp in range(N)]\nl,r,t = ([], [], [])\nfor tmp in range(Q):\n    L, R, T = map(int, input().split())\n    l.append(L)\n    r.append(R)\n    t.append(T)\n    for tmp2 in range (l[tmp]-1,r[tmp]):\n        ans[tmp2] = t[tmp]\nfor tmp in range(N):\n    print(ans[tmp])"}
{"label": 6, "index": 772, "code": "n, q = map(int, input().split())\na = [0 for i in range(n)]\nfor i in range(q):\n    l, r, t = map(int, input().split())\n    for j in range(l-1, r):\n        a[j] = t\nfor i in a:\n    print(i)"}
{"label": 6, "index": 773, "code": "N, Q = map(int, raw_input().split())\na = [0 for _ in range(N)]\nfor _ in range(Q):\n    L, R, T = map(int, raw_input().split())\n    for i in range(L-1, R):\n        a[i] = T\nfor v in a:\n    print v\n"}
{"label": 6, "index": 774, "code": "#!/usr/bin/env python3\n\n\ndef main():\n    n, q = map(int, input().split())\n    xs = [0 for _ in range(n)]\n    for _ in range(q):\n        l, r, t = map(int, input().split())\n        l -= 1\n        r -= 1\n        xs[l: r + 1] = [t for _ in range(r - l + 1)]\n    for x in xs:\n        print(x)\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 6, "index": 775, "code": "n,q=map(int, input().split())\na = [0]*n\nfor i in range(q):\n    l,r,t=map(int, input().split())\n    for j in range(l-1,r):\n        a[j] = t\nfor i in range(n):\n    print(a[i])\n"}
{"label": 6, "index": 776, "code": "n, q = map(int, input().split())\n \nL = [0] * q\nR = [0] * q\nT = [0] * q\n \nfor i in range(q):\n    L[i], R[i], T[i] = map(int, input().split())\n \nlis = [0] * n\n \nfor i in range(q):\n    lis[L[i]-1 : R[i]] = [T[i]] * (R[i] - L[i] + 1)\n \n[print(i) for i in lis]"}
{"label": 6, "index": 777, "code": "def ri(): return int(input())\ndef rli(): return list(map(int, input().split()))\ndef rls(): return list(input())\ndef pli(a): return \"\".join(list(map(str, a)))\n\nn, q = rli()\na = [0 for i in range(n)]\nfor i in range(q):\n    l, r, t = rli()\n    for j in range(l-1, r):\n        a[j] = t\nfor i in range(n):\n    print(a[i])"}
{"label": 6, "index": 778, "code": "N, Q = [int(x) for x in raw_input().split(' ')]\nA = [0] * N\nfor idx in range(Q):\n\ti, j, newval = [int(x) for x in raw_input().split(' ')]\n\tfor ii in range(i-1, j):\n\t\tA[ii] = newval\nfor x in A:\n\tprint x"}
{"label": 6, "index": 779, "code": "import numpy as np\nn, q=map(int,raw_input().split())\na=np.zeros(n,dtype=\"int\")\nfor i in range(q):\n    l, r, t=map(int,raw_input().split())\n    a[l-1:r]=t\nfor i in range(n):\n    print a[i]"}
{"label": 7, "index": 780, "code": "\ns = raw_input()\n\nif s[len(s)-1] == 'T':\n    print 'YES'\nelse:\n    print'NO'"}
{"label": 7, "index": 781, "code": "print('YES' if input().endswith('T') else 'NO')\n"}
{"label": 7, "index": 782, "code": "print ['NO','YES'][raw_input()[-1]=='T']"}
{"label": 7, "index": 783, "code": "drink = input()\nn = len(drink)\nlastletter = drink[n-1]\n\nif lastletter == 'T':\n  print('YES')\nelse:\n  print('NO')\n"}
{"label": 7, "index": 784, "code": "print(['NO','YES'][input()[-1]=='T'])"}
{"label": 7, "index": 785, "code": "s = input()\nif s[-1] == \"T\":\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 7, "index": 786, "code": "print(\"YES\" if input()[-1] == \"T\" else \"NO\")"}
{"label": 7, "index": 787, "code": "s = input()\n\nif s[-1] == 'T':\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")"}
{"label": 7, "index": 788, "code": "print ['NO','YES'][raw_input()[-1]=='T']"}
{"label": 7, "index": 789, "code": "s = raw_input()\nprint \"YES\" if s[-1] == \"T\" else \"NO\""}
{"label": 7, "index": 790, "code": "# -*- coding: utf-8 -*-\nimport sys,copy,math,heapq,itertools as it,fractions,re,bisect,collections as coll\n\nprint \"YES\" if raw_input()[-1] == \"T\" else \"NO\"\n"}
{"label": 7, "index": 791, "code": "a = input()\ns = list(a)\n \nif s[len(a)-1] == 'T' :\n    print('YES')\nelse :\n    print('NO')"}
{"label": 7, "index": 792, "code": "S=input()\nif 'T'==S[-1]:\n\tprint('YES')\nelse:\n\tprint('NO')\n"}
{"label": 7, "index": 793, "code": "# -*- coding: UTF-8 -*-\n\nS = raw_input()\nif(S[-1] == 'T'):\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 7, "index": 794, "code": "print('YES' if input()[-1]=='T' else 'NO')"}
{"label": 7, "index": 795, "code": "# -*- coding: utf-8 -*-\n\nst = str(raw_input())\nif st[-1:] == \"T\":\n    print \"YES\"\nelse:\n    print \"NO\""}
{"label": 7, "index": 796, "code": "S=input()\nif S[-1]=='T':\n    print('YES')\nelse:\n    print('NO')"}
{"label": 7, "index": 797, "code": "print(\"YES\" if input()[-1] == \"T\" else \"NO\")\n"}
{"label": 7, "index": 798, "code": "s = input()\nif s[-1] == \"T\":\n print(\"YES\")\nelse:\n print(\"NO\")"}
{"label": 7, "index": 799, "code": "s = raw_input()[-1:]\nif s == \"T\":\n    print \"YES\"\nelse:\n    print \"NO\"\n"}
{"label": 7, "index": 800, "code": "# -*- coding: utf-8 -*-\n \n# \u6574\u6570\u306e\u5165\u529b\nroma = str(input())\nroma_list=list(roma)\nif roma_list[len(roma)-1] == \"T\":\n    print(\"YES\")\n\nelse:\n    print(\"NO\")\n"}
{"label": 7, "index": 801, "code": "print('YES' if input().endswith('T') else 'NO')\n"}
{"label": 7, "index": 802, "code": "S = input()\nif (S[-1] == 'T'):\n    print (\"YES\")\nelse:\n    print (\"NO\")\n"}
{"label": 7, "index": 803, "code": "s=input()\nprint('YES' if s[-1]=='T' else 'NO')"}
{"label": 7, "index": 804, "code": "s = raw_input()\n\nret = 'YES' if s[-1] == 'T' else 'NO'\nprint(ret)"}
{"label": 7, "index": 805, "code": "s=str(input())\nif s[-1]==\"T\":\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 7, "index": 806, "code": "S = input()\nif S[-1] == 'T':\n    print('YES')\nelse:\n    print('NO')"}
{"label": 7, "index": 807, "code": "s=input()\nif s[len(s)-1]=='T':\n    print('YES')\nelse:\n    print('NO')"}
{"label": 7, "index": 808, "code": "# -*- coding: utf-8 -*-\ndef main(s):\n    s_ = s if len(s) == 1 else s[-1:]\n    return \"YES\" if s_ == \"T\" else \"NO\"\n\n\nif __name__ == '__main__':\n    print(main(input()))"}
{"label": 7, "index": 809, "code": "s = input()\nif s[-1] == \"T\":\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 7, "index": 810, "code": "S = input()\nprint('YES' if S[-1] == 'T' else 'NO')"}
{"label": 7, "index": 811, "code": "S = raw_input()\n\nif S[-1] == 'T':\n    print 'YES'\nelse:\n    print 'NO'\n"}
{"label": 7, "index": 812, "code": "S = raw_input();\n\nif(S[-1:] == \"T\"):\n    print \"YES\";\nelse:\n    print \"NO\";"}
{"label": 7, "index": 813, "code": "import re\nS = input()\n\nif re.match('.*T$', S):\n    print('YES')\nelse:\n    print('NO')\n\n"}
{"label": 7, "index": 814, "code": "print(\"YES\" if input()[-1] == \"T\" else \"NO\")"}
{"label": 7, "index": 815, "code": "m = input()\nans = m.rfind(\"T\")\nl = len(m)\nif ans == l - 1:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 7, "index": 816, "code": "s = input()\nif s[-1] == \"T\":\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 7, "index": 817, "code": "if(raw_input()[-1::1] == \"T\"):print \"YES\"\nelse:print \"NO\""}
{"label": 7, "index": 818, "code": "s = raw_input()\nif s[-1:] == 'T':\n    print 'YES'\nelse:\n    print 'NO'\n"}
{"label": 7, "index": 819, "code": "print('YES' if input()[-1] is 'T' else 'NO')"}
{"label": 7, "index": 820, "code": "S = raw_input()\nif S[-1:] == \"T\" :\n\tprint \"YES\"\nelse :\n\tprint \"NO\""}
{"label": 7, "index": 821, "code": "def main():\n    S = str(input())\n\n    if S[-1] == 'T':\n        print('YES')\n    else:\n        print('NO')\n\nmain()\n"}
{"label": 7, "index": 822, "code": "# coding: utf-8\n\n\ndef is_tea(s):\n    return s[-1] == 'T'\n\nif __name__ == '__main__':\n    print('YES' if is_tea(input()) else 'NO')"}
{"label": 7, "index": 823, "code": "# -*- coding: utf-8 -*-\n# problem A\n\nS = str(input())\nif S[-1] == 'T':\n    print('YES')\nelse:\n    print('NO')"}
{"label": 7, "index": 824, "code": "print \"YES\" if raw_input().endswith(\"T\") else \"NO\""}
{"label": 7, "index": 825, "code": "a = raw_input()\n\nif a[-1] == \"T\":\n\tprint \"YES\"\nelse:\n\tprint \"NO\"\n"}
{"label": 7, "index": 826, "code": "print('YES' if input().endswith('T') else 'NO')"}
{"label": 7, "index": 827, "code": "S = raw_input()\n\nif S[-1] == 'T':\n    print 'YES'\nelse:\n    print 'NO'\n"}
{"label": 7, "index": 828, "code": "s = raw_input()\nif s[len(s)-1] == 'T':\n    print 'YES'\nelse:\n    print 'NO'\n"}
{"label": 7, "index": 829, "code": "S = input()\nif \"T\" in S[-1]:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n    "}
{"label": 7, "index": 830, "code": "\ns = input()\nif s[-1] == 'T':\n    print (\"YES\")\nelse:\n    print (\"NO\")\n\n"}
{"label": 7, "index": 831, "code": "print \"YES\" if raw_input()[-1] == 'T' else \"NO\"\n"}
{"label": 7, "index": 832, "code": "S = raw_input()\nif S[-1] == \"T\":\n    print \"YES\"\nelse:\n    print \"NO\"\n"}
{"label": 7, "index": 833, "code": "def Tea(S):\n    if S[-1] == \"T\":\n        return \"YES\"\n    else:\n        return \"NO\"\n\nS = input()\nprint (Tea(S))"}
{"label": 7, "index": 834, "code": "S = input()\n\nif S[-1] == \"T\":\n    print(\"YES\")\n    exit()\nprint(\"NO\")\n"}
{"label": 7, "index": 835, "code": "#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n\ns = input()\n\nif s[-1] == 'T':\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 7, "index": 836, "code": "s = raw_input()\n\nif s[-1] == \"T\":\n    print \"YES\"\nelse:\n    print \"NO\""}
{"label": 7, "index": 837, "code": "a=raw_input()\nif a[-1]==\"T\":\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 7, "index": 838, "code": "S = raw_input ()\n\nif S[-1] == 'T':\n    print \"YES\"\nelse:\n    print \"NO\"\n"}
{"label": 7, "index": 839, "code": "print('YES' if input()[-1] == 'T' else 'NO')"}
{"label": 7, "index": 840, "code": "S = raw_input()\n\nlength = len(S)\nif S[length - 1] == \"T\":\n    print \"YES\"\nelse:\n    print \"NO\"\n"}
{"label": 7, "index": 841, "code": "n=raw_input()\nif n[len(n) - 1] == 'T' :\n\tprint \"YES\"\nelse :\n\tprint \"NO\""}
{"label": 7, "index": 842, "code": "S = list(input())\nif S[-1] == 'T':\n    print('YES')\nelse:\n    print('NO')"}
{"label": 7, "index": 843, "code": "S=[]\nS=raw_input()\nif(S[-1]=='T'):\n    print('YES')\nelse:\n    print ('NO')"}
{"label": 7, "index": 844, "code": "#!/usr/bin/python\n\ndef main():\n        t = raw_input()\n        if t[-1] == \"T\":\n                print \"YES\"\n        else:\n                print \"NO\"\n\nmain()"}
{"label": 7, "index": 845, "code": "s = input()\n\nif s[-1] == 'T':\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 7, "index": 846, "code": "S = str(input())\n\nprint('YES' if S[-1] == 'T' else 'NO')"}
{"label": 7, "index": 847, "code": "s = input()\nif(s[-1] == 'T'):\n    print('YES')\nelse:\n    print('NO')"}
{"label": 7, "index": 848, "code": "if(raw_input()[-1] == \"T\"):\n    print \"YES\"\nelse:\n    print \"NO\""}
{"label": 7, "index": 849, "code": "a = input()\nlast = a[-1:]\nif last == \"T\":\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 7, "index": 850, "code": "def ri(): return int(input())\ndef rli(): return list(map(int, input().split()))\ndef rls(): return list(input())\ndef pli(a): return \"\".join(list(map(str, a)))\n\ns = rls()\nprint(\"YES\" if(s[-1] == \"T\") else \"NO\")"}
{"label": 7, "index": 851, "code": "S = str(input())\nif S[-1] == \"T\":\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 7, "index": 852, "code": "if input()[-1] == \"T\":\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 7, "index": 853, "code": "s = input()\nif s[-1] == 'T':\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")"}
{"label": 7, "index": 854, "code": "print('YES' if input()[-1] == 'T' else 'NO')\n"}
{"label": 7, "index": 855, "code": "print('YES'if input()[-1]=='T'else'NO')"}
{"label": 7, "index": 856, "code": "S = raw_input()\n\nif S[-1] == 'T':\n  print \"YES\"\nelse:\n  print \"NO\"\n"}
{"label": 7, "index": 857, "code": "S=raw_input().strip()\n\nif S[-1]==\"T\":\n\tprint \"YES\"\nelse:\n\tprint \"NO\"\n"}
{"label": 7, "index": 858, "code": "S=list(input())\n\nA=S[-1]\n\nif A=='T':\n    print(\"YES\")\n\nelse:\n    print(\"NO\")"}
{"label": 7, "index": 859, "code": "print(\"YES\" if input()[-1] == \"T\" else \"NO\")\n"}
{"label": 7, "index": 860, "code": "print\"YES\"*(raw_input()[-1]==\"T\")or\"NO\"\n"}
{"label": 7, "index": 861, "code": "S = raw_input()\nif S[-1:] == \"T\" :\n\tprint \"YES\"\nelse :\n\tprint \"NO\""}
{"label": 7, "index": 862, "code": "s=str(input())\nif s[-1]=='T':\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 7, "index": 863, "code": "str = input()\nres =\"\"\nif str[-1] == \"T\":\n    res = \"YES\"\nelse:\n    res = \"NO\"\nprint(res)"}
{"label": 7, "index": 864, "code": "s = input()\nif s[-1] == 'T':\n    print('YES')\nelse:\n    print('NO')"}
{"label": 7, "index": 865, "code": "import re\n\n\nclass IO_for_Contest(object):\n    @staticmethod\n    def my_input():\n        # return raw_input()\n        return input()\n\n    @staticmethod\n    def read_from_input():\n        # TODO: impl this for each problem\n        pass\n\n    @staticmethod\n    def read_line():\n        return IO_for_Contest.my_input().strip()\n\n    @staticmethod\n    def read_int():\n        return int(IO_for_Contest.my_input().strip())\n\n    @staticmethod\n    def read_n_int(n):\n        return list(map(\n                    int,\n                    re.split('\\s+', IO_for_Contest.my_input().strip())))[: n]\n\n\ndef solve():\n    what = IO_for_Contest.read_line()\n    if what[-1] == 'T':\n        print('YES')\n    else:\n        print('NO')\n\n\nif __name__ == '__main__':\n    solve()"}
{"label": 7, "index": 866, "code": "# coding:utf-8\nS = raw_input()\nif S.isupper() and 1<=len(S)<=50 and S[-1]=='T':\n\tprint 'YES'\nelse:\n\tprint 'NO'"}
{"label": 7, "index": 867, "code": "s = raw_input()\nif s[len(s)-1] == 'T':\n    print \"YES\"\nelse:\n    print \"NO\""}
{"label": 7, "index": 868, "code": "def ini(): return int(input())\ndef inli(): return list(map(int, input().split()))\ndef inf(): return float(input())\ndef inlf(): return list(map(float, input().split()))\ndef inl(): return list(input())\ndef pli(): return \"\".join(list(map(str, ans)))\n\ns = input()\n\nif s[len(s)-1]=='T':\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 7, "index": 869, "code": "s = input()\nprint(\"YES\" if s[-1]==\"T\" else \"NO\")\n"}
{"label": 7, "index": 870, "code": "print (\"YES\" if input()[-1] == \"T\" else \"NO\") \n"}
{"label": 7, "index": 871, "code": "print(\"YES\" if input()[-1]=='T' else \"NO\")"}
{"label": 7, "index": 872, "code": "s = list(raw_input())\nif s[-1]==\"T\":\n    print \"YES\"\nelse:\n    print \"NO\""}
{"label": 7, "index": 873, "code": "s = raw_input()\nprint 'YES' if s[-1] == 'T' else 'NO',"}
{"label": 7, "index": 874, "code": "# encoding:utf-8\ns = raw_input()\nl = len(s)\nif s[l-1] == \"T\":\n    print \"YES\"\nelse:\n    print \"NO\""}
{"label": 7, "index": 875, "code": "s = raw_input()\n\nlength = len(s)\n\nif(s[length - 1] == 'T'):\n\tprint \"YES\"\nelse:\n\tprint \"NO\""}
{"label": 7, "index": 876, "code": "s = input()\nif s[len(s) - 1] == 'T':\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 7, "index": 877, "code": "drink = raw_input()\n\nif drink[-1:] == \"T\":\n\tprint \"YES\"\nelse:\n\tprint \"NO\"\n"}
{"label": 7, "index": 878, "code": "#!/usr/bin/env python3\n# -*- coding:utf-8 -*-\n\nS = input()\n\nif S[-1] == 'T':\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 7, "index": 879, "code": "from collections import defaultdict\n\n\ndef main():\n    print(\"YES\" if input().endswith(\"T\") else \"NO\")\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 7, "index": 880, "code": "str = raw_input()\nif str[-1] == 'T':\n    print 'YES'\nelse:\n    print 'NO'\n"}
{"label": 7, "index": 881, "code": "print(\"YES\" if input()[-1]=='T' else \"NO\")"}
{"label": 7, "index": 882, "code": "#coding: utf-8\n#ABC038\n\ns=raw_input()\nif s[-1]==\"T\":\n print \"YES\"\nelse:\n print \"NO\"\n"}
{"label": 7, "index": 883, "code": "\ns = input()\nif s[-1] == 'T':\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 7, "index": 884, "code": "S = list(input())\nif S[-1] is 'T':\n    print('YES')\nelse:\n    print('NO')"}
{"label": 7, "index": 885, "code": "s=input()\nprint(\"YES\" if s[-1]=='T' else \"NO\")"}
{"label": 7, "index": 886, "code": "S = input()\nl = len(S)\n\nif S[l-1] == \"T\":\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 7, "index": 887, "code": "def main():\n    s = input()\n    if s.endswith(\"T\"):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 7, "index": 888, "code": "S = input()\nif S[-1] == 'T':\n    print('YES')\nelse:\n    print('NO')"}
{"label": 7, "index": 889, "code": "s = input()\nif s[-1] == 'T':\n    print('YES')\nelse:\n    print('NO')"}
{"label": 7, "index": 890, "code": "S = raw_input()\nif S[-1:] == \"T\" :\n\tprint \"YES\"\nelse :\n\tprint \"NO\""}
{"label": 7, "index": 891, "code": "import sys\n\ns = sys.stdin.readline().rstrip(\"\\n\")\nS = s[-1:]\n\nif(S==\"T\"):\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n"}
{"label": 7, "index": 892, "code": "x = raw_input()\nx = list(x)\nif x[-1] == 'T':\n    print \"YES\"\nelse:\n    print \"NO\"\n"}
{"label": 7, "index": 893, "code": "s = raw_input()\nif s[len(s)-1] == 'T':\n    print \"YES\"\nelse:\n    print \"NO\"\n"}
{"label": 7, "index": 894, "code": "S = input()\n\nSS = S[-1]\n\nif SS == 'T':\n    print( 'YES' )\nelse:\n    print('NO')"}
{"label": 7, "index": 895, "code": "# coding: utf-8\n\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\nfrom __future__ import division\nfrom __future__ import absolute_import\nimport math\nimport string\nimport itertools\nimport fractions\nimport heapq\nimport collections\nimport re\nimport array\nimport bisect\n\ndef array2d(d1, d2, init = None):\n    return [[init for _ in range(d1)] for _ in range(d2)]\n\ns = input().strip()\nif s.endswith(\"T\"):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 7, "index": 896, "code": "s=raw_input()\nif s[-1]=='T':\n    print('YES')\nelse:\n    print('NO')"}
{"label": 7, "index": 897, "code": "# coding: utf-8\n\nprint('YES' if input()[-1]=='T' else 'NO')"}
{"label": 7, "index": 898, "code": "import math\ndef read():\n    return int(input())\n\ndef reads(sep=None):\n    return list(map(int, input().split(sep)))\n\ndef main():\n    s = input()\n    print('YES' if s[-1] == 'T' else 'NO')\n\nmain()\n"}
{"label": 7, "index": 899, "code": "def getOcha(S):\n    if S[-1] == 'T':\n        return \"YES\"\n    else:\n        return \"NO\"\n\nS = input()\nprint(getOcha(S))\n"}
{"label": 7, "index": 900, "code": "roma = str(input())\nif roma[-1] == \"T\":\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 7, "index": 901, "code": "print (\"YES\" if raw_input()[-1] == \"T\" else \"NO\")\n"}
{"label": 7, "index": 902, "code": "import sys\n\ndef solve():\n    s = input()\n\n    if s[-1] == 'T':\n        ans = 'YES'\n    else:\n        ans = 'NO'\n\n    print(ans)\n\ndef debug(x, table):\n    for name, val in table.items():\n        if x is val:\n            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)\n            return None\n\nif __name__ == '__main__':\n    solve()"}
{"label": 7, "index": 903, "code": "str = raw_input()\nif str[-1] == \"T\":\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")"}
{"label": 7, "index": 904, "code": "s = list(raw_input())\nn = len(s)\nif s[n-1] == \"T\":\n\tprint \"YES\"\nelse:\n\tprint \"NO\""}
{"label": 7, "index": 905, "code": "s = input().rstrip()\nprint('YES' if s[-1] == 'T' else 'NO')"}
{"label": 7, "index": 906, "code": "s = input()\nif s[-1] == 'T':\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 7, "index": 907, "code": "# coding: utf-8\n\n# \u6574\u6570\u306e\u5165\u529b\nstr = raw_input()\n\nif(str[-1:] == \"T\"):\n    ans = \"YES\"\nelse:\n    ans = \"NO\"\n\n# \u51fa\u529b\nprint ans"}
{"label": 7, "index": 908, "code": "s = raw_input()\n\nif s[-1] == \"T\":\n  print \"YES\"\nelse:\n  print \"NO\"\n"}
{"label": 7, "index": 909, "code": "import sys\ntea=sys.stdin.readline().strip()[::-1]\n\nprint( \"YES\" if tea[0]==\"T\" else \"NO\" )"}
{"label": 8, "index": 910, "code": "a, b =[set(input().split()) for i in range(2)]\nprint([\"YES\",\"NO\"][a & b == set()])"}
{"label": 8, "index": 911, "code": "H1, W1 = map(int, raw_input().split())\nH2, W2 = map(int, raw_input().split())\nif H1 == H2 or H1 == W2:\n    print 'YES'\nelif W1 == H2 or W1 == W2:\n    print 'YES'\nelse:\n    print 'NO'\n"}
{"label": 8, "index": 912, "code": "h1, w1 = [ int(x) for x in input().split() ]\nh2, w2 = [ int(x) for x in input().split() ]\nif h1 in (h2, w2) or w1 in (h2, w2):\n  print(\"YES\")\nelse:\n  print(\"NO\")"}
{"label": 8, "index": 913, "code": "h1,w1=map(int,raw_input().split())\nh2,w2=map(int,raw_input().split())\n\nif h1==h2 or h1==w2 or w1==h2 or w1==w2:\n    print \"YES\"\nelse:\n    print \"NO\""}
{"label": 8, "index": 914, "code": "a=list(map(int,input().split()))\nh,w=map(int,input().split())\nprint(['NO','YES'][h in a or w in a])"}
{"label": 8, "index": 915, "code": "a = []\nfor i in range(2):\n  a.append(input())\n\nH1 = a[0].split()[0]\nW1 = a[0].split()[1]\n\nH2 = a[1].split()[0]\nW2 = a[1].split()[1]\n\nif H1 == H2 or H1 == W2 or W1 == H2 or W1 == W2:\n  print(\"YES\")\nelse:\n  print(\"NO\")\n"}
{"label": 8, "index": 916, "code": "#! /usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nh1, w1 = map(int, input().split())\nh2, w2 = map(int, input().split())\n\nif {h1, w1} & {h2, w2}:\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 8, "index": 917, "code": "# -*- coding:utf-8 -*-\nh1, w1 = map(int, input().split())\nh2, w2 = map(int, input().split())\nif w1 == w2 or h1 == h2 or h1 == w2 or w1 == h2:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 8, "index": 918, "code": "a = set(map(int, input().split()))\nb = set(map(int, input().split()))\nif a & b:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 8, "index": 919, "code": "H1, W1 = map (int, raw_input().split())\nH2, W2 = map (int, raw_input().split())\n\nif H1 == H2 or H1 == W2 or H2 == W1 or W1 == W2:\n    print \"YES\"\nelse:\n    print \"NO\"\n"}
{"label": 8, "index": 920, "code": "H = []\nW = []\nfor i in range(2):\n\tinput_line = map(int,raw_input().split(\" \"))\n\tH.append(input_line[0])\n\tW.append(input_line[1])\nif H[0] == H[1] or W[0] == W[1] or H[0] == W[1] or W[0] == H[1]:\n\tprint \"YES\"\nelse:\n\tprint \"NO\""}
{"label": 8, "index": 921, "code": "h1, w1 = map(int, input().split())\nh2, w2 = map(int, input().split())\n\nif h1 == h2 or h1 == w2 or w1 == h2 or w1 == w2:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 8, "index": 922, "code": "h1, w1 = map(int, raw_input().split())\nh2, w2 = map(int, raw_input().split())\n\nif h1 == h2 or h1 == w2 or w1 == h2 or w1 == w2:\n    print \"YES\"\nelse:\n    print \"NO\"\n"}
{"label": 8, "index": 923, "code": "h1, w1 = map(int, input().split())\nh2, w2 = map(int, input().split())\nif w1 == w2 or w1 == h2 or h1 == w2 or h1 == h2:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 8, "index": 924, "code": "h1, w1 = map(int, input().split())\nh2, w2 = map(int, input().split())\n\nif(h1==h2 or h1==w2 or w1==h2 or w1==w2):\n    print('YES')\nelse:\n    print('NO')"}
{"label": 8, "index": 925, "code": "# -*- coding: utf-8 -*-\n \nb, c = map(int, raw_input().split())\nd,e=map(int,raw_input().split())\n \n \nif b==d or b==e or c==d or c==e:\n    print 'YES'\nelse:\n    print 'NO'"}
{"label": 8, "index": 926, "code": "h1, w1 = [int(i) for i in input().split(\" \")]\nh2, w2 = [int(i) for i in input().split(\" \")]\n\nif h1 == h2 or h1 == w2 or w1 == h2 or w1 == w2:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n\n"}
{"label": 8, "index": 927, "code": "H1, W1 = map(int, input().split())\nH2, W2 = map(int, input().split())\nif H1 == H2 or H1 == W2 or W1 == H2 or W1 == W2:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 8, "index": 928, "code": "print([\"YES\",\"NO\"][set(input().split()) & set(input().split()) == set()])"}
{"label": 8, "index": 929, "code": "# -*- coding: utf-8 -*-\n# problem B\n\nh1, w1 = map(int, input().split())\nh2, w2 = map(int, input().split())\n\nflag = False\n\nif h1 == h2 or h1 == w2:\n    flag = True\nif w1 == h2 or w1 == w2:\n    flag = True\n    \nif flag == True:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 8, "index": 930, "code": "# -*- coding: utf-8 -*-\n\nH1W1 = input(\"\")\nH2W2 = input(\"\")\n\nH1 = (H1W1[0:H1W1.find(\" \")])\nW1 = (H1W1[H1W1.find(\" \") + 1:])\nH2 = (H2W2[0:H2W2.find(\" \")])\nW2 = (H2W2[H2W2.find(\" \") + 1:])\n\n# \u753b\u97621\u3068\u753b\u97622\u306e\u7e26\u5e45\u304c\u540c\u3058\nif H1 == H2:\n    print (\"YES\")\n# \u753b\u97621\u3068\u753b\u97622\u306e\u6a2a\u5e45\u304c\u540c\u3058\nelif W1 == W2:\n    print (\"YES\")\n# \u753b\u97621\u306e\u7e26\u5e45\u3068\u753b\u97622\u306e\u6a2a\u5e45\u304c\u540c\u3058\nelif H1 == W2:\n    print (\"YES\")\n# \u753b\u97621\u306e\u6a2a\u5e45\u3068\u753b\u97622\u306e\u7e26\u5e45\u304c\u540c\u3058\nelif W1 == H2:\n    print (\"YES\")\nelse:\n    print (\"NO\")\n"}
{"label": 8, "index": 931, "code": "# coding: utf-8\n\n\ndef is_arrange(d1, d2):\n    return any(d in d1 for d in d2)\n\n\nif __name__ == '__main__':\n    display1 = [int(i) for i in input().split(' ')]\n    display2 = [int(i) for i in input().split(' ')]\n    print('YES' if is_arrange(display1, display2) else 'NO')"}
{"label": 8, "index": 932, "code": "h1, w1 = map(int, raw_input().split())\nh2, w2 = map(int, raw_input().split())\nif h1 == h2 or w1 == h2 or w2 == h1 or w1 == w2:\n    print \"YES\"\nelse:\n    print \"NO\"\n\n"}
{"label": 8, "index": 933, "code": "Disp1 = list(int(i) for i in input().split())\nDisp2 = list(int(i) for i in input().split())\n\nResult = False\n\nfor length1 in Disp1:\n    for length2 in Disp2:\n        if length1 == length2:\n            Result = True\n            break\n\nif Result:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 8, "index": 934, "code": "h1, w1 = [ int(x) for x in raw_input().split() ]\nh2, w2 = [ int(x) for x in raw_input().split() ]\n\nres = False\nif h1 == h2 or h1 == w2: res = True\nif h2 == h1 or h2 == w1: res = True\nif w1 == h2 or w1 == w2: res = True\nif w2 == h1 or w2 == w1: res = True\nif res:\n  print \"YES\"\nelse:\n  print \"NO\"\n"}
{"label": 8, "index": 935, "code": "H1,W1 = map(int, input().split())\nH2,W2 = map(int, input().split())\n\nif H1 == H2:\n    print(\"YES\")\nelif H1 == W2:\n    print(\"YES\")\nelif W1 == H2:\n    print(\"YES\")\nelif W1 == W2:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 8, "index": 936, "code": "a = list(map(int,input().split()))\nb = list(map(int,input().split()))\nif a[0] in b or a[1] in b:\n\tprint('YES')\nelse:\n\tprint('NO')"}
{"label": 8, "index": 937, "code": "def read():\n    return map(int, input().split())\nH1, W1 = read()\nH2, W2 = read()\nif H1 == H2 or W1 == W2 or H1 == W2 or W1 == H2:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 8, "index": 938, "code": "h1, w1 = map(int, input().split())\nh2, w2 = map(int, input().split())\nif h1 == h2 or h1 == w2 or w1 == h2 or w1 == w2:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 8, "index": 939, "code": "H1, W1 = input().split()\nH2, W2 = input().split()\nif H1 == H2\\\nor H1 == W2\\\nor W1 == H2\\\nor W1 == W2:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 8, "index": 940, "code": "# -*- coding: UTF-8 -*-\n\nH1, W1 = map(int, raw_input().split())\nH2, W2 = map(int, raw_input().split())\n\nif( H1 == H2 or H1 == W2 or W1 == H2 or W1 == W2):\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 8, "index": 941, "code": "# -*- coding: UTF-8 -*-\n\nH1, W1 = map(int, raw_input().split())\nH2, W2 = map(int, raw_input().split())\n\nif( H1 == H2 or H1 == W2 or W1 == H2 or W1 == W2):\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 8, "index": 942, "code": "print \"YES\" if set(raw_input().split()) & set(raw_input().split()) else \"NO\""}
{"label": 8, "index": 943, "code": "# coding: utf-8\n\n# \u6574\u6570\u306e\u5165\u529b\nH1,W1 = map(int, raw_input().split())\nH2,W2 = map(int, raw_input().split())\n\nif( (H1 == H2) or (H1 == W2) or (W1 == H2) or (W1 == W2) ):\n    ans = \"YES\"\nelse:\n    ans = \"NO\"\n\n# \u51fa\u529b\nprint ans"}
{"label": 8, "index": 944, "code": "from itertools import product\nfor n, m in product(map(int, input().split()), map(int, input().split())):\n    if n == m:\n        print(\"YES\")\n        break\nelse:\n    print(\"NO\")\n"}
{"label": 8, "index": 945, "code": "a,b=map(int,input().split())\nc,d=map(int,input().split())\nif a==c or a==d or b==c or b==d:\n  print('YES')\nelse:\n  print('NO')\n"}
{"label": 8, "index": 946, "code": "H1,W1 = map(int,raw_input().split())\nH2,W2 = map(int,raw_input().split())\n\nif H1 == H2 or H1 == W2 or W1 == H2 or W1 == W2:\n    print \"YES\"\nelse:\n    print \"NO\""}
{"label": 8, "index": 947, "code": "h1,w1=map(int,input().split())\nh2,w2=map(int,input().split())\n\nif(h1==h2):\n  print(\"YES\")\nelif(h1==w2):\n  print(\"YES\")\nelif(h2==w1):\n  print(\"YES\")\nelif(w1==w2):\n  print(\"YES\")\nelse:\n  print(\"NO\")"}
{"label": 8, "index": 948, "code": "hw1 = list(map(int, input().split()))\nhw2 = list(map(int, input().split()))\nif hw1[0] == hw2[0] or hw1[0] == hw2[1] or hw1[1] == hw2[0] or hw1[1] == hw2[1]:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 8, "index": 949, "code": "H1, W1 = raw_input().split()\nH2, W2 = raw_input().split()\nif H1 == H2 or H1 == W2 or W1 == H2 or W1 == W2:\n    print 'YES'\nelse:\n    print 'NO'"}
{"label": 8, "index": 950, "code": "print('YES'if set(input().split())&set(input().split())else'NO')"}
{"label": 8, "index": 951, "code": "h1, w1 = map(int, input().split())\nh2, w2 = map(int, input().split())\nif h1 == h2 or h1 == w2 or w1 == h2 or w1 == w2:\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 8, "index": 952, "code": "def getFit(size1, size2):\n    for s1 in size1:\n        for s2 in size2:\n            if s1 == s2: return 'YES'\n    return 'NO'\n\nsize1 = list(map(int, input().split()))\nsize2 = list(map(int, input().split()))\nprint(getFit(size1, size2))\n"}
{"label": 8, "index": 953, "code": "h1, w1 = list(map(int, input().split()))\nh2, w2 = list(map(int, input().split()))\n\nif h1 == h2 or h1 == w2 or w1 == h2 or w1 == w2:\n\tprint('YES')\nelse:\n\tprint('NO')"}
{"label": 8, "index": 954, "code": "h1,w1 = map(int,input().split())\nh2,w2 = map(int,input().split())\n\nif h1 == h2 or h1 == w2 or w1 == w2 or w1 == h2:\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 8, "index": 955, "code": "H1,W1 = map(int, raw_input().split())\nH2,W2 = map(int, raw_input().split())\n\nif H1 == H2 or H1 == W2 or W1 == H2 or W1 == W2:\n    print 'YES'\nelse:\n    print 'NO'"}
{"label": 8, "index": 956, "code": "h1, w1 = map(int, raw_input().split())\nh2, w2 = map(int, raw_input().split())\n\nprint \"YES\" if h1 == h2 or h1 == w2 or w1 == h2 or w1 == w2 else \"NO\"\n"}
{"label": 8, "index": 957, "code": "a, b = map(int, input().split())\nc, d = map(int, input().split())\n\nif a == c or a == d or b == c or b == d:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n"}
{"label": 8, "index": 958, "code": "M1 = list(map(int, input().split(' ')))\nM2 = list(map(int, input().split(' ')))\n\nans = False\nfor l1 in M1:\n    for l2 in M2:\n        if l1 == l2:\n            ans = True\n\nprint(\"YES\" if ans else \"NO\")"}
{"label": 8, "index": 959, "code": "d=[input().split() for i in range(2)]\nprint(((d[0][0] in d[1]) or (d[0][1] in d[1])) and 'YES' or 'NO')\n"}
{"label": 8, "index": 960, "code": "a = [list(map(int, input().split())) for i in range(2)] \n\nif a[0][0] == a[1][0] or a[0][0] == a[1][1] or a[0][1] == a[1][0] or a[0][1] == a[1][1]:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 8, "index": 961, "code": "HW1 = set(map(int, input().split()))\nHW2 = set(map(int, input().split()))\n\nres_len = len(HW1) + len(HW2)\nres = HW1 | HW2\n\nif res_len is len(res):\n    print(\"NO\")\nelse:\n    print(\"YES\")\n"}
{"label": 8, "index": 962, "code": "h1,w1=map(int,raw_input().split())\nh2,w2=map(int,raw_input().split())\nif h1==h2 or w1==w2 or h1==w2 or h2==w1:\n    print(\"YES\")\nelse:\n    print('NO')\n"}
{"label": 8, "index": 963, "code": "from collections import defaultdict\n\n\ndef main():\n    H1, W1 = map(int, input().split())\n    H2, W2 = map(int, input().split())\n\n    if H1 in [H2, W2] or W1 in [H2, W2]:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 8, "index": 964, "code": "a1, b1 = map(int, input().split())\na2, b2 = map(int, input().split())\n\nif a1 == a2 or a1 == b2 or b1 == a2 or b1 == b2:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 8, "index": 965, "code": "disp1 = input()\ndisp2 = input()\n\ndisp1h, disp1w = disp1.split()\ndisp2h, disp2w = disp2.split()\n\nif disp1h == disp2h or disp1h == disp2w or disp1w == disp2h or disp1w == disp2w:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 8, "index": 966, "code": "# Works well with Python 3.5.2\nh_1, w_1 = map(int, input().split())\nh_2, w_2 = map(int, input().split())\nif((h_1==h_2)or(h_1==w_2)or(w_1==h_2)or(w_1==w_2)):\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 8, "index": 967, "code": "import re\n\n\nclass IO_for_Contest(object):\n    @staticmethod\n    def my_input():\n        # return raw_input()\n        return input()\n\n    @staticmethod\n    def read_from_input():\n        # TODO: impl this for each problem\n        pass\n\n    @staticmethod\n    def read_line():\n        return IO_for_Contest.my_input().strip()\n\n    @staticmethod\n    def read_int():\n        return int(IO_for_Contest.my_input().strip())\n\n    @staticmethod\n    def read_n_int(n):\n        return list(map(\n                    int,\n                    re.split('\\s+', IO_for_Contest.my_input().strip())))[: n]\n\n\ndef solve():\n    buf1 = IO_for_Contest.read_n_int(2)\n    buf2 = IO_for_Contest.read_n_int(2)\n    if (buf1[0] == buf2[0] or buf1[0] == buf2[1]) or \\\n       (buf1[1] == buf2[1] or buf1[1] == buf2[0]):\n        print('YES')\n    else:\n        print('NO')\n\n\nif __name__ == '__main__':\n    solve()"}
{"label": 8, "index": 968, "code": "h1, w1 = map(int, input().split())\nh2, w2 = map(int, input().split())\n\nprint('YES' if h1==h2 or w1==w2 or h1==w2 or h2==w1 else 'NO')\n"}
{"label": 8, "index": 969, "code": "# -*- coding: UTF-8 -*-\n\nH1, W1 = map(int, raw_input().split())\nH2, W2 = map(int, raw_input().split())\n\nif( H1 == H2 or H1 == W2 or W1 == H2 or W1 == W2):\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 8, "index": 970, "code": "a=set(map(int,raw_input().split()))\nb=set(map(int,raw_input().split()))\nprint \"YES\" if len(a&b)>0 else \"NO\""}
{"label": 8, "index": 971, "code": "a,b = map(int,input().split())\nc,d = map(int,input().split())\n\nif a==c  or b==d or a==d or c==b:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 8, "index": 972, "code": "H1,W1=map(int,raw_input().split())\nH2,W2=map(int,raw_input().split())\nif H1==H2 or H1==W2 or W1==H2 or W1==W2:\n  print \"YES\"\nelse:\n  print \"NO\""}
{"label": 8, "index": 973, "code": "h1,w1 = raw_input().split()\nh2,w2 = raw_input().split()\nif h1 == h2 or h1 == w2 or w1 == h2 or w1 == w2:\n    print 'YES'\nelse:\n    print 'NO'"}
{"label": 8, "index": 974, "code": "H1, W1 = map(int,raw_input().split())\nH2, W2 = map(int,raw_input().split())\n\nif H1 == H2:\n    print \"YES\"\nelif H1 == W2:\n    print \"YES\"\nelif W1 == W2:\n    print \"YES\"\nelif W1 == H2:\n    print \"YES\"\nelse:\n    print \"NO\"\n"}
{"label": 8, "index": 975, "code": "h1, w1 = input().split()\nh2, w2 = input().split()\n\nif h1 == h2 or h1 == w2 or w1 == h2 or w1 == w2 :\n    print(\"YES\")\nelse :\n    print(\"NO\")\n    "}
{"label": 8, "index": 976, "code": "a = set( map(int,input().split()) )\nb = set( map(int, input().split()) )\n\n#print(a,b)\n\nr = \"\"\nif len(a&b)!=0:r = \"YES\"\nelse:r = \"NO\"\n\nprint(r)"}
{"label": 8, "index": 977, "code": "d1 = [int(i) for i in input().split()]\nd2 = [int(i) for i in input().split()]\nif d1[0] in d2 or d1[1] in d2:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 8, "index": 978, "code": "a=set(raw_input().split())\nb=set(raw_input().split())\nprint 'YES' if a&b else 'NO'"}
{"label": 8, "index": 979, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nfrom itertools import product\nleft = list(map(int, input().split()))\nright = list(map(int, input().split()))\nis_found = False\nfor left_height, right_height in product(left, right):\n    if left_height == right_height:\n        is_found = True\n        break\nif is_found:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 8, "index": 980, "code": "H1, W1 = map(int, input().split())\nH2, W2 = map(int, input().split())\n\nif H1 == H2 or W1 == H2 or H1 == W2 or W1 == W2:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 8, "index": 981, "code": "# coding: utf-8\n\ndef main():\n    h1, w1 = map(int, input().split())\n    h2, w2 = map(int, input().split())\n\n    if h1 in (h2, w2) or w1 in (h2, w2):\n        print('YES')\n    else:\n        print('NO')\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 8, "index": 982, "code": "D0 = list(map(int, input().split()))\n\nD1 = list(map(int, input().split()))\n\nif D0[0] == D1[0]:\n    print('YES')\nelif D0[0] == D1[1]:\n        print('YES')\nelif D0[1] == D1[0]:\n        print('YES')\nelif D0[1] == D1[1]:\n        print('YES')\nelse:\n    print('NO')\n\n"}
{"label": 8, "index": 983, "code": "h1, w1 = map(int, raw_input().split())\nh2, w2 = map(int, raw_input().split())\n\nif h1 == h2 or h1 == w2 or w1 == h2 or w1 == w2:\n  print \"YES\"\nelse:\n  print \"NO\"\n\n"}
{"label": 8, "index": 984, "code": "a = map(int,raw_input().split());\nb = map(int,raw_input().split());\nif(a[0] in b or a[1] in b):\n    print \"YES\"\nelse:\n    print \"NO\""}
{"label": 8, "index": 985, "code": "h1, w1 = map(int, raw_input().split())\nh2, w2 = map(int, raw_input().split())\n\nif h1 == h2:\n    print \"YES\"\nelif h1 == w2:\n    print \"YES\"\nelif h2 == w1:\n    print \"YES\"\nelif w1 == w2:\n    print \"YES\"\nelse:\n    print \"NO\"\n"}
{"label": 8, "index": 986, "code": "size1 = input()\nh1, w1  = size1.split(\" \")\nsize2 = input()\nh2, w2  = size2.split(\" \")\n\nif h1 == h2 or h1 == w2 or w1 == h2 or w1 == w2:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 8, "index": 987, "code": "a = input().split()\nb = input().split()\n\nif a[0] == b[0] or a[0] == b[1] or a[1] == b[0] or a[1] == b[1]:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 8, "index": 988, "code": "a = set(map(int,input().split()))\nb = set(map(int,input().split()))\n\nprint('YES' if bool(a&b) else 'NO')"}
{"label": 8, "index": 989, "code": "set1 = set(map(int, input().split()))\nset2 = set(map(int, input().split()))\nprint('YES' if set1 & set2 else 'NO')"}
{"label": 8, "index": 990, "code": "#!/usr/bin/python\n\ndef main():\n        H1,W1 = raw_input().split()\n        H2,W2 = raw_input().split()\n        if H1 == H2 or H1 == W2 or W1 == H2 or W1 == W2:\n                print \"YES\"\n        else:\n                print \"NO\"\nmain()"}
{"label": 8, "index": 991, "code": "a = map(int, raw_input().split())\nb = map(int, raw_input().split())\nif a[0] == b[0] or a[0] == b[1] or a[1] == b[0] or a[1] == b[1]:\n    print \"YES\"\nelse:\n    print \"NO\"\n"}
{"label": 8, "index": 992, "code": "def ri(): return int(input())\ndef rli(): return list(map(int, input().split()))\ndef rls(): return list(input())\ndef pli(a): return \"\".join(list(map(str, a)))\n\nh1, w1 = rli()\nh2, w2 = rli()\nif(h1 == h2 or w1 == h2 or h2 == w1 or w1 == w2):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 8, "index": 993, "code": "[w1, h1] = map(int, raw_input().split(' '))\n[w2, h2] = map(int, raw_input().split(' '))\n\nret = 'YES' if any([w in (w2, h2) for w in [w1, h1]]) else 'NO'\nprint(ret)"}
{"label": 8, "index": 994, "code": "def read():\n  return map(int, input().split())\n\ndef yn(b):\n  return \"YES\" if b else \"NO\"\n\n(H1, W1) = read()\n(H2, W2) = read()\n\nprint(yn(H1 == H2 or H1 == W2 or W1 == H2 or W1 == W2))\n"}
{"label": 8, "index": 995, "code": "h1,w1=map(int,input().split())\nh2,w2=map(int,input().split())\nif h1==h2 or h1==w2 or w1==h2 or w1==w2:\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 8, "index": 996, "code": "\nH = [0,0]\nW = [0,0]\n(H[0],W[0]) = map(int,input().split())\n(H[1],W[1]) = map(int,input().split())\n\ncanFit = False\n\nif H[0]==H[1] or W[0]==H[1]:\n    canFit = True\nif H[0]==W[1] or W[0]==W[1]:\n    canFit = True\n\nif canFit:\n    print (\"YES\")\nelse:\n    print (\"NO\")\n"}
{"label": 8, "index": 997, "code": "H1, W1 = map(int,input().split())\nH2, W2 = map(int,input().split())\n\nif H1 == H2 or H1 == W2 or H2 == W1 or W1 == W2:\n\tprint('YES')\nelse:\n\tprint('NO')"}
{"label": 8, "index": 998, "code": "x = input().split()\ny = input().split()\n\nh1 = int(x[0])\nw1 = int(x[1])\nh2 = int(y[0])\nw2 = int(y[1])\n\nif h1 == h2:\n\tprint (\"YES\")\nelif w1 == w2:\n\tprint (\"YES\")\nelif h1 == w2:\n\tprint (\"YES\")\nelif h2 == w1:\n\tprint (\"YES\")\nelse:\n\tprint (\"NO\")"}
{"label": 8, "index": 999, "code": "import sys\n\na=[int(n) for n in sys.stdin.readline().strip().split(\" \")]\nb=[int(n) for n in sys.stdin.readline().strip().split(\" \")]\n\nif a[0]==b[0] or a[0]==b[1] or a[1]==b[0] or a[1]==b[1] :\n\tprint(\"YES\")\nelse :\n\tprint(\"NO\")"}
{"label": 8, "index": 1000, "code": "a = [int(n) for n in input().split()]\nh, w = map(int, input().split())\nprint(\"YES\" if h in a or w in a else \"NO\")"}
{"label": 8, "index": 1001, "code": "A1 = input().split()\nA2 = input().split()\n\ndef higt(a,b):\n    for i in range(2):\n        for j in range(2):\n            if a[i] == b[j]:\n                return(\"YES\")\n    \n    \n    return(\"NO\")\n\n\nprint(higt(A1,A2))"}
{"label": 8, "index": 1002, "code": "H1, W1 = map(int, raw_input().split())\nH2, W2 = map(int, raw_input().split())\nprint \"YES\" if (H1 in [H2, W2]) or (W1 in [H2, W2]) else \"NO\""}
{"label": 8, "index": 1003, "code": "H1, W1 = map(int, input().split())\nH2, W2 = map(int, input().split())\n# if H1 == H2 or H1 == W2 or W1 == H2 or W1 == W2:\n#     print(\"YES\")\n# else:\n#     print(\"NO\")\nprint('YES' if H1 == H2 or H1 == W2 or W1 == H2 or W1 == W2 else 'NO')\n"}
{"label": 8, "index": 1004, "code": "h1,w1 = map(int, raw_input().split())\nh2,w2 = map(int, raw_input().split())\n\nif(h1 == h2 or h1 == w2 or w1 == h2 or w1 == w2):\n\tprint \"YES\"\nelse:\n\tprint \"NO\""}
{"label": 8, "index": 1005, "code": "A1,B1=map(int,raw_input().strip().split(\" \"))\nA2,B2=map(int,raw_input().strip().split(\" \"))\n\nif A1==A2 or A1==B2 or B1==A2 or B1==B2:\n\tprint \"YES\"\nelse:\n\tprint \"NO\"\n"}
{"label": 8, "index": 1006, "code": "# coding: utf-8\n\nx1, y1 = map(int, input().split())\nx2, y2 = map(int, input().split())\nprint('YES' if x1==x2 or x1==y2 or y1==x2 or y1==y2 else 'NO')"}
{"label": 8, "index": 1007, "code": "# Works well with Python 3.5.2\nl1 = set(map(int, input().split()))\nl2 = set(map(int, input().split()))\nif(l1&l2):\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 8, "index": 1008, "code": "def main():\n    H1, W1 = map(int, input().split())\n    H2, W2 = map(int, input().split())\n\n    if H1 == H2 or H1 == W2 or W1 == H2 or W1 == W2:\n        print('YES')\n    else:\n        print('NO')\n\nmain()\n"}
{"label": 8, "index": 1009, "code": "print(\"YES\" if set(input().split()) & set(input().split()) else \"NO\")"}
{"label": 8, "index": 1010, "code": "H1, W1 = map(int, raw_input().split())\nH2, W2 = map(int, raw_input().split())\n\nif H1 == H2 or H1 ==W2 or W1 == H2 or W1 ==W2:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 8, "index": 1011, "code": "h1, w1 = map(int, input().split())\nh2, w2 = map(int, input().split())\n\nprint('YES' if h1==h2 or w1==w2 or h1==w2 or h2==w1 else 'NO')\n"}
{"label": 8, "index": 1012, "code": "import sys\n\ndef solve():\n    h1, w1 = map(int, input().split())\n    h2, w2 = map(int, input().split())\n\n    if h1 == h2 or h1 == w2:\n        ans = 'YES'\n    elif w1 == h2 or w1 == w2:\n        ans = 'YES'\n    else:\n        ans = 'NO'\n\n    print(ans)\n\ndef debug(x, table):\n    for name, val in table.items():\n        if x is val:\n            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)\n            return None\n\nif __name__ == '__main__':\n    solve()"}
{"label": 8, "index": 1013, "code": "a,b=map(int,input().split())\nc,d=map(int,input().split())\nprint(\"YES\" if a == c or a == d or b == c or b == d else \"NO\")\n"}
{"label": 8, "index": 1014, "code": "H1,W1 = map(int,raw_input().split())\nH2,W2 = map(int,raw_input().split())\nprint \"YES\" if H1==H2 or H1==W2 or W1==H2 or W1==W2 else \"NO\" "}
{"label": 8, "index": 1015, "code": "h1,w1 = map(int,raw_input().split(' '));\nh2,w2 = map(int,raw_input().split(' '));\n\nif(h1 == h2 or h1 == w2 or w1 == h2 or w1 == w2):\n    print \"YES\";\nelse:\n    print \"NO\";"}
{"label": 8, "index": 1016, "code": "#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n\na, b = map(int, input().split())\nc, d = map(int, input().split())\nif a == c or a == d or b == c or b == d:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 8, "index": 1017, "code": "H1,W1=[int(i) for i in input().strip().split()]\nH2,W2=[int(i) for i in input().strip().split()]\n\nif(H1==W2 or H1==H2 or W1==W2 or W1==H2):\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 8, "index": 1018, "code": "\na = input().split()\nb = input().split()\nif a[0]==b[0] or a[0]==b[1] or a[1]==b[0] or a[1]==b[1]:\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 8, "index": 1019, "code": "H1, W1 = map(int, input().split())\nH2, W2 = map(int, input().split())\nif (H1 - H2)*(H1 - W2)*(W1 - H2)*(W1 - W2) == 0:\n print(\"YES\")\nelse:\n print(\"NO\")\n"}
{"label": 8, "index": 1020, "code": "H1, W1 = map(int, input().split())\nH2, W2 = map(int, input().split())\nif H1 == H2 or H1 == W2 or W1 == H2 or W1 == W2:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 8, "index": 1021, "code": "h_1, w_1 = map(int, input().split())\nh_2, w_2 = map(int, input().split())\n\nif h_1 == h_2 or h_1 == w_2 or w_1 == h_2 or w_1 == w_2:\n\tprint('YES')\nelse:\n\tprint('NO')"}
{"label": 8, "index": 1022, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nleft = list(map(int, input().split()))\nright = list(map(int, input().split()))\nis_found = False\nfor left_height in left:\n    for right_height in right:\n        if left_height == right_height:\n            is_found = True\nif is_found:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 8, "index": 1023, "code": "h1, w1 = raw_input().split()\nh2, w2 = raw_input().split()\nif h1 == h2 or h1 == w2:\n    print 'YES'\nelif w1 == h2 or w1 == w2:\n    print 'YES'\nelse:\n    print 'NO'\n"}
{"label": 8, "index": 1024, "code": "h1, w1 = map(int, raw_input().split())\nh2, w2 = map(int, raw_input().split())\nif h1==h2 or h1==w2 or w1==h2 or w1==w2:\n    print \"YES\"\nelse:\n    print \"NO\""}
{"label": 8, "index": 1025, "code": "h1,w1=map(int,input().split())\nh2,w2=map(int,input().split())\nprint(\"YES\"if h1==h2 or h1==w2 or h2==w1 or w1==w2 else\"NO\")"}
{"label": 8, "index": 1026, "code": "a = list(map(int, input().split()))\nb = list(map(int, input().split()))\nif a[0] in b or a[1] in b:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 8, "index": 1027, "code": "import sys\n\n\nstdin = sys.stdin\n\na,b=map(int, stdin.readline().split())\nc,d=map(int, stdin.readline().split())\nif a == c or a == d or b == c or b == d:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 8, "index": 1028, "code": "disp1 = input().split()\ndisp2 = input().split()\n\nh_1 = int(disp1[0])\nw_1 = int(disp1[1])\nh_2 = int(disp2[0])\nw_2 = int(disp2[1])\n\njudge = h_1 == h_2 or h_1 == w_2 or w_1 == h_2 or w_1 == w_2\n\nif judge:\n  print('YES')\nelse:\n  print('NO')\n"}
{"label": 8, "index": 1029, "code": "hw1 = list(map(int, input().split()))\nhw2 = list(map(int, input().split()))\n\nif hw1[0] in hw2 or hw1[1] in hw2:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 8, "index": 1030, "code": "h1=set(map(str,raw_input().split()))\nh2=set(map(str,raw_input().split()))\nprint 'YES' if h1&h2 else 'NO'"}
{"label": 8, "index": 1031, "code": "h1, w1 = map(int, input().split())\nh2, w2 = map(int, input().split())\n\nif h1 == h2 or w1 == w2:\n    print(\"YES\")\nelif h1 == w2 or h2 == w1:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 8, "index": 1032, "code": "myinput = lambda:raw_input().split()\n\na = set(myinput())\nb = set(myinput())\n\nprint 'YES' if len(a.intersection(b)) else 'NO'\n"}
{"label": 8, "index": 1033, "code": "def main():\n    h1, w1 = map(int, input().split())\n    h2, w2 = map(int, input().split())\n\n    if h1 == h2 or h1 == w2 or w1 == h2 or w1 == w2:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 8, "index": 1034, "code": "#coding: utf-8\n#ABC_038B\n\nh1,w1=map(int,raw_input().split())\nh2,w2=map(int,raw_input().split())\n\nif h1==h2 or h1==w2 or h2==w1 or w2==w1:\n print\"YES\"\nelse:\n print \"NO\"\n"}
{"label": 8, "index": 1035, "code": "a,b=map(int,raw_input().split())\nl=map(int,raw_input().split())\n\nprint 'YES' if a in l or b in l else 'NO'"}
{"label": 8, "index": 1036, "code": "import sys\na = []\nfor line in sys.stdin:\n    a.append(str(line))\nb=len(a)\nd=[]\nfor i in xrange(b):\n    c=map(str,a[i][:-1].split(\" \"))\n    d.append(c)\nif (d[0][0] in d[1]) or (d[0][1] in d[1]):\n    print(\"YES\")\nelse:\n    print(\"NO\") "}
{"label": 8, "index": 1037, "code": "H1, W1 = map(int, raw_input().split())\nH2, W2 = map(int, raw_input().split())\nif H1 == H2 or W1 == W2 or H1 == W2 or W1 == H2:\n    print \"YES\"\nelse:\n    print \"NO\"\n"}
{"label": 8, "index": 1038, "code": "# -*- coding:utf-8 -*-\nimport sys\n\ndef split_with_func(string, func):\n    return [func(x) for x in string.split()]\n\ndef get_line(func=None):\n    string = sys.stdin.readline().rstrip()\n    if func is not None:\n        return split_with_func(string, func)\n    else:\n        return string\n\nS1 = set(get_line(int))\nS2 = set(get_line(int))\nif len(S1 & S2) > 0:\n    print 'YES'\nelse:\n    print 'NO'\n"}
{"label": 8, "index": 1039, "code": "a,b = map(int,raw_input().split())\nc,d = map(int,raw_input().split())\n\ne = 0\nfor i in [a,b]:\n\tfor j in [c,d]:\n\t\tif i == j:\n\t\t\te = 1\nif e == 0:\n\tprint \"NO\"\nelif e == 1:\n\tprint \"YES\""}
{"label": 9, "index": 1040, "code": "import re\n\nclass IO_for_Contest(object):\n    @staticmethod\n    def my_input():\n        #return raw_input()\n        return input()\n\n    @staticmethod\n    def read_from_input():\n        #TODO: impl this for each problem\n        pass\n\n    @staticmethod\n    def read_line():\n        return IO_for_Contest.my_input().strip()\n\n    @staticmethod\n    def read_int():\n        return int(IO_for_Contest.my_input().strip())\n\n    @staticmethod\n    def read_n_int(n):\n        return list(map( \\\n                int, \\\n                re.split('\\s+', IO_for_Contest.my_input().strip())))[ : n]\n\ndef solve():\n    buf = IO_for_Contest.read_n_int(3)\n    a = buf[0]\n    b = buf[1]\n    c = buf[2]\n    print(2 * ((a * b) + (b * c) + (c * a)))\n    \nif __name__ == '__main__':\n    solve()"}
{"label": 9, "index": 1041, "code": "import sys\n\ndef solve():\n    a, b, c = map(int, input().split())\n    ans = 2*a*b + 2*a*c + 2*b*c\n    print(ans)\n\n\ndef debug(x, table):\n    for name, val in table.items():\n        if x is val:\n            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)\n            return None\n\nif __name__ == '__main__':\n    solve()"}
{"label": 9, "index": 1042, "code": "a, b, c = list(map(int, input().split()))\nprint(2*(a*b+b*c+c*a))"}
{"label": 9, "index": 1043, "code": "A, B, C = map(int, input().split())\nprint((A * B + B * C + C * A) * 2)"}
{"label": 9, "index": 1044, "code": "A,B,C=map(int,raw_input().split())\nprint((A*B*2)+(A*C*2)+(B*C*2))"}
{"label": 9, "index": 1045, "code": "a, b, c, = map(int,input().split())\nprint(((a*b)+(a*c)+(b*c))*2)"}
{"label": 9, "index": 1046, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nA,B,C = map(int, input().split())\n\nsurface = ((A * B) + (B * C) + (C * A)) * 2\n\nprint(surface)"}
{"label": 9, "index": 1047, "code": "a,b,c=map(int,input().split())\nprint((a*b+b*c+c*a)*2)"}
{"label": 9, "index": 1048, "code": "a, b, c = map(int, input().split())\nans = 2 * (a * b + b * c + c * a)\nprint(ans)\n"}
{"label": 9, "index": 1049, "code": "a,b,c = map(int, input().split())\n\nprint(((a * b) + (b * c) + (c * a)) * 2)\n"}
{"label": 9, "index": 1050, "code": "A, B, C = map(int,input().split())\nprint(2 * (A * B + B * C + A * C))\n"}
{"label": 9, "index": 1051, "code": "def read():\n    return map(int, input().split())\n\na, b, c = read()\nprint(2 * (a * b + b * c + c * a))\n"}
{"label": 9, "index": 1052, "code": "#! /usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nA, B, C = map(int, input().split())\nprint(2 * (A * B + B * C + C * A))\n"}
{"label": 9, "index": 1053, "code": "def main():\n    a, b, c = map(int, input().split())\n    print(a * b * 2 + a * c * 2 + b * c * 2)\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 9, "index": 1054, "code": "#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n\nA, B, C = map(int, input().split())\nprint(2 * (A * B + B * C + C * A))\n"}
{"label": 9, "index": 1055, "code": "a,b,c=map(int, input().split())\n\nprint( str( a*b*2 + b*c*2 + a*c*2 ) )\n"}
{"label": 9, "index": 1056, "code": "a,b,c = map(int, raw_input().split())\nprint a*b*2 + a*c*2 + b*c*2"}
{"label": 9, "index": 1057, "code": "A, B, C = map(int, input().split())\nprint(2*(A*B+B*C+C*A))"}
{"label": 9, "index": 1058, "code": "A,B,C=[int(x) for x in input().strip().split()]\nprint(2*(A*B+A*C+B*C))\n"}
{"label": 9, "index": 1059, "code": "a,b,c=map(int,raw_input().split())\nprint(a*b*2+a*c*2+b*c*2)\n"}
{"label": 9, "index": 1060, "code": "a, b, c, = map(int, raw_input().split())\nprint 2  * (a*b + b*c + c*a)"}
{"label": 9, "index": 1061, "code": "A, B, C = list(map(int, input().split()))\nS = 2*(A*B+B*C+C*A)\nprint(S)"}
{"label": 9, "index": 1062, "code": "A, B, C = map(int, raw_input().split())\nprint 2*(A*B + B*C + A*C)"}
{"label": 9, "index": 1063, "code": "a,b,c = list(map(int, input().split() ) )\n\nprint((a*b + b*c + c*a)*2)"}
{"label": 9, "index": 1064, "code": "A, B, C = map(int, input().split())\nprint((A * B + B * C + C * A) * 2)\n"}
{"label": 9, "index": 1065, "code": "nums = list(map(int, input().split()))\nprint((nums[0] * nums[1] + nums[1] * nums[2] + nums[2] * nums[0]) * 2)\n"}
{"label": 9, "index": 1066, "code": "from sys import stdin, stdout\ndef readLine_int_list():return list(map(int, stdin.readline().split()))\ndef readLine_int_list_reverse(): return list(map(int, stdin.readline().split())).reverse()\ndef readAll_int(): return list(map(int, stdin))\ndef readLine_str_list():return list(map(str, stdin.readline().split()))\ndef readAll_str(): return list(map(str, stdin))\ndef readLine_int_set(): return set(list(map(int, stdin.readline().split())))\ndef g_twoD_list(p,q): return [[0 for i in range(p)] for j in range(q)]\n\n\ndef main():\n    a,b,c = readLine_int_list()\n    print(2*(a*b + a*c + b*c))\n    \nif __name__ == \"__main__\":\n    main()\n"}
{"label": 9, "index": 1067, "code": "A,B,C = map(int, input().split())\nprint (2 * (A * B + B * C + A * C))"}
{"label": 9, "index": 1068, "code": "# coding: utf-8\n\ndef main():\n    a, b, c = map(int, input().split())\n    print(a * b * 2 + a * c * 2 + b * c * 2)\n    \nif __name__ == '__main__':\n    main()\n"}
{"label": 9, "index": 1069, "code": "def main():\n    A, B, C = map(int, input().split())\n\n    s = 2 * (A*B + B*C + A*C)\n    print(s)\n\nmain()\n"}
{"label": 9, "index": 1070, "code": "\nA,B,C = map(int,input().split())\n\nprint ( 2*(A*B + B*C + C*A ) )\n"}
{"label": 9, "index": 1071, "code": "A,B,C  = map(int,raw_input().split())\nprint 2*(A*B + A*C + B*C)"}
{"label": 9, "index": 1072, "code": "a, b, c = map(int, raw_input().split())\nans = 0\nfor i in [a*b,b*c,c*a]:\n    ans += i\nprint ans*2"}
{"label": 9, "index": 1073, "code": "a,b,c=map(int,raw_input().split())\nprint a*b*2+b*c*2+a*c*2"}
{"label": 9, "index": 1074, "code": "a,b,c=map(int,input().split())\nprint(2*(a*b+b*c+c*a))\n"}
{"label": 9, "index": 1075, "code": "a, b, c = map(int, input().split())\nprint(2 * a * b + 2 * b * c + 2 * c * a)\n"}
{"label": 9, "index": 1076, "code": "in_str = raw_input()\nin_str = in_str.split(\" \")\n\nfor i in range(len(in_str)):\n\tin_str[i] = int(in_str[i])\n\nm01 = in_str[0] * in_str[1] * 2\nm02 = in_str[1] * in_str[2] * 2\nm03 = in_str[2] * in_str[0] * 2\n\nprint str(int(m01)+int(m02)+int(m03))"}
{"label": 9, "index": 1077, "code": "import sys\n\na , b , c = map(int, sys.stdin.readline().split())\ns = 2*a*b + 2*a*c + 2*b*c\n\nprint(str(s))\n"}
{"label": 9, "index": 1078, "code": "a,b,c=map(int,input().split())\nprint(2*(a*b+b*c+c*a))"}
{"label": 9, "index": 1079, "code": "A, B, C = map(int, input().split())\nprint(2 * (A * B + B * C + C * A))\n"}
{"label": 9, "index": 1080, "code": "a,b,c=map(int,input().split())\nprint(a*b*2 + b*c*2 + a*c*2)"}
{"label": 9, "index": 1081, "code": "#!/usr/bin/env python\n\nnumlist = map(int,raw_input().split())\narea = 0\narea += numlist[0]*numlist[1]*2\narea += numlist[0]*numlist[2]*2\narea += numlist[1]*numlist[2]*2\nprint area"}
{"label": 9, "index": 1082, "code": "A, B, C = map(int, raw_input().strip().split())\nprint 2 * ((A*B) + (B*C) + (A*C))"}
{"label": 9, "index": 1083, "code": "def read():\n  return map(int, input().split())\n\n(A, B, C) = read()\nprint(2*(A*B+B*C+C*A))\n"}
{"label": 9, "index": 1084, "code": "a,b,c=map(int,input().split())\nprint(2*((a*b)+(a*c)+(b*c)))"}
{"label": 9, "index": 1085, "code": "a, b, c = map(int, input().split(' '))\n\nprint((a * b + b * c + c* a) * 2)"}
{"label": 9, "index": 1086, "code": "from collections import defaultdict\n\n\ndef main():\n    A, B, C = map(int, input().split())\n    print(A * B * 2 + A * C * 2 + B * C * 2)\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 9, "index": 1087, "code": "height, width, depth = map(int, input().split())\nsurface = 2*(height*width + width*depth + depth*height)\nprint(surface)"}
{"label": 9, "index": 1088, "code": "\na,b,c = map(int,raw_input().split(' '))\n\nz = (a*b) + (b*c) + (a*c)\nprint z*2"}
{"label": 9, "index": 1089, "code": "a, b, c = map(int, raw_input().split())\nprint a * b * 2 + b * c * 2 + a * c * 2\n"}
{"label": 9, "index": 1090, "code": "a, b, c = map(int, input().split())\n\nans = (a*b)+(a*c)+(b*c)\nprint(ans*2)"}
{"label": 9, "index": 1091, "code": "A, B, C = map(int, input().split())\nprint(2*(A*B+B*C+C*A))"}
{"label": 9, "index": 1092, "code": "a, b, c = map(int,input().split())\nprint(2 * (a*b + b*c + c*a))"}
{"label": 9, "index": 1093, "code": "# _*_ encoding:utf-8 _*_\n\na, b, c = map(int, raw_input().split())\n\nret = 2*(a*b + a*c + b*c)\n\nprint ret"}
{"label": 9, "index": 1094, "code": "\na,b,c = list(map(int, input().split()))\n\nprint((a*b+b*c+c*a)*2)\n\n"}
{"label": 9, "index": 1095, "code": "# -*- coding:utf-8 -*-\nimport sys\n\ndef split_with_func(string, func):\n    return [func(x) for x in string.split()]\n\ndef get_line(func=None):\n    string = sys.stdin.readline().rstrip()\n    if func is not None:\n        return split_with_func(string, func)\n    else:\n        return string\n\nN = get_line(int)\n\nA = N[0] * N[1]  + N[1] * N[2] + N[2] * N[0]\nprint 2 * A\n"}
{"label": 9, "index": 1096, "code": "A,B,C = map(int, raw_input().split())\nprint ((A*B+B*C+C*A)*2)"}
{"label": 9, "index": 1097, "code": "import sys\n\n\nstdin = sys.stdin\n\na,b,c = map(int,stdin.readline().split())\nprint(2*(a*b+b*c+c*a))\n"}
{"label": 9, "index": 1098, "code": "a, b, c = map(int, input().split())\nprint(2*(a*b+b*c+c*a))\n"}
{"label": 9, "index": 1099, "code": "r = map(int,raw_input().split())\n\nprint 2*(r[0]*r[1] + r[1]*r[2] + r[2]*r[0])\n"}
{"label": 9, "index": 1100, "code": "a,b,c = map(int, input().split())\nprint(2*a*b + 2*b*c + 2*c*a)\n"}
{"label": 9, "index": 1101, "code": "A, B, C = map(int, raw_input().split())\nprint (A*B + B*C + C*A) * 2\n"}
{"label": 9, "index": 1102, "code": "# -*- coding: utf-8 -*-\n\nS=input().split()\nA=int(S[0])\nB=int(S[1])\nC=int(S[2])\n\nprint(2*((A*B)+(A+B)*C))\n"}
{"label": 9, "index": 1103, "code": "a, b, c = map(int, input().split())\nprint(2 * (a*b + b*c + c*a))"}
{"label": 9, "index": 1104, "code": "input_length= input()\nlengths = input_length.split(\" \")\nprint(int(lengths[0])*2*(int(lengths[1])+int(lengths[2]))+ int(lengths[1])*int(lengths[2])*2)"}
{"label": 9, "index": 1105, "code": "m, n, o = map(int, input().split())\na = m * n * 2\nb = m * o * 2\nc = n * o * 2\nans = a + b + c\nprint(ans)\n"}
{"label": 9, "index": 1106, "code": "A, B, C = map(int, input().split())\nprint(2*(A*B+B*C+C*A))\n"}
{"label": 9, "index": 1107, "code": "a, b, c = map(int, input(). split())\nprint(2 * (a * b + b * c + a * c))"}
{"label": 9, "index": 1108, "code": "a, b, c = [int(i) for i in raw_input().split()]\nprint (a * b + a * c + b * c) * 2"}
{"label": 9, "index": 1109, "code": "def ri(): return int(input())\ndef rli(): return list(map(int, input().split()))\ndef rls(): return list(input())\ndef pli(a): return \"\".join(list(map(str, a)))\n\na,b,c = rli()\nprint(2*(a*b+b*c+c*a))"}
{"label": 9, "index": 1110, "code": "a,b,c = map(int, raw_input().split())\nprint (a*b + b*c + c*a)*2"}
{"label": 9, "index": 1111, "code": "A, B, C = map(int, input().split())\nprint(2 * A * B + 2 * B * C + 2 * C * A)\n"}
{"label": 9, "index": 1112, "code": "a,b,c = map(int,input().split())\nprint(a*b*2 + b*c*2 + c*a*2)"}
{"label": 9, "index": 1113, "code": "a, b, c = map(int, (input().split()))\n\nprint(2*(a*b + a*c + b*c))\n\n"}
{"label": 9, "index": 1114, "code": "A, B, C = [int(x) for x in input().split()]\nprint(2 * ((A * B) + (B * C) + (C * A)))"}
{"label": 9, "index": 1115, "code": "\na,b,c = map(int,input().split())\n\nprint(2*(a*b+b*c+c*a))"}
{"label": 9, "index": 1116, "code": "# coding:utf-8\nA,B,C = map(int, raw_input().split())\nprint ((A*B)+(B*C)+(C*A))*2"}
{"label": 9, "index": 1117, "code": "A, B, C = map(int, input().split())\nprint(A*B*2 + A*C*2 + B*C*2)"}
{"label": 9, "index": 1118, "code": "def solve():\n    A, B, C = map(int, input().split())\n    print(A * B * 2 + A * C * 2 + B * C * 2)\n\nif __name__ == '__main__':\n    solve()"}
{"label": 9, "index": 1119, "code": "a,b,c = map(int, input().split())\nprint(2*(a*b+b*c+c*a))"}
{"label": 9, "index": 1120, "code": "a, b, c = map(int, raw_input().split())\nprint 2*a*b+2*b*c+2*c*a"}
{"label": 9, "index": 1121, "code": "a,b,c=map(int, raw_input().split())\nprint 2*(a*b+b*c+a*c)"}
{"label": 9, "index": 1122, "code": "# coding: utf-8\n\n\ndef surface_area(a, b, c):\n    return 2 * (a * b + b * c + c * a)\n\n\nif __name__ == '__main__':\n    print(surface_area(*(int(i) for i in input().split(' '))))"}
{"label": 9, "index": 1123, "code": "A, B, C = list(map(int, input().split()))\n\nprint(2*(A*B + B*C + C*A))"}
{"label": 9, "index": 1124, "code": "A,B,C = map(int,input().split())\n\nanswer = A * B * 2\nanswer += B * C * 2\nanswer += C * A * 2\n\nprint(answer)"}
{"label": 9, "index": 1125, "code": "#-*- coding: utf-8 -*-\nA,B,C = [ int(i) for i in input().strip().split(' ')]\nprint(2*(A*B+B*C+C*A))"}
{"label": 9, "index": 1126, "code": "def ini(): return int(input())\ndef inli(): return list(map(int, input().split()))\ndef inf(): return float(input())\ndef inlf(): return list(map(float, input().split()))\ndef inl(): return list(input())\ndef pli(): return \"\".join(list(map(str, ans)))\n\nx = inli()\na = x[0]\nb = x[1]\nc = x[2]\nprint(a*b*2+b*c*2+c*a*2)"}
{"label": 9, "index": 1127, "code": "A, B, C = map(int, raw_input().split())\nprint (A*B + B*C + C*A)*2\n"}
{"label": 9, "index": 1128, "code": "# -*- coding:utf-8 -*-\nfactor = list(map(int, input().split()))\nanswer = 2 * (factor[0] * factor[1] + factor[0] * factor[2] + factor[1] * factor[2])\nprint(answer)"}
{"label": 9, "index": 1129, "code": "a,b,c=map(int,input().split())\nprint(2*(a*b+a*c+b*c))"}
{"label": 9, "index": 1130, "code": "a,b,c=map(int,input().split())\nprint(a*b*2+a*c*2+b*c*2)"}
{"label": 9, "index": 1131, "code": "n = list(map(int, input().split()))\n\na = n[0]\nb = n[1]\nc = n[2]\n\nx = (a * b) * 2\ny = (b * c) * 2\nz = (c * a) * 2\n\nprint(x + y + z)"}
{"label": 9, "index": 1132, "code": "A,B,C = map(int,input().split())\n\nAB = A*B\nAC = A*C\nBC = B*C\n\nprint(AB*2+AC*2+BC*2)"}
{"label": 9, "index": 1133, "code": "A, B, C = map(int, raw_input().split())\nprint (A*B+B*C+C*A)*2"}
{"label": 9, "index": 1134, "code": "a,b,c = map(int, raw_input().split())\nprint (a*b + b*c + c*a) * 2\n"}
{"label": 9, "index": 1135, "code": "# coding: utf-8\n\nA, B, C = map(int, raw_input().split())\nprint 2 * (A*B + B*C + C*A)"}
{"label": 9, "index": 1136, "code": "a = map(int, raw_input().split())\nprint (a[0]*(a[1]+a[2])+a[1]*a[2])*2\n"}
{"label": 9, "index": 1137, "code": "# -*- coding: utf-8 -*-\nimport sys\n\ndef main():\n    l = list(map(int, input().split()))\n    print(2*(l[0]*l[1]+l[1]*l[2]+l[2]*l[0]))\n\nif __name__ == \"__main__\":\n    main()\n"}
{"label": 9, "index": 1138, "code": "a, b, c = map(int, raw_input().split())\nprint (a * b + b * c + c * a) * 2"}
{"label": 9, "index": 1139, "code": "a, b, c = map(int, input().split())\nprint((a * b + b * c + c * a) * 2)"}
{"label": 9, "index": 1140, "code": "#!/usr/bin/env python\n\n\ndef read():\n    return map(int, raw_input().split())\n\n\ndef work((A, B, C)):\n    print 2 * (A * B + B * C + C * A)\n\n\nif __name__ == \"__main__\":\n    work(read())\n"}
{"label": 9, "index": 1141, "code": "A, B, C = map(int, raw_input().split())\nprint 2 * (A*B + B*C + C*A)"}
{"label": 9, "index": 1142, "code": "A,B,C = map(int, raw_input().split())\nprint 2*(A*B+B*C+C*A)\n"}
{"label": 9, "index": 1143, "code": "a,b,c = map(int,input().split())\nprint(2*(a*b+b*c+a*c))"}
{"label": 9, "index": 1144, "code": "line = raw_input().split(\" \")\na = int(line[0])\nb = int(line[1])\nc = int(line[2])\n \nsum = a*b*2 + b*c*2+a*c*2\n \nprint sum"}
{"label": 9, "index": 1145, "code": "a, b, c = input().split()\na = int(a)\nb = int(b)\nc = int(c)\nprint(a * b * 2 + a * c * 2 + b * c * 2)"}
{"label": 9, "index": 1146, "code": "\na,b,c = [int(i) for i in input().split(\" \")]\nprint(2*(a*b+c*b+a*c))"}
{"label": 9, "index": 1147, "code": "A, B, C = map(int, input().split())\nprint(2*(A*B+B*C+C*A))"}
{"label": 9, "index": 1148, "code": "A, B, C = [int(INP) for INP in input().split()]\nS = 2 * (A * B + B * C + C * A)\nprint(S)\n"}
{"label": 9, "index": 1149, "code": "a, b, c = map(int, input().split())\nprint ((a*b + b*c + c*a)*2)"}
{"label": 9, "index": 1150, "code": "#coding: utf-8\n#ABC039A\n\na,b,c=map(int,raw_input().split())\n\nres=2*(a*b+b*c+c*a)\nprint res\n"}
{"label": 9, "index": 1151, "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nA,B,C = map(int,input().split())\nprint(B*C*2 + A*B*2  + A*C*2)\n"}
{"label": 9, "index": 1152, "code": "import sys\n\ndata=[ int(n) for n in sys.stdin.readline().strip().split(\" \") ]\n\nprint( ((data[0]*data[1])*2)+((data[0]*data[2])*2)+((data[1]*data[2])*2)) #h w l"}
{"label": 9, "index": 1153, "code": "X,Y,Z=map(int,raw_input().strip().split(\" \"))\nprint (X*Y+Y*Z+Z*X)*2\n"}
{"label": 9, "index": 1154, "code": "from Queue import * # Queue, LifoQueue, PriorityQueue\nfrom bisect import * #bisect, insort\nfrom collections import * #deque, Counter,OrderedDict,defaultdict\n#set([]) \nimport math\nimport copy\nimport itertools\nimport string\nimport sys\nmyread = lambda : map(int,raw_input().split())\ndef solver():\n    A,B,C = myread()\n    print 2 * (A * B + B * C + C * A)\n\n\n\nif __name__ == \"__main__\":\n    solver()\n    \n"}
{"label": 9, "index": 1155, "code": "A,B,C = map(int,input().split())\nprint((A*B)*2+(A*C)*2+(B*C)*2)\n"}
{"label": 9, "index": 1156, "code": "# -*- coding: utf-8 -*-\n# \u6574\u6570\u306e\u5165\u529b\na,b,c=map(int, input().split())\n# \u51fa\u529b\nprint(2*a*b+2*a*c+2*b*c)"}
{"label": 9, "index": 1157, "code": "A,B,C = map(int, raw_input().split())\nprint 2*(A*B + B*C + C*A)"}
{"label": 9, "index": 1158, "code": "A,B,C = map(int, input().split())\nprint (2 * (A * B + B * C + A * C))\n"}
{"label": 9, "index": 1159, "code": "A, B, C = map(int, input().split())\nprint(2*(A*B + B*C + C*A))"}
{"label": 9, "index": 1160, "code": "a, b, c = map(int, raw_input().split())\nprint 2*(a*b+b*c+c*a)\n"}
{"label": 9, "index": 1161, "code": "a, b, c = map(int, input().split())\nprint(2 * (a*b + a*c + b*c))"}
{"label": 9, "index": 1162, "code": "A, B, C = map(int, raw_input().split())\nprint (A*B + B*C + C*A) * 2"}
{"label": 9, "index": 1163, "code": "inpt = raw_input().split()\na = int(inpt[0])\nb = int(inpt[1])\nc = int(inpt[2])\n\nans = 2 * (a * b + b * c + c * a)\n\nprint ans\n"}
{"label": 9, "index": 1164, "code": "a,b,c = map(int,input().split())\nprint(2*(a*b + b*c + c*a))\n"}
{"label": 9, "index": 1165, "code": "import math\ndef read():\n    return int(input())\n\ndef reads(sep=None):\n    return list(map(int, input().split(sep)))\n\ndef main():\n    a, b, c = reads()\n    print(a*b*2 + a*c*2 + b*c*2)\n\nmain()\n"}
{"label": 9, "index": 1166, "code": "A, B, C = map(int,input().split())\n\nprint(2 * (A * B + B * C + C * A))"}
{"label": 9, "index": 1167, "code": "input = list(map(int,input().split()))\nprint((input[0]*input[1] + input[1]*input[2] + input[2]*input[0]) * 2)"}
{"label": 9, "index": 1168, "code": "A, B, C = map(int, input().split())\nprint(2 * (A*B + B*C + C*A) )\n"}
{"label": 9, "index": 1169, "code": "# coding: utf-8\n\na, b, c = map(int, input().split())\nprint(a*b*2+a*c*2+b*c*2)"}
{"label": 10, "index": 1170, "code": "print int(((int(raw_input()))**0.5)**0.5)"}
{"label": 10, "index": 1171, "code": "import math\nX = int(input())\nN = math.sqrt(math.sqrt(X))\nprint(int(N))"}
{"label": 10, "index": 1172, "code": "# -*- coding: utf-8 -*-\nimport sys\n\ndef main():\n    x = int(input())\n    print(int(x**(1/4)))\n\nif __name__ == \"__main__\":\n    main()\n"}
{"label": 10, "index": 1173, "code": "N = int(input())\ni = 1;\nwhile(True):\n    if i ** 4 == N:\n        print(i)\n        exit(0)\n    i += 1\n"}
{"label": 10, "index": 1174, "code": "import math\nX = int(input())\nprint(int(math.sqrt(math.sqrt(X))))\n"}
{"label": 10, "index": 1175, "code": "from math import sqrt\nx = int(input())\nn = int(sqrt(sqrt(x)))\nprint(n)"}
{"label": 10, "index": 1176, "code": "from math import sqrt\nprint int(sqrt(sqrt(input())))\n"}
{"label": 10, "index": 1177, "code": "x = int(input())\nprint(int(x**(1/4)))"}
{"label": 10, "index": 1178, "code": "from math import log, exp\nX = int(input())\nlogX = log(X)\nNcand = int(exp(logX / 4))\nN = None\nfor i in range(3):\n    N = Ncand + i\n    if N ** 4 == X:\n        break\nprint(N)\n"}
{"label": 10, "index": 1179, "code": "x = input()\nn = 1\nwhile True:\n    if pow(n, 4) == x:\n        print n\n        break\n    n+=1\n"}
{"label": 10, "index": 1180, "code": "import math\nx=int(input())\nprint(int(math.sqrt(math.sqrt(x))))\n"}
{"label": 10, "index": 1181, "code": "print int(input()**0.25)"}
{"label": 10, "index": 1182, "code": "# coding: utf-8\n\nprint int(input() ** (1/4.0))"}
{"label": 10, "index": 1183, "code": "from collections import defaultdict\n\n\ndef main():\n    X = int(input())\n    for i in range(0, X + 1):\n        if i ** 4 == X:\n            print(i)\n            return\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 10, "index": 1184, "code": "from math import sqrt\n\n\ndef main():\n    x = int(input())\n    print(int(sqrt(sqrt(x))))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 10, "index": 1185, "code": "X = int(input())\nprint(int(X ** (1 / 4)))\n"}
{"label": 10, "index": 1186, "code": "# -*- coding: utf-8 -*-\n# problem B\n\nX = int(input())\n\nans = X ** (1/4)\nprint(int(ans))"}
{"label": 10, "index": 1187, "code": "print int((input()+0.001)**0.25)\n"}
{"label": 10, "index": 1188, "code": "x=int(input())\nprint(int((x**0.5)**0.5))"}
{"label": 10, "index": 1189, "code": "import numpy as np\n\nN = int(input())\n \nN_ = np.sqrt(N)\n \nprint( int( np.sqrt(N_) ) )\n"}
{"label": 10, "index": 1190, "code": "from math import sqrt\nprint(str(sqrt(sqrt(int(input()))))[:-2])"}
{"label": 10, "index": 1191, "code": "print(int(int(input())**(1/4)))"}
{"label": 10, "index": 1192, "code": "import math\nprint int(math.pow(input(), 0.25))"}
{"label": 10, "index": 1193, "code": "import sys\n\ndef solve():\n    x = int(input())\n    ans = nibutan(x)\n\n    assert ans is not None\n\n    print(ans)\n\ndef nibutan(x):\n    top = x\n    btm = 0\n\n    while top - btm > 1:\n        mid = (top + btm)//2\n\n        if mid**4 == x:\n            return mid\n        elif mid**4 < x:\n            btm = mid\n        else:\n            top = mid\n\n    return top\n\ndef debug(x, table):\n    for name, val in table.items():\n        if x is val:\n            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)\n            return None\n\nif __name__ == '__main__':\n    solve()"}
{"label": 10, "index": 1194, "code": "# coding: utf-8;\n\nfrom math import sqrt\n\ndef main():\n    print(int(sqrt(sqrt(int(input())))))\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 10, "index": 1195, "code": "import math\n\nx = int(input())\n\nprint(int(math.sqrt(math.sqrt(x))))"}
{"label": 10, "index": 1196, "code": "X = int(input())\n\nfor i in range(200):\n    if i**4 == X:\n        print(i)"}
{"label": 10, "index": 1197, "code": "X = (int)(raw_input())\nn = 0\nwhile (n**4 < X):\n    n = n+1\nprint(n)"}
{"label": 10, "index": 1198, "code": "N = int(input())\nx = int(N ** 0.25) - 1\nwhile x ** 4 < N:\n    x += 1\nprint(x)\n"}
{"label": 10, "index": 1199, "code": "import math\n\ni = int(input())\nprint(int(math.pow(i, 0.25)))\n"}
{"label": 10, "index": 1200, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nimport math\nX = input().split()\nY = int(X[0])\nprint(int(math.sqrt(math.sqrt(Y))))"}
{"label": 10, "index": 1201, "code": "from math import sqrt\nprint int(sqrt(sqrt(input())))"}
{"label": 10, "index": 1202, "code": "import sys\n\ndef solve():\n    x = int(input())\n    ans = 0\n\n    for i in range(1, x + 1):\n        if i**4 == x:\n            ans = i\n            break\n\n    print(ans)\n\n\ndef debug(x, table):\n    for name, val in table.items():\n        if x is val:\n            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)\n            return None\n\nif __name__ == '__main__':\n    solve()"}
{"label": 10, "index": 1203, "code": "def main():\n    X = int(input())\n\n    n = int(X ** (1 / 4))\n    print(n)\n\nmain()\n"}
{"label": 10, "index": 1204, "code": "#-*- coding: utf-8 -*-\nimport math\nX=int(input().strip())\nN = int(math.sqrt(math.sqrt(X)))\nprint(N)"}
{"label": 10, "index": 1205, "code": "import math\nX=int(input().strip())\nprint(int(math.sqrt(math.sqrt(X))))\n"}
{"label": 10, "index": 1206, "code": "import math\nn = input()\nans = int(math.sqrt(math.sqrt(n)) + 1e-9)\n\nprint ans\n\n"}
{"label": 10, "index": 1207, "code": "X = int(input())\nN = 1\nwhile N ** 4 != X:\n    N += 1\nprint(N)"}
{"label": 10, "index": 1208, "code": "# coding: utf-8\n\n\ndef quadrt(x):\n    return int(x ** (1 / 4))\n\nif __name__ == '__main__':\n    n = int(input())\n    print(quadrt(n))"}
{"label": 10, "index": 1209, "code": "from math import pow\nx=input()\nprint int(pow(x,0.25))"}
{"label": 10, "index": 1210, "code": "X = int(input())\nprint(next(filter(lambda n: n**4 == X, range(1, X+1))))\n"}
{"label": 10, "index": 1211, "code": "import math as ma\nx = int(raw_input())\nprint int(ma.sqrt( ma.sqrt(x) ))"}
{"label": 10, "index": 1212, "code": "from math import sqrt\nx=int(input())\nprint(int(sqrt(sqrt(x))))\n"}
{"label": 10, "index": 1213, "code": "import math\n\nX = float(input())\nprint(int(math.sqrt(math.sqrt(X))))\n"}
{"label": 10, "index": 1214, "code": "# coding:utf-8\nimport math\nX = int(input())\nN = math.sqrt(math.sqrt(X))\nif 1<=X<=10**9 and N == int(math.sqrt(math.sqrt(X))):\n\tprint int(math.sqrt(math.sqrt(X)))"}
{"label": 10, "index": 1215, "code": "import sys\nimport math\n\ndata=int(sys.stdin.readline().strip())\n\nprint(int(math.sqrt(math.sqrt(data))))"}
{"label": 10, "index": 1216, "code": "import math\n\na = int(input())\n\nprint(int(math.sqrt(math.sqrt(a))))\n\n"}
{"label": 10, "index": 1217, "code": "#!/usr/bin/env python\nimport math\n\nnum = int(raw_input())\nrealnum = math.sqrt(math.sqrt(num))\nprint int(realnum)"}
{"label": 10, "index": 1218, "code": "X = input()\nN = 0\nB = 0x100000000\nwhile B>0:\n\tif (N+B)**4<=X:\n\t\tN += B\n\tB /= 2\nprint N\n"}
{"label": 10, "index": 1219, "code": "import math\nX = int(input())\nprint(int(math.sqrt(math.sqrt(X))))\n"}
{"label": 10, "index": 1220, "code": "\nimport math\n\nx = int(input())\n\nn2 = round( math.sqrt(x) )\n\nn = round(math.sqrt(n2))\n\nprint(n)"}
{"label": 10, "index": 1221, "code": "from math import sqrt\n\nX = int(raw_input())\nprint int(sqrt(sqrt(X)))\n"}
{"label": 10, "index": 1222, "code": "#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n\nfrom math import sqrt\n\nx = int(input())\nprint(int(sqrt(sqrt(x))))\n"}
{"label": 10, "index": 1223, "code": "def read():\n  return map(int, input().split())\n\n(X,) = read()\n\nfor i in range(X+1):\n  if i**4 == X:\n    print(i); break\n"}
{"label": 10, "index": 1224, "code": "X = int(input())\nx = 1\nwhile (True):\n    if (x ** 4 == X):\n        print (x)\n        exit()\n    x += 1\n"}
{"label": 10, "index": 1225, "code": "import sys\n\n\nstdin = sys.stdin\n\nn = int(stdin.readline())\nx = round(n**0.25)\nprint(x)\n"}
{"label": 10, "index": 1226, "code": "X = int(raw_input())\nprint int(X ** 0.25)\n"}
{"label": 10, "index": 1227, "code": "print int(input() ** 0.25)"}
{"label": 10, "index": 1228, "code": "EPS = 5\nX = int(input())\nY = int(X ** 0.25)\nprint(list(filter(lambda x: x**4 == X, range(max(0, Y-EPS), Y+EPS)))[0])\n"}
{"label": 10, "index": 1229, "code": "import re\nimport math\n\nclass IO_for_Contest(object):\n    @staticmethod\n    def my_input():\n        #return raw_input()\n        return input()\n\n    @staticmethod\n    def read_from_input():\n        #TODO: impl this for each problem\n        pass\n\n    @staticmethod\n    def read_line():\n        return IO_for_Contest.my_input().strip()\n\n    @staticmethod\n    def read_int():\n        return int(IO_for_Contest.my_input().strip())\n\n    @staticmethod\n    def read_n_int(n):\n        return list(map( \\\n                int, \\\n                re.split('\\s+', IO_for_Contest.my_input().strip())))[ : n]\n\ndef solve():\n    x = IO_for_Contest.read_int()\n    ceil_x = 10 ** 9\n    ceil_n = int(math.sqrt(math.sqrt(ceil_x))) + 1\n    for n in range(ceil_n + 1):\n        if n ** 4 == x:\n            print(n)\n            return\n\nif __name__ == '__main__':\n    solve()"}
{"label": 10, "index": 1230, "code": "X = int(input())\nprint(int(X ** (1 / 4)))\n"}
{"label": 10, "index": 1231, "code": "import math\nX = input()\nprint int(math.sqrt(math.sqrt(X)))"}
{"label": 10, "index": 1232, "code": "import math\n\nx = int(input())\nan = math.sqrt(x)\nans = math.sqrt(an)\nprint(math.ceil(ans))\n"}
{"label": 10, "index": 1233, "code": "import math\nf=math.sqrt\nprint(int(f(f(int(input())))))"}
{"label": 10, "index": 1234, "code": "import math\n\nX=int(input())\n\nfor i in range(2):\n    X=math.sqrt(X)\n\nprint(math.floor(X))"}
{"label": 10, "index": 1235, "code": "import math\n\nN = int(raw_input())\n\na = math.sqrt(N)\nb = math.sqrt(a)\n\nprint int(b)\n"}
{"label": 10, "index": 1236, "code": "print(int((int(input()) ** 0.5) ** 0.5))"}
{"label": 10, "index": 1237, "code": "num = int(input())\nprint(int(num**(1/4)))"}
{"label": 10, "index": 1238, "code": "import math\nX = int(input())\n\nanswer = int(math.sqrt(X))\nanswer = int(math.sqrt(answer))\n\nprint(answer)"}
{"label": 10, "index": 1239, "code": "n = int(input())\n\n\ni = 1 \nwhile True:\n    if i ** 4 == n:\n        break\n    i += 1\n\n\nprint(i)"}
{"label": 10, "index": 1240, "code": "import math\nprint(int(math.pow(int(input()),(1.0/4.0))))"}
{"label": 10, "index": 1241, "code": "X = int(input())\nprint(*[N for N in range(1, 201) if N ** 4 == X])"}
{"label": 10, "index": 1242, "code": "#!/usr/bin/env python\n\n\ndef read():\n    return input()\n\n\ndef work(X):\n    val = 0\n    while val ** 4 < X:\n        val += 1\n    print val\n\n\nif __name__ == \"__main__\":\n    work(read())\n"}
{"label": 10, "index": 1243, "code": "import math\nx = raw_input()\nx = int(x)\nans = math.sqrt(math.sqrt(x))\nprint int(ans)\n"}
{"label": 10, "index": 1244, "code": "print(int(int(input())**(1/4.0)))"}
{"label": 10, "index": 1245, "code": "x = int(input())\nprint(int(x ** 0.25))"}
{"label": 10, "index": 1246, "code": "if __name__==\"__main__\":\n\tX = int(raw_input())\n\tprint int(X**(1./4.))"}
{"label": 10, "index": 1247, "code": "N = input()\nprint int(N**(0.25))"}
{"label": 10, "index": 1248, "code": "def power4(n):\n\treturn n * n * n * n\n \nlst = []\n \ni = 1\nwhile (power4(i) < 1000000000):\n\tlst.append(power4(i))\n\ti += 1\n \nn = len(lst)\n \nx = input()\nf = True\ni = 0\n \nwhile i < n and f:\n\tif lst[i] == x:\n\t\tprint(i+1)\n\t\tf = False\n\telse:\n\t\ti += 1"}
{"label": 10, "index": 1249, "code": "X=int(input())\nprint(int(X**0.25))"}
{"label": 10, "index": 1250, "code": "import math\nprint(int(math.sqrt(math.sqrt(int(input())))))\n"}
{"label": 10, "index": 1251, "code": "x = int(input())\n\nprint(int(x ** (1/4)))"}
{"label": 10, "index": 1252, "code": "#! /usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport math\n\nX = int(input())\nprint(int(math.sqrt( int(math.sqrt(X)) )))\n"}
{"label": 10, "index": 1253, "code": "import math\n\nprint(int(math.sqrt(math.sqrt(input()))))"}
{"label": 10, "index": 1254, "code": "import sys\nimport math\n\na = int(sys.stdin.readline())\nx = math.sqrt(a)\nx = math.sqrt(x)\n\nprint(int(x))\n"}
{"label": 10, "index": 1255, "code": "N = int(raw_input())\nfor i in xrange(1, 10000):\n    if i**4 == N:\n        print i\n        break"}
{"label": 10, "index": 1256, "code": "X = int(input())\nprint(int(X**(1/4)))"}
{"label": 10, "index": 1257, "code": "x = int(input())\nprint(int(x**(1/4)))\n"}
{"label": 10, "index": 1258, "code": "X = int(raw_input())\n\nmin = 0\nmax = 10**9\nmid = (min+max) // 2\nXn = mid**4\n\nwhile Xn != X:\n    if Xn > X:\n        max = mid\n    else:\n        min = mid\n    mid = (min+max) // 2\n    Xn = mid**4\n\nprint mid"}
{"label": 10, "index": 1259, "code": "print(int(int(input()) ** (1/4)))"}
{"label": 10, "index": 1260, "code": "print(int(int(input())**0.25))"}
{"label": 10, "index": 1261, "code": "a = int(input())\n\nimport math\n\nprint(int(math.sqrt(math.sqrt(a))))"}
{"label": 10, "index": 1262, "code": "print(int(int(input())**.25))"}
{"label": 10, "index": 1263, "code": "import math\nN = int(raw_input())\nprint int(math.sqrt(math.sqrt(N)))"}
{"label": 10, "index": 1264, "code": "x = int(raw_input())\nfor n in xrange(x+2):\n  if n ** 4 == x:\n    print n\n    break"}
{"label": 10, "index": 1265, "code": "N = input()\nprint int(N**(0.25))\n"}
{"label": 10, "index": 1266, "code": "from math import sqrt\nprint(int(sqrt(sqrt(float(input())))))"}
{"label": 10, "index": 1267, "code": "print(int(int(input())**0.25))"}
{"label": 10, "index": 1268, "code": "a = int(input())\nprint(int( a ** 0.25 + 0.1 ))"}
{"label": 10, "index": 1269, "code": "import math\nx = int(input())\nprint(int(math.sqrt(math.sqrt(x))))\n"}
{"label": 10, "index": 1270, "code": "print(int(int(input())**(1/4)))"}
{"label": 10, "index": 1271, "code": "import math\n\nX = int(input())\nprint(int(math.sqrt(math.sqrt(X))))"}
{"label": 10, "index": 1272, "code": "import math\nX = int(raw_input())\nprint int(math.pow(X, (1.0/4.0)))"}
{"label": 10, "index": 1273, "code": "import math\nN = input()\nprint int(math.sqrt(math.sqrt(N)))\n"}
{"label": 10, "index": 1274, "code": "# coding: utf-8\n# Here your code !\nimport math\na= int(input())\nprint(int(math.sqrt(math.sqrt(a))))\n"}
{"label": 10, "index": 1275, "code": "import math\n\nx = int(input())\nprint(int(math.pow(x, 1/4)))"}
{"label": 10, "index": 1276, "code": "print(int(pow(int(input()),1/4)))"}
{"label": 10, "index": 1277, "code": "x = int(input())\nprint(int(x ** 0.25))"}
{"label": 10, "index": 1278, "code": "#coding: utf-8\n#ABC039B\n\nx=int(raw_input())\n\nres=int(pow(x,1.0/4))\nprint res\n"}
{"label": 10, "index": 1279, "code": "from numpy import sqrt\n\nX = int(input())\nprint(int(sqrt(sqrt(X))))\n"}
{"label": 10, "index": 1280, "code": "import numpy as np\na=int(raw_input())\nprint int(np.sqrt(np.sqrt(a)))"}
{"label": 10, "index": 1281, "code": "# -*- coding: utf-8 -*-\nimport math\nx = int(input())\nn = int(math.sqrt(math.sqrt(x)))\nprint(n)"}
{"label": 10, "index": 1282, "code": "import math\nx = float(input())\nprint ( int( math.sqrt(math.sqrt(x)) ) )\n"}
{"label": 10, "index": 1283, "code": "N = int(input())\nc = 0\nwhile 1:\n    c += 1\n    if c**4 == N:\n        print(c)\n        break"}
{"label": 10, "index": 1284, "code": "x = int(raw_input())\ni = 1\nwhile True:\n    if i**4 == x:\n        print i\n        break\n    i += 1\n    if i*i > x:\n        break\n"}
{"label": 10, "index": 1285, "code": "from math import sqrt\nprint(int(sqrt(sqrt(int(input())))))\n"}
{"label": 10, "index": 1286, "code": "x=input()\nfor i in xrange(10**5):\n    if i**4==x:\n        print(i)\n        quit()"}
{"label": 10, "index": 1287, "code": "from Queue import * # Queue, LifoQueue, PriorityQueue\nfrom bisect import * #bisect, insort\nfrom collections import * #deque, Counter,OrderedDict,defaultdict\n#set([]) \nimport math\nimport copy\nimport itertools\nimport string\nimport sys\nmyread = lambda : map(int,raw_input().split())\ndef solver():\n    X = int(raw_input())\n    for n in xrange(1,10**3):\n        if X == n ** 4:\n            print n\n            break\n\n\n\nif __name__ == \"__main__\":\n    solver()\n    \n"}
{"label": 10, "index": 1288, "code": "import math\nn=int(input())\nprint(int(math.sqrt(math.sqrt(n))))"}
{"label": 10, "index": 1289, "code": "# -*- coding: utf-8 -*-\n\nS=input()\nX=float(S)\nprint(int(pow(X,1/4)))"}
{"label": 10, "index": 1290, "code": "x = int(input())\n\ni = 1\n\nwhile i ** 4 != x:\n    i += 1\n\nprint(i)\n"}
{"label": 10, "index": 1291, "code": "n=int(input())\nprint(int(n**0.25))"}
{"label": 10, "index": 1292, "code": "import math\n\nx = input()\n\nprint int (math.sqrt (math.sqrt (x)))"}
{"label": 10, "index": 1293, "code": "n= input()\nprint int(n**(float(1)/4))"}
{"label": 10, "index": 1294, "code": "x = int(raw_input())\nfor n in range(1,178):\n    if x == n**4:\n        break\nprint str(n)\n"}
{"label": 10, "index": 1295, "code": "x = int(raw_input())\nfor i in range(1, 1000):\n\tif i*i*i*i == x:\n\t\tprint i"}
{"label": 10, "index": 1296, "code": "# -*- coding:utf-8 -*-\nimport sys\n\ndef split_with_func(string, func):\n    return [func(x) for x in string.split()]\n\ndef get_line(func=None):\n    string = sys.stdin.readline().rstrip()\n    if func is not None:\n        return split_with_func(string, func)\n    else:\n        return string\n\nX = get_line(int)[0]\nprint int(round(pow(X, 0.25)))\n"}
{"label": 10, "index": 1297, "code": "X = int(input())\nfor i in range(10**4):\n  if i**4 == X:\n    print(i)\n    break\n"}
{"label": 10, "index": 1298, "code": "# -*- coding:UTF-8 -*-\n\n\nX = int(raw_input())\n\nprint int(pow(X, 0.25))\n"}
{"label": 10, "index": 1299, "code": "# coding: utf-8\n\nx = int(input())\nprint(int(x**(1/4)))"}
{"label": 11, "index": 1300, "code": "n, x = map(int, raw_input().split())\nif n == 0:\n    print 0\nelse:\n    print min(x, n-x+1) - 1"}
{"label": 11, "index": 1301, "code": "n, x = input().split()\nn = int(n)\nx = int(x)\n\nif n/2 >= x:\n    print(x - 1)\nelse:\n    print(n - x)"}
{"label": 11, "index": 1302, "code": "n, x = map(int, input().split())\n\nif x - 1 < n - x:\n    print(x - 1)\nelse:\n    print(n - x)\n"}
{"label": 11, "index": 1303, "code": "n, x = [int(i) for i in input().split()]\n\nif x <= int(n/2):\n    print(x-1)\nelse:\n    print(n-x)"}
{"label": 11, "index": 1304, "code": "n,x=map(int,input().split())\nprint(min(n-x,x-1))"}
{"label": 11, "index": 1305, "code": "n, x = map(int, input().split())\nprint(min(n-x, x-1))"}
{"label": 11, "index": 1306, "code": "N = list(map(int, input().split()))\nprint(min(N[0] - N[1], N[1] - 1))\n"}
{"label": 11, "index": 1307, "code": "a = raw_input().split()\nif int(a[0])/2 >= int(a[1]):\n print int(a[1])-1\nelse:\n print int(a[0])-int(a[1])\n"}
{"label": 11, "index": 1308, "code": "import re\nimport doctest\n\nclass IO_for_Contest(object):\n    @staticmethod\n    def my_input():\n        #return raw_input()\n        return input()\n\n    @staticmethod\n    def read_from_input():\n        #TODO: impl this for each problem\n        pass\n\n    @staticmethod\n    def read_line():\n        return IO_for_Contest.my_input().strip()\n\n    @staticmethod\n    def read_int():\n        return int(IO_for_Contest.my_input().strip())\n\n    @staticmethod\n    def read_n_int(n):\n        return list(map( \\\n                int, \\\n                re.split('\\s+', IO_for_Contest.my_input().strip())))[ : n]\n\ndef solve():\n    n, x = IO_for_Contest.read_n_int(2)\n    print(think(n, x))\n\ndef think(n, x):\n    '''\n    >>> think(1, 1)\n    0\n    >>> think(2, 1)\n    0\n    >>> think(2, 2)\n    0\n    >>> think(3, 2)\n    1\n    >>> think(4, 2)\n    1\n    >>> think(4, 3)\n    1\n    >>> think(5, 2)\n    1\n    >>> think(5, 3)\n    2\n    >>> think(90, 30)\n    29\n    '''\n    if x == 1 or x == n:\n        return 0\n    return min([x - 1, n - x])\n\nif __name__ == '__main__':\n    doctest.testmod()\n    solve()\n"}
{"label": 11, "index": 1309, "code": "n, x = map(int, input().split())\nprint(min(x - 1, n - x))"}
{"label": 11, "index": 1310, "code": "def ri(): return int(input())\ndef rli(): return list(map(int, input().split()))\ndef rls(): return list(input())\ndef pli(a): return \"\".join(list(map(str, a)))\n\nn, x = rli()\nprint(min(x-1, n-x))"}
{"label": 11, "index": 1311, "code": "a,b = map(int,raw_input().split())\n\nprint min(b-1,a-b)"}
{"label": 11, "index": 1312, "code": "n, x = map(int, input().split())\nprint(min(n-x, x-1))"}
{"label": 11, "index": 1313, "code": "n, x = map(int, input().split(\" \"))\nif (x > n/2):\n    x = n-x+1\nprint (x-1)\n"}
{"label": 11, "index": 1314, "code": "n,x=map(int,input().split())\nprint(min(x-1,n-x))"}
{"label": 11, "index": 1315, "code": "n, x = map(int, raw_input().split())\n\nans = min(abs(x-1), abs(x-n))\nprint ans\n"}
{"label": 11, "index": 1316, "code": "n,x=[int(i) for i in input().split()]\nprint(min(x-1,n-x))"}
{"label": 11, "index": 1317, "code": "# -*- coding: utf-8 -*-\n\n\ndef main(n, x):\n    l = x - 1\n    r = n - x\n    return l if l < r else r\n\n\nif __name__ == '__main__':\n    n, x = [int(e) for e in input().split()]\n    print(main(n, x))\n"}
{"label": 11, "index": 1318, "code": "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sat Jun 18 21:18:01 2016\n\n@author: dotha\n\"\"\"\n\nn,x=map(int,input().split((\" \")))\n \nprint(min(n-x,x-1))"}
{"label": 11, "index": 1319, "code": "n,x = map(float,raw_input().split())\n\nif n == 1:\n    print '0'\n    exit()\n\nif x <= n/2:\n    print int(x-1)\nelse:\n    print int(n-x)\n"}
{"label": 11, "index": 1320, "code": "# coding: utf-8;\n\ndef main():\n    n, x = map(int, input().split())\n    print(min(n - x, x - 1))\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 11, "index": 1321, "code": "def solve():\n    n, x = map(int, input().split())\n    if x - 1 > n - x:\n        ans = n - x\n    else:\n        ans = x - 1\n    print(ans)\n\nif __name__ == '__main__':\n    solve()"}
{"label": 11, "index": 1322, "code": "n, x = map(int, input().split())\n\nif x <= n//2:\n    print(x-1)\nelse:\n    print(n-x)"}
{"label": 11, "index": 1323, "code": "a,b=map(int, input().split())\nprint(min(b-1, a-b))"}
{"label": 11, "index": 1324, "code": "n, x= map(int, raw_input().split())\n\nif n - x < n/2 :\n\tprint n-x\nelse :\n\tprint x-1"}
{"label": 11, "index": 1325, "code": "n, x = map(int,input().split( ))\nprint(min(n-x, x-1))"}
{"label": 11, "index": 1326, "code": "n,x = map(int, raw_input().split())\nif x > n/2:\n    print n-x\nelse:\n    print x - 1"}
{"label": 11, "index": 1327, "code": "n, x = map(int, input().split())\nprint(min(n - x, x - 1))"}
{"label": 11, "index": 1328, "code": "a,b = map(int,raw_input().split())\nx = a/2\nif a == b or b == 1:\n\tprint 0\nelif x >= b:\n\tprint b - 1\nelif x <= b:\n\tprint a - b\nelse:\n\tprint a - b - 1\n"}
{"label": 11, "index": 1329, "code": "input_line1 = map(int,raw_input().split(\" \"))\n#input_line2 = map(int,raw_input().split(\" \"))\nn = input_line1[0]\nx = input_line1[1]\n\nif n - x >= x:\n\tprint x - 1\nelse:\n\tprint n - x\n"}
{"label": 11, "index": 1330, "code": "# coding: utf-8\n# Here your code !\na,b = map(int, input().split())\nprint(min(b-1,a-b))\n"}
{"label": 11, "index": 1331, "code": "N,X=map(int,raw_input().strip().split(\" \"))\nprint min(X-1,N-X)"}
{"label": 11, "index": 1332, "code": "import sys\n\nn , x = map(int, sys.stdin.readline().split())\na = n-x\n\nif(x<=a):\n\tprint(x-1)\nelse:\n\tprint(a)\n"}
{"label": 11, "index": 1333, "code": "# coding:utf-8\n\nn, m = map(int, input().split())\nprint(min(m-1,n-m))"}
{"label": 11, "index": 1334, "code": "n,x = map(int, input().split())\n\nif n // 2 >= x:\n    print(x-1)\nelse:\n    print(n-x)"}
{"label": 11, "index": 1335, "code": "nx = list(map(int,input().split()))\nprint(min(nx[1]-1,nx[0]-nx[1]))\n"}
{"label": 11, "index": 1336, "code": "n,x=map(int,input().split())\nprint(min(x-1,n-x))"}
{"label": 11, "index": 1337, "code": "n, x = map(int, raw_input().split())\nprint max(0, min(x - 1, n - x))"}
{"label": 11, "index": 1338, "code": "n,x=(int(i) for i in input().split())\nif n%2==0:\n    if n/2>=x:\n        print(x-1)\n    else:\n        print(n-x)\nelse:\n    if (n+1)/2>x-1:\n        print(x-1)\n    else:\n        print(n-x)"}
{"label": 11, "index": 1339, "code": "n,x = map(int, input().split())\n\nprint(min(x-1, n-x))"}
{"label": 11, "index": 1340, "code": "n, x = map(int, input().split())\nif n//2 >= x:\n    print(x-1)\nelse :\n    print(n-x)"}
{"label": 11, "index": 1341, "code": "n, x = map(int, input().split())\n\nc = n - x\n\nif(x <= c):\n    print(x - 1)\nelse:\n    print(c)\n"}
{"label": 11, "index": 1342, "code": "def main():\n    n, x = map(int, input().split())\n\n    ans = min(x - 1, n - x)\n    print(ans)\n\nmain()\n"}
{"label": 11, "index": 1343, "code": "n, x = map(int, input().split())\nprint(min(x - 1, n - x))"}
{"label": 11, "index": 1344, "code": "#coding: utf-8\n#ABC040A\n\nn,x=map(int,raw_input().split())\n\nprint min(x-1,n-x)\n"}
{"label": 11, "index": 1345, "code": "n, x = map(int, raw_input().split())\nprint min(x-1, n-x)\n"}
{"label": 11, "index": 1346, "code": "N, X  = map(int, raw_input().split())\n#n = 100\n#x = 99\n\ns = N / 2 ;\n\nif (X > s):\n\tprint N - X\nelse:\n\tprint X - 1"}
{"label": 11, "index": 1347, "code": "n, x = map(int, raw_input().split())\n\nif 2*x > n:\n    print n-x\nelse:\n    print x-1\n"}
{"label": 11, "index": 1348, "code": "n, i = map(int, raw_input().strip().split())\nmid_point = (n / 2) + 1\nif i >= mid_point:\n    print(n - i)\nelse:\n    print(i - 1)"}
{"label": 11, "index": 1349, "code": "n, m = map(int, input().split())\nif n/2 >= m:\n    print(m-1)\nelse:\n    print(n-m)\n"}
{"label": 11, "index": 1350, "code": "n,x = map(int,input().split())\nanswer = min(n - x, x - 1)\nprint(answer)"}
{"label": 11, "index": 1351, "code": "n, x = map(int, raw_input().split())\n\nans = x - 1 if x <= (n + 1)/2 else n - x\n\nprint ans"}
{"label": 11, "index": 1352, "code": "n, x = map(int, input().split())\n\nif x <= n // 2:\n    print(x-1)\nelse:\n    print(n-x)"}
{"label": 11, "index": 1353, "code": "input = input().split()\nn=int(input[0])\nx=int(input[1])\n\nprint(min(n-x, x-1))\n\n"}
{"label": 11, "index": 1354, "code": "a, b = map(int, raw_input().split())\nif b > a / 2:\n   print (a - b)\nelse:\n   print (b - 1)"}
{"label": 11, "index": 1355, "code": "n, x = map(int, raw_input().split())\nprint min(x-1, n-x)\n"}
{"label": 11, "index": 1356, "code": "n, x = map(int, input().split())\nprint(min(x-1, n-x))\n"}
{"label": 11, "index": 1357, "code": "n, x = map(int, raw_input().split())\nprint max(0, min(x - 1, n - x))"}
{"label": 11, "index": 1358, "code": "n, x = map(int, raw_input().split())\nprint min(x-1, n-x)"}
{"label": 11, "index": 1359, "code": "n,x = map(int,raw_input().split())\nprint min(x-1,n-x)"}
{"label": 11, "index": 1360, "code": "n, x = map(int, input().split())\nprint(min(x-1, n-x))"}
{"label": 11, "index": 1361, "code": "# -*- coding: utf-8 -*-\n# problem A\n\nn, x = map(int, input().split())\nans = min(x-1, n-x)\nprint(ans)"}
{"label": 11, "index": 1362, "code": "n,x = map(int,input().split())\nprint(min(x-1,n-x))\n"}
{"label": 11, "index": 1363, "code": "n, x = map(int, raw_input().strip().split())\nprint min(x-1, n-x)\n"}
{"label": 11, "index": 1364, "code": "n,x=map(int,input().split())\nprint(min(x-1,n-x))"}
{"label": 11, "index": 1365, "code": "n, x = map(int, raw_input().split())\n\nprint min(x - 1, n - x)\n"}
{"label": 11, "index": 1366, "code": "n, x = map(int, raw_input().split())\nif x > (n/2):\n    print str(n-x)\nelse:\n    print str(x-1)\n"}
{"label": 11, "index": 1367, "code": "n, x = [int(x) for x in input().split()]\nprint(min(x-1, n-x))"}
{"label": 11, "index": 1368, "code": "n, x = map(int, raw_input().split())\nprint(min(x - 1, n - x))\n"}
{"label": 11, "index": 1369, "code": "import math\nn,x = map(int, raw_input().split())\nif math.ceil(n/2.0)< x:\n    print(n-x)\nelse:\n    print(x-1)\n"}
{"label": 11, "index": 1370, "code": "# -*- coding: utf-8 -*-\nn, x = map(int, input().split())\n\nl = n - x\nr = x - 1\n\nprint(l if l < r else r)"}
{"label": 11, "index": 1371, "code": "input_lines = list(map(int, input().split()))\nn = input_lines[0]\nx = input_lines[1]\nprint(min(n - x, x - 1))"}
{"label": 11, "index": 1372, "code": "n, x = map(int, (input().split()))\nif x <= n / 2:\n    print(x - 1)\nelse:\n    print(n - x)\n"}
{"label": 11, "index": 1373, "code": "n, x = list(map(int, input().split(\" \")))\n\nprint(min(x-1, n-x))"}
{"label": 11, "index": 1374, "code": "n,x = map(int,input().split())\n\nprint(min(x-1, n-x))\n\n"}
{"label": 11, "index": 1375, "code": "n, x = map(int, input().split())\nif x <= n/2:\n\tprint(x-1)\nelse:\n\tprint(n-x)"}
{"label": 11, "index": 1376, "code": "[n, x] = map(int, raw_input().split(\" \"))\nif x-1 > n-x:\n    print n-x\nelse:\n    print x-1\n"}
{"label": 11, "index": 1377, "code": "n, x = map(int, input().split())\nprint(min(x - 1, n - x))\n"}
{"label": 11, "index": 1378, "code": "#!/usr/bin/python3\n \nn, x = list(map(int, input().split()))\n \nprint(min(x-1,n-x));"}
{"label": 11, "index": 1379, "code": "n,x = map(int, raw_input().split())\nprint min(n-x, x-1)\n"}
{"label": 11, "index": 1380, "code": "n, x = map(int, input().split())\n\nprint(min((x-1), (n-x)))\n"}
{"label": 11, "index": 1381, "code": "N,X=map(int,raw_input().strip().split(\" \"))\nprint min(X-1,N-X)\n"}
{"label": 11, "index": 1382, "code": "n, x = map(int, raw_input().split())\nprint min(x - 1, n - x)\n"}
{"label": 11, "index": 1383, "code": "n,x = map(int,raw_input().split())\nprint min(x-1, n-x)"}
{"label": 11, "index": 1384, "code": "n, x = map(int, input().split())\nx -= 1\nif n - x -1 > x:\n    print(x)\nelse:\n    print(n - x - 1)"}
{"label": 11, "index": 1385, "code": "#!/usr/bin/env python \n# -*- coding: utf-8 -*-\n__author__ = 'duc_tin'\n\nn, x =  map(int,raw_input().split())\nprint min(x-1, n-x)"}
{"label": 11, "index": 1386, "code": "n, x = map(int, input(). split())\ncnt = 0\n\na = x - 1\nb = n - x\n\nif a < b:\n    print(a)\nelse:\n    print(b)\n"}
{"label": 11, "index": 1387, "code": "n, x = [int(i) for i in  input().split()]\n\nprint(min(x-1, n-x))"}
{"label": 11, "index": 1388, "code": "n , x = map(int, raw_input( ).split( ))\nif x-1 < n-x :\n    print x-1\nelse :\n    print n-x"}
{"label": 11, "index": 1389, "code": "def main():\n    n,x = map(int,input().split())\n    print(min(x-1,n-x))\n\nif __name__ == \"__main__\":\n    main()\n"}
{"label": 11, "index": 1390, "code": "line=raw_input().split()\nn,x=int(line[0]),int(line[1])\n\nprint min(x-1,n-x)"}
{"label": 11, "index": 1391, "code": "n,x = map( int,input().split() )\n\n\n\nif n%2 == 0:\n    n_ = int(n/2)\n    if x <= n_:\n        print(x-1)\n    else:\n        print(n-x)\n    \nelse:\n    n_ = int(n/2)\n    if x <= n_:\n        print(x-1)\n    else:\n        print(n-x)"}
{"label": 11, "index": 1392, "code": "n, x = map(int, raw_input().split())\n\nprint x-1 if x <= n/2 else n-x\n"}
{"label": 11, "index": 1393, "code": "a, b = map(int, input().split())\nif a - b < b - 1 :\n    print(a-b)\nelse :\n    print(b-1)"}
{"label": 11, "index": 1394, "code": "[a, b] = list(map(int, input().split()))\n\nprint(min(b-1, a-b))"}
{"label": 11, "index": 1395, "code": "a,b=map(int,raw_input().split())\nprint min(b-1,a-b)"}
{"label": 11, "index": 1396, "code": "\nN, x = [int(_) for _ in input().split()]\n\nprint(min(x-1, N-x))"}
{"label": 11, "index": 1397, "code": "n, x = list(map(int, input().split()))\nprint(min(n-x, x-1))"}
{"label": 11, "index": 1398, "code": "a,b = map(int, raw_input().split())\nif a == 1:\n\tprint 0\nelif (a - b) >= b:\n\tprint b - 1\nelse:\n\tprint a - b"}
{"label": 11, "index": 1399, "code": "n,x,=map(int,raw_input().split())\nif x <= n / 2:\n    print x -1\nelse:\n    print n - x\n"}
{"label": 11, "index": 1400, "code": "n, x = map(int, input().split())\nif x <= n/2:\n    print(x-1)\nelse:\n    print(n-x)\n"}
{"label": 11, "index": 1401, "code": "a = raw_input().split(\" \")\nx = int(a[0]) - int(a[1])\ny = int(a[1]) - 1\nif x < y:print x\nelse:print y"}
{"label": 11, "index": 1402, "code": "n, x = map(int, raw_input().split())\nprint min(n-x, x-1)\n"}
{"label": 11, "index": 1403, "code": "n, x = input().split()\n\nn = int(n)\nx = int(x)\n\nmid = n//2\nfirst = 1\nlast = int(n)\n\nif x > mid:\n    step = last - x\nelse:\n    step = x - 1\n\nprint(step)\n\n"}
{"label": 11, "index": 1404, "code": "#!/usr/bin/python3\n\nn, x = list(map(int, input().split()))\n\nprint(min(x-1,n-x));\n"}
{"label": 11, "index": 1405, "code": "# -*- coding:utf-8 -*-\nn,x = map(int, input().split())\nprint(min(x-1,n-x))"}
{"label": 11, "index": 1406, "code": "import math,sys\n\n#sys.setrecursionlimit(10**7)\n\nn,x = list(map(int, input().split()))\n\nprint(min(x-1,n-x))\n\n\n"}
{"label": 11, "index": 1407, "code": "# coding: utf-8\n\nn, x = map(int, raw_input().split())\nprint min(x-1, n-x)"}
{"label": 11, "index": 1408, "code": "n, x = map(int, raw_input().split())\nprint min(x - 1, n - x)\n"}
{"label": 11, "index": 1409, "code": "n,x = map(int, raw_input().split())\nprint min(x-1, n-x)\n"}
{"label": 11, "index": 1410, "code": "n,x=map(int,input().split())\nprint(min(n-x,x-1))"}
{"label": 11, "index": 1411, "code": "n,x=map(int,input().split())\nprint(min(x-1,n-x))"}
{"label": 11, "index": 1412, "code": "#!/usr/bin/python3\n \nn, x = list(map(int, input().split()))\n \nprint(min(x-1,n-x))"}
{"label": 11, "index": 1413, "code": "n, x = map(int, input().split())\nif 2*x <= n:\n\tprint(x-1)\nelse:\n\tprint(n-x)"}
{"label": 11, "index": 1414, "code": "n, x = map(int, input().split())\na = n / 2\nif n != 2:\n    if a >= x:\n        ans = x - 1\n        print(ans)\n    else:\n        ans = n - x\n        print(ans)\nelse:\n    print(0)\n"}
{"label": 11, "index": 1415, "code": "import sys\na = map(int, raw_input().split())\nx=a[0]\ny=a[1]\nz=1\nif x-y<y-z:\n    print(x-y)\nelse:\n    print(y-z)\n"}
{"label": 11, "index": 1416, "code": "date = input().split()\nn = int(date[0]);x = int(date[1])\nif n /2 >= x:\n    print(x- 1)\nelse:\n    print(n - x)    \n"}
{"label": 11, "index": 1417, "code": "line = raw_input().split(\" \")\n\nn = int(line[0])\nx = int(line[1])\n\nhalf = n/2.0\n\nif half >= x:\n    print x - 1\nelse:\n    print n - x\n"}
{"label": 11, "index": 1418, "code": "n, x = map(int, input().split())\nprint(min(n - x, x - 1))\n"}
{"label": 11, "index": 1419, "code": "n, x = map(int, input().split())\nif x > n/2:\n    print(n - x)\nelse:\n    print(x - 1)"}
{"label": 11, "index": 1420, "code": "n, x = map(int, input().split())\nans =min(x - 1, n - x)\nprint(ans)"}
{"label": 11, "index": 1421, "code": "n,x = map(int, raw_input().split())\nif n/2 >= x:\n    print x-1\nelse:\n    print n-x"}
{"label": 11, "index": 1422, "code": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\nimport sys\nimport math\n\nn, x = map(int, sys.stdin.readline().rstrip().split())\n\nprint(min(x-1, n-x))\n\nexit(0)\n"}
{"label": 11, "index": 1423, "code": "# -*- coding: utf-8 -*-\n\nS=input().split()\nn=int(S[0])\nx=int(S[1])\n\n\n\n\nif(2*x > n):\n\ta=n-x+1\nelse:\n\ta=x\nprint(a-1)"}
{"label": 11, "index": 1424, "code": "n, x = [int(x) for x in input().split()]\na, b = x - 1, n - x\n\nif a < b:\n    print(a)\nelse:\n    print(b)"}
{"label": 11, "index": 1425, "code": "n,x = map(int,input().split())\ni = n/2\nif i>=x:\n    print(x-1)\nelse:\n    print(n-x)"}
{"label": 11, "index": 1426, "code": "n, x = map(int, input().split())\nprint(min(x-1, n-x))\n"}
{"label": 11, "index": 1427, "code": "n,x = map(int,raw_input().split(' '))\n\nif n - x >= n / 2:\n    print x - 1\nelse:\n    print n - x\n"}
{"label": 11, "index": 1428, "code": "b, c = map(int, raw_input().split())\nprint min(b-c, c-1)\n\n"}
{"label": 11, "index": 1429, "code": "import math\ndef read():\n    return int(input())\n\ndef reads(sep=None):\n    return list(map(int, input().split(sep)))\n\ndef main():\n    n, x = reads()\n    n, x = n-1, x-1\n    print(min(x, n-x))\n\nmain()\n"}
{"label": 12, "index": 1430, "code": "# -*- coding: utf-8 -*-\n# problem B\n\nn = int(input())\nans = 10 ** 6\n\nfor h in range(1, n + 1):\n    for w in range(1, min(h, (n // h)) + 1):\n        S = h * w\n        val = (h - w) + n - S\n\n        if val <= ans :\n            ans = val\n        else:\n            continue\n            \nprint(ans)"}
{"label": 12, "index": 1431, "code": "import math\n\nn = int(input())\nli = []\n\nfor i in range(n):\n    m = n\n    syo = math.floor(m / (i+1))\n    ama = m % (i+1)\n    ans = ama + abs(syo - (i+1))\n    li.append(ans)\n\n#print(li)\nli.sort()\nprint(li[0])\n#print(li)\n"}
{"label": 12, "index": 1432, "code": "n = int(input())\nprint(min(abs(h - n // h) + n - h * (n // h) for h in range(1, int(n ** (1 / 2)) + 1)))"}
{"label": 12, "index": 1433, "code": "n = int(input())\nans = 10 ** 6\nif n == 1:\n    ans = 0\nelse:\n    for i in range(1,int(n**1/2)+1):\n        if n % i + abs(i - n // i) < ans:\n            ans = n % i + abs(i - n // i)\nprint(ans)"}
{"label": 12, "index": 1434, "code": "import math\nn = int(raw_input())\nx = int(math.sqrt(n))\nmin = n\nfor i in reversed(xrange(1,x+1)):\n    for j in xrange(x,x+i):\n        if i * j > n:\n            continue\n        else:\n            if n - (i*j) + abs(i-j) < min:\n                min = n - (i*j) + abs(i-j)\nprint min"}
{"label": 12, "index": 1435, "code": "import sys\nimport math\n\nn = int(sys.stdin.readline())\ni = int(math.sqrt(n)) + 1\nmins = n\n\nfor h in range(1,i):\n\tw = h\n\twhile(h*w<=n):\n\t\ts = w-h + (n-w*h)\n\t\tif(s<mins):\n\t\t\tmins =s\n\t\tw = w+1\n\t\nprint(mins)\n"}
{"label": 12, "index": 1436, "code": "import math\n\nn = int(input())\nsqrtn = int(math.sqrt(n))\nminv = 1000000\n\nfor w in range(sqrtn+1, 0, -1):\n\th = int(n/w)\n\tminv = min(abs(w-h) +(n-w*h), minv)\n\nprint(minv)"}
{"label": 12, "index": 1437, "code": "# coding: utf-8;\n\ndef main():\n    n = int(input())\n    m = n\n\n    for i in range(1, n + 1):\n        j = int(n / i)\n        d = abs(i - j) + n - i * j\n        if m > d: m = d\n\n    print(m)\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 12, "index": 1438, "code": "# -*- coding:utf-8 -*-\n\nfrom math import fabs\n\nif __name__ == \"__main__\":\n    n = int(raw_input())\n    min_value = 100000\n    x = 1\n    while x**2 <=n:\n        for y in range(x, n+1):\n            if x * y <= n:\n                min_value = min(min_value, fabs(x - y) + n - x*y)\n            else:\n                break\n        x = x + 1\n    print int(min_value)\n"}
{"label": 12, "index": 1439, "code": "import math as ma\nn = int(raw_input())\nx = int(ma.sqrt(n))\nans = n\nfor h in range(1, x+1):\n    w = n / h\n    ans = min(ans, abs(h-w)+n-h*w)\nprint ans\n"}
{"label": 12, "index": 1440, "code": "import numpy as np\n\n\nn = int( input() )\n\n\nfor j in range( 1 , int(np.sqrt(n))+2 ):\n    a = int(n/j)\n    b = n%j\n    \n    if j == 1:\n        n_ans = abs(a-j) + b\n    else:\n        n_ans = min( n_ans,abs(a-j)+b )\n\nprint(n_ans)"}
{"label": 12, "index": 1441, "code": "import math\nn = input()\nx = int(math.sqrt(n))\nans = n - x*x\nfor d in range(-ans, ans+1):\n    w = max(1, x+d)\n    h = n / w\n    ans = min(ans, n-w*h+abs(h-w))\nprint ans"}
{"label": 12, "index": 1442, "code": "a = raw_input()\na = int(a)\nrec = []\nfor i in range(int(a**0.5),0,-1):\n rec.append(abs(i-int(a/i))+a-int(a/i)*i)\nprint min(rec)"}
{"label": 12, "index": 1443, "code": "import sys\nimport math\na = raw_input()\nb=int(math.sqrt(int(a)))\nc=[]\nfor i in range(b-50,b+50,1):\n    for j in range(b-50,b+50,1):\n        if i>int(a) or i<0 or j>int(a) or j<0 or i*j>int(a):\n            pass\n        else:\n            c.append (abs(i-j)+int(a)-(i*j))\nprint(min(c))"}
{"label": 12, "index": 1444, "code": "n = int(input())\nans = 100000000\nfor i in range(1, 634):\n    for j in range(i, 634):\n        if i * j > n: break\n        a = n-i*j+abs(i-j)\n        if a < 0: a = 100000000\n        ans = min(ans,a)\nprint(ans)\n"}
{"label": 12, "index": 1445, "code": "import math\nn = int(raw_input())\nans = 100,000\nfor i in xrange(1, int(math.sqrt(n)) + 1):\n    j = n / i\n    ans = min(ans, abs(i - j) + n - i*j)\nprint ans"}
{"label": 12, "index": 1446, "code": "n = int(input())\n\nans = 10**6\n\nfor i in range(1, n+1):\n    ans = min(ans, abs(n//i-i)+n%i)\n\nprint(ans)"}
{"label": 12, "index": 1447, "code": "n = int(input())\nans = n * 3\nfor x in range(1, n+1):\n    for y in range(1,n+1):\n        if n < x * y:\n            break\n        \n        ans = min(ans, abs(x-y) + n-x*y)\n        \nprint(ans)"}
{"label": 12, "index": 1448, "code": "import sys\n\ndef main():\n    n = int(input())\n    mini = sys.maxsize \n    for v in range(n):\n        x = v + 1\n        y = n // x\n        mini = min(mini,n-x*y+abs(x-y))\n    print(mini)\n\nif __name__ == \"__main__\":\n    main()\n"}
{"label": 12, "index": 1449, "code": "n=int(input())\nc=1\nr=n//c\nans=n\nwhile r>=c:\n    ca=n-r*c+r-c\n    ans = ca if ca<ans else ans\n    c+=1\n    r=n//c\nprint(ans)"}
{"label": 12, "index": 1450, "code": "import math\nn = int(input())\nr = 111111\nfor i in range(1, int(math.sqrt(n))+1):\n    t = int(n/i) - i + n - int(n/i)*i\n    r = min(r, t)\nprint(r)"}
{"label": 12, "index": 1451, "code": "import math\nn = int(input())\nn_sqrt = int(math.sqrt(n))\nlst = []\nfor h in range(1, n_sqrt + 1):\n    w = n // h\n    lst.append(abs(w - h) + n - w * h)\nprint(min(lst))\n"}
{"label": 12, "index": 1452, "code": "n = int(input())\n\nh = 1\nmin = n\nwhile n / h >= 1:\n    w = n // h\n    diff = abs(h - w)\n    rem = n - h * w\n    if rem + diff < min:\n        min = rem + diff\n    h += 1\nprint(min)\n"}
{"label": 12, "index": 1453, "code": "n = int(input())\nm = 1000000\n\nfor i in range(1, int(n**(1/2)) + 1):\n    h =\ti\n    w =\tint(n /\ti)\n    m = min(m, n - (w * h) + abs(w - h))\n\nprint(m)"}
{"label": 12, "index": 1454, "code": "#coding: utf-8\n#ABC040B\nimport math\n\nn=int(raw_input())\nres=2000\nfor i in xrange(1,int(math.sqrt(n)+1)):\n res=min(n-(i*(n/i))+abs(n/i-i),res)\nprint res\n"}
{"label": 12, "index": 1455, "code": "import itertools\nn = int(raw_input())\nans = n\nfor i in xrange(1, n+1):\n    for j in xrange(1, n/i+1):\n        temp = abs(i-j) + n-i*j\n        if(temp<ans):\n            ans = temp\nprint ans"}
{"label": 12, "index": 1456, "code": "n = int(input())\nres = 100000\nfor h in range(1, int(n / 2) + 2):\n    w = n // h\n    res = min(res, abs(h - w) + n - h * w)\nprint(res)"}
{"label": 12, "index": 1457, "code": "import math\n\nn = int(raw_input())\nsq = -1\nfor i in range(1, 1000):\n    s = i*i\n    if s == n:\n        print 0\n        exit()\n    if s > n:\n        break\n    sq = s\n\nans = n - sq\namari = 0\nwhile amari < ans:\n    tmp_n = n - amari\n    for i in range(1, int(math.sqrt(tmp_n))+5):\n        if tmp_n % i == 0:\n            j = tmp_n/i\n            if abs(j - i) + amari < ans:\n                ans = abs(j - i) + amari\n    amari += 1\nprint ans\n"}
{"label": 12, "index": 1458, "code": "n = int(input())\nminv = 1000000\n\nfor w in range(1, n+1):\n\th = int(n/w)\n\tminv = min(abs(w-h) +(n-w*h), minv)\n\nprint(minv)"}
{"label": 12, "index": 1459, "code": "def calc(h, w, mod):\n\treturn abs(h - w) + mod\n\t\nif __name__ == \"__main__\":\n\tn = int(raw_input())\n\n\tfor h in range(1, n+1):\n\t\tfor w in range(h, n/h+1):\n\t\t\tmod = n - h * w\n\t\t\t\n\t\t\tif h == 1:\n\t\t\t\tans = calc(h, w, mod)\n\t\t\telse:\n\t\t\t\tans = min(calc(h, w, mod), ans)\n\t\t\t\t\n\tprint ans"}
{"label": 12, "index": 1460, "code": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\nimport sys\nimport math\n\nn = int(sys.stdin.readline().rstrip())\n\nmax_length = int(math.sqrt(n))\nminvalue = max_length*10\nfor length in range(1, max_length+1):\n    value = ((n / length) - length) + n%length\n    minvalue = min(value, minvalue)\nprint(minvalue)\nexit(0)\n"}
{"label": 12, "index": 1461, "code": "import math\nn = int(input())\nintroot = n\ntemp = int(n / introot)\nmini = n - temp * introot + math.fabs(temp - introot)\n\n\nfor i in range(n):\n  if introot > 1:\n    introot = introot -1\n    temp = int(n / introot)\n    tempmini = n - temp * introot + math.fabs(temp - introot)\n\n    if mini > tempmini:\n      mini = tempmini\n\n#print(\"newmini \" +str(mini))\nprint(int(mini))"}
{"label": 12, "index": 1462, "code": "n = int(input())\nm = []\nfor h in range(1,n+1):\n    m.append(abs(h-n//h)+(n-h*(n//h)))\nprint(min(m))"}
{"label": 12, "index": 1463, "code": "import math\nn=int(input())\nans=n\nfor b in range(1,int(math.sqrt(n))+1):\n  a=int(n/b)\n  r=n-a*b\n  ans=min(ans,a-b+r)\nprint(ans)"}
{"label": 12, "index": 1464, "code": "import math\n\nn = int(input())\nsqrtn = int(math.sqrt(n))\nminv = 1000000\n\nfor w in range(1, sqrtn+1):\n\th = int(n/w)\n\tminv = min(abs(w-h) +(n-w*h), minv)\n\nprint(minv)"}
{"label": 12, "index": 1465, "code": "import math\n\nn = input()\nbest = 10**7\nfor a in range(1,int(math.sqrt(n))+1):\n  b = n/a\n  v = abs(a-b) + n-a*b\n  best = min(best, v)\n\nprint best"}
{"label": 12, "index": 1466, "code": "N = int(input())\nans = N\nfor W in range(1, N + 1):\n    H = N // W\n    val = abs(H - W) + (N - H * W)\n    ans = min(ans, val)\nprint(ans)\n"}
{"label": 12, "index": 1467, "code": "n = int(input())\nm = n\nfor k in range(1, int(n**(1/2))+1):\n s = n - int(n/k)*k + int(n/k) - k\n m = min(s,m)\nprint(m)"}
{"label": 12, "index": 1468, "code": "n = int(input())\nans = 10 ** 9\n\n\nfor w in range(1, n + 1):\n    h = int(n // w)\n    area = h * w\n    abs_diff = abs(h - w)\n\n    if (n - area) + abs_diff < ans:\n        ans = (n - area) + abs_diff\n\n\nprint(ans)\n"}
{"label": 12, "index": 1469, "code": "n = int(input())\n\ntotal = 100000\nfor x in range(400):\n\tfor y in range(400):\n\t\tz = x*y\n\t\tif z <= n:\n\t\t\tif total > (abs(x-y)+(n-z)):\n\t\t\t\ttotal = (abs(x-y)+(n-z))\n\t\telse:\n\t\t\tbreak\nprint(total)"}
{"label": 12, "index": 1470, "code": "import math\n\nn = int(input())\nsqrtn = int(math.sqrt(n))\na = []\n \nfor h in range(sqrtn, 0, -1):\n    w = int(n/h)\n    a.append(abs(h-w) + (n-h*w))\nprint(min(a))\n"}
{"label": 12, "index": 1471, "code": "#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n\nn = int(input())\nans = 10 ** 9\n\nfor i in range(1, n+1):\n    area = (n // i) * i\n    ans = min(ans, abs(n//i - i) + n - area)\nprint(ans)\n"}
{"label": 12, "index": 1472, "code": "N=input()\nmi = 101010\n\nfor w in range(1,N+1):\n\th = N/w\n\tif h > 0:\n\t\tmi = min(mi, N-w*h + abs(w-h))\n\nprint mi"}
{"label": 12, "index": 1473, "code": "n = int(input())\n\nmin_diff = 1010101010101010101010\n\nfor i in range(1, int(n ** 0.5 + 1)):\n  j = n // i\n  diff = abs(n - i * j) + abs(i - j)\n  if diff < min_diff:\n    min_diff = diff\n\nprint(min_diff)\n "}
{"label": 12, "index": 1474, "code": "n = int(input())\nret = n\nfor h in range(1, n + 1):\n    w = n // h\n    r = n % h\n    ret = min(ret, abs(h - w) + r)\nprint(ret)\n"}
{"label": 12, "index": 1475, "code": "import itertools\n\ndef resolve(x, n):\n    res = []\n    for i in itertools.count():\n        xi = x * i\n        if xi > n: break\n        res.append(abs(x - i) + n - xi)\n    return min(res)\n\n\nn = input()\n\nprint(min([resolve(i, n) for i in range(1, int(pow(n, 0.5)) + 1)]))\n"}
{"label": 12, "index": 1476, "code": "n = int(input())\nret = float('inf')\nfor i in range(1, n+1):\n    j = n // i\n    ret = min(ret, abs(i - j) + n - i * j)\n\nprint(ret)"}
{"label": 12, "index": 1477, "code": "n = int(input())\nres = 1000000000000\ni = 1\nwhile i * i <= n:\n    temp = abs(n // i - i) + n % i\n    res = min(temp, res)\n    i += 1\nprint(res)"}
{"label": 12, "index": 1478, "code": "IS=float('inf')\nxy=[(1,0),(-1,0),(0,1),(0,-1)]\nbs=[(-1,-1),(-1,1),(1,1),(1,-1)]\ndef gcd(a,b): return a if b==0 else gcd(b,a%b)\ndef lcm(a,b): return a*b/gcd(a,b)\ndef euclid_dis(x1,y1,x2,y2): return ((x1-x2)**2+(y1-y2)**2)**0.5\ndef choco(xa,ya,xb,yb,xc,yc,xd,yd): return 1 if abs((yb-ya)*(yd-yc)+(xb-xa)*(xd-xc))<1.e-10 else 0\n\nans=IS\nn=int(raw_input())\nif n==1:\n    print 0\n    exit()\n\nfor i in range(int(n**0.5),0,-1):\n    tmp=n/i\n    ans=min(ans,(n-i*tmp)+abs(i-tmp))\nprint ans"}
{"label": 12, "index": 1479, "code": "n = int(input())\nminimum = n - 1\nfor i in range(1, n+1):\n    for j in range(1, int(n/i)+1):\n        x = abs(i-j) + (n-(i*j))\n        if x < minimum:\n            minimum = x\nprint(minimum)\n        "}
{"label": 12, "index": 1480, "code": "#!/usr/bin/env python\n# -*- coding: UTF-8 -*-\n\nn=int(raw_input())\nans=10**9\ntmp=int(n**0.5)\nfor i in range(1,tmp+20):\n    for j in range(tmp+20,0,-1):\n        if 0<i*j<=n:\n            ans=min(ans,n-i*j+abs(i-j))\nprint ans"}
{"label": 12, "index": 1481, "code": "n=int(input())\nans=n\nfor x in range(1,n+1):\n    ans=min(ans,abs(n//x-x)+n-x*(n//x))\n\nprint(ans)\n"}
{"label": 12, "index": 1482, "code": "# coding: utf-8\n\nimport math\n\ndef f(n, x, y):\n    return abs(x- y) + (n - x*y)\n\nn = input()\nmax_sq = int(math.sqrt(n))\n\nmin_v = float(\"inf\")\nfor x in range(1, max_sq+1):\n    for y in range(1, n+1):\n        if (n - x*y) < 0:\n            break\n        v = f(n, x, y)\n        if v < min_v:\n            min_v = v\nprint min_v"}
{"label": 12, "index": 1483, "code": "#!/usr/bin/env python3\nn = int(input())\nans = float('inf')\nfor y in range(1,n+1):\n    x = n // y\n    ans = min(ans, n - x * y + abs(x - y))\nprint(ans)\n"}
{"label": 12, "index": 1484, "code": "n=int(input())\n\nP=0\nA=0\nB=[]\n\nfor i in range(1,n+1):\n    P=n//i\n    S=n%i\n\n    if P<=i:\n        A=abs(i-P)+S\n        B.append(A)\n    else:\n        pass\n    \nprint(min(B))"}
{"label": 12, "index": 1485, "code": "from math import sqrt\nn=input()\nprint min(n/k1-k1 + n - k1*(n/k1) for k1 in xrange(1, int(sqrt(n))+1))"}
{"label": 12, "index": 1486, "code": "def f(n):\n    ans = 100000\n    for x in range(1, int(n ** 0.5)+1):\n        y = n / x\n        ans = min(ans, n - x * y + abs(x - y))\n    return ans\n\nn = int(raw_input())\nprint f(n)\n"}
{"label": 12, "index": 1487, "code": "n = int(raw_input())\nret = n\nfor h in range(1,n+1):\n    for w in range(1,n/h+1):\n        ret = min(ret, abs(h-w)+(n-h*w))\nprint ret\n"}
{"label": 12, "index": 1488, "code": "from math import *\nn=int(input())\nprint(min([n-int(n/i)*i+abs(int(n/i)-i) for i in range(1,n+1)]))"}
{"label": 12, "index": 1489, "code": "def ri(): return int(input())\ndef rli(): return list(map(int, input().split()))\ndef rls(): return list(input())\ndef pli(a): return \"\".join(list(map(str, a)))\n\nn = ri()\nmi = 1145148101919\nfor i in range(1000):\n    for j in range(317):\n        if(i*j <= n):\n            mi = min(mi, n - i*j + abs(i-j))\nprint(mi)\n"}
{"label": 12, "index": 1490, "code": "a=int(raw_input())\ni=1\nans=-1\nwhile i**2<=a:\n    if ans==-1:\n        ans=(a-i**2)/i+(a-i**2)%i\n    else:\n        ans=min(ans,(a-i**2)/i+(a-i**2)%i)\n    i+=1\nprint ans"}
{"label": 12, "index": 1491, "code": "import math\nimport sys\nn = int(raw_input())\ncand = sys.maxint\nfor x in range(1, n+1):\n    for y in (n / x, n / x + 1):\n        z = n - x * y\n        if z >= 0 and cand > abs(x-y)+z:\n            cand = abs(x-y)+z\nprint cand\n"}
{"label": 12, "index": 1492, "code": "import math,sys\n\n#sys.setrecursionlimit(10**7)\n\nn = int(input())\n\nr = n-1\nfor i in range(2,n):\n    if i*i > n:\n        break\n    ri = abs(n//i-i) + (n-n//i*i)\n    if r > ri:\n        r = ri\nprint(r)\n\n\n"}
{"label": 12, "index": 1493, "code": "\nfrom math import *\nn=int(input())\nprint(min([n-int(n/i)*i+abs(int(n/i)-i) for i in range(1,n+1)]))\n"}
{"label": 12, "index": 1494, "code": "n = int(input())\nf = lambda q, r: q + r\nprint(min([f(*divmod(n, k)) - k for k in range(1, max(2, n // 2)) if k * k <= n]))"}
{"label": 12, "index": 1495, "code": "n = int(raw_input())\nans = 1e10\nfor a in xrange(1, n + 1):\n    b = n / a\n    ans = min(ans, abs(a - b) + n - a*b)\nprint ans"}
{"label": 12, "index": 1496, "code": "def main():\n    N = int(input())\n\n    ans = []\n    nx = 1\n    while True:\n        ny = 1\n        while True:\n            if N < nx * (ny + 1):\n                ans.append(abs(nx - ny) + (N - nx * ny))\n                break\n            else:\n                ny += 1\n        if nx > ny:\n            break\n        else:\n            nx += 1\n\n    print(min(ans))\n\nmain()\n"}
{"label": 12, "index": 1497, "code": "def read():\n    return int(input())\n\ndef reads(sep=None):\n    return list(map(int, input().split(sep)))\n\ndef main():\n    n = read()\n    r = 10**10\n    for w in range(1, n+1):\n        for h in range(1, n+1):\n            if n < w*h:\n                break\n            r = min(r, (n-w*h) + abs(w-h))\n    print(r)\n\nmain()\n"}
{"label": 12, "index": 1498, "code": "n=int(input())\nans=n\naw,ah=1,1\nfor w in range(1,n+1):\n    h = int(n/w)\n    if ans > (n-w*h) + abs(w-h):\n        ans = (n-w*h) + abs(w-h)\n        aw=w\n        ah=h\nprint(ans)\n"}
{"label": 12, "index": 1499, "code": "from math import sqrt\nn = input()\nans = 10**9\nfor l in xrange(1,500):\n    if n < l*l:\n        break\n    rest = n - l*l\n    ans = min(ans, (rest/l) + (rest%l))\nprint ans\n"}
{"label": 12, "index": 1500, "code": "n = int(raw_input().strip())\n\nimport math\nsqrt = int(math.ceil(math.sqrt(n)))\nminVal = 999999999;\n\nfor i in range(1, sqrt + 1):\n    w = i\n    h = n / i\n    a = n - (w * h)\n    val = a + abs(w-h)\n    minVal = val if val < minVal else minVal\n\nprint minVal\n"}
{"label": 12, "index": 1501, "code": "import math\nn = int(input())\n\nroute_n = int(math.sqrt(n))\n\nans = float('inf')\nfor i in range(1, route_n+1):\n    a, b = i, n//i\n    ans = min(ans, n-a*b + b-a)\n\nprint(ans)\n\n\n"}
{"label": 12, "index": 1502, "code": "max_n = 100005\nans = 100000\nn = int(input())\n\nfor i in range(1, max_n):\n    h = int(n / i)\n    if h > 0:\n        x = abs(i-h) + abs(n - (i*h))\n        ans = min(ans, x)\n\nprint(ans)\n"}
{"label": 12, "index": 1503, "code": "n = int(input())\nans = 100000\nfor i in range(1, n+1):\n    a = abs(i-int(n/i))+(n-i*int(n/i))\n    ans = min(ans, a)\nprint(ans)\n\n"}
{"label": 12, "index": 1504, "code": "n = int(raw_input())\nans = 10**9\nfor h in xrange(1, 320):\n  w = n/h\n  if n >= w*h:\n    ans = min(ans, abs(w-h)+(n-w*h))\nprint ans"}
{"label": 12, "index": 1505, "code": "import math\n\nn = int(input())\nsqrtn = math.floor(math.sqrt(n))\na = []\n\nfor i in range(sqrtn, 0, -1):\n    j = math.floor(n/i)\n    a.append(abs(i-j) + n-(i*j))\nprint(min(a))"}
{"label": 12, "index": 1506, "code": "import math\nn = int(input())\nans = 1<<28 \nfor i in range(1,n):\n    j = n//i\n    res = abs(j-i) + n-j*i\n    if ans > res:\n        ans = res\n\nif ans==1<<28:\n    ans = 0\nprint(ans)\n\n"}
{"label": 12, "index": 1507, "code": "n = int( input() )\n\nif n ==1:\n    print(0)\nelse:\n    a = []\n    for i in range(1,n):\n        if i**2 <= n:\n            amari = n%i\n            syou = n//i\n            a.append( abs(syou-i)+amari )\n        else:\n            break\n    \n    print( min(a) )"}
{"label": 12, "index": 1508, "code": "n = input()\nhight = 1\nans = 100000\nwhile hight<n:\n    width = n/hight\n    amari = n - width*hight\n    wa = abs(width-hight)+amari\n    if wa < ans:\n        ans = wa\n    hight = hight + 1\nif n == 1:\n    ans = 0\nprint ans"}
{"label": 12, "index": 1509, "code": "# coding:utf-8\nimport math\nlist = []\nX = int(input())\ni = int(math.sqrt(X))\nfor j in xrange(i):\n\tlist.append((X%(i-j))+math.fabs((i-j)-X/(i-j)))\nprint int(min(list))"}
{"label": 12, "index": 1510, "code": "import math as ma\nn = int(input())\ncmin = n\n\nfor i in range(1, ma.floor(ma.sqrt(n))+1):\n\tfor j in range(1, ma.floor(n/i)+1):\n\t\tc = n - i*j + abs(i-j)\n\t\tif c < cmin:\n\t\t\tcmin = c\nprint(cmin)"}
{"label": 12, "index": 1511, "code": "import re\nimport math\nimport doctest\n\nclass IO_for_Contest(object):\n    @staticmethod\n    def my_input():\n        #return raw_input()\n        return input()\n\n    @staticmethod\n    def read_from_input():\n        #TODO: impl this for each problem\n        pass\n\n    @staticmethod\n    def read_line():\n        return IO_for_Contest.my_input().strip()\n\n    @staticmethod\n    def read_int():\n        return int(IO_for_Contest.my_input().strip())\n\n    @staticmethod\n    def read_n_int(n):\n        return list(map( \\\n                int, \\\n                re.split('\\s+', IO_for_Contest.my_input().strip())))[ : n]\n\ndef think_appr_square_with_tiles(n):\n    '''\n    >>> a = think_appr_square_with_tiles(26)\n    >>> a[0] + a[1]\n    1\n    >>> a = think_appr_square_with_tiles(41)\n    >>> a[0] + a[1]\n    4\n    >>> a = think_appr_square_with_tiles(100000)\n    >>> a[0] + a[1]\n    37\n    '''\n    ceil = int(math.sqrt(n))\n    if ceil ** 2 == n:\n        #print('path 1')\n        return 0, 0 # diff, remain\n\n    diff, remain = n, n\n    for i in range(ceil, 0, -1):\n        m = n // i\n        d = abs(i - m)\n        r = n % m\n        if diff + remain > d + r:\n            #print('{0:d}, {1:d} => {2:d}, {3:d} # {4:d} {5:d} # {6:d}'.format(diff, remain, d, r, n, m, i))\n            diff, remain = d, r \n    #print('path 2 {0:d} {1:d}'.format(diff, remain))\n    return diff, remain\n\ndef solve():\n    n = IO_for_Contest.read_int()\n    diff, remain = think_appr_square_with_tiles(n)\n    print(diff + remain)\n\nif __name__ == '__main__':\n    doctest.testmod()\n    solve()"}
{"label": 12, "index": 1512, "code": "n = int(input())\ni = 1\nw = n\nwhile(i<=n):\n    w = min(w,abs(n//i-i)+n%i)\n    i+=1\n\nprint(w)\n"}
{"label": 12, "index": 1513, "code": "n = input()\nret = n\nfor i in range(1, n + 1):\n    w = i\n    h = n / i\n    r = n - w * h\n    ret = abs(w - h) + r if abs(w - h) + r < ret else ret\nelse:\n    print(ret)\n"}
{"label": 12, "index": 1514, "code": "import sys, math\n\nN = int(raw_input())\nsqrt = int(math.sqrt(N))\nans = N\n\nfor height in range(1, sqrt + 1):\n    width = N / height\n    result = N - height * width + abs(height - width)\n    ans = min(ans, result)\n\nprint str(ans)\n"}
{"label": 12, "index": 1515, "code": "def main():\n    n = int(input())\n    if n == 1:\n        print(0)\n        return\n    \n    ans = 10 ** 10\n    for y in range(1, n):\n        for x in range(1, n // y + 1):\n            if n >= x * y:\n                ans = min(ans, abs(y - x) + n - (y * x))\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 12, "index": 1516, "code": "n = int(raw_input())\n\nans = 10**9 + 7\nfor i in xrange(int(n**0.5), 0, -1):\n    x = n / i\n    ans = min(ans, (n - i*x)+abs(i - x))\nprint int(ans)\n"}
{"label": 12, "index": 1517, "code": "# -*- coding:utf-8 -*-\nimport math, itertools\nn = int(input())\na = list(itertools.combinations_with_replacement([ tmp for tmp in range(1, int(math.sqrt(n))+10**((int(math.log10(n)+1))//2)) ],2))\nprint(min([ abs(tmp-tmp2)+(n-tmp*tmp2) for tmp, tmp2 in a if n >= tmp*tmp2 ]))"}
{"label": 12, "index": 1518, "code": "IS=float('inf')\nxy=[(1,0),(-1,0),(0,1),(0,-1)]\nbs=[(-1,-1),(-1,1),(1,1),(1,-1)]\ndef gcd(a,b): return a if b==0 else gcd(b,a%b)\ndef lcm(a,b): return a*b/gcd(a,b)\ndef euclid_dis(x1,y1,x2,y2): return ((x1-x2)**2+(y1-y2)**2)**0.5\ndef choco(xa,ya,xb,yb,xc,yc,xd,yd): return 1 if abs((yb-ya)*(yd-yc)+(xb-xa)*(xd-xc))<1.e-10 else 0\n\nans=IS\nn=int(raw_input())\nif n==1:\n    print 0\n    exit()\nfor i in range(1,n):\n    tmp=n/i\n    ans=min(ans,(n-i*tmp)+abs(i-tmp))\nprint ans"}
{"label": 12, "index": 1519, "code": "N = int(input())\nn = 1\nwhile n*n <= N:\n    n += 1\nn -= 1\nans = N - n * n\nfor i in range(1, N):\n    a = i * (N//i)\n    b = N - a + abs(n-i) + abs(n-(N//i))\n    if b < ans and b >= 0:\n        ans = b\nprint(ans)"}
{"label": 12, "index": 1520, "code": "n = int(input())\nprint(min(abs((a-n//a))+n%a for a in range(1, n+1)))\n"}
{"label": 12, "index": 1521, "code": "n=int(input())\nans=n\nfor x in range(1,int(n**0.5)+1):\n    ans=min(ans,n//x-x+n-x*(n//x))\nprint(ans)"}
{"label": 12, "index": 1522, "code": "import math\nn = int(input())\nans = 1<<28 \nfor i in range(1,n):\n    j = n//i\n    res = abs(j-i) + n-j*i\n    if ans > res:\n        ans = res\n\nif ans==1<<28:\n    ans = 0\nprint(ans)\n\n"}
{"label": 12, "index": 1523, "code": "n=int(input().strip())\nt=100001\nfor i in range(1,n+1):\n    for j in range(1,n+1):\n        if(n-i*j<0):\n            break\n        t=min(t,n-i*j+abs(i-j))\nprint(t)\n\n"}
{"label": 12, "index": 1524, "code": "n = int(input())\n\ndef solve(n):\n    score = n\n    for w in range(1, n + 1):\n        h, r = divmod(n, w)\n        score = min(score, abs(w - h) + r)\n    return score\n\nprint(solve(n))"}
{"label": 12, "index": 1525, "code": "# coding:utf-8\n\ndef cal(a, b, n):\n    if a*b > n:\n        return 100000\n    else:\n        return abs(a-b)+(n-a*b)\n\ndef main():\n    n = int(input())\n    ans = 100001\n    for i in range(1000):\n        for j in range(1000):\n            ans = min(ans,cal(i, j, n))\n    print(ans)\n    return 0\n\nmain()"}
{"label": 12, "index": 1526, "code": "import sys\n\ndef solve():\n    n = int(input())\n    ans = float('inf')\n\n    for a in range(1, n + 1):\n        ans = min(ans, n - (n // a) * a + abs((n // a) - a))\n\n    print(ans)\n\ndef debug(x, table):\n    for name, val in table.items():\n        if x is val:\n            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)\n            return None\n\nif __name__ == '__main__':\n    solve()"}
{"label": 12, "index": 1527, "code": "n = int(input())\nans = []\nif n == 1:\n    print(0)\n    quit()\nfor i in range(1, n):\n    ans.append(abs(i-(n//i))+(n%i))\nprint(min(ans))"}
{"label": 12, "index": 1528, "code": "n = int(raw_input())\nmin = abs(1 - n/1) + n%1\n\nfor i in range(2, n / 2 + 1):\n    if min > abs(i - n/i) + n%i:\n        min = abs(i - n/i) + n%i\nprint str(min)"}
{"label": 12, "index": 1529, "code": "n = int(input())\n\nminimum = n\n\nfor a in range(1,n+1):\n    global minumum\n    b = n // a\n    r = n - a * b\n    trynum = abs(a - b) + r\n    if trynum < minimum:\n        minimum = trynum\n    else:\n        pass\n\nprint(minimum)"}
{"label": 12, "index": 1530, "code": "n = int(input())\nminv = float('inf')\nfor w in range(1, n+1):\n    h = n // w\n    minv = min(minv, abs(w-h) + n - w*h)\nprint(minv)\n"}
{"label": 12, "index": 1531, "code": "import math\na = raw_input()\nb=int(math.sqrt(int(a)))\nc=[]\nfor i in range(b-25,b+25,1):\n    for j in range(b-25,b+25,1):\n        if i>int(a) or i<0 or j>int(a) or j<0 or i*j>int(a):\n            pass\n        else:\n            c.append (abs(i-j)+int(a)-(i*j))\nprint(min(c))"}
{"label": 12, "index": 1532, "code": "import numpy as np\nn = int(input())\nsqr_a = int(np.sqrt(n))\ncandidate_a = np.arange(1, sqr_a + 1)\ncandidate_b = n // candidate_a\ncandidate_pair = np.column_stack((candidate_a, candidate_b))\ncandidate_rest_tiles = n - np.prod(candidate_pair, axis=1)\ncandidate_dif_side = np.abs(candidate_pair[:,1] - candidate_pair[:,0])\ncandidate_weight = candidate_rest_tiles + candidate_dif_side\nprint(min(candidate_weight))"}
{"label": 12, "index": 1533, "code": "n = input()\na = 100000\nfor i in range(int(n**(0.5)), 0, -1):\n    for j in range(n//i, 0, -1):\n        r = abs(i-j)+(n-i*j)\n        if r < a:\n            a = r\nprint a\n"}
{"label": 12, "index": 1534, "code": "#main\nn = int(raw_input())\n\nans=100000\nfor h in range(1,n/2+2):\n    w = n/h\n    r = n%h\n    ans = min(ans,abs(w-h)+r)\n    #print h,w,r\n\nprint ans\n"}
{"label": 12, "index": 1535, "code": "import math\nn=int(input())\na=[1000000]*(n+1)\nfor i in range(1,int(math.sqrt(n))+1):\n    a[i]=abs(i-n//i)+n%i\nprint(min(a))\n"}
{"label": 12, "index": 1536, "code": "n = int(input())\nprint(min(abs(h - n // h) + n - h * (n // h) for h in range(1, n + 1)))"}
{"label": 12, "index": 1537, "code": "import sys\n\nn=int(sys.stdin.readline())\n\nm = 3*n\nm_i = None\nfor i in range(1, n+1):\n    a = n-((n/i)*i)\n    b = abs((n/i)-i)\n    s = a+b\n    if s < m:\n        m_i = i\n        m = s\nprint m\n"}
{"label": 12, "index": 1538, "code": "N=input()\nmi = 101010\n\nfor w in range(1,N+1):\n\th = N/w\n\tif h > 0:\n\t\tmi = min(mi, N-w*h + abs(w-h))\n\nprint mi\n"}
{"label": 12, "index": 1539, "code": "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sat Jun 18 21:18:01 2016\n\n@author: dotha\n\"\"\"\n\n\nn = int(input())\ni = 1\nwhile (n-i**2)>=0:\n    i+=1\ni-=1\ncost = n - i**2\n\nfor j in range(i):\n    cost = min(n % (i-j) + abs(n//(i-j)-i+j), cost)\n\nprint(cost)"}
{"label": 12, "index": 1540, "code": "n = int( input() )\n\nfor j in range(1,n+1):\n    a = int(n/j)\n    b = n%j\n    \n    if j == 1:\n        n_ans = abs(a-j) + b\n    else:\n        n_ans = min( n_ans,abs(a-j)+b )\n \nprint(n_ans)"}
{"label": 12, "index": 1541, "code": "import math\nN = int(input())\nmaxhigh = math.floor(math.sqrt(N))\nresult = []\nfor i in range(1,maxhigh + 1,1):\n      amari = N % i\n      abs_d = abs(N//i - i)\n      result.append(amari + abs_d)\nprint(min(result))\n"}
{"label": 12, "index": 1542, "code": "n = input()\n\nans = 1 << 30\nfor width in range(1, n + 1):\n    height = n / width\n    ans = min(ans, abs(width - height) + n - width * height)\n\nprint ans\n"}
{"label": 12, "index": 1543, "code": "import math\n\nn = int(raw_input())\nf = n;\n\nfor x in range(n, int(math.sqrt(n)) - 1,-1):\n    for y in range(1, int(math.sqrt(n)) + 1,1):\n        if x*y > n:\n            break\n        else:\n            f = min(f, x - y + n - x*y)\n            \nprint f\n"}
{"label": 12, "index": 1544, "code": "n=int(input())\nprint(min(abs(n//w-w)+n%(n//w*w)for w in range(1,n+1)))"}
{"label": 12, "index": 1545, "code": "num = int(input())\n\ndif_min_rest = num\n\nif num == 1:\n  dif_min_rest = 0\nelse:\n  for x in range(1,int(num/2)+1):\n    y = int((num-(num % x))/x)\n    dif = abs(y - x)+abs((num-(y*x)))\n    #print(dif)\n    if dif_min_rest > dif:\n      dif_min_rest = dif\n\nprint(dif_min_rest)"}
{"label": 12, "index": 1546, "code": "print (lambda n: min(abs(x - (n//x)) + (n - x*(n//x)) for x in range(1, int(n**(1/2.0))+1)))(input())"}
{"label": 12, "index": 1547, "code": "import math\nn=input()\nans=float('inf')\nfor i in xrange(1,int(math.sqrt(n))+1):\n    for j in xrange(int(math.sqrt(n)),n+1):\n        if i*j>n:break\n        ans=min(abs(i-j)+n-i*j,ans)\nprint(ans)"}
{"label": 12, "index": 1548, "code": "import math\n\na = int(raw_input())\nm = a\nfor i in range(1, int(math.sqrt(a)) + 1):\n    m = min(m, int((a / i) - i + (a % i)))\nprint(m)\n"}
{"label": 12, "index": 1549, "code": "# -*- coding: utf-8 -*-\nn = input()\nans = 99999999\n\nfor x in range(1,int(n**0.5)+1):\n    y = n/x\n    ans = min(ans,n-x*y+abs(x-y))\nprint(ans)"}
{"label": 12, "index": 1550, "code": "n = int(raw_input())\nans = n-1\nv = 2\nwhile v*v <= n:\n\th = n / v\n\tans = min(ans,h-v+n-v*h)\n\tv += 1\nprint ans"}
{"label": 12, "index": 1551, "code": "n = int(raw_input())\nx = 1\nwhile (x+1)**2 <= n:\n    x += 1\nnum = n\n\nwhile x>=1:\n    y = n/x\n    z = n%x\n    if num > y-x+z:\n        num = (y-x+z)\n\n    x -=1\nprint str(num)\n"}
{"label": 12, "index": 1552, "code": "from collections import defaultdict\n\n\ndef main():\n    n = int(input())\n    ans = 10 ** 10\n    for y in range(1, n + 1):\n        for x in range(1, n // y + 1):\n            if y * x <= n:\n                ans = min(ans, abs(y - x) + n - (y * x))\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 12, "index": 1553, "code": "n = int(input())\nhold = n\n\nfor h in range(1, n + 1):\n    w = n // h\n    hold = min(hold, abs(n - h * w) + abs(h - w))\n\nprint(hold)\n"}
{"label": 12, "index": 1554, "code": "n = int(input())\na = []\n\nfor h in range(1, n+1):\n\tfor w in range(1, int(n/h)+1):\n\t\ta.append(abs(h - w) + n - h*w)\na.sort()\nprint(a[0])\n"}
{"label": 12, "index": 1555, "code": "\nn = int(input())\n\ndef f(a):\n\tb = n//a\n\treturn abs(a-b)+n-a*b\n\nprint(min([f(i) for i in range(1,max(int(n/2),2))]))"}
{"label": 12, "index": 1556, "code": "import math\n\nn = int(raw_input())\n\nprint min([((n / x) - x) + (n % x) for x in range(1, int(math.sqrt(n))+1)])\n"}
{"label": 12, "index": 1557, "code": "import math\nn = int(input())\n\nresult = n\n\nfor i in range(1, math.ceil(n / 2) + 1):\n    for j in range(1, math.ceil(n / i) + 1):\n        if i * j <= n:\n            result = min(n - (i * j) + abs(i - j), result)\n\nprint(result)\n"}
{"label": 12, "index": 1558, "code": "import math\n\nn = int(input())\n\nans = 999999999999999\n\nfor h in range(1, math.floor(math.sqrt(n))+1):\n    w = n // h\n    rest = n - (h * w)\n    \n    if ans > (abs(w-h)+rest):\n        ans = (abs(w-h)+rest)\n        \nprint(ans)"}
{"label": 12, "index": 1559, "code": "import math\n\ndef judge(n):\n    m = int(math.sqrt(n))\n    tmp = 1000000\n    for i in range(1, m+1):\n        p = i * i\n        q = n - p\n        r = q / i\n        s = q % i\n        if r + s < tmp:\n            tmp = r + s\n    return tmp\n\ndef main():\n    n = int(raw_input())\n    print(judge(n))\n\nmain()"}
{"label": 13, "index": 1560, "code": "print(input()[int(input())-1])"}
{"label": 13, "index": 1561, "code": "s = input()\ni = int(input())\nprint(s[i-1])"}
{"label": 13, "index": 1562, "code": "print(input()[int(input())-1])"}
{"label": 13, "index": 1563, "code": "s=raw_input()\ni=int(raw_input())\nprint s[i-1]"}
{"label": 13, "index": 1564, "code": "# coding: utf-8;\n\ndef main():\n    s = input()\n    i = int(input())\n    print(s[i - 1])\n    \nif __name__ == '__main__':\n    main()\n"}
{"label": 13, "index": 1565, "code": "s = input()\ni = int(input())\nprint(s[i-1])"}
{"label": 13, "index": 1566, "code": "print raw_input()[input()-1]"}
{"label": 13, "index": 1567, "code": "print raw_input()[input() - 1]\n"}
{"label": 13, "index": 1568, "code": "s= raw_input()\ni = input()\nprint s[i-1]"}
{"label": 13, "index": 1569, "code": "s=str(input())\nn=int(input())\nprint(s[n-1])"}
{"label": 13, "index": 1570, "code": "print(input()[int(input()) - 1])\n"}
{"label": 13, "index": 1571, "code": "def ri(): return int(input())\ndef rli(): return list(map(int, input().split()))\ndef rls(): return list(input())\ndef pli(a): return \"\".join(list(map(str, a)))\n\ns = rls()\ni = ri()\nprint(s[i-1])"}
{"label": 13, "index": 1572, "code": "a = raw_input()\nn = int(raw_input())\n\nprint a[n-1]\n"}
{"label": 13, "index": 1573, "code": "print(input()[int(input())-1])"}
{"label": 13, "index": 1574, "code": "S = raw_input()\ni = input()\n\nprint S[i-1]\n"}
{"label": 13, "index": 1575, "code": "s = input()\ni = int(input())\n\nprint(s[i-1])"}
{"label": 13, "index": 1576, "code": "print raw_input()[input() - 1]\n"}
{"label": 13, "index": 1577, "code": "str = input()\ni = int(input())\n\nprint(str[i-1])\n"}
{"label": 13, "index": 1578, "code": "S=str(input())\nN=int(input())\nprint(S[N-1])"}
{"label": 13, "index": 1579, "code": "#coding: utf-8\n#ABC041A\n\ns=raw_input()\nn=int(raw_input())\n\nprint s[n-1]\n"}
{"label": 13, "index": 1580, "code": "strings = raw_input()\nnum = int(raw_input()) - 1\nprint strings[num]\n"}
{"label": 13, "index": 1581, "code": "a = input()\nb = int(input())\nprint(a[b - 1])"}
{"label": 13, "index": 1582, "code": "# -*- coding: utf-8 -*-\n\n\ndef main():\n    s = input()\n    i = int(input())\n    i = i if i else 0\n    return s[i - 1]\n\nprint(main())"}
{"label": 13, "index": 1583, "code": "S=[]\nS=raw_input()\ni=int(input())\nprint (S[i-1])"}
{"label": 13, "index": 1584, "code": "print(input()[int(input())-1])"}
{"label": 13, "index": 1585, "code": "s = input()\ni = int(input())\nprint(s[i - 1])\n\n"}
{"label": 13, "index": 1586, "code": "s=raw_input()\nprint s[input()-1]"}
{"label": 13, "index": 1587, "code": "# -*- coding: utf-8 -*-\ns=raw_input()\ni=input()\nprint s[i-1]"}
{"label": 13, "index": 1588, "code": "s = input()\nli = list(s)\ni = int(input())\nans = li[i-1]\nprint(ans)\n"}
{"label": 13, "index": 1589, "code": "# -*- coding: utf-8 -*-\n# problem A\n\ns = str(input())\ni = int(input())\n\nprint(s[i-1])"}
{"label": 13, "index": 1590, "code": "s = input()\nprint(s[int(input())-1])\n"}
{"label": 13, "index": 1591, "code": "if __name__ == '__main__':\n    s = raw_input()\n    i = input()\n    \n    print s[i-1]"}
{"label": 13, "index": 1592, "code": "s=raw_input()\ni=input()\nprint(s[i-1])"}
{"label": 13, "index": 1593, "code": "s = input()\ni = int(input())\n\nprint(s[i-1])\n"}
{"label": 13, "index": 1594, "code": "s = input()\ni = int(input()) - 1\nprint(s[i])\n"}
{"label": 13, "index": 1595, "code": "print(input()[int(input())-1])"}
{"label": 13, "index": 1596, "code": "s = input()\ni = int(input())\nl = list(s)\nprint(l[i-1])"}
{"label": 13, "index": 1597, "code": "print raw_input()[input()-1]"}
{"label": 13, "index": 1598, "code": "s = input()\ni = int(input())\nprint( s[i-1])\n"}
{"label": 13, "index": 1599, "code": "# -*- coding: utf-8 -*-\n# \u6574\u6570\u306e\u5165\u529b\nin_str = input()\nat = int(input())\nprint(in_str[at-1])"}
{"label": 13, "index": 1600, "code": "print(input()[int(input())-1])"}
{"label": 13, "index": 1601, "code": "s = input()\ni = int(input())\nprint(s[i-1])\n"}
{"label": 13, "index": 1602, "code": "s=input()\ni=int(input())\nprint(s[i-1])\n"}
{"label": 13, "index": 1603, "code": "a=str(input())\nb=int(input())\nprint(a[b-1])"}
{"label": 13, "index": 1604, "code": "s = raw_input()\nindex = int(raw_input())\n\nprint s[index - 1]"}
{"label": 13, "index": 1605, "code": "s = input()\ni = int(input())\nprint(s[i-1:i])"}
{"label": 13, "index": 1606, "code": "# -*- coding:utf-8 -*-\ns, i = (input(), int(input()))\nprint(s[i-1])"}
{"label": 13, "index": 1607, "code": "S = input()\nN = int(input())\n\nprint(S[N-1])"}
{"label": 13, "index": 1608, "code": "s = raw_input()\ni = int(raw_input())\nprint s[i-1]\n"}
{"label": 13, "index": 1609, "code": "str = input()\ni = int(input())\n\nprint(str[i-1])"}
{"label": 13, "index": 1610, "code": "s = raw_input()\ni = int(raw_input())\nprint s[i-1]\n"}
{"label": 13, "index": 1611, "code": "print raw_input()[input()-1]"}
{"label": 13, "index": 1612, "code": "s, l = input(), int(input())-1\nprint(s[l])"}
{"label": 13, "index": 1613, "code": "s = input()\ni = int(input())\nprint( s[i-1] )\n"}
{"label": 13, "index": 1614, "code": "s = raw_input()\ni = int(raw_input())\nfor a in range(len(s)):\n    if a == i-1:\n        print s[a]"}
{"label": 13, "index": 1615, "code": "s=str(input())\ni=int(input())\ne=i-1\nprint(s[e])"}
{"label": 13, "index": 1616, "code": "s = input()\ni = input()\nprint(s[int(i)-1])"}
{"label": 13, "index": 1617, "code": "s = str(input())\ni = int(input())\n\nprint(s[i-1])"}
{"label": 13, "index": 1618, "code": "import sys\n\n#\u5165\u529b\ns = str(input())\n#\u5224\u5b9a\nif s.isalpha() and s.islower() and len(s) <= 100 and len(s) > 0:\n    i = int(input())\n    if i<1 or i>len(s):\n        sys.exit()\n    else:\n        print(s[i-1])\nelse:\n    sys.exit()"}
{"label": 13, "index": 1619, "code": "s=str(input())\nn=int(input())\nprint(s[n-1])\n"}
{"label": 13, "index": 1620, "code": "s = input()\nprint( s[int(input()) - 1] )"}
{"label": 13, "index": 1621, "code": "s = input()\ni = int(input())\n\nprint(s[i-1])"}
{"label": 13, "index": 1622, "code": "code = input()\nnum = int(input())\nprint(code[num-1])"}
{"label": 13, "index": 1623, "code": "s = input()\ni = int(input())\nprint(s[i-1])\n"}
{"label": 13, "index": 1624, "code": "a = raw_input()\nb = int(raw_input())\nprint a[b-1],"}
{"label": 13, "index": 1625, "code": "print raw_input()[input()-1]"}
{"label": 13, "index": 1626, "code": "# coding:utf-8\n\ndef main():\n    s = raw_input()\n    i = int(raw_input())\n    print s[i-1]\n\nif __name__=='__main__':\n    main()\n\n"}
{"label": 13, "index": 1627, "code": "def read():\n    return int(input())\n\ndef reads(sep=None):\n    return list(map(int, input().split(sep)))\n\ndef main():\n    s = input()\n    i = read()\n    print(s[i-1])\n\nmain()\n"}
{"label": 13, "index": 1628, "code": "s = input()\ni = int(input())\nprint(s[i - 1])"}
{"label": 13, "index": 1629, "code": "s = input()\nn = int(input())\nprint(s[n-1])\n"}
{"label": 13, "index": 1630, "code": "s = raw_input()\ni = input()\nprint s[i-1]\n"}
{"label": 13, "index": 1631, "code": "def main():\n    s = input()\n    i = int(input())\n    print(s[i - 1])\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 13, "index": 1632, "code": "s = input()\ni = int(input())\nprint(s[i-1])"}
{"label": 13, "index": 1633, "code": "s = raw_input()\ni = int(raw_input())\nprint s[i-1]\n"}
{"label": 13, "index": 1634, "code": "s=input()\ni=int(input())\nprint(s[i-1])"}
{"label": 13, "index": 1635, "code": "s = raw_input()\ni = int(raw_input())\nprint s[i-1]"}
{"label": 13, "index": 1636, "code": "s = input()\ni = int(input())\nprint (s[i-1])\n"}
{"label": 13, "index": 1637, "code": "print(input()[int(input())-1])"}
{"label": 13, "index": 1638, "code": "s = input()\ni = int(input())\nprint(s[i-1])"}
{"label": 13, "index": 1639, "code": "s = raw_input()\ni = int(raw_input())\n\nprint(s[i-1])"}
{"label": 13, "index": 1640, "code": "S = input()\na = int(input())\na -= 1\nprint (S[a])\n"}
{"label": 13, "index": 1641, "code": "a = raw_input()\nb = input()\nprint a[b-1]"}
{"label": 13, "index": 1642, "code": "s = raw_input()\ni = input()\n\nprint s[i - 1]"}
{"label": 13, "index": 1643, "code": "s = list(raw_input())\ni = int(raw_input())\n\nprint s[i-1]"}
{"label": 13, "index": 1644, "code": "def solve():\n    s = input()\n    i = int(input())\n    print(s[i - 1])\n\n\ndef main():\n    solve()\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 13, "index": 1645, "code": "print raw_input()[input()-1]"}
{"label": 13, "index": 1646, "code": "S = raw_input()\nN = input()\nprint S[N-1]"}
{"label": 13, "index": 1647, "code": "s = input()\ni = int(input())\nprint(s[i - 1])"}
{"label": 13, "index": 1648, "code": "s = input()\ni = int(input())\nprint(s[i-1])"}
{"label": 13, "index": 1649, "code": "s = input()\ni = int(input())\n\nprint(s[i-1])"}
{"label": 13, "index": 1650, "code": "s = raw_input()\ni = int(raw_input())\n\nprint s[i-1]\n"}
{"label": 13, "index": 1651, "code": "print raw_input()[int(raw_input()) - 1]"}
{"label": 13, "index": 1652, "code": "s = input()\ni = int(input())\n\nprint(s[int(i-1)])"}
{"label": 13, "index": 1653, "code": "s = input()\ni = int(input())\n\nprint(s[i-1])\n"}
{"label": 13, "index": 1654, "code": "s = str(input())\ni = int(input())\n\nprint(s[i - 1])"}
{"label": 13, "index": 1655, "code": "print(input()[int(input())-1])"}
{"label": 13, "index": 1656, "code": "import sys\n\ndef debug(x, table):\n    for name, val in table.items():\n        if x is val:\n            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)\n            return None\n\ndef solve():\n    s = input()\n    i = int(input()) - 1\n\n    print(s[i])\n\nif __name__ == '__main__':\n    solve()"}
{"label": 13, "index": 1657, "code": "#coding: utf-8\n \ns = raw_input()\ni = int(raw_input())\nprint s[i-1] "}
{"label": 13, "index": 1658, "code": "# -*- coding: utf-8 -*-\n\n# \u6587\u5b57\u5217\u306e\u5165\u529b\ns = input()\n# \u6574\u6570\u306e\u5165\u529b\ni = int(input())\n\n\n# \u51fa\u529b\nprint( s[i-1] )\n\n"}
{"label": 13, "index": 1659, "code": "s = input()\ni = int(input())\nprint(s[i-1])\n"}
{"label": 13, "index": 1660, "code": "print raw_input()[int(raw_input())-1]"}
{"label": 13, "index": 1661, "code": "# -*- coding:utf-8 -*-\n\ns = raw_input()\ni = int(raw_input())\n\nprint s[i-1]\n"}
{"label": 13, "index": 1662, "code": "#\u5165\u529b\ns = input()\ni = int(input())\n\n#\u51fa\u529b\nprint(s[i-1])"}
{"label": 13, "index": 1663, "code": "s = input()\nc = int(input())\n\nprint(s[c - 1])\n"}
{"label": 13, "index": 1664, "code": "s = list(input().strip())\ni = int(input().strip())\nprint(s[i-1])"}
{"label": 13, "index": 1665, "code": "s = raw_input()\ni = input()\nprint s[i - 1]\n"}
{"label": 13, "index": 1666, "code": "s = list(input())\ni = int(input())\n\nprint(s[i-1])\n"}
{"label": 13, "index": 1667, "code": "s=raw_input()\ni=int(raw_input())\nprint s[i-1]"}
{"label": 13, "index": 1668, "code": "s=list(input())\ni=int(input())\n\nprint(s[i-1])\n"}
{"label": 13, "index": 1669, "code": "def main():\n    s = input()\n    i = int(input())\n    print(s[i-1])\nif __name__ == \"__main__\":\n    main()"}
{"label": 13, "index": 1670, "code": "print(input()[int(input())-1])"}
{"label": 13, "index": 1671, "code": "print raw_input()[input()-1]\n"}
{"label": 13, "index": 1672, "code": "s = input()\ni = int(input())\n\nprint(s[i - 1])"}
{"label": 13, "index": 1673, "code": "s = input()\ni = int(input())\nprint(s[i - 1])"}
{"label": 13, "index": 1674, "code": "s = raw_input()\ni = int(raw_input())\n\nprint s[i-1]"}
{"label": 13, "index": 1675, "code": "s = str(input())\ni = int(input())\n\nprint(s[i-1])\n"}
{"label": 13, "index": 1676, "code": "s = input()\nn = int(input())\nprint(s[n-1])"}
{"label": 13, "index": 1677, "code": "s = raw_input()\nt = int(raw_input())\n\nprint s[t-1]"}
{"label": 13, "index": 1678, "code": "s = input()\ni = int(input())\nprint(s[i-1])\n"}
{"label": 13, "index": 1679, "code": "#!/usr/bin/env python\n#-*-coding:utf-8-*-\n\ns = raw_input()\ni = int(raw_input())\na = s[i-1]\nprint a"}
{"label": 13, "index": 1680, "code": "s = raw_input()\ni = int(raw_input())\n\nfor index, c in enumerate(s):\n    if index+1 == i:\n        print c\n        break\n"}
{"label": 13, "index": 1681, "code": "# -*- coding: utf-8 -*-\nstr = input()\ni = int(input()) - 1\nprint(str[i])"}
{"label": 13, "index": 1682, "code": "s = input()\ni = int(input())\nprint(s[i - 1])"}
{"label": 13, "index": 1683, "code": "s = str(input())\ni = int(input())\nprint(s[i-1])\n"}
{"label": 13, "index": 1684, "code": "a=list(raw_input())\nb=int(input())\nprint(a[b-1])"}
{"label": 13, "index": 1685, "code": "s = str(input())\ni = int(input())\nprint(s[i-1])"}
{"label": 13, "index": 1686, "code": "s=input()\nprint(s[int(input())-1])"}
{"label": 13, "index": 1687, "code": "s = raw_input()\nprint s[input()-1]"}
{"label": 13, "index": 1688, "code": "s = raw_input()\ni = input()\nprint s[i-1]"}
{"label": 13, "index": 1689, "code": "print(input()[int(input())-1])"}
{"label": 14, "index": 1690, "code": "a, b, c = map(int,input().split())\nprint(a*b*c%(10**9+7))"}
{"label": 14, "index": 1691, "code": "import operator\ntaiseki = reduce(operator.mul, map(long, raw_input().strip().split()))\ndiv = 10**9 + 7\n\namari = taiseki - (div * (taiseki / div))\nprint(amari)\n"}
{"label": 14, "index": 1692, "code": "mod = 10**9+7\na, b, c = map(lambda x: int(x) % mod, input().split(' '))\n\nprint((a * b * c) % mod)"}
{"label": 14, "index": 1693, "code": "A, B, C = map(int, input().split())\nprint((A * B * C) % (10 ** 9 + 7))\n"}
{"label": 14, "index": 1694, "code": "il = [int(i) for i in input().split(\" \")]\nprint(il[0]*il[1]*il[2]%(10**9+7))"}
{"label": 14, "index": 1695, "code": "s = input()\n\nxs = s.split()\n\nys = list(map(lambda x: int(x), xs))\n\nX = ys[0] * ys[1] * ys[2]\n\nprint(X % (10**9+7))"}
{"label": 14, "index": 1696, "code": "raw = input()\na,b,c = raw.split(' ')\na,b,c = int(a), int(b), int(c)\nV = a*b*c\nconst = 10**9+7\nprint (V%const)\n"}
{"label": 14, "index": 1697, "code": "a,b,c=map(int,input().split())\nprint((a*b*c)%(10**9+7))\n"}
{"label": 14, "index": 1698, "code": "import sys\na = map(int, raw_input().split())\nbox=a[0]*a[1]*a[2]\nmod=pow(10,9)+7\nans=box%mod\nprint(ans)"}
{"label": 14, "index": 1699, "code": "from collections import defaultdict\n\n\ndef main():\n    A, B, C = map(int, input().split())\n    MOD = 10 ** 9 + 7\n    print((A * B % MOD) * C % MOD)\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 14, "index": 1700, "code": "A, B, C = map(int, input().split())\nX = A * B * C\nprint(X % 1000000007)"}
{"label": 14, "index": 1701, "code": "a = input().split(\" \")\nprint(int(a[0])*int(a[1])*int(a[2])%1000000007)"}
{"label": 14, "index": 1702, "code": "print reduce(lambda x, y : y%(10**9 + 7) * x,map(int,raw_input().split())) %(10**9 + 7)"}
{"label": 14, "index": 1703, "code": "s = input().split()\na = int(s[0])\nb = int(s[1])\nc = int(s[2])\nprint((a*b*c)%(1000000007))"}
{"label": 14, "index": 1704, "code": "# coding: utf-8\n\na, b, c = map(int, input().split())\nx = a * b * c\ndiv = 10 ** 9 + 7\n\nprint(x % div)"}
{"label": 14, "index": 1705, "code": "a,b,c = map(int,input().split())\nmod = 10**9+7;\nprint(((a*b%mod))*c%mod)"}
{"label": 14, "index": 1706, "code": "a = raw_input().split(\" \")\nx = 1\nfor i in a:\n    x = x * int(i)\nprint x%(pow(10,9)+7)\n"}
{"label": 14, "index": 1707, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time\n\nsys.setrecursionlimit(10**7)\n\na,b,c = list(map(int, input().split()))\n\nprint((a*b*c) % (10**9+7))\n\n\n"}
{"label": 14, "index": 1708, "code": "a, b, c = map(int, raw_input().split())\nans = a * b * c\nprint ans % int(1e+9 + 7)\n"}
{"label": 14, "index": 1709, "code": "mod=1000000007\n#mod=1777777777\npi=3.141592653589\nIS=float('inf')\nxy=[(1,0),(-1,0),(0,1),(0,-1)]\nbs=[(-1,-1),(-1,1),(1,1),(1,-1)]\ndef gcd(a,b): return a if b==0 else gcd(b,a%b)\ndef lcm(a,b): return a*b/gcd(a,b)\ndef euclid_dis(x1,y1,x2,y2): return ((x1-x2)**2+(y1-y2)**2)**0.5\ndef choco(xa,ya,xb,yb,xc,yc,xd,yd): return 1 if abs((yb-ya)*(yd-yc)+(xb-xa)*(xd-xc))<1.e-10 else 0\n\n#n=int(raw_input())\na,b,c=map(int,raw_input().split())\nprint a*b*c%mod"}
{"label": 14, "index": 1710, "code": "MOD = 10 ** 9 + 7\n\n\ndef solve():\n    a, b, c = map(int, input().split())\n    print(((a % MOD) * (b % MOD) * (c % MOD)) % MOD)\n\n\ndef main():\n    solve()\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 14, "index": 1711, "code": "a, b, c = map(int, raw_input().split())\nprint (a*b*c) % (10**9+7)\n"}
{"label": 14, "index": 1712, "code": "X,Y,Z=map(int,raw_input().strip().split(\" \"))\nprint X*Y*Z%1000000007\n"}
{"label": 14, "index": 1713, "code": "a, b, c = map(int, input().split())\nprint((a * b * c) % (10**9+7))"}
{"label": 14, "index": 1714, "code": "def main():\n  A, B, C = map(int, raw_input().split())\n  print (A*B*C)%1000000007\n  \nif __name__ == \"__main__\":\n  main()\n  \n"}
{"label": 14, "index": 1715, "code": "print reduce(lambda a,b:a*b, map(int, raw_input().split()))%(10**9+7)"}
{"label": 14, "index": 1716, "code": "l = input().split();\nA = int(l[0])\nB = int(l[1])\nC = int(l[2])\nn = 10**9 + 7\n \nrslt = ((A % n) * (B % n) * (C % n)) % n\nprint(rslt)"}
{"label": 14, "index": 1717, "code": "inp = input().split()\nA = int(inp[0])\nB = int(inp[1])\nC = int(inp[2])\n\nout = A*B*C%(10**9+7)\n\nprint(out)\n"}
{"label": 14, "index": 1718, "code": "import sys\nstdin = sys.stdin\ndef na(): return map(int, stdin.readline().split())\ndef ns(): return stdin.readline().strip()\n\na,b,c = na()\nprint(a*b*c%1000000007)"}
{"label": 14, "index": 1719, "code": "a, b, c = map(int, input().split())\nprint(a * b * c % (10 **9 + 7))"}
{"label": 14, "index": 1720, "code": "A, B, C = map(int, input().split())\nprint((A*B*C)%((10**9)+7))\n\n"}
{"label": 14, "index": 1721, "code": "a, b, c = map(int, input(). split())\n\nprint(((a * c) * b) % ((10 ** 9) + 7))\n"}
{"label": 14, "index": 1722, "code": "a,b,c = map(int, raw_input().split())\nx = a*b*c\nprint x % (10**9 + 7)"}
{"label": 14, "index": 1723, "code": "#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n\na, b, c = map(int, input().split())\nprint((a * b * c) % (10**9 + 7))\n"}
{"label": 14, "index": 1724, "code": "import re\n\nclass IO_for_Contest(object):\n    @staticmethod\n    def my_input():\n        #return raw_input()\n        return input()\n\n    @staticmethod\n    def read_from_input():\n        #TODO: impl this for each problem\n        pass\n\n    @staticmethod\n    def read_line():\n        return IO_for_Contest.my_input().strip()\n\n    @staticmethod\n    def read_int():\n        return int(IO_for_Contest.my_input().strip())\n\n    @staticmethod\n    def read_n_int(n):\n        return list(map( \\\n                int, \\\n                re.split('\\s+', IO_for_Contest.my_input().strip())))[ : n]\n\ndef solve():\n    mode = 10 ** 9 + 7\n    a, b, c = IO_for_Contest.read_n_int(3)\n    print((a * b * c) % mode)\n\nif __name__ == '__main__':\n    solve()"}
{"label": 14, "index": 1725, "code": "A, B, C = list(map(int, input().split()))\nprint((A * B * C) % 1000000007)"}
{"label": 14, "index": 1726, "code": "A, B, C = map(int, raw_input().split())\n\nprint (A*B*C) % (10**9 + 7)"}
{"label": 14, "index": 1727, "code": "from functools import reduce\nprint(reduce(lambda x, y: x * y, map(int, input().split())) % 1000000007)\n"}
{"label": 14, "index": 1728, "code": "#coding: utf-8\n#ABC041B\n\na,b,c=map(int,raw_input().split())\nM=10**9+7\n\nres=(a%M)*(b%M)*(c%M)%M\nprint res\n"}
{"label": 14, "index": 1729, "code": "A,B,C=map(int,input().split())\nm = 7+10**9\nprint((((A*B)%m)*C)%m)"}
{"label": 14, "index": 1730, "code": "import sys\n\n#\u76f4\u65b9\u4f53\u306e\u5e45\u3001\u9ad8\u3055\u3001\u5965\u884c\u304d\u306e\u5165\u529b\nl = list(map(int, input().split()))\nA = l[0]\nB = l[1]\nC = l[2]\n\nif A >= 1 and A <= 10**9 and B >= 1 and B <= 10**9 and C >= 1 and C <= 10**9 and isinstance(A, int) and isinstance(B, int) and isinstance(C, int):\n    r = (A%(10**9+7))*(B%(10**9+7))*(C%(10**9+7))%(10**9+7)\n    print(r)\nelse:\n        sys.exit()\n"}
{"label": 14, "index": 1731, "code": "a,b,c=raw_input().split()\nprint int(a)*int(b)*int(c)%(10**9+7)"}
{"label": 14, "index": 1732, "code": "a,b,c = map(int,raw_input().split())\nprint (a*b*c) % (10**9+7)\n"}
{"label": 14, "index": 1733, "code": "A,B,C=[int(i) for i in input().strip().split()]\nprint(A*B*C%(10**9+7))\n"}
{"label": 14, "index": 1734, "code": "abc = list(map(int, input().split()))\nx = abc[0] * abc[1] * abc[2]\nprint(x % (pow(10,9)+7))"}
{"label": 14, "index": 1735, "code": "a, b, c = map(int,input().split())\nmo = 1000000007\nprint((a*b*c) % mo)\n"}
{"label": 14, "index": 1736, "code": "a, b, c = [int(i) for i in input().split()]\nx = 1000000000+7\nprint((a*b*c)%x)"}
{"label": 14, "index": 1737, "code": "def read():\n    return int(input())\n\ndef reads(sep=None):\n    return list(map(int, input().split(sep)))\n\ndef main():\n    a, b, c = reads()\n    print((a*b*c) % (10**9+7))\n\nmain()\n"}
{"label": 14, "index": 1738, "code": "mod = 1000000007\nA, B, C = map(int, raw_input().split())\nprint A * B * C % mod"}
{"label": 14, "index": 1739, "code": "a, b, c = map(int, input().split())\nv = a * b * c\nprint(v % (1000000000 + 7))\n"}
{"label": 14, "index": 1740, "code": "a,b,c=map(int,input().split())\nmod=1000000007\nprint((a*b*c)%mod)\n"}
{"label": 14, "index": 1741, "code": "# -*- coding: utf-8 -*-\n# problem B\n\na, b, c = map(int, input().split())\n\nv = a * b * c\nremainder = v % (10 ** 9 + 7)\nprint(remainder)"}
{"label": 14, "index": 1742, "code": "A, B, C = map(int,input().split())\nX=A*B*C\n\nY=X%(10**9+7)\n\nprint(Y)"}
{"label": 14, "index": 1743, "code": "import sys\n\n#\u76f4\u65b9\u4f53\u306e\u5e45\u3001\u9ad8\u3055\u3001\u5965\u884c\u304d\u306e\u5165\u529b\nA, B, C = list(map(int, input().split()))\n\n\nif A >= 1 and A <= 10**9 and B >= 1 and B <= 10**9 and C >= 1 and C <= 10**9 and isinstance(A, int) and isinstance(B, int) and isinstance(C, int):\n    r = (A%(10**9+7))*(B%(10**9+7))*(C%(10**9+7))%(10**9+7)\n    print(r)\nelse:\n    print('Enter correctly')\n    sys.exit()\n"}
{"label": 14, "index": 1744, "code": "# coding: utf-8\nimport sys\n\na,b,c = map(int, input().split(' ') )\ns = (a*b*c) % 1000000007\nprint(s)"}
{"label": 14, "index": 1745, "code": "a, b, c = map(int, input().split())\nx = (a * b * c) % 1000000007 \nprint(x)\n"}
{"label": 14, "index": 1746, "code": "a,b,c = map(int, raw_input().split())\nprint(a*b*c % 1000000007)"}
{"label": 14, "index": 1747, "code": "a,b,c = map(int, raw_input().split())\nprint (a*b*c) % (10**9 + 7)\n"}
{"label": 14, "index": 1748, "code": "A, B, C = map(int, input().split())\nans = A*B*C%(10**9+7)\nprint(ans)\n"}
{"label": 14, "index": 1749, "code": "a,b,c = map(int,raw_input().split())\nprint a*b*c%(10**9+7)"}
{"label": 14, "index": 1750, "code": "# coding:utf-8\nimport math\nA,B,C = map(int, raw_input().split())\nprint A*B*C%(10**9+7)"}
{"label": 14, "index": 1751, "code": "a, b, c = map(int, input().split())\nmod = 1000000007\nx = (a*b) % mod\nx = (x*c) % mod\nprint(x)"}
{"label": 14, "index": 1752, "code": "def main():\n    A, B, C = map(int, input().split())\n\n    ans = A * B * C % 1000000007\n    print(ans)\n\nmain()\n"}
{"label": 14, "index": 1753, "code": "a,b,c = map(int, raw_input().split())\nprint(a*b*c%(pow(10,9)+7))"}
{"label": 14, "index": 1754, "code": "def solve():\n    A, B, C = map(int, input().split())\n    print((A * B * C) % 1000000007)\n\n\nif __name__ == '__main__':\n    solve()\n"}
{"label": 14, "index": 1755, "code": "print reduce(lambda x,y:x*y, map(int, raw_input().split()), 1) % (10**9+7)"}
{"label": 14, "index": 1756, "code": "a,b,c=map(int,input().split())\nmod=10**9+7\nprint((a*b*c)%mod)\n"}
{"label": 14, "index": 1757, "code": "# -*- coding: utf-8 -*-\na,b,c = map(int,raw_input().split())\nmod = 10**9+7\nprint((a*b*c)%mod)"}
{"label": 14, "index": 1758, "code": "a,b,c=list(map(int, input().split()))\nX=10**9+7\nprint(a*b*c%X)"}
{"label": 14, "index": 1759, "code": "s = raw_input().rstrip().split(' ')\na = int(s[0])\nb = int(s[1])\nc = int(s[2])\nprint (a*b*c) % 1000000007"}
{"label": 14, "index": 1760, "code": "A, B, C = map(int, raw_input().split())\nX = A*B*C\nprint X % (1000000000+7)"}
{"label": 14, "index": 1761, "code": "mod = 1000000007\nA, B, C = map(int, input().split())\nprint(A * B * C % mod)"}
{"label": 14, "index": 1762, "code": "A, B, C = map(int, input().split())\nQ = 1000000007\nprint( (A*B*C)%Q)"}
{"label": 14, "index": 1763, "code": "\nmod = 10**9 + 7\na,b,c = map(int, raw_input().split())\nV = a * b * c\nprint (V % mod)\n"}
{"label": 14, "index": 1764, "code": "a,b,c=map(int,raw_input().split())\nprint a*b*c%(10**9+7)"}
{"label": 14, "index": 1765, "code": "a,b,c=map(int,input().split())\nprint((a*b*c)%(10**9+7))"}
{"label": 14, "index": 1766, "code": "# -*- coding:utf-8 -*-\nA, B, C = map(int, input().split())\nprint((A*B*C)%((10**9)+7))"}
{"label": 14, "index": 1767, "code": "A,B,C=map(int,input().split())\nprint((A*B*C)%(10**9+7))"}
{"label": 14, "index": 1768, "code": "a,b,c = list(map(int,input().split(\" \")))\n\ndef calc(a,b,c):\n    return (a * b * c)%(10**9 + 7)\n\nprint(calc(a,b,c))\n"}
{"label": 14, "index": 1769, "code": "a, b, c = map(int, input().split())\nprint((((a*b)%(10**9+7))*c)%(10**9+7))"}
{"label": 14, "index": 1770, "code": "A, B, C = map(int, raw_input().split())\nprint (A*B*C) % (10**9 + 7)"}
{"label": 14, "index": 1771, "code": "a,b,c=map(int,input().split())\nans=a*b*c %(10**9+7)\nprint(ans)"}
{"label": 14, "index": 1772, "code": "mod=10**9+7\na,b,c=map(int,raw_input().split())\nV=a*b*c\nprint(V%mod)"}
{"label": 14, "index": 1773, "code": "a,b,c = map(int, input().split())\nmod = 1000000007\nprint((a%mod)*(b%mod)*(c%mod)%mod)"}
{"label": 14, "index": 1774, "code": "a, b, c = map(int, input().split())\n\ne = 10**9+7\n\nd = a*b%e\nprint(d*c%e)"}
{"label": 14, "index": 1775, "code": "a,b,c = [int(s) for s in input().split()]\nx = a*b*c\nx %= 1000000007\nprint(x)"}
{"label": 14, "index": 1776, "code": "inpt = map(long, raw_input().split())\n\nx = inpt[0] * inpt[1] * inpt[2]\n\nprint x % 1000000007L"}
{"label": 14, "index": 1777, "code": "A, B, C = map(int, raw_input().split())\nX = A * B * C % (int)(1e9 + 7)\nprint X"}
{"label": 14, "index": 1778, "code": "A, B, C = map(int, input().split())\nprint(int(A * B * C % int(1e9 + 7)))\n"}
{"label": 14, "index": 1779, "code": "A, B, C = [int(_) for _ in input().split()]\nmod = 10 ** 9 + 7\n\nprint(A*B*C % mod)"}
{"label": 14, "index": 1780, "code": "l = input().split()\na = int(l[0])\nb = int(l[1])\nc = int(l[2])\nprint(a*b*c%1000000007) "}
{"label": 14, "index": 1781, "code": "s = input().split()\nA = int(s[0])\nB = int(s[1])\nC = int(s[2])\nprint((A*B*C)%(1000000007))\n"}
{"label": 14, "index": 1782, "code": "A,B,C = map(int, input().split())\nprint(A*B*C%(10**9+7))"}
{"label": 14, "index": 1783, "code": "A, B, C = map(int, input().split())\nprint(A * B % (10 ** 9 + 7) * C % (10 ** 9 + 7))\n"}
{"label": 14, "index": 1784, "code": "A, B, C = map(int, raw_input().split())\n\nprint A * B * C % (10**9+7)\n"}
{"label": 14, "index": 1785, "code": "def main():\n    a, b, c = map(int, input().split())\n    print((a * b * c) % (10 ** 9 + 7))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 14, "index": 1786, "code": "a, b, c = map(int, raw_input().split())\nprint (a * b * c) % (10**9 + 7)\n"}
{"label": 14, "index": 1787, "code": "A,B,C = map(int,input().split())\n\ntmp = A*B*C\nanswer = int(tmp % (10**9 + 7))\n\nprint(answer)\n\n"}
{"label": 14, "index": 1788, "code": "A, B, C = map(int, raw_input().split())\n\nD = 10**9+7\n\nS = (A * B) % D\nV = (S * C) % D\n\nprint V\n"}
{"label": 14, "index": 1789, "code": "if __name__ == '__main__':\n    s = map(int, raw_input().split() )\n    area = s[0] * s[1] * s[2]\n    area %= (10**9 + 7)\n    print area\n"}
{"label": 14, "index": 1790, "code": "# -*- coding: utf-8 -*-\n\na, b, c = map(int, input().split())\n\n\nprint((a * b * c) % (10 ** 9 + 7))\n"}
{"label": 14, "index": 1791, "code": "m=int(1e9+7)\na,b,c=map(int,input().split())\nprint(a*b*c%m)\n"}
{"label": 14, "index": 1792, "code": "A, B, C = map(int, input().split())\nprint((A*B*C)%(10**9+7))\n"}
{"label": 14, "index": 1793, "code": "A, B, C = [int(x) for x in input().split()]\nans = divmod(A * B * C, pow(10,9) + 7)\nprint(ans[1])"}
{"label": 14, "index": 1794, "code": "l=input().split()\nll=[int(i) for i in  l]\nx=ll[0]*ll[1]*ll[2]\nprint(int((x%(10**9+7))))"}
{"label": 14, "index": 1795, "code": "import sys\n\ndef debug(x, table):\n    for name, val in table.items():\n        if x is val:\n            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)\n            return None\n\ndef solve():\n    a, b, c = map(int, input().split())\n    MOD = 10**9 + 7\n    ans = (a * b * c) % MOD\n    print(ans)\n\nif __name__ == '__main__':\n    solve()"}
{"label": 14, "index": 1796, "code": "import sys\n\n#\u76f4\u65b9\u4f53\u306e\u5e45\u3001\u9ad8\u3055\u3001\u5965\u884c\u304d\u306e\u5165\u529b\nA, B, C = list(map(int, input().split()))\n\n\nif A >= 1 and A <= 10**9 and B >= 1 and B <= 10**9 and C >= 1 and C <= 10**9 and isinstance(A, int) and isinstance(B, int) and isinstance(C, int):\n    r = (A%(10**9+7))*(B%(10**9+7))*(C%(10**9+7))%(10**9+7)\n    print(r)\nelse:\n        sys.exit()\n"}
{"label": 14, "index": 1797, "code": "MOD = 10**9 + 7\n\nA, B, C = list(map(int, input().split(\" \")))\n\n# A = A % MOD\n# B = B % MOD\n# C = C % MOD\n\nx = (A * B * C) % MOD\n\nprint (x)"}
{"label": 14, "index": 1798, "code": "from functools import reduce\nprint(reduce(lambda a, b:a*b, [int(i) for i in input().split()]) % (10 ** 9 + 7))"}
{"label": 14, "index": 1799, "code": "A, B, C = map(int, raw_input().split())\nprint (A * B * C) % (10 ** 9 + 7)\n"}
{"label": 14, "index": 1800, "code": "# -*- coding: utf-8 -*-\n\n# \u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u306e\u6574\u6570\u306e\u5165\u529b\na, b, c = map(int, input().split())\n\na = a % (10**9+7)\nb = b % (10**9+7)\nc = c % (10**9+7)\nX=a*b*c% (10**9+7)\n# \u51fa\u529b\nprint( X )\n\n"}
{"label": 14, "index": 1801, "code": "n = input().rstrip().split(' ')\nvolume = int(n[0]) * int(n[1]) * int(n[2])\nleft = volume % 1000000007\nprint(left)"}
{"label": 14, "index": 1802, "code": "a,b,c = map(int, raw_input().split())\nprint (a*b*c) % 1000000007\n"}
{"label": 14, "index": 1803, "code": "# coding: utf-8\n\nA, B, C = map(int,input().split())\n\nX = A*B*C\n\nprint(X%(10**9+7))"}
{"label": 14, "index": 1804, "code": "# -*- coding:utf-8 -*-\n\nA, B, C = map(int, raw_input().split())\n\nX = A*B*C\n\ndevision_value = 10**9 + 7\n\nprint X % devision_value\n"}
{"label": 14, "index": 1805, "code": "a, b, c = map(int, input().split())\nprint ((a * b * c) % (10**9 + 7))\n"}
{"label": 14, "index": 1806, "code": "s=input().split()\nr=1\nfor i in s:\n r*=int(i)\nx=10**9+7\nprint(r%x)"}
{"label": 14, "index": 1807, "code": "#!/usr/bin/env python\n#coding:UTF-8\nA,B,C = map(int,raw_input().split())\nX = A * B * C\n \ncalc = 10 ** 9 + 7\n \nprint X % calc\n"}
{"label": 14, "index": 1808, "code": "catch = input()\ncatch = catch.split(\" \")\nprint( ( int(catch[0]) * int(catch[1]) * int(catch[2]) ) % 1000000007 )\n"}
{"label": 14, "index": 1809, "code": "a, b, c = map(int, input().split(' '))\nprint((a * b * c) % (1000000000 + 7))"}
{"label": 14, "index": 1810, "code": "a,b,c=map(int,input().split())\nmod = 10**9+7\nprint(a*b*c%mod)\n"}
{"label": 14, "index": 1811, "code": "r = 10 ** 9 + 7\nuser = input().split()\nA, B, C = int(user[0]), int(user[1]), int(user[2])\nX = A * B * C\nprint(int(X % r))\n"}
{"label": 14, "index": 1812, "code": "# coding: utf-8\n\na, b, c = map(int, input().split())\nd = 10**9+7\nprint((a*b*c)%d)"}
{"label": 14, "index": 1813, "code": "a, b, c = map(int, raw_input().split())\nans = a*b*c\nif ans>=(10**9+7):\n    print ans % (10**9+7)\nelse:\n    print ans"}
{"label": 14, "index": 1814, "code": "A, B, C = map(int, input().split())\nX = A * B * C\nDIV = 10 ** 9 + 7\nprint(X % DIV)\n"}
{"label": 14, "index": 1815, "code": "# -*- coding: utf-8 -*-\nA,B,C = map(int,raw_input().split())\nX = A*B*C\nprint X % (10**9 + 7)"}
{"label": 14, "index": 1816, "code": "if __name__ == '__main__':\n    A,B,C, = map(int, raw_input().split())\n    print (A * B * C) % (10 ** 9 + 7)"}
{"label": 14, "index": 1817, "code": "a,b,c = map(int,input().split())\nMOD = int(1e9+7)\nprint( a*b*c%MOD )\n"}
{"label": 14, "index": 1818, "code": "a, b, c = [int(x) for x in input().split()]\nprint((a * b * c) % (10 ** 9 + 7))"}
{"label": 14, "index": 1819, "code": "a=input().split(\" \")\nb=1\nfor n in range(3):\n b=b*int(a[n])\n\nif b < 1000000000:\n print(b)\nelse:\n print(b%1000000007)"}
{"label": 15, "index": 1820, "code": "# -*- coding: utf-8 -*-\nN = input()\nA = map(int,raw_input().split())\n\nalist=[]\nfor i,a in enumerate(A):\n    alist.append((a,i))\ns = sorted(alist,reverse=True)\nfor i in s:\n    print int(i[1])+1"}
{"label": 15, "index": 1821, "code": "n = int(raw_input())\ntall = []\ntall = raw_input().split()\nstudent = [[i, int(tall[i])] for i in range(n)]\n\nstudent.sort(key = lambda student: student[1], reverse = True)\n\nfor i in range(n-1):\n    print student[i][0] + 1\n\nprint student[n-1][0] + 1,"}
{"label": 15, "index": 1822, "code": "# -*- coding: utf-8 -*-\nimport numpy as np\nn = input()\na = np.zeros(n)\na = map(int,raw_input().split())\nb = np.argsort(a)[::-1]\nfor i in b:\n    print(i+1)"}
{"label": 15, "index": 1823, "code": "# coding: utf-8\nfrom operator import itemgetter\n\nn = int(input())\nmember = list(map(int, input().split()))\nindices = range(n)\nlis = list(zip(member, indices))\nsortedlis = sorted(lis, key=itemgetter(0, 1), reverse=True)\nfor m in sortedlis:\n    print(m[1]+1)\n\n"}
{"label": 15, "index": 1824, "code": "from collections import defaultdict\n\n\ndef main():\n    n = int(input())\n    l = [(x, i) for i, x in enumerate(list(map(int, input().split())), start=1)]\n    print(*[x_i[1] for x_i in sorted(l, reverse=True)], sep=\"\\n\")\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 15, "index": 1825, "code": "#coding: utf-8\n\nN = int(raw_input())\n\nheights = map(int, raw_input().split())\n\ndata = {}\nfor i in range(len(heights)):\n    data.update({i+1 :heights[i]})\n\nfor k in sorted(data.items(), key = lambda x:x[1], reverse = True):\n    print k[0]\n"}
{"label": 15, "index": 1826, "code": "N = int(input())\nM = list(map(int, input().split()))\nDL = sorted({M[x-1] : x for x in range(1, N + 1)}.items())\nfor i in range(N) : print(DL[N-i-1][1])"}
{"label": 15, "index": 1827, "code": "n = int(raw_input())\naa = map(int, raw_input().split())\na = []\n\nfor i in range(len(aa)):\n    a.append([-aa[i],i+1])\n\na.sort(key=lambda x: x[0])\nfor i in range(n):\n    print a[i][1]\n"}
{"label": 15, "index": 1828, "code": "x = input()\ny = input()\n\nN = int(x)\nAs = list(map(lambda i: int(i), y.split()))\nzippedAs = list(zip(As, list(range(1,N+1))))\n\nsortedAs = sorted(zippedAs, reverse=True)\n\nfor kv in sortedAs:\n    a,b = kv\n    print(b)"}
{"label": 15, "index": 1829, "code": "N = input()\na = map(int,raw_input().split())\nfor r in sorted([(i, h) for (i, h) in zip(range(N),a)], key=lambda x: x[1], reverse=True):\n\tprint r[0]+1\n"}
{"label": 15, "index": 1830, "code": "\nN=input()\nA=map(int,raw_input().strip().split(\" \"))\nB = []\nfor i in range(N):\n\tB.append((A[i],i+1))\n\nB.sort()\nB.reverse()\nfor b in B:\n\tprint b[1]\n"}
{"label": 15, "index": 1831, "code": "N = int(input())\nd = {i+1: int(n) for i, n in enumerate(input().split(' '))}\nfor i,n in sorted(d.items(), key=lambda x: x[1], reverse=True):\n    print(i)"}
{"label": 15, "index": 1832, "code": "import bisect\nimport sys\nimport math\nimport itertools\nsys.setrecursionlimit(10000)\n\nINF = float('inf')\n\n# input macro\ndef i():\n    return int(raw_input())\ndef ii():\n    return map(int,raw_input().split(\" \"))\ndef s():\n    return raw_input()\ndef ss():\n    return raw_input().split(\" \")\ndef slist():\n    return list(raw_input())\n#\n\ndef join(s):\n    return ''.join(s)\n\n#iterate macro\ndef piter(n,m):\n    return itertools.permutations(n,m)\ndef citer(n,m):\n    return itertools.combinations(n,m)\n\n#modulo macro\ndef modc(a,b,m):\n    c = 1\n    for i in xrange(b):\n        c = c * (a - i) % m\n        c = c * modinv(i + 1,m) % m\n    return c\n \ndef gcd(a, b):\n    (x, lastx) = (0, 1)\n    (y, lasty) = (1, 0)\n    while b != 0:\n        q = a // b\n        (a, b) = (b, a % b)\n        (x, lastx) = (lastx - q * x, x)\n        (y, lasty) = (lasty - q * y, y)\n    return (lastx, lasty, a)\n \ndef modinv(a, m):\n    (inv, q, gcd_val) = gcd(a, m)\n    return inv % m\n\n#bisect macro\ndef index(a, x):\n    #Locate the leftmost value exactly equal to x\n    i = bisect_left(a, x)\n    if i != len(a) and a[i] == x:\n        return i\n    return -1\n\n#memoize macro\ndef memoize(f):\n    cache = {}\n    def helper(*args):\n        if args not in cache:\n            cache[(args)] = f(*args)\n        return cache[args]\n    return helper\n\n@memoize\ndef nck(a,b,m):\n    b = min([a-b,b])\n    if (b>a or b<0 or a<0):\n        return 0\n    elif a == 0:\n        return 1\n    return (nck(a-1,b-1,m)+nck(a-1,b,m)) % m\n\n###########\n\nn = i()\na = ii()\nb = [i+1 for i in xrange(n)]\nc = [(a[i],i+1) for i in xrange(n)]\ns = sorted(c, reverse=True)\n\nfor i in xrange(n):\n    print s[i][1]\n"}
{"label": 15, "index": 1833, "code": "input()\nA = {}\nfor i, h in enumerate(map(int, input().split())):\n    A[i] = h\nfor k, v in reversed(sorted(A.items(), key=lambda x: x[1])):\n    print(k + 1)\n"}
{"label": 15, "index": 1834, "code": "N = int(raw_input())\na_n = map(int, raw_input().split())\n\nd = {height: i for i, height in enumerate(a_n)}\n\nfor k in sorted(d.keys(), reverse=True):\n    print d[k]+1\n"}
{"label": 15, "index": 1835, "code": "N = int(input())\na = list(map(int, input().split()))\nl = []\nfor i in range(N):\n\tl.append((a[i], i+1))\nl.sort(reverse=True)\nfor sincho, num in l:\n\tprint(num)"}
{"label": 15, "index": 1836, "code": "N = int(input())\na = map(int, input().split())\nd = {}\nfor i, c in enumerate(a):\n    d[i+1] = c\nd=sorted(d.items(), key = lambda x:x[1],reverse = True)\nfor i in range(N):\n    print(d[i][0])\n"}
{"label": 15, "index": 1837, "code": "from __future__ import print_function\nn = int(raw_input())\nls = map(int, raw_input().split())\n[print(k+1) for k,v in reversed(sorted(enumerate(ls),key=lambda x: x[1]))]"}
{"label": 15, "index": 1838, "code": "n = input()\na = map(int, raw_input().split())\na = zip(* sorted(zip(a,range(1,n+1)),reverse = True))[1]\nfor i in a:\n    print i"}
{"label": 15, "index": 1839, "code": "n=int(raw_input())\na=map(int,raw_input().split())\nl={i:a+1 for a,i in enumerate(a)}\na.sort()\nfor i in a[::-1]:\n    print l[i]"}
{"label": 15, "index": 1840, "code": "N = int(input())\na = list(map(int,input().split()))\n\nA = [[j,i+1] for i,j in enumerate(a)]\nA.sort(reverse=True)\n\nfor k in range(N):\n  print(A[k][1])\n"}
{"label": 15, "index": 1841, "code": "n = int(input())\n*a, = map(int, input().split())\ns = sorted(range(n), key=lambda x: a[x], reverse=True)\nfor x in s:\n    print(x + 1)"}
{"label": 15, "index": 1842, "code": "N=int(input())\na=list(map(int,input().split()))\ndata=list(zip(range(1,N+1),a))\ndata.sort(key= lambda x: x[1],reverse=True)\nfor i,j in data:\n    print(i)"}
{"label": 15, "index": 1843, "code": "import sys\nfrom operator import itemgetter\n\ndef debug(x, table):\n    for name, val in table.items():\n        if x is val:\n            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)\n            return None\n\ndef solve():\n    N = int(input())\n    A = [(i + 1, int(x)) for i, x in enumerate(input().split())]\n    A.sort(key=itemgetter(1), reverse=True)\n\n    for i in range(N):\n        print(A[i][0])\n\nif __name__ == '__main__':\n    solve()"}
{"label": 15, "index": 1844, "code": "N = int(raw_input())\ns = raw_input().rstrip().split(' ')\na = [(0,0)]*N\nfor i in xrange(N):\n    a[i] = (int(s[i]),i)\na.sort(reverse=True)\nfor i in xrange(N):\n    print(a[i][1]+1)\n"}
{"label": 15, "index": 1845, "code": "num = int(raw_input())\narraynum = map(int, raw_input().split())\nmapnum =  {}\nfor i in range(num):\n     mapnum[arraynum[i]] = i + 1\narraynum = sorted(arraynum, reverse = True)\nfor num in arraynum:\n     print str(mapnum[num]) + '\\n'"}
{"label": 15, "index": 1846, "code": "n=int(input())\na=[]\na=input().split()\nal=[int(i) for i in a]\ndic={}\nm=1\ns=0\nwhile s<n:\n    dic[al[s]]=m\n    s=s+1\n    m=m+1\n\ndi=sorted(dic,reverse=True)\nm=0\nwhile m<n:\n    print(dic.get(di[m]))\n    m=m+1"}
{"label": 15, "index": 1847, "code": "# -*- coding: utf-8 -*-\nimport sys,copy,math,heapq,itertools as it,fractions,re,bisect,collections as coll\n\nN = int(raw_input())\na = map(int, raw_input().split())\na = sorted([[ai, i] for i, ai in enumerate(a)], reverse = True, key = lambda x: x[0])\nfor ai, i in a:\n    print i + 1\n"}
{"label": 15, "index": 1848, "code": "N = int(input())\nhs = list(map(int, input().split()))\nhis = [(h, i) for i, h in enumerate(hs, 1)]\nhis.sort(reverse=True)\nfor h, i in his:\n    print(i)"}
{"label": 15, "index": 1849, "code": "input()\nfor v,i in reversed(sorted([(v,i+1)for i,v in enumerate(map(int,input().split()))])):\n    print(i)"}
{"label": 15, "index": 1850, "code": "n = int(input())\n\na = list(map(int, input().split()))\nprint(\"\\n\".join(list(map(str, [i[1] for i in sorted(zip(a, range(1, n + 1)), reverse=True, key=lambda x: x[0])]))))"}
{"label": 15, "index": 1851, "code": "N = int(input())\nA = []\n\nfor i, a in enumerate(map(int, input().split())):\n    A.append((a, i + 1))\n\nA = sorted(A, reverse=True)\n\nfor _, i in A:\n    print(i)\n"}
{"label": 15, "index": 1852, "code": "\nimport numpy as np\n\nN = int(input())\na = np.array([int(_) for _ in input().split()])\n\nfor i in np.argsort(-a):\n    print(i+1)\n"}
{"label": 15, "index": 1853, "code": "n = int(input())\na = [int(i) for i in input().split() ]\nb = [(a[i],i+1) for i in range(n)]\nb.sort(key=lambda x:x[0],reverse=True)\nfor i in range(n):\n    print(b[i][1])"}
{"label": 15, "index": 1854, "code": "N = int(input())\na = list(map(int, input().split()))\na_t = []\nfor i in range(len(a)):\n    a_t.append((i+1, a[i]))\n\nfor i, j in sorted(a_t, key=lambda x:x[1], reverse=True):\n    print(i)\n"}
{"label": 15, "index": 1855, "code": "N = int(raw_input())\na = map(int, raw_input().split())\nl = {}\nfor i in xrange(1, N+1):\n  l[a[i-1]] = i\nd = sorted(l, reverse=True)\nfor k in d:\n  print l[k]"}
{"label": 15, "index": 1856, "code": "def main():\n    N = input()\n    ls = input().split()\n    dic = {}\n    for i,a in enumerate(ls):\n        dic[i+1] = int(a)\n\n    for k, v in sorted(dic.items(), key=lambda x:x[1], reverse=True):\n        print(k)\n\n\nif __name__ == \"__main__\":\n    main()\n"}
{"label": 15, "index": 1857, "code": "input()\nlist(map(lambda x: print(x[0]+1), sorted(enumerate(map(int, input().split())), key = lambda x: -x[1])))"}
{"label": 15, "index": 1858, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport operator\n\ndef main():\n    N = int(input())\n    A = tuple(map(int, input().split()))\n\n    for i,_ in sorted(enumerate(A), key=operator.itemgetter(1), reverse=True):\n        print(i+1) # 1-based\n\nif __name__ == \"__main__\": main()\n"}
{"label": 15, "index": 1859, "code": "import re\n\nclass IO_for_Contest(object):\n    @staticmethod\n    def my_input():\n        #return raw_input()\n        return input()\n\n    @staticmethod\n    def read_from_input():\n        #TODO: impl this for each problem\n        pass\n\n    @staticmethod\n    def read_line():\n        return IO_for_Contest.my_input().strip()\n\n    @staticmethod\n    def read_int():\n        return int(IO_for_Contest.my_input().strip())\n\n    @staticmethod\n    def read_n_int(n):\n        return list(map( \\\n                int, \\\n                re.split('\\s+', IO_for_Contest.my_input().strip())))[ : n]\n\ndef solve():\n    n = IO_for_Contest.read_int()\n    a = IO_for_Contest.read_n_int(n)\n    d = {}\n    for i, x in enumerate(a):\n        d[i + 1] = x\n    for k, v in sorted(d.items(), key = lambda x: x[1] * -1):\n        print(k)\n\nif __name__ == '__main__':\n    solve()"}
{"label": 15, "index": 1860, "code": "N = int(raw_input())\na = sorted([(i+1, v) for i, v in enumerate(map(int, raw_input().split()))], key=lambda x:-x[1])\nfor i, v in a:\n    print i"}
{"label": 15, "index": 1861, "code": "# coding:utf-8\nimport math\nN = int(input())\nlist = [0]*N\nlist = map(int, raw_input().split())\ndic = {}\nfor i in xrange(len(list)):\n\tdic[i+1] = list[i]\nfor k,v in sorted(dic.items(), key=lambda x: x[1], reverse = True):\n\tprint k"}
{"label": 15, "index": 1862, "code": "# -*- coding:utf-8 -*-\n\ndef returnDict(a):\n    index = 1\n    d = {}\n    for i in a:\n        d[i] = index\n        index = index + 1\n    return d\n\n\nif __name__ == \"__main__\":\n    N = int(raw_input())\n    a = map(int, raw_input().split())\n    d = returnDict(a)\n\n    for k in sorted(d.keys(), reverse=True):\n        print d[k]\n"}
{"label": 15, "index": 1863, "code": "n = int(input())\na = map(int,input().split(' '))\na = [[a_,i+1] for i,a_ in enumerate(a)]\na = sorted(a,reverse=True)\nfor a_ in a:\n    print(a_[1])"}
{"label": 15, "index": 1864, "code": "import numpy as np\nraw_input()\na = np.array( map(int,raw_input().split() ) ,np.int)\nret = np.argsort(a)[::-1]\nfor i in ret:\n\tprint i+1\n"}
{"label": 15, "index": 1865, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nN = int(input())\nAs = list(map(int, input().split()))\n\narr = []\nfor i, a in enumerate(As):\n    arr.append((a, i+1))\narr.sort()\narr.reverse()\nfor a in arr:\n    print(a[1])\n"}
{"label": 15, "index": 1866, "code": "\nn = int(raw_input())\na = map(int, raw_input().split())\n\nres = []\n\nfor i in xrange(n):\n    res.append([a[i], i])\n\nres.sort()\nres.reverse()\n\nfor i in xrange(n):\n    print(res[i][1] + 1)\n"}
{"label": 15, "index": 1867, "code": "N = int(input())\na = list(map(int, input().split()))\n\nfor i in range(N):\n\ta[i] = (a[i], i+1)\n\na.sort()\nfor i in range(1, N+1):\n\tprint(a[-i][1])"}
{"label": 15, "index": 1868, "code": "N = int(input())\nraw = input()\na = raw.split(' ')\na_list = [[i+1,int(a_i)] for i,a_i in enumerate(a)]\nsorted_a = sorted(a_list, key=lambda x: x[1],reverse=True)\nres = ' '.join(str(a[0]) for a in sorted_a)\nprint (res)\n"}
{"label": 15, "index": 1869, "code": "N=int(input().strip())\na = [(i[1]+1,int(i[0])) for i in zip(input().strip().split(),range(N))]\na.sort(key=lambda i:i[1],reverse=True)\nfor i in a:\n    print(i[0])"}
{"label": 15, "index": 1870, "code": "n = input()\nA = map(int, raw_input().split())\nprint \"\\n\".join(map(str, sorted(range(1, n+1), key=lambda x: A[x-1], reverse=True)))\n"}
{"label": 15, "index": 1871, "code": "from collections import defaultdict\n\n\ndef main():\n    n = input()\n    a = [(int(a), i) for i, a in enumerate(input().split(), start=1)]\n    print(*[i for a, i in sorted(a, reverse=True)], sep=\"\\n\")\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 15, "index": 1872, "code": "N = int(input())\nA = list(map(int, input().split()))\nans = []\nfor idx,x in enumerate(A):\n    ans.append([-x, idx])\nans.sort()\nfor x in ans:\n    print (x[1] + 1)\n    \n"}
{"label": 15, "index": 1873, "code": "input()\nfor _,i in sorted(map(lambda t: (-int(t[1]),t[0]), enumerate(input().split()))): print(i+1)"}
{"label": 15, "index": 1874, "code": "import numpy as np\n_, hs = input(), np.array(input().split(), dtype=np.int)\nres = np.argsort(hs)[::-1]\nprint(\"\\n\".join((res+1).astype(str)))"}
{"label": 15, "index": 1875, "code": "n = int(input())\na = list(map(int, input().split()))\na_dir = {}\nfor i in range(len(a)):\n    a_dir[i+1] = a[i]\nfor k, v in sorted(a_dir.items(), key=lambda x:x[1], reverse=True):\n    print(k)"}
{"label": 15, "index": 1876, "code": "N = int(input())\na = list(map(int, input().split()))\nnum = list(range(1, N+1))\n\n\ndef merge(A, left, mid, right, num):\n    n1 = mid - left\n    n2 = right - mid\n    L = []\n    L_num = []\n    R = []\n    R_num = []\n    for i in range(n1):\n        L.append(A[left + i])\n        L_num.append(num[left + i])\n    for i in range(n2):\n        R.append(A[mid + i])\n        R_num.append(num[mid + i])\n    L.append(0)\n    R.append(0)\n    i = 0\n    j = 0\n    for k in range(left, right):\n        if(L[i] <= R[j]):\n            A[k] = R[j]\n\n            num[k] = R_num[j]\n            j += 1\n        else:\n            A[k] = L[i]\n            num[k] = L_num[i]\n            i += 1\n\n\ndef mergeSort(A, left, right, num):\n    if(left+1 < right):\n        mid = (left+right) // 2\n        mergeSort(A, left, mid, num)\n        mergeSort(A, mid, right, num)\n        merge(A, left, mid, right, num)\n\n\nmergeSort(a, 0, N, num)\nfor i in range(N):\n    print(num[i])\n\n"}
{"label": 15, "index": 1877, "code": "from collections import OrderedDict\n \nn = int(input())\nheight = [int(x) for x in input().split()]\nstudent = {}\nfor i in range(n):\n    student[i + 1] = height[i]\n    \nstudent = OrderedDict(sorted(student.items(), key=lambda x:x[1], reverse=True))\n \nfor i in student.keys():\n    print(i)"}
{"label": 15, "index": 1878, "code": "N = int(input())\na = [int(x) for x in input().split()]\nheight_index = []\nfor i in range(len(a)):\n    height_index.append((i+1, a[i]))\nheight_index.sort(key= lambda tup: tup[1])\nheight_index = reversed(height_index)\nfor s in height_index:\n    print(s[0])\n"}
{"label": 15, "index": 1879, "code": "N = int(input())\nA = list(map(int, input().split()))\nD = [(k + 1, v) for k, v in enumerate(A)]\nD.sort(key=lambda p: -p[1])\nfor d in D:\n    print(d[0])\n"}
{"label": 15, "index": 1880, "code": "N = int(input())\na = map(int, input().split())\nb = sorted(zip(a, range(1, N+1)), reverse=True)\nprint('\\n'.join(map(str, map(lambda i: b[i][1], range(N)))))\n"}
{"label": 15, "index": 1881, "code": "import sys\nstdin = sys.stdin\ndef na(): return map(int, stdin.readline().split())\ndef ns(): return stdin.readline().strip()\n\nn = int(stdin.readline())\na = list(na())\nai = []\nfor i, _ in enumerate(a): ai.append((_,i))\nai.sort()\n\nfor i in range(n-1,-1,-1):\n    print(ai[i][1]+1)\n"}
{"label": 15, "index": 1882, "code": "N = int(raw_input())\na = map(int, raw_input().split())\nb = sorted((e,i) for i,e in enumerate(a))\nc = sorted(b,reverse = True)\nfor x in c:\n    print x[1] + 1"}
{"label": 15, "index": 1883, "code": "N=int(input())\na=list(map(int, input().split()))\n\narr = [[0 for i in range(3)] for j in range(N)]\n\n#print(a)\nfor i in range(N):\n arr[i][0]=a[i]\n arr[i][1]=i+1\n\narr.sort(key=lambda x:x[0])\nfor i in range(N):\n arr[i][2]=N-i\narr.sort(key=lambda x:x[2])\n#print(arr)\nfor i in range(N):\n print(arr[i][1])"}
{"label": 15, "index": 1884, "code": "N = int(input())\nl = list(map(int, input().split()))\n\nd = dict(zip(map(str ,range(1,len(l)+1)), l))\nc = sorted(d.items(), key=lambda x:x[1],reverse=True)\ng = 0\nfor g in range(N):\n    print(c[g][0])\n"}
{"label": 15, "index": 1885, "code": "n=input()\na=map(int,raw_input().split())\nfor l in reversed(sorted([(a[i],i+1) for i in xrange(n)])): print l[1]"}
{"label": 15, "index": 1886, "code": "input()\na = input()\na = a.split(\" \")\n\nmember = []\n\nfor i in range(len(a)):\n    lis = [i+1, int(a[i])]\n    member.append(lis)\n\nmember = sorted(member, key=lambda x:x[1], reverse=True)\n\nfor i in range(len(member)):\n    print(member[i][0])\n"}
{"label": 15, "index": 1887, "code": "N = input()\nA = map(int, raw_input().split())\nfor i, t in sorted(zip(range(N), A), key=lambda a:a[1])[::-1]:\n    print i+1"}
{"label": 15, "index": 1888, "code": "N =int(input())\nX=reversed(sorted([(tall,i+1)  for i,tall in enumerate(map(int,input().split()))]))\n\nfor i,j in X:\n    print(j)\n\n"}
{"label": 15, "index": 1889, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time\n\nsys.setrecursionlimit(10**7)\n\nn = int(input())\na = list(map(int, input().split()))\nb = [[a[i],i] for i in range(n)]\n\nb.sort()\nb.reverse()\n\nfor i,j in b:\n    print(j+1)\n\n\n"}
{"label": 15, "index": 1890, "code": "raw_input()\na = [(i+1, ele) for i, ele in enumerate(map(int, raw_input().split()))]\n\nfor ele in sorted(a, key=lambda x: x[1], reverse=True):\n    print ele[0]\n"}
{"label": 15, "index": 1891, "code": "x=input()\nl=map(int, raw_input().split())\nr=[]\nfor i,x in enumerate(l):\n    r.append((x,i))\nfor i in reversed(sorted(r)):\n    print i[1]+1\n"}
{"label": 15, "index": 1892, "code": "class Height:\n\tdef returnSorted(self,n,a):\n\t\ta=[i[0] for i in sorted(enumerate(a),key=lambda x:x[1],reverse=True)]\n\t\tfor i in range(len(a)): print a[i]+1\n\nif __name__ == \"__main__\":\n\tn=raw_input()\n\ta=[int(i) for i in raw_input().split()]\n\th=Height()\n\th.returnSorted(n,a)"}
{"label": 15, "index": 1893, "code": "import numpy as np\n\nmen = int(input())\nseq_h = np.array(list(map(int, input().split())))\nseq_n = np.array(range(men))\nseq_hn = np.dstack((seq_h, seq_n))[0]\n\nfor x in np.argsort(seq_h)[::-1]:\n    print(x+1)"}
{"label": 15, "index": 1894, "code": "input()\na = [(-int(x), i + 1) for (i, x) in enumerate(input().split())]\na.sort()\nfor _, i in a:\n    print(i)\n"}
{"label": 15, "index": 1895, "code": "import numpy as np\n\nN = int(raw_input())\nmembers = np.array(map(int, raw_input().split()))\n\nans = np.argsort(members)[-1::-1] + 1\n\nfor i in range(len(ans)):\n    print(ans[i])"}
{"label": 15, "index": 1896, "code": "n=int(input())\na=map(int,input().split())\nfor x,i in sorted([(x,i) for i,x in enumerate(a)], reverse=True):\n    print(i+1)\n"}
{"label": 15, "index": 1897, "code": "N = int(input())\nd = {}\na = list(map(int, input().split()))\n\nfor i in range(N):\n    d[a[i]] = i\n\nfor k in sorted(d.keys(), reverse=True):\n    print(d[k] + 1)"}
{"label": 15, "index": 1898, "code": "n = input()\na = map(int,raw_input().split())\nd = {}\nfor (i,j) in zip(range(1,n+1),a):\n    d.update({j:i})\na.sort()\na.reverse()\nfor i in a:\n    print d[i]"}
{"label": 15, "index": 1899, "code": "n = int(input())\na = list(map(int,input().split()))\nb = [ (-a[i],i+1) for i in range(n) ]\nb.sort()\nfor i in b:\n    print(i[1])\n"}
{"label": 15, "index": 1900, "code": "input()\nfor a,b in sorted([(int(b),a+1) for a,b in enumerate(input().split())],key=lambda x:x[0],reverse=True):print(b)"}
{"label": 15, "index": 1901, "code": "n = int(input())\nlist_in = list(map(int,input().split()))\n\n# 1 index\nlist_with_index = [(i+1,int(x)) for i,x in enumerate(list_in)]\nsorted_list_with_index =sorted(list_with_index, key=lambda x: x[1], reverse=True)\nfor i,x in sorted_list_with_index:\n    print(i)\n"}
{"label": 15, "index": 1902, "code": "import numpy as np\n\nn=int(input())\na=list(map(int,input().split()))\n\nx = np.argsort(a)\ny=x[-1::-1]\n# print(*y,sep='\\n')\nfor i in y:\n    print(i+1)"}
{"label": 15, "index": 1903, "code": "n=input()\na=map(int,raw_input().split())\nans=[]\nfor i in xrange(n):\n    ans.append([a[i],i])\nans.sort()\nans.reverse()\nfor i in xrange(n):\n    print(ans[i][1]+1)\n"}
{"label": 15, "index": 1904, "code": "N = int(raw_input())\nA = map(int, raw_input().split())\nX = [(i+1, a) for i, a in enumerate(A)]\nX.sort(key=lambda x: x[1], reverse=True)\nfor x in X:\n    print x[0]\n"}
{"label": 15, "index": 1905, "code": "n = int(raw_input())\nl = map(int, raw_input().split())\npls = zip(l, range(1,n+1))\npls.sort()\npls.reverse()\nfor _,i in pls:\n    print i\n"}
{"label": 15, "index": 1906, "code": "n=int(raw_input())\na=[int(i) for i in raw_input().split()]\nfor i in sorted(range(n),key=lambda x:a[x],reverse=True):\n    print(i+1)\n"}
{"label": 15, "index": 1907, "code": "# -*- coding: utf-8 -*-\n# \u6574\u6570\u306e\u5165\u529b\na = int(input())\n# \u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u306e\u6574\u6570\u306e\u5165\u529b\nb = input()\n\nelems=b.split(' ')\n# \u30ea\u30b9\u30c8\u4e26\u3073\u66ff\u3048\u3002\n\ndict={}\nelems2=[]\nfor  i in range(a):\n    dict[int(elems[i])]=i\n    elems2.append(int(elems[i]))\n    \n#print(elems2)\nelems2.sort()\nelems2.reverse()\n#print(elems2)\n# \u51fa\u529b\nfor item in elems2:\n     print(dict[item]+1)\n\n        \n\n\n\n"}
{"label": 15, "index": 1908, "code": "cnt = int(input())\n\nhuman = []\nhumanraw = input().split(' ')\nfor i in range(1, cnt + 1):\n    human.append([i, int(humanraw[i - 1])])\n\nhuman_sorted = sorted(human, key=lambda x: -x[1])\n\nfor i in range(cnt):\n    print(str(human_sorted[i][0]))\n"}
{"label": 15, "index": 1909, "code": "import sys\nfrom operator import itemgetter, attrgetter\na = []\nfor line in sys.stdin:\n    a.append(str(line))\nb=len(a)\nd=[]\nfor i in range(b):\n    c=map(long,a[i][:-1].split(\" \"))\n    d.append(c)\nkazu=d[0][0]\ndata=d[1]\nserial=range(1,long(kazu)+1,1)\nx=zip(serial,data)\ny=sorted(x,key=itemgetter(1),reverse=True)\nfor i in range(kazu):\n    print(y[i][0])\n"}
{"label": 15, "index": 1910, "code": "from operator import itemgetter\nnum = int(input())\nli = [(i,int(n)) for i,n in enumerate(input().split(\" \"))]\n \nli.sort(key=itemgetter(1))\nli.reverse()\n\nfor l in li:\n    print(l[0]+1)"}
{"label": 15, "index": 1911, "code": "n = int(input())\na = [int(x) for x in input().split()]\nls = zip(a, range(1, n + 1))\nls = sorted(ls, key = lambda x: x[0], reverse = True)\nfor _, i in ls:\n    print(i)\n"}
{"label": 15, "index": 1912, "code": "# coding: utf-8\n# Here your code !\ndef rotate_array(seq, n):\n    n = n % len(seq)\n    return seq[n:] + seq[:n]\nn=int(input())\na=list(map(int,input().split()))\na=zip(a,range(1,len(a)+1))\na=sorted(a,reverse=True)\nfor i in a:\n    print(rotate_array(i,1)[0])"}
{"label": 15, "index": 1913, "code": "n = input()\nheights = map(int, raw_input().split())\ndic = {i + 1: height for i, height in enumerate(heights)}\n\nfor k, v in sorted(dic.items(), key=lambda x: x[1], reverse=True):\n    print k"}
{"label": 15, "index": 1914, "code": "N = int(input())\nH = list(map(int, input().split()))\nL = []\n\nfor k in range(N):\n    L.append([H[k],k+1])\n\nfor p in reversed(sorted(L)):\n    print(p[1])"}
{"label": 15, "index": 1915, "code": "input()\nfor x,i in sorted([(-int(x), i + 1) for (i, x) in enumerate(input().split())]):\n    print(i)"}
{"label": 15, "index": 1916, "code": "N = int(input())\na = list(map(int, input().split(\" \")))\n\nb = [(a[i], i+1) for i in range(N)]\nb.sort(key=lambda x:x[0], reverse=True)\n\nfor i in range(N):\n    print(b[i][1])"}
{"label": 15, "index": 1917, "code": "N = input()\nheights = map(int, raw_input().split())\n\nheights_number = zip(heights, range(1, N+1))\n\nsrt_heights_number = sorted(heights_number, reverse=True)\n\nfor (h, n) in srt_heights_number:\n    print n\n"}
{"label": 15, "index": 1918, "code": "#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n\nN = input()\na = map(int, input().split())\na = sorted([(x,i+1) for i, x in enumerate(a)], key=lambda x: x[0], reverse=True)\nfor height, number in a:\n    print(number)\n"}
{"label": 15, "index": 1919, "code": "n = int(input())\nSSi = input().split()\nSi = list(map(lambda y: (y+1,int(SSi[y])), range(n)))\nSsorted = sorted(Si, key=lambda si: -si[1])\ns = \"\"\nfor si in Ssorted:\n\tprint(si[0])\n"}
{"label": 15, "index": 1920, "code": "from operator import itemgetter\nn=int(input())\na=[int(i) for i in input().split()]\nsum=[]\nfor i in range(n):\n    sum.append([i+1,a[i]])\nsum.sort(key=itemgetter(1))\nsum=sum[::-1]\nfor i in sum:\n    print(i[0])"}
{"label": 15, "index": 1921, "code": "import heapq\nn = int(input())\na = list(map(int, input().split()))\nh = [(-a[i],i+1) for i in range(len(a))]\nheapq.heapify(h)\nwhile h:\n    print(heapq.heappop(h)[1])"}
{"label": 15, "index": 1922, "code": "n=input()\na=zip((-int(x)for x in raw_input().split()),xrange(1,n+1))\nfor ai,i in sorted(a):print i"}
{"label": 15, "index": 1923, "code": "N = input()\na = map(int, input().split())\nb = []\n\nfor i, v in enumerate(a):\n    b.append((v, i+1))\n\nb.sort(reverse=True)\n\nfor i in range(len(b)):\n    print(b[i][1])\n"}
{"label": 15, "index": 1924, "code": "N = int(input())\nA = [(int(x),i+1) for i,x in zip(range(N),input().split())]\nA.sort(reverse=True)\n[print(a[1]) for a in A]"}
{"label": 15, "index": 1925, "code": "N = input()\nA = map(int,raw_input().split(\" \"))\nd = {d:i for i,d in enumerate(A)}\nA.sort(reverse=True)\nfor a in A:\n    print d[a]+1\n"}
{"label": 15, "index": 1926, "code": "from heapq import heappop,heappush\nN = int(raw_input())\nQ = []\nfor i,v in enumerate(map(int,raw_input().split())):\n\theappush(Q,(-v,i+1))\nfor i in xrange(N):\n\tprint heappop(Q)[1]\n"}
{"label": 15, "index": 1927, "code": "from heapq import heappop,heappush\nN = int(raw_input())\nQ = []\nfor i,v in enumerate(map(int,raw_input().split())):\n\theappush(Q,(-v,i+1))\nfor i in xrange(N):\n\tprint heappop(Q)[1]\n"}
{"label": 15, "index": 1928, "code": "from operator import itemgetter\n\nN = int(input())\na = list(map(int, input().split()))\na = [[idx+1, i] for idx, i in enumerate(a)]\n\nsorted_a = sorted(a, key=itemgetter(1), reverse=True)\n\nfor r in sorted_a:\n    print(r[0])"}
{"label": 15, "index": 1929, "code": "n = int(input())\narr = list(map(int,input().split()))\ndic = {}\nfor i in range(1,n + 1):\n    dic[i] = arr[i-1]\ndic = sorted(dic.items(), key=lambda x: x[1])\nfor i in range(n):\n    print(dic[n-i-1][0])"}
{"label": 15, "index": 1930, "code": "#coding: utf-8\n#ABC041C\n\nn=int(raw_input())\na=map(int,raw_input().split())\nc=[(a[i],i) for i in xrange(n)]\nc.sort()\nc.reverse()\nfor i in xrange(n):\n print c[i][1]+1\n"}
{"label": 15, "index": 1931, "code": "N = int(input())\nA = list(map(int, input().split()))\nB = []\n\nfor i in range(N):\n\tB.append([i+1, A[i]])\n\t\nC = sorted(B, key=lambda x: x[1], reverse = True)\n\nfor i, j in C:\n\tprint(i)"}
{"label": 15, "index": 1932, "code": "input()\nl = [int(s) for s in input().split(\" \")]\nd = {i+1: l[i] for i in range(len(l))}\nd = sorted(d.items(), key=lambda x: x[1], reverse=True)\nfor key, value in d:\n    print(key)"}
{"label": 15, "index": 1933, "code": "n=int(input())\na=[int(i) for i in input().split()]\nfor i in sorted(range(n),key=lambda x:a[x],reverse=True):\n    print(i+1)\n"}
{"label": 15, "index": 1934, "code": "#coding: utf-8\n#ABC041C\n\n\nn=int(raw_input())\na=map(int,raw_input().split())\nb=[i for i in xrange(n)]\nc=[(a[i],b[i]) for i in xrange(n)]\nc.sort()\nc.reverse()\nfor i in xrange(n):\n print c[i][1]+1\n"}
{"label": 15, "index": 1935, "code": "N=int(input())\nA=list(map(int,input().split()))\nA=[[a,i+1] for i,a in enumerate(A)]\nA=sorted(A,reverse=True)\nfor a in A:\n    print(a[1])"}
{"label": 15, "index": 1936, "code": "import heapq\n\nN = input()\narr = map(int, raw_input().split())\nheap = []\n\nfor i in range(len(arr)):\n    height = arr[i]\n    heap.append((-height, i+1))\nheapq.heapify(heap)\n\nfor i in range(N):\n    print heapq.heappop(heap)[1]\n"}
{"label": 15, "index": 1937, "code": "n = input()\na = zip( map(int, raw_input().split()), range(1, n+1))\n\na.sort(reverse = True)\n\nfor x, y in a:\n    print y\n"}
{"label": 15, "index": 1938, "code": "# coding: utf-8;\n\ndef main():\n    n = int(input())\n    al = list(map(int, input().split()))\n    for _, i in sorted([(a, i) for i, a in enumerate(al)], key=lambda x:x[0], reverse=True): print(i + 1)\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 15, "index": 1939, "code": "# -*- coding: utf-8 -*-\n\n_ = input()\n\nstudents = {}\ni = 1\ninput = [int(e) for e in input().split()]\n\nfor s in input:\n    students[s] = i\n    i += 1\n\nfor s in sorted(students.keys(), reverse=True):\n    print(students[s])\n"}
{"label": 15, "index": 1940, "code": "N = int(raw_input())\na = map(int, raw_input().split())\nb = range(1, N+1)\nc = []\nfor i in xrange(N):\n    c.append((a[i], b[i]))\nc.sort(key=lambda x: (-x[0], x[1]))\nd = []\nfor i in xrange(N):\n    d.append(c[i][1])\nprint \" \".join(map(str, d))"}
{"label": 15, "index": 1941, "code": "import heapq\nN = int(raw_input())\nA = map(int, raw_input().split())\narray = [(-A[i], i+1) for i in xrange(N)]\nheapq.heapify(array)\nwhile len(array) > 0:\n    print array[0][1]\n    heapq.heappop(array)"}
{"label": 15, "index": 1942, "code": "raw_input()\nidxValList = list(enumerate(map(int, raw_input().split())))\n\nidxValList.sort(key=lambda x: -x[1])\n\nprint \"\\n\".join(map(str, [idx + 1 for (idx, val) in idxValList]))\n"}
{"label": 15, "index": 1943, "code": "n=int(input())\na=map(int,input().split())\na=reversed(sorted(zip(a, range(1,n+1))))\nfor x in a:\n    print(x[1])\n"}
{"label": 15, "index": 1944, "code": "N=int(input())\na=list(map(int,input().split()))\nb=[]\n[b.append([a[i],i+1]) for i in range(N)]\nb.sort(reverse=1)\n[print(b[i][1]) for i in range(N)]\n"}
{"label": 15, "index": 1945, "code": "#!/usr/bin/env python2\n# -*- coding: utf-8 -*-\n\nimport numpy as np\n\nN = int(raw_input())\na = map(int, raw_input().split(\" \"))\na_and_ind = np.c_[a, range(1, N+1)]\nres = sorted(a_and_ind, key= lambda s : s[0], reverse=True)\nres = np.array(res)\nfor i in res[:, 1]:\n    print i\n    "}
{"label": 15, "index": 1946, "code": "# -*- coding: utf-8 -*-\n# problem C\n\nimport numpy as np\n\nN = int(input())\na = list(map(int, input().split()))\nA = np.array(a)\n\nA = A.argsort()[::-1] #[::-1] reverse\nfor i in range(N):\n    print(A[i] + 1)"}
{"label": 15, "index": 1947, "code": "N = int(input())\na = zip(map(int, input().split()), range(1, N+1))\nb = sorted(a, reverse=True)\n[print(b[i][1]) for i in range(N)]\n"}
{"label": 15, "index": 1948, "code": "input()\nl = [(int(n) , i+1) for i, n in enumerate(input().split())]\nl.sort()\nl.reverse()\nfor n, i in l:\n    print(i)\n"}
{"label": 15, "index": 1949, "code": "import numpy as np\n\nN = int(input())\ninp = input().split()\na = []\nfor i in range(N):\n    a.append(int(inp[i]))\n\nheight = np.array(a)\nNo_sorted = np.argsort(height) +1\nNo_sorted_down = No_sorted[::-1]\n\nfor i in range(N):\n    print(No_sorted_down[i])\n"}
{"label": 16, "index": 1950, "code": "from sys import stdin\na = map(int,stdin.readline().split())\na.sort()\nif a==[5,5,7]:\n print \"YES\"\nelse:\n print 'NO'"}
{"label": 16, "index": 1951, "code": "A = list(map(int,input().split()))\nA.sort()\nif A == [5,5,7]:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 16, "index": 1952, "code": "print(['NO','YES'][sorted(input().split())=='5 5 7'.split()])"}
{"label": 16, "index": 1953, "code": "# -*- coding: utf-8 -*-\nimport sys,copy,math,heapq,itertools as it,fractions,re,bisect,collections as coll\n\nA, B, C = sorted(map(int, raw_input().split()))\nif A == B == 5 and C == 7:\n    print \"YES\"\nelse:\n    print \"NO\"\n"}
{"label": 16, "index": 1954, "code": "a = map(int, raw_input().split())\nd = 2\ne = 1\n\nfor i in a:\n\tif i == 5:\n\t\td -= 1\n\telif i == 7:\n\t\te -= 1\nif d == 0 and e == 0:\n\tprint \"YES\"\nelse:\n\tprint \"NO\""}
{"label": 16, "index": 1955, "code": "print(\"YES\" if sorted(input().split()) == [\"5\", \"5\", \"7\"] else \"NO\")"}
{"label": 16, "index": 1956, "code": "l = list(map(int, input().split()))\n \nif l.count(5) == 2 and l.count(7) == 1:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")"}
{"label": 16, "index": 1957, "code": "a, b, c = map(int, input().split())\n\nif a + b + c == 17:\n    ans = 'YES'\nelse:\n    ans = 'NO'\n\nprint(ans)"}
{"label": 16, "index": 1958, "code": "def ri(): return int(input())\ndef rli(): return list(map(int, input().split()))\ndef rls(): return list(input())\ndef pli(a): return \"\".join(list(map(str, a)))\n\na = rli()\na.sort()\nif(a == [5,5,7]):\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 16, "index": 1959, "code": "# -*- coding: utf-8 -*-\ndef main():\n    a, b, c = map(int, input().split())\n    \n    mp = {}\n    if(a not in mp):\n        mp[a] = 1\n    else:\n        mp[a] += 1\n    if(b not in mp):\n        mp[b] = 1\n    else:\n        mp[b] += 1\n    if(c not in mp):\n        mp[c] = 1\n    else:\n        mp[c] += 1\n\n    if(mp[5] == 2 and mp[7] == 1):\n        print('YES')\n    else:\n        print('NO')\n    \n    \nmain()\n"}
{"label": 16, "index": 1960, "code": "A, B, C = map(int,input().split())\n\nif A == B:\n    if C == 7:\n        print(\"YES\")\n    else:\n        print(\"NO\")\nelif B == C:\n    if A == 7:\n        print(\"YES\")\n    else:\n        print(\"NO\")\nelif C == A:\n    if B == 7:\n        print(\"YES\")\n    else:\n        print(\"NO\")\nelse:\n    print(\"NO\")"}
{"label": 16, "index": 1961, "code": "A = list(map(int,input().split()))\nfive = 0\nseven = 0\nfor i in A:\n    if i == 5:\n        five += 1\n    if i == 7:\n        seven += 1\nif five == 2 and seven == 1:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 16, "index": 1962, "code": "print[\"NO\",\"YES\"][raw_input()in\"5 5 7 5 5\"]"}
{"label": 16, "index": 1963, "code": "i = list(map(int, input(). split()))\n\nif i.count(5) == 2 and i.count(7) == 1:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 16, "index": 1964, "code": "Ns = map(int, raw_input().split())\n\nif sorted(Ns) == [5, 5, 7]:\n    print 'YES'\nelse:\n    print 'NO'\n"}
{"label": 16, "index": 1965, "code": "list = list(map(int,input().split()))\nif (5 and 7 in list) and (sum(list)==17):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 16, "index": 1966, "code": "m = list(map(int,input().split()))\nprint('YES' if [5,5,7] == sorted(m) else 'NO')"}
{"label": 16, "index": 1967, "code": "A=sorted(list(map(int, input().split())))\n\nif A[0] == A[1] == 5 and A[2] == 7:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 16, "index": 1968, "code": "n = input().split()\nif n.count('5') == 2 and '7' in n:\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 16, "index": 1969, "code": "a = [int(i) for i in raw_input().split()]\nprint ['NO', 'YES', 'NO'][a.count(5) == 2 and a.count(7)]"}
{"label": 16, "index": 1970, "code": "L = sorted(map(int, input().split()))\nif L == [5, 5, 7]:\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 16, "index": 1971, "code": "print(\"YES\" if sum(map(int, input().split())) == 17 else \"NO\")"}
{"label": 16, "index": 1972, "code": "print(\"YES\" if \"\".join(sorted(input().split()))=='557' else \"NO\")"}
{"label": 16, "index": 1973, "code": "print[\"NO\",\"YES\"][raw_input()[::2]in\"55755\"]"}
{"label": 16, "index": 1974, "code": "A=sorted(map(int,input().split()))\nif A[0]==5 and A[1]==5 and A[2]==7 : print(\"YES\")\nelse : print(\"NO\")\n"}
{"label": 16, "index": 1975, "code": "s = raw_input().split()\n\nif s.count('5') == 2 and s.count('7') == 1:\n print 'YES'\nelse:\n print 'NO'\n"}
{"label": 16, "index": 1976, "code": "a = list(map(int, input().split()))\nfive = 0\nseven = 0\nfor i in range(3):\n    if a[i] == 5:\n        five += 1\n    if a[i] == 7:\n        seven += 1\n\nif five == 2 and seven == 1:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 16, "index": 1977, "code": "l=map(int,raw_input().split())\nl.sort()\nprint 'YES' if l[0]==l[1]==5 and l[2]==7 else 'NO'"}
{"label": 16, "index": 1978, "code": "#coding: utf-8\n#ABC042A\n\nl=map(int,raw_input().split())\n\nif l.count(5)==2 and l.count(7)==1:\n print \"YES\"\nelse:\n print \"NO\"\n"}
{"label": 16, "index": 1979, "code": "def ini(): return int(input())\ndef inli(): return list(map(int, input().split()))\ndef inf(): return float(input())\ndef inlf(): return list(map(float, input().split()))\ndef inl(): return list(input())\ndef pli(): return \"\".join(list(map(str, ans)))\n\nx=inli()\nif (x[0]==7 and x[1]==5 and x[2]==5)or (x[0]==5 and x[1]==7 and x[2]==5)or(x[0]==5 and x[1]==5 and x[2]==7):\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 16, "index": 1980, "code": "a = sorted([int (s) for s in input().strip().split(' ')])\nprint(\"YES\" if a == [5,5,7] else \"NO\")"}
{"label": 16, "index": 1981, "code": "S = [int(i) for i in input().split()]\nS.sort()\nif S == [5,5,7]:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n"}
{"label": 16, "index": 1982, "code": "import sys\nABC = map(int,sys.stdin.readline().split())\n\nABC.sort()\n\nif ABC[0] == 5 and ABC[1] == 5 and ABC[2] == 7:\n    print \"YES\"\nelse:\n    print \"NO\""}
{"label": 16, "index": 1983, "code": "a = map(str,raw_input().split())\nif a.count(\"7\") == 1 and a.count(\"5\") == 2:\n\tprint \"YES\"\nelse :\n\tprint \"NO\""}
{"label": 16, "index": 1984, "code": "#coding :utf-8                                                                                                                                              \n\nxs = sorted(map(int, raw_input().split()))\n\nprint 'YES' if xs == [5, 5, 7] else 'NO'"}
{"label": 16, "index": 1985, "code": "l = map(int, raw_input().split())\nl.sort()\nif l[0] == 5 and l[1] == 5 and l[2] == 7:\n\tprint \"YES\"\nelse:\n\tprint \"NO\""}
{"label": 16, "index": 1986, "code": "#!/usr/bin/python3\n\na = list(map(int, input().split()))\n\na.sort()\n\nif a == [5, 5, 7]:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 16, "index": 1987, "code": "# -*- coding: utf-8 -*-\n# problem A\n\nls = list(map(int, input().split()))\nls.sort()\n\nif ls == [5, 5, 7]:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 16, "index": 1988, "code": "catch = input()\ncatch = catch.split(\" \")\n\nf = 0\nn = 0\n\nfor i in range(3):\n    if catch[i] == \"7\":\n        n +=1\n    elif catch[i] == \"5\":\n        f +=1\n\nif f == 2 and n == 1:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 16, "index": 1989, "code": "l = map(int, raw_input().split())\n\nif sorted(l) == [5, 5, 7]:\n    print 'YES'\nelse:\n    print 'NO'\n"}
{"label": 16, "index": 1990, "code": "print \"YES\" if raw_input() in [\"5 5 7\", \"5 7 5\", \"7 5 5\"] else \"NO\""}
{"label": 16, "index": 1991, "code": "a=map(int,raw_input().split())\ny=0\nif 5 in a:\n    a.remove(5)\n    if 5 in a and 7 in a:\n        y=1\nif y==1:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 16, "index": 1992, "code": "haiku = input()\nx = haiku.split()\nnum_5 = 0\nnum_7 = 0\n\nfor v in x:\n    v = int(v)\n    if v == 5:\n        num_5 += 1\n    elif v == 7:\n        num_7 += 1\n\nif num_5 == 2 and num_7 == 1:\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 16, "index": 1993, "code": "# -*- coding:utf-8 -*-\nABC = list(map(int,input().split()))\nfive = ABC.count(5)\nseven = ABC.count(7)\nif five == 2 and seven == 1:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 16, "index": 1994, "code": "a,b,c=map(int,raw_input().split())\nx = []\nx.append(a)\nx.append(b)\nx.append(c)\nf = True\nx = sorted(x)\nif x[0] != 5:\n    f = False\nelif x[1] != 5:\n    f = False\nelif x[2] != 7:\n    f = False\n\nif f:\n    print 'YES'\nelse:\n    print 'NO'\n"}
{"label": 16, "index": 1995, "code": "from collections import deque\n\nL = deque(map(int, input().split()))\n\nif L.count(5) == 2 and L.count(7) == 1:\n\tprint('YES')\nelse:\n\tprint('NO')"}
{"label": 16, "index": 1996, "code": "a=input().split()\nif a.count(\"5\")==2 and a.count(\"7\")==1:\n  print(\"YES\")\nelse:\n  print(\"NO\")"}
{"label": 16, "index": 1997, "code": "a = input().split(\" \")\n    \na.sort()\nif a == ['5', '5', '7']:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 16, "index": 1998, "code": "#!/usr/bin/env python2\n#encoding: UTF-8\n\n# To change this license header, choose License Headers in Project Properties.\n# To change this template file, choose Tools | Templates\n# and open the template in the editor.\nimport math\nline=raw_input().rstrip().split(' ')\na=int(line[0])\nb=int(line[1])\nc=int(line[2])\nif((a==7 and b==5 and c==5)or(a==5 and b==7 and c==5)or(a==5 and b==5 and c==7)):\n    print 'YES'\nelse:\n    print 'NO'"}
{"label": 16, "index": 1999, "code": "ls = map(int, raw_input().split())\nls.sort()\nif ls[0] == 5 and ls[1] == 5 and ls[2] == 7:\n  print \"YES\"\nelse:\n  print \"NO\"\n"}
{"label": 16, "index": 2000, "code": "A, B, C = map(int, input().split())\n\nif [A, B, C] == [5, 7, 5] or [A, B, C] == [7, 5, 5] or[A, B, C] == [5, 5, 7]:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n    "}
{"label": 16, "index": 2001, "code": "l = map(int, raw_input().split())\nl.sort()\nif l[0] == 5 and l[1] == 5 and l[2] == 7:\n    print 'YES'\nelse:\n    print 'NO'\n"}
{"label": 16, "index": 2002, "code": "a = map(int, raw_input().split())\na.sort()\nif a == [5,5,7]:\n    print \"YES\"\nelse:\n    print \"NO\""}
{"label": 16, "index": 2003, "code": "l = map(int, raw_input().split())\nl.sort()\n\nif l[0] == 5 and l[1] == 5 and l[2] == 7:\n\tprint \"YES\"\nelse:\n\tprint \"NO\"\n"}
{"label": 16, "index": 2004, "code": "a = list(int(i) for i in input().split())\n\nCount5 = 0\nCount7 = 0\nfor i in a:\n    if i == 5:\n        Count5 += 1\n    elif i == 7:\n        Count7 += 1\n\nif Count5 == 2 and Count7 == 1:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 16, "index": 2005, "code": "A, B, C = map(int, raw_input().split())\n\nif [A, B, C].count(5) == 2 and [A, B, C].count(7) == 1:\n    print 'YES'\nelse:\n    print 'NO'\n"}
{"label": 16, "index": 2006, "code": "a=list(map(int,input().split()))\nprint(['NO','YES'][a.count(5)==2 and a.count(7)==1])"}
{"label": 16, "index": 2007, "code": "inn = sorted(input().split(\" \"))\nif \"5 5 7\" == \" \".join(inn):\n  print(\"YES\")\nelse:\n  print(\"NO\")\n"}
{"label": 16, "index": 2008, "code": "def calc(lst):\n\tif lst[0] == 7:\n\t\tif lst[1] == 5 and lst[2] == 5:\n\t\t\treturn 'YES'\n\t\telse:\n\t\t\treturn 'NO'\n\telif lst[0] == 5:\n\t\tif lst[1] == 7:\n\t\t\tif lst[2] == 5:\n\t\t\t\treturn 'YES'\n\t\t\telse:\n\t\t\t\treturn 'NO'\n\t\telif lst[1] == 5:\n\t\t\tif lst[2] == 7:\n\t\t\t\treturn 'YES'\n\t\t\telse:\n\t\t\t\treturn 'NO'\n\t\telse:\n\t\t\treturn 'NO'\n\telse:\n\t\treturn 'NO'\n\ninpt = map(int, raw_input().split())\n\nprint calc(inpt)"}
{"label": 16, "index": 2009, "code": "A,B,C =map(int,input().split())\n\nif A==5 and B==5 and C==7:\n    print(\"YES\")\n    \nelif A==5 and B==7 and C==5:\n    print(\"YES\")\n\nelif A==7 and B==5 and C==5:\n    print(\"YES\")\n    \nelse:\n    print(\"NO\")"}
{"label": 16, "index": 2010, "code": "if [5,5,7] == sorted(map(int,input().split())):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 16, "index": 2011, "code": "a=sorted([int(i) for i in input().split()])\nif a[0]==5 and a[1]==5 and a[2]==7:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 16, "index": 2012, "code": "phrases = [ int(i) for i in input().split() ]\nif phrases.count(5) == 2 and 5 in phrases:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")"}
{"label": 16, "index": 2013, "code": "a=sorted(input().split(\" \"))\nif a[0]==\"5\" and a[1]==\"5\" and a[2]==\"7\":\n  print(\"YES\")\nelse:\n  print(\"NO\")"}
{"label": 16, "index": 2014, "code": "ABC=input().split()\n# ABC=[\"4\",\"5\",\"7\"]\nif \"7\" in ABC:\n\ti=ABC.index(\"7\")\n\tABC.pop(i)\n\tif ABC[0]==\"5\" and ABC[1]==\"5\":\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")\nelse:\n\tprint(\"NO\")\n"}
{"label": 16, "index": 2015, "code": "# coding: utf-8\n# Here your code !\nxyz = raw_input().split(\" \")\nc1, c2 = 0, 0\nfor i in xyz:\n    if i == \"5\":\n        c1 += 1\n    elif i == \"7\":\n        c2 += 1\nif (c1 == 2 and c2 == 1):\n    print \"YES\"\nelse:\n    print \"NO\""}
{"label": 16, "index": 2016, "code": "a = list(map(int, input().split()))\n#a = [5,7,5]\na.sort()\nif a==[5,5,7]:\n        print('YES')\nelse:\n    print('NO')\n"}
{"label": 16, "index": 2017, "code": "arr = list(map(int,input().split()))\nif arr.count(7) == 1 and arr.count(5) == 2:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 16, "index": 2018, "code": "import sys\na=raw_input().split()\nb=a.count(\"5\")\nc=a.count(\"7\")\nif b==2 and c==1:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 16, "index": 2019, "code": "A,B,C = map(str, input().split())\niroha = [A, B, C]\niroha.sort()\nif (iroha == ['5', '5', '7']):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 16, "index": 2020, "code": "n = map(int, input().split(' '))\ncnt1 = 0\ncnt2 = 0\nfor t in n:\n    if t == 5:\n        cnt1 += 1\n    if t == 7:\n        cnt2 += 1\n\nif cnt1 == 2 and cnt2 == 1:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 16, "index": 2021, "code": "#! python3\n\nfives = 0\nsevens = 0\nfor x in input().strip().split():\n    x = int(x)\n    if x == 5:\n        fives += 1\n    if x == 7:\n        sevens += 1\nif fives == 2 and sevens == 1:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 16, "index": 2022, "code": "a, b, c = map(int, raw_input().split())\nif sorted([a,b,c]) == [5,5,7]:\n    print \"YES\"\nelse:\n    print \"NO\"\n"}
{"label": 16, "index": 2023, "code": "def main():\n    a, b, c = map(int, input().split())\n    l = list(sorted([a, b, c]))\n    if l[0] == 5 and l[1] == 5 and l[2] == 7:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 16, "index": 2024, "code": "data = (input().split())\nif data.count('5') == 2 and data.count('7') == 1:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 16, "index": 2025, "code": "ss = [int(e) for e in input().split()]\n\n\ndef main(ss):\n    five_count = ss.count(5)\n    seven_count = ss.count(7)\n    if five_count == 2 and seven_count == 1:\n        return 'YES'\n    else:\n        return 'NO'\n\n\nprint(main(ss))\n"}
{"label": 16, "index": 2026, "code": "a,b, c = map(int, raw_input().split())\nif a+b+c==17:\n    if a==b==5 or b==c==5 or c==a==5:\n        print(\"YES\")\n    else:\n        print(\"NO\")\nelse:\n    print(\"NO\")"}
{"label": 16, "index": 2027, "code": "L = list(map(int, input().split()))\nprint(\"YES\" if 5 in L and 7 in L and sum(L) == 17 else \"NO\")"}
{"label": 16, "index": 2028, "code": "A,B,C = input().split()\narray =[A,B,C]\n\narray.sort()\n\nif \"5\" in array[0]:\n    del array[0]\n    if \"5\" in array[0]:\n        del array[0]\n        if \"7\" in array[0]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")\nelse:\n    print(\"NO\")\n"}
{"label": 16, "index": 2029, "code": "a = list(map(int, input().split()))\na.sort()\nif a == [5, 5, 7]:\n  print(\"YES\")\nelse:\n  print(\"NO\")"}
{"label": 16, "index": 2030, "code": "l = map(int,raw_input().split())\n\ncount = 0\nfor i in range(len(l)):\n    if l[i] == 5:\n        count += 5\n    if l[i] == 7:\n        count += 7\n\nif count == 17:\n    print 'YES'\nelse:\n    print 'NO'\n"}
{"label": 16, "index": 2031, "code": "def is_haiku(s):\n    nums = s.split()\n    counts = {x: nums.count(x) for x in nums}\n    try:\n        if counts['5'] == 2 and counts['7'] == 1:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    except:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    is_haiku(input())"}
{"label": 16, "index": 2032, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\"\"\"042-a\"\"\"\n\n\nimport sys\n\n\ndef main():\n    \"\"\"Main function.\"\"\"\n    phrases = sys.stdin.readline()[:-1].split(\" \")\n\n    print('YES') if sorted(phrases) == sorted(['5', '7', '5']) else print('NO')\n\n\nif __name__ == '__main__':\n    sys.exit(main())"}
{"label": 16, "index": 2033, "code": "a=input().split()\nif a.count('5')==2 and a.count('7')==1:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")"}
{"label": 16, "index": 2034, "code": "a, b, c = map(int, input().split())\n \nif a + b + c == 17:\n    ans = 'YES'\nelse:\n    ans = 'NO'\n \nprint(ans)"}
{"label": 16, "index": 2035, "code": "A,B,C = list(map(int, input().split()))\nif A*B*C ==  175:\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 16, "index": 2036, "code": "a = list(map(int, input().split()))\na.sort()\nif a[0] == 5 and a[1] == 5 and a[2] == 7:\n    print('YES')\nelse:\n    print('NO')\n\n"}
{"label": 16, "index": 2037, "code": "l = map(int, raw_input().split())\nif sorted(l) == [5, 5, 7]:\n    print \"YES\"\nelse:\n    print \"NO\""}
{"label": 16, "index": 2038, "code": "five=0\nseven=0\na=[int(i) for i in input().split()]\nfor i in a:\n    if i==5: five+=1\n    elif i==7: seven+=1\nprint(\"YES\" if five==2 and seven==1 else \"NO\")"}
{"label": 16, "index": 2039, "code": "A, B, C = map(int, raw_input().split())\nif A+B+C == 5 + 7 + 5:\n    print \"YES\"\nelse:\n    print \"NO\"\n"}
{"label": 16, "index": 2040, "code": "arr = map(int, input().split())\nif sorted(arr) == [5,5,7]:\n  print('YES')\nelse:\n  print('NO')"}
{"label": 16, "index": 2041, "code": "#!/usr/bin/env python3\n# -*- coding:utf-8 -*-\n\ndef main():\n    a = sorted(list(map(int, input().split())))\n    if a[0] == 5 and a[1] == 5 and a[2] == 7:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == \"__main__\":\n    main()\n"}
{"label": 16, "index": 2042, "code": "a=list(map(int,input().split()))\na.sort()\nif a==[5, 5,7]:\n  print(\"YES\")\nelse:\n  print(\"NO\")"}
{"label": 16, "index": 2043, "code": "a=sorted([int(i) for i in input().split()])\nprint(\"YES\" if a==[5,5,7] else \"NO\")"}
{"label": 16, "index": 2044, "code": "l = sorted(list(map(int,input().split())))\nif l.count(7) == 1:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 16, "index": 2045, "code": "S = list(map(int,input().split()))\nS.sort()\nif S == [5,5,7]:\n\tprint('YES')\nelse:\n\tprint('NO')"}
{"label": 16, "index": 2046, "code": "def solve():\n    A, B, C = map(str, input().split())\n    if A ==\"5\" and B ==\"7\" and C ==\"5\":\n        ans = \"YES\"\n    elif A ==\"5\" and B ==\"5\" and C ==\"7\":\n        ans = \"YES\"\n    elif A == \"7\" and B ==\"5\" and C ==\"5\":\n        ans = \"YES\"\n    else:\n        ans = \"NO\"\n    print(ans)\n\nif __name__ == '__main__':\n    solve()"}
{"label": 16, "index": 2047, "code": "abc = list(map(int, input().split()))\ncnt5 = 0\ncnt7 = 0\nfor i in abc:\n    if i == 5:\n        cnt5 += 1\n    elif i == 7:\n        cnt7 += 1\nif cnt5 == 2 and cnt7 == 1:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 16, "index": 2048, "code": "L = list(map(int, input().split()))\nL.sort()\nif L[0] == 5 and L[1] == 5 and L[2] == 7:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 16, "index": 2049, "code": "import re\nimport doctest\n\n\nclass IO_for_Contest(object):\n    @staticmethod\n    def my_input():\n        # return raw_input()\n        return input()\n\n    @staticmethod\n    def read_from_input():\n        return IO_for_Contest.read_n_int(3)\n\n    @staticmethod\n    def read_line():\n        return IO_for_Contest.my_input().strip()\n\n    @staticmethod\n    def read_int():\n        return int(IO_for_Contest.my_input().strip())\n\n    @staticmethod\n    def read_n_int(n):\n        return list(map(\n                int,\n                re.split('\\s+', IO_for_Contest.my_input().strip())))[: n]\n\n\ndef solve():\n    a = IO_for_Contest.read_from_input()\n    a.sort()\n    if is_legal(a):\n        print('YES')\n    else:\n        print('NO')\n\n\ndef is_legal(a):\n    return len(a) == 3 and a[0] == 5 and a[1] == 5 and a[2] == 7\n\nif __name__ == '__main__':\n    # doctest.testmod()\n    solve()"}
{"label": 16, "index": 2050, "code": "a = [int(i) for i in input().split()]\na.sort()\nif a[0] == 5 and a[1] == 5 and a[2] == 7 :\n    print('YES')\nelse :\n    print('NO')"}
{"label": 16, "index": 2051, "code": "cnt = [0] * 11\nfor x in map(int, input().split()):\n    cnt[x] += 1\n\nif cnt[5] == 2 and cnt[7] == 1:\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 16, "index": 2052, "code": "a=list(sorted(map(int,input().split())))\nprint(\"YES\" if a == [5,5,7] else \"NO\")\n"}
{"label": 16, "index": 2053, "code": "input_line1 = map(int,raw_input().split(\" \"))\n#input_line2 = map(int,raw_input().split(\" \"))\n\ninput_line1.sort()\nif input_line1[0] == 5 and input_line1[1] == 5 and input_line1[2] == 7:\n\tprint \"YES\"\nelse:\n\tprint \"NO\""}
{"label": 16, "index": 2054, "code": "a = map(int,raw_input().split())\na.sort()\nif a[0]==a[1]==5 and a[2] == 7:\n       print 'YES'\nelse:\n       print 'NO'"}
{"label": 16, "index": 2055, "code": "def main():\n    ABC = tuple(map(int, input().split()))\n\n    if ABC.count(5) == 2 and ABC.count(7) == 1:\n        print('YES')\n    else:\n        print('NO')\n\nmain()\n"}
{"label": 16, "index": 2056, "code": "a, b, c = sorted([int(x) for x in input().split()])\nprint('YES' if a == b == 5 and c == 7 else 'NO')\n"}
{"label": 16, "index": 2057, "code": "x = list(map(int,input().split()))\nx.sort()\n\nans=\"NO\"\nif x == [5,5,7]:\n    ans=\"YES\"\nprint(ans)\n"}
{"label": 16, "index": 2058, "code": "l = list(map(int, input().split()))\nif l.count(5) == 2 and l.count(7) == 1:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 16, "index": 2059, "code": "cnt = [0] * 11\nfor x in map(int, raw_input().split()):\n\tcnt[x] += 1\n\nprint \"YES\" if cnt[5] == 2 and cnt[7] == 1 else \"NO\"\n"}
{"label": 16, "index": 2060, "code": "print([\"NO\",\"YES\"][\"  557\"==\"\".join(sorted(input()))])"}
{"label": 16, "index": 2061, "code": "#A\nA = sorted([int(i) for i in input().split()])\nif A[0] == A[1] == 5 and A[2] == 7:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 16, "index": 2062, "code": "A, B, C = map(int, input().split())\nif (A==5 and B==5 and C==7)or(A==5 and B==7 and C==5)or(A==7 and B==5 and C==5):\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")"}
{"label": 16, "index": 2063, "code": "from collections import defaultdict\n\n\ndef main():\n    x = list(map(int, input().split()))\n    if x.count(5) == 2 and x.count(7) == 1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 16, "index": 2064, "code": "# coding: utf-8\n# Here your code !\na = list(map(int, input().split()))\na.sort()\nif a==[5, 5, 7] :\n  print(\"YES\")\nelse :\n  print(\"NO\")"}
{"label": 16, "index": 2065, "code": "a=list(map(str,input().split()))\nif a.count('5')==2 and a.count('7')==1:\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 16, "index": 2066, "code": "ABCstr = input().split()\nABC = []\ngogo = [5, 5]\nfor number in ABCstr:\n    if number!='7':\n        ABC.append(int(number))\nif ABC == gogo:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 16, "index": 2067, "code": "z = map(int,raw_input().split(' '))\n\nif z.count(7) == 1:\n    print 'YES'\nelse:\n    print 'NO'"}
{"label": 16, "index": 2068, "code": "a,b,c=list(map(int,input().split()))\nif a==5 and b==5 and c==7:\n\tprint(\"YES\")\nelif a==5 and b==7 and c==5:\n\tprint(\"YES\")\nelif a==7 and b==5 and c==5:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")"}
{"label": 16, "index": 2069, "code": "A, B, C = map(int, input().split())\n\nif A == 7 or B == 7 or C == 7 :\n    if A == 5 or B == 5 or C == 5:\n        if A+B+C == 17:\n            print(\"YES\")\n            exit()\n\nprint(\"NO\")\n"}
{"label": 16, "index": 2070, "code": "print 'YES' if sorted(raw_input().split()) == ['5','5','7'] else 'NO'"}
{"label": 16, "index": 2071, "code": "a = list(map(int, input().split()))\nif a.count(5) == 2 and a.count(7) == 1:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 16, "index": 2072, "code": "n = list(map(int, input().split()))\nif n.count(5) == 2 and n.count(7) == 1:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 16, "index": 2073, "code": "print(\"YES\" if sorted(input().split()) == [\"5\", \"5\", \"7\"] else \"NO\")\n"}
{"label": 16, "index": 2074, "code": "a,b,c=map(int,input().split())\nsum=a+b+c\ng=[5,7]\nif a and b and c in g:\n    if sum==17:\n        print(\"YES\")\n    else:\n        print(\"NO\")\nelse:\n    print(\"NO\")\n"}
{"label": 16, "index": 2075, "code": "input = map(int, raw_input().split())\nans = [5, 7, 5]\nfor data in input:\n if int(data) < 1 or int(data) > 10:\n  print 'error'\n  exit()\nfor data in input:\n if data in ans:\n   ans.remove(data)\nif len(ans) == 0:\n print 'YES'\nelse:\n print 'NO'"}
{"label": 16, "index": 2076, "code": "def solve():\n    li = [int(i) for i in input().split()]\n    print(\"YES\" if sum(li) == 17 and len(set(li)) == 2 else \"NO\")\n\n\nif __name__==\"__main__\":\n    solve()"}
{"label": 16, "index": 2077, "code": "a = map(int, raw_input().split())\na.sort()\nprint [\"NO\", \"YES\"][a == [5, 5, 7]]"}
{"label": 16, "index": 2078, "code": "def a():\n    five = 0\n    seven = 0\n    for i in raw_input().split(\" \"):\n        if i == \"5\":\n            five += 1\n        elif i == \"7\":\n            seven += 1\n    if five == 2 and seven == 1:\n        print \"YES\"\n    else:\n        print \"NO\"\na()"}
{"label": 16, "index": 2079, "code": "if sorted([int(x) for x in input().split()])==[5,5,7]:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n\n\t"}
{"label": 17, "index": 2080, "code": "print(\"\".join(sorted([input() for _ in range(int(input().split()[0]))])))\n"}
{"label": 17, "index": 2081, "code": "N, L = (raw_input().split())\n\nS = []\n\nans = \"\"\n\nfor i in range(int(N)):\n  S.append(raw_input())\n\nS.sort()\n\nfor i in range(int(N)):\n  ans += S[i]\n\nprint ans"}
{"label": 17, "index": 2082, "code": "import heapq\nN, L = map(int, raw_input().split())\nhq = []\nfor _ in xrange(N):\n    s = raw_input()\n    heapq.heappush(hq, s)\nans = ''\nwhile len(hq) > 0:\n    ans += heapq.heappop(hq)\nprint ans"}
{"label": 17, "index": 2083, "code": "n, l = map(int, raw_input().split())\ns = []\nfor i in range(n):\n    s.append(raw_input())\ns.sort()\nprint \"\".join(s)\n"}
{"label": 17, "index": 2084, "code": "N, L = map(int, input().split())\nS = []\nfor _ in range(N):\n    S.append(input())\nS.sort()\nprint(\"\".join(S))"}
{"label": 17, "index": 2085, "code": "n, l = map(int, raw_input().split())\ns = [raw_input() for i in range(n)]\nans = \"\"\nprint \"\".join(sorted(s))"}
{"label": 17, "index": 2086, "code": "n,l = map(int, raw_input().split())\nls = [raw_input() for _ in range(n)]\nls.sort()\nprint \"\".join(ls)\n"}
{"label": 17, "index": 2087, "code": "N,L = map(int, input().split())\nS = N*[\"\"] \nfor i in range(N):\n    S[i] = input()\n\nS.sort()\n\nstr = \"\"\n\nfor s in S:\n    str += s\n\nprint(str)\n"}
{"label": 17, "index": 2088, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\n\ndef main():\n    N, L = map(int, input().split())\n    SS = [input() for _ in range(N)]\n\n    SS.sort()\n    print(\"\".join(SS))\n\nif __name__ == \"__main__\": main()\n"}
{"label": 17, "index": 2089, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\n\ndef main():\n    n,l = list(map(int,input().split()))\n    a = [input() for _ in range(n)]\n    a.sort()\n    return ''.join(a)\n\n\n\nprint(main())\n"}
{"label": 17, "index": 2090, "code": "import sys\nimport math\na = []\nfor line in sys.stdin:\n    a.append(str(line))\nb=len(a)\nc=[]\nd=[]\nfor i in xrange(b):\n    c=map(str,a[i][:-1].split(\" \"))\n    d.append(c)\ne=[]\nfor i in range(int(d[0][0])):\n    e.append(d[i+1])\nf=sorted(e)\ng=\"\"\nfor i in range(int(d[0][0])):\n    g=g+f[i][0]\nprint(g)"}
{"label": 17, "index": 2091, "code": "def ri(): return int(input())\ndef rli(): return list(map(int, input().split()))\ndef rls(): return list(input())\ndef pli(a): return \"\".join(list(map(str, a)))\n\nn, l = rli()\ns = []\nfor i in range(n):\n    s.append(input())\ns.sort()\nprint(pli(s))\n"}
{"label": 17, "index": 2092, "code": "n, m = map(int, raw_input().split())\na = []\nfor i in range(n):\n    a.append(raw_input())\n\na = sorted(a)\nans = ''\nfor i in a:\n    ans += i\nprint ans\n\n"}
{"label": 17, "index": 2093, "code": "N, L = map(int, raw_input().split())\nS = [raw_input() for _ in range(N)]\nS.sort()\nprint \"\".join(S)\n"}
{"label": 17, "index": 2094, "code": "#!/usr/bin/python3\n\nN, L = list(map(int, input().split()))\n\nS = []\n\nfor i in range(N):\n    S.append(input())\n\nS.sort()\n\nfor i in range(N):\n    print(S[i], end=\"\")\n"}
{"label": 17, "index": 2095, "code": "n, l = map(int, input().split())\ns = [input()  for _ in range(n)]\nprint(''.join(sorted(s)))"}
{"label": 17, "index": 2096, "code": "l = raw_input().split()\n\n\na = []\nfor i in range(int(l[0])):\n    a.append(raw_input())\n\na.sort()\n\nprint ''.join(a)"}
{"label": 17, "index": 2097, "code": "N = int(input().split()[0])\nwords = [input().strip() for i in range(N)]\nprint(\"\".join(sorted(words)))"}
{"label": 17, "index": 2098, "code": "import sys\n\nN,L = map(int,sys.stdin.readline().split())\nS = []\nfor i in xrange(N):\n    S.append(sys.stdin.readline())\n\nS.sort()\nret = ''\nfor s in S:\n    ret += s[0:L]\nprint ret"}
{"label": 17, "index": 2099, "code": "N,L = map(int,raw_input().split( ))\nwords =[]\nfor i in range(N):\n    words.append(raw_input())\nwords.sort()\nprint ''.join(words)"}
{"label": 17, "index": 2100, "code": "n,l = map(int,input().split())\narr=[]\nfor i in range(n):\n  arr.append(input())\nprint(''.join(sorted(arr)))"}
{"label": 17, "index": 2101, "code": "N,L=map(int, input().split())\na=[]\nfor i in range(N):\n    a.append(input())\na.sort()\nprint(''.join(a))\n    \n"}
{"label": 17, "index": 2102, "code": "n, l = map(int, raw_input().split())\nprint \"\".join(sorted(raw_input() for i in xrange(n)))"}
{"label": 17, "index": 2103, "code": "n,l=map(int,raw_input().split())\nd=[]\nfor i in range(n):\n    d.append(raw_input())\nd.sort()\nans=''\nfor i in d:\n    ans+=i\nprint ans"}
{"label": 17, "index": 2104, "code": "import sys\n\ndef main(lines):\n    print(''.join(sorted(lines.split())))\n\nnext(sys.stdin)\nlines = ''\nfor line in sys.stdin:\n    lines += line\nmain(lines)\n"}
{"label": 17, "index": 2105, "code": "n,l=map(int,raw_input().split())\ns=[raw_input() for _ in xrange(n)]\ns.sort()\nans=\"\"\nfor i in xrange(n):\n    ans+=s[i]\nprint(ans)\n"}
{"label": 17, "index": 2106, "code": "\n\nN, L = map(int, raw_input().split())\nS = [raw_input() for _ in xrange(N)]\nS.sort()\nprint ''.join([n for n in S])\n"}
{"label": 17, "index": 2107, "code": "N, L = map(int, raw_input().split())\nS = [raw_input().split() for _ in range(N)]\nr = ''\nfor i in sorted(S):\n    r += i[0]\nprint r"}
{"label": 17, "index": 2108, "code": "#coding: utf-8\n#ABC042B\n\nn,l=map(int,raw_input().split())\ns=[raw_input() for i in xrange(n)]\n\ns.sort()\nres=\"\".join(s)\nprint res\n"}
{"label": 17, "index": 2109, "code": "n,l = map(int,input().split())\ns = []\n\nfor i in range(n):\n\ts.append(input())\n\nfor i in range(n-1):\n\tfor j in range(n-1,i,-1):\n\t\tif s[j-1] > s[j]:\n\t\t\ts[j],s[j-1] = s[j-1],s[j]\n\nprint(*s,sep='')"}
{"label": 17, "index": 2110, "code": "a,b=(int(i) for i in input().split()) \nc=[]\nfor i in range(a):\n  c.append(input())\nc.sort()\nd=\"\"\nfor i in range(a):\n  d=d+c[i][0:b]\n\n\nprint(d)"}
{"label": 17, "index": 2111, "code": "n, str_len = [int(e) for e in input().split()]\nstrs = [input() for _ in range(n)]\n\n\ndef main(n, str_len, strs):\n    ordered_strs = sorted(strs)\n    return ''.join(ordered_strs)\n\n\nprint(main(n, str_len, strs))\n"}
{"label": 17, "index": 2112, "code": "# coding: utf-8\n# Here your code !\nN, L = map(int, raw_input().split(\" \"))\nlst = []\nans = \"\"\nfor i in xrange(0,N):\n    S_i = raw_input()\n    lst.append(S_i)\nlst.sort()\nfor i in lst:\n    ans += i\nprint ans"}
{"label": 17, "index": 2113, "code": "def main():\n    N, L = map(int, input().split())\n    S = [input() for _ in range(N)]\n\n    ans = sorted(S)\n    print(''.join(ans))\n\nmain()\n"}
{"label": 17, "index": 2114, "code": "n,l = map(int,raw_input().split())\narray=[]\nfor i in range(n):\n    array.append(raw_input())\n\narray.sort()\n\nprint ''.join(array)\n"}
{"label": 17, "index": 2115, "code": "N, L = map(int, input().split())\ndata = []\nfor _ in range(N):\n    input_data = input()\n    data.append(input_data)\ndata.sort()\nprint(''.join(data))\n"}
{"label": 17, "index": 2116, "code": "N,L=map(int,input().split())\nS=[]\nfor i in range(N):\n  S+=[str(input())]\nS.sort()\nans=\"\"\nfor i in range(N):\n  ans+=S[i]\nprint(ans)"}
{"label": 17, "index": 2117, "code": "#! python3\n\nN, L = [int(x) for x in input().strip().split(' ')]\nS = []\nfor _ in range(N):\n    S.append(input().strip())\nS.sort()\nprint(''.join(S))"}
{"label": 17, "index": 2118, "code": "N, L = map(int, input().split())\nS = [input() for i in range(N)]\nS.sort()\nprint(\"\".join(S))\n"}
{"label": 17, "index": 2119, "code": "# -*- coding: utf-8 -*-\nimport sys,copy,math,heapq,itertools as it,fractions,re,bisect,collections as coll\n\nN, L = map(int, raw_input().split())\nprint \"\".join(sorted([raw_input() for i in xrange(N)]))\n"}
{"label": 17, "index": 2120, "code": "a,b=map(int,input().split())\nS=[input() for i in range(a)]\nS.sort()\nprint(\"\".join(S))"}
{"label": 17, "index": 2121, "code": "N, L = map(int, raw_input().split())\nl = []\nfor _ in range(N):\n    l.append(raw_input().strip())\nprint \"\".join(sorted(l))\n"}
{"label": 17, "index": 2122, "code": "n, l = map(int,input().split())\nprint(''.join(sorted(input() for i in range(n))))"}
{"label": 17, "index": 2123, "code": "n=int(input().split()[0]);print(''.join(sorted([input()for _ in[0]*n])))"}
{"label": 17, "index": 2124, "code": "n, l = map(int, raw_input().strip().split())\na = []\nfor x in xrange(n):\n\ta.append(raw_input().strip())\na.sort()\nans = ''\nfor x in a:\n\tans += x\nprint(ans)"}
{"label": 17, "index": 2125, "code": "n,l=map(int,input().split())\ns=[]\nfor i in range(n):\n    s.append(input())\ns=list(sorted(s))\nprint(''.join(s))"}
{"label": 17, "index": 2126, "code": "# -*- coding:utf-8 -*-\nn, l = map(int, input().split())\ns = [ input() for tmp in range(n) ]\ns.sort()\nprint(''.join(s))"}
{"label": 17, "index": 2127, "code": "import sys\n\nn , l = map(int,input().split())\nword = []\nfor i in range(n):\n  word.append(input())\n\nword.sort()\n\nfor i in range(n):\n  sys.stdout.write(word[i])\n\nprint()\n\n"}
{"label": 17, "index": 2128, "code": "cond = [int(n) for n in input().split(\" \")]\ndata = []\nfor a in range(cond[0]):\n    data.append(input())\ndata = sorted(data)\nprint(\"\".join(data))"}
{"label": 17, "index": 2129, "code": "print(\"\".join(sorted([input()for _ in[\"\"]*int(list(map(int,input().split()))[0])])))"}
{"label": 17, "index": 2130, "code": "N,L = map(int,input().split())\nprint(\"\".join(sorted([ input() for _ in range(N) ])))"}
{"label": 17, "index": 2131, "code": "def read():\n    return map(int, input().split())\n\nn, l = read()\ns = []\nfor _ in range(n):\n    s.append(input())\nprint(''.join(sorted(s)))\n"}
{"label": 17, "index": 2132, "code": "#B\nN, L = [int(i) for i in input().split()]\nprint(\"\".join(sorted([input() for i in range(N)])))"}
{"label": 17, "index": 2133, "code": "N, L = (int(i) for i in input().split())\nString = [input() for s in range(N)]\n\nfor i in range(N-1):\n    start = N - 1\n    #print(\"start \" + str(start))\n    for j in range(start-i):\n        #print(str(start-j-1) + \" \" + str(start-j))\n        Left = String[start-j-1]\n        Right = String[start-j]\n        if Left > Right:\n            String[start-j-1] = Right \n            String[start-j] = Left\n\nfor s in String:\n    print(s, end=\"\")"}
{"label": 17, "index": 2134, "code": "def main():\n    n, l = map(int, input().split())\n    l = []\n    for _ in range(n):\n        l.append(input())\n    print(\"\".join(sorted(l)))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 17, "index": 2135, "code": "from collections import defaultdict\n\n\ndef main():\n    N, L = map(int, input().split())\n    S_list = [input() for _ in range(N)]\n    print(\"\".join(sorted(S_list)))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 17, "index": 2136, "code": "N, L = map(int, input().split())\nS = sorted([input() for i in range(N)])\nprint(\"\".join(S))\n"}
{"label": 17, "index": 2137, "code": "def solve():\n    n, _ = input().split()\n    print(\"\".join(sorted([input() for i in range(int(n))])))\n\n\nif __name__==\"__main__\":\n    solve()"}
{"label": 17, "index": 2138, "code": "n = int(input().split()[0])\ns = [input() for i in [0]*n]\ns.sort()\nprint(\"\".join(s))"}
{"label": 17, "index": 2139, "code": "def solve():\n    n, l = map(int, input().split())\n    s = [input() for _ in range(n)]\n    s.sort()\n    print(''.join(s))\n\n\ndef main():\n    solve()\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 17, "index": 2140, "code": "def read():\n    return int(input())\n\ndef reads(sep=None):\n    return list(map(int, input().split(sep)))\n\ndef main():\n    n, l = reads()\n    s = [input() for _ in range(n)]\n    print(''.join(sorted(s)))\n\nmain()\n"}
{"label": 17, "index": 2141, "code": "N, L = list(map(int, input().split()))\nS = [input() for i in range(N)]\nS.sort()\nprint(''.join(S))"}
{"label": 17, "index": 2142, "code": "# coding: utf-8;\n\ndef main():\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    n, l = map(int, input().split())\n    s = [input() for _ in range(n)]\n    s.sort()\n    print(''.join(s))\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 17, "index": 2143, "code": "N, L = map(int, input().split())\nS = []\nfor _ in range(N):\n    S.append(input())\nprint(''.join(sorted(S)))"}
{"label": 17, "index": 2144, "code": "N, L = map(int, input().split())\na = [input() for i in range(N)]\na.sort()\nb = \"\"\nfor i in range(N):\n b += a[i]\nprint(b)\n"}
{"label": 17, "index": 2145, "code": "n, l = map(int, input().split())\nprint(''.join(sorted(input() for _ in range(n))))"}
{"label": 17, "index": 2146, "code": "N, L = list(map(int, input().split()))\nstrings = [input() for _ in range(N)]\nstrings.sort()\nprint(''.join(strings))"}
{"label": 17, "index": 2147, "code": "N,L = map(int, input().split())\nS = [input() for _ in range(N)]\nS.sort()\nprint(''.join(S))"}
{"label": 17, "index": 2148, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\"\"\"042-b\"\"\"\n\n\nfrom queue import PriorityQueue\nimport sys\n\n\ndef main():\n    \"\"\"Main function.\"\"\"\n    pq = PriorityQueue()\n    N, L = map(int, sys.stdin.readline().split(' '))\n\n    for l in range(N):\n        pq.put(sys.stdin.readline()[:-1])\n\n    while True:\n        sys.stdout.write(pq.get())\n        if pq.empty():\n            break\n    sys.stdout.write('\\n')\n\n\nif __name__ == '__main__':\n    sys.exit(main())"}
{"label": 17, "index": 2149, "code": "N,L=input().split()\nprint(\"\".join(sorted(input()for i in range(int(N)))))"}
{"label": 17, "index": 2150, "code": "print(\"\".join(sorted([input() for i in range(int(input().split()[0]))])))"}
{"label": 17, "index": 2151, "code": "n,ll = map(int,raw_input().split())\nvar = []\ni = 0\nwhile (n > 0):\n\n    var.append(raw_input())\n    l = len(var[i])\n    if l > ll:\n        exit\n    i = i + 1\n    n = n - 1\nvar.sort()\nprint ''.join(var)\n"}
{"label": 17, "index": 2152, "code": "N, L = list(map(int, input().split(\" \")))\nS = []\nfor i in range(N):\n    S.append(input())\n    \nS = sorted(S)  \n\nans = \"\"\n\nfor i in range(N):\n    ans = ans + S[i]\n    \nprint(ans)"}
{"label": 17, "index": 2153, "code": "#!/usr/bin/env python2\n#encoding: UTF-8\n\n# To change this license header, choose License Headers in Project Properties.\n# To change this template file, choose Tools | Templates\n# and open the template in the editor.\nimport math\nline=raw_input().rstrip().split(' ')\nN=int(line[0])\nL=int(line[1])\nlisto=[]\nfor i in range(N):\n    listo.append(raw_input().rstrip())\nlisti=sorted(listo)\nlistni=''\nfor i in range(N):\n    listni+=listi[i]\nprint listni    "}
{"label": 17, "index": 2154, "code": "import sys\n\ndef debug(x, table):\n    for name, val in table.items():\n        if x is val:\n            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)\n            return None\n\ndef solve():\n    n, l = map(int, input().split())\n    S = [input() for i in range(n)]\n    S.sort()\n    print(''.join(S))\n\n\nif __name__ == '__main__':\n    solve()"}
{"label": 17, "index": 2155, "code": "N, L = map(int, input().split())\nS = [input() for _ in range(N)]\nS.sort()\nprint(\"\".join(S))\n"}
{"label": 17, "index": 2156, "code": "N, L = map(int, input().split())\nprint(\"\".join(sorted([input() for x in range(N)])))"}
{"label": 17, "index": 2157, "code": "n,l = map(int,input().split())\n\ns=[]\nfor i in range(n):\n    s.append(input())\ns.sort()\n\nprint(\"\".join(s))\n"}
{"label": 17, "index": 2158, "code": "def b():\n    [N, L] = map(int, raw_input().split(\" \"))\n    str_list = []\n    for i in range(N):\n        str = raw_input()\n        str_list.append(str)\n    print \"\".join(sorted(str_list))\n    \nb()"}
{"label": 17, "index": 2159, "code": "N,L = map(int,input().split())\nprint(\"\".join(sorted([input() for _ in [\"\"]*N])))"}
{"label": 17, "index": 2160, "code": "N, L = map(int, input().split())\nS = ['x' for x in range(N)]\nfor i in range(N):\n\tS[i] = input()\nS.sort()\nfor s in S:\n\tprint(s,end='')\nprint()"}
{"label": 17, "index": 2161, "code": "N,L = map(int,raw_input().split( ))\nword =[]\nfor i in range(N):\n    IN =(raw_input())\n    word.append(IN)\n\nword.sort()\nprint ''.join(word)\n"}
{"label": 17, "index": 2162, "code": "n, l = map(int, input().split())\ns = []\nfor i in range(n):\n    s.append(input())\ns.sort()\nprint(''.join(s))\n"}
{"label": 17, "index": 2163, "code": "import sys\nn, l = map(int, input().split())\nlis = []\n\nfor i in range(n):\n    lis.append(input())\n\nlis2 = sorted(lis)\n\nfor x in lis2:\n    print(x, end=\"\")\nprint()"}
{"label": 17, "index": 2164, "code": "n,L=map(int,input().split())\na=[]\nfor i in range(n):\n    a.append(str(input()))\n\nb=sorted(a)\nans=''.join(b)\nprint(ans)\n"}
{"label": 17, "index": 2165, "code": "n,_=map(int,input().split())\na=sorted([input() for _ in [0]*n])\nprint(*a,sep='')"}
{"label": 17, "index": 2166, "code": "nums = input().split()\nN = int(nums[0])\nL = int(nums[1])\ns = []\nfor i in range(N):\n    s.append(input())\nsorteds = sorted(s)\nans = ''\nfor seq in sorteds:\n    ans += seq\nprint(ans)"}
{"label": 17, "index": 2167, "code": "n,l=map(int,raw_input().split())\ns=[raw_input() for _ in xrange(n)]\ns.sort()\nans=\"\"\nfor i in xrange(n):\n    ans+=s[i]\nprint(ans)\n"}
{"label": 17, "index": 2168, "code": "import sys\nn,l=[int(i) for i in input().split()]\ns=[]\nfor i in range(n):\n    s.append(input())\ns.sort()\nfor i in s:\n    sys.stdout.write(i)\nprint()"}
{"label": 17, "index": 2169, "code": "print ''.join(sorted([raw_input() for i in range(int(raw_input().split()[0]))]))\n"}
{"label": 17, "index": 2170, "code": "n, l = map(int, input().split())\nmoji = []\nfor _ in range(n):\n    moji.append(input())\nmoji.sort()\nprint(''.join(moji))\n"}
{"label": 17, "index": 2171, "code": "N, L = map(int, input().split())\nS = []\nfor _ in range(N):\n\tS.append(input())\nS.sort()\nprint(''.join(S))"}
{"label": 17, "index": 2172, "code": "N,L = map(int,input().split())\nstrs = []\nfor i in range(N):\n    strs.append(input())\nstrs.sort()\nans = \"\"\nfor i in strs:\n    ans += i\nprint(ans)\n"}
{"label": 17, "index": 2173, "code": "N, L = map(int, input().split())\narray = []\nfor i in range(N):\n    array.append(input())\nsort = sorted(array)\nfor w in sort:\n    print(w, end=\"\")\nprint()\n"}
{"label": 17, "index": 2174, "code": "n, l = list(map(int, input().split()))\nl = list()\nwhile(n):\n\tl.append(input())\n\tn -= 1\nl.sort()\nprint(\"\".join(l))"}
{"label": 17, "index": 2175, "code": "N,L = map(int,raw_input().split(\" \"))\ns = [raw_input() for i in range(N)]\ns.sort()\nprint \"\".join(s)\n"}
{"label": 17, "index": 2176, "code": "moji = []\nn, l = map(int, input(). split())\nfor i in range(n):\n    moji.append(input())\n\nmoji.sort()\nfor i in moji:\n    print(i, end = '')"}
{"label": 17, "index": 2177, "code": "a=input().split()\nN=int(a[0])\nL=int(a[1])\nS=[input() for i in range(N)]\nS.sort()\nans=''.join(S)\nprint(ans)"}
{"label": 17, "index": 2178, "code": "N,L=map(int,input().split())\nS=[input() for i in range(N)]\nS.sort()\nprint(''.join(S))"}
{"label": 17, "index": 2179, "code": "N,L=map(int,input().split())\nprint(\"\".join(sorted([input()for _ in[\"\"]*N])))"}
{"label": 17, "index": 2180, "code": "nyuuryoku_num , _ = [int(i) for i in input().split()]\n\ntest_lists = [input() for i in range(nyuuryoku_num)]\nprint(\"\".join(sorted(test_lists)))\n"}
{"label": 17, "index": 2181, "code": "n, l = map(int, input().split())\ns = [input() for i in range(n)]\n\ns.sort()\nprint(''.join(s))\n"}
{"label": 17, "index": 2182, "code": "ans = \"\"\n\ndef get_input():\n    flag = 1\n    cnt = 0\n    while True:\n        if flag == 1:\n            N,L = input().split()\n            flag = 0\n            continue\n        else:\n            a = input()\n            yield ''.join(a)\n            cnt += 1\n            if cnt >= int(N):\n                break\n\nif __name__ == \"__main__\":\n    array = list(get_input())\n    array.sort()\n\n    for i in range(0,len(array)):\n        ans += array[i]\n\n    print(ans)\n"}
{"label": 17, "index": 2183, "code": "N, L = map(int, input().split())\ns = [input() for i in range(N)]\ns.sort()\nprint(''.join(s))\n"}
{"label": 17, "index": 2184, "code": "import numpy as np\n\nN,L = map(int,raw_input().split())\ns = []\n\nfor i in range(N):\n\ts.append( raw_input())\n\nprint reduce((lambda a, b : a + b), np.sort(s))"}
{"label": 17, "index": 2185, "code": "N,L = list(map(int, input().split()))\na = [input() for i in range(N)]\na.sort()\nprint('%s' % ''.join(a))\n"}
{"label": 17, "index": 2186, "code": "N, L = map(int, raw_input().split())\nS = [raw_input() for _ in xrange(N)]\n\n# new_list = sorted(S, key=str.lower)\nS.sort()\n\nprint ''.join([n for n in S])\n"}
{"label": 17, "index": 2187, "code": "N, L = map(int, raw_input().split())\nS = [raw_input() for i in range(N)]\nprint \"\".join(sorted(S))"}
{"label": 17, "index": 2188, "code": "nl = [int(i) for i in input().split(\" \")]\nstr_list = []\nfor _ in range(nl[0]):\n    str_list.append(input())\n\nfor word in sorted(str_list):\n    print(word,end=\"\")\n\nprint()\n"}
{"label": 17, "index": 2189, "code": "catch = input()\ncatch = catch.split(\" \")\nN = int(catch[0])\n\nS = []\n\nfor i in range(N):\n    S.append(input())\n\nS.sort()\n\nfor i in range(N):\n    print(S[i], end = \"\")\n\nprint()\n"}
{"label": 17, "index": 2190, "code": "n, l = map(int, input().split())\nli = [input() for i in range(n)]\nli.sort()\nprint(\"\".join(li))\n"}
{"label": 17, "index": 2191, "code": "# -*- coding: utf-8 -*-\nn,l = map(int,raw_input().split())\ns = ['']*n\nans = ''\nfor i in range(n):\n    s[i] = raw_input()\ns = sorted(s)\nfor i in range(n):\n    ans += s[i]\nprint(ans)"}
{"label": 17, "index": 2192, "code": "n,_=map(int,input().split())\nprint(\"\".join(sorted([input() for i in range(n)])))"}
{"label": 17, "index": 2193, "code": "print(\"\".join(sorted([input()for _ in[\"\"]*int(input().split()[0])])))"}
{"label": 17, "index": 2194, "code": "n, l = [int(i) for i in raw_input().split()]\na = [raw_input() for i in range(n)]\na.sort()\nprint(''.join(a))"}
{"label": 17, "index": 2195, "code": "N, _ = [int(x) for x in input().split()]\nS = sorted([input() for _ in range(N)])\nprint(''.join(S))\n"}
{"label": 17, "index": 2196, "code": "N, L = map(int, input().split())\nS = []\ns = \"\"\nfor _ in range(N):\n    S.append(input())\n    \nS.sort()\n    \nfor i in range(N):\n    s += S[i]\n    \nprint(s)\n    "}
{"label": 17, "index": 2197, "code": "a = \"\"\nn, l = map(int, raw_input().split())\ns = []\nfor i in xrange(0, n):\n\ts.append(raw_input())\n\ns.sort()\nfor i in xrange(0, n):\n\ta = a +s[i]\n\nprint a"}
{"label": 17, "index": 2198, "code": "N, L = map(int, raw_input().split())\nSs = [raw_input() for i in range(N)]\n\nsort_Ss = sorted(Ss)\njoined_Ss = ''.join(sort_Ss)\n\nprint joined_Ss\n"}
{"label": 17, "index": 2199, "code": "N,L=map(int,input().split())\n# N,L= 3,3\nstrs=[input() for i in range(N)]\n# strs=[\"dkx\",\"acx\",\"axx\"]\nout=\"\"\nfor s in sorted(strs):\n\tout+=s\nprint(out)\n"}
{"label": 17, "index": 2200, "code": "import sys\na = []\nfor line in sys.stdin:\n    a.append(str(line))\nb=len(a)\nd=[]\nfor i in xrange(1,b):\n    c=map(str,a[i][:-1].split(\" \"))   \n    d.append(c[0])\ne=sorted(d)\nans=\"\".join(e)\nprint(ans)"}
{"label": 17, "index": 2201, "code": "N, L = map(int, input().split())\nS = [input() for _ in range(N)]\ns = \"\"\n  \nS.sort()\n    \nfor i in range(N):\n    s += S[i]\n    \nprint(s)\n    "}
{"label": 17, "index": 2202, "code": "N, L = map(int, input().split())\nS = []\nfor i in range(N):\n\tS.append(input())\nS.sort()\nS.reverse()\nans = \"\"\nfor i in range(N):\n\tans += S.pop()\nprint(ans)"}
{"label": 17, "index": 2203, "code": "N, L = map(int, raw_input().split())\nS = []\nfor i in xrange(N):\n  S.append(raw_input())\nS.sort()\nans = \"\"\nfor s in S:\n  ans += s\nprint ans\n"}
{"label": 17, "index": 2204, "code": "N,L = map(int,input().split())\nS = [input() for i in range(N)]\n\nS.sort()\nprint(\"\".join(S))"}
{"label": 17, "index": 2205, "code": "n,l = map(int,raw_input().split())\ns = []\nfor i in xrange(n) :\n    s.append(raw_input())\ns.sort()\nt = ''\nfor j in xrange(n) :\n    t += s[j]\nprint t    \n"}
{"label": 17, "index": 2206, "code": "N, L = map(int, raw_input().split())\nprint \"\".join(sorted([raw_input() for i in range(N)]))"}
{"label": 17, "index": 2207, "code": "n, l = map(int,input().split())\ns = []\nfor i in range(n):\n    s.append(input())\nfor i in range(len(s)-1):\n    for j in range(len(s)-1):\n        if s[j] > s[j+1]:\n            s[j], s[j+1] = s[j+1], s[j]\nfor i in s:\n    print(i, end = \"\")\n        \n"}
{"label": 17, "index": 2208, "code": "N,L = list(map(int,input().split()))\nmemo = []\nfor i in range(N):\n    memo.append(input())\nmemo.sort()\nfor j in range(N):\n    print(memo[j],end=\"\")"}
{"label": 17, "index": 2209, "code": "n, l = map(int, input().split())\nli = []\nfor i in range(n):\n    s = input()\n    li.append(s)\n\nli.sort()\nans = \"\".join(map(str, li))\nprint(ans)\n"}
{"label": 18, "index": 2210, "code": "n = input()\nprint n*(n+1)/2\n"}
{"label": 18, "index": 2211, "code": "n = input()\na = 0\nfor i in range(1,n+1):\n\ta+=i\nprint a\t"}
{"label": 18, "index": 2212, "code": "n = int(input())\nprint( n*(n+1)//2 )\n"}
{"label": 18, "index": 2213, "code": "n = input()\n\nprint n * (n + 1) / 2\n"}
{"label": 18, "index": 2214, "code": "n = int(input())\nans=0\nfor i in range(1,n+1):\n    ans+=i\nprint(ans)"}
{"label": 18, "index": 2215, "code": "N = int( input() )\nsumofcandy = 0\n\nfor i in range(1, N + 1):\n    sumofcandy += i\nprint(sumofcandy)"}
{"label": 18, "index": 2216, "code": "N = input()\nprint (N * (N+1) / 2)"}
{"label": 18, "index": 2217, "code": "n = int(input())\nprint(int(n*(n+1)/2))\n"}
{"label": 18, "index": 2218, "code": "n = int(raw_input())\nprint n * (n+1) / 2"}
{"label": 18, "index": 2219, "code": "def main():\n    n = int(input())\n    print(sum(i for i in range(1, n + 1)))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 18, "index": 2220, "code": "N = int(input())\n\nsum = 0\n\nfor i in range(N+1):\n\tsum += i\n\t\nprint(sum)"}
{"label": 18, "index": 2221, "code": "n = int(input())\name = 0\nfor i in range(n):\n    ame += i + 1\nprint(ame)"}
{"label": 18, "index": 2222, "code": "print(sum([i for i in range(int(input())+1)]))"}
{"label": 18, "index": 2223, "code": "N = int(input())\nprint((N+1)*N//2)"}
{"label": 18, "index": 2224, "code": "def fact(n):\n   if n == 0: return 0\n   return n + fact(n-1)\n\ndef main():\n    a = int(raw_input())\n    print fact(a)\n    \nif __name__ == '__main__':\n    main()\n    "}
{"label": 18, "index": 2225, "code": "x=input()\nsum=0\nfor i in range(1,x+1):\n    sum+=i\n\nprint sum"}
{"label": 18, "index": 2226, "code": "i = input()\nans = 0\nfor j in range(i+1):\n    ans = ans + j\nprint ans"}
{"label": 18, "index": 2227, "code": "N =int(input())\nsum =0\nfor i in range(1,N+1):\n     sum = i+sum\n\nprint(sum)"}
{"label": 18, "index": 2228, "code": "n=int(input())\nprint(n*(n+1)//2)\n"}
{"label": 18, "index": 2229, "code": "N = int(input())\nsum = 0\n\nfor i in range(N + 1):\n    sum += i\n\nprint(sum)\n"}
{"label": 18, "index": 2230, "code": "print(sum(range(int(input())+1)))"}
{"label": 18, "index": 2231, "code": "N = int(input())\nprint(N * (N + 1) // 2)"}
{"label": 18, "index": 2232, "code": "n=int(raw_input())\nprint (1+n)*(n/2) if n%2==0 else (1+n)*(n/2)+(1+n)/2"}
{"label": 18, "index": 2233, "code": "N=int(raw_input())\nans=0\n\nfor i in range(1,N+1):\n    ans += i\n\nprint ans\n\n"}
{"label": 18, "index": 2234, "code": "s = int(input())\nprint(s*(s+1)//2)"}
{"label": 18, "index": 2235, "code": "# -*- coding: utf-8 -*-\ninput = int(raw_input())\ncount = 0\nfor i in range(1, input+1):\n count += i\nprint count"}
{"label": 18, "index": 2236, "code": "n = int(raw_input())\ncnt = 0\nfor i in xrange(n + 1):\n    cnt += i\nprint cnt\n"}
{"label": 18, "index": 2237, "code": "n = int(input())\nprint((n + 1) * n // 2)"}
{"label": 18, "index": 2238, "code": "\n# \u521d\u9805a\uff0c\u4ea4\u5deed\u306e\u6570\u5217n\u500b\u306e\u548c\ndef arithmetic_series(a, d, n):\n    return n * (2 * a + (n - 1) * d) // 2\n\n\ndef main():\n    n = int(input())\n    print(arithmetic_series(1, 1, n))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 18, "index": 2239, "code": "ans = 0\n\nN = int(input())\n\nfor i in range(1,N+1):\n    ans += i\n\nprint(ans)\n"}
{"label": 18, "index": 2240, "code": "N = int(input())\n\nsum = 0\n\nfor i in range(N+1):\n    sum += i\n\nprint(sum)"}
{"label": 18, "index": 2241, "code": "N = int(input())\ni = 1\nanswer = 0\nwhile  i <= N:\n\tanswer += i\n\ti += 1\n\nprint(answer) "}
{"label": 18, "index": 2242, "code": "n = int(input())\nprint(sum(list(range(1,n+1))))"}
{"label": 18, "index": 2243, "code": "N = int(input())\nprint(N*(N+1)//2)"}
{"label": 18, "index": 2244, "code": "N = input()\nprint ((N+1)*N/2)\n"}
{"label": 18, "index": 2245, "code": "def read():\n    return int(input())\n\ndef reads(sep=None):\n    return list(map(int, input().split(sep)))\n\ndef main():\n    n = read()\n    print(sum([i+1 for i in range(n)]))\n\nmain()\n"}
{"label": 18, "index": 2246, "code": "print sum([i for i in range(1, input() + 1)])\n"}
{"label": 18, "index": 2247, "code": "x = int(input())\nprint(int(x*(x+1)/2))"}
{"label": 18, "index": 2248, "code": "# coding: utf-8;\n\ndef main():\n    n = int(input())\n    r = 0\n    for i in range(1, n + 1): r += i\n    print(r)\n    \nif __name__ == '__main__':\n    main()\n"}
{"label": 18, "index": 2249, "code": "n = int(raw_input())\nprint n*(n+1) / 2\n"}
{"label": 18, "index": 2250, "code": "n = int(input())\nprint((n+1)*n//2)\n"}
{"label": 18, "index": 2251, "code": "n = input()\na = 0\nfor i in range(1,n+1):\n\ta+=i\nprint a\t"}
{"label": 18, "index": 2252, "code": "N = int(raw_input())\nans = 0\nfor n in xrange(1, N+1):\n    ans += n\nprint ans"}
{"label": 18, "index": 2253, "code": "N = int(raw_input())\nprint N*(N+1)/2"}
{"label": 18, "index": 2254, "code": "n=int(input())\nprint(n*(n+1)//2)"}
{"label": 18, "index": 2255, "code": "n = int(raw_input())\nprint sum(range(n+1))\n"}
{"label": 18, "index": 2256, "code": "def ri(): return int(input())\ndef rli(): return list(map(int, input().split()))\ndef rls(): return list(input())\ndef pli(a): return \"\".join(list(map(str, a)))\n\nn = ri()\nprint(n*(n+1)//2)"}
{"label": 18, "index": 2257, "code": "n = input()\nprint int(n*(n+1)*0.5)"}
{"label": 18, "index": 2258, "code": "n = int(input())\nans = 0\n\nfor count in range(n+1):\n    ans += count\nprint(ans)"}
{"label": 18, "index": 2259, "code": "N = int(input())\nsum = 0\n\nfor i in range(N + 1):\n    sum += i;\n\nprint(sum)"}
{"label": 18, "index": 2260, "code": "def main():\n    N = int(input())\n\n    ans = N * (N + 1) // 2\n    print(ans)\n\nmain()\n"}
{"label": 18, "index": 2261, "code": "N = int(raw_input())\n\nprint N * (N+1) / 2\n"}
{"label": 18, "index": 2262, "code": "#!/usr/bin/env python\n\nN = int(input())\nprint(N * (N + 1) // 2)\n"}
{"label": 18, "index": 2263, "code": "n = int(input())\nprint(n*(n+1)//2)\n"}
{"label": 18, "index": 2264, "code": "n = input()\na = 0\nfor i in range(1,n+1):\n\ta+=i\nprint a\t"}
{"label": 18, "index": 2265, "code": "n = int(input())\nprint(sum(list(range(1,n+1))))"}
{"label": 18, "index": 2266, "code": "import math\nN=int(input())\nans=0\nfor i in range(N):\n  ans+=i+1\nprint(ans)"}
{"label": 18, "index": 2267, "code": "N = input()\nc = 0\nfor i in range(1,N):\n    c+=i\nprint c + N"}
{"label": 18, "index": 2268, "code": "def solve(N):\n return N * (N + 1) // 2 \n\nprint(solve(int(input())))"}
{"label": 18, "index": 2269, "code": "N = input()\nprint N * (N+1) / 2"}
{"label": 18, "index": 2270, "code": "N=int(input())\na=0\nfor count in range(N):\n    a=a+(1+count)\n\nprint(a)"}
{"label": 18, "index": 2271, "code": "x=int(input())\nn=0\nfor i in range(x):\n    n = n+(i+1)\nprint(n)\n"}
{"label": 18, "index": 2272, "code": "n = int(input())\nprint (n*(n+1))/2"}
{"label": 18, "index": 2273, "code": "def ini(): return int(input())\ndef inli(): return list(map(int, input().split()))\ndef inf(): return float(input())\ndef inlf(): return list(map(float, input().split()))\ndef inl(): return list(input())\ndef pli(): return \"\".join(list(map(str, ans)))\n\nn = ini()\nans= 0\nfor i in range(n+1):\n    ans = ans +i\nprint(ans)"}
{"label": 18, "index": 2274, "code": "n=int(input())\nprint(n*(n+1)//2)"}
{"label": 18, "index": 2275, "code": "N = int(input())\nans = sum([i for i in range(1, N + 1)])\nprint(ans)\n"}
{"label": 18, "index": 2276, "code": "n=int(input())\nprint(n*(n+1)//2)\n"}
{"label": 18, "index": 2277, "code": "n = int(raw_input())\n\nprint ((1 + n) * n) / 2"}
{"label": 18, "index": 2278, "code": "N = int(input())\na = 0\nfor i in range(1,N+1):\n\ta += i\nprint(a)"}
{"label": 18, "index": 2279, "code": "n = int(input())\nprint(n * (n + 1) // 2)\n"}
{"label": 18, "index": 2280, "code": "N = int(input())\nx = 0\n\nfor i in range(N+1):\n\tx = x + i\n\nprint(x)"}
{"label": 18, "index": 2281, "code": "n = int(input())\nresult = 0\nfor i in range(1,n+1):\n    result = result + i\nprint(result)"}
{"label": 18, "index": 2282, "code": "# coding: utf-8\n\nimport functools\n\n\nn = int(input())\nanswer = functools.reduce(lambda x, y: x + y, range(1, n+1))\nprint(answer)"}
{"label": 18, "index": 2283, "code": "a = int(input())\nprint((a*(a+1)/2))"}
{"label": 18, "index": 2284, "code": "n = int(raw_input())\nprint n*(n+1)/2"}
{"label": 18, "index": 2285, "code": "# -*- coding: utf-8 -*-\nimport sys,copy,math,heapq,itertools as it,fractions,re,bisect,collections as coll\n\nN = int(raw_input())\nprint N*(N + 1)/2\n"}
{"label": 18, "index": 2286, "code": "N = int(input())\nprint(int(N * (N+1) / 2))\n"}
{"label": 18, "index": 2287, "code": "n=int(input());print(n*-~n>>1)"}
{"label": 18, "index": 2288, "code": "n = int(input())\nprint(int(n*(n+1)/2))"}
{"label": 18, "index": 2289, "code": "N = int(input())\ni = 0\nsum=0\nwhile i<N:\n    i += 1\n    sum += i\nprint(sum)"}
{"label": 18, "index": 2290, "code": "N = int(input())        \ncnt = 0                 \nfor i in range(1, N+1): \n    cnt += i            \nprint(cnt)              \n"}
{"label": 18, "index": 2291, "code": "n = int(input())\nans = 0\nfor i in range(1,n+1):\n    ans += i\nprint(ans)"}
{"label": 18, "index": 2292, "code": "n = int(input())\nprint((n+1)*n//2)"}
{"label": 18, "index": 2293, "code": "N=int(raw_input())\n\nn=0\n\nfor i in range(0,N+1):\n    n+=i\n\nprint n"}
{"label": 18, "index": 2294, "code": "a = int(input())\nprint(a * (a+1) // 2)"}
{"label": 18, "index": 2295, "code": "#coding: utf-8\n#ABC043A\n\nn=int(raw_input())\n\nprint n*(n+1)/2\n"}
{"label": 18, "index": 2296, "code": "n = int(input())\nprint(n*(n+1)//2)\n"}
{"label": 18, "index": 2297, "code": "N=int(input())\nsum=0\nfor i in range(N+1):\n    sum+=i\nprint(sum)"}
{"label": 18, "index": 2298, "code": "a=int(input())\n\nprint(int(a*(a+1)/2))"}
{"label": 18, "index": 2299, "code": "n = int(input())\ns = 0\nfor i in range(1, n+1):\n    s += i\nprint(s)\n"}
{"label": 18, "index": 2300, "code": "n = int(raw_input())\nprint n * (n+1) / 2"}
{"label": 18, "index": 2301, "code": "def acum(n):\n    if n <= 1:\n        return 1\n    return n + acum(n - 1)\nprint(acum(int(input())))"}
{"label": 18, "index": 2302, "code": "N = input()\nprint ((1+N)*N/2)\n"}
{"label": 18, "index": 2303, "code": "import sys\n\ndef debug(x, table):\n    for name, val in table.items():\n        if x is val:\n            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)\n            return None\n\ndef solve():\n    N = int(input())\n    ans = N * (N+1) // 2\n    print(ans)\n\n\nif __name__ == '__main__':\n    solve()"}
{"label": 18, "index": 2304, "code": "# -*- coding: utf-8 -*-\n\ndef main():\n    x=int(input())\n    \n    print(x*(x+1)//2)\n    \n\nif __name__==\"__main__\":\n    main()\n    "}
{"label": 18, "index": 2305, "code": "n = int(input())\nprint((n+1)*n//2)"}
{"label": 18, "index": 2306, "code": "n = int(input())\nsum = 0\nfor i in range(1, n+1):\n    sum += i\nprint(sum)"}
{"label": 18, "index": 2307, "code": "import re\nimport doctest\n\nclass IO_for_Contest(object):\n    @staticmethod\n    def my_input():\n        #return raw_input()\n        return input()\n\n    @staticmethod\n    def read_from_input():\n        #TODO: impl this for each problem\n        pass\n\n    @staticmethod\n    def read_line():\n        return IO_for_Contest.my_input().strip()\n\n    @staticmethod\n    def read_int():\n        return int(IO_for_Contest.my_input().strip())\n\n    @staticmethod\n    def read_n_int(n):\n        return list(map( \\\n                int, \\\n                re.split('\\s+', IO_for_Contest.my_input().strip())))[ : n]\ndef solve():\n    n = IO_for_Contest.read_int()\n    print(int(n * (n + 1) / 2))\n\nif __name__ == '__main__':\n    #doctest.testmod()\n    solve()"}
{"label": 18, "index": 2308, "code": "# -*- coding:utf-8 -*-\nN = int(input())\nans = 0\nfor tmp in range(1,N+1):\n    ans += tmp\nprint(ans)"}
{"label": 18, "index": 2309, "code": "N=int(input())\nprint(N*(N+1)//2)"}
{"label": 18, "index": 2310, "code": "N = input()\nprint N*(N+1)/2\n"}
{"label": 18, "index": 2311, "code": "N = int(input())\nprint(int(N * (N + 1) / 2))"}
{"label": 18, "index": 2312, "code": "#! /usr/bin/env python3\n\nprint(sum(x for x in range(1, int(input())+1)))"}
{"label": 18, "index": 2313, "code": "N = int(raw_input())\nprint N * ( N + 1 ) / 2"}
{"label": 18, "index": 2314, "code": "print(sum(range(int(input())+1)))"}
{"label": 18, "index": 2315, "code": "from collections import defaultdict\n\n\ndef main():\n    print(sum([i for i in range(1, int(input()) + 1)]))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 18, "index": 2316, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\n\ndef main():\n    n = int(input())\n    return int(n*(n+1) // 2)\n\n\n\nprint(main())\n"}
{"label": 18, "index": 2317, "code": "n=int(input())\nprint((n*(n+1))//2)"}
{"label": 18, "index": 2318, "code": "\nx = int(input())\n\nprint(int(x*(x+1)/2))"}
{"label": 18, "index": 2319, "code": "N = int(raw_input())\nprint N * (N + 1) / 2"}
{"label": 18, "index": 2320, "code": "# -*- coding: utf-8 -*-\n# problem A\n\nN = int(input())\n\nans = 0\nfor i in range(N+1):\n    ans += i\nprint(ans)"}
{"label": 18, "index": 2321, "code": "n = int(raw_input())\n \ns = n*( n+1)/2\n \nprint s"}
{"label": 18, "index": 2322, "code": "N = int(input())\n\nans = 0\n\nif N % 2 == 0:\n    ans = (N + 1) * (N // 2)\n    \nelse:\n    ans = (N + 1) * ((N-1) // 2) + (N+1) // 2\n    \nprint(ans)"}
{"label": 18, "index": 2323, "code": "N = int(input())\nprint(N*(N+1)//2)\n"}
{"label": 18, "index": 2324, "code": "n = int(raw_input())\nprint sum(range(n+1))\n"}
{"label": 18, "index": 2325, "code": "N = int(input())\nprint(sum(range(N+1)))"}
{"label": 18, "index": 2326, "code": "N=int(input())\n\nC=int(N/2*(2+N-1))\n\nprint(C)"}
{"label": 18, "index": 2327, "code": "N=input()\n\nprint N*(N+1)/2\n"}
{"label": 18, "index": 2328, "code": "n = int(input())\nans = 0\nfor i in range(n):\n    ans += i+1\n\nprint(ans)"}
{"label": 18, "index": 2329, "code": "N=int(input())\nprint(int(N*(N+1)/2))"}
{"label": 18, "index": 2330, "code": "a=int(raw_input())\nb=0\nfor i in range(1,a+1):\n    b=b+i\nprint(b)"}
{"label": 18, "index": 2331, "code": "print(sum(range(1, int(input()) + 1)))"}
{"label": 18, "index": 2332, "code": "N = int(input())\nprint(int(N*(N+1)/2))"}
{"label": 18, "index": 2333, "code": "n=int(raw_input())\nprint (n*(n+1))/2"}
{"label": 18, "index": 2334, "code": "n=input()\nprint n*(n+1)/2"}
{"label": 18, "index": 2335, "code": "# coding: UTF8\n# python3\n \n# input = \"10\"\ninput = input() \n \nsum = 0\nfor num in range(1,int(input) + 1):\n\tsum += num;\nprint(sum)"}
{"label": 18, "index": 2336, "code": "N = int(input())\nans = 0\nfor i in range(N+1):\n   ans += i\nprint(ans)"}
{"label": 18, "index": 2337, "code": "n = input()\nprint (1 + n)*n / 2"}
{"label": 18, "index": 2338, "code": "n = input()\nprint n*(n+1)/2"}
{"label": 18, "index": 2339, "code": "A = 0\nS = input()\nfor n in range(1,int(S)+1):\n A = A + n\nprint(A)"}
{"label": 19, "index": 2340, "code": "ret = \"\"\ns = input().strip()\ns = list(str(s))\n#print(s)\nfor c in s:\n    if c == \"0\":\n        ret = ret + \"0\"\n    elif c == \"1\":\n        ret = ret + \"1\"\n    else:\n        if ret != \"\":\n            ret = ret[:-1]\nprint(ret)\n"}
{"label": 19, "index": 2341, "code": "import re\nimport doctest\n\nclass IO_for_Contest(object):\n    @staticmethod\n    def my_input():\n        #return raw_input()\n        return input()\n\n    @staticmethod\n    def read_from_input():\n        #TODO: impl this for each problem\n        pass\n\n    @staticmethod\n    def read_line():\n        return IO_for_Contest.my_input().strip()\n\n    @staticmethod\n    def read_int():\n        return int(IO_for_Contest.my_input().strip())\n\n    @staticmethod\n    def read_n_int(n):\n        return list(map( \\\n                int, \\\n                re.split('\\s+', IO_for_Contest.my_input().strip())))[ : n]\ndef solve():\n    l = []\n    buf = IO_for_Contest.read_line()\n    for x in buf:\n        if x == 'B':\n            if len(l) > 0:\n                l.pop()\n        else:\n            l.append(x)\n    print(''.join(l))\n\nif __name__ == '__main__':\n    #doctest.testmod()\n    solve()"}
{"label": 19, "index": 2342, "code": "s=raw_input()\nans=\"\"\nfor i in xrange(len(s)):\n    if s[i]==\"0\":\n        ans+=\"0\"\n    elif s[i]==\"1\":\n        ans+=\"1\"\n    else:\n        if ans==\"\":\n            continue\n        else:\n            ans=ans[0:-1]\nprint ans\n"}
{"label": 19, "index": 2343, "code": "s = raw_input()\ntxt = \"\"\nfor x in s:\n    if x == 'B':\n        if len(txt) > 0:\n            txt = txt[:-1]\n    else:\n        txt += x\n\nprint txt"}
{"label": 19, "index": 2344, "code": "s = list(input())\nans = []\nfor i in s:\n    if i == \"1\" or i == \"0\":\n        ans.append(i)\n    else:\n        try:\n            ans.pop()\n        except:\n            pass\n\nfor i in ans:\n    print(i, end = \"\")\nprint(\"\")\n\n"}
{"label": 19, "index": 2345, "code": "moji = []\ns = raw_input()\nfor i in s:\n    if i == '0':\n        moji.append('0')\n    if i == '1':\n        moji.append('1')\n    if i == 'B':\n        if len(moji) != 0:\n            moji.pop(len(moji)-1)\nprint ''.join(moji)"}
{"label": 19, "index": 2346, "code": "s = list(input())\n\nans = str()\nfor i in s:\n    if i == \"0\":\n        ans += \"0\"\n    elif i == \"1\":\n        ans += \"1\"\n    elif i == \"B\":\n        ans = ans[:-1]\n\nprint(ans)"}
{"label": 19, "index": 2347, "code": "import re\ndef f(s):\n    global a\n    r = p.subn('',s)\n    if r[1]!=0:\n        return f(r[0])[0]\n    else:\n        a = r[0]\n        return '0'\nN = raw_input()\np = re.compile('\\dB')\nq = re.compile('^B*')\nf(N)\nprint q.sub('',a)\n"}
{"label": 19, "index": 2348, "code": "s=list(reversed(input()))\nans=\"\"\ncnt=0\nfor c in s:\n    if c == 'B':\n        cnt += 1\n    elif cnt > 0:\n        cnt -= 1\n    else:\n        ans += c\nprint(''.join(reversed(ans)))"}
{"label": 19, "index": 2349, "code": "import re\nS = input()\nif 'B' in S:\n\tA = re.split(\"01BB|10BB|11BB|00BB|0B|1B\",S)\n\tA = \"\".join(A)\n\tif 'B' in A:\n\t\tC = re.split(\"01BB|10BB|11BB|00BB|0B|1B\",A)\n\t\tC = \"\".join(C)\n\t\tC = C.split(\"B\")\n\t\tprint(\"\".join(C))\n\telse:\n\t\tprint(A)\nelse:\n\tprint(S)"}
{"label": 19, "index": 2350, "code": "s = raw_input()\n\nstr_list = list(s)\noutput_list = []\nfor i, c in enumerate(str_list):\n    if c != 'B':\n        output_list.append(c)\n    else:\n        if output_list:\n            output_list.pop()\n\nprint ''.join(output_list)\n"}
{"label": 19, "index": 2351, "code": "s=list(input())\nout=[]\nfor i in s:\n    if(i=='1'):\n        out.append(1)\n    elif(i=='0'):\n        out.append(0)\n    elif(i=='B'):\n        if(len(out)==0):\n            continue\n        del out[-1]\nfor x in out:\n    print(x,end=\"\")\nprint()"}
{"label": 19, "index": 2352, "code": "s = input()\ni = 0\n\nans = ['0']*(len(s))\n\nfor c in s:\n\tif c == '0':\n\t\tans[i] = '0'\n\t\ti += 1\n\telif c == '1':\n\t\tans[i] = '1'\n\t\ti += 1\n\telif c == 'B':\n\t\tif i > 0:\n\t\t\ti -= 1\n\nfor i in range(i):\n\tprint(ans[i], end='')\nprint()\n"}
{"label": 19, "index": 2353, "code": "s = input()\n\nstr = \"\"\n\nfor i in s:\n    if i == \"B\":\n        if len(str) != 0:\n            str = str[0:-1]\n    else:\n        str += i \n\nprint(str)\n\n"}
{"label": 19, "index": 2354, "code": "#B\nS = input()\nans = []\nfor s in S:\n    if s =='B' and len(ans)>0:\n        del ans[-1]\n    elif s == '1' or s == '0':\n        ans.append(s)\nprint(\"\".join(ans))"}
{"label": 19, "index": 2355, "code": "s = list(map(str, input()))\nl = len(s)\nli = []\nfor i in range(l):\n    if s[i] == \"0\":\n        li.append(0)\n    elif s[i] == \"1\":\n        li.append(1)\n    elif s[i] == \"B\" and li != []:\n        li_len = len(li)\n        li.pop(li_len-1)\nans = \"\".join(map(str, li))\nprint(ans)\n"}
{"label": 19, "index": 2356, "code": "s = raw_input()\n\ndef type(l, letters):\n    if l == '0' or l == '1':\n        letters += l\n    elif l == 'B':\n        if len(letters) != 0:\n            letters = letters[:-1]\n    return letters\n\nans = ''\nfor l in s:\n    ans = type(l, ans)\n\nprint ans\n"}
{"label": 19, "index": 2357, "code": "def main():\n    s = input()\n    ans = \"\"\n    for c in s:\n        if c == \"0\" or c == \"1\":\n            ans += c\n        else:\n            ans = ans[:-1]\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 19, "index": 2358, "code": "S = input()\n\nans = \"\"\n\nfor i in range(len(S)):\n    if S[i] == 'B':\n        if len(ans) > 0: \n            ans = ans[:-1]\n    elif S[i] == '0':\n        ans = ans + \"0\"\n    elif S[i] == '1':\n        ans = ans + \"1\"\n        \nprint(ans)"}
{"label": 19, "index": 2359, "code": "s = input()\nans = []\nfor si in s:\n    if si == \"0\":\n        ans.append('0')\n    elif si == \"1\":\n        ans.append('1')\n    elif si == 'B' and len(ans):\n        ans.pop()\nprint(\"\".join(ans))\n\n"}
{"label": 19, "index": 2360, "code": "y=raw_input()\na=[]\nfor i in y:\n    if i=='1' or i=='0':\n        a.append(i)\n    else:\n        if a==[]:\n            continue\n        else:\n            del a[len(a)-1]\nprint ''.join(a)"}
{"label": 19, "index": 2361, "code": "input = str(raw_input())\nans = []\nfor word in input:\n if word == 'B' > 0:\n  if  len(ans) == 0:\n   continue\n  ans.pop()\n else:\n  ans.append(word)\nprint ''.join(ans)\n"}
{"label": 19, "index": 2362, "code": "s = raw_input()\nmystr = \"\"\nfor x in s:\n    if (x=='B'):\n        mystr = mystr[0:len(mystr)-1]\n    else: mystr += x\nprint mystr"}
{"label": 19, "index": 2363, "code": "s = input()\nans = ''\n\nfor c in s:\n    if c == \"0\" or c == \"1\":\n        ans += c\n    elif c == \"B\" and len(ans) > 0:\n        ans = ans[:-1]\n\nprint(ans)"}
{"label": 19, "index": 2364, "code": "s = input()\nans = \"\"\nfor l in s:\n    if l == \"B\":\n        ans = ans[:-1]\n    else:\n        ans += l\nprint(ans)"}
{"label": 19, "index": 2365, "code": "s = input()\na = \"\"\nfor i in range(len(s)):\n\tif s[i] == \"0\":\n\t\ta += \"0\"\n\telif s[i] == \"1\":\n\t\ta += \"1\"\n\telse:\n\t\tif a != \"\":\n\t\t\ta = a[:len(a)-1]\nprint(a)\n\n"}
{"label": 19, "index": 2366, "code": "s = list(input())\nt = []\nfor i in s:\n    if i == '0' or i == '1':\n        t.append(i)\n    elif i == 'B' and len(t) != 0:\n        del t[len(t)-1]\nprint(''.join(t))"}
{"label": 19, "index": 2367, "code": "s = input()\noutput = []\nfor i in range(len(s)):\n    if s[i] != 'B':\n        output.append(s[i])\n    else:\n        if '0' in output or '1' in output:\n            del output[-1]\ncout = ''\nfor x in output:\n    cout += x\nprint(cout)"}
{"label": 19, "index": 2368, "code": "# coding: utf-8;\n\ndef main():\n    s = input()\n    ans = ''\n\n    for i, c in enumerate(s):\n        if c == '1' or c == '0':\n            ans += c\n        elif i > 0:\n            ans = ans[:-1]\n\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 19, "index": 2369, "code": "a = raw_input()\nans = ''\nfor x in a:\n\tif x == '0':\n\t\tans += '0'\n\tif x == '1':\n\t\tans += '1'\n\tif x == 'B':\n\t\tif ans != '':\n\t\t\tans = ans [:-1]\nprint(ans)"}
{"label": 19, "index": 2370, "code": "string = input()\nresult = []\nj=0\nfor i in range(len(string)):\n    if string[i]=='0':\n        result.append('0')\n    elif string[i]=='1':\n        result.append('1')\n    elif string[i]=='B' and len(result)>=1 and result[-1] in ['0','1']:\n        del result[-1]\nstr_result=\"\".join(result)\nprint(str_result)"}
{"label": 19, "index": 2371, "code": "#! /usr/bin/env python3\ns = []\nfor i in input():\n    if i == 'B':\n        s = s[:-1]\n    else:\n        s += [i]\nprint(\"\".join(s))"}
{"label": 19, "index": 2372, "code": "S = input()\nout = []\n\nfor i in S:\n    if i == '0' or i == '1':\n        out.append(i)\n    elif len(out) != 0:\n        out.pop()\n\nprint(\"\".join(out))\n"}
{"label": 19, "index": 2373, "code": "s = input()\n\na = ''\n\nfor i in range(len(s)):\n    if s[i] == 'B':\n        a = a[:-1]\n    else:\n        a += s[i]\n\nprint(a)"}
{"label": 19, "index": 2374, "code": "s = input()\nans = []\nfor c in s:\n\tif c == '0' or c == '1':\n\t\tans.append(c)\n\telse:\n\t\tif len(ans) > 0:\n\t\t\tdel ans[-1]\n\nprint(\"\".join(ans))\n\n"}
{"label": 19, "index": 2375, "code": "s = input()\n\nans = []\nfor i in range(len(s)):\n    if s[i] == '0':\n        ans.append('0')\n    elif s[i] == '1':\n        ans.append('1')\n    elif s[i] == 'B' and not len(ans) == 0:\n        ans.pop()\nprint(''.join(ans))"}
{"label": 19, "index": 2376, "code": "def main():\n    S = input()\n\n    ans = []\n    for s in S:\n        if s == 'B':\n            try:\n                ans.pop()\n            except:\n                pass\n        else:\n            ans.append(s)\n\n    print(''.join(ans))\n\nmain()\n"}
{"label": 19, "index": 2377, "code": "s = list(input())\nans = []\nfor i in s:\n    if i == 'B':\n        if len(ans) != 0:\n            ans.pop()\n    else:\n        ans.append(i)\nprint(''.join(ans))\n"}
{"label": 19, "index": 2378, "code": "#!/usr/bin/env python\n\ns = input()\nans = [''] * len(s)\npoint = 0\nfor word in s:\n    if word == 'B':\n        point = max(0, point - 1)\n    else:\n        ans[point] = word\n        point += 1\nprint(\"\".join(ans[:point]))\n"}
{"label": 19, "index": 2379, "code": "s = raw_input()\nq = []\nfor c in s:\n  if c != 'B':\n    q.append(c)\n  elif len(q) > 0:\n    q.pop()\nprint ''.join(q)"}
{"label": 19, "index": 2380, "code": "s=''\nfor c in input():\n  if c == 'B': s = s[0:-1]\n  else: s += c\nprint(s)"}
{"label": 19, "index": 2381, "code": "li = list(input())\nstr = []\nfor i in range(len(li)):\n\tif li[i] == '0':\n\t\tstr.append('0')\n\telif li[i] == '1':\n\t\tstr.append('1')\n\telse:\n\t\tif len(str) != 0:\n\t\t\tstr.pop()\n\t\telse:\n\t\t\tcontinue\nprint(''.join(str))"}
{"label": 19, "index": 2382, "code": "s = raw_input()\nans = []\nfor ele in s:\n    if ele != \"B\":\n        ans.append(ele)\n    else:\n        try:\n            ans.pop()\n        except:\n            pass\nprint \"\".join(ans)\n"}
{"label": 19, "index": 2383, "code": "# -*- coding: utf-8 -*-\n# problem B\n\ns = list(input())\nl = []\nfor i in s:\n    if i == \"0\" or i == \"1\":\n        l.append(i)\n    elif len(l) > 0:\n        l.pop()\n    else:\n        pass\nprint(\"\".join(l))"}
{"label": 19, "index": 2384, "code": "s = raw_input()\nstr = []\nfor c in s:\n    if c is '0':\n        str.append('0')\n    elif c is '1':\n        str.append('1')\n    elif len(str)!=0:\n        del str[-1]\n        \nprint ''.join(str)"}
{"label": 19, "index": 2385, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\n\ndef main():\n    S = input()\n\n    T = \"\"\n    for c in S:\n        if c == \"B\":\n            T = T[:-1]\n        else:\n            T += c\n\n    print(T)\n\nif __name__ == \"__main__\": main()\n"}
{"label": 19, "index": 2386, "code": "s=input()\n\nans=\"\"\nfor c in s:\n    if c=='B':\n        if len(ans)>0:\n            ans=ans[:-1]\n    else:\n        ans += c\n\nprint(ans)\n"}
{"label": 19, "index": 2387, "code": "s = input()\n\nans = \"\"\nfor i in range(0,len(s)):\n    if s[i] == 'B':\n        if(len(ans) < 0):\n            pass\n        else:\n            ans = ans[:-1]\n    else:\n        ans += s[i]\nprint(ans)"}
{"label": 19, "index": 2388, "code": "\ns = raw_input()\nret = []\n\nfor i in s:\n    if i == 'B':\n        if len(ret) != 0:\n            ret.pop(len(ret)-1)\n    else:\n        ret.append(i)\n\nprint \"\".join(ret)"}
{"label": 19, "index": 2389, "code": "from collections import deque\ns = str(input())\nb = deque()\n\nfor i in range(len(s)):\n    if s[i] == \"0\":\n        b.append(\"0\")\n    elif s[i] == \"1\":\n        b.append(\"1\")\n    elif s[i] == \"B\":\n        if len(b) == 0:\n            pass\n        else:\n            b.pop()\n\n\nprint(\"\".join(map(str, b)))\n"}
{"label": 19, "index": 2390, "code": "\ncommand=raw_input()\nfinal=[-1]*10\ni=0\nfor var in command:\n    if var==\"0\":\n        final[i]=\"0\"\n        i+=1\n    elif var==\"1\":\n        final[i]=\"1\"\n        i+=1\n    elif var==\"B\":\n        if i!=0:        \n            i-=1\nprint \"\".join(final[0:i])"}
{"label": 19, "index": 2391, "code": "s = raw_input()\nt = ''\nfor c in s:\n    if c == 'B':\n        if t != '':\n            t = t[0:-1]\n    else:\n        t += c\nprint t\n"}
{"label": 19, "index": 2392, "code": "s = input()\nans = \"\"\nfor c in s:\n    if c == '0':\n        ans = ans + '0'\n    elif c == '1':\n        ans = ans + '1'\n    elif c == 'B':\n        if len(ans) != 0:\n            ans = ans[0:len(ans)-1]\nprint(ans)"}
{"label": 19, "index": 2393, "code": "s = raw_input()\nans = ''\nfor c in s:\n    if c == 'B':\n        if len(ans) > 0:\n            ans = ans[:-1]\n    else:\n        ans += c\nprint ans"}
{"label": 19, "index": 2394, "code": "s = raw_input()\nchars = []\nfor c in s:\n    if c == 'B' :\n        if len(chars) > 0: chars.pop()\n    else:\n        chars.append(c)\nprint ''.join(chars)\n"}
{"label": 19, "index": 2395, "code": "from collections import defaultdict\n\n\ndef main():\n    s = input()\n    ans = \"\"\n    for c in s:\n        if c in [\"0\", \"1\"]:\n            ans += c\n        elif c == \"B\" and len(ans) > 0:\n            ans = ans[:len(ans) - 1]\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 19, "index": 2396, "code": "l=raw_input()\ns=''\nfor i in l:\n    if i=='B' :\n        if len(s)>0:\n            s=s[:-1]\n        else:\n            pass\n    else:\n        s+=i\nprint s"}
{"label": 19, "index": 2397, "code": "s = list(input())\nans = [\"\"] * 10\nindex = 0\nfor ss in s:\n    if ss != \"B\":\n        ans[index] = ss\n        index += 1\n    else:\n        ans[index] = \"\"\n        index = max(0, index - 1)\n        ans[index] = \"\"\n\nprint(\"\".join(ans))"}
{"label": 19, "index": 2398, "code": "s = list(input())\nL = []\nfor i in s:\n  if i != \"B\":\n    L.append(i)\n  else:\n    if len(L) >= 1:\n      L.pop()\n    else:\n      pass\nprint(''.join(L))"}
{"label": 19, "index": 2399, "code": "s = input()\nans = \"\"\nfor c in s:\n    if c == 'B':\n        ans = ans[:-1]\n    else:\n        ans = ans + c\nprint(ans)"}
{"label": 19, "index": 2400, "code": "S = input()\nans=[]\nfor c in S:\n\tif c == 'B':\n\t\tif len(ans) > 0:\n\t\t\tans.pop()\n\telse:\n\t\tans.append(c)\ns = ''.join(ans)\nprint(s)"}
{"label": 19, "index": 2401, "code": "s=raw_input()\na=\"\"\nfor k in range(len(s)):\n    if s[k]==\"0\":\n        a=a+\"0\"\n    elif s[k]==\"1\":\n        a=a+\"1\"\n    elif s[k]==\"B\":\n        if len(a)>0:\n            a=a[0:len(a)-1]\nprint a"}
{"label": 19, "index": 2402, "code": "N = raw_input()\ncon=\"\"\nfor i in range(len(N)):\n    if N[i]==\"0\" or N[i]==\"1\":\n        con += N[i]\n    elif N[i]==\"B\" and len(con) >= 1:\n        con = con[:len(con)-1]\nprint con"}
{"label": 19, "index": 2403, "code": "S = input()\nret = []\nfor s in S:\n    if s == 'B':\n        if len(ret):\n            ret.pop()\n    else:\n        ret.append(s)\nprint(''.join(ret))"}
{"label": 19, "index": 2404, "code": "s=raw_input()\nn=len(s)\nans=[]\nfor i in xrange(n):\n    if s[i]==\"B\" and ans==[]:\n        continue\n    if s[i]==\"B\":\n        del ans[-1]\n    elif s[i]==\"0\":\n        ans.append(\"0\")\n    else:\n        ans.append(\"1\")\nprint(\"\".join(ans))"}
{"label": 19, "index": 2405, "code": "a=str(raw_input())\nb=\"\"\nfor i in range(len(a)):\n    if a[i]==\"B\":\n        b=b[0:-1]\n    else:\n        b=b+a[i]\nprint(b)"}
{"label": 19, "index": 2406, "code": "key = []\nfor i in list(input()):\n    key.append(i)\nresult = \"\"\nfor j in key:\n    if j == \"0\":\n        result = result + \"0\"\n    elif j == \"1\":\n        result = result + \"1\"\n    elif j == \"B\":\n        result = result[:-1]\nprint(result)"}
{"label": 19, "index": 2407, "code": "# coding: utf-8\nimport sys\n     \nlist_n = raw_input()\n\noutput = ''\n\nfor n in list_n:\n    if n == '0':\n        output += '0'\n    elif n == '1':\n        output += '1'\n    else:\n        if len(output) > 0:\n            output = output[:-1]\n\nprint output"}
{"label": 19, "index": 2408, "code": "# coding: utf-8\n\nfrom collections import deque\n\n\ns = input().strip()\nanswer = deque()\n\nfor c in s:\n    if c == '0':\n        answer.append('0')\n    elif c == '1':\n        answer.append('1')\n    elif c == 'B':\n        try:\n            answer.pop()\n        except IndexError:\n            answer = deque()\n\nfor c in answer:\n    print(c, end='')\nprint('')"}
{"label": 19, "index": 2409, "code": "S = raw_input()\n\nans = ''\nfor t in S:\n    if t == '0':\n        ans += '0'\n    elif t == '1':\n        ans += '1'\n    elif t == 'B':\n        if ans:\n            ans = ans[:-1]\n            \nprint ans"}
{"label": 19, "index": 2410, "code": "def read():\n    return int(input())\n\ndef reads(sep=None):\n    return list(map(int, input().split(sep)))\n\ndef main():\n    s = input()\n    a = []\n    for c in s:\n        if c == 'B':\n            if a:\n                a.pop()\n        else:\n            a.append(c)\n    print(''.join(a))\n\nmain()\n"}
{"label": 19, "index": 2411, "code": "seq=input()\ns=[]\nfor i in seq:\n    if i=='B':\n        if len(s)>0:\n            s.pop()\n    else:\n        s.append(i)\nprint(''.join(s))\n"}
{"label": 19, "index": 2412, "code": "stack = []\nstring = input().strip()\nfor s in string:\n    if s == 'B':\n        if stack:\n            stack.pop()\n    else:\n        stack.append(s)\nprint(''.join(stack))"}
{"label": 19, "index": 2413, "code": "s = input()\nans = []\nfor str in s:\n    if str == 'B':\n        if len(ans) > 0:\n            ans.pop()\n    else:\n        ans.append(str)\nprint(''.join(ans))\n"}
{"label": 19, "index": 2414, "code": "\n\ndef main():\n    s = []\n    l = list(raw_input())\n    for c in l:\n        if c == '0':\n            s.append(c)  \n        elif c == '1':\n            s.append(c)\n        elif c == 'B':\n            if 0 < len(s):\n                s.pop()\n                \n        else:\n            pass\n        \n    print \"\".join(map(str,s))\n\nif __name__ == '__main__':\n    main()\n    "}
{"label": 19, "index": 2415, "code": "#coding: utf-8\n#ABC043B\n\nl=list(raw_input())\n\nres=\"\"\nfor i in xrange(len(l)):\n if l[i]=='0':\n  res=res+'0'\n elif l[i]=='1':\n  res=res+'1'\n elif l[i]=='B':\n  res=res[:-1]\n  \nprint res\n"}
{"label": 19, "index": 2416, "code": "s=list(input())\nans_list=[]\nfor c in s:\n    if c=='B':\n        if len(ans_list)>0:\n            ans_list.pop()\n    else:\n        ans_list.append(c)\nprint(''.join(ans_list))\n"}
{"label": 19, "index": 2417, "code": "a = input()\nans = \"\"\nfor i in a:\n    if i == \"0\" or i == \"1\":\n        ans += i\n    \n    elif len(ans) > 0 :\n        ans = ans[:len(ans)-1]\n\nprint(ans)\n"}
{"label": 19, "index": 2418, "code": "def main():\n    s = input()\n    ans = \"\"\n    for c in s:\n        if c == \"0\":\n            ans += \"0\"\n        elif c == \"1\":\n            ans += \"1\"\n        elif c == \"B\":\n            ans = ans[:-1]\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 19, "index": 2419, "code": "a=''\nfor x in input():\n    if x=='B':a=a[:-1]\n    else:a+=x\nprint(a)"}
{"label": 19, "index": 2420, "code": "s = list(raw_input())\nans = []\nfor i in s:\n    if i == \"B\":\n        if len(ans) == 0:\n            continue\n        else:\n            ans = ans[:-1]\n    else:\n        ans.append(i)\nprint \"\".join(ans)"}
{"label": 19, "index": 2421, "code": "s=list(str(input()))\nans=''\nfor i in s:\n    if i=='1':\n        ans += i\n    elif i=='0':\n        ans += i\n    elif i=='B' and ans!='':\n        ans = ans[:len(ans)-1]\n\nprint(ans)"}
{"label": 19, "index": 2422, "code": "s = input()\nidx = 0\nans = ''\nfor c in s:\n    if c == 'B':\n        ans = ans[:-1]\n    else:\n        ans += c\nprint(ans)\n"}
{"label": 19, "index": 2423, "code": "# -*- coding: utf-8 -*-\nimport sys,copy,math,heapq,itertools as it,fractions,re,bisect,collections as coll\n\ns = raw_input()\nans = \"\"\nfor si in s:\n    if si == \"B\":\n        ans = ans[:-1]\n    else:\n        ans += si\nprint ans\n"}
{"label": 19, "index": 2424, "code": "S = list(input())\n\nresult = []\n\nfor s in S:\n    if s in (\"0\", \"1\"):\n        result.append(s)\n    elif result:\n        result.pop()\n\nprint(\"\".join(result))"}
{"label": 19, "index": 2425, "code": "s=raw_input()\nans=[]\nfor i in s:\n    if i=='B':\n        if len(ans):\n            ans.pop(-1)\n    else:\n        ans.append(i)\nprint ''.join(ans)"}
{"label": 19, "index": 2426, "code": "s = list(input())\nans = \"\"\nfor i in s:\n    if i == \"0\" or i == \"1\":\n        ans += i\n    elif i == \"B\" and len(ans) > 0:\n        ans = ans[:-1]\nprint(ans)"}
{"label": 19, "index": 2427, "code": "s=input()\nans=\"\"\nfor i in range(len(s)):\n    if s[i]=='0':\n        ans+='0'\n    elif s[i]=='1':\n        ans+='1'\n    else:\n        ans=ans[:-1]\nprint(ans)"}
{"label": 19, "index": 2428, "code": "s = raw_input()\nres = \"\"\nfor c in s:\n    if c=='0':\n        res += '0'\n    if c=='1':\n        res += '1'\n    if c=='B' and res:\n        res = res[:-1]\n\nprint res\n"}
{"label": 19, "index": 2429, "code": "a = []\nfor c in list(raw_input()):\n    if 'B' == c:\n        if len(a) > 0:\n            a.pop()\n    else:\n        a.append(c)\nprint  ''.join(a)"}
{"label": 19, "index": 2430, "code": "data = str(input())\nres = []\nfor char in data:\n    if char == '0':\n        res.append('0')\n    elif char == '1':\n        res.append('1')\n    else:\n        try:\n            res.pop()\n        except:\n            continue\nprint(\"\".join(res))"}
{"label": 19, "index": 2431, "code": "ans = []\nfor c in input():\n    try:\n        if c == 'B': ans.pop()\n        else: ans.append(c)\n    except IndexError:\n        pass\nprint(''.join(ans))\n"}
{"label": 19, "index": 2432, "code": "S = list(input())\na = []\nfor i in range(len(S)):\n  if(S[i] == \"0\" ):\n    a.append(\"0\")\n  elif(S[i] == \"1\"):\n    a.append(\"1\")\n  else:\n    if(len(a) != 0):\n      del a[-1]\n\nkotae = \"\"\n\nfor i in range(len(a)):\n  kotae += a[i]\n\nprint(kotae)"}
{"label": 19, "index": 2433, "code": "r = input()\n\nres = ''\nfor i in r:\n    if i == '0':\n        res += '0'\n    elif i == '1':\n        res += '1'\n    elif i == 'B':\n        res = res[:-1]\n\nprint(res)\n"}
{"label": 19, "index": 2434, "code": "# coding: utf-8\n\nstack = []\nfor i in input():\n    if i=='0':\n        stack.append(0)\n    elif i=='1':\n        stack.append(1)\n    else:\n        if(len(stack)>0):\n            stack.pop()\n\n[print(s, end='') for s in stack]\nprint()"}
{"label": 19, "index": 2435, "code": "s=input()\nres=\"\"\nfor c in s:\n    if c=='B':\n        if len(res)>0:\n            res = res[0:-1]\n    else:\n        res += c\nprint(res)"}
{"label": 19, "index": 2436, "code": "S = input()\nA = \"\"\nfor c in S:\n    if c == '0' or c == '1':\n        A += c\n    elif c == 'B' and A != \"\":\n        A = A[0:-1]\nprint(A) \n"}
{"label": 19, "index": 2437, "code": "s = input()\nstk = []\nfor c in s:\n    if c == 'B':\n        if len(stk) > 0:\n            stk.pop()\n    else:\n        stk.append(c)\nprint(''.join(stk))\n"}
{"label": 19, "index": 2438, "code": "import sys\n\ndef debug(x, table):\n    for name, val in table.items():\n        if x is val:\n            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)\n            return None\n\ndef solve():\n    s = input()\n    stack = []\n\n    for c in s:\n        if c == 'B':\n            if stack:\n                stack.pop()\n            else:\n                pass\n        else:\n            stack.append(c)\n\n    print(''.join(stack))\n\n\nif __name__ == '__main__':\n    solve()"}
{"label": 19, "index": 2439, "code": "# coding: utf-8\n\nkeys = input().rstrip()\nresult = \"\"\n\nfor c in keys:\n    if c == \"0\":\n        result += \"0\"\n    elif c == \"1\":\n        result += \"1\"\n    elif c == \"B\":\n        l = len(result)\n        if l > 0:\n            result = result[:l-1]\n\nprint(result)\n"}
{"label": 19, "index": 2440, "code": "s = list(input())\nans= []\nfor c in s:\n\tif c == 'B':\n\t\tif ans != []:\n\t\t\tans.pop()\n\t\telse:\n\t\t\tcontinue\n\telse:\n\t\tans.append(c)\nprint(*ans,sep='')\n"}
{"label": 19, "index": 2441, "code": "s = list(input())\n\nans = \"\"\nfor i in s:\n    if i == \"0\":\n        ans = ans + \"0\"\n    elif i == \"1\":\n        ans = ans + \"1\"\n    elif i == \"B\":\n        ans = ans[:len(ans)-1]\n\nprint(ans)\n"}
{"label": 19, "index": 2442, "code": "s = list(raw_input())\nans = []\nfor c in s:\n    if (c == \"0\") or (c == \"1\"):\n        ans.append(c)\n    else:\n        if len(ans) > 0:\n            ans.pop()\nprint \"\".join(ans)"}
{"label": 19, "index": 2443, "code": "from re import search, sub\n\ndef update(s):\n    if (search(r'[01]B', s)):\n        return update(sub(r'[01]B', '', s))\n    else:\n        return s.replace('B', '')\n\n\nprint(update(input()))\n"}
{"label": 19, "index": 2444, "code": "s = list(input())\n\ni = 0\n\nwhile i < len(s):\n    if s[i] == \"B\":\n        s.pop(i)\n        if i != 0:\n            s.pop(i-1)\n            i = i - 1\n    else:\n        i = i + 1\n\nfor char in s:\n    print(char, end = \"\")\nprint()\n"}
{"label": 19, "index": 2445, "code": "S=list(str(raw_input()))\nres=[]\nfor i in  S:\n    if(i==\"B\"):\n        if(len(res)>0):\n            res.pop()\n    else:\n        res.append(i)\nprint ''.join(res)"}
{"label": 19, "index": 2446, "code": "s = list(map(str, input()))\ndisplay = []\nfor action in s:\n    if action == '0':\n        display.append('0')\n    elif action == '1':\n        display.append('1')\n    elif action == 'B':\n        if len(display) > 0:\n            display.pop()\nprint(''.join(display))"}
{"label": 19, "index": 2447, "code": "S = str(input())\nans = \"\"\n\nfor k in S:\n    if k == \"0\":\n        ans += \"0\"\n    elif k == \"1\":\n        ans += \"1\"\n    elif k == \"B\" and ans != \"\":\n        ans = ans[:len(ans)-1]\n\nprint(ans)"}
{"label": 19, "index": 2448, "code": "s=input()\n\nN=len(s)\n\nL=[]\n\nfor i in range(N):\n    if s[i]=='0':\n        L.append('0')\n    elif s[i]=='1':\n        L.append('1')\n    elif s[i]=='B':\n        if L==[]:\n            pass\n        else:\n            del L[-1]\n\nA=''.join(L)\nprint(A)"}
{"label": 19, "index": 2449, "code": "s = input()\nans = \"\"\n\nfor i in range(0,len(s)):\n    if s[i] == 'B':\n        ans = ans[:-1]\n    else:\n        ans = ans + s[i]\n\nprint(ans)\n"}
{"label": 19, "index": 2450, "code": "S = raw_input()\nw = \"\"\nfor c in S:\n    if c == \"B\":\n        if len(w) > 0:\n            w = w[:-1]\n    else:\n        w += c\nprint w\n"}
{"label": 19, "index": 2451, "code": "def solve(S):\n  result = \"\"\n  for c in S:\n    if c == 'B': result = ('' if len(result) == 0 else result[:-1])\n    else: result = result + c\n  return result\n\nprint(solve(input()))"}
{"label": 19, "index": 2452, "code": "s = []\nfor a in raw_input():\n    if a == 'B':\n        if len(s) > 0:\n            s.pop()\n    else:\n        s.append(a)\nprint ''.join(s)\n"}
{"label": 19, "index": 2453, "code": "# -*- coding: utf-8 -*-\n\ndef main():\n    \n    str=input()\n    ans=\"\"\n    for c in str:\n        if(c=='B' and ans!=\"\"):\n            ans=ans[:-1]\n        elif(c!='B'):\n            ans+=c\n    print(ans)\n            \n\nif __name__==\"__main__\":\n    main()\n    "}
{"label": 19, "index": 2454, "code": "S = input()\nans = \"\"\nfor s in S:\n    if s == \"0\":\n        ans += \"0\"\n    elif s == \"1\":\n        ans += \"1\"\n    else:\n        if len(ans) != 0:\n            ans = ans[:len(ans)-1]\nprint(ans)\n"}
{"label": 19, "index": 2455, "code": "keyinputs = raw_input()\n \noutput = ''\nfor i in xrange(len(keyinputs)):\n    keyinput = keyinputs[i]\n    if keyinput == '1' or keyinput == '0':\n        output+= keyinput\n    elif keyinput == 'B':\n        if not output == '': \n            output = output[:-1]\nprint output"}
{"label": 19, "index": 2456, "code": "S = input()\narray = []\nfor w in S:\n    if w == \"B\" and len(array):\n        array.pop()\n    elif w != \"B\":\n        array.append(w)\nfor w in array:\n    print(w, end=\"\")\nprint()\n"}
{"label": 19, "index": 2457, "code": "import sys\n\n#sys.stdin = open('b_2.txt', 'r')\nin_str = list(raw_input())\nout_str = ['X' for _ in range(10)]\ncur_pos = 0\n\nfor x in in_str:\n\tif x != 'B':\n\t\tout_str[cur_pos] = x\n\t\tcur_pos = cur_pos + 1\n\telse:\n\t\tif cur_pos > 0:\n\t\t\tcur_pos = cur_pos - 1\n\t\telse:\n\t\t\tpass\n\nprint str(''.join(out_str[:cur_pos]))\n"}
{"label": 19, "index": 2458, "code": "I = input()\n\nA =''\n\nfor n in I:\n if n == '0':\n  A += '0'\n elif n == '1':\n  A += '1'\n else:\n  if len(A) > 0:\n   A = A[:-1]\n\n\nprint(A)\n"}
{"label": 19, "index": 2459, "code": "S=input()\nT=[]\nfor s in S:\n    if s=='B':\n        if len(T)!=0:\n            del T[-1]\n    else:\n        T.append(s)\nprint(''.join(T))"}
{"label": 19, "index": 2460, "code": "s=str(input())\nwhile \"B\" in s:\n  if s[0] == \"B\":\n    s=s[1:]\n  s=s.replace(\"0B\",\"\")\n  s=s.replace(\"1B\",\"\")\nprint(s)"}
{"label": 19, "index": 2461, "code": "a = raw_input()\ns = \"\"\n\nfor i in a:\n\tif i == \"0\" or i == \"1\":\n\t\ts += i\n\telse:\n\t\ts = s[:len(s) - 1]\n\nprint s"}
{"label": 19, "index": 2462, "code": "# coding: utf-8\n# Here your code !\n\n# coding: utf-8\n# Here your code !\nstr =\"\"\nfor i in input():\n    if i is '0':\n        str+=\"0\"\n    elif i =='1':\n        str+=\"1\"\n    else:\n        str = str[:-1]\nprint(str)\n        "}
{"label": 19, "index": 2463, "code": "array = []\ns = list(input())\n\nfor char in s:\n    if char == \"0\":\n        array.append(\"0\")\n    elif char == \"1\":\n        array.append(\"1\")\n    else:\n        if len(array) != 0:\n            del array[-1]\n        else:\n            pass\n\nprint(\"\".join(array))\n"}
{"label": 19, "index": 2464, "code": "IN = list(raw_input())\nOUT = []\n\nwhile len(IN)>0 :\n    if IN[0] == 'B':\n        if len(OUT) > 0:\n            OUT.pop()\n    else:\n        OUT.append(IN[0])\n\n    IN.pop(0)\n\nprint ''.join(OUT)\n"}
{"label": 19, "index": 2465, "code": "s=str(input())\nu=''\nfor i in range(0,len(s)):\n    if s[i]=='0':\n        u=u+'0'\n    elif s[i]=='1':\n        u=u+'1'\n    else:\n        u=u[:-1]\nprint(u)"}
{"label": 19, "index": 2466, "code": "def ri(): return int(input())\ndef rli(): return list(map(int, input().split()))\ndef rls(): return list(input())\ndef pli(a): return \"\".join(list(map(str, a)))\n\ns = rls()\nans = [\"\" for i in s]\nidx = 0\nfor i in s:\n    if(i == \"B\"):\n        idx -= 1\n        if(idx == -1):\n            idx += 1\n        else:\n            ans[idx] = \"\"\n    else:\n        ans[idx] = i\n        idx += 1\nprint(pli(ans))"}
{"label": 19, "index": 2467, "code": "# -*- coding: utf-8 -*-\n\ndef list_n():\n    return [int(e) for e in input().split()]\n\n\ndef list_s():\n    return [s for e in input().split()]\n\n\ndef main(s):\n    ret = []\n    for c in s:\n        if c in ['0', '1']:\n            ret.append(c)\n        else:\n            if ret:\n                ret.pop()\n    return ''.join(ret)\n\n\nif __name__ == '__main__':\n    s = input()\n    print(main(s))\n"}
{"label": 19, "index": 2468, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\n\ndef main():\n    s = input()\n    r = ''\n    for c in s:\n        if c == 'B':\n            r = r[:-1]\n        else:\n            r += c\n    return r\n\n\n\nprint(main())\n"}
{"label": 19, "index": 2469, "code": "s = input()\nsl=[]\nfor i in s:\n    if i == \"0\":\n        sl.append(\"0\")\n    if i == \"1\":\n        sl.append(\"1\")\n    if i == \"B\":\n        if sl == []:\n            continue\n        else:\n            sl.pop()\nfor i in sl:\n    print(i, end = \"\")"}
{"label": 20, "index": 2470, "code": "n = int(input())\nk = int(input())\nx = int(input())\ny = int(input())\n\nif n > k:\n    print(k * x + (n - k) * y)\nelse:\n    print(n * x)\n"}
{"label": 20, "index": 2471, "code": "n = int(input())\nk = int(input())\nx = int(input())\ny = int(input())\n\nprint( x * n if n < k else x * k + y * (n - k) )"}
{"label": 20, "index": 2472, "code": "N = int(input())\nK = int(input())\nX = int(input())\nY = int(input())\n\nif N > K:\n    print(K * X + ((N-K) * Y))\nelse:\n    print(N * X)"}
{"label": 20, "index": 2473, "code": "n = input()\nk = input()\nx = input()\ny = input()\n\nprint n*x if n <= k else x*k + y*(n-k)"}
{"label": 20, "index": 2474, "code": "from collections import defaultdict\n\n\ndef main():\n    N, K, X, Y = int(input()), int(input()), int(input()), int(input())\n    ans = 0\n    for i in range(N):\n        ans += X if i < K else Y\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 20, "index": 2475, "code": "a = input()\nb = input()\nc = input()\nd = input()\ne = 0\nfor i in range(a):\n\tif i <= b-1:\n\t\te += c\n\telse:\n\t\te += d\n\nprint e"}
{"label": 20, "index": 2476, "code": "#!/usr/bin/env python\n#coding:utf-8\n\ndef input_strs():\n    return input().split(\" \")\n\ndef input_nums():\n    return [int(i) for i in input_strs()]\n\n\nn = int(input())\nk = int(input())\nx = int(input())\ny = int(input())\n\nif n <= k:\n    print(x * n)\nelse:\n    print(k * x + (n-k) * y)\n"}
{"label": 20, "index": 2477, "code": "N = int(input())\nK = int(input())\nX = int(input())\nY = int(input())\n\nif N - K > 0:\n  print((X * K ) + (Y * (N - K)))\nelse:\n  print(X*N)\n   "}
{"label": 20, "index": 2478, "code": "n = int(input())\nk = int(input())\nx = int(input())\ny = int(input())\n\nif k < n:\n    ans = k*x+(n-k)*y\nelse:\n    ans = n*x\nprint(ans)\n"}
{"label": 20, "index": 2479, "code": "n = input()\nk = input()\nx = input()\ny = input()\nif n > k:\n\tprint k * x + (n-k) * y\nelif n <= k:\n\tprint n * x\n\n\t"}
{"label": 20, "index": 2480, "code": "n=int(input())\nk=int(input())\nx=int(input())\ny=int(input())\n\nans=0\nif n<=k:\n    ans=x*n\nelse:\n    ans=x*k+y*(n-k)\nprint(ans)\n"}
{"label": 20, "index": 2481, "code": "n = int(raw_input())\nk = int(raw_input())\nx = int(raw_input())\ny = int(raw_input())\n\nif n <= k:\n    print x * n\nelse:\n    print x * k + y * (n-k)\n"}
{"label": 20, "index": 2482, "code": "N = int(raw_input())\nK = int(raw_input())\nX = int(raw_input())\nY = int(raw_input())\nprint (min(K, N)*X + max(0,N-K)*Y)"}
{"label": 20, "index": 2483, "code": "N = int(input())\nK = int(input())\nX = int(input())\nY = int(input())\nif N > K:\n\ta = X * K + Y * (N - K)\nelse:\n\ta = X * N\nprint(a)"}
{"label": 20, "index": 2484, "code": "N = int(raw_input())\nK = int(raw_input())\nX = int(raw_input())\nY = int(raw_input())\n\nif (N <= K):\n  print N * X\nelse:\n  print K * X + (N-K) * Y"}
{"label": 20, "index": 2485, "code": "N = int(input())\nK = int(input())\nX = int(input())\nY = int(input())\nans = min(K, N) * X + max(N - K, 0) * Y\nprint(ans)\n"}
{"label": 20, "index": 2486, "code": "import sys\n\ndef debug(x, table):\n    for name, val in table.items():\n        if x is val:\n            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)\n            return None\n\ndef solve():\n    N = int(input())\n    K = int(input())\n    x = int(input())\n    y = int(input())\n\n    ans = x * min(N, K) + y * max(N - K, 0)\n\n    print(ans)\n\nif __name__ == '__main__':\n    solve()"}
{"label": 20, "index": 2487, "code": "N,K,X,Y = [int(input()) for _ in range(4)]\nprint(N*X if N-K < 0 else K*X+(N-K)*Y)\n"}
{"label": 20, "index": 2488, "code": "def main():\n    n = int(input())\n    k = int(input())\n    x = int(input())\n    y = int(input())\n\n    ans = 0\n    for i in range(n):\n        if i < k:\n            ans += x\n        else:\n            ans += y\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 20, "index": 2489, "code": "N = int(raw_input())\nK = int(raw_input())\nX = int(raw_input())\nY = int(raw_input())\n\nprint (N-K) * Y + K * X if K < N else N * X"}
{"label": 20, "index": 2490, "code": "n = int(input())\nk = int(input())\nx = int(input())\ny = int(input())\nprint(x * min(k, n) + y * max(n - k, 0))\n"}
{"label": 20, "index": 2491, "code": "a=[int(input())for i in[0]*4];print(min(a[0],a[1])*a[2]+max(0,a[0]-a[1])*a[3])"}
{"label": 20, "index": 2492, "code": "# -*- coding: utf-8 -*-\nn = int(input())\nk = int(input())\nx = int(input())\ny = int(input())\n\ndef main():\n    if n <= k:\n        sum = (n * x)\n    else:\n        sum = (k * x) + ((n - k) * y)\n    return sum\n\nprint(main())"}
{"label": 20, "index": 2493, "code": "n = int(input())\nk = int(input())\nx = int(input())\ny = int(input())\nprint(n*x if n <= k else k*x + (n-k)*y)"}
{"label": 20, "index": 2494, "code": "N = int(input())\nK = int(input())\nX = int(input())\nY = int(input())\nans = 0\nfor i in range(N):\n    if i < K:\n        ans += X\n    else:\n        ans += Y\nprint(ans)"}
{"label": 20, "index": 2495, "code": "n = input()\nk = input()\nx = input()\ny = input()\n\nif n > k :\n  print str(x*k + y*(n-k))\nelse :\n  print str(x*n)"}
{"label": 20, "index": 2496, "code": "l = []\nfor i in range(4):\n    l.append(int(input()))\nif l[0]-l[1] < 0:\n    print(l[0] * l[2])\nelse:\n    print(l[1]*l[2] + (l[0]-l[1])*l[3])"}
{"label": 20, "index": 2497, "code": "import sys \n\nN = int(sys.stdin.readline())\nK = int(sys.stdin.readline())\nX = int(sys.stdin.readline())\nY = int(sys.stdin.readline())\n\n#X* K + Y * (N-K)\n# if N > K\n\n#X * K\n# if N < K\n\nif N > K : \n    print X* K + Y *(N-K)\nelse:\n    print X*N   "}
{"label": 20, "index": 2498, "code": "N = int(input())\nK = int(input())\nX = int(input())\nY = int(input())\n\nif N > K:\n    print(X * K + Y * (N - K))\nelse:\n    print(X * N)"}
{"label": 20, "index": 2499, "code": "N = int(raw_input())\nK = int(raw_input())\nX = int(raw_input())\nY = int(raw_input())\nif N <= K:\n    print X * N\nelse:\n    print X * K + Y * (N - K)"}
{"label": 20, "index": 2500, "code": "N = int(input())\nK = int(input())\nX = int(input())\nY = int(input())\n\nif N > K:\n    print(K * X + (N - K) * Y)\nelse:\n    print(N * X)"}
{"label": 20, "index": 2501, "code": "def ini(): return int(input())\ndef inli(): return list(map(int, input().split()))\ndef inf(): return float(input())\ndef inlf(): return list(map(float, input().split()))\ndef inl(): return list(input())\ndef pli(): return \"\".join(list(map(str, ans)))\n\nn= ini()\nk= ini()\nx = ini()\ny = ini()\nif k<n:\n    print(k*x+(n-k)*y)\nelse:\n    print(n*x)\n"}
{"label": 20, "index": 2502, "code": "N = int(input())\nK = int(input())\nX = int(input())\nY = int(input())\n\nif N < K:\n  print(N * X)\nelse:\n  print(K * X + (N - K) * Y)"}
{"label": 20, "index": 2503, "code": "n = input()\nk = input()\nx = input()\ny = input()\n\nsum = 0\nfor i in range(n):\n    if(i<k): sum += x\n    else: sum += y\n\nprint sum"}
{"label": 20, "index": 2504, "code": "n = input()\nk = input()\nx = input()\ny = input()\n\nans = n*x + (y - x) * max(n-k, 0)\nprint ans"}
{"label": 20, "index": 2505, "code": "a = [int(input()) for i in range(4)]\nsum = 0\nfor i in range(a[0]):\n    if i + 1 <= a[1]:\n        sum += a[2]\n    else:\n        sum += a[3]\nprint(sum)\n"}
{"label": 20, "index": 2506, "code": "n = input()\nk = input()\nprint input()*n if n<=k else input()*k+input()*(n-k)\n"}
{"label": 20, "index": 2507, "code": "def ri(): return int(input())\ndef rli(): return list(map(int, input().split()))\ndef ris(): return list(input())\ndef pli(): return \"\".join(list(map(str, ans)))\n\nN = ri()\nK = ri()\nX = ri()\nY = ri()\n\nif(K >= N):\n    print(X*N)\nelse:\n    print(K*X+(N-K)*Y)"}
{"label": 20, "index": 2508, "code": "# coding: UTF8\n\nn = 4\nN, K, X, Y = [int(input()) for i in range(n)]\n\nif N < K:\n\ts = N * X\nelse:\n\ts = K * X + (N - K) * Y\nprint(s)"}
{"label": 20, "index": 2509, "code": "n=input()\nk=input()\nx=input()\ny=input()\nif n>k:\n    n-=k\nelse:\n    k=n\n    n=0\nprint(k*x+n*y)\n"}
{"label": 20, "index": 2510, "code": "n, k, x, y = [int(input()) for _ in range(4)]\nprint(n * x if n < k else k * x + (n - k) * y)\n"}
{"label": 20, "index": 2511, "code": "N = int(raw_input())\nK = int(raw_input())\nX = int(raw_input())\nY = int(raw_input())\nif N <= K:\n    print N * X\nelse:\n    print K * X + (N - K) * Y\n\n"}
{"label": 20, "index": 2512, "code": "N = int(input())\nK = int(input())\nX = int(input())\nY = int(input())\nA = 0\nfor i in range(1, N+1):\n    if i <= K:\n        A += X\n    else:\n        A += Y\nprint(A)\n"}
{"label": 20, "index": 2513, "code": "put = []\nfor i in range(4):\n\tput.append(int(input()))\n\nif put[0] < put[1]:\n\tprint(put[2] * put[0])\nelse:\n\tprint(put[2] * put[1] + put[3] * (put[0] - put[1]))\n\n"}
{"label": 20, "index": 2514, "code": "def main():\n    n = int(input())\n    k = int(input())\n    x = int(input())\n    y = int(input())\n    print(min(n, k) * x + max(n - k, 0) * y)\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 20, "index": 2515, "code": "\nN = int(input())\nK = int(input())\nX = int(input())\nY = int(input())\n\nO = max(0, N - K) # over\nP = N - O         #\n\nres = P * X + O * Y\n\nprint(res)"}
{"label": 20, "index": 2516, "code": "n,k,x,y=[int(input()),int(input()),int(input()),int(input())]\nprint(min(n,k)*x + (n-min(n,k))*y)"}
{"label": 20, "index": 2517, "code": "#!/usr/bin/env python\n# coding:utf-8\nimport os, sys\nimport math\n\nN = input()\nK = input()\nX=input()\nY=input()\nif N <= K:\n    print X*N\nelse:\n    print X*K + Y*(N-K)\n\n\n\n"}
{"label": 20, "index": 2518, "code": "n = int(input())\nk = int(input())\nx = int(input())\ny = int(input())\nprint(min(n, k) * x + max(0, n - k) * y)\n"}
{"label": 20, "index": 2519, "code": "n = int(input())\nk = int(input())\nx = int(input())\ny = int(input())\n\nif n < k:\n   print(n*x)\nelse:\n   print(k*x+(n-k)*y)"}
{"label": 20, "index": 2520, "code": "n = int(input())\nk = int(input())\nx = int(input())\ny = int(input())\n\nif n <= k:\n    print(n * x)\nelse:\n    print(k * x + (n - k) * y)"}
{"label": 20, "index": 2521, "code": "N = int(input())\nK = int(input())\nX = int(input())\nY = int(input())\nif N <= K:\n\tprint(X*N)\nelse:\n\tans = X*K + Y*(N-K)\n\tprint(ans)"}
{"label": 20, "index": 2522, "code": "N= int(input())\nK= int(input())\nX= int(input())\nY= int(input())\n\n\nif N <= K:\n    print(N*X)\nelse:\n    print(K*X+(N-K)*Y)\n"}
{"label": 20, "index": 2523, "code": "n = int(input())\nk = int(input())\nx = int(input())\ny = int(input())\n\nans = 0\nfor i in range(n):\n    if i >= k:\n        ans += y\n    else:\n        ans += x\n\nprint(ans)\n"}
{"label": 20, "index": 2524, "code": "N=int(raw_input())\nK=int(raw_input())\nX=int(raw_input())\nY=int(raw_input())\n\nprint (X*N) if N < K else (X*K + Y*(N-K))"}
{"label": 20, "index": 2525, "code": "a = input()\nb = input()\nc = input()\nd = input()\n\nif a > b:\n\tprint c * b + d * (a - b)\nelse:\n\tprint c * a"}
{"label": 20, "index": 2526, "code": "N = int(input())\nK = int(input())\nX = int(input())\nY = int(input())\n\nif K > N:\n    print(X * N)\nelse:\n    print(X*K + Y*(N-K))\n\n\n\n"}
{"label": 20, "index": 2527, "code": "import sys \n\nN = int(sys.stdin.readline())\nK = int(sys.stdin.readline())\nX = int(sys.stdin.readline())\nY = int(sys.stdin.readline())\n\n#X* K + Y * (N-K)\n# if N > K\n\n#X * K\n# if N < K\n\nif N > K : \n    print X* K + Y *(N-K)\nelse:\n    print X*N   "}
{"label": 20, "index": 2528, "code": "n, k, x, y = [int(input()) for i in range(4)]\n\nprint(min(k, n) * x + max(n - k, 0) * y)\n"}
{"label": 20, "index": 2529, "code": "n = int(input())\nk = int(input())\nx = int(input())\ny = int(input())\n\nprint(min(n, k)*x+max(n-k, 0)*y)"}
{"label": 20, "index": 2530, "code": "N = int(input())\nK = int(input())\nX = int(input())\nY = int(input())\nif N<=K : print(X*N)\nelse : print(Y*(N-K)+X*K)"}
{"label": 20, "index": 2531, "code": "n = int(input())\nk = int(input())\nx = int(input())\ny = int(input())\n \nif n <= k:\n    print(n * x)\nelse:\n    print(k * x + (n - k) * y)"}
{"label": 20, "index": 2532, "code": "# coding: utf-8;\n\ndef main():\n    n = int(input())\n    k = int(input())\n    x = int(input())\n    y = int(input())\n    if n > k:\n        print(k * x + (n - k) * y)\n    else:\n        print(n * x)\n\nif __name__ == '__main__':\n    main()"}
{"label": 20, "index": 2533, "code": "N = int(input())\nK = int(input())\nX = int(input())\nY = int(input())\n\nans = X * min(K, N)\nans += Y * max(0, N - K)\n\nprint(ans)"}
{"label": 20, "index": 2534, "code": "n = int(input())\nk = int(input())\nx = int(input())\ny = int(input())\nif n <= k:\n    price = x * n\nelse:\n    price = x * k + y * (n - k)\nprint(price)\n"}
{"label": 20, "index": 2535, "code": "# -*- coding: utf-8 -*-\nimport sys,copy,math,heapq,itertools as it,fractions,re,bisect,collections as coll\n\nN = int(raw_input())\nK = int(raw_input())\nX = int(raw_input())\nY = int(raw_input())\nprint X*min(K, N) + Y*max(0, N - K)\n"}
{"label": 20, "index": 2536, "code": "n = int(input())\nk = int(input())\nx = int(input())\ny = int(input())\nans = 0\nfor i in range(n):\n    if i < k:\n        ans += x\n    else:\n        ans += y\nprint(ans)"}
{"label": 20, "index": 2537, "code": "n = int(input())\nk = int(input())\nx = int(input())\ny = int(input())\n\nif n > k:\n    print(x*k + y*(n - k))\nelse:\n    print(x*n)"}
{"label": 20, "index": 2538, "code": "n = int(raw_input())\nk = int(raw_input())\nx = int(raw_input())\ny = int(raw_input())\ntotal = 0\nif n <= k:\n\ttotal += n*x\nelse:\n\ttotal += k*x + (n-k)*y\nprint(total)"}
{"label": 20, "index": 2539, "code": "N = int(input())\nK = int(input())\nX = int(input())\nY = int(input())\n\nprint( min([K,N])*X + max([N-K,0])*Y)\n"}
{"label": 20, "index": 2540, "code": "N, K, X, Y = [int(input()) for i in range(4)]\nif N <= K:\n    print(N*X)\nelse:\n    print((N-K)*Y + K*X)"}
{"label": 20, "index": 2541, "code": "a = [int(input()) for i in range(4)]\nprint(a[2]*min(a[0],a[1])+max(0,(a[0]-a[1])*a[3]))"}
{"label": 20, "index": 2542, "code": "N=int(input())\nK=int(input())\nX=int(input())\nY=int(input())\nsum=0\nfor i in range(N):\n    if((i+1)<=K):\n        sum+=X\n    else:\n        sum+=Y\nprint(sum)\n"}
{"label": 20, "index": 2543, "code": "N, K, X, Y = [int(raw_input()) for _ in xrange(4)]\nprint X * K + Y * (N - K) if N > K else X * N"}
{"label": 20, "index": 2544, "code": "n = input()\nk = input()\nx = input()\ny = input()\n\nif k < n:\n    cost = x * k + y * (n - k)\nelse:\n    cost = x * n\nprint cost\n"}
{"label": 20, "index": 2545, "code": "n, k, x, y = [input() for _ in range(4)]\nprint x * min(n, k) + y * max(n-k, 0)"}
{"label": 20, "index": 2546, "code": "from Queue import * # Queue, LifoQueue, PriorityQueue\nfrom bisect import * #bisect, insort\nfrom collections import * #deque, Counter,OrderedDict,defaultdict\n#set([]) \nimport math\nimport copy\nimport itertools\nimport string\nimport sys\nmyread = lambda : map(int,raw_input().split())\ndef solver():\n    N = int(raw_input())\n    K = int(raw_input())\n    X = int(raw_input())\n    Y = int(raw_input())\n    if N <= K:\n        print N * X\n    else:\n        print K * X + (N-K) * Y \n\n\n\n\nif __name__ == \"__main__\":\n    solver()\n    \n"}
{"label": 20, "index": 2547, "code": "n = input()\nk = input()\nx = input()\ny = input()\nresult = 0\n\nif n <= k:\n\tresult = n*x\nelse:\n\tresult = k*x+(n-k)*y\nprint result"}
{"label": 20, "index": 2548, "code": "n = input()\nk = input()\nx = input()\ny = input()\nif k >= n:\n    print n*x\nelse:\n    print k*x+(n-k)*y"}
{"label": 20, "index": 2549, "code": "N = int(input())\nK = int(input())\nX = int(input())\nY = int(input())\n\nif N > K:\n    print(K*X + (N-K)*Y)\nelse:\n    print(N*X)"}
{"label": 20, "index": 2550, "code": "n = int(input())\nk = int(input())\nx = int(input())\ny = int(input())\nif n < k:\n    print(x*n)\nelse:\n    ans = x*k + y*(n-k)\n    print(ans)"}
{"label": 20, "index": 2551, "code": "'''\nCreated on 2016/08/28\n\n@author: diyosko7\n'''\n\nif __name__ == '__main__':\n    n = 4 \n    input_lines = [int(input()) for i in range(n)] \n    N = int(input_lines[0])\n    K = int(input_lines[1])\n    X = int(input_lines[2])\n    Y = int(input_lines[3])\n    \n\n    SUM = 0\n    for i in range(0,N):\n        if i < K:\n            SUM += X\n        else:\n            SUM += Y\n    print(SUM)"}
{"label": 20, "index": 2552, "code": "n = int(input())\nk = int(input())\nx = int(input())\ny = int(input())\n\nsum = 0\nfor i in range(1,n+1):\n    if i > k:\n        sum += y\n    else:\n        sum += x\n\nprint(sum)"}
{"label": 20, "index": 2553, "code": "n = int(input())\nk = int(input())\nx = int(input())\ny = int(input())\n\nprice = 0\n\nfor i in range(n):\n    if i < k :\n        price += x\n    else :\n        price += y\n\nprint(price)"}
{"label": 20, "index": 2554, "code": "N = int(input())\nK = int(input())\nX = int(input())\nY = int(input())\n\nif N < K:\n\tprint(X*N)\nelse:\n\tprint(K*X+(N-K)*Y)"}
{"label": 20, "index": 2555, "code": "N, K, X, Y = [int(input()) for x in range(4)]\nprint(K * X + (N - K) * Y if N - K > 0 else N * X)\n"}
{"label": 20, "index": 2556, "code": "N = int(input())\nK = int(input())\nX = int(input())\nY = int(input())\nif N < K:\n    ans = (N * X)\nelse:\n    ans = (K * X) + ((N-K) * Y)\nprint(ans)"}
{"label": 20, "index": 2557, "code": "N=int(input())\nK=int(input())\nX=int(input())\nY=int(input())\nprint(min(N,K)*X+max(N-K,0)*Y)"}
{"label": 20, "index": 2558, "code": "#/usr/bin/python3\n\nN = int(input())\nK = int(input())\nX = int(input())\nY = int(input())\n\nprint(X*min(N,K)+Y*max(0,N-K))\n"}
{"label": 20, "index": 2559, "code": "# -*- encoding: utf-8 -*-\n\nn = int(input())\nk = int(input())\nx = int(input())\ny = int(input())\n\nif n >= k:\n    print(k*x + (n-k)*y)\nelse:\n    print(n*x)\n\n    \n"}
{"label": 20, "index": 2560, "code": "n = int(input())\nk = int(input())\nx = int(input())\ny = int(input())\n\ncost  = 0\nif n >= k:\n    cost += k * x\n    cost += (n - k) * y\nelse:\n    cost += n * x\n\nprint(cost)\n"}
{"label": 20, "index": 2561, "code": "n = input()\nk = input()\nx = input()\ny = input()\n\nif n > k :\n    ret = k*x+(n-k)*y\nelse:\n    ret = n*x\n\nprint ret"}
{"label": 20, "index": 2562, "code": "N = int(raw_input())\nK = int(raw_input())\nX = int(raw_input())\nY = int(raw_input())\n\nif N > K:\n    print K * X + (N - K) * Y\nelse:\n    print N * X\n"}
{"label": 20, "index": 2563, "code": "N = int(input())\nK = int(input())\nX = int(input())\nY = int(input())\nif N > K:\n    print(X * K + Y * (N-K))\nelse:\n    print(X * N)\n"}
{"label": 20, "index": 2564, "code": "n, k, x, y = [int(input()) for _ in range(4)]\nprint(x*min(n, k)+y*max(0, n-k))"}
{"label": 20, "index": 2565, "code": "n = int(input())\nk = int(input())\nx = int(input())\ny = int(input())\n\nif n <= k:\n    print(x*n)\nelse:\n    print(x*k+(n-k)*y)\n"}
{"label": 20, "index": 2566, "code": "N = input()\nK = input()\nX = input()\nY = input()\nif N < K:\n\tprint X * N\nelse:\n\tprint X * K + Y * (N - K) "}
{"label": 20, "index": 2567, "code": "N=int(input())\nK=int(input())\nX=int(input())\nY=int(input())\n\nif K>N:\n  print(N*X)\nelse:\n  print(K*X+(N-K)*Y)"}
{"label": 20, "index": 2568, "code": "n = int(raw_input())\nk = int(raw_input())\nx = int(raw_input())\ny = int(raw_input())\nif n > k:\n    print k * x + (n-k) * y\nelse:\n    print n * x\n"}
{"label": 20, "index": 2569, "code": "def a(n, k, x, y):\n    en = 0\n    for i in range(n):\n        if i < k: en += x\n        else: en+= y\n    return en\n\nn = input()\nk = input()\nx = input()\ny = input()\nprint a(n, k, x, y)"}
{"label": 20, "index": 2570, "code": "a = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\n \nif a <= b :\n    print(c*a)\nelse :\n    print(b*c + (a-b)*d)"}
{"label": 20, "index": 2571, "code": "N = input()\nK = input()\nX = input()\nY = input()\n\nix = min(K, N)\niy = max(0, N-K)\n\npayment = ix * X + iy * Y\nprint payment#, ix, iy\n"}
{"label": 20, "index": 2572, "code": "N = int(input())\nK = int(input())\nX = int(input())\nY = int(input())\n\nr = 0\nif N < K:\n    r = N * X\nelse:\n    r = K * X + (N - K) * Y\nprint(r)\n"}
{"label": 20, "index": 2573, "code": "def main():\n    N = int(input())\n    K = int(input())\n    X = int(input())\n    Y = int(input())\n\n    if N > K:\n        cost = K * X + (N - K) * Y\n    else:\n        cost = N * X\n\n    print(cost)\n\nmain()\n"}
{"label": 20, "index": 2574, "code": "n=int(raw_input())\nk=int(raw_input())\nx=int(raw_input())\ny=int(raw_input())\nprint x*(min(k,n))+y*(max(n-k,0))"}
{"label": 20, "index": 2575, "code": "def read():\n    return int(input())\n\ndef reads(sep=None):\n    return list(map(int, input().split(sep)))\n\ndef main():\n    n, k, x, y = [read() for _ in range(4)]\n    print(min(k, n)*x + max(0,n-k)*y)\n\nmain()\n"}
{"label": 20, "index": 2576, "code": "n = int(input())\nk = int(input())\nx = int(input())\ny = int(input())\nans = 0\nfor i in range(n):\n    if i < k:\n        ans += x\n    else:\n        ans += y\nprint(ans)"}
{"label": 20, "index": 2577, "code": "N = int(input())\nK = int(input())\nX = int(input())\nY = int(input())\n\nif N <= K:\n    print(N * X)\nelse:\n    print( K*X + (N - K) * Y)\n"}
{"label": 20, "index": 2578, "code": "import re\nimport doctest\n\n\nclass IO_for_Contest(object):\n    @staticmethod\n    def my_input():\n        # return raw_input()\n        return input()\n\n    @staticmethod\n    def read_from_input():\n        n = IO_for_Contest.read_int()\n        k = IO_for_Contest.read_int()\n        x = IO_for_Contest.read_int()\n        y = IO_for_Contest.read_int()\n        return n, k, x, y\n\n    @staticmethod\n    def read_line():\n        return IO_for_Contest.my_input().strip()\n\n    @staticmethod\n    def read_int():\n        return int(IO_for_Contest.my_input().strip())\n\n    @staticmethod\n    def read_n_int(n):\n        return list(map(\n                    int,\n                    re.split('\\s+', IO_for_Contest.my_input().strip())))[: n]\n\n\ndef solve():\n    buf = IO_for_Contest.read_from_input()\n    n = buf[0]\n    k = buf[1]\n    x = buf[2]\n    y = buf[3]\n    if n <= k:\n        print(x * n)\n    else:\n        rem = n - k\n        print(x * k + y * rem)\n\n\nif __name__ == '__main__':\n    # doctest.testmod()\n    solve()"}
{"label": 20, "index": 2579, "code": "n,k,x,y = [int(raw_input()) for _ in range(4)]\nif n <= k:\n    print n * x\nelse:\n    print k * x + (n - k) * y\n"}
{"label": 20, "index": 2580, "code": "N = int(input())\nK = int(input())\nX = int(input())\nY = int(input())\n\nans=0\n\nfor i in range(1,N+1):\n    if i <= K:\n        ans += X\n    else:\n        ans += Y\n\nprint(ans)\n"}
{"label": 20, "index": 2581, "code": "n=int(input())\nk=int(input())\nx=int(input())\ny=int(input())\n\nif n<= k:\n    print(x*n)\nelse:\n    print(x*k+(n-k)*y)\n"}
{"label": 20, "index": 2582, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\n\ndef main():\n    n = int(input())\n    k = int(input())\n    x = int(input())\n    y = int(input())\n    r = x * min(n,k)\n    r += y * max(0,n-k)\n    return r\n\n\n\nprint(main())\n"}
{"label": 20, "index": 2583, "code": "# -*- coding:utf-8 -*-\nN = int(input())\nK = int(input())\nX = int(input())\nY = int(input())\n\nif N < K :\n    print(str(X*N))\nelse:\n    print(str(X*K + Y*(N-K)))\n"}
{"label": 20, "index": 2584, "code": "N=int(input())\nK=int(input())\nX=int(input())\nY=int(input())\n\nA=0\n\nif N<=K:\n    A=N*X\n    print(A)\n    \nelse:\n    A=(K*X)+(N-K)*Y\n    print(A)"}
{"label": 20, "index": 2585, "code": "k = int(raw_input())\nn = int(raw_input())\nx = int(raw_input())\ny = int(raw_input())\ntotal = 0\nif k <= n:\n    total = x * k\nelse:\n    total = (k - n) * y + n * x\nprint total"}
{"label": 20, "index": 2586, "code": "n = int(input())        \nk = int(input())        \nx = int(input())        \ny = int(input())        \nif n-k < 0:             \n    ans = x*n           \nelse:                   \n    ans = k*x + (n-k)*y \nprint(ans)              \n"}
{"label": 20, "index": 2587, "code": "# -*- coding: utf-8 -*-\n# problem A\n\nN = int(input())\nK = int(input())\nX = int(input())\nY = int(input())\n\nif K < N:\n    out = K * X + (N - K) * Y\n    print(out)\nelse:\n    out = N * X\n    print(out)"}
{"label": 20, "index": 2588, "code": "n = int(input())\nk = int(input())\nx = int(input())\ny = int(input())\n\nprint(k * x + (n-k) * y if n>k else n*x)\n"}
{"label": 20, "index": 2589, "code": "N = input()\nK = input()\nX = input()\nY = input()\nprint N*Y + min(N,K)*(X-Y)\n"}
{"label": 20, "index": 2590, "code": "a=[int(input())for i in[0]*4];print(min(a[:2])*a[2]+max(0,a[0]-a[1])*a[3])"}
{"label": 20, "index": 2591, "code": "# \u5bbf\u6cca\u6570\nN = int(input())\n# \u901a\u5e38\u6599\u91d1\u671f\u9593\nK = int(input())\n# \u901a\u5e38\u6599\u91d1X\nX = int(input())\n# \u5272\u5f15\u6599\u91d1Y\nY = int(input())\n\nif N>K:\n\tprint(K*X + (N-K)*Y)\nelse:\n\tprint(N*X)"}
{"label": 20, "index": 2592, "code": "def main():\n    n = int(input())\n    k = int(input())\n    x = int(input())\n    y = int(input())\n\n    ans = 0\n    for i in range(1, n + 1):\n        if i <= k:\n            ans += x\n        else:\n            ans += y\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 20, "index": 2593, "code": "# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom sys import stdin\nn = int(stdin.readline())\nk = int(stdin.readline())\nx = int(stdin.readline())\ny = int(stdin.readline())\nif n<=k:\n    print n*x\nelse:\n    print k*x + (n-k)*y"}
{"label": 20, "index": 2594, "code": "N = int(input())\nK = int(input())\nX = int(input())\nY = int(input())\n\nprint(X*min(K, N) + Y*max(0, N-K))"}
{"label": 20, "index": 2595, "code": "N = int(input())\nK = int(input())\nX = int(input())\nY = int(input())\na = min(K, N)\nb = max(N-K, 0)\nprint(a*X+b*Y)"}
{"label": 20, "index": 2596, "code": "n = int(input())\nk = int(input())\nx = int(input())\ny = int(input())\n\nif n <= k:\n    print(n * x)\nelse:\n    print(k * x + (n - k) * y)\n"}
{"label": 20, "index": 2597, "code": "# coding: utf-8\nn = 0\nk = 0\nx = 0\ny = 0\nt = 0\n\nn = input()\nk = input()\nx = input()\ny = input()\nif n <= k:\n    print(n*x);\nelse:\n    t = n - k\n    print((t*y) + (k*x))"}
{"label": 20, "index": 2598, "code": "N = int(input())\nK = int(input())\nX = int(input())\nY = int(input())\n\nif N >= K:\n    print(K * X + (N - K) * Y)\nelse:\n    print(N * X)"}
{"label": 20, "index": 2599, "code": "N = int(input())\nK = int(input())\nX = int(input())\nY = int(input())\nif N <= K:\n    ans = N * X\n    print(ans)\nelse:\n    a = K * X\n    b = (N - K) * Y\n    ans = a + b\n    print(ans)\n"}
{"label": 21, "index": 2600, "code": "import re\np = re.compile('^(.)\\\\1')\nw = ''.join(sorted(list(raw_input())))\nr = re.subn(p,'',w)\nwhile r[1]:\n    r = re.subn(p,'',r[0])\nif len(r[0]):\n    print 'No'\nelse:\n    print 'Yes'\n"}
{"label": 21, "index": 2601, "code": "import sys\nw = input()\nfor i in range(0,26):\n    if w.count(chr(ord(\"a\")+i))%2 != 0:\n        print(\"No\")\n        sys.exit()\nprint(\"Yes\")\n"}
{"label": 21, "index": 2602, "code": "w=raw_input()\nprint\"Yes\"*all(w.count(chr(97+e))%2==0for e in range(26))or\"No\"\n"}
{"label": 21, "index": 2603, "code": "str = input()\nlist = []\n\nfor w in range(len(str)):\n    if ord(str[w]) in list :\n        list.remove(ord(str[w]))\n    else :\n        list.append(ord(str[w]))\n\nif len(list) == 0 :\n    print('Yes')\nelse :\n    print(\"No\")\n"}
{"label": 21, "index": 2604, "code": "c={}\nfor k in raw_input():c[k]=(c[k]if k in c else 0)+1\nprint\"No\"if any(c[k]%2 for k in c)else\"Yes\""}
{"label": 21, "index": 2605, "code": "#!/usr/local/bin/python3\n\nimport os, sys\n\nif __name__ ==  \"__main__\":\n    d = {}\n    text = input()\n\n    for j in text:\n        for i in j:\n            if i not in d:\n                d[i] = 1\n            else :\n                d[i] += 1\n\n    # for j in d:\n    #     print(j, ':', d[j])\n    flag = 0\n    for j in d:\n        if d[j] % 2 == 0:\n            continue\n        else:\n            flag = 1\n            break\n    if flag != 0:\n        print('No')\n    else:\n        print('Yes')\n"}
{"label": 21, "index": 2606, "code": "from collections import Counter\nimport sys\ncnt = Counter(input())\nfor i in cnt:\n    if cnt[i]%2==1:\n        print(\"No\")\n        sys.exit()\nprint(\"Yes\")\n"}
{"label": 21, "index": 2607, "code": "import collections\ns = input()\ncnt = collections.Counter(s)\nprint('Yes' if all([v % 2 == 0 for v in cnt.values()]) else 'No')\n"}
{"label": 21, "index": 2608, "code": "import sys\n\nw = sys.stdin.readline()\n\nc = 'a'\n\nfor i in xrange(26):\n    if w.count(chr(ord(c) + i)) % 2 == 1:\n        print 'No'\n        break\nelse:\n    print 'Yes'\n"}
{"label": 21, "index": 2609, "code": "w=input()\n\nN=len(w)\n\n\nfor i in range(N):\n    if w.count(w[i])%2!=0:\n        print('No')\n        break\nelse:\n    print('Yes')"}
{"label": 21, "index": 2610, "code": "import sys\ns=str(input())\nfor i in range(97,97+26):\n  if s.count(chr(i))%2!=0:\n    print(\"No\")\n    sys.exit()\nprint(\"Yes\")"}
{"label": 21, "index": 2611, "code": "a = raw_input().strip()\nl = [0]*26\nfor x in a:\n\tif l[ord(x)-97] == 1:\n\t\tl[ord(x)-97] = 0\n\telse:\n\t\tl[ord(x)-97] =1\nif max(l) == 0:\n\tprint('Yes')\nelse:\n\tprint('No')"}
{"label": 21, "index": 2612, "code": "w = input()\nm = {}\nfor t in w:\n    m[t] = m.get(t, 0) + 1\n\nfor key in m:\n    if m[key] % 2 == 1:\n        print(\"No\")\n        exit()\n\nprint(\"Yes\")"}
{"label": 21, "index": 2613, "code": "from collections import defaultdict\nw = defaultdict(int)\nfor s in input():\n\tw[s] += 1\n\nfor k in w:\n\tif w[k] % 2 == 0:\n\t\tcontinue\n\telse:\n\t\tprint('No')\n\t\tbreak\n\nelse:\n\tprint('Yes')\n"}
{"label": 21, "index": 2614, "code": "# -*- coding:utf-8 -*-\n\nw = input()\n\nchars = \"abcdefghijklmnopqrstuvwxyz\"\n\nfor x in chars:\n    if w.count(x) % 2 != 0:\n        print(\"No\")\n        break\nelse:\n    print(\"Yes\")     \n\n\n\n\n"}
{"label": 21, "index": 2615, "code": "text = input()\nprint('No' if any([text.count(x) & 1 for x in set(text)]) else 'Yes')\n"}
{"label": 21, "index": 2616, "code": "# -*- coding:utf-8 -*-\nimport sys\nw = input()\nfor tmp in range (len(w)):\n    if w.count(w[tmp])%2 != 0:\n        print(\"No\")\n        sys.exit()\nprint(\"Yes\")"}
{"label": 21, "index": 2617, "code": "def f(w):\n    for c in set(w):\n        if w.count(c) % 2 != 0:\n            return \"No\"\n    return \"Yes\"\n    \nw = raw_input()\nprint f(w)\n"}
{"label": 21, "index": 2618, "code": "d = dict()\nfor c in raw_input():\n    d[c] = d.get(c, 0 ) + 1\nflag = True\nfor v in d.values():\n    if v % 2 == 1:\n        flag = False\nprint \"Yes\" if flag else \"No\""}
{"label": 21, "index": 2619, "code": "n = str(input())\n\nd = {}\nfor i in n:\n    if i in d:\n        d[i] += 1\n    else:\n        d[i] = 1\n\nres = 'Yes'\nfor i in d:\n    if d[i] & 1:\n        res = 'No'\n        break\n\nprint(res)\n"}
{"label": 21, "index": 2620, "code": "\n\ns = raw_input()\nlut = {}\n\nfor c in s:\n    if lut.has_key(c) :\n        lut[c] += 1\n    else:\n        lut[c] = 1\n\nret = \"Yes\"\nfor c in range(ord('a'),ord('z')+1):\n    c = chr(c)\n    if lut.has_key(c) and lut[c] % 2 != 0:\n        ret = \"No\"\n        break\n\nprint ret"}
{"label": 21, "index": 2621, "code": "a = raw_input()\n\nb = []\nfor i in range(30):\n\tb.append(0)\n\nfor i in a:\n\tb[ord(i) - ord(\"a\")] += 1\n\nc = 0\nfor i in b:\n\tif i % 2 != 0:\n\t\tc = 1\n\t\tbreak\nif c == 0:\n\tprint \"Yes\"\nelse:\n\tprint \"No\""}
{"label": 21, "index": 2622, "code": "# -*- coding:utf-8 -*-\ndef checkValue(count):\n    for v in count.values():\n        if v % 2 != 0:\n            return 'No'\n    return 'Yes'\n\nif __name__ == \"__main__\":\n    w = input()\n\n    count = {}\n\n    for i in range(len(w)):\n        if w[i] in count:\n            count[w[i]] = count[w[i]] + 1\n        else:\n            count[w[i]] = 1\n\n    print(checkValue(count))\n"}
{"label": 21, "index": 2623, "code": "string = raw_input()\ndic = {}\nfor i in range(len(string)):\n  if dic.has_key(string[i]):\n    del dic[string[i]]\n  else:\n    dic[string[i]] = True\n\nif len(dic) == 0:\n  print \"Yes\"\nelse:\n  print \"No\""}
{"label": 21, "index": 2624, "code": "from collections import defaultdict\ns=raw_input()\ndi=defaultdict(int)\nfor i in xrange(len(s)):\n    di[s[i]]+=1\nfor i in xrange(len(s)):\n    j=di[s[i]]\n    if j%2==1:\n        print(\"No\")\n        exit()\nprint(\"Yes\")"}
{"label": 21, "index": 2625, "code": "'''\nCreated on 2016/08/28\n\n@author: diyosko7\n'''\n\nif __name__ == '__main__':\n    n = 1\n    lines = [str(input()) for i in range(n)]\n    line = lines[0]\n    strDict = {}\n\n    v = [line[i: i+1] for i in range(0, len(line), 1)]\n    \n    d = {}\n    for s in v:\n        d.update({s:0})\n    for s in v:\n        d[s] += 1  \n    \n    flg = True\n    for k,v in d.items():\n        if v%2==0:\n            pass\n        else:\n            flg = False\n    if flg==True:\n        print(\"Yes\")\n    else:\n        print(\"No\")"}
{"label": 21, "index": 2626, "code": "import sys\n\na = raw_input()\n\nfor i in a:\n\ts = 0\n\tfor j in a:\n\t\tif i == j:\n\t\t\ts += 1 \n\tif s % 2 == 1:\n\t\tprint \"No\"\n\t\tsys.exit()\n\nprint \"Yes\""}
{"label": 21, "index": 2627, "code": "import sys\n\nw = sys.stdin.readline()\n\nc = 'a'\n\nfor i in xrange(ord('a') - ord('A')):\n    if w.count(chr(ord(c) + i)) % 2 == 1:\n        print 'No'\n        break\nelse:\n    print 'Yes'\n"}
{"label": 21, "index": 2628, "code": "#ABC044B\n\nw=raw_input()\nres=True\nfor i in xrange(97,123):\n if w.count(chr(i))%2==0:\n  res=res and True\n else:\n  res=False\nprint \"Yes\" if res==True else \"No\"\n"}
{"label": 21, "index": 2629, "code": "from collections import Counter\nprint 'Yes' if all(a%2-1 for a in Counter(raw_input()).values()) else 'No'\n"}
{"label": 21, "index": 2630, "code": "from collections import Counter\nw = list(raw_input())\nc = Counter(w)\nfor k, v in c.items():\n    if v % 2 == 1:\n        print \"No\"\n        exit()\nelse:\n    print \"Yes\"\n"}
{"label": 21, "index": 2631, "code": "import string\n\nw = raw_input()\nd = dict.fromkeys(string.ascii_lowercase, 0)\nfor i in range(len(w)):\n    d[w[i]] += 1\n\n    \nfinalprint = \"Yes\"    \n\nfor key, value in d.iteritems():\n    bool = value % 2\n    if bool == 0:\n        continue\n    else:\n        finalprint = \"No\"\n        break\n\nprint finalprint"}
{"label": 21, "index": 2632, "code": "w=str(input())\nts=list(set(w))\nfor t in ts:\n    b=w.count(t)%2 == 0\n    if not b:\n        break\nprint('Yes' if b else 'No')"}
{"label": 21, "index": 2633, "code": "w = raw_input()\nqueue = []\nfor i in w:\n    if i in queue:\n        queue.remove(i)\n    else:\n        queue.append(i)\nif queue:\n    print \"No\"\nelse:\n    print \"Yes\"\n"}
{"label": 21, "index": 2634, "code": "w = input()\nexist = {}\nfor i in w:\n    if i not in exist:\n        exist[i] = 1\n    else:\n        exist[i] += 1\nanswer = \"Yes\"\nfor i in exist.values():\n    if i%2 != 0:\n        answer = \"No\"\n        break\nprint(answer)    "}
{"label": 21, "index": 2635, "code": "w = input()\n\nfor i in range(97, 97+26):\n  if w.count(chr(i)) % 2 != 0:\n    print('No')\n    exit()\nprint('Yes')\n"}
{"label": 21, "index": 2636, "code": "w=list(str(raw_input()))\nlib=list(set(w))\nres=\"Yes\"\nfor i in range(0,len(lib)):\n    if(w.count(lib[i])%2==1):\n        res=\"No\"\nprint(res)"}
{"label": 21, "index": 2637, "code": "def ri(): return int(input())\ndef rli(): return list(map(int, input().split()))\ndef rls(): return list(input())\ndef pli(a): return \"\".join(list(map(str, a)))\n\nls = \"a b c d e f g h i j k l m n o p q r s t u v w x y z\".split()\nw = rls()\nflag = True\nfor i in ls:\n    count = 0\n    for j in w:\n        if(j == i):\n            count += 1\n    if(count % 2 == 1):\n        flag = False\n        break\nprint(\"Yes\" if flag else \"No\")"}
{"label": 21, "index": 2638, "code": "import string\nw = input()\nfor a in string.ascii_lowercase:\n    cnt = 0\n    for t in w:\n        if t == a:\n            cnt = cnt + 1\n    if cnt % 2 == 1:\n        print(\"No\")\n        exit()\n\nprint(\"Yes\")"}
{"label": 21, "index": 2639, "code": "from collections import Counter\n\nif len(list((filter(lambda x: x%2 != 0, Counter(list(input())).values())))) > 0:\n    print('No')\nelse:\n    print('Yes')\n"}
{"label": 21, "index": 2640, "code": "a=input()\nfor x in set(a):\n    if a.count(x)&1:print('No');exit()\nprint('Yes')"}
{"label": 21, "index": 2641, "code": "from collections import defaultdict\nword = str(input())\ncount_dict = defaultdict(int)\nbeautiful = True\nfor letter in word:\n    count_dict[letter] += 1\nfor cnt in count_dict.values():\n    if cnt % 2 == 1:\n        beautiful = False\nif beautiful:\n    print('Yes')\nelse:\n    print('No')\n"}
{"label": 21, "index": 2642, "code": "w = input()\nc = [chr(i) for i in range(ord(\"a\"), ord(\"z\")+1)]\nfor i in c:\n  if w.count(i) % 2 == 1:\n    print(\"No\")\n    exit()\nprint(\"Yes\")"}
{"label": 21, "index": 2643, "code": "wlist = []\nw = input()\nfor letter in w:\n    wlist.append(letter)\na = []\nb = []\ni = 0\nfor letter in sorted(wlist):\n    if i%2==1:\n        a.append(letter)\n    else:\n        b.append(letter)\n    i += 1\nif sorted(a) == sorted(b):\n    print('Yes')\nelse:\n    print('No')\n"}
{"label": 21, "index": 2644, "code": "alp = [chr(i) for i in range(97, 97+26)]\ncnt = [0] * 26\n\nw = list(input())\n\nfor W in w:\n    for i in range(26):\n        if W == alp[i]:\n            cnt[i] += 1\n\nfor i in range(26):\n    if cnt[i] % 2 :\n        print(\"No\")\n        exit()\n\nprint(\"Yes\")"}
{"label": 21, "index": 2645, "code": "W = list(raw_input())\nflagArray = [True for i in range(26)]\nfor w in W:\n\tflagArray[ord(w)-97] = not(flagArray[ord(w)-97])\nflag = True\nfor f in flagArray:\n\tif not f:\n\t\tprint \"No\"\n\t\tflag = False\n\t\tbreak\nif flag:\n\tprint \"Yes\""}
{"label": 21, "index": 2646, "code": "from collections import Counter\nprint(('No','Yes')[all(i%2==0 for i in Counter(input()).values())])"}
{"label": 21, "index": 2647, "code": "import sys \n\nw = sys.stdin.readline()\ncount = [0]*26\n\nfor i in w:\n    if ord(i) in range(ord('a'),ord('z')+1):\n        count[ord(i)-ord('a')] = count[ord(i)-ord('a')] + 1           \n\nfor i in count:\n    if i%2 != 0:\n        print 'No'\n        sys.exit(0)\nprint 'Yes'"}
{"label": 21, "index": 2648, "code": "from collections import defaultdict as dd\nw = raw_input()\n\ncountlist = dd(int)\nfor i in range(len(w)):\n    countlist[w[i]] += 1\n\nflag = True\nfor value in countlist.itervalues():\n    if value % 2 != 0:\n        flag = False\n        break\n\nif flag:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 21, "index": 2649, "code": "import collections\nw = input()\nw_cnt = collections.Counter(w)\njurge = \"Yes\"\nfor key in w_cnt:\n    if w_cnt[key] % 2:\n        jurge = \"No\"\n        break\nif jurge == \"No\":\n    print(\"No\")\nelse:\n    print(\"Yes\")\n"}
{"label": 21, "index": 2650, "code": "w = input()\n\ndef g(num):\n   if num%2 == 0:\n      return 1\n   else:\n      return 0\n\nif g(w.count('a'))*g(w.count('b'))*g(w.count('c'))*g(w.count('d'))*g(w.count('e'))*g(w.count('f'))*g(w.count('g'))*g(w.count('h'))*g(w.count('i'))*g(w.count('j'))*g(w.count('k'))*g(w.count('l'))*g(w.count('m'))*g(w.count('n'))*g(w.count('o'))*g(w.count('p'))*g(w.count('q'))*g(w.count('r'))*g(w.count('s'))*g(w.count('t'))*g(w.count('u'))*g(w.count('v'))*g(w.count('w'))*g(w.count('x'))*g(w.count('y'))*g(w.count('z')) == 0:\n   print(\"No\")\nelse:\n   print (\"Yes\")"}
{"label": 21, "index": 2651, "code": "w=str(raw_input())\n\nisBeautiful = True\n\nfor c in w:\n    if (w.count(c)%2)!=0:\n        isBeautiful = False\n        break\n\nprint \"Yes\" if isBeautiful else \"No\"\n"}
{"label": 21, "index": 2652, "code": "w=raw_input()\nl=[0]*26\nfor i in w:\n    l[ord(i)-97]+=1\nfor i in l:\n    if i%2:\n        print 'No'\n        exit()\nprint 'Yes'\nexit()"}
{"label": 21, "index": 2653, "code": "from collections import Counter\n\nw = raw_input()\ncounter = Counter(w)\n\nprint \"Yes\" if all(v % 2 == 0 for v in counter.values()) else \"No\""}
{"label": 21, "index": 2654, "code": "w = input()\ncnt = 26*[0]\n\nfor i in w:\n    cnt[ord(i)-ord(\"a\")] += 1\n\nfor c in cnt:\n    if c % 2 != 0:\n        print(\"No\")\n        exit()\n\nprint(\"Yes\")\n"}
{"label": 21, "index": 2655, "code": "w = input()\n\nwords = {}\n\nfor c in w:\n    if c in words:\n        words[c] += 1\n    else:\n        words[c] = 1\n\nis_beautiful = True\n\nfor c in words:\n    if words[c] % 2:\n        is_beautiful = False\n        break\n\nif is_beautiful:\n    print('Yes')\nelse:\n    print('No')"}
{"label": 21, "index": 2656, "code": "#!/usr/bin/env python\n# coding:utf-8\nimport os, sys\nimport math\nfrom collections import defaultdict\nw = raw_input()\nm = defaultdict(int)\n\nfor i in range(len(w)):\n    m[w[i]]+=1\nb = True\nfor k,v in m.iteritems():\n    b &= (v%2==0)\nprint \"Yes\" if b else \"No\"\n\n\n\n"}
{"label": 21, "index": 2657, "code": "x=[0]*26\nfor c in input():\n    x[ord(c)-ord('a')] = (x[ord(c)-ord('a')] + 1) & 1\nprint(\"Yes\" if sum(x) == 0 else \"No\")"}
{"label": 21, "index": 2658, "code": "from collections import Counter\nprint(\"Yes\" if all(x % 2 == 0 for x in Counter(input()).values()) else \"No\")"}
{"label": 21, "index": 2659, "code": "w_list = list(str(input()))\nw_list.sort()\nl = len(w_list)\n\nif l == 1:\n    print(\"No\")\n    exit()\n\nfor i,j in zip(range(0, l, 2) ,range(1, l, 2)):\n    if w_list[i] != w_list[j]:\n        print(\"No\")\n        break\nelse:\n    print(\"Yes\")\n"}
{"label": 21, "index": 2660, "code": "# -*- coding: utf-8 -*-\nimport sys,copy,math,heapq,itertools as it,fractions,re,bisect,collections as coll\n\nw = raw_input()\ncnt = [0]*26\nfor c in w:\n    cnt[ord(c) - ord(\"a\")] += 1\nprint \"Yes\" if all([cnt[i]%2 == 0 for i in xrange(26)]) else \"No\"\n"}
{"label": 21, "index": 2661, "code": "# vim: fileencoding=utf-8\n\nfrom collections import Counter\n\ndef read_input():\n    return input()\n\ndef check_beauty(s):\n    \"\"\"\n    >>> check_beauty(\"abaccaba\")\n    Yes\n    >>> check_beauty(\"hthth\")\n    No\n    \"\"\"\n    checker = Counter(s)\n    checker_key = [i[1] for i in checker.items() if not i[1] % 2 == 0]\n\n    if len(checker_key) > 0:\n        print(\"No\")\n    else:\n        print(\"Yes\")\n\n\nif __name__ == '__main__':\n\n    # import doctest\n    #\n    # doctest.testmod()\n\n    s = read_input()\n\n    check_beauty(s)\n"}
{"label": 21, "index": 2662, "code": "import collections\nw = raw_input()\ns=[]\ncount_dict = collections.Counter(w)\na = count_dict.values()\nfor i in a:\n\ti=i%2\n\ts.append(i)\nb = 1\nif b in s:\n\tprint \"No\"\nelse:\n\tprint \"Yes\""}
{"label": 21, "index": 2663, "code": "w=input()\n\nif all(w.count(chr(ord('a')+i))%2==0 for i in range(26)):\n    print('Yes')\nelse:\n    print('No')"}
{"label": 21, "index": 2664, "code": "# -*- coding: utf-8 -*-\n# problem B\nfrom collections import defaultdict\n\nletters = str(input())\n\n# defultdict(int)\u306f\u767b\u9332\u3055\u308c\u3066\u3044\u306a\u3044\u30ad\u30fc\u304c\u547c\u3073\u51fa\u3055\u308c\u305f\u6642\u306b\u3001\u81ea\u52d5\u7684\u306b{\u30ad\u30fc: 0}\u3092\u767b\u9332\u3057\u3066\u304f\u308c\u308b\nd = defaultdict(int) #int() = 0\nfor letter in letters:\n    d[letter] += 1\n    \nk = 0\nfor values in d.values():\n    if values % 2 == 0:\n        k += 0\n    else:\n        k +=1\n\nif k == 0:\n    print('Yes')\nelse:\n    print('No')\n    "}
{"label": 21, "index": 2665, "code": "s = input()\nf = True\nfor i in set(s):\n    if s.count(i) % 2 : f = False\nprint('Yes' if f else 'No')"}
{"label": 21, "index": 2666, "code": "from collections import defaultdict\ncounts = defaultdict(int)\nfor c in raw_input():\n  counts[c] += 1\nallgood = True\nfor k in counts:\n  allgood &= (counts[k] % 2 == 0)\nprint \"Yes\" if allgood else \"No\""}
{"label": 21, "index": 2667, "code": "import sys\n\nstring = input()\n\ncounter = {}\nfor c in string:\n    if not c in counter:\n        counter[c] = 1\n    else:\n        counter[c] += 1\n\nfor v in counter.values():\n    if v % 2 != 0:\n        print(\"No\")\n        sys.exit()\n\nprint(\"Yes\")"}
{"label": 21, "index": 2668, "code": "w=input()\nprint(\"Yes\" if not sum([w.count(i)%2 for i in list(set(w))]) else \"No\")"}
{"label": 21, "index": 2669, "code": "# -*- coding: utf-8 -*-\nw = raw_input()\n\nalphabet = [0]*26\nfor i in range(len(w)):\n    alphabet[ord(w[i])-97] += 1\nfor i in range(26):\n    alphabet[i] = True if alphabet[i]%2 == 0 else False\nprint ('Yes' if all(alphabet) else 'No')"}
{"label": 21, "index": 2670, "code": "import string\nw = input()\nisYes = True\nfor i in string.ascii_lowercase:\n    if w.count(i) % 2 == 1:\n        isYes = False\n        \nif isYes:\n    print( \"Yes\" )\nelse:\n    print( \"No\" ) \n"}
{"label": 21, "index": 2671, "code": "def B(w,arpha,count):\n    for c in w:\n        for i,a in enumerate(arpha):\n            if c == a:\n                count[i]+=1\n\n    for i in count:\n        if  i % 2 != 0:\n            return print(\"No\")\n    print(\"Yes\")\n\nw = input()\narpha = [chr(i) for i in range(97,97+26)]\ncount = [0 for i in range(26)]\nB(w,arpha,count)\n"}
{"label": 21, "index": 2672, "code": "#!/usr/bin/env python\n#coding:utf-8\n\ndef input_strs():\n    return input().split(\" \")\n\ndef input_nums():\n    return [int(i) for i in input_strs()]\n\n\nw = input()\nok = True\n\nfor c in w:\n    p = 0\n    for k in w:\n        if c == k:\n            p += 1\n    ok = ok and (p % 2 == 0)\n\nif ok:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 21, "index": 2673, "code": "w = input()\nm = [0] * 26\nfor t in w:\n    m[ord(t) - ord('a')] += 1\n\nfor cnt in m:\n    if cnt % 2 == 1:\n        print(\"No\")\n        exit()\n\nprint(\"Yes\")"}
{"label": 21, "index": 2674, "code": "w = input()\nfor c in w:\n    cnt = 0\n    for t in w:\n        if c == t:\n            cnt += 1\n    if cnt % 2 == 1:\n        print(\"No\")\n        exit()\nprint(\"Yes\")"}
{"label": 21, "index": 2675, "code": "import string\nW = input()\nfor s in string.ascii_lowercase:\n    cnt = W.count(s)\n    if cnt % 2 != 0:\n        print(\"No\")\n        exit()\nprint(\"Yes\")\n"}
{"label": 21, "index": 2676, "code": "from collections import defaultdict\ncounts=defaultdict(int)\nfor c in raw_input():counts[c]+=1\nprint\"Yes\"if all(counts[k]%2<1 for k in counts)else\"No\""}
{"label": 21, "index": 2677, "code": "w = input()\nmp = dict()\nfor c in w:\n    if c in mp:\n        mp[c] += 1\n    else:\n        mp[c] = 1\nok = True\nfor k,v in mp.items():\n    if v % 2 == 1:\n        ok = False\n        break\nif ok:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 21, "index": 2678, "code": "from collections import Counter\nw = input()\nC = Counter(w)\nfor l in C:\n\tif C[l] % 2:\n\t\tprint(\"No\")\n\t\tbreak\nelse:\n\tprint(\"Yes\")\n"}
{"label": 21, "index": 2679, "code": "import collections\nimport sys\nc = collections.Counter(input()).most_common()\nfor i in c:\n\tif i[1] % 2 != 0:\n\t\tprint('No')\n\t\tsys.exit()\n\nprint('Yes')\n"}
{"label": 21, "index": 2680, "code": "import re\np = re.compile('^(.)\\\\1')\nw = ''.join(sorted(list(raw_input())))\nr = re.subn(p,'',w)\nwhile r[1]:\n    r = re.subn(p,'',r[0])\nprint 'No' if len(r[0]) else 'Yes'"}
{"label": 21, "index": 2681, "code": "w = input()\ncharacters = list(w)\nfor character in characters:\n    if characters.count(character) %2 != 0:\n        print('No')\n        break\nelse:\n    print('Yes')\n"}
{"label": 21, "index": 2682, "code": "import collections\no = \"Yes\"\nfor v in collections.Counter(input().strip()).values():\n    if v % 2 != 0: o = \"No\"\nprint(o)"}
{"label": 21, "index": 2683, "code": "import re\nimport doctest\n\n\nclass IO_for_Contest(object):\n    @staticmethod\n    def my_input():\n        # return raw_input()\n        return input()\n\n    @staticmethod\n    def read_from_input():\n        # TODO: impl this for each problem\n        pass\n\n    @staticmethod\n    def read_line():\n        return IO_for_Contest.my_input().strip()\n\n    @staticmethod\n    def read_int():\n        return int(IO_for_Contest.my_input().strip())\n\n    @staticmethod\n    def read_n_int(n):\n        return list(map(\n                    int,\n                    re.split('\\s+', IO_for_Contest.my_input().strip())))[ : n]\n\ndef solve():\n    ceil = 100\n    string = IO_for_Contest.read_line()[: ceil]\n    s = set(string)\n    for xx in string:\n        s.add(xx)\n    for e in s:\n        if string.count(e) % 2 != 0:\n            print('No')\n            return\n    print('Yes')\n\n\nif __name__ == '__main__':\n    # doctest.testmod()\n    solve()"}
{"label": 21, "index": 2684, "code": "# coding: utf-8\n# Here your code !\n\nw = input()\n\ncnt = 0\nfor i in range(len(w)) :\n    if w.count(w[i]) % 2 != 0 :\n        cnt += 1\n\nprint(\"Yes\" if cnt == 0 else \"No\")"}
{"label": 21, "index": 2685, "code": "import collections\n\nfor v in collections.Counter(input()).values():\n    if v % 2 != 0:\n        print(\"No\")\n        break\nelse:\n    print(\"Yes\")"}
{"label": 21, "index": 2686, "code": "import collections\nword = raw_input()\n\nletter_list = collections.Counter(word)\nans = 'Yes'\n\nfor item, n in letter_list.items():\n    if n%2 == 0:\n        continue\n    else:\n        ans = 'No'\n        break\nprint ans\n"}
{"label": 21, "index": 2687, "code": "c={}\nfor k in raw_input():\n try:c[k]+=1\n except:c[k]=1\nprint\"Yes\"if all(c[k]%2<1 for k in c)else\"No\""}
{"label": 21, "index": 2688, "code": "# Enter your code here. Read input from STDIN. Print output to STDOUT\nfrom sys import stdin\nans = 'Yes'\ns = set()\na = stdin.readline().strip()\nfor i in a:\n if i in s:\n  s.remove(i)\n else:\n  s.add(i)\nif len(s):\n ans = 'No'\nprint ans"}
{"label": 21, "index": 2689, "code": "w = input()\n\n\nhist = dict()\nfor char in w:\n  if not char in hist.keys():\n    hist[char] = 1\n  else:\n    hist[char] += 1\n\nanswer = True\nfor value in hist.values():\n  if value % 2 == 1:\n    answer = False\n\nif answer:\n  print ('Yes')\nelse:\n  print('No')"}
{"label": 21, "index": 2690, "code": "s = raw_input()\nword_list = {}\nfor i in s:\n    if not word_list.has_key(i):\n        word_list[i] = 1\n    else:\n        word_list[i] += 1\n\nflag = 0\nfor i in word_list.values():\n    if i % 2 == 1:\n        flag = 1\n\nif flag == 1:\n    print 'No'\nelse:\n    print 'Yes'\n"}
{"label": 21, "index": 2691, "code": "w = raw_input()\n\nfor c in w :\n  if w.count(c) % 2 != 0 :\n    print \"No\"\n    break\nelse :\n  print \"Yes\"\n"}
{"label": 21, "index": 2692, "code": "import string\nimport sys\n \nw = input()\nfor c in string.ascii_lowercase:\n    if w.count(c) % 2 == 1:\n        print(\"No\")\n        sys.exit()\nprint(\"Yes\")"}
{"label": 21, "index": 2693, "code": "w = input()                    \nl = list(w)                    \nl.sort()                       \nans = \"Yes\"                    \nif len(l)%2 != 0:\n    print(\"No\")\n    exit()\nfor i in range(int(len(l)/2)): \n    if l[2*i] != l[2*i+1]:     \n        ans = \"No\"             \n        break                  \nprint(ans)                     \n"}
{"label": 21, "index": 2694, "code": "from collections import Counter\n\nw = raw_input()\nx = []\nf = True\nfor i in w:\n    x.append(i)\ncounter = Counter(x)\nfor word,cnt in counter.most_common():\n    if not cnt % 2 == 0:\n        f = False\n\nif f:\n    print 'Yes'\nelse:\n    print 'No'\n"}
{"label": 21, "index": 2695, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\"\"\"\n\"\"\"\n\n# import {{{\nfrom collections import ChainMap\nfrom collections import Counter\nfrom collections import defaultdict\nfrom collections import deque\nfrom collections import namedtuple\nimport bisect\nimport copy\nimport decimal\nimport fractions\nimport functools\nimport heapq\nimport itertools\nimport math\nimport operator\nimport pdb\nimport pprint\nimport random\nimport re\nimport string\nimport sys\nimport time\n\ntry:\n    import numpy as np\n    import scipy as sp\nexcept:\n    pass\n# }}}\n\n# util {{{\ndef is_odd(x):\n    return x % 2 == 1\n\ndef is_even(x):\n    return x % 2 == 0\n\ndef cmp(x, y):\n    return (x > y) - (x < y)\n\ndef sgn(x):\n    return cmp(x, 0)\n\ndef clamp(x, lo, hi):\n    assert lo <= hi\n    if x < lo:\n        return lo\n    elif x > hi:\n        return hi\n    else:\n        return x\n\ndef chmax(xmax, x):\n    if x > xmax:\n        return x, True\n    else:\n        return xmax, False\n\ndef chmin(xmin, x):\n    if x < xmin:\n        return x, True\n    else:\n        return xmin, False\n\ndef argmax(seq):\n    return max(range(len(seq)), key=seq.__getitem__)\n\ndef argmin(seq):\n    return min(range(len(seq)), key=seq.__getitem__)\n\ndef INPUT():\n    return input().rstrip() # CRLF\u5bfe\u7b56\n\nsys.setrecursionlimit(100000)\n# }}}\n\n# \u9069\u5b9c\u8abf\u6574\nPINF = float(\"inf\")\nNINF = float(\"-inf\")\nEPS  = 1e-9\n\n\n\ndef main():\n    S = input()\n    cnt = Counter(S)\n\n    ok = all(is_even(v) for v in cnt.values())\n    print(\"Yes\" if ok else \"No\")\n\nif __name__ == \"__main__\": main()\n"}
{"label": 21, "index": 2696, "code": "#!/usr/bin/env python\n# coding:utf-8\nimport os, sys\nimport math\nfrom collections import defaultdict\nw = raw_input()\nm = defaultdict(int)\n\nfor i in range(len(w)):\n    m[w[i]]+=1\nprint \"Yes\" if all([x%2==0 for x in m.values()]) else \"No\"\n\n\n\n"}
{"label": 21, "index": 2697, "code": "from collections import Counter\n\nw = input()\nflag = 0\n\ncounter = Counter(w)\n\nfor word, cnt in counter.most_common():\n    if cnt % 2 != 0:\n        flag = 1\n\nif flag == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 21, "index": 2698, "code": "from collections import Counter\n\n\ndef main():\n    w = input()\n    c = Counter(w)\n\n    for k, v in c.items():\n        if v % 2 != 0:\n            print(\"No\")\n            return\n    print(\"Yes\")\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 21, "index": 2699, "code": "from collections import defaultdict\nw=input()\ndic=defaultdict(int)\nfor c in list(w):\n    dic[c]+=1\n    dic[c]%=2\nsum=0\nfor k in dic.keys():\n    sum+=dic[k]\nif sum>0:\n    print('No')\nelse:\n    print('Yes')\n"}
{"label": 21, "index": 2700, "code": "w = list(raw_input())\nM = {}\nfor c in w:\n    if not c in M:\n        M[c] = 0\n    M[c] += 1\ndef run():\n    for k, v in M.items():\n        if v % 2 == 1:\n            return \"No\"\n    return \"Yes\"\nprint run()"}
{"label": 21, "index": 2701, "code": "w=list(input())\nalpha=list('abcdefghijklmnopqrstuvwxyz')\nfor i in alpha:\n    if w.count(i)%2 ==1:\n        print('No')\n        exit()\nprint('Yes')"}
{"label": 21, "index": 2702, "code": "S = input()\nset_S = set(S)\nsum = 0\nflag = True\n\nfor ch in set_S:\n\tif S.count(ch) % 2 != 0:\n\t\tprint('No')\n\t\tflag = False\n\t\tbreak\nif flag:\n\tprint('Yes')"}
{"label": 21, "index": 2703, "code": "w = list(input())\n\nfor i in range(len(w)):\n    a = w[i]\n    ans = w.count(a)\n    if ans % 2 == 1:\n        print(\"No\")\n        break\n    elif ans % 2 == 0 and i == len(w)-1:\n        print(\"Yes\")\n"}
{"label": 21, "index": 2704, "code": "S=input()\nans='Yes'\nfor c in S:\n  if S.count(c) % 2 != 0:\n    ans='No'\nprint(ans)"}
{"label": 21, "index": 2705, "code": "S = input();\nfor c in S:\n\tif S.count(c)%2:\n\t\tprint(\"No\")\n\t\tquit()\nprint(\"Yes\")"}
{"label": 21, "index": 2706, "code": "# coding: utf-8;\n\ndef main():\n    w = input()\n    for s in w:\n        if list(w).count(s) % 2 == 1:\n            print('No')\n            return\n    print('Yes')\n\nif __name__ == '__main__':\n    main()"}
{"label": 21, "index": 2707, "code": "from collections import Counter\nw = input()\ncnt = Counter()\nfor word in w:\n    cnt[word] += 1\nv = list(cnt.values())\nif sum([v[i] %2 for i in range(len(cnt))]) == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 21, "index": 2708, "code": "str = input()\nstr_set = set(str)\n\nfor x in str_set:\n    c = str.count(x)\n    if c % 2 == 1:\n        print('No')\n        exit()\n\nprint('Yes')"}
{"label": 21, "index": 2709, "code": "w = raw_input()\n\nif len(w) % 2 != 0:\n    print 'No'\nelse:\n    answer = 'Yes'\n    for s in w:\n        if w.count(s) % 2 != 0:\n            answer = 'No'\n            break\n    print answer\n"}
{"label": 21, "index": 2710, "code": "from collections import defaultdict\n\n\ndef main():\n    w = input()\n    d = defaultdict(int)\n    for c in w:\n        d[c] += 1\n    ans = 'Yes'\n    for cnt in d.values():\n        if cnt & 1 == 1:\n            ans = 'No'\n            break\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 21, "index": 2711, "code": "from Queue import * # Queue, LifoQueue, PriorityQueue\nfrom bisect import * #bisect, insort\nfrom collections import * #deque, Counter,OrderedDict,defaultdict\n#set([]) \nimport math\nimport copy\nimport itertools\nimport string\nimport sys\nmyread = lambda : map(int,raw_input().split())\ndef solver():\n    memo = defaultdict(int)\n    S = raw_input()\n    for c in S:\n        memo[c] += 1\n\n    for v in memo.values():\n        if v % 2 == 1:\n            print 'No'\n            return\n    print 'Yes'\n\n\n\nif __name__ == \"__main__\":\n    solver()\n    \n"}
{"label": 21, "index": 2712, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\n\ndef main():\n    s = input()\n    d = collections.defaultdict(int)\n    for c in s:\n        d[c] += 1\n    for c in d.values():\n        if c % 2 == 1:\n            return 'No'\n    return 'Yes'\n\n\n\nprint(main())\n"}
{"label": 21, "index": 2713, "code": "#!/usr/bin/env python\n\nfrom collections import Counter\nw = Counter(input())\n# print([(count % 2) for key, count in w.items()])\nif all([(count % 2 == 0) for key, count in w.items()]):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 21, "index": 2714, "code": "N = raw_input()\n\ndef average(N):\n    if N == \"\":\n        return 'Yes'\n\n    count = 0\n    for i in range(len(N)):\n        if N[0] == N[i]:\n            count+=1\n\n    if count % 2 == 1:\n        return 'No'\n\n    N = N.replace(N[0],\"\")\n    return average(N)\n\nprint average(N)"}
{"label": 21, "index": 2715, "code": "import sys\nw = list(input())\nw.sort()\n\nif len(w) == 1:\n    print(\"No\")\n    sys.exit()\n\ncount = 1\nfor i in range(1, len(w)):\n    if w[i] == w[i-1] :\n        count += 1\n    else:\n        if count % 2 == 1:\n            print(\"No\")\n            sys.exit()\n        count = 1\n\nprint(\"Yes\")\n"}
{"label": 21, "index": 2716, "code": "w=input()\nif len(w)%2 != 0:\n    print(\"No\")\n    exit()\nalp=[]\nc='a'\nwhile ord(c) <= ord('z'):\n    alp.append(0)\n    c=chr(ord(c)+1)\nfor s in w:\n    alp[ord(s)-ord('a')]+=1\nc='a'\nwhile ord(c) <= ord('z'):\n    if alp[ord(c)-ord('a')]%2 != 0:\n        print(\"No\")\n        exit()\n    c=chr(ord(c)+1)\nprint(\"Yes\")\n"}
{"label": 21, "index": 2717, "code": "w = input()\n\n\ndef main(w):\n    for c in w:\n        if w.count(c) % 2 != 0:\n            return 'No'\n    return 'Yes'\n\n\nprint(main(w))"}
{"label": 21, "index": 2718, "code": "import sys\ns=list(input())\ns.sort()\ncount=1\nfor i in range(1,len(s)):\n    if s[i]==s[i-1]:\n        count+=1\n    else:\n        if count%2==0:\n            count=1\n        else:\n            print(\"No\")\n            sys.exit()\nif count%2!=0:\n    print(\"No\")\n    sys.exit()\nprint(\"Yes\")"}
{"label": 21, "index": 2719, "code": "w = input()\nd = {}\n\nfor char in w:\n    if not char in d:\n        d[char] = 1\n    else:\n        del d[char]\n\nprint('Yes' if len(d.values()) == 0 else 'No')\n"}
{"label": 21, "index": 2720, "code": "w = input()\n\nabc = \"abcdefghijklmnopqrstuvwxyz\"\n\nabc_count = []\nabc_index = 0\nisBeautiful = True\nfor ch in abc:\n    abc_count.append(w.count(ch))\n    if abc_count[abc_index] % 2 == 1:\n        isBeautiful = False\n        break\n    abc_index += 1\n\nif isBeautiful:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 21, "index": 2721, "code": "w = str(raw_input())\n\ndic = {\"def\":0}\nfor s in w:\n    if s in dic.keys():\n        dic[s] += 1\n    else:\n        dic.update({s:1})\n\nflag = 0\n\nfor value in dic.values():\n    if value%2 == 0:\n        pass\n    else:\n        flag = 1\n\nif flag == 0:\n    print \"Yes\"\nelse:\n    print \"No\"\n"}
{"label": 21, "index": 2722, "code": "from collections import Counter\n\n\ndef main():\n    w = input()\n    d = Counter(w)\n    for k, v in d.items():\n        if v % 2 != 0:\n            print(\"No\")\n            break\n    else:\n        print(\"Yes\")\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 21, "index": 2723, "code": "from collections import Counter\n\nw = input()\n\nc = Counter(w)\n\nfor _, v in c.items():\n    if v % 2 != 0:\n        print('No')\n        break\nelse:\n    print('Yes')\n"}
{"label": 21, "index": 2724, "code": "def main():\n    W = input()\n\n    w = set(W)\n    for s in w:\n        if W.count(s) & 1:\n            ans = 'No'\n            break\n    else:\n        ans = 'Yes'\n\n    print(ans)\n\nmain()\n"}
{"label": 21, "index": 2725, "code": "import string\n\nw = input()\nfor a in string.ascii_lowercase:\n    if w.count(a) % 2:\n        print('No')\n        exit()\nprint('Yes')\n"}
{"label": 21, "index": 2726, "code": "s = raw_input()\n\ncount = {}\nfor i in s:\n    count.setdefault(i,0)\n    count[i] += 1\n\nok = True\n\nfor c in count:\n    if(count[c]%2!=0): ok = False\n\nif(ok): print 'Yes'\nelse: print 'No'"}
{"label": 21, "index": 2727, "code": "import numpy as np\nimport sys\nss=list(input())\ns=np.array(ss)\ns.sort()\ncount=1\nfor i in range(1,len(s)):\n    if s[i]==s[i-1]:\n        count+=1\n    else:\n        if count%2==0:\n            count=1\n        else:\n            print(\"No\")\n            sys.exit()\nif count%2!=0:\n    print(\"No\")\n    sys.exit()\nprint(\"Yes\")"}
{"label": 21, "index": 2728, "code": "ct = {}\nfor w in input():\n    if w not in ct:\n        ct[w] = 0\n    ct[w] += 1\n\nans = \"Yes\"\nfor k,v in ct.items():\n    if v%2 == 1:\n        ans = \"No\"\nprint(ans)\n"}
{"label": 21, "index": 2729, "code": "c={}\nfor k in raw_input():c[k]=1+c[k]if k in c else 1\nprint\"No\"if any(c[k]%2 for k in c)else\"Yes\""}
{"label": 22, "index": 2730, "code": "a = int(input())\nb = int(input())\nh = int(input())\nprint(int((a + b) * h / 2))"}
{"label": 22, "index": 2731, "code": "A=int(input())\nB=int(input())\nH=int(input())\n\nprint(int((A+B)/2*H))"}
{"label": 22, "index": 2732, "code": "print (int(raw_input()) + int(raw_input())) * int(raw_input()) / 2"}
{"label": 22, "index": 2733, "code": "#coding: utf-8\n\na = input()\nb = input()\nh = input()\n\nprint (a+b)*h/2"}
{"label": 22, "index": 2734, "code": "# coding: utf-8\n\na, b, h = [int(input()) for _ in range(3)]\nprint(int((a+b)*h/2))"}
{"label": 22, "index": 2735, "code": "a = [int(input()) for i in range(3)]\nprint((a[0] + a[1]) * a[2] // 2)\n"}
{"label": 22, "index": 2736, "code": "a = int(input())\nb = int(input())\nh = int(input())\nprint(int((a+b)*h/2))"}
{"label": 22, "index": 2737, "code": "a = int(raw_input())\nb = int(raw_input())\nh = int(raw_input())\nprint (a+b) * h / 2"}
{"label": 22, "index": 2738, "code": "a = int(input())\nb = int(input())\nh = int(input())\n\nprint(int((a + b) * h / 2))"}
{"label": 22, "index": 2739, "code": "def trapezoid(a, b, h):\n\treturn (a + b) * h / 2\n\ndef main():\n\ta = int(raw_input())\n\tb = int(raw_input())\n\th = int(raw_input())\n\tprint trapezoid(a, b, h)\n\nmain()"}
{"label": 22, "index": 2740, "code": "a = int(input())\nb = int(input())\nh = int(input())\nprint((a+b)*h//2)"}
{"label": 22, "index": 2741, "code": "a = int(input())\nb = int(input())\nh = int(input())\n\nprint((a+b)*h//2)"}
{"label": 22, "index": 2742, "code": "# coding: utf-8\n\nfrom __future__ import print_function\nfrom __future__ import unicode_literals\nfrom __future__ import division\nfrom __future__ import absolute_import\nimport math\nimport string\nimport itertools\nimport fractions\nimport heapq\nimport collections\nimport re\nimport array\nimport bisect\n\ndef array2d(d1, d2, init = None):\n    return [[init for _ in range(d2)] for _ in range(d1)]\n\na = int(input())\nb = int(input())\nh = int(input())\n\nprint((a + b) * h // 2)\n"}
{"label": 22, "index": 2743, "code": "a = int(input())\nb = int(input())\nc = int(input())\n\nanswer = int((a + b) * c / 2)\nprint(answer)"}
{"label": 22, "index": 2744, "code": "a = int(input())\nb = int(input())\nh = int(input())\nprint(round((a + b) * h /2 ))"}
{"label": 22, "index": 2745, "code": "a = int(raw_input())\nb = int(raw_input())\nh = int(raw_input())\nprint (a + b) * h / 2\n"}
{"label": 22, "index": 2746, "code": "a =  int(input())\nb =  int(input())\nh =  int(input())\nprint(str(int((a+b)*h/2)))\n"}
{"label": 22, "index": 2747, "code": "a = int(input())\nb = int(input())\nh = int(input())\n\nprint(int((a + b) * h / 2))"}
{"label": 22, "index": 2748, "code": "a, b, h = (int(input()) for _ in range(3))\nprint((a + b) * h // 2)\n"}
{"label": 22, "index": 2749, "code": "# -*- coding:utf-8 -*-\na, b, h = (int(input()), int(input()), int(input()))\nprint(int((a+b)*h/2))"}
{"label": 22, "index": 2750, "code": "a = int(raw_input())\nb = int(raw_input())\nh = int(raw_input())\nprint (a + b) * h / 2\n"}
{"label": 22, "index": 2751, "code": "a = int(input())\nb = int(input())\nc = int(input())\nprint(int((a+b)*c/2))"}
{"label": 22, "index": 2752, "code": "a = int(raw_input())\nb = int(raw_input())\nh = int(raw_input())\nprint (a + b) * h / 2"}
{"label": 22, "index": 2753, "code": "a=int(input())\nb=int(input())\nh=int(input())\n \nprint(int((a+b)*h/2))"}
{"label": 22, "index": 2754, "code": "print((int(input()) + int(input()))*int(input())//2)"}
{"label": 22, "index": 2755, "code": "a= input()\nb = input()\nh = input()\n\n\nans =  (a+b)*h/2\n\nprint(ans)"}
{"label": 22, "index": 2756, "code": "a = int(input())\nb = int(input())\nh = int(input())\nprint(int((a+b)*h/2))"}
{"label": 22, "index": 2757, "code": "from sys import stdin\na = int(stdin.readline())\nb = int(stdin.readline())\nh = int(stdin.readline())\nprint ((a+b)*h)/2"}
{"label": 22, "index": 2758, "code": "print((int(input())+int(input()))*int(input())//2)"}
{"label": 22, "index": 2759, "code": "A = int(input())\nB = int(input())\nH = int(input())\n\nprint((A + B) * H // 2)"}
{"label": 22, "index": 2760, "code": "a = int(input())\nb = int(input())\nh = int(input())\nprint((a + b) * h // 2)\n"}
{"label": 22, "index": 2761, "code": "print((int(input())+int(input()))*int(input())//2)\n"}
{"label": 22, "index": 2762, "code": "a = int(raw_input())\nb = int(raw_input())\nh = int(raw_input())\nprint ((a+b)*h)/2"}
{"label": 22, "index": 2763, "code": "# -*- coding: utf-8 -*-\n\nN = 3\n# N = int(input())\ns = [input() for i in range(N)]\n\na = int(s[0])\nb = int(s[1])\nh = int(s[2])\n\nS = int(((a + b)*h/2))\nprint(str(S))\n"}
{"label": 22, "index": 2764, "code": "print((int(input()) + int(input())) * int(input()) // 2)"}
{"label": 22, "index": 2765, "code": "def solve(a, b, h):\n    return (a + b) * h / 2\n\n\na = raw_input()\na = int(a)\nb = raw_input()\nb = int(b)\nh = raw_input()\nh = int(h)\nans = solve(a, b, h)\nprint ans\n"}
{"label": 22, "index": 2766, "code": "a = int(input())\nb = int(input())\nh = int(input())\n\nprint(int((a + b) * h / 2))\n"}
{"label": 22, "index": 2767, "code": "a = int(input())\nb = int(input())\nh = int(input())\nprint((a+b)*h//2)"}
{"label": 22, "index": 2768, "code": "a = int(input())\nb = int(input())\nh = int(input())\nans = (a + b) * h // 2\nprint(ans)"}
{"label": 22, "index": 2769, "code": "a=int(input())\nb=int(input())\nh=int(input())\nprint((a+b)*h//2)\n"}
{"label": 22, "index": 2770, "code": "# -*- coding: utf-8 -*-\nimport sys,copy,math,heapq,itertools as it,fractions,re,bisect,collections as coll\n\na = int(raw_input())\nb = int(raw_input())\nh = int(raw_input())\nprint (a+b)*h/2\n"}
{"label": 22, "index": 2771, "code": "a = int(raw_input())\nb = int(raw_input())\nh = int(raw_input())\nprint \"{}\".format(int((a+b)*h/2))\n"}
{"label": 22, "index": 2772, "code": "a = int(input())\nb = int(input())\nh = int(input())\n\nprint((a + b) * h // 2)"}
{"label": 22, "index": 2773, "code": "a = int(input())\nb = int(input())\nh = int(input())\n\nprint(int((a+b)*h/2))"}
{"label": 22, "index": 2774, "code": "a = int(input())\nb = int(input())\nh = int(input())\nprint(int((a + b) * h / 2))\n"}
{"label": 22, "index": 2775, "code": "a = input()\nb = input()\nh = input()\n\nprint (a+b)*h/2"}
{"label": 22, "index": 2776, "code": "A = int(input())\nB = int(input())\nH = int(input())\nprint((A + B) * H // 2)"}
{"label": 22, "index": 2777, "code": "a = int(raw_input())\nb = int(raw_input())\nh = int(raw_input())\n\nprint ((a+b) * h) / 2"}
{"label": 22, "index": 2778, "code": "a = input()\nb = input()\nh = input()\nprint (a + b) * h / 2"}
{"label": 22, "index": 2779, "code": "a = int(input())\nb = int(input())\nh = int(input())\n\nprint(int((a+b)*h/2))"}
{"label": 22, "index": 2780, "code": "a = int(input())\nb = int(input())\nh = int(input())\nprint(int((a + b) * h / 2))"}
{"label": 22, "index": 2781, "code": "a = int(input())\nb = int(input())\nh = int(input())\nprint(int((a+b)*h/2))"}
{"label": 22, "index": 2782, "code": "print((int(input())+int(input()))*int(input())//2)"}
{"label": 22, "index": 2783, "code": "def main():\n    a = int(input())\n    b = int(input())\n    h = int(input())\n\n    s = (a + b) * h / 2\n    print(int(s))\n\nmain()\n"}
{"label": 22, "index": 2784, "code": "a = int(input())\nb = int(input())\nh = int(input())\n\nprint(int((a+b)*h/2))\n"}
{"label": 22, "index": 2785, "code": "a,b,h=[int(input()) for _ in range(3)]\nprint((a+b)*h//2)"}
{"label": 22, "index": 2786, "code": "a = int(raw_input())\nb = int(raw_input())\nh = int(raw_input())\nprint(((a+b)*h)/2)"}
{"label": 22, "index": 2787, "code": "#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n\nfrom __future__ import division, print_function, absolute_import, unicode_literals\n\na = int(input())\nb = int(input())\nh = int(input())\nprint((a + b) * h // 2)\n"}
{"label": 22, "index": 2788, "code": "print((int(input())+int(input()))*int(input())//2)"}
{"label": 22, "index": 2789, "code": "a, b, h = [int(input()) for i in range(3)]\nprint(int((a + b) * h / 2))"}
{"label": 22, "index": 2790, "code": "# -*- coding:utf-8 -*-\n\n# get numbers\na, b, h = int(raw_input()), int(raw_input()), int(raw_input())\nprint (a + b) * h / 2\n"}
{"label": 22, "index": 2791, "code": "a = int(input())\nb = int(input())\nh = int(input())\nprint(int((a+b)*h/2))\n"}
{"label": 22, "index": 2792, "code": "a=int(input())\nb=int(input())\nh=int(input())\nprint((a+b)*h//2)"}
{"label": 22, "index": 2793, "code": "a = input()\nb = input()\nh = input()\n \nans = (a + b) * h / 2\nprint ans"}
{"label": 22, "index": 2794, "code": "def ini(): return int(input())\ndef inli(): return list(map(int, input().split()))\ndef inf(): return float(input())\ndef inlf(): return list(map(float, input().split()))\ndef inl(): return list(input())\ndef pli(): return \"\".join(list(map(str, ans)))\n\nprint(int((ini()+ini())*ini()/2))"}
{"label": 22, "index": 2795, "code": "a,b,h = [int(input()) for _ in range(3)]\nprint(int(( a + b ) * h / 2))\n"}
{"label": 22, "index": 2796, "code": "a = int(input())\nb = int(input())\nh = int(input())\nprint((a+b) * h //2)"}
{"label": 22, "index": 2797, "code": "def ans(a, b, h):\n    return (a + b) * h // 2\n\na = int(input())\nb = int(input())\nh = int(input())\n\nprint(ans(a, b, h))\n"}
{"label": 22, "index": 2798, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\n\ndef main():\n    a = int(input())\n    b = int(input())\n    h = int(input())\n    return (a+b) * h // 2\n\n\n\n\nprint(main())\n"}
{"label": 22, "index": 2799, "code": "a = int(input())\nb = int(input())\nh = int(input())\ns = (a + b) * h // 2\nprint(s)\n"}
{"label": 22, "index": 2800, "code": "a,b,h = [input() for var in range(3)]\nprint  (b-a)*h/2 + a * h "}
{"label": 22, "index": 2801, "code": "a = int(input())\nb = int(input())\nh = int(input())\n\nprint((a + b) * h // 2)\n"}
{"label": 22, "index": 2802, "code": "a,b,h=[int(input())for _ in[0]*3];print((a+b)*h//2)"}
{"label": 22, "index": 2803, "code": "a, b, h = [int(input()) for i in range(3)]\nprint(int((a + b) * h / 2))\n"}
{"label": 22, "index": 2804, "code": "if __name__ == \"__main__\":\n    a = int(input())\n    b = int(input())\n    h = int(input())\n    print(int((a+b)*h/2))\n"}
{"label": 22, "index": 2805, "code": "a = int(input())\nb = int(input())\nh = int(input())\n\nprint((a+b)*h//2)\n"}
{"label": 22, "index": 2806, "code": "a,b,h=(int(input())for _ in[0]*3);print((a+b)*h//2)"}
{"label": 22, "index": 2807, "code": "# -*- coding: utf-8 -*-\na = int(raw_input())\nb = int(raw_input())\nh = int(raw_input())\n\nprint (a + b) * h / 2\n"}
{"label": 22, "index": 2808, "code": "from collections import defaultdict\n\n\ndef main():\n    a, b, h = int(input()), int(input()), int(input())\n    print((a + b) * h // 2)\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 22, "index": 2809, "code": "a = int(input())\nb = int(input())\nh = int(input())\nprint(int((a+b)*h/2))"}
{"label": 22, "index": 2810, "code": "a = int(input())\nb = int(input())\nh = int(input())\nprint((a + b) * h // 2)\n"}
{"label": 22, "index": 2811, "code": "a=int(input())\nb=int(input())\nh=int(input())\nprint((a+b)*h/2)"}
{"label": 22, "index": 2812, "code": "a = input()\nb = input()\nh = input()\nprint (a+b)*h/2"}
{"label": 22, "index": 2813, "code": "a = int(input())\nb = int(input())\nh = int(input())\n\nprint(int((a+b)*h/2))"}
{"label": 22, "index": 2814, "code": "a = int(raw_input())\nb = int(raw_input())\nc = int(raw_input())\nprint (a+b)*c/2\n"}
{"label": 22, "index": 2815, "code": "print((int(input())+int(input()))*int(input())//2)"}
{"label": 22, "index": 2816, "code": "a=int(input())\nb=int(input())\nh=int(input())\nprint((a+b)*h//2)\n"}
{"label": 22, "index": 2817, "code": "a=int(raw_input())\nb=int(raw_input())\nh=int(raw_input())\nprint (a+b)*h/2"}
{"label": 22, "index": 2818, "code": "N = 3\na, b, h = [int(input()) for i in range(N)]\nprint((a+b)*h//2)"}
{"label": 22, "index": 2819, "code": "a = int(input().strip())\nb = int(input().strip())\nh = int(input().strip())\n\narea = int((a + b) * h / 2)\n\nprint(area)"}
{"label": 22, "index": 2820, "code": "def main():\n    a = int(input())\n    b = int(input())\n    h = int(input())\n    print(int((a + b) * h / 2))\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 22, "index": 2821, "code": "a = int(input())\nb = int(input())\nh = int(input())\n\nans = int((a+b) * h / 2)\nprint(ans)\n"}
{"label": 22, "index": 2822, "code": "a = input()\nb = input()\nh = input()\nprint (a + b) * h / 2"}
{"label": 22, "index": 2823, "code": "\na = int(input())\nb= int(input())\nh = int(input())\n\nprint((a+b)*h//2)\n"}
{"label": 22, "index": 2824, "code": "def solve():\n    a = int(input())\n    b = int(input())\n    h = int(input())\n    print((a+b)*h//2)\n\nsolve()"}
{"label": 22, "index": 2825, "code": "a, b, h = [int(input()) for i in range(3)]\nprint((a+b)*h//2)"}
{"label": 22, "index": 2826, "code": "a = int(input())\nb = int(input())\nh = int(input())\n\nprint((a+b)*h//2)"}
{"label": 22, "index": 2827, "code": "print((int(input()) + int(input())) * int(input()) // 2)\n"}
{"label": 22, "index": 2828, "code": "a = int(raw_input())\nb = int(raw_input())\nh = int(raw_input())\nprint (a+b) * h / 2\n"}
{"label": 22, "index": 2829, "code": "a = input()\nb = input()\nh = input()\nprint (a+b)*h/2\n"}
{"label": 22, "index": 2830, "code": "import sys\n\ndef debug(x, table):\n    for name, val in table.items():\n        if x is val:\n            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)\n            return None\n\ndef solve():\n    a = int(input())\n    b = int(input())\n    h = int(input())\n\n    ans = (a + b) * h // 2\n\n    print(ans)\n\nif __name__ == '__main__':\n    solve()"}
{"label": 22, "index": 2831, "code": "# -*- coding:utf-8 -*-\n\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    h = int(input())\n    print(int((a+b)*h/2))"}
{"label": 22, "index": 2832, "code": "a=int(input())\nb=int(input())\nc=int(input())\nprint(int((a+b)*c/2))"}
{"label": 22, "index": 2833, "code": "a = int( input() )\nb = int( input() )\nh = int( input() )\n\nS = ( a + b )*h/2\n\nprint( int(S) )"}
{"label": 22, "index": 2834, "code": "a = int(input())\nb = int(input())\nh = int(input())\nprint(int( (a+b)*h/2 ))"}
{"label": 22, "index": 2835, "code": "import math\n\na, b, h = [int(input()) for i in range(3)]\n\nprint(math.floor((a + b) * h / 2))"}
{"label": 22, "index": 2836, "code": "from __future__ import division\na = input()\nb = input()\nh = input()\nprint int(((a+b)/2)*h)"}
{"label": 22, "index": 2837, "code": "a=int(raw_input())\nb=int(raw_input())\nh=int(raw_input())\n\nprint (a+b)*h/2"}
{"label": 22, "index": 2838, "code": "a, b, h = [int(raw_input()) for _ in xrange(3)]\nprint (a+b)*h/2"}
{"label": 22, "index": 2839, "code": "a = int(input())\nb = int(input())\nh = int(input())\nprint(int((a*h) + (b-a)*h/2))"}
{"label": 22, "index": 2840, "code": "x = [input() for i in range(3)]\n\na = int(x[0])\nb = int(x[1])\nh = int(x[2])\n\ny=((a + b) * h) / 2\nans=int(y)\nprint(ans)"}
{"label": 22, "index": 2841, "code": "def main():\n    a = int(input())\n    b = int(input())\n    h = int(input())\n    print((a + b) * h // 2)\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 22, "index": 2842, "code": "a = int(raw_input())\nb = int(raw_input())\nh = int(raw_input())\n\ns = (a+b)*h/2\n\nprint s\n"}
{"label": 22, "index": 2843, "code": "a=int(input())\nb=int(input())\nh=int(input())\n\nprint(int(((a+b)*h)/2))"}
{"label": 22, "index": 2844, "code": "a = input()\nb = input()\nh = input()\nprint (a+b)*h/2"}
{"label": 22, "index": 2845, "code": "a = int(input())\nb = int(input())\nh = int(input())\n\n# Since h is even, area will always be an integer!\narea = int(((a+b)*h)/2)\n\nprint(area)\n"}
{"label": 22, "index": 2846, "code": "a = int(input())\nb = int(input())\nh = int(input())\n\nprint((a+b)*h//2)"}
{"label": 22, "index": 2847, "code": "a = int(raw_input())\nb = int(raw_input())\nh = int(raw_input())\nprint (a + b) * h // 2\n"}
{"label": 22, "index": 2848, "code": "a = int(raw_input())\nb = int(raw_input())\nh = int(raw_input())\n\nprint (a + b) * h / 2\n"}
{"label": 22, "index": 2849, "code": "a = int(input())\nb = int(input())\nh = int(input())\nprint((a + b) * h // 2)\n"}
{"label": 22, "index": 2850, "code": "a = input()\nb = input()\nh = input()\nprint (a+b)*h/2"}
{"label": 22, "index": 2851, "code": "a = int(input())\nb = int(input())\nh = int(input())\n\nprint((a + b) * h // 2)\n"}
{"label": 22, "index": 2852, "code": "a = int(input())\nb = int(input())\nc = int(input())\nprint(int((a+b)*c/2))"}
{"label": 22, "index": 2853, "code": "#!/usr/bin/python3\n\na = int(input())\nb = int(input())\nh = int(input())\n\nprint(int((a+b)*h/2))\n"}
{"label": 22, "index": 2854, "code": "a = int(input())\nb = int(input())\nh = int(input())\nprint((a+b)*h//2)"}
{"label": 22, "index": 2855, "code": "a = int(raw_input())\nb = int(raw_input())\nc = int(raw_input())\nprint (a+b)*c/2"}
{"label": 22, "index": 2856, "code": "a = int(input())\nb = int(input())\nh = int(input())\nprint((a+b)*h//2)"}
{"label": 22, "index": 2857, "code": "a = int(input())\nb = int(input())\nh = int(input())\nS = (a+b)*h/2\nprint(int(S))"}
{"label": 22, "index": 2858, "code": "a = int(input())\nb = int(input())\nh = int(input())\n\nprint(int((a + b) * h / 2))"}
{"label": 22, "index": 2859, "code": "a = int(input())\nb = int(input())\nh = int(input())\nprint((a+b)*(h//2))"}
{"label": 23, "index": 2860, "code": "card = [input(), input(), input()]\nne = 0\n\nwhile 1:\n    if not len(card[ne]):\n        print(chr(ord('A') + ne))\n        break\n    a = ord(card[ne][0]) - ord('a')\n    card[ne] = card[ne][1:]\n    ne = a\n"}
{"label": 23, "index": 2861, "code": "from collections import defaultdict\n\n\ndef main():\n    d = {\"a\": input(), \"b\": input(), \"c\": input()}\n    now = \"a\"\n    while True:\n        if len(d[now]) == 0:\n            print(now.upper())\n            break\n        nex, d[now] = d[now][0], d[now][1:]\n        now = nex\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 23, "index": 2862, "code": "a =input()\nb=input()\nc=input()\n\nd=dict()\nd['a']=list(reversed(a))\nd['b']=list(reversed(b))\nd['c']=list(reversed(c))\nturn = 'a'\nwhile True:\n    if not d[turn]:\n        print(turn.upper())\n        break\n    turn = d[turn].pop()\n"}
{"label": 23, "index": 2863, "code": "# NOTE : \u52c9\u5f37\u306b\u306a\u308b\u521d\u671f\u5316\u306e\u4ed5\u65b9\n# dict(zip('abc',(input() for _ in range(3)))))\n\ndic = dict()\nk='a'\n\nfor name in list('abc'):\n    dic[name] = input()\n\nwhile dic[k]:\n    dic[k],k=dic[k][1:],dic[k][0]\nprint(k.upper())\n\n"}
{"label": 23, "index": 2864, "code": "card = [ input() for i in range(3) ]\ncount = [0, 0, 0]\ncurr = 0\nwhile count[curr] != len(card[curr]):\n    if card[curr][count[curr]] == \"a\":\n        tmp = 0\n    if card[curr][count[curr]] == \"b\":\n        tmp = 1\n    if card[curr][count[curr]] == \"c\":\n        tmp = 2\n    count[curr] += 1\n    curr = tmp\nprint(\"ABC\"[curr])"}
{"label": 23, "index": 2865, "code": "def main():\n    players = {}\n    players['a'] = list(input())\n    players['b'] = list(input())\n    players['c'] = list(input())\n\n    x = 'a'\n    while len(players[x]) > 0:\n        x = players[x].pop(0)\n    print(x.upper())\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 23, "index": 2866, "code": "import sys\n\ndef debug(x, table):\n    for name, val in table.items():\n        if x is val:\n            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)\n            return None\n\ndef solve():\n    sa = input()\n    sb = input()\n    sc = input()\n    state = 0\n    ai,bi,ci = 0,0,0\n\n    while ai <= len(sa) and bi <= len(sb) and ci <= len(sc):\n        if state == 0:\n            if ai == len(sa):\n                print('A')\n                return None\n            state = ord(sa[ai])\n            ai += 1\n            \n        elif state == 1:\n            if bi == len(sb):\n                print('B')\n                return None\n            state = ord(sb[bi])\n            bi += 1\n            \n        else:\n            if ci == len(sc):\n                print('C')\n                return None\n            state = ord(sc[ci])\n            ci += 1\n            \n        state -= ord('a')\n\nif __name__ == '__main__':\n    solve()"}
{"label": 23, "index": 2867, "code": "player_list = ['a', 'b', 'c']\n\ns = {player_list[n]: list(raw_input()) for n in xrange(len(player_list))}\n\ncurrent_turn = player_list[0]\n\nget_winner = lambda x, s: x.upper() if not s[x] else get_winner(s[x].pop(0), s)\n\nprint get_winner(current_turn, s)"}
{"label": 23, "index": 2868, "code": "sa = list(input())\nsb = list(input())\nsc = list(input())\nnow = 'a'\n\nwhile True:\n    if now == 'a':\n        if not sa:\n            winner = 'A'\n            break\n        new = sa.pop(0)\n    elif now == 'b':\n        if not sb:\n            winner = 'B'\n            break\n        new = sb.pop(0)\n    elif now == 'c':\n        if not sc:\n            winner = 'C'\n            break\n        new = sc.pop(0)\n    now = new\nprint(winner)\n\n"}
{"label": 23, "index": 2869, "code": "s={}\nfor i in range(3):\n    s[chr(97+i)]=input()\nturn=\"a\"\nwhile True:\n    if not s[turn]:\n        break\n    else:\n        t=s[turn][0]\n        s[turn]=s[turn][1:]\n        turn=t\nprint(turn.upper())\n"}
{"label": 23, "index": 2870, "code": "def cardgame(sa, sb, sc):\n\ttmp = sa[0]\n\ta = 0\n\tb = -1\n\tc = -1\n\twhile True:\n\t\tif tmp == 'a':\n\t\t\ta += 1\n\t\t\tif a == len(sa):\n\t\t\t\treturn 'A'\n\t\t\telse:\n\t\t\t\ttmp = sa[a]\n\t\telif tmp == 'b':\n\t\t\tb += 1\n\t\t\tif b == len(sb):\n\t\t\t\treturn 'B'\n\t\t\telse:\n\t\t\t\ttmp = sb[b]\n\t\telif tmp == 'c':\n\t\t\tc += 1\n\t\t\tif c == len(sc):\n\t\t\t\treturn 'C'\n\t\t\telse:\n\t\t\t\ttmp = sc[c]\n\ndef main():\n\tsa = raw_input()\n\tsb = raw_input()\n\tsc = raw_input()\n\tprint cardgame(sa, sb, sc)\n\nmain()"}
{"label": 23, "index": 2871, "code": "\n\ndef main():\n    a = input()\n    b = input()\n    c = input()\n\n    d = {\"a\": a, \"b\": b, \"c\": c}\n\n    now_player = \"a\"\n    while True:\n        if len(d[now_player]) == 0:\n            break\n\n        next_player = d[now_player][0]\n        d[now_player] = d[now_player][1:]\n        now_player = next_player\n\n    print(now_player.upper())\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 23, "index": 2872, "code": "d = {}\nd[\"a\"]=raw_input()\nd[\"b\"]=raw_input()\nd[\"c\"]=raw_input()\n\ndef pop(x):\n    if len(d[x]) == 0:\n        print x.upper()\n        exit()\n    n = d[x][0]\n    d[x] = d[x][1:]\n    pop(n)\n\npop(\"a\")\n        "}
{"label": 23, "index": 2873, "code": "sa = raw_input()\nsb = raw_input()\nsc = raw_input()\n\nia = ib = ic = 0\nturn = 'a'\nwhile(True):\n    if turn == 'a':\n        if ia == len(sa):\n            print 'A'\n            break\n        turn = sa[ia]\n        ia += 1\n    elif turn == 'b':\n        if ib == len(sb):\n            print 'B'\n            break\n        turn = sb[ib]\n        ib += 1\n    else:\n        if ic == len(sc):\n            print 'C'\n            break\n        turn = sc[ic]\n        ic += 1\n"}
{"label": 23, "index": 2874, "code": "a = input() + 'A'\nb = input() + 'B'\nc = input() + 'C'\n\nx = a[0]\n\nwhile x == 'a' or x == 'b' or x == 'c':\n    if x == 'a':\n        x = a[0]\n        a = a[1:]\n    elif x == 'b':\n        x = b[0]\n        b = b[1:]\n    else:\n        x = c[0]\n        c = c[1:]\n\nprint(x)\n"}
{"label": 23, "index": 2875, "code": "def calc(sa, sb, sc, player):\n    if player == 'a':\n        if len(sa) == 0:\n            return 'A'\n        else:\n            return calc(sa[1:], sb, sc, sa[0])\n\n    elif player == 'b':\n        if len(sb) == 0:\n            return 'B'\n        else:\n            return calc(sa, sb[1:], sc, sb[0])\n\n    elif player == 'c':\n        if len(sc) == 0:\n            return 'C'\n        else:\n            return calc(sa, sb, sc[1:], sc[0])\n\ndef solve():\n    sa = input()\n    sb = input()\n    sc = input()\n\n    print(calc(sa, sb, sc, 'a'))\n\nsolve()"}
{"label": 23, "index": 2876, "code": "class User:\n    def __init__(self, name, card):\n        self.card = card\n        self.name = name\n\n    def draw(self):\n        val = self.card[0]\n        del self.card[0]\n        return val\n\nA = User(\"A\", list(raw_input().strip()))\nB = User(\"B\", list(raw_input().strip()))\nC = User(\"C\", list(raw_input().strip()))\n\nuser = A\nwhile(True):\n\n    if len(user.card) == 0:\n        break\n\n    nextId = user.draw()\n\n    if nextId == 'a':\n        user = A\n    elif nextId == 'b':\n        user = B\n    else:\n        user = C\n\nprint user.name\n"}
{"label": 23, "index": 2877, "code": "A = input()\nB = input()\nC = input()\n\ncnt = {'a': 0, 'b': 0, 'c': 0}\nS = {'a': A, 'b': B, 'c': C}\nturn = 'a'\n\nwhile True:\n\tif cnt[turn] >= len(S[turn]):\n\t\tbreak\t\n\tpop = S[turn][cnt[turn]]\n\tcnt[turn] += 1\t\n\tturn = pop\n\nprint(turn.upper())\n\n"}
{"label": 23, "index": 2878, "code": "# -*- coding: utf-8 -*-\ns = ['']*3\ns[0] = raw_input()\ns[1] = raw_input()\ns[2] = raw_input()\n\npos = [0]*3\nturn = 0\nwhile(pos[turn]<len(s[turn])):\n    pos[turn] += 1\n    turn = ord(s[turn][pos[turn]-1])-97\nprint(chr(turn+65))"}
{"label": 23, "index": 2879, "code": "A = list(input())\nB = list(input())\nC = list(input())\n\nturn = \"a\"\nwhile True:\n    if turn == \"a\":\n        if len(A) == 0:\n            print(\"A\")\n            exit()\n        turn = A[0]\n        A = A[1:]\n    elif turn == \"b\":\n        if len(B) == 0:\n            print(\"B\")\n            exit()\n        turn = B[0]\n        B = B[1:]\n    elif turn == \"c\":\n        if len(C) == 0:\n            print(\"C\")\n            exit()\n        turn = C[0]\n        C = C[1:]\n"}
{"label": 23, "index": 2880, "code": "a = input()\nb = input()\nc = input()\na_pos = 0\nb_pos = 0\nc_pos = 0\nnow = 'a'\n\nwhile True:\n    if now == 'a':\n        if len(a) < a_pos + 1:\n            print('A')\n            break\n        now = a[a_pos]\n        a_pos += 1\n    elif now == 'b':\n        if len(b) < b_pos + 1:\n            print('B')\n            break\n        now = b[b_pos]\n        b_pos += 1\n    elif now == 'c':\n        if len(c) < c_pos + 1:\n            print('C')\n            break\n        now = c[c_pos]\n        c_pos += 1"}
{"label": 23, "index": 2881, "code": "s = {}\n\ntemp = input()\ns[\"a\"] = [temp[i] for i in range(len(temp))]\ntemp = input()\ns[\"b\"] = [temp[i] for i in range(len(temp))]\ntemp = input()\ns[\"c\"] = [temp[i] for i in range(len(temp))]\n\nnext = \"a\"\nwhile (1):\n        if (len(s[next]) <= 0):\n                print (next.upper())\n                break\n        else:\n                next = s[next].pop(0)\n"}
{"label": 23, "index": 2882, "code": "# -*- coding: utf-8 -*-\ns_a = [s for s in raw_input() if s != 'a']\ns_b = [s for s in raw_input() if s != 'b']\ns_c = [s for s in raw_input() if s != 'c']\n\nx = 0\ny = 0\nz = 0\nnext_turn = 'A'\n\nwhile x <= len(s_a) and y <= len(s_b) and z <= len(s_c):\n    try:\n        if next_turn == 'A':\n            next_turn = s_a[x].upper()\n            x += 1\n        elif next_turn == 'B':\n            next_turn = s_b[y].upper()\n            y += 1\n        else:\n            next_turn = s_c[z].upper()\n            z += 1\n    except IndexError:\n        print next_turn\n        break"}
{"label": 23, "index": 2883, "code": "A = str(input())\nB = str(input())\nC = str(input())\n\np = 0\nwhile True:\n    if p == 0:\n        if A == \"\":\n            print(\"A\")\n            exit()\n        if A[0] == \"b\":\n            p = 1\n        elif A[0] == \"c\":\n            p = 2\n        A = A[1:]\n    elif p == 1:\n        if B == \"\":\n            print(\"B\")\n            exit()\n        if B[0] == \"a\":\n            p = 0\n        elif B[0] == \"c\":\n            p = 2\n        B = B[1:]\n    else:\n        if C == \"\":\n            print(\"C\")\n            exit()\n        if C[0] == \"b\":\n            p = 1\n        elif C[0] == \"a\":\n            p = 0\n        C = C[1:]\n\n"}
{"label": 23, "index": 2884, "code": "Sa_str = input()\nSb_str = input()\nSc_str = input()\n\nSa = []\nSb = []\nSc = []\nfor i in range(len(Sa_str)):\n    Sa += [Sa_str[i]]\nfor i in range(len(Sb_str)):\n    Sb += [Sb_str[i]]\nfor i in range(len(Sc_str)):\n    Sc += [Sc_str[i]]\n\nlast = 'a'\nres = 'A'\n\nfor i in range(len(Sa) + len(Sb) + len(Sc) + 3):\n    if last == 'a':\n        if len(Sa) == 0:\n            res = 'A'\n            break\n        last = Sa[0]\n        Sa = Sa[1:]\n    elif last == 'b':\n        if len(Sb) == 0:\n            res = 'B'\n            break\n        last = Sb[0]\n        Sb = Sb[1:]\n    elif last == 'c':\n        if len(Sc) == 0:\n            res = 'C'\n            break\n        last = Sc[0]\n        Sc = Sc[1:]\n\nprint(res)\n"}
{"label": 23, "index": 2885, "code": "\n# -*- coding: utf-8 -*-\n# problem B\nplayer = {i:list(input()) for i in 'abc'}\n\nt = 'a'\nwhile True:\n    if len(player[t]) == 0:\n        break\n    else:\n        x = player[t][0]\n        player[t].pop(0)\n        t = x\n\nprint(t.upper())"}
{"label": 23, "index": 2886, "code": "d=dict(zip('abc',(input() for _ in range(3))))\nk='a'\nwhile d[k]:\n    d[k],k=d[k][1:],d[k][0]\nprint(k.upper())"}
{"label": 23, "index": 2887, "code": "import numpy as np\nSa = input()\nSb = input()\nSc = input()\n\ndef string2int(in_list):\n    out_list = np.array(in_list, dtype='S')\n    out_list[out_list==b'a'] = 0\n    out_list[out_list==b'b'] = 1\n    out_list[out_list==b'c'] = 2\n    return np.array(out_list, dtype=int)\nSa = string2int(list(Sa))\nSb = string2int(list(Sb))\nSc = string2int(list(Sc))\nALL = [list(Sa), list(Sb), list(Sc)]\n\ncurrent = 0\npre = 0\nwhile True:\n    left = len(ALL[current])\n    if left == 0:\n        break\n    current = ALL[current][0]\n    ALL[pre] = ALL[pre][1:]\n    pre = current\n\ncor = ['A','B','C']\nprint( cor[current] )"}
{"label": 23, "index": 2888, "code": "A = list(input())\nB = list(input())\nC = list(input())\nesult = \"\"\n\n\ndef pop_card(s):\n    global result\n    if s == \"a\":\n        if (A):\n            pop_card(A.pop(0))\n        else:\n            result = \"A\"\n    elif s == \"b\":\n        if (B):\n            pop_card(B.pop(0))\n        else:\n            result = \"B\"\n\n    elif s == \"c\":\n        if (C):\n            pop_card(C.pop(0))\n        else:\n            result = \"C\"\n\n\npop_card(\"a\")\nprint(result)"}
{"label": 23, "index": 2889, "code": "sa=list(raw_input())\nsb=list(raw_input())\nsc=list(raw_input())\nnow=sa.pop(0)\nwhile 1:\n    if now==\"a\":\n        if len(sa)==0:\n            print(\"A\")\n            break\n        now=sa.pop(0)\n    elif now==\"b\":\n        if len(sb)==0:\n            print(\"B\")\n            break\n        now=sb.pop(0)\n    else:\n        if len(sc)==0:\n            print(\"C\")\n            break\n        now=sc.pop(0)"}
{"label": 23, "index": 2890, "code": "sa = raw_input()\nsb = raw_input()\nsc = raw_input()\nst = [sa,sb,sc]\nlns = [len(sa),len(sb),len(sc)]\nind = [0,0,0]\ncur = 0\ndone = False\nwinner = \"a\"\ndumb = [\"A\",\"B\",\"C\"]\nwhile (not done):\n    if (ind[cur] >= lns[cur]):\n        winner = dumb[cur]\n        done = True\n        break\n    else:\n        x = st[cur][ind[cur]]\n        ind[cur] += 1\n        if (x==\"a\"):\n            cur = 0\n        elif (x==\"b\"):\n            cur = 1\n        elif (x==\"c\"):\n            cur = 2\n\nprint str.upper(winner)"}
{"label": 23, "index": 2891, "code": "def main():\n    sa = list(input())\n    sb = list(input())\n    sc = list(input())\n\n    c = {\"a\": sa, \"b\": sb, \"c\": sc}\n    now = \"a\"\n    while True:\n        s = c[now]\n        if len(s) == 0:\n            print(now.upper())\n            break\n\n        now = c[now].pop(0)\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 23, "index": 2892, "code": "A = [[ord(c) - ord('a') for c in input()] for i in range(3)]\nwho = 0\nwhile len(A[who]) > 0:\n    A[who], who = A[who][1:], A[who][0]\nprint(\"ABC\"[who])\n"}
{"label": 23, "index": 2893, "code": "from sys import stdin\na = stdin.readline().strip()\nb = stdin.readline().strip()\nc = stdin.readline().strip()\nin1 =in2 = in3 = 0\ntu = 0\nans = ''\nwhile True:\n    x = 0\n    #print \"current turn\",tu,in1,in2,in3\n    if tu==0:\n        if in1==len(a):\n            ans = 'A'\n            break\n        x = a[in1]\n        in1+=1\n        \n    elif tu==1:\n        if in2==len(b):\n            ans = 'B'\n            break\n        x = b[in2]\n        in2+=1\n        \n    else:\n        if in3==len(c):\n            ans = 'C'\n            break\n        x = c[in3]\n        in3+=1\n        \n    #print \"at turn\",tu,\"character \",x\n    if x=='a':\n        tu = 0\n    elif x=='b':\n        tu = 1\n    else:\n        tu = 2\nprint ans        \n           "}
{"label": 23, "index": 2894, "code": "s = {'a':input(),'b':input(),'c':input()}\nn = 'a'\nwhile len(s[n])!= 0:\n    o = s[n][0]\n    s[n] = s[n][1:]\n    n = o\nprint(n.upper())"}
{"label": 23, "index": 2895, "code": "from queue import deque\n\nss = dict(zip(('a', 'b', 'c'), (deque(input()) for _ in range(3))))\nt = 'a'\n\ntry:\n    while True:\n        t = ss[t].popleft()\nexcept:\n    print(t.upper())\n"}
{"label": 23, "index": 2896, "code": "sa = list(input())\nsb = list(input())\nsc = list(input())\n\ndef game(s):\n    if s == 'a':\n        if len(sa) == 0:\n            print('A')\n            exit()\n        else:\n            game(sa.pop(0))\n    if s == 'b':\n        if len(sb) == 0:\n            print('B')\n            exit()\n        else:\n            game(sb.pop(0))\n    if s == 'c':\n        if len(sc) == 0:\n            print('C')\n            exit()\n        else:\n            game(sc.pop(0))\ngame('a')"}
{"label": 23, "index": 2897, "code": "cards = {\"a\" : [input(), 0], \"b\" : [input(), 0], \"c\" : [input(), 0]}\n\nturn = \"a\"\nwhile True:\n    cur = cards[turn]\n    if cur[1] == len(cur[0]):\n        print(turn.upper())\n        break\n    cards[turn][1] += 1\n    turn = cur[0][cur[1] - 1]\n"}
{"label": 23, "index": 2898, "code": "a = list(input())\nb = list(input())\nc = list(input())\n\ntmp = a[0]\na.pop(0)\nwhile True:\n    if tmp == \"a\":\n        if len(a) == 0:\n            print(\"A\")\n            break\n        tmp = a[0]\n        a.pop(0)\n    if tmp == \"b\":\n        if len(b) == 0:\n            print(\"B\")\n            break\n        tmp = b[0]\n        b.pop(0)\n    if tmp == \"c\":\n        if len(c) == 0:\n            print(\"C\")\n            break\n        tmp = c[0]\n        c.pop(0)\n"}
{"label": 23, "index": 2899, "code": "import collections\n\n\ndef solve(sa, sb, sc):\n    next_turn = sa.popleft()\n    while True:\n        if next_turn == 'a':\n            if len(sa) == 0:\n                return 'A'\n            next_turn = sa.popleft()\n        elif next_turn == 'b':\n            if len(sb) == 0:\n                return 'B'\n            next_turn = sb.popleft()\n        else:\n            if len(sc) == 0:\n                return 'C'\n            next_turn = sc.popleft()\n\n\nsa = raw_input()\nsa = collections.deque(sa)\nsb = raw_input()\nsb = collections.deque(sb)\nsc = raw_input()\nsc = collections.deque(sc)\nans = solve(sa, sb, sc)\nprint ans\n"}
{"label": 23, "index": 2900, "code": "def WhoTurn(name):\n\tnext = ''\n\tlast = ''\n\tend = False\n\tif name == 'a':\n\t\tglobal nA\n\t\tnA = nA + 1\n\t\tif nA > maxA:\n\t\t\tend = True\n\t\t\tlast = 'A'\n\t\tif not end :\n\t\t\tnext = SA[nA]\n\telif name == 'b':\n\t\tglobal nB\n\t\tnB = nB + 1\n\t\tif nB > maxB:\n\t\t\tend = True\n\t\t\tlast = 'B'\n\t\tif not end:\n\t\t\tnext = SB[nB]\n\telif name == 'c':\n\t\tglobal nC\n\t\tnC = nC + 1\n\t\tif nC > maxC:\n\t\t\tend = True\n\t\t\tlast = 'C'\n\t\tif not end:\n\t\t\tnext = SC[nC]\n\t\n\t#print(str(nA))\n\t#print(str(nC))\n\t#print(next)\n\t#print(str(end))\n\tif end:\n\t\tprint(last)\n\t\t#return last\n\telse:\n\t\tWhoTurn(next)\n\t\t\nif __name__ == '__main__':\n\tSA = list(input())\n\tSB = list(input())\n\tSC = list(input())\n\tnA = -1\n\tnB = -1\n\tnC = -1\n\tmaxA = len(SA) - 1\n\tmaxB = len(SB) - 1\n\tmaxC = len(SC) - 1\n\t#winner = WhoTurn('a')\n\t#print(winner)\n\t#print(WhoTurn('a'))\n\tWhoTurn('a')\n\n"}
{"label": 23, "index": 2901, "code": "#!/usr/bin/env python3\n\nimport collections\n\n\ndef solve(cards):\n    next_turn = \"a\"\n    while cards:\n        if not cards[next_turn]:\n            return next_turn.upper()\n        else:\n            next_turn = cards[next_turn].popleft()\n\n\ndef main():\n    cards = dict()\n    cards[\"a\"] = collections.deque(input())\n    cards[\"b\"] = collections.deque(input())\n    cards[\"c\"] = collections.deque(input())\n    print(solve(cards))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 23, "index": 2902, "code": "Sa,Sb,Sc=list(input()),list(input()),list(input())\ntarget = \"a\"\nwhile Sa or Sb or Sc != []:\n    if target == \"a\":\n        if Sa==[]:\n            print(\"A\")\n            break\n        target = Sa[0]\n        del Sa[0]\n    elif target == \"b\":\n        if Sb==[]:\n            print(\"B\")\n            break\n        target = Sb[0]\n        del Sb[0]\n    else:\n        if Sc==[]:\n            print(\"C\")\n            break\n        target = Sc[0]\n        del Sc[0]\n"}
{"label": 23, "index": 2903, "code": "d = {\n    'A': raw_input(),\n    'B': raw_input(),\n    'C': raw_input(),\n}\ni = 'A'\nwhile True:\n    if not d[i]:\n        print i\n        break\n    n = d[i][0].upper()\n    d[i] = d[i][1:]\n    i = n\n"}
{"label": 23, "index": 2904, "code": "a = list(input())\nb = list(input())\nc = list(input())\ncurrent = \"a\"\nwhile True:\n    if current == \"a\":\n        if len(a) == 0:\n            print(\"A\")\n            break\n        else:\n            current = a.pop(0)\n    elif current == \"b\":\n        if len(b) == 0:\n            print(\"B\")\n            break\n        else:\n            current = b.pop(0)\n    else:\n        if len(c) == 0:\n            print(\"C\")\n            break\n        else:\n            current = c.pop(0)\n"}
{"label": 23, "index": 2905, "code": "class Player:\n    def __init__(self, name):\n        # \u540d\u524d\n        self.name = name\n        self._cards = []\n\n    \n    def setcards(self, cards):\n        # \u624b\u672d\n        for card in cards:\n            self._cards.insert(0, card)\n\n    def getcards(self):\n        return self._cards\n\n    cards = property(getcards, setcards)\n\n    def putDown(self):\n        \"\"\"\n        \u30ab\u30fc\u30c9\u304c\u3042\u308b\u5834\u5408\u306f\u30ab\u30fc\u30c9\u3092\u51fa\u3057\u307e\u3059\u3002\n        \u306a\u3044\u5834\u5408\u306fNone\u3092\u8fd4\u3057\u307e\u3059\u3002\n        \"\"\"\n        if len(self.cards) != 0:\n            return self._cards.pop()\n        else:\n            return None\n\nclass Game:\n    def __init__(self, players):\n        self.players = players\n\n    def start(self):\n        ret = self.play(self.players[0].name)\n        return ret\n\n    def play(self, name):\n        target = self.searchTarget(name)\n        card = target.putDown()\n        if card != None:\n            return self.play(card)\n\n        # \u52dd\u8005\u3092\u8fd4\u3059\n        return name\n\n    def searchTarget(self, name):\n        for player in self.players:\n            if player.name == name:\n                return player\n\n\n\nif __name__ == '__main__':\n    a = Player(\"a\")\n    a.cards = input()\n\n    b = Player(\"b\")\n    b.cards = input()\n\n    c = Player(\"c\")\n    c.cards = input()\n\n    g = Game([a, b, c])\n    winner = g.start()\n    print(winner.upper())\n"}
{"label": 23, "index": 2906, "code": "sa = input()\nsb = input()\nsc = input()\n\nhead = sa[0]\nsa = sa[1:]\n\nwhile (len(sa) >= 0 and len(sb) >= 0 and len(sc) >= 0):\n    if head == \"a\" and len(sa) == 0:\n        print(\"A\")\n        break\n    elif head == \"a\":\n        head = sa[0]\n        sa = sa[1:]\n    elif head == \"b\" and len(sb) == 0:\n        print(\"B\")\n        break\n    elif head == \"b\":    \n        head = sb[0]\n        sb = sb[1:]\n    elif head == \"c\" and len(sc) == 0:\n        print(\"C\")\n        break\n    elif head == \"c\":\n        head = sc[0]\n        sc = sc[1:]"}
{"label": 23, "index": 2907, "code": "a = list(input().upper())\nb = list(input().upper())\nc = list(input().upper())\n\nturn = 'A'\nwhile True:\n    if turn == 'A':\n        if not a:\n            break\n        turn = a.pop(0)\n    elif turn == 'B':\n        if not b:\n            break\n        turn = b.pop(0)\n    else:\n        if not c:\n            break\n        turn = c.pop(0)\n\nprint(turn)"}
{"label": 23, "index": 2908, "code": "arr = [list(reversed(input())) for _ in range(3)]\ncurr = 0\nwhile arr[curr] != []:\n    curr = \"abc\".index(arr[curr].pop())\nprint(\"ABC\"[curr])\n"}
{"label": 23, "index": 2909, "code": "d = dict()\nd[\"a\"] = raw_input()\nd[\"b\"] = raw_input()\nd[\"c\"] = raw_input()\n\nturn = \"a\"\nwhile True:\n    if len(d[turn]) == 0:\n        print turn.upper()\n        break\n    t = d[turn][0]\n    d[turn] = d[turn][1:]\n    turn = t\n"}
{"label": 23, "index": 2910, "code": "def ri(): return int(input())\ndef rli(): return list(map(int, input().split()))\ndef rls(): return list(input())\ndef pli(a): return \"\".join(list(map(str, a)))\n\n\nsa = rls()[::-1]\nsb = rls()[::-1]\nsc = rls()[::-1]\ncard = sa.pop()\nwhile(1):\n    try:\n        if(card == \"a\"):\n            card = sa.pop()\n        elif(card == \"b\"):\n            card = sb.pop()\n        else:\n            card = sc.pop()\n    except IndexError:\n        break\nprint(card.upper())"}
{"label": 23, "index": 2911, "code": "import sys\n\na = raw_input()\nb = raw_input()\nc = raw_input()\n\nn = {}\n\nn['a'] = [i for i in a]\nn['b'] = [i for i in b]\nn['c'] = [i for i in c]\n\ndef p(s,people):\n#    print n['a']\n#    print n['b']\n#    print n['c']\n    if(len(s)==0): \n       print people.upper()\n       return\n\n    ret = n[people][0]\n#    print ret\n    s.pop(0)\n#    print \"remove\",ret,\"from\",people\n    p(n[ret],ret)\n\n\np(n['a'],'a')"}
{"label": 23, "index": 2912, "code": "#abc045_b\nimport sys\n\na=list(raw_input())\nb=list(raw_input())\nc=list(raw_input())\n\nch=a.pop(0)\n\nwhile True:\n if ch=='a':\n  if len(a)==0:\n   print 'A'\n   sys.exit()\n  ch=a.pop(0)\n elif ch=='b':\n  if len(b)==0:\n   print 'B'\n   sys.exit()\n  ch=b.pop(0)\n elif ch=='c':\n  if len(c)==0:\n   print 'C'\n   sys.exit()\n  ch=c.pop(0)\n"}
{"label": 23, "index": 2913, "code": "from collections import deque\n\nplayers = {}\nplayers[\"A\"] = deque(input())\nplayers[\"B\"] = deque(input())\nplayers[\"C\"] = deque(input())\n\nphase = \"A\"\n\nwhile True:\n    next = players[phase].popleft()\n    phase = next.upper()\n    if (len(players[phase]) == 0):\n        print(phase)\n        break\n"}
{"label": 23, "index": 2914, "code": "p = {c: list(input()) for c in 'abc'}\nt = 'a'\n\nwhile p[t]:\n    t = p[t].pop(0)\nprint(t.upper())"}
{"label": 23, "index": 2915, "code": "#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n\nfrom __future__ import division, print_function, absolute_import, unicode_literals\n\ncard = {}\ns = input()\ncard['a'] = s\ns = input()\ncard['b'] = s\ns = input()\ncard['c'] = s\n\nturn = card['a'][0]\ncard['a'] = card['a'][1:]\nwhile True:\n    if len(card[turn]) == 0:\n        print(turn.upper())\n        break\n    tmp = card[turn][0]\n    card[turn] = card[turn][1:]\n    turn = tmp\n"}
{"label": 23, "index": 2916, "code": "sa=str(input())\nsb=str(input())\nsc=str(input())\nturn=len(sa)+len(sb)+len(sc)\nst=sa[0]\nsa=sa[1:]\n\nfor i in range(1,turn+1):\n    if st=='a':\n        if sa=='':\n            print('A')\n            exit()\n        else:\n            st=sa[0]\n            sa=sa[1:]\n        \n    if st=='b':\n        if sb=='':\n            print('B')\n            exit()\n        else:\n            st=sb[0]\n            sb=sb[1:]\n\n    if st=='c':\n        if sc=='':\n            print('C')\n            exit()\n        else:\n            st=sc[0]\n            sc=sc[1:]"}
{"label": 23, "index": 2917, "code": "def main():\n    arr = [input() for _ in range(3)]\n    curr = 0\n    while len(arr[curr]) != 0:\n        c = arr[curr][0]\n        arr[curr] = arr[curr][1:]\n        if c == \"a\":\n            curr = 0\n        elif c == \"b\":\n            curr = 1\n        else:\n            curr = 2\n    ans = [\"A\",\"B\",\"C\"]\n    print(ans[curr])\n\n\nif __name__ == \"__main__\":\n    main()\n"}
{"label": 23, "index": 2918, "code": "sl=[]\nfor i in range(3):\n    s=list(reversed(input()))\n    sl.append(list(map(lambda x: ord(x)-ord('a'),s)))\n\nturn=0\nwhile True:\n    if len(sl[turn])==0:\n        print(chr(ord('A')+turn))\n        break\n    turn=sl[turn].pop()\n"}
{"label": 23, "index": 2919, "code": "#B\nS = [list(input()) for i in range(3)]\nnext = 0\n    \nwhile True:\n    next = ord(S[next].pop(0))-97\n    if len(S[next]) ==0: print(chr(65+next));break"}
{"label": 23, "index": 2920, "code": "S = [list(raw_input()) for _ in range(3)]\nt, p, d = 0, [0, 0, 0], {'a':0, 'b':1, 'c':2}\nwhile True:\n    try:\n        p[t] += 1\n        t = d[S[t][p[t]-1]]\n    except:\n        print ['A', 'B', 'C'][t]\n        break"}
{"label": 23, "index": 2921, "code": "S={c:list(input())for c in\"abc\"}\ns=\"a\"\nwhile S[s]:s=S[s].pop(0)\nprint(s.upper())"}
{"label": 23, "index": 2922, "code": "# -*- coding:utf-8 -*-\n\n\n# input\na = list(raw_input())\nb = list(raw_input())\nc = list(raw_input())\n\nuser = 'a'\nwhile(True):\n    if user == 'a':\n        if len(a) == 0:\n            print 'A'\n            break\n        user = a.pop(0)\n\n    if user == 'b':\n        if len(b) == 0:\n            print 'B'\n            break\n        user = b.pop(0)\n\n    if user == 'c':\n        if len(c) == 0:\n            print 'C'\n            break\n        user = c.pop(0)\n"}
{"label": 23, "index": 2923, "code": "A = list(input())\nB = list(input())\nC = list(input())\nturn = \"a\"\nwhile True:\n\tif turn == \"a\":\n\t\tif not A:\n\t\t\twin = \"A\"\n\t\t\tbreak\n\t\tturn = A[0]\n\t\tdel A[0]\n\telif turn == \"b\":\n\t\tif not B:\n\t\t\twin = \"B\"\n\t\t\tbreak\n\t\tturn = B[0]\n\t\tdel B[0]\n\telif turn == \"c\":\n\t\tif not C:\n\t\t\twin = \"C\"\n\t\t\tbreak\n\t\tturn = C[0]\n\t\tdel C[0]\nprint(win)\n"}
{"label": 23, "index": 2924, "code": "Sa = list(raw_input())\nSb = list(raw_input())\nSc = list(raw_input())\n\ndef turn(card, Sa, Sb, Sc):\n    if card == 'a':\n        if len(Sa) == 0:\n            print 'A'\n        else:\n            turn(Sa[0], Sa[1:], Sb, Sc)\n    elif card == 'b':\n        if len(Sb) == 0:\n            print 'B'\n        else:\n            turn(Sb[0], Sa, Sb[1:], Sc)\n    elif card == 'c':\n        if len(Sc) == 0:\n            print 'C'\n        else:\n            turn(Sc[0], Sa, Sb, Sc[1:])\n\nturn('a', Sa, Sb, Sc)"}
{"label": 23, "index": 2925, "code": "S = {\"a\": list(raw_input()), \"b\": list(raw_input()), \"c\": list(raw_input())}\ndef play():\n    i = \"a\"\n    while True:\n        i = S[i].pop(0)\n        if len(S[i]) == 0:\n            return i.upper()\nprint play()"}
{"label": 23, "index": 2926, "code": "Sa = list(raw_input())\nSb = list(raw_input())\nSc = list(raw_input())\n\nturn = Sa[0]\nSa.pop(0)\nwhile True:\n\tif turn == \"a\":\n\t\tif len(Sa) == 0:\n\t\t\tprint \"A\"\n\t\t\tbreak\n\t\tturn = Sa[0]\n\t\tSa.pop(0)\n\telif turn == \"b\":\n\t\tif len(Sb) == 0:\n\t\t\tprint \"B\"\n\t\t\tbreak\n\t\tturn = Sb[0]\n\t\tSb.pop(0)\n\telif turn == \"c\":\n\t\tif len(Sc) == 0:\n\t\t\tprint \"C\"\n\t\t\tbreak\n\t\tturn = Sc[0]\n\t\tSc.pop(0)\n"}
{"label": 23, "index": 2927, "code": "A = list(input())\nB = list(input())\nC = list(input())\nA.append(\"0\")\nB.append(\"0\")\nC.append(\"0\")\nx = A.pop(0)\nwhile x != \"0\":\n    if x == \"a\":\n        x = A.pop(0)        \n    elif x == \"b\":\n        x = B.pop(0)\n    elif x == \"c\":\n        x = C.pop(0)\nif len(A) == 0: print(\"A\")\nelif len(B) == 0: print(\"B\")\nelif len(C) == 0: print(\"C\") \n    "}
{"label": 23, "index": 2928, "code": "a = list(input())\nb = list(input())\nc = list(input())\nnum = 0\ndic = {0:a,1:b,2:c}\nwhile 1:\n    if len(dic[num]) == 0:\n        print(tmp.upper())\n        break\n    tmp = dic[num].pop(0)\n    if tmp == \"a\":\n        num = 0\n    elif tmp == \"b\":\n        num = 1\n    else:\n        num = 2"}
{"label": 23, "index": 2929, "code": "player_list = ['a', 'b', 'c']\ns = {player_list[n]: list(raw_input()) for n in xrange(len(player_list))}\n\nget_winner = lambda x, s: not s[x] and x.upper() or get_winner(s[x].pop(0), s)\n\nprint get_winner(player_list[0], s)"}
{"label": 23, "index": 2930, "code": "Sa=input()\nSb=input()\nSc=input()\n\nturn=\"A\"\n\nwhile True:\n    if turn==\"A\":\n        if Sa==\"\":\n            print(\"A\")\n            break\n    \n        elif Sa[0]==\"a\":\n            turn=\"A\"\n            Sa=Sa[1::]\n        elif Sa[0]==\"b\":\n            turn=\"B\"\n            Sa=Sa[1::]\n        elif Sa[0]==\"c\":\n            turn=\"C\"\n            Sa=Sa[1::]\n    elif turn==\"B\":\n        if Sb==\"\":\n            print(\"B\")\n            break\n    \n        elif Sb[0]==\"a\":\n            turn=\"A\"\n            Sb=Sb[1::]\n        elif Sb[0]==\"b\":\n            turn=\"B\"\n            Sb=Sb[1::]\n        elif Sb[0]==\"c\":\n            turn=\"C\"\n            Sb=Sb[1::]\n    elif turn==\"C\":\n        if Sc==\"\":\n            print(\"C\")\n            break\n    \n        elif Sc[0]==\"a\":\n            turn=\"A\"\n            Sc=Sc[1::]\n        elif Sc[0]==\"b\":\n            turn=\"B\"\n            Sc=Sc[1::]\n        elif Sc[0]==\"c\":\n            turn=\"C\"\n            Sc=Sc[1::]\n    \n    \n"}
{"label": 23, "index": 2931, "code": "Sa=[]\nSb=[]\nSc=[]\nSa=list(str(raw_input()))\nSb=list(str(raw_input()))\nSc=list(str(raw_input()))\nstate=\"a\"\nwhile True:\n    if state==\"a\":\n        if (len(Sa) == 0):\n            break\n        else:\n            state=Sa.pop(0)\n\n    elif state==\"b\":\n        if (len(Sb) == 0):\n            break\n        else:\n            state=Sb.pop(0)\n    elif state==\"c\":\n        if (len(Sc) == 0):\n            break\n        else:\n            state=Sc.pop(0)\nprint(state.upper())\n"}
{"label": 23, "index": 2932, "code": "d = {}\na, b, c = raw_input(), raw_input(), raw_input()\nd['a'] = (a, len(a))\nd['b'] = (b, len(b))\nd['c'] = (c, len(c))\np = {}\np['a'] = 0\np['b'] = 0\np['c'] = 0\nt = 'a'\n\nwhile True:\n    p[t] += 1\n    if p[t] > d[t][1]:\n        print t.upper()\n        break\n    t = d[t][0][p[t]-1]\n"}
{"label": 23, "index": 2933, "code": "s = {}\ns['a'] = input()\ns['b'] = input()\ns['c'] = input()\n\nnow = 'a'\n\nwhile True:\n    if not s[now]:\n        print(now.upper())\n        break\n    nxt = s[now][0]\n    s[now] = s[now][1:]\n    now = nxt\n"}
{"label": 23, "index": 2934, "code": "import math as m\nfrom Queue import Queue\n\nclass Program:\n    \n    def main(self):\n        D = dict()\n        D['a'] = list(raw_input())\n        D['b'] = list(raw_input())\n        D['c'] = list(raw_input())\n        \n        current = 'a'\n        \n        while len(D[current])>0:\n            current = D[current].pop(0)\n        \n        print current.upper()\n        \nif __name__ == '__main__':\n    p=Program();\n    p.main()"}
{"label": 23, "index": 2935, "code": "\n\n\nadeck = raw_input()\nbdeck = raw_input()\ncdeck = raw_input()\n\n\n\n\n\n\nnext = \"a\"\ncard = \"a\"\nahead =0\nbhead=0\nchead =0\n\nwhile (1):\n    if next == \"a\":\n        if ahead == len(adeck):\n            print \"A\"\n            break    \n        \n        card =adeck[ahead]\n        ahead+=1\n        \n\n\n    elif next == \"b\":\n        if bhead == len(bdeck):\n            print \"B\"\n            break        \n       \n        card =bdeck[bhead]\n\n        bhead+=1\n\n    elif next == \"c\":\n        if chead == len(cdeck):\n            print \"C\"\n            break        \n        \n        card =cdeck[chead]\n\n        chead+=1\n    \n    next = card\n        \n    \n"}
{"label": 23, "index": 2936, "code": "sa = input()\nsb = input()\nsc = input()\n\ncard = sa[0]\nsa = sa[1:]\nwhile 1:\n\tif card == \"a\":\n\t\tif not sa:\n\t\t\tprint(\"A\")\n\t\t\tbreak\n\t\telse:\n\t\t\tcard = sa[0]\n\t\t\tsa = sa[1:]\n\telif card == \"b\":\n\t\tif not sb:\n\t\t\tprint(\"B\")\n\t\t\tbreak\n\t\telse:\n\t\t\tcard = sb[0]\n\t\t\tsb = sb[1:]\n\telse:\n\t\tif not sc:\n\t\t\tprint(\"C\")\n\t\t\tbreak\n\t\telse:\n\t\t\tcard = sc[0]\n\t\t\tsc = sc[1:]\n"}
{"label": 23, "index": 2937, "code": "if __name__ == '__main__':\n    players = {}\n    players['a'] = list(input())\n    players['b'] = list(input())\n    players['c'] = list(input())\n\n    t = 'a'\n    while len(players[t]) > 0:\n        t = players[t].pop(0)\n    print(t.upper())\n"}
{"label": 23, "index": 2938, "code": "a_cards = list(input())\nb_cards = list(input())\nc_cards = list(input())\n\ncur_turn = \"a\"\n\nwhile True:\n    if cur_turn == \"a\":\n        if len(a_cards) == 0:\n            print(\"A\")\n            break\n        cur_turn = a_cards.pop(0)\n    elif cur_turn == \"b\":\n        if len(b_cards) == 0:\n            print(\"B\")\n            break\n        cur_turn = b_cards.pop(0)\n    elif cur_turn == \"c\":\n        if len(c_cards) == 0:\n            print(\"C\")\n            break\n        cur_turn = c_cards.pop(0)\n"}
{"label": 23, "index": 2939, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nMAP = {\n    \"a\" : 0,\n    \"b\" : 1,\n    \"c\" : 2,\n}\n\nMAPREV = {\n    0 : \"A\",\n    1 : \"B\",\n    2 : \"C\",\n}\n\ndef main():\n    SS = [input() for _ in range(3)]\n\n    t = 0\n    while SS[t]:\n        c = SS[t][0]\n        SS[t] = SS[t][1:]\n        t = MAP[c]\n\n    print(MAPREV[t])\n\nif __name__ == \"__main__\": main()\n"}
{"label": 23, "index": 2940, "code": "a=list(reversed(input()))\nb=list(reversed(input()))\nc=list(reversed(input()))\nls=(a,b,c)\ni = 0\nwhile ls[i] != []:\n    i = \"abc\".index(ls[i].pop())\nprint(\"ABC\"[i])"}
{"label": 23, "index": 2941, "code": "a=raw_input()\nb=raw_input()\nc=raw_input()\nf=0\nwhile 1:\n#    print a,b,c\n    if f==0:\n        if len(a)==0:\n            print 'A'\n            break\n        elif a[0]=='b':\n            f=1\n        elif a[0]=='c':\n            f=2\n        a=a[1:]\n    elif f==1:\n        if len(b)==0:\n            print 'B'\n            break\n        elif b[0]=='a':\n            f=0\n        elif b[0]=='c':\n            f=2\n        b=b[1:]\n    else:\n        if len(c)==0:\n            print 'C'\n            break\n        elif c[0]=='a':\n            f=0\n        elif c[0]=='b':\n            f=1\n        c=c[1:]\n"}
{"label": 23, "index": 2942, "code": "a = list(input())\nb = list(input())\nc = list(input())\n\nnum = 0\n\nwhile len(a) >= 0 and len(b) >= 0 and len(c) >= 0:\n    if num == 0:\n        tar = a[0]\n        del a[0]\n        num += 1\n    else:\n        if tar == \"a\":\n            if len(a) > 0:\n                tar = a[0]\n                del a[0]\n            elif len(a) == 0:\n                print(\"A\")\n                break\n        elif tar == \"b\":\n            if len(b) > 0:\n                tar = b[0]\n                del b[0]\n            elif len(b) == 0:\n                print(\"B\")\n                break\n        elif tar == \"c\":\n            if len(c) > 0:\n                tar = c[0]\n                del c[0]\n            elif len(c) == 0:\n                print(\"C\")\n                break\n"}
{"label": 23, "index": 2943, "code": "from collections import deque\n\nA = deque(input())\nB = deque(input())\nC = deque(input())\n\nflag = 'a'\n\nwhile True:\n\tif flag == 'a':\n\t\tif len(A) == 0:\n\t\t\tbreak\n\t\tflag = A.popleft()\n\telif flag == 'b':\n\t\tif len(B) == 0:\n\t\t\tbreak\n\t\tflag = B.popleft()\n\telif flag == 'c':\n\t\tif len(C) == 0:\n\t\t\tbreak\n\t\tflag = C.popleft()\n\t\t\nprint(flag.upper())"}
{"label": 23, "index": 2944, "code": "sa = raw_input()\nsb = raw_input()\nsc = raw_input()\n\ncurrent_turn = 'a'\n\nwhile True:\n    if current_turn == 'a':\n        if len(sa) == 0:\n            print\"A\"\n            break\n        current_turn = sa[0]\n        sa = sa[1:]\n    elif current_turn == 'b':\n        if len(sb) == 0:\n            print\"B\"\n            break\n        current_turn = sb[0]\n        sb = sb[1:]\n    elif current_turn == 'c':\n        if len(sc) == 0:\n            print\"C\"\n            break\n        current_turn = sc[0]\n        sc = sc[1:]"}
{"label": 23, "index": 2945, "code": "def replace_cards(s):\n    return list(s.replace('a', '0').replace('b', '1').replace('c', '2')[::-1])\n\nplayer = [replace_cards(input()) for _ in range(3)]\n\nnow = 0\n\nwhile len(player[now]):\n    now = int(player[now].pop())\nprint('ABC'[now])\n"}
{"label": 23, "index": 2946, "code": "\ns = { 'a':input(), 'b':input(), 'c':input() }\nn = 'a'\nwhile True:\n    if 0 < len(s[n]):\n        o = s[n][0]\n        s[n] = s[n][1:]\n        n = o\n    else:\n        print(n.upper())\n        break"}
{"label": 23, "index": 2947, "code": "p = {i:list(input()) for i in 'abc' }\n\nt = 'a'\nwhile True:\n        if len(p[t]) == 0:\n                break\n        else:\n                x = p[t][0]\n                del p[t][0]\n                t = x\n\nprint (t.upper())"}
{"label": 23, "index": 2948, "code": "sa = raw_input()\nsb = raw_input()\nsc = raw_input()\n\nclass Person:\n    def __init__(self, name, cards):\n        self.name = name\n        self.cards = cards\n\na = Person('A', sa)\nb = Person('B', sb)\nc = Person('C', sc)\n\nturn = a\nwhile turn.cards:\n    if turn.cards[0] == 'a':\n        turn.cards = turn.cards.replace('a', '', 1)\n        turn = a\n    elif turn.cards[0] == 'b':\n        turn.cards = turn.cards.replace('b', '',1)\n        turn = b\n    elif turn.cards[0] == 'c':\n        turn.cards = turn.cards.replace('c', '', 1)\n        turn = c\nprint turn.name"}
{"label": 23, "index": 2949, "code": "mem = []\nfor i in range(3):\n    mem.append(list(input()))\n\nmem = [[ord(y)-97 for y in x] for x in mem]\n\nidx = 0\nwhile 1:\n    if len(mem[idx]) >= 1:\n        idx = mem[idx].pop(0)\n    else:\n        break\n\nprint(chr(idx+97).upper())"}
{"label": 23, "index": 2950, "code": "import sys\nA=str(input())\nB=str(input())\nC=str(input())\n \nalt=\"a\"\nwhile True:\n  if alt == \"a\":\n    if A==\"\":\n      print(\"A\")\n      sys.exit()\n    alt = A[0]\n    A=A[1:]\n  if alt == \"b\":\n    if B==\"\":\n      print(\"B\")\n      sys.exit()\n    alt = B[0]\n    B=B[1:]\n  if alt == \"c\":\n    if C==\"\":\n      print(\"C\")\n      sys.exit()\n    alt = C[0]\n    C=C[1:]"}
{"label": 23, "index": 2951, "code": "s = {}\n\ns['a'] = list(input())\ns['b'] = list(input())\ns['c'] = list(input())\n\nturn = 'a'\nwhile True:\n    if len(s[turn]) == 0:\n        print(turn.upper())\n        break\n    else:\n        turn = s[turn].pop(0)"}
{"label": 23, "index": 2952, "code": "A_ = input()\nB_ = input()\nC_ = input()\n\n\nnext_ = A_[0]\nA_ = A_[1::]\nwhile(True):\n    if(next_ == 'a'):\n        if(A_ == ''):\n            print(\"A\")\n            break\n        next_ = A_[0]\n        A_ = A_[1::]\n    elif(next_ == 'b'):\n        if(B_ == ''):\n            print(\"B\")\n            break\n        next_ = B_[0]\n        B_ = B_[1::]\n    elif(next_ == 'c'):\n        if(C_ == ''):\n            print(\"C\")\n            break\n        next_ = C_[0]\n        C_ = C_[1::]\n "}
{"label": 23, "index": 2953, "code": "s = {}\ns['a'] = input()\ns['b'] = input()\ns['c'] = input()\n\nl = {i:len(s[i]) for i in 'abc'}\ncnt = {i:0 for i in 'abc'}\nt = 'a'\n\nwhile True:\n    if cnt[t] == l[t]:\n        print(t.upper())\n        break\n    _t = t\n    t = s[_t][cnt[_t]]\n    cnt[_t] += 1"}
{"label": 23, "index": 2954, "code": "from collections import deque\n\nal = deque(input())\nbl = deque(input())\ncl = deque(input())\n\nturn = 0\nabcl = (al, bl, cl)\nturn_num = [\"a\", \"b\", \"c\"]\nwhile True:\n    # print(abcl)\n    if turn == 0 and not al:\n        ans = \"A\"\n        break\n    if turn == 1 and not bl:\n        ans = \"B\"\n        break\n    if turn == 2 and not cl:\n        ans = \"C\"\n        break\n    turn = turn_num.index(abcl[turn].popleft())\n\nprint(ans)\n"}
{"label": 23, "index": 2955, "code": "# coding: utf-8\n\nimport math\nimport string\nimport itertools\nimport fractions\nimport heapq\nimport collections\nimport re\nimport array\nimport bisect\n\n\ndef solve(cs, next_p):\n    if len(cs[next_p]) == 0:\n        return [\"A\", \"B\", \"C\"][next_p]\n\n    c = cs[next_p][0]\n    cs[next_p].pop(0)\n    if c == \"a\":\n        return solve(cs, 0)\n    if c == \"b\":\n        return solve(cs, 1)\n    if c == \"c\":\n        return solve(cs, 2)\n\n\n\na = list(input().strip())\nb = list(input().strip())\nc = list(input().strip())\ncs = [a, b, c]\n\nprint(solve(cs, 0))\n"}
{"label": 23, "index": 2956, "code": "d = {}\nd['a'] = input()\nd['b'] = input()\nd['c'] = input()\nt = 'a'\nwhile len(d[t]) != 0:\n    b = d[t][0]\n    d[t] = d[t][1:]\n    t = b\nprint(t.upper())"}
{"label": 23, "index": 2957, "code": "import sys\n\nstra = input()\nstrb = input()\nstrc = input()\n\nflag = 1\n\nwhile True:\n    if flag == 1:\n        if len(stra) == 0:\n            print(\"A\")\n            sys.exit()\n        if stra[0:1] == 'a':\n            flag = 1\n        elif stra[0:1] == 'b':\n            flag = 2\n        elif stra[0:1] == 'c':\n            flag = 3\n        stra = stra[1:len(stra)]\n    elif flag == 2:\n        if len(strb) == 0:\n            print(\"B\")\n            sys.exit()\n        if strb[0:1] == 'a':\n            flag = 1\n        elif strb[0:1] == 'b':\n            flag = 2\n        elif strb[0:1] == 'c':\n            flag = 3\n        strb = strb[1:len(strb)]\n    elif flag == 3:\n        if len(strc) == 0:\n            print(\"C\")\n            sys.exit()\n        if strc[0:1] == 'a':\n            flag = 1\n        elif strc[0:1] == 'b':\n            flag = 2\n        elif strc[0:1] == 'c':\n            flag = 3\n        strc = strc[1:len(strc)]\n"}
{"label": 23, "index": 2958, "code": "res = 'ABC'\nar = []\nar.append(raw_input())\nar.append(raw_input())\nar.append(raw_input())\ncur_idx = 0\nwhile True:\n\tif len(ar[cur_idx]) == 0:\n\t\tprint res[cur_idx]\n\t\tbreak\n\tch = ar[cur_idx][0]\n\tar[cur_idx] = ar[cur_idx][1:]\n\tif ch == 'a':\n\t\tcur_idx = 0\n\telif ch == 'b':\n\t\tcur_idx = 1\n\telse:\n\t\tcur_idx = 2"}
{"label": 23, "index": 2959, "code": "A = list(input().strip())\nB = list(input().strip())\nC = list(input().strip())\n \ncurrent = A\ncurrentName = 'A'\nwhile True:\n    if len(current) == 0:\n        break\n    card = current.pop(0)\n    if card is 'a':\n        current = A\n        currentName = 'A'\n    elif card is 'b':\n        current = B\n        currentName = 'B'\n    else:\n        current = C\n        currentName = 'C'\n \nprint(currentName)"}
{"label": 23, "index": 2960, "code": "player_list = ['a', 'b', 'c']\ns = {player_list[n]: list(raw_input()) for n in xrange(len(player_list))}\n\ncurrent_turn = player_list[0]\n\nget_winner = lambda x, s: not s[x] and x.upper() or get_winner(s[x].pop(0), s)\n\nprint get_winner(current_turn, s)"}
{"label": 23, "index": 2961, "code": "def solve(a,b,c,turn):\n\tif turn == \"a\":\n\t\tif a == \"\":\n\t\t\treturn \"A\"\n\t\telse:\n\t\t\tnext_turn = a[0]\n\t\t\ta = a[1:]\n\telif turn == \"b\":\n\t\tif b == \"\":\n\t\t\treturn \"B\"\n\t\telse:\n\t\t\tnext_turn = b[0]\n\t\t\tb = b[1:]\n\telse:\n\t\tif c == \"\":\n\t\t\treturn \"C\"\n\t\telse:\n\t\t\tnext_turn = c[0]\n\t\t\tc = c[1:]\n\treturn solve(a,b,c, next_turn)\na=input().strip()\nb=input().strip()\nc=input().strip()\nprint(solve(a,b,c,\"a\"))\n"}
{"label": 23, "index": 2962, "code": "a = [list(reversed([{'a' : 0, 'b' : 1, 'c' : 2}[_] for _ in input()]))for i in range(3)]\ncur = 0\nwhile len(a[cur]):    \n    cur = a[cur].pop()\nprint(['A', 'B', 'C'][cur])\n    \n    \n"}
{"label": 23, "index": 2963, "code": "s ={}\ns[\"a\"] = list(input()) \ns[\"b\"] = list(input()) \ns[\"c\"] = list(input()) \nturn = \"a\"\nwhile True:\n    if len(s[turn]) == 0:\n        break\n    turn = s[turn].pop(0)\nprint(turn.upper())"}
{"label": 23, "index": 2964, "code": "d = {}\nd['a'] = [c for c in input().strip()]\nd['b'] = [c for c in input().strip()]\nd['c'] = [c for c in input().strip()]\nmaster = 'a'\n\nwhile True:\n    if len(d[master]) == 0:\n        print(master.upper())\n        break\n\n    master = d[master].pop(0)\n"}
{"label": 23, "index": 2965, "code": "dict = {\"a\":0,\"b\":1,\"c\":2}\nrevd = {0:\"A\",1:\"B\",2:\"C\"}\nstrset = [input() for _ in range(3)]\ndeckpo = [0,0,0]\nturn = 0\nwhile True:\n    if deckpo[turn] == len(strset[turn]):\n        break\n    next = dict[strset[turn][deckpo[turn]]]\n    deckpo[turn] += 1\n    turn = next\nprint(revd[turn])"}
{"label": 23, "index": 2966, "code": "a = list(input())\nb = list(input())\nc = list(input())\npre = a\n\ndef abcpop(lis):\n    if lis[0] == \"a\":\n        lis.pop(0)\n        pre = a\n    elif lis[0] == \"b\":\n        lis.pop(0)\n        pre = b\n    elif lis[0] == \"c\":\n        lis.pop(0)\n        pre = c\n    return pre\nwhile a != [] and b != [] and c != []:\n    pre = abcpop(pre)\nif a == []:\n    print(\"A\")\nelif b == []:\n    print(\"B\")\nelif c == []:\n    print(\"C\")\n    \n        \n    \n    "}
{"label": 23, "index": 2967, "code": "a = list(input())\nb = list(input())\nc = list(input())\n\nn = a[0]\nif len(a) < 1:\n    del a[0]\n\nwhile True:\n    if n == \"a\":\n        n = a[0]\n        del a[0]\n        if len(a) == 0:\n            print(\"A\")\n            break\n    elif n == \"b\":\n        n = b[0]\n        del b[0]\n        if len(b) == 0:\n            print(\"B\")\n            break\n    elif n == \"c\":\n        n = c[0]\n        del c[0]\n        if len(c) == 0:\n            print(\"C\")\n            break\n"}
{"label": 23, "index": 2968, "code": "import sys\n\na=input()\nb=input()\nc=input()\n\ndef fun(turn,a_index,b_index,c_index):\n    if(a_index==len(a) and turn=='a'):\n        print(\"A\")\n        sys.exit()\n    if(b_index==len(b) and turn=='b'):\n        print(\"B\")\n        sys.exit()\n    if(c_index==len(c) and turn=='c'):\n        print(\"C\")\n        sys.exit()\n\n    if(turn=='a'):\n        fun(a[a_index],a_index+1,b_index,c_index)\n    if(turn=='b'):\n        fun(b[b_index],a_index,b_index+1,c_index)\n    if(turn=='c'):\n        fun(c[c_index],a_index,b_index,c_index+1)\n\nfun('a',0,0,0)"}
{"label": 23, "index": 2969, "code": "# -*- coding: utf-8 -*-\nimport sys,copy,math,heapq,itertools as it,fractions,re,bisect,collections as coll\n\nSA = raw_input()\nSB = raw_input()\nSC = raw_input()\n\nx = SA[0]\nSA = SA[1:]\nwhile 1:\n    if x == \"a\" and SA:\n        x = SA[0]\n        SA = SA[1:]\n    elif x == \"b\" and SB:\n        x = SB[0]\n        SB = SB[1:]\n    elif x == \"c\" and SC:\n        x = SC[0]\n        SC = SC[1:]\n    else:\n        print x.upper()\n        break\n"}
{"label": 23, "index": 2970, "code": "import sys\n\n#sys.stdin = open('input2.txt', 'r')\na_c = list(raw_input())\nb_c = list(raw_input())\nc_c = list(raw_input())\na_i, b_i, c_i = 0,0,0\n\ndef is_done(c):\n\tif c == 'a':\n\t\tif (a_i < len(a_c)):\n\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n\tif c == 'b':\n\t\tif (b_i < len(b_c)):\n\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n\tif c == 'c':\n\t\tif (c_i < len(c_c)):\n\t\t\treturn False\n\t\telse:\n\t\t\treturn True\n\nif (len(a_c) == 0):\n\tprint 'A'\n\tsys.exit()\n\nn_c = a_c[a_i]\na_i = a_i + 1\n\nwhile True:\n\tif n_c == 'a':\n\t\tif is_done('a'):\n\t\t\tprint 'A'\n\t\t\tsys.exit()\n\t\tn_c = a_c[a_i]\n\t\ta_i = a_i + 1\n\telif n_c == 'b':\n\t\tif is_done('b'):\n\t\t\tprint 'B'\n\t\t\tsys.exit()\n\t\tn_c = b_c[b_i]\n\t\tb_i = b_i + 1\n\telse:\n\t\tif is_done('c'):\n\t\t\tprint 'C'\n\t\t\tsys.exit()\n\t\tn_c = c_c[c_i]\n\t\tc_i = c_i + 1\n"}
{"label": 23, "index": 2971, "code": "# -*- coding:utf-8 -*-\n\ndef li_input():\n    A=[]\n    B=[]\n    C=[]\n    a=input()\n    for i in range(len(a)):\n        A.append(a[i])\n    b=input()\n    for i in range(len(b)):\n        B.append(b[i])\n    c=input()\n    for i in range(len(c)):\n        C.append(c[i])\n    return A,B,C\n\n\ndef main():\n    A,B,C=li_input()\n    card=A[0]\n    del(A[0])\n    while 1:\n        if card=='a':\n            try:\n                card=A[0]\n                del(A[0])\n            except:\n                break\n        elif card=='b':\n            try:\n                card=B[0]\n                del(B[0])\n            except:\n                break\n        elif card=='c':\n            try:\n                card=C[0]\n                del(C[0])\n            except:\n                break\n\n    if card=='a':\n        print('A')\n    elif card=='b':\n        print('B')\n    elif card=='c':\n        print('C')\n    \nif __name__==\"__main__\":\n    main()"}
{"label": 23, "index": 2972, "code": "S = [input() for _ in range(3)]\nturn = 0\ncur = [0, 0, 0]\nwhile cur[turn] < len(S[turn]):\n    oldturn = turn\n    turn = 'abc'.index(S[turn][cur[turn]])\n    cur[oldturn] += 1\n\nprint('ABC'[turn])\n"}
{"label": 23, "index": 2973, "code": "# -*- coding:utf-8 -*-\nif __name__ == '__main__':\n    A = input() + \"d\"\n    B = input() + \"d\"\n    C = input() + \"d\"\n\n    Al = len(A)\n    Bl = len(B)\n    Cl = len(C)\n    na = 1\n    nb = 0\n    nc = 0\n\n    now = A[0]\n    while(now != \"d\"):\n        if now == \"a\":\n            now = A[na]\n            na += 1\n        elif now == \"b\":\n            now = B[nb]\n            nb += 1\n        else:\n            now = C[nc]\n            nc += 1\n    if na == Al: print(\"A\")\n    if nb == Bl: print(\"B\")\n    if nc == Cl: print(\"C\")\n"}
{"label": 23, "index": 2974, "code": "S={c:iter(raw_input())for c in\"abc\"}\ns=\"a\"\ntry:\n while 1:s=S[s].next()\nexcept:print s.upper()"}
{"label": 23, "index": 2975, "code": "d=[list(input())for _ in[0]*3];x=0\nwhile 1:\n\tif len(d[x])==0:print(chr(65+x));break\n\tx=ord(d[x].pop(0))-97"}
{"label": 23, "index": 2976, "code": "cards = [ raw_input() for _ in xrange(3) ]\nindexes = [ 0 for _ in xrange(3) ]\nplayer2num = { \"a\" : 0, \"b\" : 1, \"c\" : 2} \nnum2winner = { 0 : \"A\", 1 : \"B\", 2 : \"C\"}\n\nturn_player = 0\nwhile True:\n    if indexes[turn_player] == len(cards[turn_player]):\n        print num2winner[turn_player]\n        break\n    next_turn_player = cards[turn_player][indexes[turn_player]]\n    indexes[turn_player] += 1\n    turn_player = player2num[next_turn_player]"}
{"label": 23, "index": 2977, "code": "sa = input()\nsb = input()\nsc = input()\n\ncs = sa\ncp = \"\"\nnp = \"a\"\nwhile(True):\n    cp = np\n    if cs=='' :\n        break\n    np = cs[0]\n#    print(cp)\n    cs = cs.replace(np, '', 1)\n#    print(np)\n#    print(cs)\n#    print(\"\")\n    \n    if cp==\"a\" :\n        sa = cs\n    elif cp==\"b\" :\n        sb = cs\n    elif cp==\"c\" :\n        sc = cs\n\n    if np==\"a\" :\n        cs = sa\n    elif np==\"b\" :\n        cs = sb\n    elif np==\"c\" :\n        cs = sc\n\nprint(cp.upper())\n"}
{"label": 23, "index": 2978, "code": "S = {}\nS['a'], S['b'], S['c'] = [list(raw_input()) for _ in xrange(3)]\nturn = 'a'\nwhile True:\n    if len(S[turn]) == 0:\n        print turn.upper()\n        break\n    else:\n        turn = S[turn].pop(0)"}
{"label": 23, "index": 2979, "code": "SA=list(input())\nSB=list(input())\nSC=list(input())\n\nT=[]\nT.append(SA[0])\ndel SA[0]\n\nfor i in range(300):\n\n    if SA==[] and T[-1]=='a':\n        print('A')\n        break\n        \n    elif SB==[] and T[-1]=='b':\n        print('B')\n        break\n        \n    elif SC==[] and T[-1]=='c':\n        print('C')\n        break\n        \n    elif T[-1]=='a':\n        T.append(SA[0])\n        del SA[0]\n        \n\n    elif T[-1]=='b':\n        T.append(SB[0])\n        del SB[0]\n        \n\n    elif T[-1]=='c':\n        T.append(SC[0])\n        del SC[0]"}
{"label": 23, "index": 2980, "code": "def main():\n    sa = input()\n    sb = input()\n    sc = input()\n    turn = 'a'\n    while True:\n        if turn == 'a':\n            if len(sa) == 0:\n                print('A')\n                break\n            turn = sa[0]\n            sa = sa[1:]\n        elif turn == 'b':\n            if len(sb) == 0:\n                print('B')\n                break\n            turn = sb[0]\n            sb = sb[1:]\n        else:\n            if len(sc) == 0:\n                print('C')\n                break\n            turn = sc[0]\n            sc = sc[1:]\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 23, "index": 2981, "code": "S=dict(zip(('a','b','c'),(list(input()) for _ in range(3))))\nt='a'\nwhile True:\n    if len(S[t])!=0:\n        t=S[t].pop(0)\n    else:\n        t=t.upper()\n        break\nprint(t)"}
{"label": 23, "index": 2982, "code": "a = (raw_input())\nb = (raw_input())\nc = (raw_input())\nt = 'a'\nwhile True:\n\tif t == 'a':\n\t\tif len(a) == 0:\n\t\t\tprint(\"A\")\n\t\t\texit()\n\t\tt = a[0]\n\t\ta = a[1:]\n\tif t == 'b':\n\t\tif len(b) == 0:\n\t\t\tprint(\"B\")\n\t\t\texit()\n\t\tt = b[0]\n\t\tb = b[1:]\n\tif t == 'c':\n\t\tif len(c) == 0:\n\t\t\tprint(\"C\")\n\t\t\texit()\n\t\tt = c[0]\n\t\tc = c[1:]"}
{"label": 23, "index": 2983, "code": "# -*- coding:utf-8 -*-\nimport sys, re\nflag = 'a'\ndef search(sentence):\n    global flag\n    flag = sentence[0]\n    return sentence.replace(flag, '', 1)\n\nS_a, S_b, S_c = (input(), input(), input())\n\nwhile True:\n    if flag == 'a':\n        if len(S_a) == 0:\n            print(\"A\")\n            sys.exit()\n        S_a = search(S_a)\n    elif flag == 'b':\n        if len(S_b) == 0:\n            print(\"B\")\n            sys.exit()\n        S_b = search(S_b)\n    else:\n        if len(S_c) == 0:\n            print(\"C\")\n            sys.exit()\n        S_c = search(S_c)"}
{"label": 23, "index": 2984, "code": "player_list = ['a', 'b', 'c']\ns = {player_list[n]: list(raw_input()) for n in xrange(len(player_list))}\n\ncurrent_turn = player_list[0]\n\nget_winner = lambda x, s: not s[x] and x.upper() or get_winner(s[x].pop(0), s)\n\nprint get_winner(current_turn, s)"}
{"label": 23, "index": 2985, "code": "S = [input() for i in range(3)]\nW = \"ABC\"\ni = 0\nwhile True:\n    if len(S[i]) == 0:\n        print(W[i])\n        break\n    c = S[i][0]\n    S[i] = S[i][1:]\n    i = ord(c) - ord('a')"}
{"label": 23, "index": 2986, "code": "Sa = list(raw_input())\nSb = list(raw_input())\nSc = list(raw_input())\n\n#Sa,Sb,Sc = for x in range(3):list(raw_input())\n\nx = Sa[0]\ndel Sa[0]\n\nflag = 0\nwhile(flag == 0):\n    if x in 'a':\n        if len(Sa)>0:\n            x = Sa[0]\n            del Sa[0]\n        else:\n            flag = 1\n    elif x in 'b':\n        if len(Sb)>0:\n            x = Sb[0]\n            del Sb[0]\n        else:\n            flag = 2\n    elif x in 'c':\n        if len(Sc)>0:\n            x = Sc[0]\n            del Sc[0]\n        else:\n            flag = 3\n\nif flag == 1:\n    print 'A'\nelif flag == 2:\n    print 'B'\nelif flag == 3:\n    print 'C'\n"}
{"label": 23, "index": 2987, "code": "s = []\nfor _ in range(3):\n\ts.append(list(input()))\n\nn_p = ['a']\n\nwhile True:\n\tif n_p[0] == 'a' and len(s[0]) != 0:\n\t\tn_p[0] = s[0].pop(0)\n\n\telif n_p[0] == 'b' and len(s[1]) != 0:\n\t\tn_p[0] = s[1].pop(0)\n\n\telif n_p[0] == 'c' and len(s[2]) != 0:\n\t\tn_p[0] = s[2].pop(0)\n\n\telse:\n\t\tprint(n_p[0].upper())\n\t\tbreak\t\t\n"}
{"label": 23, "index": 2988, "code": "# coding: utf-8\n# Here your code !\n\nsa, sb, sc = [list(input()) for i in range(3)]\nnow = sa.pop(0)\nwhile 1:\n    #print(now, sa, sb, sc)\n    if now == \"a\":\n        if sa == []:\n            pass\n        else:\n            now = sa.pop(0)\n    elif now == \"b\":\n        now = sb.pop(0)\n    else:\n        now = sc.pop(0)\n    \n    if sa == [] and now == \"a\" :\n        print(\"A\")\n        break\n    elif sb == [] and now == \"b\":\n        print(\"B\")\n        break\n    elif sc == [] and now == \"c\":\n        print(\"C\")\n        break"}
{"label": 23, "index": 2989, "code": "a = list(raw_input())\nb = list(raw_input())\nc = list(raw_input())\nmydict = {'A':a, 'B':b, 'C':c}\nnextp = mydict['A']\n\nwhile True:\n    char = nextp.pop(0)\n    nextp = mydict[char.upper()]\n    if not nextp:\n        print char.upper()\n        break"}
{"label": 24, "index": 2990, "code": "M = map(int, raw_input().split())\n# M = [1,2,2]\nprint len(set(M))"}
{"label": 24, "index": 2991, "code": "inputList = list(map(int,input().split(\" \")))\ntemp = []\n\nfor i in range(3):\n    if inputList[i] not in temp:\n        temp.append(inputList[i])\n\nprint(len(temp))\n"}
{"label": 24, "index": 2992, "code": "a = set(list(map(int, input().split())))\nprint(len(a))"}
{"label": 24, "index": 2993, "code": "print(len(set(input().split())))"}
{"label": 24, "index": 2994, "code": "a, b, c = map(int,input().split())\n\nif a == b == c:\n    print(1)\nelif a == b:\n    print(2)\nelif a == c:\n    print(2)\nelif b == c:\n    print(2)\nelse:\n    print(3)"}
{"label": 24, "index": 2995, "code": "from collections import defaultdict\n\n\ndef main():\n    print(len(set(map(int, input().split()))))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 24, "index": 2996, "code": "print(len(set(input().split())))"}
{"label": 24, "index": 2997, "code": "print(len(set(input().split())))"}
{"label": 24, "index": 2998, "code": "a, b, c = map(int, input().split())\nif a == b == c :\n    print (1)\nelif a == b or b == c or c == a:\n    print (2)\nelse :\n    print (3)"}
{"label": 24, "index": 2999, "code": "def solve():\n    a, b, c = map(int, input().split())\n    if a == b == c:\n        ans = \"1\"\n    elif a != b == c:\n        ans = \"2\"\n    elif a == b != c:\n        ans = \"2\"\n    elif a == c != b:\n        ans = \"2\"\n    elif a != b != c:\n        ans = \"3\"\n\n    print(ans)\n\nif __name__ == '__main__':\n    solve()\n\n"}
{"label": 24, "index": 3000, "code": "from random import random\nimport math\nimport re\nimport fractions\n\nA = map(int, raw_input().split(\" \"))\nprint len(set(A))\n"}
{"label": 24, "index": 3001, "code": "print(len(set(input().split())))"}
{"label": 24, "index": 3002, "code": "s = input().split()\nprint(len(set(s)))"}
{"label": 24, "index": 3003, "code": "a, b, c = map(int, input().split())\nk = 3\nif a == b:\n    k -= 1\nif a == c:\n    k -= 1\nif b == c:\n    k -= 1\nif k == 0:\n    print(1)\nelse:\n    print(k)"}
{"label": 24, "index": 3004, "code": "a,b,c =map(int,input().split())\n\nif a==b==c:\n    print(\"1\")\n\nelif a==b or b==c or a==c:\n    print(\"2\")\n\nelse:\n    print(\"3\")"}
{"label": 24, "index": 3005, "code": "A = [int(x) for x in raw_input().split()]\nd = {}\nfor x in A:\n    d[x] = 1\nprint len(d.keys())"}
{"label": 24, "index": 3006, "code": "A = list(map(int,input().split()))\n\n# A.sort()\n#\n# # for i in range(len(A)):\n# #     for j in range(len(A)):\n# #         for k in range(len(A)):\n# cnt = 0\n# if A[0] != A[1] and A[0] != A[2]:\n#     cnt += 1\n# if A[0] !=\n\n# a,b,c = map(int,input().split())\n#\n# if a!=b and a!=c and b!=c:\n#     print(3)\n# if\n\nprint(len(set(A)))"}
{"label": 24, "index": 3007, "code": "print(len({n for n in input().split()}))\n"}
{"label": 24, "index": 3008, "code": "print(len(set(input().split())))\n"}
{"label": 24, "index": 3009, "code": "a, b, c = map(int, raw_input().split())\nanswer = 1\nif b != a:\n    answer += 1\nif c != a and c != b:\n    answer += 1\nprint answer"}
{"label": 24, "index": 3010, "code": "a, b, c = map(int, raw_input().split())\nif (a==b==c):\n    print 1\nelif (a!=b and b!=c and c!=a):\n    print 3\nelse:\n    print 2"}
{"label": 24, "index": 3011, "code": "ans = list(map(int, input().split()))\nANS = set(ans)\nprint(len(ANS))\n"}
{"label": 24, "index": 3012, "code": "a, b, c = map(int, input().split());\n\nif (a != b) and (a != c) and (b != c):\n    print(\"3\")\nelif ((a == b != c) or (a == c != b) or (b == c != a)):\n    print(\"2\")\nelse:print(\"1\")\n"}
{"label": 24, "index": 3013, "code": "def ans():\n\tl = list(map(int, raw_input().split()))\n\tif l[0] == l[1] and l[1] == l[2]:\n\t\tprint 1\n\t\treturn 1\n\telif l[0] == l[1] or l[1] == l[2] or l[2] == l[0]:\n\t\tprint 2\n\t\treturn 2\n\telse:\n\t\tprint 3\n\t\treturn 3\n\nif __name__ == '__main__':\n\tans = ans()"}
{"label": 24, "index": 3014, "code": "def main():\n\tinpt = raw_input().split()\n\tcnt = 0\n\tfor i in range(0, 3):\n\t\tif inpt[i] == inpt[(i+1)%3]:\n\t\t\tcnt += 1\n\tif cnt == 3:\n\t\tcnt -= 1\n\tprint 3 - cnt\n\t\nmain()"}
{"label": 24, "index": 3015, "code": "print(len(set(map(int, input().split()))))\n"}
{"label": 24, "index": 3016, "code": "#coding:utf-8\na,b,c=list(map(int,input().split()))\n\nif a==b and b==c:\n    print(1)\nelif a==b or b==c or c==a:\n    print(2)\nelse:\n    print(3)\n"}
{"label": 24, "index": 3017, "code": "print(len(set(map(int,input().split()))))"}
{"label": 24, "index": 3018, "code": "a,b,c = map(int, raw_input().split())\nif a == b and b == c:\n    print 1\nelif a == b or b == c or a == c:\n    print 2\nelse:\n    print 3\n"}
{"label": 24, "index": 3019, "code": "# -*- coding: utf-8 -*-\na, b, c = map(int, input().split())\n\nans = len({a, b, c})\nprint(ans)\n"}
{"label": 24, "index": 3020, "code": "print(len(set([int(i) for i in input().split()])))"}
{"label": 24, "index": 3021, "code": "import sys\n\nprint len(set(sys.stdin.readline().split()))"}
{"label": 24, "index": 3022, "code": "\n\n\nif __name__=='__main__':\n    a = list(map(int,input().split()))\n    print(len(set(a)))\n"}
{"label": 24, "index": 3023, "code": "\nfrom collections import Counter\nS = raw_input().strip().split()\nprint len(Counter(S))\n"}
{"label": 24, "index": 3024, "code": "print(len(set(input().split())))"}
{"label": 24, "index": 3025, "code": "\n\nc = list(map(lambda x: int(x), input().split()))\n\nprint(len(set(c)))\n"}
{"label": 24, "index": 3026, "code": "a, b, c = map(int, raw_input().split())\ncnt = 3\nif a == b:\n    cnt-=1\nif b == c:\n    cnt-=1\nif a == c:\n    cnt-=1\nif cnt==0:\n    cnt=1\nprint cnt\n"}
{"label": 24, "index": 3027, "code": "a = input().split()\ns = {a[0]}\nfor i in a:\n    s |= {i}\nprint(len(s))\n"}
{"label": 24, "index": 3028, "code": "print(len(set([int(i) for i in input().split()])))"}
{"label": 24, "index": 3029, "code": "l = list(map(int,list(input().split())))\ncolor = 0\nbought = []\n\nfor i in l:\n    if i not in bought:\n        color += 1\n        bought.append(i)\n\nprint(color)\n"}
{"label": 24, "index": 3030, "code": "print(len({int(x) for x in input().split()}))"}
{"label": 24, "index": 3031, "code": "a = {int(x) for x in input().split()}\nprint(len(a))"}
{"label": 24, "index": 3032, "code": "# -*- coding: utf-8 -*-\n\ndef main():\n    a, b, c = map(int, input().split())\n    paint_cans = set([a, b, c])\n    print(len(paint_cans))\n\n\nif __name__ == '__main__':\n    main()"}
{"label": 24, "index": 3033, "code": "color = input()\nabc = color.split()\nnum_kind = len(set(abc))\nprint(num_kind)"}
{"label": 24, "index": 3034, "code": "a,b,c = map(int, raw_input().split())\nd = {a,b,c}\nprint len(d)\n"}
{"label": 24, "index": 3035, "code": "a,b,c=list(map(int,input().split()))\n\nif a==b and b==c:\n    print(1)\nelif a==b or b==c or c==a:\n    print(2)\nelse:\n    print(3)\n"}
{"label": 24, "index": 3036, "code": "# -*- coding: utf-8 -*-\na, b, c = map(int, input().split())\n\nans = len({a, b, c})\nprint(ans)\n"}
{"label": 24, "index": 3037, "code": "print(len(set([int(i) for i in input().split()])))\n"}
{"label": 24, "index": 3038, "code": "#############################################################################\n# -*- coding: utf-8 -*-\nnums = list(map(int, input().split()))\na = nums[0]\nb = nums[1]\nc = nums[2]\ncount_a = nums.count(a)\ncount_b = nums.count(b)\ncount_c = nums.count(c)\n\nlist = [count_a, count_b, count_c]\nans = 4 - max(list)\nprint(ans)"}
{"label": 24, "index": 3039, "code": "print(len(list(set(input().split()))))"}
{"label": 24, "index": 3040, "code": "print(len(set(input().split(' '))))"}
{"label": 24, "index": 3041, "code": "num_list = input().split()\nnum_before_list = []\ncount = 0\n\nfor num in num_list:\n  if num in num_before_list:\n    continue\n  else:\n    count += 1\n    num_before_list.append(num)\n\nprint(count)"}
{"label": 24, "index": 3042, "code": "a, b, c = map(int, raw_input().split())\n\ncolour_list = [a, b, c]\nbought = []\ncount = 0\nfor x in colour_list:\n    if x not in bought:\n        bought.append(x)\n        count += 1\n\nprint count"}
{"label": 24, "index": 3043, "code": "# -*- coding: utf-8 -*-\na, b, c = map(int, input().split())\n\nans = len({a, b, c})\nprint(ans)\n"}
{"label": 24, "index": 3044, "code": "a = raw_input()\na = [i for i in a.split()]\nprint len(set(a))"}
{"label": 24, "index": 3045, "code": "def ri(): return int(input())\ndef rli(): return list(map(int, input().split()))\ndef ris(): return list(input())\ndef pli(): return \"\".join(list(map(str, ans)))\n\nprint(len(set(rli())))"}
{"label": 24, "index": 3046, "code": "print(len(list(set([int(i) for i in input().split()]))))\n"}
{"label": 24, "index": 3047, "code": "print(len(set(input().split())))"}
{"label": 24, "index": 3048, "code": "count = 3\na, b, c = map(int, input().split())\nif a == b:\n    count -= 1\nif a == c:\n    count -= 1\nif b == c:\n    count -= 1\nif count == 0:\n    count += 1\nprint(count)"}
{"label": 24, "index": 3049, "code": "s = set(list(map(int, input().split())))\nprint(len(s))"}
{"label": 24, "index": 3050, "code": "from sys import stdin, stdout\ndef readLine_int_set(): return set(list(map(int, stdin.readline().split())))\ndef main():\n    print(len(readLine_int_set()))\n    \nif __name__ == \"__main__\":\n    main()"}
{"label": 24, "index": 3051, "code": "A = [int(x) for x in raw_input().split()]\nd = {}\nfor x in A:\n    d[x] = 1\nprint len(d.keys())"}
{"label": 24, "index": 3052, "code": "print(len(set([int(x) for x in input().split()])))\n"}
{"label": 24, "index": 3053, "code": "import sys\n\nabc = sys.stdin.readline().split()\nabc_arr = []\nfor x in abc:\n    if x not in abc_arr:\n        abc_arr.append(x)\nprint len(abc_arr)\n"}
{"label": 24, "index": 3054, "code": "penkis = input().split()\nprint(len(set(penkis)))"}
{"label": 24, "index": 3055, "code": "A,B,C = [int(i) for i in input().split()]\nif A == B == C:\n    print(1)\nelif A == B or A == C or B == C:\n    print(2)\nelse:\n    print(3)\n"}
{"label": 24, "index": 3056, "code": "print(len(set(map(int, input().split()))))"}
{"label": 24, "index": 3057, "code": "def main():\n    print(len(set(map(int, input().split()))))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 24, "index": 3058, "code": "a,b,c = map(int,input().split())\nans = 0\nif a == b:\n    if a == c:\n        ans = 1\n    else:\n        ans = 2\nelse:\n    if a == c:\n        ans = 2\n    elif b == c:\n        ans = 2\n    else:\n        ans = 3\nprint(ans)\n"}
{"label": 24, "index": 3059, "code": "penki = map(int, raw_input().split(\" \"))\na = penki[0]\nb = penki[1]\nc = penki[2]\n\nif a == b and b == c:\n\tprint 1\nelif a != b and b != c and c != a:\n\tprint 3\nelse:\n\tprint 2\n"}
{"label": 24, "index": 3060, "code": "a, b, c = map(int, input().split())\nif a == b == c:\n    print('1')\nelif a != b and a != c and b != c:\n    print('3')\nelse:\n    print('2')\n"}
{"label": 24, "index": 3061, "code": "# -*- coding: utf-8 -*-\n\na, b, c = map(int, raw_input().split())\n\nif a == b and b == c:\n    print 1\nelif a != b and b != c and a != c:\n    print 3\nelse:\n    print 2\n"}
{"label": 24, "index": 3062, "code": "# -*- coding: utf-8 -*-\n\n\na, b, c = map(int, input().split())\n\n\ndef main(a, b, c):\n    return len({a, b, c})\n\n\nprint(main(a, b, c))\n"}
{"label": 24, "index": 3063, "code": "print len(set(raw_input().split(' ')))"}
{"label": 24, "index": 3064, "code": "line = input().split()\nl = list(map(int, line))\na = l[0]\nb = l[1]\nc = l[2]\n\nif a == b and b == c:\n    print (1)\nelif ( a == b and b != c ) or (a != b and b == c) or (a == c and a != b):\n    print (2)\nelse:\n    print (3)"}
{"label": 24, "index": 3065, "code": "import re\nx = raw_input()\nx = re.split(\" \", x)\nprint len(set(x))"}
{"label": 24, "index": 3066, "code": "a, b, c = map(int, input().split())\n\nif a==b==c:\n    print(1)\nelif a==b or b==c or c==a:\n    print(2)\nelse:\n    print(3)\n"}
{"label": 24, "index": 3067, "code": "# -*- coding:utf-8 -*-\n\n# get numbers\nset_of_cans = set(map(int, raw_input().split()))\nprint len(set_of_cans)\n"}
{"label": 24, "index": 3068, "code": "a, b, c = map(int, input().split())\n\nif a == b and b == c:\n    print(1)\nelif (a == b or b == c or c == a) and (a != c or b != c):\n    print(2)\nelse:\n    print(3)"}
{"label": 24, "index": 3069, "code": "penki = input().split(\" \")\nif penki[0] == penki[1]:\n    if penki[1] == penki[2]:\n        print(\"1\")\n    else:\n        print(\"2\")\nelif penki[1] == penki[2]:\n    print(\"2\")\nelif penki[0] == penki[2]:\n    print(\"2\")\nelse:\n    print(\"3\")"}
{"label": 24, "index": 3070, "code": "a= set(list(map(int,input().split())))\nprint(len(a))"}
{"label": 24, "index": 3071, "code": "print len(set(raw_input().split()))"}
{"label": 24, "index": 3072, "code": "print(len(set(input().split())))"}
{"label": 24, "index": 3073, "code": "print len(set(map(int, raw_input().split())))"}
{"label": 24, "index": 3074, "code": "def penki(a, b, c):\n  if a==b and b==c:\n    return 1\n  elif a!=b and b!=c and c!=a:\n    return 3\n  else:\n    return 2\n \na, b, c=map(int, input().split())\nprint(penki(a, b, c))"}
{"label": 24, "index": 3075, "code": "a = raw_input().split()\nprint len(set(a))\n"}
{"label": 24, "index": 3076, "code": "s =set(input().split())\nprint(len(s))"}
{"label": 24, "index": 3077, "code": "color = input().split()\ncolor_set = set(color)\nprint(len(color_set))\n"}
{"label": 24, "index": 3078, "code": "s = {x for x in input().split()}\nprint(len(s))"}
{"label": 24, "index": 3079, "code": "#ABC046A\ns=set(raw_input().split())\nprint len(s)\n"}
{"label": 24, "index": 3080, "code": "numbers = input().split()\n\nif numbers[0] == numbers[1] and numbers[1] == numbers[2]:\n    print(1)\n\nelif numbers[0] != numbers[1] and numbers[1] != numbers[2] and numbers[2] != numbers[0]:\n    print(3)\nelse:\n    print(2)\n"}
{"label": 24, "index": 3081, "code": "a, b, c = map(int, raw_input().split())\n\nans = 0\n\nif a == b == c:\n    ans = 1\n\nelif a == b or b == c or c == a:\n    ans = 2\n\nelse:\n    ans = 3\n\nprint ans"}
{"label": 24, "index": 3082, "code": "# -*- coding: utf-8 -*-\na, b, c = map(int, input().split())\n\nans = len({a, b, c})\nprint(ans)\n"}
{"label": 24, "index": 3083, "code": "input = raw_input()\nl = input.split(\" \")\na = map(int,l)\na2 = list(set(a))\nprint len(a2)"}
{"label": 24, "index": 3084, "code": "a, b, c = map(int, input().split())\n\nif a == b == c:\n    print(1)\nelif (a == b) or (b == c) or (c == a):\n    print(2)\nelse:\n    print(3)\n    \n"}
{"label": 24, "index": 3085, "code": "colors = len(set(input().split()))\nprint(colors)"}
{"label": 24, "index": 3086, "code": "n = input().split(' ')\n\nif n[0] != n[1] != n[2] != n[0]:\n    print(3)\nelif n[0] == n[1] != n[2] != n[0]:\n    print(2)\nelif n[0] != n[1] == n[2] != n[0]:\n    print(2)\nelif n[2] == n[0] != n[1] != n[0]:\n    print(2)\nelse:\n    print(1)"}
{"label": 24, "index": 3087, "code": "print(len(set(input().split())))\n"}
{"label": 24, "index": 3088, "code": "print len(set(map(int,raw_input().split(\" \"))))"}
{"label": 24, "index": 3089, "code": "a, b, c = map(int, input().split())\nif a != b and b != c and a != c:\n    print(3)\nelif a == b and a == c:\n    print(1)\nelse:\n    print(2)\n"}
{"label": 24, "index": 3090, "code": "x = map(int, input().split())\nprint(len(set(x)))"}
{"label": 24, "index": 3091, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\n\ndef main():\n    a = input().split()\n    s = set(a)\n    return len(s)\n\n\nprint(main())\n"}
{"label": 24, "index": 3092, "code": "a, b, c = map(int, raw_input().split())\nprint(len(set([a,b,c])))"}
{"label": 24, "index": 3093, "code": "print(len(set(input().split())))\n"}
{"label": 24, "index": 3094, "code": "print(len({int(num) for num in input().split()}))\n"}
{"label": 24, "index": 3095, "code": "a, b, c = list(map(int, input().split()))\n\nif a != b and b != c and c != a:\n   ans = 3\nelif a == b and b == c:\n   ans = 1\nelse:\n   ans = 2\n\nprint(ans)"}
{"label": 24, "index": 3096, "code": "s=map(int,raw_input().split())\ns_jufk=list(set(s))\nprint len(s_jufk)"}
{"label": 24, "index": 3097, "code": "inp = raw_input()\nprint len(set(inp.strip().split(' ')))"}
{"label": 24, "index": 3098, "code": "print len(set(raw_input().split()))"}
{"label": 24, "index": 3099, "code": "a, b, c = map(int, raw_input().split())\nx = {a, b, c}\nprint len(x)\n"}
{"label": 24, "index": 3100, "code": "paints = raw_input().split()\npaints_uniq = list(set(paints))\nprint(len(paints_uniq))"}
{"label": 24, "index": 3101, "code": "import numpy as np\na = list(map(int, input().split()))\n\na = np.asarray(a)\nprint(len(np.unique(a)))"}
{"label": 24, "index": 3102, "code": "print(len(list(set(input().split()))))"}
{"label": 24, "index": 3103, "code": "a, b, c = map(int, input().split())\n\nif a == b == c :\n    print(\"1\")\nelif a == b or b == c or c == a :\n    print(\"2\")\nelse:\n    print(\"3\")\n"}
{"label": 24, "index": 3104, "code": "a =list(map(int, input(). split()))\nprint(len(set(a)))\n"}
{"label": 24, "index": 3105, "code": "print(len(set(input().split())))"}
{"label": 24, "index": 3106, "code": "a,b,c = map(int, input().split())\n\nif a == b == c:\n  print(1)\nelif a == b or b == c or c == a:\n  print(2)\nelse:\n  print(3)"}
{"label": 24, "index": 3107, "code": "a,b,c = [int(x) for x in raw_input().split(\" \")]\n\nif a == b and b == c and c == a:\n\tprint 1\n\nelif a == b or b == c or c == a:\n\tprint 2\n\nelse:\n\tprint 3"}
{"label": 24, "index": 3108, "code": "d = list(map(int,input().split()))\ndico = {}\nfor i in d:\n\tif i not in dico:\n\t\tdico[i] = 1\n\telse:\n\t\tdico[i] += 1\n\nprint(len(dico))"}
{"label": 24, "index": 3109, "code": "b = []\nori = input().split()\nfor i in ori:\n    if not i in b:\n        b.append(i)\nprint(len(b))"}
{"label": 24, "index": 3110, "code": "print len(set(map(int, raw_input().split())))"}
{"label": 24, "index": 3111, "code": "import bisect\nimport sys\nimport math\nimport itertools\nsys.setrecursionlimit(10000)\n\nINF = float('inf')\n\n# input macro\ndef i():\n    return int(raw_input())\ndef ii():\n    return map(int,raw_input().split(\" \"))\ndef s():\n    return raw_input()\ndef ss():\n    return raw_input().split(\" \")\ndef slist():\n    return list(raw_input())\n#\n\ndef join(s):\n    return ''.join(s)\n\n#iterate macro\ndef piter(n,m):\n    return itertools.permutations(n,m)\ndef citer(n,m):\n    return itertools.combinations(n,m)\n\n#modulo macro\ndef modc(a,b,m):\n    c = 1\n    for i in xrange(b):\n        c = c * (a - i) % m\n        c = c * modinv(i + 1,m) % m\n    return c\n \ndef gcd(a, b):\n    (x, lastx) = (0, 1)\n    (y, lasty) = (1, 0)\n    while b != 0:\n        q = a // b\n        (a, b) = (b, a % b)\n        (x, lastx) = (lastx - q * x, x)\n        (y, lasty) = (lasty - q * y, y)\n    return (lastx, lasty, a)\n \ndef modinv(a, m):\n    (inv, q, gcd_val) = gcd(a, m)\n    return inv % m\n\n#bisect macro\ndef index(a, x):\n    #Locate the leftmost value exactly equal to x\n    i = bisect_left(a, x)\n    if i != len(a) and a[i] == x:\n        return i\n    return -1\n\n#memoize macro\ndef memoize(f):\n    cache = {}\n    def helper(*args):\n        if args not in cache:\n            cache[(args)] = f(*args)\n        return cache[args]\n    return helper\n\n@memoize\ndef nck(a,b,m):\n    b = min([a-b,b])\n    if (b>a or b<0 or a<0):\n        return 0\n    elif a == 0:\n        return 1\n    return (nck(a-1,b-1,m)+nck(a-1,b,m)) % m\n\nnh=zip([1,0,-1,0],[0,1,0,-1])\n\n###########\n\na,b,c=ii()\n\nx=[a]\nif b not in x:\n    x.append(b)\nif c not in x:\n    x.append(c)\n\nprint len(x)\n"}
{"label": 24, "index": 3112, "code": "print(len(set(map(int,input().split()))))\n"}
{"label": 24, "index": 3113, "code": "n = list(map(int, input().split()))\ni = 3\n\nif n[0] == n[1] :\n    i -= 1\n\nif n[0] == n[2] :\n    i -= 1\n\nelif n[1] == n[2] :\n    i -= 1\n\nprint(i)\n"}
{"label": 24, "index": 3114, "code": "import sys\n\nline = sys.stdin.readline()\nline = line.rstrip().split(\" \")\ndic = {}\nfor i in line:\n    dic[i] = 0\n\nprint (len(dic))"}
{"label": 24, "index": 3115, "code": "xs = map(int, raw_input().split())\nprint len(set(xs))\n"}
{"label": 24, "index": 3116, "code": "i = raw_input().split(' ')\nif i[0] != i[1]:\n  if i[1] != i[2]:\n    re = 3 if i[2] != i[0] else 2\n  else:\n    re = 2\nelse:\n  re = 2 if i[1] != i[2] else 1\n      \nprint re"}
{"label": 24, "index": 3117, "code": "def ini(): return int(input())\ndef inli(): return list(map(int, input().split()))\ndef inf(): return float(input())\ndef inlf(): return list(map(float, input().split()))\ndef inl(): return list(input())\ndef pli(): return \"\".join(list(map(str, ans)))\nx = inli()\nx = list(set(x))\nprint(len(x))"}
{"label": 24, "index": 3118, "code": "a = raw_input().split()\nprint len(set(a))"}
{"label": 24, "index": 3119, "code": "print(len(set(input().split())))"}
{"label": 25, "index": 3120, "code": "n,k = map(int, input().split())\n\nprint(k * (k-1)**(n-1))"}
{"label": 25, "index": 3121, "code": "n,k=map(int,input().split())\nprint(k*pow(k-1,n-1))"}
{"label": 25, "index": 3122, "code": "N, K = map(int, raw_input().split())\nprint K * pow(K-1, N-1)"}
{"label": 25, "index": 3123, "code": "number,color = map(int, input().split())\nanswer= color*(color-1)**(number-1)\nprint(answer)"}
{"label": 25, "index": 3124, "code": "n, k = map(int, input().split())\n\nans = k * ((k-1) ** (n-1))\n\nprint(ans)\n"}
{"label": 25, "index": 3125, "code": "# -*- coding: utf-8 -*-\nn, k = map(int, raw_input().split())\n\nprint k * (k - 1) ** (n - 1)"}
{"label": 25, "index": 3126, "code": "l=map(int, raw_input().split())\n\nans=l[1]*((l[1]-1)**(l[0]-1))\n\nprint ans"}
{"label": 25, "index": 3127, "code": "n, k = map(int, raw_input().split())\nprint(k * (k-1)**(n-1))\n"}
{"label": 25, "index": 3128, "code": "N, K = map(int,input().split())\nprint(K*(K-1)**(N-1))"}
{"label": 25, "index": 3129, "code": "N, K = map(int, raw_input().split())\nprint K * (K - 1) ** (N - 1)"}
{"label": 25, "index": 3130, "code": "list = input().split()\na = (int(list[0])-1)\nb = int(list[1])-1\nprint(pow(b,a)*int(list[1]))"}
{"label": 25, "index": 3131, "code": "input = raw_input()\nl = input.split(\" \")\na = map(int,l)\nN = a[0]\nK = a[1]\n\ncolor = range(0, K)\n\nans = K\nfor i in range(1, N):\n    ans *= K - 1\nprint ans"}
{"label": 25, "index": 3132, "code": "n, k = map(int, input(). split())\n\nprint(k * (k - 1) ** (n - 1))\n\n"}
{"label": 25, "index": 3133, "code": "n, k = map(int, input().split())\nprint(k*(k-1)**(n-1))"}
{"label": 25, "index": 3134, "code": "n, k = [int(x) for x in input().split()]\nprint(k * ((k - 1) ** (n - 1)))\n"}
{"label": 25, "index": 3135, "code": "n, k = map(int, raw_input().split())\nprint k * ((k - 1) ** (n - 1))\n"}
{"label": 25, "index": 3136, "code": "n, k = map(int, input().split())\n\n\nprint(k*(k-1)**(n-1))\n"}
{"label": 25, "index": 3137, "code": "import math\nn,k=map(int,input().split())\nc=k*pow(k-1,n-1)\nprint(c)\n"}
{"label": 25, "index": 3138, "code": "import bisect\nimport sys\nimport math\nimport itertools\nsys.setrecursionlimit(10000)\n\nINF = float('inf')\n\n# input macro\ndef i():\n    return int(raw_input())\ndef ii():\n    return map(int,raw_input().split(\" \"))\ndef s():\n    return raw_input()\ndef ss():\n    return raw_input().split(\" \")\ndef slist():\n    return list(raw_input())\n#\n\ndef join(s):\n    return ''.join(s)\n\n#iterate macro\ndef piter(n,m):\n    return itertools.permutations(n,m)\ndef citer(n,m):\n    return itertools.combinations(n,m)\n\n#modulo macro\ndef modc(a,b,m):\n    c = 1\n    for i in xrange(b):\n        c = c * (a - i) % m\n        c = c * modinv(i + 1,m) % m\n    return c\n \ndef gcd(a, b):\n    (x, lastx) = (0, 1)\n    (y, lasty) = (1, 0)\n    while b != 0:\n        q = a // b\n        (a, b) = (b, a % b)\n        (x, lastx) = (lastx - q * x, x)\n        (y, lasty) = (lasty - q * y, y)\n    return (lastx, lasty, a)\n \ndef modinv(a, m):\n    (inv, q, gcd_val) = gcd(a, m)\n    return inv % m\n\n#bisect macro\ndef index(a, x):\n    #Locate the leftmost value exactly equal to x\n    i = bisect_left(a, x)\n    if i != len(a) and a[i] == x:\n        return i\n    return -1\n\n#memoize macro\ndef memoize(f):\n    cache = {}\n    def helper(*args):\n        if args not in cache:\n            cache[(args)] = f(*args)\n        return cache[args]\n    return helper\n\n@memoize\ndef nck(a,b,m):\n    b = min([a-b,b])\n    if (b>a or b<0 or a<0):\n        return 0\n    elif a == 0:\n        return 1\n    return (nck(a-1,b-1,m)+nck(a-1,b,m)) % m\n\nnh=zip([1,0,-1,0],[0,1,0,-1])\n\n###########\n\nn,k=ii()\n\ndef f(x):\n    if x==0:\n        return 1\n    elif x==1:\n        return k-1\n    elif x%2==0:\n        return f(x/2)**2\n    else:\n        return f(x/2)**2*(k-1)\n\nprint k*f(n-1)\n"}
{"label": 25, "index": 3139, "code": "import sys\n\nn, k = map(int, sys.stdin.readline().split())\nprint k * (k-1) ** (n-1)"}
{"label": 25, "index": 3140, "code": "from random import random\nimport math\nimport re\nimport fractions\n\n# N = input()\nN, K = map(int, raw_input().split(\" \"))\nprint K*(K-1)**(N-1)\n"}
{"label": 25, "index": 3141, "code": "n,k = map(int, input().split())\n \nprint(k * ((k-1) ** (n-1)))"}
{"label": 25, "index": 3142, "code": "n, k = map(int,input().split())\nprint(int(k * (k-1) ** (n - 1)))"}
{"label": 25, "index": 3143, "code": "n, k =map(int, input().split())\nprint(k*((k-1)**(n-1)))"}
{"label": 25, "index": 3144, "code": "n,k = map(int,raw_input().split(\" \"))\nprint k* ((k-1)**(n-1) if n != 1 else 1)"}
{"label": 25, "index": 3145, "code": "n, k = map(int, input().split())\nprint(k * (k - 1) ** (n - 1))\n"}
{"label": 25, "index": 3146, "code": "\nN, K = [int(a) for a in raw_input().strip().split()]\nprint K*(K-1)**(N-1)\n"}
{"label": 25, "index": 3147, "code": "n,k=map(int,input().split())\nprint(k*(k-1)**(n-1))\n"}
{"label": 25, "index": 3148, "code": "N,K = [int(x) for x in raw_input().split()]\n\nprint K * (K-1)**(N-1)"}
{"label": 25, "index": 3149, "code": "N,K=map(int,raw_input().split())\n\nresult=K\nfor i in range(N-1):\n    result=result*(K-1)\n\nprint result\n"}
{"label": 25, "index": 3150, "code": "N, K = map(int,input().split())\n\nprint( K * (K - 1) ** (N-1))"}
{"label": 25, "index": 3151, "code": "n,k=map(int,input().split())\nprint(k*(k-1)**(n-1))"}
{"label": 25, "index": 3152, "code": "n,k = map(int,raw_input().split())\nprint k * (k-1) ** (n-1)\n"}
{"label": 25, "index": 3153, "code": "N, K = map(int, raw_input().split())\nanswer = K * ((K-1)**(N-1))\nprint answer"}
{"label": 25, "index": 3154, "code": "import sys\n\nline = sys.stdin.readline()\nline = line.rstrip().split(\" \")\nn,k = int(line[0]), int(line[1])\n\nret = 1\nret = ret*k\nfor l in range(n-1):\n    ret = ret*(k-1)\n\nprint (ret)\n"}
{"label": 25, "index": 3155, "code": "n,k=map(int,raw_input().split())\n#l=map(int,raw_input().split())\nans=chk=1\nfor i in range(n):\n    if i==0:\n        ans*=k\n    else:\n        ans*=(k-1)\nprint ans"}
{"label": 25, "index": 3156, "code": "n, k=map(int, input().split())\n\nans=k*(k-1)**(n-1)\n\nprint(ans)"}
{"label": 25, "index": 3157, "code": "n = list(map(int, input().split()))\nx = n[1] * ((n[1] - 1) ** (n[0] - 1))\nprint(x)\n"}
{"label": 25, "index": 3158, "code": "#ABC046B\n\nn,k=map(int,raw_input().split())\nprint k*((k-1)**(n-1))\n"}
{"label": 25, "index": 3159, "code": "inp = [int(x) for x in raw_input().strip().split(' ')]\nprint inp[1] * (inp[1] - 1) ** (inp[0] - 1)"}
{"label": 25, "index": 3160, "code": "n,k=map(int,raw_input().split())\nprint(k*(k-1)**(n-1))"}
{"label": 25, "index": 3161, "code": "elems = input().split()\nn, k = int(elems[0]), int(elems[1])\n\nprint(k * (k-1)**(n-1))\n"}
{"label": 25, "index": 3162, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\n\ndef main():\n    n,k = list(map(int, input().split()))\n    r = k\n    for _ in range(1,n):\n        r *= k-1\n    return r\n\n\nprint(main())\n"}
{"label": 25, "index": 3163, "code": "n, k = map(int, input().split())\nm = k\nfor i in range(n-1):\n    m = m * (k - 1)\nprint(m)"}
{"label": 25, "index": 3164, "code": "n,k=map(int,input().split())\nprint(k*(k-1)**(n-1))"}
{"label": 25, "index": 3165, "code": "N,K = map(int, raw_input().split())\nprint K*(K-1)**(N-1)\n"}
{"label": 25, "index": 3166, "code": "[n, k] = map(int, input().split())\nprint(k * pow(k - 1, n - 1))\n"}
{"label": 25, "index": 3167, "code": "N,K = raw_input().split()\nN=int(N)\nK=int(K)\nif N==1:\n    print K\nelse:\n    A = K*pow(K-1,N-1)\n    print A\n"}
{"label": 25, "index": 3168, "code": "N, K = map(int, input().split())\nans = 1\nflg = True\nfor i in range(N):\n    if flg:\n        ans *= K\n    else:\n        ans *= (K - 1)\n    flg = False\nprint(ans)\n"}
{"label": 25, "index": 3169, "code": "n,k = [int(x) for x in input().split(\" \")]\nres = k\nfor i in range(1,n):\n    res *=(k - 1)\nprint(res)\n"}
{"label": 25, "index": 3170, "code": "N, K = map(int, input().split())\nresult = K\nfor i in range(N - 1):\n    result *= (K - 1)\n\nprint(result)\n"}
{"label": 25, "index": 3171, "code": "n, k = map(int, input().split())\nprint(k*(k-1)**(n-1))"}
{"label": 25, "index": 3172, "code": "n, k = map(int, input().split())\n\nans = k\nfor _ in range(n-1):\n    ans *= (k-1)\n\nprint(ans)"}
{"label": 25, "index": 3173, "code": "from sys import stdin\nn,k = map(int,stdin.readline().split())\nprint k * ((k-1)**(n-1))"}
{"label": 25, "index": 3174, "code": "N, K = map(int, input().split())\nprint( K * (( K - 1 ) **( N - 1 )))"}
{"label": 25, "index": 3175, "code": "N, K = [int(i) for i in input().split()]\n\nans = K\n\nfor i in range(N-1):\n    ans *= K - 1\n\nprint(ans)\n"}
{"label": 25, "index": 3176, "code": "n, k = map(int, input().split())\nways = k * ((k - 1) ** (n - 1))\nprint(ways)\n"}
{"label": 25, "index": 3177, "code": "d=[int(i) for i in input().split()]\n\nprint(d[1]*((d[1]-1)**(d[0]-1)))"}
{"label": 25, "index": 3178, "code": "i = map(int, raw_input().split())\nprint pow(i[1]-1, i[0]-1)*i[1]"}
{"label": 25, "index": 3179, "code": "l = raw_input().split()\nN = int(l[0])\nK = int(l[1])\n\nans = 1\nfor i in range(N):\n    if i==0:\n        ans*=K\n    else:\n        ans*=(K-1)\nprint ans"}
{"label": 25, "index": 3180, "code": "N, K = list(map(int, input().split()))\n\nprint(K*(K-1)**(N-1))"}
{"label": 25, "index": 3181, "code": "n, m = map(int, input().split())\n\nans = m*((m-1)**(n-1))\n\nprint(ans)"}
{"label": 25, "index": 3182, "code": "n, k = map(int, input().split())\nprint(k * (k - 1) ** (n - 1))\n"}
{"label": 25, "index": 3183, "code": "N, K = map(int, raw_input().split())\nans = K\nfor i in range(1, N):\n    ans *= K-1\nprint ans"}
{"label": 25, "index": 3184, "code": "N, K = map(int, raw_input().split())\n\nprint K * ((K - 1) ** (N - 1))"}
{"label": 25, "index": 3185, "code": "N, K = map(int, input().split())\nans = K*(K-1)**(N-1)\nprint(ans)\n"}
{"label": 25, "index": 3186, "code": "n, k = map(int, input().split())\nprint(k * (k-1)**(n-1))"}
{"label": 25, "index": 3187, "code": "a = list(map(int, input().split()))\nprint(a[1] * ((a[1] - 1)**(a[0] - 1)))"}
{"label": 25, "index": 3188, "code": "a = raw_input()\nn,k = [int(i) for i in a.split()]\n\nprint k*pow(k-1,n-1)"}
{"label": 25, "index": 3189, "code": "numbers = input().split()\n\nN = int(numbers[0])\nK = int(numbers[1])\n\nprint(K*(K-1)**(N-1))"}
{"label": 25, "index": 3190, "code": "\nn, k = list(map(lambda x: int(x), input().split()))\n\nans = k * (k-1) ** (n-1)\n\nprint(ans)\n"}
{"label": 25, "index": 3191, "code": "# -*- coding: utf-8 -*-\nN, K = map(int, input().split())\n\nans = K*(K-1)**(N-1)\nprint(ans)\n"}
{"label": 25, "index": 3192, "code": "#coding=UTF-8\n\nmojir=input()\nhyo=mojir.split(' ')\n\nN=int(hyo[0])\nK=int(hyo[1])\n\n#\u77ed\u7d61\u7684\u306b\u3084\u308a\u307e\u3059\nans=1\nfor idx in range(0,N,1):\n    iro = K-1 if idx != 0 else K\n    ans=ans*iro\n\nprint(ans)\n"}
{"label": 25, "index": 3193, "code": "n,k=map(int,input().split())\nprint(k*(k-1)**(n-1))\n"}
{"label": 25, "index": 3194, "code": "n,k=map(int,input().split())\nprint(k*(k-1)**(n-1))"}
{"label": 25, "index": 3195, "code": "n, k = map(int, input().split())\ni = k\nn -= 1\nk -= 1\nwhile n > 0:\n    i = i * k\n    n -= 1\nprint(str(i))\n"}
{"label": 25, "index": 3196, "code": "N, K = map(int, input().split())\n\nprint( K * ((K-1) ** (N-1)) )\n"}
{"label": 25, "index": 3197, "code": "N, K = list(map(int, input().split()))\n\nans=K\nfor i in range(1,N):\n    ans*=(K-1)\n    \nprint(ans)"}
{"label": 25, "index": 3198, "code": "n, k =  map(int, raw_input().split())\nprint k * (k-1)**(n-1),"}
{"label": 25, "index": 3199, "code": "#coding:utf-8\nN,K=list(map(int,input().split()))\nprint(K*(K-1)**(N-1))\n"}
{"label": 25, "index": 3200, "code": "n, k = map(int, input().split())\nprint(k*(k-1)**(n-1))"}
{"label": 25, "index": 3201, "code": "# -*- coding:utf-8 -*-\nN,K = map(int,input().split())\nans = 0\nfor tmp in range (N):\n    if tmp == 0:\n        ans += K\n    else:\n        ans *= K - 1\nprint(ans)"}
{"label": 25, "index": 3202, "code": "# -*- coding: utf-8 -*-\n\n\nn, k = map(int, input().split())\n\n\ndef main(n, k):\n    if n == 1:\n        return n * k\n    else:\n        i = 1\n        for _ in range(n):\n            if i == 1:\n                i *= k\n            else:\n                i *= (k - 1)\n        return i\n\nprint(main(n, k))\n# print(main(10, 8))\n"}
{"label": 25, "index": 3203, "code": "n,k = map(int,input().split())\nprint(k*(k-1)**(n-1))"}
{"label": 25, "index": 3204, "code": "n,k=map(int,input().split());print(k*(k-1)**(n-1))"}
{"label": 25, "index": 3205, "code": "import math\nN, K = [int(n) for n in input().split()]\n\nres = 1\nres *= K\nres *= math.pow(K-1, N-1)\nprint(int(res))"}
{"label": 25, "index": 3206, "code": "n, k = map(int, raw_input().split())\nans =  k * ((k-1)**(n-1))\nprint(ans)\n"}
{"label": 25, "index": 3207, "code": "line = input().split()\nl = list(map(int, line))\nn = l[0]\nk = l[1]\n\nans = k * pow(k-1, n-1)\nprint (ans)"}
{"label": 25, "index": 3208, "code": "nk = map(int,raw_input().split())\nans = nk[1]\nfor i in range(0, nk[0]):\n    if i == 0:\n        pass\n    else:\n        ans *= (nk[1]-1)\n\nprint ans"}
{"label": 25, "index": 3209, "code": "n,k = map(int,input().split())\nprint(k * ((k - 1)) ** (n -1))"}
{"label": 25, "index": 3210, "code": "N,K = [int(i) for i in input().split()]\nprint((K-1)**(N-1)*K)"}
{"label": 25, "index": 3211, "code": "n,k = map(int, input().split())\nprint((k-1)**(n-1)*k)"}
{"label": 25, "index": 3212, "code": "from collections import defaultdict\n\n\ndef main():\n    N, K = map(int, input().split())\n    ans = K\n    for _ in range(N - 1):\n        ans *= (K - 1)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 25, "index": 3213, "code": "n, k = map(int, input().split())\ncase = 1\nfor i in range(n):\n    if i == 0:\n        case *= k\n    else:\n        case *= k-1\n    \nprint(case)\n    "}
{"label": 25, "index": 3214, "code": "data = map(int, raw_input().split(\" \"))\nball_num = data[0]\ncolor_num = data[1]\n\nres = color_num\n\nfor _ in range(ball_num-1):\n\tres *= (color_num-1)\n\nprint res"}
{"label": 25, "index": 3215, "code": "n, k = map(int, input().split())\nprint(k*(k-1)**(n-1))"}
{"label": 25, "index": 3216, "code": "\nN,K =  map(int,raw_input().split())\n\nvalue = K\nfor i in range(1,N):\n    value = value*(K-1)\n\nprint value\n    \n"}
{"label": 25, "index": 3217, "code": "# B\nN, K = [int(i) for i in input().split()]\nprint(K*(K-1)**(N-1))"}
{"label": 25, "index": 3218, "code": "def ri(): return int(input())\ndef rli(): return list(map(int, input().split()))\ndef ris(): return list(input())\ndef pli(): return \"\".join(list(map(str, ans)))\n\n\nN, K = rli()\n\nprint(K*pow(K-1, N-1))"}
{"label": 25, "index": 3219, "code": "N,K = map(int, raw_input().split())\nc = K\nfor i in range(N-1):\n    c *= (K-1)\nprint c\n"}
{"label": 25, "index": 3220, "code": "N, K = map(int, raw_input().split())\n\nans = K\nfor i in xrange(1, N):\n    ans *= K-1\n\nprint ans"}
{"label": 25, "index": 3221, "code": "N, K = map(int, input().split())\nans = K*(K-1)**(N-1)\nprint(ans)"}
{"label": 25, "index": 3222, "code": "i,j = map(int, raw_input().split())\nprint (~-j)**~-i*j"}
{"label": 25, "index": 3223, "code": "n,k=map(int,input().split())\nif n==1: print(k)\nelse: print((k-1)**(n-1)*k)"}
{"label": 25, "index": 3224, "code": "def main():\n    n, k = map(int, input().split())\n    ans = k\n    for i in range(n - 1):\n        ans *= (k - 1)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 25, "index": 3225, "code": "# -*- coding: utf-8 -*-\nimport sys,copy,math,heapq,itertools as it,fractions,re,bisect,collections as coll\n\nN, K = map(int, raw_input().split())\nprint K*(K-1)**(N-1)\n"}
{"label": 25, "index": 3226, "code": "# -*- coding: utf-8 -*-\n\nn, k = map(int, raw_input().split())\n\nprint k * (k-1) ** (n-1)\n"}
{"label": 25, "index": 3227, "code": "N=input().split()\nprint(int(N[1])*(int(N[1])-1)**(int(N[0])-1))"}
{"label": 25, "index": 3228, "code": "n, k = map(int, input().split())\nans = k\nfor i in range(n - 1):\n    ans *= (k - 1)\nprint(ans)"}
{"label": 25, "index": 3229, "code": "N, K = map(int, input().split())\nprint(K * (K -1) ** (N -1) )"}
{"label": 25, "index": 3230, "code": "N, K = map(int, raw_input().split())\n# N, K = 10, 8\n \nprint K * (K-1) ** (N-1)"}
{"label": 25, "index": 3231, "code": "N,K=map(int,input().split())\nprint(K*(K-1)**(N-1))"}
{"label": 25, "index": 3232, "code": "result = 0\nN, K = map(int, input().split())\nif N == 1:\n    result = K\nelse:\n    result = K\n    for i in range(N-1):\n        result = result * (K - 1)\nprint(result)"}
{"label": 25, "index": 3233, "code": "if __name__ == '__main__':\n    n, k = [int(x) for x in input().split()]\n    ans = k * pow((k-1),n-1)\n    print(ans)\n"}
{"label": 25, "index": 3234, "code": "nk= input().split(' ')\nn = int(nk[0])\nk = int(nk[1])\n\nprint(k*(k-1)**(n-1))"}
{"label": 25, "index": 3235, "code": "N, K = input().split() \nN = int(N)             \nK = int(K)             \nans = 0                \nans = K*((K-1)**(N-1)) \nprint(ans)             \n"}
{"label": 25, "index": 3236, "code": "try:\n    nk = map(int, raw_input().split(\" \"))\n    N = nk[0]\n    K = nk[1]\n    print K*(K-1)**(N-1)\nexcept EOFError:\n    pass\n"}
{"label": 25, "index": 3237, "code": "N, K = [int(i) for i in input().split()]\nprint(K*((K-1)**(N-1)))"}
{"label": 25, "index": 3238, "code": "n, k = list(map(int, input().split()))\nprint(k * pow(k - 1, n - 1))"}
{"label": 25, "index": 3239, "code": "N,K = map(int,input().split(' '))\nprint((K-1)**(N-1)*K)"}
{"label": 25, "index": 3240, "code": "# -*- coding: utf-8 -*-\n\nnums = list(map(int, input().split()))\nN = nums[0]\nK = nums[1]\n\na = K * ((K-1) ** (N-1))\nprint(a)"}
{"label": 25, "index": 3241, "code": "n,k = map(int, raw_input().split())\nprint k * ((k-1) ** (n-1))\n"}
{"label": 25, "index": 3242, "code": "N,K=map(int,input().split())\nprint(K*(K-1)**(N-1))"}
{"label": 25, "index": 3243, "code": "n, k = map(int, input().split())\nprint(k * (k - 1) ** (n - 1))\n"}
{"label": 25, "index": 3244, "code": "l = input().split()\nN = int(l[0])\nK = int(l[1])\nprint(str(K*((K-1)**(N-1))))"}
{"label": 25, "index": 3245, "code": "s = input().split()\nN = int(s[0])\nK = int(s[1])\nprint(K * (K-1)**(N-1))"}
{"label": 25, "index": 3246, "code": "import sys\n\nn, k = map(int, raw_input().split())\nans = k # first                                                                                                 \nif n == 1 and k == 1:\n    print ans\n    sys.exit()\nfor i in range(n-1):\n    ans *= k-1\nprint ans\n"}
{"label": 25, "index": 3247, "code": "NK=input().split(\" \")\nN=int(NK[0])\nK=int(NK[1])\nprint(K*(K-1)**(N-1))\n"}
{"label": 25, "index": 3248, "code": "import re\nimport doctest\n\n\nclass IO_for_Contest(object):\n    @staticmethod\n    def my_input():\n        # return raw_input()\n        return input()\n\n    @staticmethod\n    def read_from_input():\n        return IO_for_Contest.read_n_int(2)\n\n    @staticmethod\n    def read_line():\n        return IO_for_Contest.my_input().strip()\n\n    @staticmethod\n    def read_int():\n        return int(IO_for_Contest.my_input().strip())\n\n    @staticmethod\n    def read_n_int(n):\n        return list(map(\n                    int,\n                    re.split('\\s+', IO_for_Contest.my_input().strip())))[: n]\n\n\ndef solve():\n    buf = IO_for_Contest.read_from_input()\n    n = buf[0]\n    k = buf[1]\n    print(k * ((k - 1) ** (n - 1)))\n\n\nif __name__ == '__main__':\n    # doctest.testmod()\n    solve()"}
{"label": 25, "index": 3249, "code": "n, k = map(int, input().split())\nprint((k-1)**(n-1)*k)\n"}
{"label": 26, "index": 3250, "code": "# -*- coding: utf-8 -*-\ninput_lines = raw_input()\n\nlist_inputs = map(int,input_lines.split())\n\nif max(list_inputs) == (sum(list_inputs) - max(list_inputs)):\n  print \"Yes\"\nelse:\n  print \"No\""}
{"label": 26, "index": 3251, "code": "a,b,c = map(int,input().split())\n \nif a>b:\n    temp = a\n    a = b\n    b = temp\nif b>c:\n    temp = b\n    b = c\n    c = temp\nif (a+b)==c:\n    print(\"Yes\")\n\nelse:\n    print(\"No\")\n"}
{"label": 26, "index": 3252, "code": "# -*- coding: utf-8 -*-\n\nA = list(map(int, input().split()))\nA.sort()\n\nif A[0] + A[1] == A[2]:\n\tprint('Yes')\nelse:\n\tprint('No')\n"}
{"label": 26, "index": 3253, "code": "a, b, c = input().split()        \na, b, c = int(a), int(b), int(c) \nfl = False                       \nab = a+b                         \nac = a+c                         \nbc = b+c                         \nwhile(1):                        \n    if ab == c:                  \n        fl = True                \n        break                    \n    if bc == a:                  \n        fl = True                \n        break                    \n    if ac == b:                  \n        fl = True                \n        break                    \n    break                        \nif fl:                           \n    print('Yes')                 \nelse:                            \n    print('No')                  \n                                 \n"}
{"label": 26, "index": 3254, "code": "a=input().split(\" \")\na=[int(x) for x in a]\na=sorted(a)\nif a[0]+a[1]==a[2]:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 26, "index": 3255, "code": "a = list(map(int, input().split()))\ns = sum(a)\n\nfor x in a:\n    if x * 2 == s:\n        print('Yes')\n        exit()\n\nprint('No')\n"}
{"label": 26, "index": 3256, "code": "def main():\n    c = list(sorted((map(int, input().split()))))\n    if c[0] + c[1] == c[2]:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 26, "index": 3257, "code": "a, b, c = map(int, input().split())\nif (a == b + c):\n    print('Yes')\nelif (a + b == c):\n    print('Yes')\nelif (a + c == b):\n    print('Yes')\nelse:\n    print('No')\n"}
{"label": 26, "index": 3258, "code": "def canDiv(a,b,c):\n    s = (a+b+c) \n    if a * 2 == s:\n        return True\n    if b * 2 == s:\n        return True\n    if c * 2 == s:\n        return True\n    return False\n\ndef main():\n    a,b,c = map(int,raw_input().split())\n    res = canDiv(a,b,c)\n    if res == True:\n        print \"Yes\"\n    else:\n        print \"No\"\n\nif __name__ == '__main__':\n    main()"}
{"label": 26, "index": 3259, "code": "a, b, c = map(int, input().split())\n\nif a + b == c or a == b + c or b == c + a:\n    print('Yes')\nelse:\n    print('No')\n"}
{"label": 26, "index": 3260, "code": "candies = list(map(int, input().split()))\nprint('Yes' if max(candies) * 2 == sum(candies) else 'No')\n"}
{"label": 26, "index": 3261, "code": "a, b, c = map(int, raw_input().split())\n\nprint 'Yes' if a + b == c or b + c == a or a + c == b else 'No'\n"}
{"label": 26, "index": 3262, "code": "a,b,c = sorted(map(int, raw_input().split()))\nprint 'Yes' if a+b==c else 'No'"}
{"label": 26, "index": 3263, "code": "a,b,c = list(map(int,input().split()))\n\n# print(a,b,c)\n\nif a+b == c or b+c == a or c + a == b :\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 26, "index": 3264, "code": "# coding: utf-8\n\na, b, c = map(int, input().split())\nprint( 'Yes' if (a+b)==c or (a+c)==b or (c+b)==a else 'No')"}
{"label": 26, "index": 3265, "code": "a, b, c = [int(i) for i in input().split()]\nif(max([a,b,c])*2 == sum([a,b,c])):\n print(\"Yes\")\nelse:\n print(\"No\")"}
{"label": 26, "index": 3266, "code": "l = list(map(int, input().split()))\n\nif max(l[0], l[1], l[2]) == (l[0] + l[1] + l[2]) / 2:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 26, "index": 3267, "code": "a=sorted([int(i) for i in input().split()])\nif a[0]+a[1]==a[2]:print(\"Yes\")\nelse:print(\"No\")"}
{"label": 26, "index": 3268, "code": "\na,b,c=map(int, input().split())\n\nif a+b==c or b+c==a or c+a==b: print(\"Yes\")\nelse: print(\"No\")"}
{"label": 26, "index": 3269, "code": "a, b, c = list(map(int, input().split()))\n\nif a+b==c or a+c==b or b+c==a:\n    print('Yes')\nelse:\n    print('No')"}
{"label": 26, "index": 3270, "code": "a = (input().split())\n\nfor i in range(len(a)):\n\ta[i]=int(a[i])\na.sort()\nif a[0]+a[1]==a[2]:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")"}
{"label": 26, "index": 3271, "code": "a,b,c = map(int, input().split())\nif a==(b+c) or b == (a+c) or c ==(a+b):\n print(\"Yes\")\n exit()\nprint(\"No\")"}
{"label": 26, "index": 3272, "code": "a,b,c = map(int,input().split())\ntotal = sum([a,b,c])\none = max([a,b,c])\nother = total-one\nif one==other:\n    print('Yes')\nelse:\n    print('No')\n"}
{"label": 26, "index": 3273, "code": "# coding: utf-8\n\"\"\"Fighting over Candies\n\n@author: hijiri.n\n@modified: 11-19-2016\n\n\"\"\"\n\n\ndef solve():\n\n    candies = list(map(int, input().split()))\n    ach = sum(candies) / 2\n\n    for c in candies:\n        if c == ach:\n            return \"Yes\"\n    return \"No\"\n \n\nprint(solve())\n"}
{"label": 26, "index": 3274, "code": "# coding: utf-8\n\na, b, c = map(int, raw_input().split())\n\nif 2 * max(a, b, c) == sum([a, b, c]):\n    print \"Yes\"\n\nelse:\n    print \"No\""}
{"label": 26, "index": 3275, "code": "def main():\n    a, b, c = map(int, input().split())\n    l = list(sorted([a, b, c]))\n    if l[0] + l[1] == l[2]:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 26, "index": 3276, "code": "candy = list(map(int, input().split()))\ncandy.sort()\nif candy[0] + candy[1] == candy[2]:\n    print('Yes')\nelse:\n    print('No')"}
{"label": 26, "index": 3277, "code": "def main():\n    c = list(sorted((map(int, input().split()))))\n    if c[0] + c[1] == c[2]:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\nif __name__ == '__main__':\n    main()\n\n\n"}
{"label": 26, "index": 3278, "code": "candies = [int(e) for e in input().split()]\nlst = sorted(candies)\n\n\ndef main(lst):\n    max = lst[2]\n\n    if max == lst[0] + lst[1]:\n        return 'Yes'\n    else:\n        return 'No'\n\n\nif __name__ == '__main__':\n    ans = main(lst)\n    print(ans)\n"}
{"label": 26, "index": 3279, "code": "a, b, c = map(int,input().split())\nif a + b == c or b + c == a or c + a == b:\n    print('Yes')\nelse:\n    print('No')"}
{"label": 26, "index": 3280, "code": "l = list(map(int, input().split()))\n\nif l[0] == l[1] + l[2]:\n    print(\"Yes\")\nelif l[1] == l[0] + l[2]:\n    print(\"Yes\")\nelif l[2] == l[0] + l[1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 26, "index": 3281, "code": "if __name__ == '__main__':\n    a, b, c = [int(x) for x in input().split()]\n    combos = [a+b, a+c, b+c]\n    ans = False\n    for num in combos:\n        if num == a or num == b or num == c:\n            ans = True\n    if ans:\n        print('Yes')\n    else:\n        print('No')"}
{"label": 26, "index": 3282, "code": "import sys\nline = sys.stdin.readline()\nline = line.split(\" \")\ninp = []\nfor i in line:\n    inp.append(int(i))\n\na,b,c=inp[0],inp[1],inp[2]\n\nif (a==b+c):\n    print (\"Yes\")\nelif (b==a+c):\n    print (\"Yes\")\nelif (c==a+b):\n    print (\"Yes\")\nelse:\n    print (\"No\")\n"}
{"label": 26, "index": 3283, "code": "a=list(map(int,input().split()))\nprint(['No','Yes'][max(a)==sum(a)-max(a)])"}
{"label": 26, "index": 3284, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\ndef LI(): return list(map(int, input().split()))\ndef II(): return int(input())\ndef S(): return input()\n\n\ndef main():\n    a = LI()\n    if sum(a)  == max(a)*2:\n        return 'Yes'\n    return 'No'\n\n\nprint(main())\n"}
{"label": 26, "index": 3285, "code": "#!/usr/bin/env python\n# coding: utf-8\n\ndef main():\n    a, b, c = [int(i) for i in raw_input().split()]\n    if a + b == c:\n        print 'Yes'\n    elif b + c == a:\n        print 'Yes'\n    elif c + a == b:\n        print 'Yes'\n    else:\n        print 'No'\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 26, "index": 3286, "code": "a,b,c = [int(i) for i in input().split()]\nif a is b+c or b is a+c or c is a + b:\n    print('Yes')\nelse:\n    print('No')"}
{"label": 26, "index": 3287, "code": "a,b,c =[int(x) for x in raw_input().split(\" \")]\n\nif a+b==c or a+c==b or b+c==a:\n\tprint \"Yes\"\n\nelse:\n\tprint \"No\"\n"}
{"label": 26, "index": 3288, "code": "a,b,c = sorted(map(int,input().split()))\nif a+b == c:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 26, "index": 3289, "code": "a, b, c = map(int, input().split())\n\nif(a == b+c or b == a+c or c == a+b):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 26, "index": 3290, "code": "a,b,c = map(int, raw_input().split())\nif a+b == c or b+c == a or c+a == b:\n    print 'Yes'\nelse:\n    print 'No'\n"}
{"label": 26, "index": 3291, "code": "a, b, c = map(int, input().split(' '))\nprint('Yes' if a==b+c or b==a+c or c==a+b else 'No')\n"}
{"label": 26, "index": 3292, "code": "n = input().split()\nn = [int(x) for x in n]\nif n[0] + n[1] == n[2]:\n    print ('Yes')\nelif n[0] + n[2] == n[1]:\n    print ('Yes')\nelif n[1] + n[2] == n[0]:\n    print ('Yes')\nelse:\n    print ('No')"}
{"label": 26, "index": 3293, "code": "a = map(int,raw_input().split())\n#print a\na.sort(reverse=True)\n#print a\nif a[0] == a[1] + a[2]:\n        print \"Yes\"\nelse:\n        print \"No\""}
{"label": 26, "index": 3294, "code": "data = list(map(lambda x:int(x),input().split()))\ndata.sort()\ndata.reverse()\n\nif data[0] == data[1] + data[2]:\n        print('Yes')\nelse :\n        print('No')"}
{"label": 26, "index": 3295, "code": "a,b,c = map(int,input().split())\n\nif a+b == c or b+c == a or c+a == b:\n\tprint('Yes')\nelse:\n\tprint('No')"}
{"label": 26, "index": 3296, "code": "x,y,z = map(int, raw_input().split())\nif x+y==z or x+z == y or y+z == x:\n    print 'Yes'\nelse:\n    print 'No'\n"}
{"label": 26, "index": 3297, "code": "n=list(int(i) for i in input().split())\nn.sort()\nif n[0]+n[1]==n[2]:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 26, "index": 3298, "code": "a,b,c=map(int,input().split())\ns=sum([a,b,c])\nif s-a==a or s-b==b or s-c==c:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 26, "index": 3299, "code": "x = list(map(int,input().split()))\nx.sort()\n\nans=\"No\"\nif x[0]+x[1] == x[2]:\n    ans=\"Yes\"\nprint(ans)\n"}
{"label": 26, "index": 3300, "code": "a, b, c = map(int, raw_input().split())\nprint \"Yes\" if a == b + c or b == c + a or c == a + b else \"No\"\n"}
{"label": 26, "index": 3301, "code": "a, b, c = map(int, raw_input().split())\n\nif max(a, b, c) * 2 == a+b+c:\n    print \"Yes\"\n\nelse:\n    print \"No\""}
{"label": 26, "index": 3302, "code": "a,b,c = [int(i) for i in input().split()]\n\nab = a + b\nbc = b + c\nac = a + c\n\nif(ab == c or bc == a or ac == b ):\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 26, "index": 3303, "code": "a, b, c = map(int, input().split())\nnum_list = [a, b, c]\n\nnum_list.sort()\n\nif num_list[0] + num_list[1] == num_list[2]:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 26, "index": 3304, "code": "a,b,c = map(int, input().split())\nif max(a,b,c)*2 == sum((a,b,c)):\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 26, "index": 3305, "code": "a,b,c=map(int,input().split());print([\"No\",\"Yes\"][a==b+c or b==c+a or c ==a+b])"}
{"label": 26, "index": 3306, "code": "def read():\n\treturn [int(i) for i in input().split(' ')]\nL = read()\nif(L[0] + L[1] == L[2] or L[0] + L[2] == L[1] or L[1] + L[2] == L[0]):\n\tprint('Yes')\nelse:\n\tprint('No')\n"}
{"label": 26, "index": 3307, "code": "line = input()\na,b,c = [int(num) for num in line.split(' ')]\nif a + b == c:\n    print('Yes')\nelif b + c == a:\n    print('Yes')\nelif a + c == b:\n    print('Yes')\nelse:\n    print('No')"}
{"label": 26, "index": 3308, "code": "a, b, c = map(int, input().split())\n\nif a + b + c - max(a,b,c) == max(a,b,c):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 26, "index": 3309, "code": "a, b, c = map(int, raw_input().split())\nif a == b+c or a+b == c or a+c == b:\n    print \"Yes\"\nelse:\n    print \"No\"\n"}
{"label": 26, "index": 3310, "code": "a,b,c=map(int,input().split())\nprint(\"Yes\" if a+b+c == 2*max((a,b,c)) else \"No\")"}
{"label": 26, "index": 3311, "code": "# -*- coding: utf-8 -*-\n# problem A\n\nl = list(map(int, input().split()))\nl = sorted(l)\n\nif l[0] + l[1] == l[2]:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 26, "index": 3312, "code": "a, b, c = map(int,input().split())\n\nif a == b + c:\n    print(\"Yes\")\nelif b == a + c:\n    print(\"Yes\")\nelif c == a + b:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 26, "index": 3313, "code": "a,b,c = map(int,input().split())\n\nif (a+b==c) or (a+c==b) or (b+c==a):\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 26, "index": 3314, "code": "a, b, c = [int(i) for i in input().split()]\n\nif a==b+c:\n    print(\"Yes\")\nelif b==a+c:\n    print(\"Yes\")\nelif c==a+b:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 26, "index": 3315, "code": "can = list(map(int, input().split()))\ncan.sort()\nif can[0] + can[1] == can[2]:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 26, "index": 3316, "code": "a, b, c = map(int, input().split())\nif a + b == c or b + c == a or c + a == b:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 26, "index": 3317, "code": "a,b,c=map(int,input().split())\nprint(['No','Yes'][a+b==c or b+c==a or c+a==b])"}
{"label": 26, "index": 3318, "code": "def ri(): return int(input())\ndef rli(): return list(map(int, input().split()))\ndef ris(): return list(input())\ndef pli(): return \"\".join(list(map(str, ans)))\n\na = rli()\nif(max(a) == sum(a)/2):\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 26, "index": 3319, "code": "def Main():\n    A = list(map(int,input().split()))\n    A.sort()\n\n    if A[0] + A[1] == A[2]:\n        print('Yes')\n    else:\n        print('No')\n\nif __name__ == '__main__':\n    Main()\n"}
{"label": 26, "index": 3320, "code": "a,b,c=map(int,raw_input().split())\nprint \"Yes\" if a==b+c or b==a+c or c==a+b else \"No\""}
{"label": 26, "index": 3321, "code": "a, b, c = list(map(int, input().split()))\nif a + b == c or b + c == a or c + a == b:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")"}
{"label": 26, "index": 3322, "code": "a, b, c = list(map(int, input().split()))\n\nif (a + b == c) or (a == b + c) or (a + c == b):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n\n"}
{"label": 26, "index": 3323, "code": "s=map(int,raw_input().split());print\"Yes\"*(sum(s)==2*max(s))or\"No\""}
{"label": 26, "index": 3324, "code": "l=map(int,raw_input().split())\nl.sort()\nprint 'Yes' if l[2]==l[1]+l[0] else 'No'"}
{"label": 26, "index": 3325, "code": "# import time\n\n# starttime=time.clock()\n\nA,B,C =input().split()\na=int(A)\nb=int(B)\nc=int(C)\n# print(a+c)\n \nif a>b:\n    temp = a\n    a = b\n    b = temp\nif b>c:\n    temp = b\n    b = c\n    c = temp\nif (a+b)==c:\n    print(\"Yes\")\n#     endtime = time.clock()\n#     print(endtime-starttime)\nelse:\n    print(\"No\")\n#     endtime = time.clock()\n#     print(endtime-starttime)\n#      \n"}
{"label": 26, "index": 3326, "code": "[a, b, c] = sorted([int(i) for i in raw_input().split(' ')])\n\nif a + b == c:\n    print('Yes')\nelse:\n    print('No')\n"}
{"label": 26, "index": 3327, "code": "a,b,c=map(int,input().split())\ntotal= a+b+c\nif total/2 == a or total/2 == b or total/2 == c :\n    print('Yes')\nelse:\n    print('No')"}
{"label": 26, "index": 3328, "code": "a, b, c = map(int, input().split())\n\nif a+b == c or a+c == b or b+c == a:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 26, "index": 3329, "code": "num = map(int, raw_input().split())\nnum.sort()\nif num[0] + num[1] == num[2]:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")"}
{"label": 26, "index": 3330, "code": "a=[]\na=map(int, raw_input().split())\na.sort()\nif(a[0]+a[1]==a[2]):\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 26, "index": 3331, "code": "# -*- coding:utf-8 -*-\nabc = list(map(int,input().split()))\nindex = abc.index(max(abc))\nfactor = 0\nfor tmp in range (0, len(abc)):\n    if tmp != index:\n        factor += abc[tmp]\n    else:\n        continue\n\nif abc[index] == factor:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 26, "index": 3332, "code": "a, b, c = map(int, raw_input().split())\nmax1 = max([a, b, c])\nmin2 = a + b + c - max1\nif min2 == max1:\n    print \"Yes\"\nelse:\n    print \"No\"\n"}
{"label": 26, "index": 3333, "code": "a,b,c=map(int,input().split())\nsm=a+b+c\nhalf=sm//2\nif sm%2==1:\n    print(\"No\")\nelse:\n    if a==half or b==half or c==half or (a+b)==half or (b+c)==half or (c+a)==half:\n        print(\"Yes\")\n    else:\n        print(\"No\")"}
{"label": 26, "index": 3334, "code": "nums = list(map(int, input().split()))\nif nums[0] + nums[1] == nums[2]:\n    print('Yes')\nelif nums[1] + nums[2] == nums[0]:\n    print('Yes')\nelif nums[2] + nums[0] == nums[1]:\n    print('Yes')\nelse:\n    print('No')\n"}
{"label": 26, "index": 3335, "code": "a, b, c = map(int, input().split())\nprint(\"Yes\" if a+b==c or b+c==a or c+a==b else \"No\")"}
{"label": 26, "index": 3336, "code": "a, b, c = map(int, input().split())\nprint('Yes' if a + b == c or a + c == b or b + c == a else 'No')\n"}
{"label": 26, "index": 3337, "code": "seq = [int(x) for x in input().split()]\nseq.sort()\n\na, b, c = seq\n\nif a + b == c:\n    print('Yes')\n    \nelse:\n    print('No')\n"}
{"label": 26, "index": 3338, "code": "t = list(map(int, input().split()))\n\nt.sort()\n\nif t[0]+t[1] == t[2]:\n\tprint('Yes')\nelse:\n\tprint('No')"}
{"label": 26, "index": 3339, "code": "a,b,c =map(int,input().split())\n\nif a+b==c:\n    print(\"Yes\")\n\nelif a+c==b:\n    print(\"Yes\")\n\nelif b+c==a:\n     print(\"Yes\")\n\nelse:\n    print(\"No\")"}
{"label": 26, "index": 3340, "code": "a, b, c = map(int, raw_input().split())\nif a==b+c or b==a+c or c==a+b:\n    print \"Yes\"\nelse:\n    print \"No\""}
{"label": 26, "index": 3341, "code": "l = list(map(int,list(input().split())))\na,b,c, = l[0],l[1],l[2]\n\nif c==a+b or a==b+c or b==c+a:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 26, "index": 3342, "code": "a = list(map(int, input().split()))\n\nif max(a) == sum(a) - max(a):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 26, "index": 3343, "code": "import sys\n\na=map(int,raw_input().split())\n\nif a[0]+a[1] == a[2] or a[1]+a[2] == a[0] or a[2]+a[0] == a[1]:\n\tprint \"Yes\"\nelse:\n\tprint \"No\""}
{"label": 26, "index": 3344, "code": "A = sorted([int(n) for n in input().split()])\nif A[0]+A[1] == A[2]:\n  print(\"Yes\")\nelse:\n  print(\"No\")"}
{"label": 26, "index": 3345, "code": "l = map(int,raw_input().strip().split())\nl.sort()\nif l[0] + l[1] == l[2]:\n\tprint(\"Yes\")\n\texit()\nprint(\"No\")"}
{"label": 26, "index": 3346, "code": "user = list(map(int, input().split()))\nmax_index = user.index(max(user))\nmax_num = user[max_index]\nuser.pop(max_index)\n\nif max_num == user[0] + user[1]:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")"}
{"label": 26, "index": 3347, "code": "l=sorted([int(i) for i in input().split()])\nprint(\"Yes\" if l[0]+l[1]==l[2] else \"No\")"}
{"label": 26, "index": 3348, "code": "candy = [int(i) for i in input().split()]\ncandy = sorted(candy)\nif(candy[0]+candy[1]==candy[2]):\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n"}
{"label": 26, "index": 3349, "code": "\n\nl = map(int,raw_input().split())\n\nif l[0] == l[1] + l[2]:\n    print 'Yes'\n\nelif l[1] == l[0] + l[2]:\n    print 'Yes'\n\nelif l[2] == l[0] + l[1]:\n    print 'Yes'\nelse:\n    print 'No'\n"}
{"label": 26, "index": 3350, "code": "a, b, c = map(int, raw_input().split())\n\ntemp = max(a, b, c)\nif(temp*2 == a + b +c):\n\tprint \"Yes\"\nelse:\n\tprint \"No\""}
{"label": 26, "index": 3351, "code": "# -*- coding: utf-8 -*-\nimport sys\n\ncandy = map(int, raw_input().split())\nmx = max(candy)\ntotal = 0\nfor n in candy:\n    if n != mx:\n        total += n\nif total == mx:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 26, "index": 3352, "code": "a, b, c = map(int, input().split())\n\nlis = [a, b, c]\nlis.sort()\nif lis[0] + lis[1] == lis[2]:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 26, "index": 3353, "code": "# coding: utf-8\n\"\"\"Fighting over Candies\n\n@author: hijiri.n\n@modified: 11-19-2016\n\n\"\"\"\n\nc_in = list(map(int, input().split()))\n\ndef solve(candies):\n\n    ach = sum(candies) / 2\n\n    for c in candies:\n        if c == ach:\n            return \"Yes\"\n\n    return \"No\"\n\nprint(solve(c_in))\n"}
{"label": 26, "index": 3354, "code": "s = input().split()\ns_int = []\nfor i in s:\n    s_int.append(int(i))\n\nmax_i = max(enumerate(s_int), key=lambda x: x[1])[0]\n\na = 0\nb = 0\n\nfor i, n in enumerate(s_int):\n    if i == max_i:\n        a += n\n    else:\n        b += n\n\nif a == b:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 26, "index": 3355, "code": "candies = map(int, input().split())\nlst = sorted(candies)\nif lst[0] + lst[1] == lst[2]:\n    print('Yes')\nelse:\n    print('No')"}
{"label": 26, "index": 3356, "code": "a, b, c = map(int, input().split())\narray = sorted([a, b, c], reverse=True)\nif array[0] == array[1] + array[2]:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 26, "index": 3357, "code": "a, b, c = map(int, raw_input().split())\nx = [a, b, c]\nx.sort()\nif x[0] + x[1] == x[2]:\n    print \"Yes\"\nelse:\n    print \"No\"\n"}
{"label": 26, "index": 3358, "code": "abc = list(map(int, input().split()))\nabc.sort()\nif abc[2] == abc[0] + abc[1]:\n    print('Yes')\nelse:\n    print('No')"}
{"label": 26, "index": 3359, "code": "# -*- coding:utf-8 -*-\n\nl = input().split()\nl.sort(key=int)\nif(int(l[2]) == (int(l[0]) + int(l[1]))):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 26, "index": 3360, "code": "a, b, c = list(map(int, input().split()))\nif a+b == c or b+c==a or c+a==b:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 26, "index": 3361, "code": "a, b ,c = map(int, input().split())\nif a + b == c or b + c == a or a + c == b:\n    print('Yes')\nelse :\n    print('No')"}
{"label": 26, "index": 3362, "code": "a, b, c = map(int, raw_input().split())\nif a + b == c or b + c == a or c + a == b:\n    print \"Yes\"\nelse:\n    print \"No\"\n"}
{"label": 26, "index": 3363, "code": "a, b, c = map(int, input() .split())\nif a + b == c or a + c ==b or c +b ==a:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 26, "index": 3364, "code": "a, b, c = map(int, input().split())\nif a == b + c:\n    print('Yes')\nelif b == a + c:\n    print('Yes')\nelif c == a + b:\n    print('Yes')\nelse:\n    print('No')\n"}
{"label": 26, "index": 3365, "code": "i = sorted(list(map(lambda x:int(x),list(input().split(' ')))))\nif i[2] == i[1]+i[0]:\n  print('Yes')\nelse:\n  print('No')"}
{"label": 26, "index": 3366, "code": "a = list(map(int, input().split()))\ntotal = sum(a)\n\nfor i in a:\n    if total - i in a:\n        print(\"Yes\")\n        break\nelse:\n    print(\"No\")\n"}
{"label": 26, "index": 3367, "code": "w = list(map(int, input().split()))\nw.sort()\nif w[0] + w[1] == w[2]:\n\tprint('Yes')\nelse:\n\tprint('No')"}
{"label": 26, "index": 3368, "code": "# A\na, b, c = [int(i) for i in input().split()]\nif a+b == c: print(\"Yes\")\nelif a+c == b: print(\"Yes\")\nelif b+c == a: print(\"Yes\")\nelse: print(\"No\")"}
{"label": 26, "index": 3369, "code": "#prepare\nf = True\nList = []\n#input\nList = map(int,raw_input().split())\n\n#evaluate\nList.sort()\n\nif not List[0]+List[1] == List[2]:\n    f = False\n\n#output\nif f:\n    print 'Yes'\nelse:\n    print 'No'\n"}
{"label": 26, "index": 3370, "code": "a,b,c=map(int,raw_input().split())\nif(a+b==c):\n  print 'Yes'\nelif(a+c==b):\n  print 'Yes'\nelif(b+c==a):\n  print 'Yes'\nelse:\n  print 'No'"}
{"label": 26, "index": 3371, "code": "L = list(map(int, input().split(' ')))\n\nimport numpy as np\nmaxi = np.argmax(L)\nmaxv = L.pop(maxi)\n\nif maxv == sum(L):\n    print('Yes')\nelse:\n    print('No')"}
{"label": 26, "index": 3372, "code": "# coding: utf-8\n\"\"\"Fighting over Candies\n\n@author: hijiri.n\n@modified: 11-19-2016\n\n\"\"\"\n\nc_in = list(map(int, input().split()))\n\ndef solve(candies):\n\n    ach = sum(candies) / 2\n    return [\"No\", \"Yes\"][ach in candies]\n\nprint(solve(c_in))\n"}
{"label": 26, "index": 3373, "code": "a, b, c = map(int, input().split())\n \nif a+b==c or a+c==b or b+c==a:\n    print('Yes')\nelse:\n    print('No')"}
{"label": 26, "index": 3374, "code": "# encoding: utf-8\n\na, b, c = map(int,raw_input().split())\nif a + b == c or a + c == b or b + c == a: print \"Yes\"\nelse: print \"No\"\n"}
{"label": 26, "index": 3375, "code": "num = list(map(int, input().split()))\n\nnum = sorted(num)\n\nif num[-1] == sum(num[:-1]):\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 26, "index": 3376, "code": "x = [ int(i) for i in input().split()]\nif 2 * max(x) == sum(x):\n  print(\"Yes\")\nelse:\n  print(\"No\")"}
{"label": 26, "index": 3377, "code": "line=input()\nline=line.split(\" \")\n \na=int(line[0])\nb=int(line[1])\nc=int(line[2])\n \nif a+b==c:\n print(\"Yes\")\nelif b+c==a:\n print(\"Yes\")\nelif c+a==b:\n print(\"Yes\")\nelse:\n print(\"No\")"}
{"label": 26, "index": 3378, "code": "#abc047_a\n\ns=map(int,raw_input().split())\nmaxc=max(s)\nif sum(s)-maxc==maxc:\n print 'Yes'\nelse:\n print 'No'\n"}
{"label": 26, "index": 3379, "code": "a,b,c = map(int,input().split())\ns = (a+b+c)/2\nif a+b == s or a+c == s or b+c == s:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 27, "index": 3380, "code": "def ri(): return int(input())\ndef rli(): return list(map(int, input().split()))\ndef ris(): return list(input())\ndef pli(): return \"\".join(list(map(str, ans)))\n\na = list(input().split())\nprint(\"A\"+ list(a[1])[0] + \"C\")"}
{"label": 27, "index": 3381, "code": "a, b, c = str(input()).split()\nprint(a[0] + b[0] + c[0])"}
{"label": 27, "index": 3382, "code": "# coding: utf-8\n\nword = input().rstrip().split(\" \")[1]\nfirst_char = word[0]\nprint(\"A\" + first_char + \"C\")\n"}
{"label": 27, "index": 3383, "code": "A, s, C = input().split()\nprint(A[0] + s[0] + C[0] )"}
{"label": 27, "index": 3384, "code": "s=str(input())\nc=' '\nb=s.find(c)\nb+=1\nprint(\"A{}C\".format(s[b]))"}
{"label": 27, "index": 3385, "code": "S = input().split()\nans = \"A\"+S[1][0]+\"C\"\nprint(ans)"}
{"label": 27, "index": 3386, "code": "title = input().split()\noutput = ''\nfor i in title:\n    cap = i[0]\n    output += cap\nprint(output)"}
{"label": 27, "index": 3387, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\ndef LI(): return list(map(int, input().split()))\ndef II(): return int(input())\ndef LS(): return input().split()\ndef S(): return input()\n\n\ndef main():\n    s = LS()\n    return 'A{}C'.format(s[1][0])\n\n\nprint(main())\n"}
{"label": 27, "index": 3388, "code": "s = list(map(str, input().split()))\nprint(s[0][0] + s[1][0] + s[2][0])"}
{"label": 27, "index": 3389, "code": "print('A%sC'%input().split()[1][0])"}
{"label": 27, "index": 3390, "code": "line = input().split()\n\na = line[0][0]\nb = line[1][0]\nc = line[2][0]\n\nprint(a + b + c)"}
{"label": 27, "index": 3391, "code": "# -*- coding: utf-8 -*-\n# \u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u306e\u6574\u6570\u306e\u5165\u529b\na, b ,c = map(str, raw_input().split())\n\nprint \"{0}{1}{2}\".format(a[0:1], b[0:1],c[0:1])\n"}
{"label": 27, "index": 3392, "code": "S1 = input().split()\n\n\n\n\n\nprint('A' + S1[1][0] + 'C')\n"}
{"label": 27, "index": 3393, "code": "s = input()\nss = s[8:]\nsss = ss[0]\n\nprint( 'A' + sss + 'C' )"}
{"label": 27, "index": 3394, "code": "a, s, c = map(str, input().split())\n\ns = s[0]\nprint(\"A\" + s + \"C\")"}
{"label": 27, "index": 3395, "code": "A,B,C=map(str,input().split())\nprint(A[0]+B[0]+C[0])"}
{"label": 27, "index": 3396, "code": "s=raw_input().split(' ')\nprint 'A'+s[1][0]+'C'"}
{"label": 27, "index": 3397, "code": "a,x,c=input().split()\nprint(a[0]+x[0]+c[0])"}
{"label": 27, "index": 3398, "code": "import sys\n\n# sys.stdin = open('a1.in')\n\n\ndef read_int_list():\n    return list(map(int, input().split()))\n\n\ndef read_str_list():\n    return input().split()\n\n\ndef read_int():\n    return int(input())\n\n\ndef read_str():\n    return input()\n\n\ndef main():\n    A, s, C = read_str_list()\n    res = A[0] + s[0] + C[0]\n    print(res)\n\n\nmain()\n"}
{"label": 27, "index": 3399, "code": "arr = input().split()\nprint(\"A\"+arr[1][0]+\"C\")"}
{"label": 27, "index": 3400, "code": "print('A%sC'%input()[8])"}
{"label": 27, "index": 3401, "code": "s = input().split()\nt = s[1]\nprint(\"A\"+t[0]+\"C\")\n"}
{"label": 27, "index": 3402, "code": "# -*- coding: utf-8 -*-\nprint(\"\".join([w[0] for w in input().split()]))"}
{"label": 27, "index": 3403, "code": "input = input()\ninput = input[8:]\ninput = input[:-7]\n\nprint('A' + input[0] + 'C')"}
{"label": 27, "index": 3404, "code": "a,b,c =(input().split())\n\n\nd = a[0]\ne = b[0]\nf = c[0]\n\nprint ((d+e+f).upper())"}
{"label": 27, "index": 3405, "code": "s = input()\nprint(s[0] + s[8] + s[-7])"}
{"label": 27, "index": 3406, "code": "for s in input().split():\n    print(s[0], end='')\n"}
{"label": 27, "index": 3407, "code": "# -*- coding: utf-8 -*-\n\nx = raw_input()\na = x.split()[0]\ns = x.split()[1]\nb = x.split()[2]\n\nprint a[0]+s[0]+b[0]"}
{"label": 27, "index": 3408, "code": "s = input().split()[1]\nprint('A'+s[0]+'C')"}
{"label": 27, "index": 3409, "code": "nom=input()\nabrev=\"\"\ni=0\n\nwhile i<len(nom):\n    if i==0 or (i>0 and nom[i-1]==\" \"):\n        abrev+=nom[i]\n    i+=1\n\nprint(abrev)"}
{"label": 27, "index": 3410, "code": "data = input().split()\nprint(\"A\"+data[1][0]+\"C\")"}
{"label": 27, "index": 3411, "code": "S = input().split()\nprint('A' + S[1][0] + 'C')"}
{"label": 27, "index": 3412, "code": "# -*- coding: utf-8 -*-\n# problem A\n\nS = str(input())\nmiddle = S[8]\nprint(\"A\" + middle.upper() + \"C\")"}
{"label": 27, "index": 3413, "code": "from sys import stdin, stdout\ndef readLine_str_list():return list(map(str, stdin.readline().split()))\ndef main():\n    s = readLine_str_list()\n    print(\"A\"+s[1][0]+\"C\")\n\nif __name__ == \"__main__\":\n    main()"}
{"label": 27, "index": 3414, "code": "line = input()\nword = line.strip().split()[1]\nprint('A{}C'.format(word[0]))"}
{"label": 27, "index": 3415, "code": "A, s, C = input().split()\nprint(A[0] + s[0] + C[0])\n"}
{"label": 27, "index": 3416, "code": "s=input()\nprint(s[0],end=\"\")\nfor i in range(len(s)):\n  if s[i]==' ':\n    print(s[i+1],end=\"\")\nprint()"}
{"label": 27, "index": 3417, "code": "a,b,c=input().split()\nprint(a[0]+b[0]+c[0])"}
{"label": 27, "index": 3418, "code": "a = map(str,raw_input().split())\n#print a\n#print a[1][0]\nprint a[0][0] + a[1][0] + a[2][0]"}
{"label": 27, "index": 3419, "code": "print 'A'+raw_input().split()[1][0]+'C'"}
{"label": 27, "index": 3420, "code": "from collections import defaultdict\n\n\ndef main():\n    S = input()\n    print(\"A{0}C\".format(S.split()[1][0]))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 27, "index": 3421, "code": "# -*- coding:utf-8 -*-\nimport re\nS = input()\nans = re.findall(r\"[A-Z]\",S)\nprint(ans[0]+ans[2]+ans[3])"}
{"label": 27, "index": 3422, "code": "a = raw_input().split()\nprint a[0][0]+a[1][0]+a[2][0]\n"}
{"label": 27, "index": 3423, "code": "print \"\".join(map(lambda x: x[0].upper(), raw_input().split()))"}
{"label": 27, "index": 3424, "code": "a, b, c = list(map(str, input().split()))\nprint(a[0],end='')\nprint(b[0],end ='')\nprint(c[0])"}
{"label": 27, "index": 3425, "code": "#!/usr/bin/python\n\nimport sys\n\ndef main(argv):\n    result = []\n    for line in sys.stdin:\n        for token in line.rstrip(\"\\n\").split(\" \"):\n            result.append(token[0])\n    print \"\".join(result)\n\nif __name__ == \"__main__\":\n    main(sys.argv)"}
{"label": 27, "index": 3426, "code": "seq = input().split()\n\nprint(seq[0][0] + seq[1][0] + seq[2][0])\n"}
{"label": 27, "index": 3427, "code": "print(\"\".join([x[0] for x in input().split()]))"}
{"label": 27, "index": 3428, "code": "s = [i for i in input().split()]\n\nans = s[0][0:1] + s[1][0:1] + s[2][0:1]\nprint(ans)\n"}
{"label": 27, "index": 3429, "code": "a = list(input().split())\nprint (a[0][0] + a[1][0] + a[2][0])\n"}
{"label": 27, "index": 3430, "code": "l = raw_input().split()\nprint \"A\"+l[1][0]+\"C\""}
{"label": 27, "index": 3431, "code": "from collections import defaultdict\n\n\ndef main():\n    print(\"A{0}C\".format(input().split()[1][0]))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 27, "index": 3432, "code": "def main():\n    a,b,c = map(str,input().split())\n    print(a[0]+b[0]+c[0])\n\nif __name__ == \"__main__\":\n    main()\n"}
{"label": 27, "index": 3433, "code": "a,s,c=map(str,raw_input().split())\nprint 'A'+s[0]+'C'"}
{"label": 27, "index": 3434, "code": "S = input()\nx = S.split()\ny = list(x[1])\nprint('A'+y[0]+'C')"}
{"label": 27, "index": 3435, "code": "a=input().split(\" \")\n\nprint(\"A\"+a[1][0]+\"C\")\n"}
{"label": 27, "index": 3436, "code": "a, s, c = map(str, input().split())\n\nprint( a[0] + s[0] + c[0])\n"}
{"label": 27, "index": 3437, "code": "a, b, c = input() .split()\nprint(\"A\" + b[0] + \"C\")"}
{"label": 27, "index": 3438, "code": "l = raw_input().strip().split()\nprint(l[0][0]+l[1][0]+l[2][0])\n"}
{"label": 27, "index": 3439, "code": "print(*[x[0]for x in input().split()],sep='')"}
{"label": 27, "index": 3440, "code": "s=input().split()\nprint(s[0][0]+s[1][0]+s[2][0])"}
{"label": 27, "index": 3441, "code": "inString = input().split()\nprint(\"A\"+inString[1][0]+\"C\")"}
{"label": 27, "index": 3442, "code": "print \"\".join([s[0:1] for s in raw_input().split()])\n"}
{"label": 27, "index": 3443, "code": "a, b, c = map(str, input().split())\nprint(\"A\" + b[0] + \"C\")\n"}
{"label": 27, "index": 3444, "code": "a = input().split()\nprint(\"A%sC\" % a[1][0])\n"}
{"label": 27, "index": 3445, "code": "print(\"A{}C\".format(input().split()[1][0]))"}
{"label": 27, "index": 3446, "code": "S = input().split()\nprint(S[0][0]+S[1][0]+S[2][0])"}
{"label": 27, "index": 3447, "code": "print(''.join(map(lambda x: x[0].upper(), input().split())))"}
{"label": 27, "index": 3448, "code": "num1 = list(input().split())\nprint(\"A\"+num1[1][0]+\"C\")"}
{"label": 27, "index": 3449, "code": "a = raw_input().split()\nprint('{}{}{}'.format(a[0][0], a[1][0], a[2][0]))"}
{"label": 27, "index": 3450, "code": "str = raw_input()\ns2 = str.split(' ')[1]\n\nprint \"A\" + s2[0] + \"C\"\n\n"}
{"label": 27, "index": 3451, "code": "A,S,B = raw_input().split()\n\nprint A[0]+S[0]+B[0]"}
{"label": 27, "index": 3452, "code": "a, b, c = input().split()\nx = list(b)\nprint(\"A\"+x[0]+\"C\")"}
{"label": 27, "index": 3453, "code": "s=input().split()\nprint(\"A{}C\".format(s[1][0]))\n"}
{"label": 27, "index": 3454, "code": "# A\ns = input()\nprint(\"A\"+ s[8]+ \"C\")"}
{"label": 27, "index": 3455, "code": "\ns = raw_input().split(\" \")\nprint s[0][0]+s[1][0]+s[2][0]\n\n"}
{"label": 27, "index": 3456, "code": "S = input().split()\nprint(S[0][0] + S[1][0] + S[2][0])\n"}
{"label": 27, "index": 3457, "code": "input_line = raw_input().split(\" \")\nprint input_line[0][0] + input_line[1][0] + input_line[2][0]"}
{"label": 27, "index": 3458, "code": "a,b,c=map(str,input().split())\nprint(a[0]+b[0]+c[0])"}
{"label": 27, "index": 3459, "code": "s = map(str, raw_input().split())\nans = ''\n\nfor i in range(len(s)):\n    ans += s[i][0]\n\nprint ans"}
{"label": 27, "index": 3460, "code": "def main():\n    print('A' + input().split()[1][0] + 'C')\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 27, "index": 3461, "code": "s1, s2, s3 = input().split()\nprint('A' + s2[0] + 'C')"}
{"label": 27, "index": 3462, "code": "S=list(map(str,input().split()))\nans=str(S[1])\nprint('A'+ans[0]+'C')"}
{"label": 27, "index": 3463, "code": "a, x, c = map(str, input().split())\nprint(\"A\"+x[0]+\"C\")\n"}
{"label": 27, "index": 3464, "code": "# coding: utf-8\n# Here your code !\n\ndata = input().split(\" \")\nprint(data[0][0:1], end=\"\")\nprint(data[1][0:1], end=\"\")\nprint(data[2][0:1], end=\"\")"}
{"label": 27, "index": 3465, "code": "i = input().split()\ns = ''\nfor x in i:\n    s+=x[0]\nprint(s)\n\n"}
{"label": 27, "index": 3466, "code": "\ns = input().split()\noutput = ''\n\nfor s_i in s:\n    output += s_i[0]\n\nprint(output)\n"}
{"label": 27, "index": 3467, "code": "s = input().split()\nprint(\"A\"+s[1][0]+\"C\")\n"}
{"label": 27, "index": 3468, "code": "\na = input().split()\n\nprint(\"A\" + a[1][0] + \"C\")"}
{"label": 27, "index": 3469, "code": "# -*- coding: utf-8 -*-\n\nS=input().split()\nt = S[1]\nmidle = t[0]\nprint('A'+midle+'C')"}
{"label": 27, "index": 3470, "code": "name = list(map(str, input().split()))\ninitials = [n[0] for n in name]\n\noutput = \"\"\n\nfor initial in initials:\n    output += initial\nprint(output)"}
{"label": 27, "index": 3471, "code": "s = raw_input().split()\nprint 'A'+s[1][0]+'C'"}
{"label": 27, "index": 3472, "code": "a,x,c=input().split();print(a[0]+x[0]+c[0])"}
{"label": 27, "index": 3473, "code": "a,b,c = input().split()\nprint('A'+b[0]+'C')"}
{"label": 27, "index": 3474, "code": "# -*- coding: utf-8 -*-\n\nprint \"\".join(w[0] for w in raw_input().split())\n"}
{"label": 27, "index": 3475, "code": "a=map(str, raw_input().split())\n\nadd=\"\"\n\nfor i in a:\n\taa=list(i)\n\tfig=aa[0]\n\tadd+=fig.upper()\n\nprint add"}
{"label": 27, "index": 3476, "code": "s = input()\nc = s[8]\nprint(\"A\" + c + \"C\")\n"}
{"label": 27, "index": 3477, "code": "# get line input split by space\ndef getLnInput():\n    return input().split()\n\n\ndef main():\n    s = getLnInput()\n    outs = \"\"\n    for i in range(len(s)):\n        outs += s[i][0]\n    print(outs)\n    return\n\n\nmain()\n"}
{"label": 27, "index": 3478, "code": "a, s, c = input().split()\nprint(\"A\", s[0], \"C\", sep='')\n"}
{"label": 27, "index": 3479, "code": "s=input().split()\nprint(s[0][0]+s[1][0]+s[2][0])"}
{"label": 27, "index": 3480, "code": "a, b, c = map(str, raw_input().split())\n \nans = a[0] + b[0] + c[0]\nans = ans.upper()\nprint ans"}
{"label": 27, "index": 3481, "code": "a,b,c = input().split()\nprint('A' + b[0] + 'C' )"}
{"label": 27, "index": 3482, "code": "# -*- coding:utf-8 -*-\n\nAtCoder, s, Contest = input().split()\n\nprint(\"A\" + s[0] + \"C\")\n"}
{"label": 27, "index": 3483, "code": "s = input().split()\nprint(\"A\" + s[1][0] + \"C\")"}
{"label": 27, "index": 3484, "code": "s = raw_input()\nprint \"\".join(x[0] for x in s.split())\n"}
{"label": 27, "index": 3485, "code": "#ABC048A\n\nprint 'A'+raw_input().split()[1][0]+'C'\n"}
{"label": 27, "index": 3486, "code": "from re import match\n\ns = input()\nm = match('AtCoder (.).* Contest', s)\nprint('A{}C'.format(m.group(1)))"}
{"label": 27, "index": 3487, "code": "from sys import stdin\na,b,c = stdin.readline().strip().split()\nprint a[0] + b[0] + c[0]"}
{"label": 27, "index": 3488, "code": "a, b, c = input().split()\nprint(\"A{0}C\".format(b[0]))"}
{"label": 27, "index": 3489, "code": "import sys\nimport math\nfrom functools import reduce\n\n# list(map(int,input().split()))\nl = reduce(lambda a,b:a+b, map(lambda t:t[0], input().split()))\n\nprint(l)"}
{"label": 27, "index": 3490, "code": "\ndef contest(x):\n\n    x = x.split()\n    print(x[0][0] + x[1][0] + x[2][0])\n\nif __name__ == \"__main__\":\n    \n    x = input()\n    contest(x)\n"}
{"label": 27, "index": 3491, "code": "s = input().split()[1]\nprint(\"A\"+s[0]+\"C\")"}
{"label": 27, "index": 3492, "code": "S = input()\nprint('A' + S[8] + 'C')\n"}
{"label": 27, "index": 3493, "code": "print('A' + input()[8] + 'C')"}
{"label": 27, "index": 3494, "code": "a,b,c=input().split()\nprint(\"A\"+b[0]+\"C\")"}
{"label": 27, "index": 3495, "code": "x = input().split()\ny = list(x[1])\nprint(\"A\" + y[0] + \"C\")"}
{"label": 27, "index": 3496, "code": "a=raw_input()\nb=a[0]\nc=a.find(\" \")\nd=a[c+1:]\nb=b+a[c+1]\nc=d.find(\" \")\nb=b+d[c+1]\nprint b"}
{"label": 27, "index": 3497, "code": "S = input().split()\nresult = 'A' + S[1][0] + 'C'\nprint(result)"}
{"label": 27, "index": 3498, "code": "print(\"A\" + input().split()[1][0] + \"C\")"}
{"label": 27, "index": 3499, "code": "s = raw_input()\nr = s.split(\" \")\nprint r[0][0] + r[1][0] + r[2][0]"}
{"label": 27, "index": 3500, "code": "title = input().split()\ns = title[1]\nx = s[0]\nprint(\"A\" + x + \"C\")\n"}
{"label": 27, "index": 3501, "code": "#!/usr/bin/python2\n# -*- coding: utf-8 -*-\n\nimport sys\n\ndef rl(proc=None):\n    if proc is not None:\n        return proc(sys.stdin.readline())\n    else:\n        return sys.stdin.readline().rstrip()\n\ndef srl(proc=None):\n    if proc is not None:\n        return map(proc, rl().split())\n    else:\n        return rl().split()\n\ndef main():\n    s = srl()\n    print \"A\" + s[1][0] + \"C\"\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 27, "index": 3502, "code": "a = list(input().split())\nprint(\"A{}C\".format(a[1][0].upper()))"}
{"label": 27, "index": 3503, "code": "s,t,u=raw_input().split()\nprint s[0]+t[0]+u[0]"}
{"label": 27, "index": 3504, "code": "S = list(input().split())\nprint(\"A\"+S[1][0]+\"C\")"}
{"label": 27, "index": 3505, "code": "A, hoge, C = input().split()\nprint('A'+hoge[0].upper()+'C')"}
{"label": 27, "index": 3506, "code": "s=input().split(\" \")\nresult=\"\"\nfor i in s:\n    result+=str(i)[0]\n\nprint(result)"}
{"label": 27, "index": 3507, "code": "l = list(input().split())\ns = l[0][0] + l[1][0] + l[2][0]\nprint(s)"}
{"label": 27, "index": 3508, "code": "s = input().split()\nans = s[1][0]\nprint(\"A\" + ans + \"C\")"}
{"label": 27, "index": 3509, "code": "def inint(): return int(input())\ndef inlint(): return list(map(int, input().split()))\ndef infloat(): return float(input())\ndef inlffloat(): return list(map(float, input().split()))\ndef inl(): return list(input())\ndef putlint(): return \"\".join(list(map(str, ans)))\n\na = list(map(str,input().split()))\nprint(a[0][0]+a[1][0]+a[2][0])"}
{"label": 28, "index": 3510, "code": "#coding:utf-8\nimport math\nimport string\nimport time\nimport fractions\n\nn = raw_input()\n\nif n == 'a' or n == 'i' or n == 'u' or n == 'e' or n == 'o':\n\tprint 'vowel'\nelse:\n\tprint 'consonant'"}
{"label": 28, "index": 3511, "code": "vowel = 'aeuio'\nx=raw_input()\nif x in vowel:\n    print(\"vowel\")\nelse:\n    print(\"consonant\")"}
{"label": 28, "index": 3512, "code": "if input() in ['a', 'i', 'u', 'e', 'o']:\n    print(\"vowel\")\nelse:\n    print(\"consonant\")\n"}
{"label": 28, "index": 3513, "code": "s=raw_input()\na='consonant'\nif(s=='a'):\n    a='vowel'\nelif(s=='e'):\n    a='vowel'\nelif(s=='i'):\n    a='vowel'\nelif(s=='o'):\n    a='vowel'\nelif(s=='u'):\n    a='vowel'\nprint a\n"}
{"label": 28, "index": 3514, "code": "import sys\n\n# sys.stdin = open('a1.in')\n\n\ndef read_int_list():\n    return list(map(int, input().split()))\n\n\ndef read_str_list():\n    return input().split()\n\n\ndef read_int():\n    return int(input())\n\n\ndef read_str():\n    return input()\n\n\ndef main():\n    c = read_str()\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u':\n        print('vowel')\n    else:\n        print('consonant')\n\n\nmain()\n"}
{"label": 28, "index": 3515, "code": "n = input()\n\ndef slv():\n    a = ['a', 'e', 'i', 'o', 'u']\n\n    for i in a:\n        if i == n:\n            print('vowel')\n            return\n    print('consonant')\n\nslv()"}
{"label": 28, "index": 3516, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\ndef LI(): return list(map(int, input().split()))\ndef II(): return int(input())\ndef LS(): return input().split()\ndef S(): return input()\n\n\ndef main():\n    cc = 'aeiou'\n    c = S()\n    if c in cc:\n        return 'vowel'\n    return 'consonant'\n\n\nprint(main())\n"}
{"label": 28, "index": 3517, "code": "list=[\"a\",\"i\",\"u\",\"e\",\"o\"]\nif input() in list:\n    print(\"vowel\")\nelse:\n    print(\"consonant\")"}
{"label": 28, "index": 3518, "code": "s = input()\nif (s[0] == 'a') or (s[0] == 'i') or (s[0] == 'u') or (s[0] == 'e') or (s[0] == 'o'):\n    print ('vowel')\nelse:\n    print ('consonant')\n"}
{"label": 28, "index": 3519, "code": "print(\"vowel\" if input() in \"aiueo\" else \"consonant\")"}
{"label": 28, "index": 3520, "code": "c = raw_input()\nvowel = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\nif c in vowel:\n    print \"vowel\"\nelse:\n    print \"consonant\""}
{"label": 28, "index": 3521, "code": "#!/usr/bin/python\n\nimport sys\n\nVOWEL = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\ndef main(argv):\n    for line in sys.stdin:\n        line = line.strip(\"\\n\")\n        if line in VOWEL:\n            print \"vowel\"\n        else:\n            print \"consonant\"\n\nif __name__ == \"__main__\":\n    main(sys.argv)"}
{"label": 28, "index": 3522, "code": "c=input()\nif c==\"a\":\n    print(\"vowel\")\nelif c==\"e\":\n    print(\"vowel\")\nelif c==\"i\":\n    print(\"vowel\")\nelif c==\"o\":\n    print(\"vowel\")\nelif c==\"u\":\n    print(\"vowel\")\nelse:\n    print(\"consonant\")\n"}
{"label": 28, "index": 3523, "code": "a = input()\nif a == \"a\" or a == \"i\" or a == \"u\" or a == \"e\" or a == \"o\":\n    print(\"vowel\")\nelse:\n    print(\"consonant\")"}
{"label": 28, "index": 3524, "code": "c = (input())\n\nif c==\"a\" or c==\"e\" or c==\"i\" or c==\"o\" or c==\"u\":\n    print(\"vowel\")\n\nelse:\n    print(\"consonant\")"}
{"label": 28, "index": 3525, "code": "# coding: utf-8\nc = input()\nif c == \"a\" or c == \"e\" or c == \"i\" or c == \"o\" or c == \"u\": \n    print(\"vowel\")\nelse:\n    print(\"consonant\")"}
{"label": 28, "index": 3526, "code": "vowels = list('aiueo')\nc = input()\nif c in vowels:\n    print('vowel')\nelse:\n    print('consonant')"}
{"label": 28, "index": 3527, "code": "boin = ['a', 'i', 'u', 'e', 'o']\nc = input()\nif c in boin:\n    print('vowel')\nelse:\n    print('consonant')"}
{"label": 28, "index": 3528, "code": "a = input()\n\nif a==\"a\" or a==\"i\" or a==\"u\" or a==\"e\" or a==\"o\":\n    print(\"vowel\")\nelse:\n    print(\"consonant\")\n\n"}
{"label": 28, "index": 3529, "code": "print(\"vowel\" if input() in (\"a\", \"i\", \"u\", \"e\", \"o\") else \"consonant\")"}
{"label": 28, "index": 3530, "code": "c = input()\nif c in 'aeiou':\n    print('vowel')\nelse:\n    print('consonant')"}
{"label": 28, "index": 3531, "code": "from collections import defaultdict\n\n\ndef main():\n    c = input()\n    if c in \"aeiou\":\n        print(\"vowel\")\n    else:\n        print(\"consonant\")\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 28, "index": 3532, "code": "import sys\n\nvowel=\"aeiou\"\nif sys.stdin.readline()[0] in vowel:\n    print \"vowel\"\nelse:\n    print \"consonant\""}
{"label": 28, "index": 3533, "code": "# -*- coding:utf-8 -*-\n\nc = raw_input()\n\nif c in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n    print(\"vowel\")\nelse:\n    print(\"consonant\")\n"}
{"label": 28, "index": 3534, "code": "c = input()\nprint(\"vowel\" if c in \"aeiou\" else \"consonant\")\n"}
{"label": 28, "index": 3535, "code": "word = input()\n\nif word == \"a\" or word == \"e\" or word==\"i\" or word==\"o\" or word==\"u\":\n    print(\"vowel\")\nelse:\n    print(\"consonant\")\n"}
{"label": 28, "index": 3536, "code": "print ['consonant','vowel'][raw_input()in 'aiueo']\n"}
{"label": 28, "index": 3537, "code": "\nif __name__ == \"__main__\":\n    c = input()\n    if c == \"a\" or c == \"i\" or c == \"u\" or c == \"e\" or c == \"o\":\n        print(\"vowel\")\n    else:\n        print(\"consonant\")\n"}
{"label": 28, "index": 3538, "code": "chara = input()\n\nvowel = ['a','i','u','e','o']\n\nif chara in vowel:\n    print('vowel')\nelse:\n    print('consonant')\n\n    \n"}
{"label": 28, "index": 3539, "code": "c = input()\n\nif c in ['a','e','i','o','u']:\n\tprint('vowel')\nelse:\n\tprint('consonant')"}
{"label": 28, "index": 3540, "code": "c = input()\nif c == \"a\" or c == \"i\" or c == \"u\" or c == \"e\" or c == \"o\":\n    print(\"vowel\")\nelse:\n    print(\"consonant\")\n"}
{"label": 28, "index": 3541, "code": "c = str(input())\nif c == \"a\" or c == \"i\" or c == \"u\" or c == \"e\" or c == \"o\":\n    print(\"vowel\")\nelse:\n    print(\"consonant\")"}
{"label": 28, "index": 3542, "code": "import numpy as np\n\nc = input()\nboin_list = ['a','e','i','o','u']\nif c in boin_list:\n    print ('vowel')\nelse: print ('consonant')"}
{"label": 28, "index": 3543, "code": "a = input()\n\nif a == \"a\" or a == \"i\" or a == \"u\" or a == \"e\" or a == \"o\":\n    print(\"vowel\")\nelse:\n    print(\"consonant\")\n"}
{"label": 28, "index": 3544, "code": "def inint(): return int(input())\ndef inlint(): return list(map(int, input().split()))\ndef infloat(): return float(input())\ndef inlffloat(): return list(map(float, input().split()))\ndef inl(): return list(input())\ndef putlint(): return \"\".join(list(map(str, ans)))\n\na = input()\n\nif(a==\"a\" or a==\"i\" or a==\"u\" or a==\"e\" or a==\"o\"):\n    print(\"vowel\")\nelse:\n    print(\"consonant\")"}
{"label": 28, "index": 3545, "code": "v=['a','i','u','e','o']\nprint(\"vowel\") if input() in v else print(\"consonant\")"}
{"label": 28, "index": 3546, "code": "\uff53=str(input())\nif \"a\"==s or \"i\"==s or \"u\"==s or \"e\"==s or \"o\" ==s:\n  print(\"vowel\")\nelse:\n  print(\"consonant\")"}
{"label": 28, "index": 3547, "code": "def main():\n    print('vowel' if input() in 'aeiou' else 'consonant')\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 28, "index": 3548, "code": "# coding: utf-8\n\nc = raw_input()\n\nif c in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n    print \"vowel\"\nelse:\n    print \"consonant\"\n"}
{"label": 28, "index": 3549, "code": "c = input()\n\nans = \"vowel\" if c == \"a\" or c == \"e\"  or c == \"i\" or c == \"o\" or c == \"u\" else \"consonant\"\n\nprint(ans)"}
{"label": 28, "index": 3550, "code": "c = input()\nboin = {\"a\",\"i\",\"u\",\"e\",\"o\"}\nif c in boin:\n    print(\"vowel\")\nelse:\n    print(\"consonant\")"}
{"label": 28, "index": 3551, "code": "s = input()\nif s[0] in \"aiueo\":\n    print(\"vowel\")\nelse:\n    print(\"consonant\")\n\n"}
{"label": 28, "index": 3552, "code": "c = input()\nvowel = [\"a\",\"i\",\"u\",\"e\",\"o\"]\nif (c in vowel):\n    print(\"vowel\")\nelse:\n    print(\"consonant\")"}
{"label": 28, "index": 3553, "code": "s = raw_input()\nif s[0] in \"aeiou\":\n\tprint \"vowel\"\nelse:\n\tprint \"consonant\""}
{"label": 28, "index": 3554, "code": "from sys import stdin, stdout\ndef readLine_str_list():return list(map(str, stdin.readline().split()))\ndef main():\n    s = readLine_str_list()\n    vow = ['a', 'i', 'u', 'e', 'o']\n    if s[0] in vow:\n        print('vowel')\n    else:\n        print('consonant')\n\nif __name__ == \"__main__\":\n    main()"}
{"label": 28, "index": 3555, "code": "print('vowel'if input()in'aeiou'else'consonant')\n"}
{"label": 28, "index": 3556, "code": "#!/usr/bin/env python3\n\nprint('vowel' if input() in 'aeiou' else 'consonant')\n"}
{"label": 28, "index": 3557, "code": "c = input()\n\nprint(\"vowel\" if c == 'a' or c == 'i' or c == 'u' or c == 'e' or c == 'o' else \"consonant \")"}
{"label": 28, "index": 3558, "code": "c = input()\nprint( c in \"aiueo\" and \"vowel\" or \"consonant\")"}
{"label": 28, "index": 3559, "code": "l = ['a','e','i','o','u']\nif raw_input() in l:\n\tprint('vowel')\nelse:\n\tprint('consonant')"}
{"label": 28, "index": 3560, "code": "from Queue import * # Queue, LifoQueue, PriorityQueue\nfrom bisect import * #bisect, insort\nfrom collections import * #deque, Counter,OrderedDict,defaultdict\n#set([]) \nimport math\nimport copy\nimport itertools\nimport string\nimport sys\nmyread = lambda : map(int,raw_input().split())\ndef solver():\n    S = \"aiueo\"\n    c = raw_input()\n    if c in S:\n        print \"vowel\"\n    else:\n        print \"consonant\"\n\n\nif __name__ == \"__main__\":\n    solver()\n    "}
{"label": 28, "index": 3561, "code": "c=input()\n\nif c==\"a\" or c==\"i\" or c==\"u\" or c==\"e\" or c==\"o\":\n    print(\"vowel\")\nelse:\n    print(\"consonant\")\n"}
{"label": 28, "index": 3562, "code": "ch = input()\nif ch=='a' or ch =='i' or ch == 'u' or ch == 'e' or ch == 'o':\n    print(\"vowel\")\nelse:\n    print(\"consonant\")"}
{"label": 28, "index": 3563, "code": "c = input().strip()\n\nif c==\"a\" or c==\"i\" or c==\"u\" or c==\"e\" or c==\"o\":\n\tprint(\"vowel\")\nelse:\n\tprint(\"consonant\")\n"}
{"label": 28, "index": 3564, "code": "c = {input()}\nvowels = {'a', 'i', 'u', 'e', 'o'}\nif c < vowels:\n    print('vowel')\nelse:\n    print('consonant')"}
{"label": 28, "index": 3565, "code": "print \"vowel\" if raw_input() in \"aiueo\" else \"consonant\""}
{"label": 28, "index": 3566, "code": "c = str(input())\n\nif c in \"a, e, i, o, u\":\n    print(\"vowel\")\nelse:\n    print(\"consonant\")\n"}
{"label": 28, "index": 3567, "code": "c = input()\nif c is 'a' or c is 'i' or c is 'u' or c is 'e' or c is 'o':\n    print('vowel')\nelse:\n    print('consonant')\n"}
{"label": 28, "index": 3568, "code": "vowel = [\"a\",\"e\",\"i\",\"o\",\"u\"]\nc = raw_input()\nif c in vowel:\n\tprint \"vowel\"\nelse:\n\tprint \"consonant\""}
{"label": 28, "index": 3569, "code": "print(input() in \"aiueo\" and \"vowel\" or \"consonant\")"}
{"label": 28, "index": 3570, "code": "c  = input()\n\nvowel = ['a', 'i', 'u', 'e', 'o']\n\nflag = False\n\nfor i in range(5):\n    if c == vowel[i]:\n        flag = True\n        break\n\nif flag == True:\n    print('vowel')\nelse:\n    print('consonant')\n"}
{"label": 28, "index": 3571, "code": "vowel = \"aiueo\"\nc = raw_input()\n\nif c in vowel:\n    print \"vowel\"\nelse:\n    print \"consonant\"\n"}
{"label": 28, "index": 3572, "code": "a = input()\n \nif a in \"aiueo\":\n    print(\"vowel\")\nelse:\n    print(\"consonant\")"}
{"label": 28, "index": 3573, "code": "\ndef main():\n    ch = raw_input()\n\n    if ch in \"aeiou\":\n        print \"vowel\"\n    else:\n        print \"consonant\"\n\nif __name__ == \"__main__\":\n    main()\n"}
{"label": 28, "index": 3574, "code": "print('vowel' if input() in 'aeoui' else 'consonant')"}
{"label": 28, "index": 3575, "code": "c = input()\nif c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u':\n    print('vowel')\nelse:\n    print('consonant')\n"}
{"label": 28, "index": 3576, "code": "print(\"vowel\" if raw_input() in [\"a\",\"i\",\"u\",\"e\",\"o\"] else \"consonant\")"}
{"label": 28, "index": 3577, "code": "data = input()\nD = 0\n\nif data == 'a':\n\tprint(\"vowel\")\nelif data == 'i':\n\tprint(\"vowel\")\nelif data == 'u':\n\tprint(\"vowel\")\nelif data == 'e':\n\tprint(\"vowel\")\nelif data == 'o':\n\tprint(\"vowel\")\nelse:\n\tprint(\"consonant\")"}
{"label": 28, "index": 3578, "code": "a = raw_input()\n\nif a in ['a','e','i','o','u']:\n\tprint \"vowel\"\nelse:\n\tprint \"consonant\""}
{"label": 28, "index": 3579, "code": "s = input()\nans = \"vowel\" if s in [\"a\", \"i\", \"u\", \"e\", \"o\"] else \"consonant\"\nprint(ans)\n"}
{"label": 28, "index": 3580, "code": "c = input()\n\nA = {'a', 'i', 'u', 'e', 'o'}\nif c in A:\n    print('vowel')\nelse:\n    print('consonant')\n"}
{"label": 28, "index": 3581, "code": "c = input()\nif c == \"a\" or c == \"i\" or c == \"u\" or c == \"e\" or c == \"o\":\n    print(\"vowel\")\nelse:\n    print(\"consonant\")"}
{"label": 28, "index": 3582, "code": "c = raw_input()\nboin = [\"a\", \"i\", \"u\", \"e\", \"o\"]\nfor i in xrange(5):\n    if c in boin[i]:\n        print \"vowel\"\n        break\n    if i == 4:\n        print \"consonant\""}
{"label": 28, "index": 3583, "code": "# -*- coding:utf-8 -*-\n\nl = input().split()\n\nif(l[0] == \"a\"\nor l[0] == \"e\"\nor l[0] == \"i\"\nor l[0] == \"o\"\nor l[0] == \"u\"):\n    print(\"vowel\")\nelse:\n    print(\"consonant\")\n"}
{"label": 28, "index": 3584, "code": "#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n\nc = raw_input()\n\nif \"aeiou\".find(c) != -1:\n  print \"vowel\"\nelse:\n  print \"consonant\""}
{"label": 28, "index": 3585, "code": "c = raw_input()\nprint 'vowel' if c in ('a','e','i','o','u') else 'consonant'"}
{"label": 28, "index": 3586, "code": "c=input()\nif c in list('aeiou'):\n    print(\"vowel\")\nelse:\n    print(\"consonant\")\n"}
{"label": 28, "index": 3587, "code": "C = input()\nS = \"aiueo\"\nfor s in S:\n\tif C == s:\n\t\tprint(\"vowel\")\n\t\tquit()\nprint(\"consonant\")\n"}
{"label": 28, "index": 3588, "code": "print([\"consonant\",\"vowel\"][input()in\"aiueo\"])"}
{"label": 28, "index": 3589, "code": "target = input()\n\nfor v in (\"a\", \"i\", \"u\", \"e\", \"o\"):\n    if v in target:\n        print(\"vowel\")\n        exit()\n\nprint(\"consonant\")\n"}
{"label": 28, "index": 3590, "code": "x = input()\nif x in ['a', 'e', 'o', 'i' , 'u']:\n    print('vowel')\nelse:\n    print('consonant')\n"}
{"label": 28, "index": 3591, "code": "character = str(input())\nvowels = [\"a\",\"i\",\"u\",\"e\",\"o\"]\nfin = False\n\nif character in vowels:\n    print(\"vowel\")\nelse:\n    print(\"consonant\")\n"}
{"label": 28, "index": 3592, "code": "c = input()\nvowel = ['a', 'e', 'i', 'o', 'u']\n\nif c in vowel:\n    print( 'vowel' )\nelse:\n    print( 'consonant' )"}
{"label": 28, "index": 3593, "code": "c = input()\n\nif c == \"a\" :\n    print(\"vowel\")\nelif c == \"e\" :\n    print(\"vowel\")\nelif c == \"i\" :\n    print(\"vowel\")\nelif c == \"o\" :\n    print(\"vowel\")\nelif c == \"u\" :\n    print(\"vowel\")\nelse : # \u5358\u7d14\u51fa\u529b\n    print(\"consonant\")\n"}
{"label": 28, "index": 3594, "code": "c = input()\nprint(\"vowel\" if c in \"aeiou\" else \"consonant\")"}
{"label": 28, "index": 3595, "code": "line = input()\n\nif line == 'a':\n  print('vowel')\nelif line == 'i':\n  print('vowel')\nelif line == 'u':\n  print('vowel')\nelif line == 'e':\n  print('vowel')\nelif line == 'o':\n  print('vowel')\nelse:\n  print('consonant')"}
{"label": 28, "index": 3596, "code": "def ri(): return int(input())\ndef rli(): return list(map(int, input().split()))\ndef ris(): return list(input())\ndef pli(): return \"\".join(list(map(str, ans)))\n\na = input()\nv = \"a e i o u\".split()\nif(a in v):\n    print(\"vowel\")\nelse:\n    print(\"consonant\")\n"}
{"label": 28, "index": 3597, "code": "S=str(input())\nif S in ['a','i','u','e','o']:\n    print('vowel')\nelse:\n    print('consonant')"}
{"label": 28, "index": 3598, "code": "print(\"vowel\"*(input()in\"aiueo\")or\"consonant\")"}
{"label": 28, "index": 3599, "code": "c = raw_input()\nif len(set(['a','i','u','e','o', c[0]])) == 5:\n\tprint \"vowel\"\nelse:\n\tprint \"consonant\""}
{"label": 28, "index": 3600, "code": "print((\"consonant\",\"vowel\")[input()in\"aiueo\"])"}
{"label": 28, "index": 3601, "code": "s1=input()\ncount=0\nl=[\"a\",\"i\",\"u\",\"e\",\"o\"]\nfor w in l:\n    if s1==w:\n        print(\"vowel\")\n        count=count+1\nif count==0:\n    print(\"consonant\")\n"}
{"label": 28, "index": 3602, "code": "if input() in \"aeiou\":\n    print('vowel')\nelse:\n    print('consonant')\n"}
{"label": 28, "index": 3603, "code": "c = raw_input()\nif c[0] == 'a' or c[0] == 'e' or c[0] == 'i' or c[0] == 'o' or c[0] == 'u':\n\tprint 'vowel'\nelse:\n\tprint 'consonant'"}
{"label": 28, "index": 3604, "code": "v=['a','i','u','e','o']\nc=input()\nif c in v:\n    print('vowel')\nelse:print('consonant')\n"}
{"label": 28, "index": 3605, "code": "s = raw_input()\nv = ['a','e','i','o','u']\nif s in v:\n    print (\"vowel\")\nelse:\n    print (\"consonant\")\n"}
{"label": 28, "index": 3606, "code": "print('vowel' if input() in 'aeiou' else 'consonant')\n"}
{"label": 28, "index": 3607, "code": "a = ['a','i','u','e','o']\nn = str(input())\n \nif n in a:\n    print('vowel')\nelse:\n    print('consonant')"}
{"label": 28, "index": 3608, "code": "print \"vowel\" if raw_input() in 'aiueo' else \"consonant\"\n"}
{"label": 28, "index": 3609, "code": "\n\nc = input()\n\nif c in ['a', 'i', 'u', 'e', 'o']:\n    print('vowel')\nelse:\n    print('consonant')\n"}
{"label": 28, "index": 3610, "code": "a = raw_input()\nif a == 'a' or a=='i' or a=='u' or a=='e' or a=='o':\n    print 'vowel'\nelse:\n    print 'consonant'"}
{"label": 28, "index": 3611, "code": "c=input()\nif c in [\"a\",\"o\",\"u\",\"i\",\"e\"]:\n    print(\"vowel\")\nelse:\n    print(\"consonant\")\n"}
{"label": 28, "index": 3612, "code": "a = ['a', 'e', 'i','o', 'u']\nw = str(input())\nif w in a:\n    print('vowel')\nelse:\n    print('consonant')\n"}
{"label": 28, "index": 3613, "code": "c = input()\nif c in 'aiueo':\n    print('vowel')\nelse:\n    print('consonant')\n"}
{"label": 28, "index": 3614, "code": "import sys\n\ndef debug(x, table):\n    for name, val in table.items():\n        if x is val:\n            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)\n            return None\n\ndef solve():\n    c = input()\n    boin = {'a', 'e', 'i', 'o', 'u'}\n\n    if c in boin:\n        ans = 'vowel'\n    else:\n        ans = 'consonant'\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    solve()"}
{"label": 28, "index": 3615, "code": "c=input()\nif c in ['a', 'e', 'i', 'o', 'u']:\n    print ('vowel')\nelse:\n    print('consonant')\n"}
{"label": 28, "index": 3616, "code": "a = input()\nif a == 'a' or a == 'e' or a == 'i' or a == 'o' or a == 'u' :\n    print('vowel')\nelse :\n    print('consonant')"}
{"label": 28, "index": 3617, "code": "n = raw_input()\nif n in ['a','e','i','o','u']:\n    print 'vowel'\nelse:\n    print 'consonant'\n"}
{"label": 28, "index": 3618, "code": "print(\"vowel\") if input() in \"aiueo\" else print(\"consonant\")"}
{"label": 28, "index": 3619, "code": "c = input()\n\nli = [\"a\", \"i\", \"u\", \"e\", \"o\"]\n\nif c in li:\n    print(\"vowel\")\nelse:\n    print(\"consonant\")"}
{"label": 28, "index": 3620, "code": "c = raw_input()\nif c in \"aeiou\":\n    print \"vowel\"\nelse:\n    print \"consonant\"\n"}
{"label": 28, "index": 3621, "code": "char = input()\n\nvowels = ['a', 'i', 'u', 'e', 'o']\n\nfor vowel in vowels:\n    if char == vowel:\n        print(\"vowel\")\n        exit(0)\n\nprint(\"consonant\")"}
{"label": 28, "index": 3622, "code": "str = input()\n\nboin = [\"a\",\"i\",\"u\",\"e\",\"o\"]\nif str in boin:\n    print(\"vowel\")\nelse:\n    print(\"consonant\")\n"}
{"label": 28, "index": 3623, "code": "C = str(input())\nif C == \"a\" or C == \"e\" or C == \"i\" or C == \"o\" or C == \"u\":\n    ans = \"vowel\"\nelse:\n    ans = \"consonant\"\nprint(ans)"}
{"label": 28, "index": 3624, "code": "s=str(input())\nif \"a\"==s or \"i\"==s or \"u\"==s or \"e\"==s or \"o\" ==s:\n  print(\"vowel\")\nelse:\n  print(\"consonant\")"}
{"label": 28, "index": 3625, "code": "c = input()\nif c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u':\n    print('vowel')\nelse:\n    print('consonant')"}
{"label": 28, "index": 3626, "code": "c =  input()\nif c == 'a':\n    flag = 1\nelif c=='i':\n    flag = 1\nelif c=='u':\n    flag = 1\nelif c=='e':\n    flag = 1\nelif c=='o':\n    flag = 1\nelse :\n    flag = 0;\n\nif flag == 1:\n    print('vowel')\nelse :\n    print('consonant')"}
{"label": 28, "index": 3627, "code": "s = \"aiueo\"\ni = input()\nif i in s:\n    print(\"vowel\")\nelse:\n    print(\"consonant\")"}
{"label": 28, "index": 3628, "code": "S = input()\nif S in \"aiueo\":\n    print(\"vowel\")\nelse:\n    print(\"consonant\")\n"}
{"label": 28, "index": 3629, "code": "word = input()\n\nif word==\"a\" or word==\"e\" or word==\"i\" or word==\"o\" or word==\"u\" :\n    print(\"vowel\")\nelse:\n    print(\"consonant\")"}
{"label": 28, "index": 3630, "code": "# -*- coding: utf-8 -*-\n# problem A\n\nc = str(input())\nif c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u': \n    print('vowel')\nelse:\n    print('consonant')"}
{"label": 28, "index": 3631, "code": "c = input()\n\nif c==\"a\" or c==\"i\"or c==\"u\"or c==\"e\"or c==\"o\":\n    print(\"vowel\")\nelse:\n    print(\"consonant\")"}
{"label": 28, "index": 3632, "code": "input = input()\n\nif input == 'a' or input == 'i' or input == 'u' or input == 'e' or input == 'o':\n    print('vowel')\nelse:\n    print('consonant')"}
{"label": 28, "index": 3633, "code": "#ABC049A\n\nc=raw_input()\nif c=='a' or c=='e' or c=='i' or c=='o' or c=='u':\n print 'vowel'\nelse:\n print 'consonant'\n"}
{"label": 28, "index": 3634, "code": "lis = [\"a\",\"i\",\"u\",\"e\",\"o\"]\ns = input().strip()\n\nif s in lis:\n    print(\"vowel\")\nelse:\n    print(\"consonant\")"}
{"label": 28, "index": 3635, "code": "c = input()\nif c == 'a' or c == 'i' or c =='u' or c =='e' or  c == 'o':\n    print('vowel')\nelse:\n    print('consonant')"}
{"label": 28, "index": 3636, "code": "print \"vowel\" if (raw_input() in \"aiueo\") else \"consonant\""}
{"label": 28, "index": 3637, "code": "a = input()\nlist = [\"a\",\"e\",\"i\",\"o\",\"u\"]\nif a in list:\n print(\"vowel\")\nelse:\n print(\"consonant\")"}
{"label": 28, "index": 3638, "code": "w=['a','e','i','o','u']\nif raw_input() in w:\n  print 'vowel'\nelse:\n  print 'consonant'"}
{"label": 28, "index": 3639, "code": "list=[\"a\",\"i\",\"u\",\"e\",\"o\"]\nif input() in list:\n    print(\"vowel\")\nelse:\n    print(\"consonant\")"}
{"label": 29, "index": 3640, "code": "h,w=map(int,raw_input().split())\nc=[raw_input() for _ in xrange(h)]\nfor i in xrange(h):\n    print(c[i])\n    print(c[i])"}
{"label": 29, "index": 3641, "code": "from collections import defaultdict\n\n\ndef main():\n    H, W = map(int, input().split())\n    for _ in range(H):\n        line = input()\n        print(line)\n        print(line)\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 29, "index": 3642, "code": "for i in open(0).read().split()[2:]:print(i+\"\\n\"+i)"}
{"label": 29, "index": 3643, "code": "# coding: utf-8\nH, W = map(int, input().split())\nfor i in range(H):\n    C = input()\n    print(C)\n    print(C)"}
{"label": 29, "index": 3644, "code": "h, w = map(int, raw_input().split())\na = [raw_input() for i in range(h)]\nfor e in a:\n    print e\n    print e\n"}
{"label": 29, "index": 3645, "code": "H, W = map(int, input().split())\nC = [input() for _ in range(H)]\nnC = []\nfor row in C:\n    nC.append(row)\n    nC.append(row)\n\nfor nRow in nC:\n    print(nRow)"}
{"label": 29, "index": 3646, "code": "import numpy as np\ninput_line = map(int,raw_input().split(\" \"))\nH = input_line[0]\nW = input_line[1]\nC = np.array([])\nfor h in range(H):\n\ttmp = list(raw_input())\n\tC = np.append(C,np.array(tmp))\n\tC = np.append(C,np.array(tmp))\n\t\n\nC = C.reshape(2*H,W)\ntxt = \"\"\nfor c in C:\n\tfor cc in c:\n\t\ttxt += cc\n\tprint txt\n\ttxt = \"\"\n"}
{"label": 29, "index": 3647, "code": "H,W=list(map(int, input().split()))\n\nC = [0]*H\n\nfor i in range(H):\n    C[i]=input()\n\nfor i in range(H):\n    print(C[i])\n    print(C[i])\n"}
{"label": 29, "index": 3648, "code": "#002\nH,W=raw_input().split(\" \")\nH=int(H)\nW=int(W)\nmap=[]\nfor i in range(H):\n    map.append(raw_input())\nfor i in range(H):\n    print(str(map[i]))\n    print(str(map[i]))"}
{"label": 29, "index": 3649, "code": "h,w = map(int,input().split())\n\np = []\nfor i in range(0,h):\n  s = input()\n  p.append(s)\nfor i in range(0,h):\n  print(p[i])\n  print(p[i])"}
{"label": 29, "index": 3650, "code": "h,w = map(int,input().split())\nc = []\nfor i in range(h):\n\tc.append(input().split())\nfor i in range(h):\n\tprint(\"\".join(c[i]))\n\tprint(\"\".join(c[i]))"}
{"label": 29, "index": 3651, "code": "H, W = map(int, input().split())\nC = []\nfor i in range(H):\n    c = input()\n    C.append(c)\n\nfor c in C:\n    print(c)\n    print(c)\n"}
{"label": 29, "index": 3652, "code": "m,n=input().split()\na=[]\nfor i in range(int(m)) :\n   a.append(input())\n\nfor i in a :\n    print(i)\n    print(i)\n"}
{"label": 29, "index": 3653, "code": "H, W = map(int,input().split())\nC = []\nfor i in range(H):\n    C.append(input())\nfor i in range(H):\n    print(C[i])\n    print(C[i])"}
{"label": 29, "index": 3654, "code": "H, W = map(int, input().split())\nfor _ in range(H):\n    c = input()\n    for i in range(2):\n        print(c)\n"}
{"label": 29, "index": 3655, "code": "H, W = map(int, raw_input().split())\nC = [raw_input() for _ in xrange(H)]\nA = [[C[i/2][j] for j in xrange(W)] for i in xrange(2*H)]\nfor a in A:\n    print ''.join(a)\n"}
{"label": 29, "index": 3656, "code": "import numpy as np\nH,W = list(map(int, input().split()))\n#print (H)\nC = []\nfor i in range(H):\n    C.append(input())\n\n#print (C)\n\nfor i in range(H):\n    print (str(C[i]))\n    print (str(C[i]))"}
{"label": 29, "index": 3657, "code": "h, w = tuple(int(x) for x in input().split())\n\nc_arr = [input() for _ in range(h)]\n\nfor i in range(2 * h):\n    print(c_arr[i // 2])"}
{"label": 29, "index": 3658, "code": "H, W = map(int, input().split())\nfor i in range(H):\n    C = input()\n    for i in range(2):\n        print(C)\n        "}
{"label": 29, "index": 3659, "code": "a, b = map(int, raw_input().split())\n\nfor i in range(a):\n\tt = raw_input()\n\tprint t\n\tprint t"}
{"label": 29, "index": 3660, "code": "nums = list(map(int, input().split()))\nk = [input() for i in range(nums[0])]\nfor i in range(nums[0]):\n    print(k[i])\n    print(k[i])\n"}
{"label": 29, "index": 3661, "code": "H, W = map(int,input().split())\n\nC = list()\n\nfor i in range(H):\n\n    IN_string = input()\n\n    for j in range(2):\n        C.append(IN_string)\n\nfor i in range(2*H):\n    print(C[i])"}
{"label": 29, "index": 3662, "code": "H, W = [int(x) for x in input().split()]\nshape = []\nfor _ in range(H):\n    line = input().strip()\n    shape.append(line)\nfor line in shape:\n    print(line)\n    print(line)\n"}
{"label": 29, "index": 3663, "code": "h, w = map(int, input().split())\nc = [input() for _ in range(h)]\nfor cs in c:\n    print(cs)\n    print(cs)\n    "}
{"label": 29, "index": 3664, "code": "from Queue import * # Queue, LifoQueue, PriorityQueue\nfrom bisect import * #bisect, insort\nfrom collections import * #deque, Counter,OrderedDict,defaultdict\n#set([]) \nimport math\nimport copy\nimport itertools\nimport string\nimport sys\nmyread = lambda : map(int,raw_input().split())\ndef solver():\n    H,W = myread()\n    for i in xrange(H):\n        S = raw_input()\n        print S\n        print S\n\n\n\nif __name__ == \"__main__\":\n    solver()\n    \n"}
{"label": 29, "index": 3665, "code": "h,w = map(int,input().split())\nfor _ in range(h):\n    s = input()\n    print(s)\n    print(s)\n"}
{"label": 29, "index": 3666, "code": "\nH, W = list(map(int, input().split()))\nC = list()\n\nfor h in range(H):\n    crow = input()\n    C.append(crow)\n\n\nfor h in range(H):\n    print(C[h])\n    print(C[h])\n"}
{"label": 29, "index": 3667, "code": "H, W = list(map(int, input().split()))\nfor i in range(H):\n    a = input()\n    print(a)\n    print(a)"}
{"label": 29, "index": 3668, "code": "H,W = map(int,input().split())\n\nlines = []\nfor i in range(H):\n    lines.append(input())\n\nfor line in lines:\n    print(line)\n    print(line)\n\n    \n"}
{"label": 29, "index": 3669, "code": "H, W = map(lambda x:int(x), input().split())\ninput_im = ['']*H\n\nfor i in range(H):\n\tinput_im[i] = input()\nfor i in range(H):\n\tprint(input_im[i])\n\tprint(input_im[i])\n"}
{"label": 29, "index": 3670, "code": "h,w=map(int,input().split())\nfor i in range(h):\n    s=input()\n    print(s,s,sep='\\n')"}
{"label": 29, "index": 3671, "code": "\nH,W = map(int, input().split() )\nlist=[]\n\nfor i in range(H):\n    a=input()\n    list.append(a)\n    list.append(a)\n\nfor i in range(2*H):\n    print(list[i])\n\n\n\n"}
{"label": 29, "index": 3672, "code": "H, W = [int(i) for i in input().split()]\nc = []\nfor i in range(H):\n    c.append(input())\nfor i in range(H):\n    print(c[i])\n    print(c[i])\n"}
{"label": 29, "index": 3673, "code": "n,k = map(int, raw_input().strip().split())\nfor x in xrange(n):\n\ta = raw_input()\n\tprint(a)\n\tprint(a)"}
{"label": 29, "index": 3674, "code": "#!/usr/bin/env python\n# coding: utf-8\n\n\ndef main():\n    h, w = [int(i) for i in raw_input().split()]\n    for i in range(h):\n        text = raw_input()\n        print text\n        print text\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 29, "index": 3675, "code": "import sys\n\nif __name__ == \"__main__\":\n    h,w = map(int,input().split())\n    list = []\n    for i in range(h):\n        list.append(input())\n    for i in range(h*2):\n        for j in range(w):\n            print(list[int((i)/2)][j],end='')\n        print()\n\n"}
{"label": 29, "index": 3676, "code": "h,w=map(int,input().split())\nfor _ in range(h):\n    c=input()\n    print(c)\n    print(c)"}
{"label": 29, "index": 3677, "code": "H, W = map(int, input().split())\nC = []\nfor _ in range(H):\n\tC.append([i for i in input().split()])\n\nfor i in range(2*H):\n\tprint(*C[i//2])"}
{"label": 29, "index": 3678, "code": "h,w = map(int,input().split())\n\nfor _ in range(h):\n    row = input()\n    print(row.rstrip())\n    print(row.rstrip())\n"}
{"label": 29, "index": 3679, "code": "n, m = map(int, raw_input().strip().split(' '))\nfor i in  xrange(n):\n\tline = raw_input().strip()\n\tprint line\n\tprint line\n\t"}
{"label": 29, "index": 3680, "code": "H,W=list(map(int,input().split()))\nC=[input().split() for i in range(H)]\n[[print(\"\".join(C[j]))for i in range(2)] for j in range(H)]"}
{"label": 29, "index": 3681, "code": "import sys\n\ndef debug(x, table):\n    for name, val in table.items():\n        if x is val:\n            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)\n            return None\n\ndef solve():\n    H, W = map(int, input().split())\n    C = [input() for i in range(H)]\n    D = [[c for c in C[i//2]] for i in range(2*H)]\n\n    for i in range(2*H):\n        print(''.join(D[i]))\n\n\nif __name__ == '__main__':\n    solve()"}
{"label": 29, "index": 3682, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\ndef LI(): return list(map(int, input().split()))\ndef II(): return int(input())\ndef LS(): return input().split()\ndef S(): return input()\n\n\ndef main():\n    h,w = LI()\n    for _ in range(h):\n        s = S()\n        print(s)\n        print(s)\n\nmain()\n"}
{"label": 29, "index": 3683, "code": "H, W = map(int, input().split())\nC = [input() for i in range(H)]\n\nX = C.copy()\nfor i in range(H):\n    print(C[i])\n    print(X[i])\n"}
{"label": 29, "index": 3684, "code": "# -*- coding:utf-8 -*-\nHW = list(map(int, input().split()))\nc = [input() for i in range (HW[0])]\nans = []\nfor i in range( HW[0] ):\n    ans.append(c[i])\n    ans.append(c[i])\nfor i in range ( 2*HW[0] ):\n    print(ans[i])\n"}
{"label": 29, "index": 3685, "code": "(height, weight) = tuple(input().split(' '))\n\nfor hindex in range(int(height)):\n    x = input()\n    print(x)\n    print(x)\n"}
{"label": 29, "index": 3686, "code": "H, W =map(int, input().split())\n\nD=[]\n\nfor i in range(H):\n    C=input()\n    D.append(C)\n    \nfor j in range(H):\n    print(str(D[j]))\n    print(str(D[j]))"}
{"label": 29, "index": 3687, "code": "import sys\n\ndef main():\n    line = map(int, raw_input().split())\n    H = line[0]\n    W = line[1]\n\n    for i in xrange(H):\n        line = raw_input()\n        for j in xrange(2):\n            for ch in line:\n                sys.stdout.write(ch)\n            print ''\n\n\nif __name__ == \"__main__\":\n    main()\n"}
{"label": 29, "index": 3688, "code": "# coding: utf-8\n# Here your code !\nsize = list(map(int, input().split()))\nH, W = size[0], size[1]\ninfo = []\nfor i in range(H):\n    info.append(input())\nfor i in range(H):\n    print(info[i])\n    print(info[i])"}
{"label": 29, "index": 3689, "code": "a,b = map(int,input().split())\nfor i in range(a):\n c= input()\n print(c)\n print(c)"}
{"label": 29, "index": 3690, "code": "H, W = [int(i) for i in input().split()]\nC = []\nfor i in range(H):\n    C.append(input().split())\n\nfor i in range(H):\n    ans = ''.join(C[i])\n    for j in range(2):\n        print(ans)\n"}
{"label": 29, "index": 3691, "code": "for _ in[0]*list(map(int,input().split()))[0]:s=input();print(s+'\\n'+s)"}
{"label": 29, "index": 3692, "code": "H, W = list(map(int, input().split()))\nfor i in range(0, H):\n    s = str(input())\n    print(s)\n    print(s)"}
{"label": 29, "index": 3693, "code": "#coding:utf-8\nimport math\nimport string\nimport time\nimport fractions\n\nh, w = map(int, raw_input().split())\na = []\nfor i in range(h):\n\ta.append(raw_input().rstrip())\n\nfor i in range(h):\n\tprint a[i]\n\tprint a[i]\n\n"}
{"label": 29, "index": 3694, "code": "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Wed Feb 22 16:06:57 2017\n\n@author: 0048005387\n\"\"\"\n\nh, w = map(int, raw_input().split())\nc=[]\n\nfor i in range(h):\n    c.append(map(str, raw_input().split()))\n    \nfor i in c:\n    for j in i:\n        print j\n    for j in i:\n        print j\n"}
{"label": 29, "index": 3695, "code": "args = input().split(\" \")\nH = int(args[0])\n\nc = []\nfor _ in range(0, H):\n    c.append(input())\n\nfor row in c:\n    print(\"{0}\\n{0}\".format(row))\n"}
{"label": 29, "index": 3696, "code": "#prepare\nChar = ''\n#input\nH, W = map(int,raw_input().split())\n\nfor i in range(H):\n    Char = raw_input()\n    print '%s\\n%s\\n' %(Char,Char)\n"}
{"label": 29, "index": 3697, "code": "h,w=map(int,raw_input().split())\nc=[raw_input() for _ in xrange(h)]\nans=[\"\"]*(2*h)\ni=0\nj=0\nwhile i<2*h:\n    ans[i]+=c[j]\n    ans[i+1]+=c[j]\n    i+=2\n    j+=1\nfor i in xrange(2*h):\n    print(ans[i])"}
{"label": 29, "index": 3698, "code": "#cording : utf-8\n\nfor i in range(int(input().split(\" \")[0])):\n    s = input()\n    print(s,s,sep='\\n')\n"}
{"label": 29, "index": 3699, "code": "h,w=map(int,input().split())\nc=[input() for j in range(h)]\nfor i in range(h*2):\n    print(c[i//2])"}
{"label": 29, "index": 3700, "code": "H, W = list(map(int, input().split()))\n\nC = [0 for j in range(H)]\nfor i in range(H):\n    C[i] = input()\n\nfor i in range(H):\n    print(C[i])\n    print(C[i])\n"}
{"label": 29, "index": 3701, "code": "h,w = map(int,raw_input().split())\nc = []\nfor x in xrange(0,h):\n    s = raw_input()\n    c.append(s)\nfor x in xrange(0,h):\n    print c[x]\n    print c[x]\n"}
{"label": 29, "index": 3702, "code": "h, w = input().split()\n\nfor i in range(int(h)):\n    a = input()\n    print(a)\n    print(a)\n"}
{"label": 29, "index": 3703, "code": "h, w = map(int,input().split())\nfor i in range(h):\n    c = input()\n    print(c)\n    print(c)\n"}
{"label": 29, "index": 3704, "code": "l=list(map(int,input().split()))\nH,W=l[0],l[1]\npict = []\nfor i in range(0,H):\n    line = input().split()\n    pict.append(line)\n\nfor s in pict:\n    for i in range(2):\n        print(\"\".join(s))\n"}
{"label": 29, "index": 3705, "code": "height, width = [int(i) for i in input().split()]\nin_pict = [input() for i in range(height)]\noutput = []\nfor i in range(height):\n    print(in_pict[i] + \"\\n\" + in_pict[i])\n"}
{"label": 29, "index": 3706, "code": "H, W = list(map(int, input().split()))\nfor i in range(H):\n    s = input()\n    print(s)\n    print(s)\n"}
{"label": 29, "index": 3707, "code": "H, _ = map(int, input().split())\nfor _ in range(H):\n    c = input()\n    print(c)\n    print(c)"}
{"label": 29, "index": 3708, "code": "H, W = list(map(int, input().split()))\nfor i in range(H):\n\ts = input();\n\tprint(s)\n\tprint(s)\n"}
{"label": 29, "index": 3709, "code": "import sys\n\nh, w  = raw_input().split()\ninput_lines = []\nfor i in range(int(h)):\n        input_lines.append(raw_input())\nfor l in input_lines:\n        print l\n        print l\n"}
{"label": 29, "index": 3710, "code": "h, w = [int(x) for x in raw_input().split()]\nfor i in range(h):\n    r = raw_input()\n    print r\n    print r\n"}
{"label": 29, "index": 3711, "code": "I = input()\nH=int(I.split()[0])\nW=int(I.split()[1])\n\nfor i in range(H):\n    ii = input()\n    print (ii)\n    print (ii)"}
{"label": 29, "index": 3712, "code": "h = int(input() .split()[0])\nfor i in range(h):\n    p = input()\n    print(p + \"\\n\" + p)"}
{"label": 29, "index": 3713, "code": "H, W = [int(i) for i in input().split()]\nimage = [input() for h in range(H)]\n\nfor img in image:\n    print(img+'\\n'+img)\n\n"}
{"label": 29, "index": 3714, "code": "# -*- coding:utf-8 -*-\n\nN = list(map(int, input().split()))\na = [input().split() for i in range(N[0])]\n\nfor i in range(N[0]):\n    for j in a[i]:\n        print(j, j, sep='\\n')\n"}
{"label": 29, "index": 3715, "code": "H,W=map(int,input().split())\nC=[str(input()) for i in range(H)]\nfor i in range(2*H):\n  print(C[int(i/2)])"}
{"label": 29, "index": 3716, "code": "h,w = map(int,input().split())\nfor i in range(h):\n    str = input()+\"\\n\"\n    print(str*2)"}
{"label": 29, "index": 3717, "code": "a,b=map(int,raw_input().split())\nfor i in range(a):\n    s=raw_input()\n    print s\n    print s\n    \n"}
{"label": 29, "index": 3718, "code": "H, W = [int(n) for n in input().split()]\nfor h in range(H):\n    C = input()\n    print (C+'\\n'+C)\n"}
{"label": 29, "index": 3719, "code": "n = input().split()\na = [input() for i in range(int(n[0]))]\nfor i in range(int(n[0]) * 2):\n    print (a[int(i / 2)])\n"}
{"label": 29, "index": 3720, "code": "from collections import defaultdict\n\n\ndef main():\n    H, W = map(int, input().split())\n    for _ in range(H):\n        s = input()\n        print(s)\n        print(s)\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 29, "index": 3721, "code": "import sys\nh,w=[int(i) for i in input().split()]\nmap=[]\nfor i in range(h):\n    map.append([str(i) for i in input()])\nnew_map=[]\nfor i in range(h):\n    new_map.append(map[i])\n    new_map.append(map[i])\n\nfor i in range(h*2):\n    for j in range(w):\n        sys.stdout.write(str(new_map[i][j]))\n    print()"}
{"label": 29, "index": 3722, "code": "inp = input()\nH = int(inp.split()[0])\nW = int(inp.split()[1])\nl = []\nfor i in range(H):\n    l.append(list(input()))\n\nfor i in range(H*2):\n    line = \"\"\n    for j in range(W):\n        line = line + l[int((i)/2)][j]\n    print(line)\n"}
{"label": 29, "index": 3723, "code": "import sys\n\n# sys.stdin = open('b1.in')\n\n\ndef read_int_list():\n    return list(map(int, input().split()))\n\n\ndef read_str_list():\n    return input().split()\n\n\ndef read_int():\n    return int(input())\n\n\ndef read_str():\n    return input()\n\n\ndef main():\n    h, w = read_int_list()\n    for i in range(h):\n        l = read_str()\n        print(l)\n        print(l)\n\n\n\nmain()\n"}
{"label": 29, "index": 3724, "code": "h,w = map(int, raw_input().split(' '))\n\nM = [[0 for x in range(w)] for y in range(h)]\nfor i in range(h):\n    I = raw_input()\n    for j in range(w):\n        M[i][j] = I[j]\n\nfor i in range(h*2):\n    print \",\".join(M[i/2]).replace(\",\",\"\")\n"}
{"label": 29, "index": 3725, "code": "h, w = list(map(int, input().split()))\nsrc_img_list = [input() for i in range(h)]\ndst_img_list = []\n\nfor img_row in src_img_list:\n    for i in range(2):\n        dst_img_list.append(img_row)\n\nfor img_row in dst_img_list:\n    print(img_row)"}
{"label": 29, "index": 3726, "code": "h,w=map(int,raw_input().split())\nfor i in xrange(h):\n    c=raw_input()\n    print(c)\n    print(c)"}
{"label": 29, "index": 3727, "code": "H , W = map(int , input().split())\nC = [list(input()) for i in range(H)]\n\nfor c in C:\n    print(\"\".join(c))\n    print(\"\".join(c))"}
{"label": 29, "index": 3728, "code": "import sys\nH,_=map(int,raw_input().split())\nfor _ in range(0,H):\n    line=sys.stdin.readline()\n    print line\n    print line\n"}
{"label": 29, "index": 3729, "code": "H, W = raw_input().strip().split()\n\nfor i in range(0, int(H)):\n    row = raw_input().strip()\n    print row\n    print row\n"}
{"label": 29, "index": 3730, "code": "#!/usr/bin/python\n\nimport sys\n\ndef main(argv):\n    tokens = sys.stdin.readline().rstrip(\"\\n\").split(\" \")\n\n    while len(tokens) == 2:\n        h, w = map(lambda x: int(x), tokens)\n\n        c = []\n        for i in xrange(0, h):\n            c.append(sys.stdin.readline().rstrip(\"\\n\"))\n\n        for i in xrange(1, 2 * h + 1):\n            image = []\n            for j in xrange(1, w + 1):\n                image.append(c[(i + 1) / 2 - 1][j - 1])\n            print \"\".join(image)\n\n        tokens = sys.stdin.readline().rstrip(\"\\n\").split(\" \")\n\nif __name__ == \"__main__\":\n    main(sys.argv)"}
{"label": 29, "index": 3731, "code": "h, w = map(int, input().split())\nfor i in range(h):\n    n = input()\n    print (n)\n    print (n)\n"}
{"label": 29, "index": 3732, "code": "H=int(input().split(\" \")[0])\n\nfor i in range(H):\n    t=input()\n    print(t)\n    print(t)\n"}
{"label": 29, "index": 3733, "code": "str = input().split()\n\nh = int(str[0])\nw = int(str[1])\n\nfor i in range(h):\n    str = input()\n    print(str)\n    print(str)\n"}
{"label": 29, "index": 3734, "code": "H, W = map(int, raw_input().split())\nfor _ in range(H):\n    C = raw_input()\n    print C\n    print C\n"}
{"label": 29, "index": 3735, "code": "def ri(): return int(input())\ndef rli(): return list(map(int, input().split()))\ndef rls(): return list(input())\ndef pli(a): return \"\".join(list(map(str, a)))\n\nh, w = rli()\nfor i in range(h):\n    s = input()\n    print(s)\n    print(s)\n"}
{"label": 29, "index": 3736, "code": "H, W = map(int, raw_input().split())\nC = [raw_input() for i in xrange(H)]\nfor c in C:\n    print c\n    print c"}
{"label": 29, "index": 3737, "code": "H, W = map(int, raw_input().split())\ns = [map(str, raw_input().split()) for _ in range(H)]\n\nfor i in s:\n    for j in i:\n        print j,\n    print \"\\n\"\n    for j in i:\n        print j,\n    print \"\\n\"\n"}
{"label": 29, "index": 3738, "code": "H, W = map(int, input().split())\ntable = [input() for _ in range(H)]\nfor h in range(2 * H):\n    print(table[h // 2])\n"}
{"label": 29, "index": 3739, "code": "h,w=map(int,input().split())\na=[]\nfor i in range(h):\n    a.append(str(input()))\n\nfor i in range(h):\n    print(a[i])\n    print(a[i])\n"}
{"label": 29, "index": 3740, "code": "h, w = map(int, input().split())\nc = []\ncn = []\nfor i in range(h):\n    c.append(input())\nfor i in range(len(c)*2):\n    if i%2 == 0:\n        cn.append(c[int(i/2)])\n    else:\n        cn.append(c[int((i-1)/2)])\n    \n    print(cn[i])"}
{"label": 29, "index": 3741, "code": "h, w = map(int, input().split())\nli = []\nfor i in range(h):\n    c = input()\n    li.append(c)\n    li.append(c)\n\nfor i in range(len(li)):\n    print(li[i])\n"}
{"label": 29, "index": 3742, "code": "hw_ = list(map(int, input().split()))\n\nh = hw_[0]\nw = hw_[1]\n\nc = []\nfor i in range(0, h):\n    c.append(input())\n\nfor i in range(0, h * 2):\n    for j in range(0, w):\n        print(c[int(i / 2)][j],end='')\n    print()"}
{"label": 29, "index": 3743, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\n\ndef main():\n    H, W = map(int, input().split())\n\n    for _ in range(H):\n        s = input()\n        print(s)\n        print(s)\n\nif __name__ == \"__main__\": main()\n"}
{"label": 29, "index": 3744, "code": "from sys import stdin\nn,m = map(int,stdin.readline().split())\nfor i in xrange(n):\n a = stdin.readline().strip()\n print a\n print a"}
{"label": 29, "index": 3745, "code": "def main():\n    H = int(input().split()[0])\n    C = []\n    for i in range(H):\n        C.append(input())\n    for i in range(H):\n        for j in range(2):\n            print(C[i])\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 29, "index": 3746, "code": "H, W = map(int, input().split())\nC = [input() for i in range(H)]\nfor c in C:\n    print(c + '\\n' + c)\n"}
{"label": 29, "index": 3747, "code": "h,w = map(int, input().split())\nfor y in range(h):\n    line = input()\n    print(line)\n    print(line)\n"}
{"label": 29, "index": 3748, "code": "H, W = map(int, input().split())\nfor h in range(H):\n\tC = input()\n\tprint(C + '\\n' + C)"}
{"label": 29, "index": 3749, "code": "a = input().split()\nh = int(a[0])\nw = int(a[1])\ns = []\nfor i in range(h):\n    l = input()\n    s.append(l)\n\nfor i in s:\n    print(i)\n    print(i)"}
{"label": 29, "index": 3750, "code": "y,x=map(int,input().split())\nl=[input() for i in range(y)]\nfor i in range(y):\n    print(l[i])\n    print(l[i])"}
{"label": 29, "index": 3751, "code": "H, W = map(int, raw_input().split())\n\nfor _ in range(H):\n  line = raw_input()\n  print line\n  print line\n"}
{"label": 29, "index": 3752, "code": "#ABC049B\n\nh,w=map(int,raw_input().split())\nl=['' for i in range(h)]\nfor i in range(h):\n l[i]=raw_input()\nfor i in range(h*2):\n print l[i/2]\n"}
{"label": 29, "index": 3753, "code": "H, W = map(int, raw_input().split())\nfor i in xrange(H):\n    str = raw_input()\n    print str\n    print str"}
{"label": 29, "index": 3754, "code": "# coding: utf-8\n\nh, w = map(int, raw_input().split())\n\nfor i in range(0, h):\n    o = raw_input()\n    print o + \"\\n\" + o\n"}
{"label": 29, "index": 3755, "code": "# -*- coding:utf-8 -*-\n\n\nH, W = list(map(int,input().split()))\n\nfor i in range(H):\n    row = input()\n    print(row)\n    print(row)\n"}
{"label": 29, "index": 3756, "code": "H,W = map(int, raw_input().split())\nfor i in range(H):\n  s = raw_input()\n  print s\n  print s"}
{"label": 29, "index": 3757, "code": "n,m=input().split()\nl=\"\"\nfor i in range(int(n)):\n\ts=input()\n\tl+=s+\"\\n\"+s+\"\\n\"\n\n\nprint(l)"}
{"label": 29, "index": 3758, "code": "n, m = map(int, input().split())\na = [list(map(str, input().split())) for i in range(n)]\nfor i in range(n):\n    print(*a[i])\n    print(*a[i])\n"}
{"label": 29, "index": 3759, "code": "h, w = map(int, input().split())\nl = list()\nwhile(h):\n\tl.append(input())\n\th -= 1\n\nfor i in l:\n\tprint(i)\n\tprint(i)"}
{"label": 29, "index": 3760, "code": "height, width = [int(e) for e in input().split()]\nlst = []\n\n\nfor i in range(height):\n    pict = input()\n    lst.append(pict)\n    lst.append(pict)\n\n\nprint('\\n'.join(lst))\n"}
{"label": 29, "index": 3761, "code": "H, W = map(int, raw_input().split())\nd = [map(str, raw_input().split()) for _ in range(H)]\nfor i in d:\n    for j in i:\n        print j,\n    print\n    for j in i:\n        print j,\n    print\n"}
{"label": 29, "index": 3762, "code": "def main():\n    H, W = map(int, input().split())\n    C = [input() for _ in range(H)]\n\n    for c in C:\n        print(c, c, sep='\\n')\n\nmain()\n"}
{"label": 29, "index": 3763, "code": "h, w = list(map(int, input().split()))\n\nc = []\n\nfor i in range(h):\n    c.append(input())\n\nfor i in range(h*2):\n    if i == 0:\n        print(c[0])\n    elif i == 1:\n        print(c[0])\n    elif i%2 == 0:\n        print(c[i//2])\n    else:\n        print(c[(i-1)//2])"}
{"label": 29, "index": 3764, "code": "H, W = map(int, raw_input().split())\nfor i in range(H):\n    s = raw_input()\n    print s\n    print s"}
{"label": 29, "index": 3765, "code": "h,w = [int(i) for i in input().split()]\n\nc=[\"\"]*h\n\nfor i in range(h):\n    c[i] = input()\n\nfor i in range(h):\n    print(c[i])\n    print(c[i])"}
{"label": 29, "index": 3766, "code": "H, W = input().split()\n# print(input_num[0])\ninput_str = [input() for _ in range(int(H))]\n# print(input_str)\n\noutput = [(str, str) for str in input_str]\n\nfor tuple in output:\n    print(tuple[0])\n    print(tuple[1])\n"}
{"label": 29, "index": 3767, "code": "H, W = map(int, input().split())\n\nc = []\nfor _ in range(H):\n    c.append(list(input()))\n\nfor i in range(1, 2*H+1):\n    for j in range(W):\n        print(c[(i+1)//2-1][j], end='')\n    print('')"}
{"label": 29, "index": 3768, "code": "height, width = map(int, input().rstrip().split())\n\nans_list = []\n\nfor i in range(height):\n    line = input().rstrip()\n    ans_list.append(line)\n    ans_list.append(line)\nfor i in ans_list:\n    print(i)\n"}
{"label": 29, "index": 3769, "code": "h,w=map(int,raw_input().split())\nfor _ in xrange(h):\n  s = raw_input()\n  print s\n  print s"}
{"label": 30, "index": 3770, "code": "a,op,b=input().split(' ')\na = int(a)\nb = int(b)\n\nif op=='+':\n    print(a + b)\nelse:\n    print(a - b)\n"}
{"label": 30, "index": 3771, "code": "a = map(str,raw_input().split())\n#a = raw_input()\n\nb = int(a[0])\nc = int(a[2])\nop = a[1]\n\nif op == \"+\":\n        print b + c\nelse:\n        print b - c"}
{"label": 30, "index": 3772, "code": "print(eval(input()))"}
{"label": 30, "index": 3773, "code": "s=input().split()\na=int(s[0])\nop=s[1]\nb=int(s[2])\nif op==\"+\":\n print(a+b)\nelif op==\"-\":\n print(a-b)"}
{"label": 30, "index": 3774, "code": "s = input().split()\n\nif s[1] == '+':\n    res = int(s[0]) + int(s[2])\nelse:\n    res = int(s[0]) - int(s[2])\n\nprint(res)"}
{"label": 30, "index": 3775, "code": "a, b, c = input().split()\nif b == '+' :\n  print(int(a) + int(c))\nelse :\n  print(int(a) - int(c))"}
{"label": 30, "index": 3776, "code": "print(eval(input()))"}
{"label": 30, "index": 3777, "code": "print(eval(input()))"}
{"label": 30, "index": 3778, "code": "inFomula = raw_input()\n\nlistFomula = inFomula.split()\n\nleftNum = listFomula[0]\nrightNum = listFomula[2]\nop = listFomula[1]\n\nresult = 0\n\nif op == \"+\":\n    result = int(leftNum) + int(rightNum)\nelif op == \"-\":\n    result = int(leftNum) - int(rightNum)\n\nprint result"}
{"label": 30, "index": 3779, "code": "a, op, b = map(str, input().split())\nif op == '+':\n    print(int(a) + int(b))\nelse:\n    print(int(a) - int(b))"}
{"label": 30, "index": 3780, "code": "print(eval(input()))"}
{"label": 30, "index": 3781, "code": "a, op, b = input().split()\na = int(a)\nb = int(b)\nif op == '+':\n    print(a + b)\nelse:\n    print(a - b)"}
{"label": 30, "index": 3782, "code": "import sys\n\ndef main():\n    arg = raw_input().split(\" \")\n    a = int(arg[0])\n    b = int(arg[2])\n    op = arg[1]\n    if a < 1 or b > 10 **9:\n        return 0\n\n    if op == \"+\":\n        return a + b\n    elif op == \"-\":\n        return a - b\n    else:\n        return 0\n\nprint main()\n"}
{"label": 30, "index": 3783, "code": "print(eval(input()))"}
{"label": 30, "index": 3784, "code": "if __name__ == \"__main__\":\n    a,b,c = input().split()\n    if (b == '+'):\n        print (int(a) + int(c))\n    else:\n        print (int(a) - int(c))\n"}
{"label": 30, "index": 3785, "code": "print(eval(input()))"}
{"label": 30, "index": 3786, "code": "data = input().split()\n\nif data[1] in \"+\":\n    print(int(data[0]) + int(data[2]))\nelse:\n    print(int(data[0]) - int(data[2]))"}
{"label": 30, "index": 3787, "code": "a,b,c = [i for i in input().split()]\nprint(int(a) + int(c) * (1 if b =='+' else -1) )"}
{"label": 30, "index": 3788, "code": "A,s,B = input().split()\nA = int(A)\nB = int(B)\nif s == '+':\n    print(A+B)\nelif s == '-':\n    print(A-B)\n"}
{"label": 30, "index": 3789, "code": "def main():\n    s = input().split()\n    print(int(s[0]) + int(s[2]) if s[1] == '+' else int(s[0]) - int(s[2]))\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 30, "index": 3790, "code": "#!/usr/bin/env python3\n\nprint(eval(input()))\n"}
{"label": 30, "index": 3791, "code": "A,op,B = input().split()\nif op == \"+\":\n    print(int(A)+int(B))\nelse:\n    print(int(A)-int(B))\n"}
{"label": 30, "index": 3792, "code": "n = input().split()\n\na = int(n[0])\nop = n[1]\nb = int(n[2])\n\nif op == '+': print(a + b)\nelse: print (a - b)"}
{"label": 30, "index": 3793, "code": "m,op,n=input().split()\n\nif op=='+' : print(int(m)+int(n))\nelse : print(int(m)-int(n))"}
{"label": 30, "index": 3794, "code": "a, op, b = input().split()\n\nif op == '+':\n    print(int(a) + int(b))\nelse:\n    print(int(a) - int(b))"}
{"label": 30, "index": 3795, "code": "A, op, B=input().split()\nA = int(A)\nB = int(B)\n\nif op =='+':\n    print (A+B)\nelse :\n    print(A-B)\n"}
{"label": 30, "index": 3796, "code": "a = input()\nprint(eval(a))\n"}
{"label": 30, "index": 3797, "code": "print(eval(input()))"}
{"label": 30, "index": 3798, "code": "print(str(eval(input())))"}
{"label": 30, "index": 3799, "code": "st = input().split()\na = int(st[0])\nb = int(st[2])\nif st[1] == '+':\n    ret = a + b\nelse:\n    ret = a - b\n\n    \nprint(ret)"}
{"label": 30, "index": 3800, "code": "print(eval(input()))"}
{"label": 30, "index": 3801, "code": "a, b, c = map(str, raw_input().split())\na = int(a)\nc = int(c)\nif b == \"+\":\n    print a + c\nelse:\n    print a - c\n"}
{"label": 30, "index": 3802, "code": "s = input()\n\nA = int(s.split()[0])\nB = int(s.split()[-1])\noperator = s.split()[1]\nif operator == '+':\n    print(A+B)\nelif operator == '-':\n    print(A-B)\nelse:\n    print('error')\n"}
{"label": 30, "index": 3803, "code": "print(eval(input()))"}
{"label": 30, "index": 3804, "code": "print(eval(input()))"}
{"label": 30, "index": 3805, "code": "# -*- coding: utf-8 -*-\nprint eval(raw_input())"}
{"label": 30, "index": 3806, "code": "A,op,B=map(str,input().split())\nif op==\"+\":\n  print(int(A)+int(B))\nelse:\n  print(int(A)-int(B))"}
{"label": 30, "index": 3807, "code": "print input()"}
{"label": 30, "index": 3808, "code": "A, op, B=input().split()\nA = int(A)\nB = int(B)\n\nif op =='+':\n    print (A+B)\nelse :\n    print(A-B)\n"}
{"label": 30, "index": 3809, "code": "print(input())"}
{"label": 30, "index": 3810, "code": "A, op, B = map(str,input().split())\n\nA = int(A)\nB = int(B)\n\nif op == \"+\":\n    print(A + B)\nelse:\n    print(A - B)"}
{"label": 30, "index": 3811, "code": "A , op , B = input().split()\nif op == \"+\":\n    print(int(A)+int(B))\nelse:\n    print(int(A)-int(B))"}
{"label": 30, "index": 3812, "code": "ss = input().split()\nx,y = int(ss[0]), int(ss[2])\nif ss[1] == '+':\n    res = x+y\nelse:\n    res = x-y\nprint(res)\n"}
{"label": 30, "index": 3813, "code": "s = raw_input().split(' ')\nif s[1] == '+':\n    print(int(s[0]) + int(s[2]))\nelse:\n    print(int(s[0]) - int(s[2]))"}
{"label": 30, "index": 3814, "code": "a,op,b=raw_input().split()\nif op==\"+\":\n    print(int(a)+int(b))\nelse:\n    print(int(a)-int(b))\n"}
{"label": 30, "index": 3815, "code": "s = raw_input().split(' ')\na = []\nop = []\nfor i in xrange(3):\n    if i%2 == 0:\n        a.append(int(s[i]))\n    else:\n        if s[i]=='-':\n            op.append(-1)\n        else:\n            op.append(1)\nprint a[0]+a[1]*op[0]"}
{"label": 30, "index": 3816, "code": "s = input().split()\n\na = int(s[0])\nop = s[1]\nb = int(s[2])\n\nif op == \"+\":\n\tresult = a + b\nelse:\n\tresult = a - b\n\nprint(result)\n"}
{"label": 30, "index": 3817, "code": "s = raw_input()\nprint eval(s)"}
{"label": 30, "index": 3818, "code": "# \u5165\u529b\u53d7\u3051\u53d6\u308a\nA, op, B = input().split()\nA, B = int(A), int(B)\n\nif op == \"+\":\n    print(A + B)\nelse:\n    print(A - B)"}
{"label": 30, "index": 3819, "code": "def ri(): return int(input())\ndef rli(): return list(map(int, input().split()))\ndef ris(): return list(input())\ndef pli(): return \"\".join(list(map(str, ans)))\n\nop = \"+ -\".split()\na,o,b = list(input().split())\nans = int(a) + int(b) if(o == op[0]) else int(a) - int(b)\nprint(ans)"}
{"label": 30, "index": 3820, "code": "A,op,B = input().split()\n\nif op == '+':\n    ans = int(A)+ int(B)\n    print(ans)\nelif op == '-':\n    ans = int(A)-int(B)\n    print(ans)\n"}
{"label": 30, "index": 3821, "code": "hoge = input().split()\nif hoge[1] == '+':\n    print(int(hoge[0]) + int(hoge[2]))\nelif hoge[1] == '-':\n    print(int(hoge[0]) - int(hoge[2]))"}
{"label": 30, "index": 3822, "code": "from collections import defaultdict\n\n\ndef main():\n    A, op, B = input().split()\n    if op == \"+\":\n        print(int(A) + int(B))\n    else:\n        print(int(A) - int(B))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 30, "index": 3823, "code": "a, op, b = input().split()\na = int(a)\nb = int(b)\nif op == \"+\":\n    print(a + b)\nelif op == \"-\":\n    print(a - b)"}
{"label": 30, "index": 3824, "code": "l = input().split()\nif l[1] == \"+\":\n  print(int(l[0])+int(l[2]))\nelse:\n  print(int(l[0])-int(l[2]))"}
{"label": 30, "index": 3825, "code": "print(eval(input()))"}
{"label": 30, "index": 3826, "code": "a, b, c = raw_input().split()\n\na = int(a)\nc = int(c)\n\nif b == '+':\n    print a+c\nelse:\n    print a-c"}
{"label": 30, "index": 3827, "code": "A,op,B = raw_input().split()\nif op == '+':\n  print int(A) + int(B)\nelse:\n  print int(A) - int(B)"}
{"label": 30, "index": 3828, "code": "(a, op, b) = input().split(\" \")\n\na = int(a)\nb = int(b)\n\nif op is \"+\":\n    print(a + b)\nelse:\n    print(a - b)\n"}
{"label": 30, "index": 3829, "code": "print(eval(input()))"}
{"label": 30, "index": 3830, "code": "A, op, B= input().split()\n\n\nif op ==\"+\":\n    print(int(A) + int(B))\nelif op ==\"-\":\n    print(int(A)-int(B))"}
{"label": 30, "index": 3831, "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ni = input().split()\nif i[1] == '+':\n    print(int(i[0])+int(i[2]))\nif i[1] == '-':\n    print(int(i[0])-int(i[2]))\n    "}
{"label": 30, "index": 3832, "code": "a, op, b = map(str, input().split())\n\nif op == \"+\":\n    print(int(a) + int(b))\nelse:\n    print(int(a) - int(b))"}
{"label": 30, "index": 3833, "code": "#001\na,op,b = input().split(\" \")\na = int(a)\nb = int(b)\nif op==\"+\":\n    print(a+b)\nelse:\n    print(a-b)"}
{"label": 30, "index": 3834, "code": "(a, op, b) = input().split()\n\nif op == '+':\n    print(int(a) + int(b))\nelse:\n    print(int(a) - int(b))\n"}
{"label": 30, "index": 3835, "code": "arr = input().split()\nif arr[1] == \"+\":\n  print(int(arr[0]) + int(arr[2])) \nelif arr[1] == \"-\":\n  print(int(arr[0]) - int(arr[2])) "}
{"label": 30, "index": 3836, "code": "# -*- coding: utf-8 -*-\n# problem A\nprint(eval(input()))"}
{"label": 30, "index": 3837, "code": "a = raw_input().strip().split()\nif a[1] == '+':\n\tprint(int(a[0])+int(a[2]))\nelse:\n\tprint(int(a[0])-int(a[2]))"}
{"label": 30, "index": 3838, "code": "#coding:utf-8\nimport math\nimport string\nimport time\nimport fractions\n\nn = raw_input().split()\n\nif n[1] == '+':\n\tprint int(n[0]) + int(n[2])\nelse:\n\tprint int(n[0]) - int(n[2])\n\n"}
{"label": 30, "index": 3839, "code": "info = raw_input()\nnum_1 = int(info.split(\" \")[0])\nop = info.split(\" \")[1]\nnum_2 = int(info.split(\" \")[2])\n\nif op == \"+\":\n    print num_1 + num_2\nelse:\n    print num_1 - num_2"}
{"label": 30, "index": 3840, "code": "a =input()\nprint(eval(a))"}
{"label": 30, "index": 3841, "code": "print eval(raw_input())"}
{"label": 30, "index": 3842, "code": "\n\na = input().split()\n\naa = int(a[0])\nbb = int(a[2])\n\nif a[1] == \"+\":\n    print(aa + bb)\nelse:\n    print(aa - bb)\n\n\n\n\n\n\n\n\n\n\n\n"}
{"label": 30, "index": 3843, "code": "A ,op, B = input().split()\nA, B= int(A), int(B)\nif op ==\"+\":\n    print(A+B)\nelif op==\"-\":\n    print(A-B)"}
{"label": 30, "index": 3844, "code": "s = raw_input().split( )\ns[0] = int(s[0])\ns[2] = int(s[2])\nif(s[1] == '+'):\n\tprint s[0] + s[2]\nelse:\n\tprint s[0] - s[2]"}
{"label": 30, "index": 3845, "code": "A, op, B = input().split()\n\nif op ==\"+\":\n    print(int(A) + int(B))\nelif op == \"-\":\n    print(int(A) - int(B))\n"}
{"label": 30, "index": 3846, "code": "a,op,b = raw_input().split()\nif op == '+':\n    print int(a) + int(b)\nelse:\n    print int(a) - int(b)\n"}
{"label": 30, "index": 3847, "code": "line = input().split()\n\na = int(line[0])\nb = int(line[2])\n\nop = line[1]\n\nif op == '+':\n    print(a+b)\nelif op == '-':\n    print(a-b)\n"}
{"label": 30, "index": 3848, "code": "print (input())"}
{"label": 30, "index": 3849, "code": "A,o,B=input().split()\nA,B=int(A),int(B)\nif o==\"+\":print(A+B)\nelse:print(A-B)"}
{"label": 30, "index": 3850, "code": "A,op,B=raw_input().split()\nA=int(A)\nB=int(B)\nif op==\"+\":\n    print A+B\nelse:\n    print A-B"}
{"label": 30, "index": 3851, "code": "a,op,b=raw_input().split()\na=int(a)\nb=int(b)\nif op==\"+\": print a+b\nelse: print a-b"}
{"label": 30, "index": 3852, "code": "array = map(str, raw_input().split())\n# print array\nif array[1]==\"+\":\n    print int(array[0])+int(array[2])\nelse:\n    print int(array[0])-int(array[2])\n"}
{"label": 30, "index": 3853, "code": "#ABC050A\n\nres=raw_input()\nres=res.replace(' ','')\nprint eval(res)\n"}
{"label": 30, "index": 3854, "code": "a = input().split()\n\nprint(int(a[0])+int(a[2]) if a[1]=='+' else int(a[0])-int(a[2]))\n"}
{"label": 30, "index": 3855, "code": "A,op,B=input().split()\nif (op=='+'):\n print(int(A)+int(B))\nelse:\n print(int(A)-int(B))\n"}
{"label": 30, "index": 3856, "code": "s = raw_input()\n\na = s.find('+')\nok = 0\nif a == -1:\n\ta = s.find('-')\n\tok = 1\n\nn1 = int(s[:(a - 1)])\nn2 = int(s[(a + 1):])\n\nif ok == 0:\n\tprint n1 + n2\nelse:\n\tprint n1 - n2"}
{"label": 30, "index": 3857, "code": "a,op,b=map(str,raw_input().split())\na=int(a)\nb=int(b)\n#op = str(op)\nif op=='+':\n    print a+b\nelif op=='-':\n    print a-b"}
{"label": 30, "index": 3858, "code": "print(eval(input()))"}
{"label": 30, "index": 3859, "code": "s = input().split()\na, b = int(s[0]), int(s[2]);\nif s[1]== '+':\n    a+=b;\n    print (a)\nelse:\n    a-=b;\n    print (a)\n"}
{"label": 30, "index": 3860, "code": "a,op,b=input().split()\n\nif op==\"+\":\n    print(int(a)+int(b))\nelse:\n    print(int(a)-int(b))"}
{"label": 30, "index": 3861, "code": "def execute(op, l, r):\n    if op == '+':\n        return l + r\n    else:\n        return l - r\n\nline = input()\nterms = line.split(' ')\nz = execute(terms[1], int(terms[0]), int(terms[2]))\nprint(z)\n"}
{"label": 30, "index": 3862, "code": "a, op, b = raw_input().strip().split(\" \")\na = int(a)\nb = int(b)\nif op == \"+\":\n\tprint a + b\nelif op == \"-\":\n\tprint a - b\n"}
{"label": 30, "index": 3863, "code": "data = input().split()\nA, op, B = int(data[0]), data[1], int(data[2])\nif op == \"+\":\n    print(A + B)\nelif op == \"-\":\n    print(A - B)"}
{"label": 30, "index": 3864, "code": "x, op, y = input().split()\nx = int(x)\ny = int(y)\n\nif op == '+':\n    print(x+y)\nelse:\n    print(x-y)"}
{"label": 30, "index": 3865, "code": "# coding=utf-8\n\nimport sys\nstdin = sys.stdin\ndef na(): return map(int, stdin.readline().split())\ndef ns(): return stdin.readline().strip()\n\ndef main():\n    a,op,b = stdin.readline().strip().split()\n    if op == '+':\n        print(int(a)+int(b))\n    else:\n        print(int(a)-int(b))\n    pass\n\n\nif __name__ == '__main__':\n    main()"}
{"label": 30, "index": 3866, "code": "print(eval(input()))"}
{"label": 30, "index": 3867, "code": "s =  input().split()\na = int(s[0])\nb = int(s[2])\nif s[1] == \"+\":\n    print(a + b)\nelse:\n    print(a - b)"}
{"label": 30, "index": 3868, "code": "# coding: utf-8\n\n\ndef main():\n    a, op, b = input().split()\n    if op == '+':\n        print(int(a) + int(b))\n    else:\n        print(int(a) - int(b))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 30, "index": 3869, "code": "# coding:utf-8\n\ndata=input().split()\nif data[1]==\"+\":\n\tprint((int(data[0]))+(int(data[2])))\nif data[1]==\"-\":\n\tprint((int(data[0]))-(int(data[2])))"}
{"label": 30, "index": 3870, "code": "a,b,c = map(str,raw_input().split())\nif b == '+':\n    print int(a) + int(c)\nelse:\n    print int(a) - int(c)\n"}
{"label": 30, "index": 3871, "code": "print(eval(input()))\n"}
{"label": 30, "index": 3872, "code": "from sys import stdin, stdout\ndef readLine_str_list():return list(map(str, stdin.readline().split()))\ndef main():\n    s = readLine_str_list()\n    if s[1]==\"+\":\n        print(int(s[0]) + int(s[2]))\n    else:\n        print(int(s[0]) - int(s[2]))\n\nif __name__ == \"__main__\":\n    main()"}
{"label": 30, "index": 3873, "code": "DATA = []\nDATA = raw_input().split()\nA = int(DATA[0])\nop = str(DATA[1])\nB = int(DATA[2])\n\nif op == '+':\n    print A + B\n\nelif op == '-' :\n    print A - B\n\n    "}
{"label": 30, "index": 3874, "code": "print(eval(input()))\n"}
{"label": 30, "index": 3875, "code": "a,op,b=input().split()\nif op == \"+\":\n    print(int(a)+int(b))\nelif op == \"-\":\n    print(int(a)-int(b))\n"}
{"label": 30, "index": 3876, "code": "# -*- coding: utf-8 -*-\n\nimport os\nimport sys\n\nclass Main(object):\n\n    def __init__(self):\n        pass\n\n    def some_method(self):\n        a, op, b = input().split()\n        a = int(a)\n        b = int(b)\n        if op == '+':\n            print(a + b)\n        else:\n            print(a - b)\n\n        return None\n\nif __name__ == '__main__':\n    m = Main()\n    m.some_method()\n"}
{"label": 30, "index": 3877, "code": "a, op, b = input().split()\na = int(a)\nb = int(b)\n\nif op == '+':\n      result = a + b\nelse:\n      result = a - b\nprint(result)\n"}
{"label": 30, "index": 3878, "code": "aopb = input().split()\n\nif aopb[1] == '+':\n    print(int(aopb[0]) + int(aopb[2]))\nelse:\n    print(int(aopb[0]) - int(aopb[2]))\n"}
{"label": 30, "index": 3879, "code": "import sys\n\nline = sys.stdin.readline()\nitems = line.split(\" \")\n\nif items[1] == \"+\":\n    print(int(items[0]) + int(items[2]))\nelse:\n    print(int(items[0]) - int(items[2]))"}
{"label": 30, "index": 3880, "code": "#!/usr/bin/python\n\nimport sys\n\ndef main(argv):\n    for line in sys.stdin:\n        a, op, b = line.strip().split()\n        a = int(a)\n        b = int(b)\n        if op == \"+\":\n            print a + b\n        else:\n            print a - b\n\nif __name__ == \"__main__\":\n    main(sys.argv)"}
{"label": 30, "index": 3881, "code": "\n\na, o, b = input().split()\na = int(a)\nb = int(b)\n\nif o == '+':\n    print(a+b)\nelif o == '-':\n    print(a-b)\n"}
{"label": 30, "index": 3882, "code": "print(eval(input()))"}
{"label": 30, "index": 3883, "code": "\nIN = list(input().strip().split())\nA = int(IN[0])\nB = int(IN[2])\nop = IN[1]\nif op=='+':\n\tprint(A+B)\nif op=='-':\n\tprint(A-B)"}
{"label": 30, "index": 3884, "code": "s = input().split()\nif s[1] == '+':\n\tprint(int(s[0])+int(s[2]))\nelse:\n\tprint(int(s[0])-int(s[2]))"}
{"label": 30, "index": 3885, "code": "\nA, op, B = input().split()\nA, B = int(A), int(B)\n\nif op == \"+\":\n    print(A + B)\nelse:\n    print(A - B)"}
{"label": 30, "index": 3886, "code": "print(eval(str(input())))"}
{"label": 30, "index": 3887, "code": "A, op, B = input().split()\nif op == '+':\n    print(int(A) + int(B))\nif op == '-':\n    print(int(A) - int(B))"}
{"label": 30, "index": 3888, "code": "print(eval(input()))"}
{"label": 30, "index": 3889, "code": "a,op,b=input().split()\na = int(a)\nb = int(b)\nif op=='+':\n    print(a+b)\nelse:\n    print(a-b)\n"}
{"label": 30, "index": 3890, "code": "s = input()\nx = s.split()\nA = int(x[0])\nop = x[1]\nB = int(x[2])\nif op == '+':\n    print(A + B)\nelif op == '-':\n    print(A - B)"}
{"label": 30, "index": 3891, "code": "i = input().split()\nif i[1] == '+':\n    print(int(i[0])+int(i[2]))\nelse:\n    print(int(i[0])-int(i[2]))"}
{"label": 30, "index": 3892, "code": "str = raw_input().split()\nprint int(str[0]) + int(str[2]) if str[1] == \"+\" else int(str[0]) - int(str[2])"}
{"label": 30, "index": 3893, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\ndef LI(): return list(map(int, input().split()))\ndef II(): return int(input())\ndef LS(): return input().split()\ndef S(): return input()\n\n\ndef main():\n    s = S()\n    return eval(s)\n\nprint(main())\n"}
{"label": 30, "index": 3894, "code": "A, op, B = input().split()\nA= int(A)\nB = int(B)\nop = str(op)\n\nif op == \"+\":\n    print(A+B)\nelse:\n    print(A-B)\n"}
{"label": 30, "index": 3895, "code": "A, op, B = input().split()\nA = int(A)\nB = int(B)\n\nif op == '+':\n    print(A + B)\nelse:\n    print(A - B)"}
{"label": 30, "index": 3896, "code": "a, b, c = input().split()\nif b == \"+\":\n    print(int(a) + int(c))\nelse:\n    print(int(a) - int(c))\n"}
{"label": 30, "index": 3897, "code": "a, op, b = input().split()\na = int(a)\nb = int(b)\nif op == \"+\":\n    print(a + b)\nelse:\n    print(a - b)\n"}
{"label": 30, "index": 3898, "code": "# -*- coding:utf-8 -*-\n\nA, op, B = input().split()\n\nif op == \"+\":\n    print(int(A) + int(B))\nelse:\n    print(int(A) - int(B))\n"}
{"label": 30, "index": 3899, "code": "a, b, c = map(str, input().split())\na = int(a)\nc = int(c)\nif b == '+' :\n    print(a+c)\nelse :\n    print(a-c)"}
{"label": 31, "index": 3900, "code": "N = int(input())\nT = [int(n) for n in input().split()]\nM = int(input())\nP=[]\nX=[]\nfor i in range(M):\n    a,b=[int(n) for n in input().split()]\n    P.append(a)\n    X.append(b)\n\ns=0\nfor i in range(N):\n    s += T[i]\n\nfor i in range(M):\n    print ( s - (T[P[i]-1] - X[i] ) )\n"}
{"label": 31, "index": 3901, "code": "N = int(input())\nT = list(map(int, input().split()))\ns = sum(T)\nfor i in range(int(input())):\n    p, x = list(map(int, input().split()))\n    v = -(T[p - 1] - x)\n    print(s + v)\n"}
{"label": 31, "index": 3902, "code": "n = int(raw_input())\nls = map(int, raw_input().split())\nm = int(raw_input())\nfor _ in range(m):\n    p, x = map(int, raw_input().split())\n    print sum(ls) - ls[p-1] + x\n"}
{"label": 31, "index": 3903, "code": "n = int(input())\nt = list(map(int, input().split()))\nm = int(input())\npx = [list(map(int, input().split())) for i in range(m)]\n\nx = sum(t)\n\nfor i in range(m):\n    print(x+px[i][1]-t[px[i][0]-1])\n"}
{"label": 31, "index": 3904, "code": "N = int(input())\nT = list(map(int,input().split()))\nM = int(input())\nbase = sum(T)\nresult = []\nfor i in range(M):\n    P,X = map(int, input().split())\n    result.append(base - T[P-1] + X)\nprint(\"\\n\".join([str(x) for x in result]))"}
{"label": 31, "index": 3905, "code": "#!/usr/bin/env python\n# -*- coding:utf-8 -*-\nimport sys\n\ndef read_data():\n    lines = [line.rstrip() for line in sys.stdin]\n    ns = [int(n) for n in lines[1].split()]\n    ms = [(int(line.split()[0]), int(line.split()[1])) for line in lines[3:]]\n    return ns, ms\n\ndef main():\n    ns, ms = read_data()\n    for (drink_num, drink_sec) in ms:\n        result = sum(ns) - ns[drink_num-1] + drink_sec\n        print result\n\n\nif __name__ == \"__main__\":\n    main()\n"}
{"label": 31, "index": 3906, "code": "#coding:utf-8\nimport math\nimport string\nimport time\nimport fractions\n\n\n\nn = int(raw_input())\nt = map(int, raw_input().split())\nm = int(raw_input())\np = []\nfor i in range(m):\n\tp.append(map(int, raw_input().split()))\n\nret = 0\nsu = sum(t)\nfor i in p:\n\tprint su - (t[i[0] - 1] - i[1])\n\n"}
{"label": 31, "index": 3907, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\ndef LI(): return list(map(int, input().split()))\ndef II(): return int(input())\ndef LS(): return input().split()\ndef S(): return input()\n\n\ndef main():\n    n = II()\n    a = LI()\n    s = sum(a)\n    m = II()\n    for _ in range(m):\n        p,x = LI()\n        print(s-a[p-1]+x)\n\nmain()\n"}
{"label": 31, "index": 3908, "code": "import sys\n\n# sys.stdin = open('b1.in')\n\n\ndef read_int_list():\n    return list(map(int, input().split()))\n\n\ndef read_str_list():\n    return input().split()\n\n\ndef read_int():\n    return int(input())\n\n\ndef read_str():\n    return input()\n\n\ndef main():\n    n = read_int()\n    t = read_int_list()\n    m = read_int()\n    p = [0] * m\n    x = [0] * m\n    for i in range(m):\n        p[i], x[i] = read_int_list()\n        p[i] -= 1\n\n    for i in range(m):\n        res = 0\n        for j in range(n):\n            if j == p[i]:\n                time = x[i]\n            else:\n                time = t[j]\n            res += time\n        print(res)\n\n\nmain()\n"}
{"label": 31, "index": 3909, "code": "N = int(input())\nT = list(map(int,input().split()))\nM = int(input())\n\nP,X = [],[]\n\nfor _ in range(M):\n  Pi,Xi = map(int,input().split())\n  P.append(Pi-1)\n  X.append(Xi)\n\nfor p , x in zip(P,X):\n  print(sum(T) - T[p] + x)"}
{"label": 31, "index": 3910, "code": "\nN = int(input())\nT = [int(t) for t in input().split()]\nM = int(input())\n\nfor i in range(M):\n    p, x = map(int, input().split())\n\n    Tp = T[:]\n    Tp[p - 1] = x\n\n    print(sum(Tp))"}
{"label": 31, "index": 3911, "code": "if __name__ == \"__main__\":\n    N = int(input())\n    T = list(map(int, input().split()))\n    M = int(input())\n    data = []\n    for x in range(M):\n        p,x = map(int, input().split())\n        p -= 1\n        data.append([p, x])\n    result = 2 ** 60\n    for p,x in data:\n        res = 0\n        for i,t in enumerate(T):\n            if (i == p):\n                res += x\n            else:\n                res += t\n        print (res)\n"}
{"label": 31, "index": 3912, "code": "n = int(input())\nt = list(map(int, input().split()))\nm = int(input())\npx = [(int(p), int(x)) for (p, x) in [input().split() for _ in range(m)]]\nfor p, x in px:\n    t_cp = t.copy()\n    t_cp[p-1] = x\n    print(sum(t_cp))\n    "}
{"label": 31, "index": 3913, "code": "\nN = int(input())\nT = list(map(int, input().split()))\nM = int(input())\n\nP, X = list(), list()\n\nfor m in range(M):\n    p, x = list(map(int, input().split()))\n    P.append(p)\n    X.append(x)\n\nans = sum(T)\n\nfor m in range(M):\n    arg = P[m] - 1\n    val = X[m]\n\n    print(ans - T[arg] + val)\n"}
{"label": 31, "index": 3914, "code": "n = int(input())\nt_lst = [int(x) for x in input().split()]\nm = int(input())\npx_lst = [tuple(int(x) for x in input().split()) for _ in range(m)]\n\ntotal_time = sum(t_lst)\n\nfor i in range(m):\n    p, x = px_lst[i]\n    print(total_time - t_lst[p - 1] + x)"}
{"label": 31, "index": 3915, "code": "N = int(input())\nT = list(map(int, input().split()))\nmax = sum(T)\nM = int(input())\nfor i in range(M):\n    P, X = map(int, input().split())\n    diff = X - T[P - 1]\n    print(max + diff) \n    "}
{"label": 31, "index": 3916, "code": "n = int(input())\nt = list(map(int, input().split(' ')))\nm = int(input())\ndrinks = [list(map(int, input().split(' '))) for _ in range(m)]\n\nfor drink in drinks:\n    total = 0\n    for i in range(n):\n        if i+1 != drink[0]:\n            total += t[i]\n        else:\n            total += drink[1]\n    print(total)\n        \n"}
{"label": 31, "index": 3917, "code": "# -*- coding:utf-8 -*-\n\nN = int(input())\nT = list(map(int, input().split()))\nM = int(input())\n\nfor i in range(M):\n    p, x = map(int, input().split())\n    count = 0\n    for j in range(len(T)):\n        if j+1 == p:\n            count = count + x\n        else:\n            count = count + T[j]\n    print(count)\n"}
{"label": 31, "index": 3918, "code": "N = int(raw_input())\nline = map(int,raw_input().split(' '))\nM = int(raw_input())\nfor i in range(M):\n    x = map(int,raw_input().split(' '))\n    s = sum(line)-(line[x[0]-1]-x[1])\n    print s\n"}
{"label": 31, "index": 3919, "code": "n = int(input())\nt = list(map(int, input().split()))\nmem = 0\nm = int(input())\nfor i in range(m):\n    p, x = map(int, input().split())\n    mem = t[p-1]\n    t[p-1] = x\n    print(sum(t))\n    t[p-1] = mem"}
{"label": 31, "index": 3920, "code": "input()\nts = list(map(int, input().split()))\ns = sum(ts)\nm = int(input())\nfor _ in range(m):\n    p, x = map(int, input().split())\n    print(s + x - ts[p - 1])"}
{"label": 31, "index": 3921, "code": "N = int(input())\nT = list(map(int, input( ).split( ) ) )\nT_sum=sum(T)\nM = int(input())\nfor m in range(M):\n    p,x = map(int, input( ).split( ) )\n    print(T_sum -T[p-1]+x)"}
{"label": 31, "index": 3922, "code": "n=int(input())\nt=[int(i) for i in input().split()]\nm=int(input())\nfor i in range(m):\n    tc=t[:]\n    p,x=map(int,input().split())\n    tc[p-1]=x\n    print(sum(tc))\n"}
{"label": 31, "index": 3923, "code": "#!/usr/bin/python\n\nimport sys\n\ndef main(argv):\n    n = sys.stdin.readline().rstrip()\n\n    while n:\n        t = [int(i) for i in raw_input().split()]\n        m = int(raw_input())\n        total = sum(t)\n        for i in xrange(1, m + 1):\n            p, x = [int(j) for j in raw_input().split()]\n            print total - t[p - 1] + x\n\n        n = sys.stdin.readline().rstrip()\n\nif __name__ == \"__main__\":\n    main(sys.argv)"}
{"label": 31, "index": 3924, "code": "N = int(input())\nsT = input().split()\nT = []\nP = []\nX = []\nfor i in range(N):\n    T.append(int(sT[i]))\nM = int(input())\nfor i in range(M):\n    PX = input().split()\n    P.append(int(PX[0]))\n    X.append(int(PX[1]))\n\n\ntotal = sum(T)\nfor i in range(M):\n    print(total - T[P[i] - 1] + X[i])"}
{"label": 31, "index": 3925, "code": "N = int(input())\nT = [int(i) for i in input().split()]\nM = int(input())\nans = sum(T)\nfor i in range(M):\n\tP, X = map(int, input().split())\n\tprint(ans-T[P-1]+X)"}
{"label": 31, "index": 3926, "code": "N=int(input())\narr=list(map(int,input().split()))\nM=int(input())\nfor i in range(M):\n    tmp=list(arr)\n    a,b=map(int,input().split())\n    tmp[a-1]=b\n    print(sum(tmp))"}
{"label": 31, "index": 3927, "code": "n=int(input())\na=list(map(int,input().split()))\ntime_sum=sum(a)\n\nk=int(input())\nd=[]\n\nfor i in range(k):\n    p,x=map(int,input().split())\n    d.append((p-1,x))\n\nfor j in range(k):\n    print(time_sum-a[d[j][0]]+d[j][1])"}
{"label": 31, "index": 3928, "code": "# coding: utf-8\n\n\ndef main():\n    n = int(input())\n    t = list(map(int, input().split()))\n    m = int(input())\n    time = []\n    for i in range(m):\n        time.append(list(map(int, input().split())))\n\n    for i in range(m):\n        result = 0\n        for j in range(n):\n            if time[i][0]-1 == j:\n                result += time[i][1]\n            else:\n                result += t[j]\n        print(result)\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 31, "index": 3929, "code": "N = int(input())\nT = list(map(int, input().split()))\nM = int(input())\nPX = []\nfor i in range(M):\n    PX.append(list(map(int, input().split())))\n\nfor i in PX:\n    temp = T[:]\n    temp[i[0]-1] = i[1]\n    print(sum(temp))\n"}
{"label": 31, "index": 3930, "code": "import sys\n\n# sys.stdin = open('b1.in')\n\n\ndef read_int_list():\n    return list(map(int, input().split()))\n\n\ndef read_str_list():\n    return input().split()\n\n\ndef read_int():\n    return int(input())\n\n\ndef read_str():\n    return input()\n\n\ndef main():\n    n = read_int()\n    t = read_int_list()\n    m = read_int()\n    p = [0] * m\n    x = [0] * m\n    for i in range(m):\n        p[i], x[i] = read_int_list()\n        p[i] -= 1\n\n    s = sum(t)\n    for i in range(m):\n        j = p[i]\n        res = s - t[j] + x[i]\n        print(res)\n\n\nmain()\n"}
{"label": 31, "index": 3931, "code": "# -*- coding: utf-8 -*-\nfrom copy import deepcopy\n\n\ndef main():\n    problems = int(input())\n    solve_times = [int(e) for e in input().split()]\n    drinks = int(input())\n\n    for i in range(drinks):\n        solve_times_copy = deepcopy(solve_times)\n        problem_idx, solve_time = [int(e) for e in input().split()]\n        problem_idx -= 1\n        solve_times_copy[problem_idx] = solve_time\n        print(sum(solve_times_copy))\n\n\nmain()\n"}
{"label": 31, "index": 3932, "code": "N = int(input())\nT = list(map(int, input().split(\" \")))\n\nM = int(input())\nX = []\nfor _ in range(M):\n    x_list = list(map(int, input().split(\" \")))\n    X.append(x_list)\n\nT_sum = sum(T)\nfor (i, x) in X:\n    i -= 1\n    diff = T[i] - x\n    print(T_sum - diff)\n"}
{"label": 31, "index": 3933, "code": "n = int(raw_input())\nT = map(int,raw_input().split())\n\nm = int(raw_input())\nans = 0\nfor i in xrange(0, m):\n    p,x = map(int,raw_input().split())\n    temp = T[p-1]\n    T[p-1] = x\n    print sum(T)\n    T[p-1] = temp\n"}
{"label": 31, "index": 3934, "code": "n = int(input())\nt = [int(x) for x in input().split()]\nm = int(input())\nfor i in range(m):\n    p = [int(x) for x in input().split()]\n    ans = sum(t)-t[p[0]-1]+p[1]\n    print(ans)\n"}
{"label": 31, "index": 3935, "code": "n = input()\nt = map(int,raw_input().split())\nm = input()\ntot = reduce(lambda x,y: x+y,t)\nfor d in xrange(m):\n    temp = tot\n    p,x = map(int,raw_input().split())\n    temp -= t[p-1]\n    temp += x\n    print temp"}
{"label": 31, "index": 3936, "code": "input()\nt = list(map(int, input().split()))\ntotal = sum(t)\n\nm = int(input());\nfor i in range(m):\n    m, x = map(int, input().split())\n    print (total + x - t[m - 1])\n"}
{"label": 31, "index": 3937, "code": "n = int(input())\nt = list(map(int,input().split()))\nm = int(input())\norigin,ans = [],[]\n\nfor _ in range(m):\n\tp,x = map(int,input().split())\n\torigin.append(t[p-1])\n\tt[p-1] = x\n\tans.append(sum(t))\n\tt[p-1] = origin[0]\n\torigin = []\n\nfor i in range(m):\n\tprint(ans[i])"}
{"label": 31, "index": 3938, "code": "N = int(input())\nT = list(map(int, input().split()))\nM = int(input())\n\nfor i in range(M):\n\tp,x = map(int, input().split())\n\tprint(sum(T) + (x - T[p-1]))"}
{"label": 31, "index": 3939, "code": "n = int(input())\n\nt = list(map(int, input().split()))\n\nm = int(input())\n\nfor i in range(m):\n    ans = t\n    p, x = map(int, input().split())\n    tar = ans[p-1]\n    ans[p-1] = x\n    print(sum(ans))\n    ans[p-1] = tar\n"}
{"label": 31, "index": 3940, "code": "if __name__ == \"__main__\":\n    N = int(input())\n    T = list(map(int, input().split()))\n    M = int(input())\n    data = []\n    for x in range(M):\n        p,x = map(int, input().split())\n        p -= 1\n        data.append([p, x])\n    result = 2 ** 60\n    for p,x in data:\n        res = 0\n        for i,t in enumerate(T):\n            if (i == p):\n                res += x\n            else:\n                res += t\n        print (res)"}
{"label": 31, "index": 3941, "code": "input()\nT = list(map(int, input().split(' ')))\nS = sum(T)\nfor i in range(int(input())):\n    P, X = map(int, input().split(' '))\n    print(S - T[P - 1] + X)\n"}
{"label": 31, "index": 3942, "code": "N = int(input())\nT = list(map(int,input().split()))\nM = int(input())\nP = []\nX = []\nfor i in range(M):\n    a, b =map(int,input().split())\n    P.append(a)\n    X.append(b)\nfor i in range(M):\n    print(sum(T) - T[P[i]-1] + X[i])"}
{"label": 31, "index": 3943, "code": "N = int(raw_input())\nTs = map(int, raw_input().split())\nT = sum(Ts)\nM = int(raw_input())\nfor i in range(M):\n    P, X = map(int, raw_input().split())\n    print (T - Ts[P-1] + X)"}
{"label": 31, "index": 3944, "code": "import copy\nN = int(input())\nt = [int(x) for x in input().split()]\np = []\nfor _ in range(int(input())):\n\tp.append([int(x) for x in input().split()])\n\nresult = []\nori_t = copy.deepcopy(t)\nfor i in p:\n\tt = copy.deepcopy(ori_t)\n\tt[i[0]-1] = i[1]\n\tresult.append(sum(t))\n\nfor i in result:\n\tprint(i)"}
{"label": 31, "index": 3945, "code": "n = int(input())\nli = [0] * n\nli = list(map(int, input().split()))\nresult = sum(li)\n\nm = int(input())\n\nfor i in range(m) :\n  a,b = map(int, input().split())\n  print(result - li[a-1] + b)"}
{"label": 31, "index": 3946, "code": "N = int(input())\nlistT = [int(_) for _ in input().split()]\nM = int(input())\ntotal_listT = sum(listT)\n\nanswer = []\nfor i in range(M):\n    temp = [int(_) for _ in input().split()]\n    answer.append(total_listT - listT[temp[0]-1] + temp[1])\n\nfor _ in answer:\n    print(_)"}
{"label": 31, "index": 3947, "code": "input()\nt = list(map(int, input().split()))\nm = int(input())\nfor _ in range(m):\n    p, x = map(int, input().split())\n    t_n = t[:]\n    t_n[p - 1] = x\n    print(sum(t_n))\n"}
{"label": 31, "index": 3948, "code": "mondai = int(raw_input())\ntime_array = raw_input().split(\" \")\ndrink_num = int(raw_input())\n\nfor i in range(drink_num):\n    d = raw_input().split(\" \")\n    m_i = int(d[0]) - 1\n    d_time = int(d[1])\n\n    s = 0\n    for j in range(len(time_array)):\n        if j == m_i:\n            s += (d_time)\n        else:\n            s += int(time_array[j])\n    print s\n"}
{"label": 31, "index": 3949, "code": "# -*- coding: utf-8 -*-\n\nimport os\nimport sys\n\nclass Main(object):\n\n    def __init__(self):\n        pass\n\n    def some_method(self):\n        n = int(input())\n        ts = list(map(int, input().split()))\n        s = sum(ts)\n        m = int(input())\n        for i in range(m):\n            p, x = map(int, input().split())\n            print(s + (x - ts[p-1]))\n        \n        return None\n\nif __name__ == '__main__':\n    m = Main()\n    m.some_method()\n"}
{"label": 31, "index": 3950, "code": "N = input()\nt = input().split()\nT = [int(i) for i in t]\nS = sum(T)\nM = int(input())\nfor i in range(0, M):\n    N = input().split()\n    print(S - T[int(N[0]) - 1] + int(N[1]))"}
{"label": 31, "index": 3951, "code": "from collections import defaultdict\n\n\ndef main():\n    N = int(input())\n    T_list = list(map(int, input().split()))\n    M = int(input())\n    drink_list = []\n    for _ in range(M):\n        p, x = map(int, input().split())\n        drink_list.append((p, x))\n\n    for p, x in drink_list:\n        total = 0\n        for i, t in enumerate(T_list, start=1):\n            if i == p:\n                total += x\n            else:\n                total += t\n        print(total)\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 31, "index": 3952, "code": "_ = input()\nl = map(int,raw_input().strip().split())\nn = int(raw_input())\nfor x in xrange(n):\n\ta = map(int,raw_input().strip().split())\n\ttemp = l[a[0]-1]\n\tl[a[0]-1] = a[1]\n\tprint(sum(l))\n\tl[a[0]-1] = temp"}
{"label": 31, "index": 3953, "code": "n=int(input())\nt=[int(i) for i in input().split()]\nmax=sum(t)\nm=int(input())\nsum_list=[]\nfor i in range(m):\n    index,value=[int(j) for j in input().split()]\n    index-=1\n    temp=t[index]\n    t[index]=value\n    sum_list.append(sum(t))\n    t[index]=temp\nfor i in sum_list:\n    print(i)"}
{"label": 31, "index": 3954, "code": "N = int(input())\nT = list(map(lambda x:int(x), input().split()))\nM = int(input())\nP = [0]*M\nX = [0]*M\nfor i in range(M):\n\tp, x = map(lambda x:int(x), input().split())\n\tP[i] = p\n\tX[i] = x\n\nsum_origin = sum(T)\nfor i in range(M):\n\tsum = sum_origin-T[P[i]-1]+X[i]\n\tprint(sum)\n"}
{"label": 31, "index": 3955, "code": "N=int(raw_input().split()[0])\nT=map(int,raw_input().split())\nM=int(raw_input().split()[0])\nS=sum(T)\n\nfor _ in range(0,M):\n    p,x=map(int,raw_input().split())\n    print S-T[p-1]+x"}
{"label": 31, "index": 3956, "code": "N = int(input())\nT = list(map(int, input().split()))\nM = int(input())\nsm = sum(T)\nfor i in range(M):\n    P, X = list(map(int, input().split()))\n    print(sm + X-T[P-1])"}
{"label": 31, "index": 3957, "code": "n = input()\nt = map(int, raw_input().split())\ns = sum(t)\n\nm = input()\nfor i in range(m):\n\tp, x = map(int, raw_input().split())\n\tprint s - t[p - 1] + x"}
{"label": 31, "index": 3958, "code": "N = int(input())\nT = list(map(int , input().split()))\nM = int(input())\nPX = [list(map(int , input().split())) for i in range(M)]\n\n\nfor m in range(M):\n    print(sum(T) + PX[m][1] - T[PX[m][0]-1])"}
{"label": 31, "index": 3959, "code": "# -*- coding:utf-8 -*-\nN = int(input())\nT = list(map(int,input().split()))\nM = int(input())\nP = [ list(map(int,input().split())) for i in range (M) ]\n\nfor tmp in range (M):\n    ans = P[tmp][1]\n    for tmp2 in range (N):\n        if tmp2 == P[tmp][0] - 1:\n            continue\n        else:\n            ans += T[tmp2]\n    print(ans)"}
{"label": 31, "index": 3960, "code": "# -*- coding: utf-8 -*-\n# problem B\n\nN = int(input())\nT = list(map(int, input().split()))\nM = int(input())\nfor i in range(M):\n    P, X = map(int, input().split())\n    ans = sum(T) - T[P-1] + X\n    print(ans)"}
{"label": 31, "index": 3961, "code": "problem_num = int(input())\nsolve_time = []\nsum_time = 0\nfor t in input().split():\n    solve_time.append(int(t))\n    sum_time += int(t)\n\ndrink_num = int(input())\npair = []\nfor i in range(drink_num):\n    program_num, time = map(int, input().split())\n    pair.append((program_num, time))\n\nfor i in range(drink_num):\n    label = pair[i][0]\n    time = pair[i][1]\n    print(sum_time + time - solve_time[label - 1])\n"}
{"label": 31, "index": 3962, "code": "n = int(input())\nt = list(map(int, input().split()))\nm = int(input())\nsum_t = sum(t)\nfor i in range(m):\n    p, x = map(int, input().split())\n    ans = sum_t + x - t[p-1]\n    print(ans)\n"}
{"label": 31, "index": 3963, "code": "N = int(input())\nT = [int(i) for i in input().split()]\nM = int(input())\nfor i in range(M):\n    P, X = map(int, input().split())\n    U = T[P-1]\n    T[P-1] = X\n    print(sum(T))\n    T[P-1] = U\n    "}
{"label": 31, "index": 3964, "code": "N = int(raw_input())\nT = map(int,raw_input().split(\" \"))\nM = int(raw_input())\nP = []\nX = []\nanswer = []\nfor m in range(M):\n\tinput_line = map(int,raw_input().split(\" \"))\n\tP = input_line[0]\n\tX = input_line[1]\n\tanswer.append(sum(T) + X - T[P-1])\n\ntxt = \"\"\nfor a in answer:\n\tprint a\n"}
{"label": 31, "index": 3965, "code": "_ = raw_input()\ntests = [int(test) for test in raw_input().split(\" \")]\ntotal_time = sum(tests)\ndrinks = int(raw_input())\nfor _ in range(drinks):\n    i = [int(x) for x in raw_input().split(\" \")]\n    no, time = i[0], i[1]\n    print total_time - (tests[no - 1] - time)\n"}
{"label": 31, "index": 3966, "code": "import copy\n\nn = int(input())\nt = list(map(int, input().split()))\nm = int(input())\npx = []\nfor i in range(0, m):\n    px.append(list(map(int, input().split())))\n\nt_ = copy.deepcopy(t)\nfor i in range(0, m):\n    t_[px[i][0] - 1] = px[i][1]\n    print(sum(t_))\n    t_ = copy.deepcopy(t)"}
{"label": 31, "index": 3967, "code": "n = int(input())\nt = list(map(int, input().split()))\nm = int(input())\n\nfor i in range(m):\n    p, x = map(int, input().split())\n    res = t.copy()\n    res[p-1] = x\n    print(sum(res))"}
{"label": 31, "index": 3968, "code": "# -*- coding: utf-8 -*-\n\nimport os\nimport sys\n\nclass Main(object):\n\n    def __init__(self):\n        pass\n\n    def some_method(self):\n        n = int(input())\n        ts = list(map(int, input().split()))\n        s = sum(ts)\n        m = int(input())\n        for i in range(m):\n            p, x = map(int, input().split())\n            print(s + (x - ts[p-1]))\n        \n        return None\n\nif __name__ == '__main__':\n    m = Main()\n    m.some_method()\n"}
{"label": 31, "index": 3969, "code": "problem_num = input()\ntime_usual = map(int, raw_input().split())\nSUM = sum(time_usual)\nm = input()\nfor i in xrange(m):\n    p, time_drink = map(int, raw_input().split())\n    p -= 1\n    print SUM - time_usual[p] + time_drink"}
{"label": 31, "index": 3970, "code": "import copy\nn=int(raw_input())\nt=map(int,raw_input().split())\nm=int(raw_input())\npt=[map(int,raw_input().split()) for _ in xrange(m)]\nans=[0]*m\nfor i in xrange(m):\n    tmp=copy.deepcopy(t)\n    tmp[pt[i][0]-1]=pt[i][1]\n    for j in xrange(n):\n        ans[i]+=tmp[j]\nfor i in xrange(m):\n    print(ans[i])"}
{"label": 31, "index": 3971, "code": "import copy\n\nn = int(raw_input())\nt = map(int, raw_input().split())\nm = int(raw_input())\nfor i in range(m):\n    p, x = map(int, raw_input().split())\n    tt = copy.copy(t)\n    tt[p-1] = x\n    print sum(tt)"}
{"label": 31, "index": 3972, "code": "n = int(raw_input())\nt = [int(x) for x in raw_input().split()]\nm = int(raw_input())\n\ns = sum(t)\n\nfor i in range(m):\n    p, x = [int(z) for z in raw_input().split()]\n    print s - t[p - 1] + x\n"}
{"label": 31, "index": 3973, "code": "N = int(input())\nTs = list(map(int, input().split()))\nM = int(input())\nfor i in range(M):\n    Ts2 = Ts[:]\n    line = list(map(int, input().split()))\n    Ts2[line[0]-1] = line[1]\n    print(sum(Ts2))\n"}
{"label": 31, "index": 3974, "code": "n = int(input().rstrip())\nt_list = input().rstrip().split()\nt_list = [int(x) for x in t_list]\nm = int(input().rstrip())\n\ntmp_list = t_list\n\nfor i in range(m):\n    line = input().rstrip().split()\n    line = [int(x) for x in line]\n    before = tmp_list[line[0]-1]\n    val = line[1]\n\n    tmp_list[line[0]-1] = val\n\n    print(sum(tmp_list))\n\n    tmp_list[line[0]-1] = before"}
{"label": 31, "index": 3975, "code": "input()\nts = list(map(int, input().split()))\nt_sum = sum(ts)\nm = int(input())\nfor _ in range(m):\n    p, x = map(int, input().split())\n    print(t_sum - ts[p - 1] + x)\n"}
{"label": 31, "index": 3976, "code": "n = int(input())\nd = list(map(int, input().split()))\ns = sum(d)\nm = int(input())\nfor i in range(m):\n  k, v = map(int, input().split())\n  print(s - d[k-1] + v)\n "}
{"label": 31, "index": 3977, "code": "N = input()\nT = list(map(int, input().split()))\nM = int(input())\nsumT = sum(T)\nfor i in range(M):\n    P, X = map(int, input().split())\n    print(sumT - T[P-1] + X)"}
{"label": 31, "index": 3978, "code": "n=int(input())\nt=list(map(int,input().split()))\nall=sum(t)\nm=int(input())\nfor i in range(m):\n    p,x=map(int,input().split())\n    print(all-(t[p-1]-x))"}
{"label": 31, "index": 3979, "code": "n=int(input())\nt=input().split()\nm=int(input())\nfor i in range(m) :\n    p,x=input().split()    \n    sum=0\n    for i in range(n) :\n        if i==int(p)-1 :    sum=sum+int(x)\n        else :   sum=sum+int(t[i])\n    print(sum)\n"}
{"label": 31, "index": 3980, "code": "def ri(): return int(input())\ndef rli(): return list(map(int, input().split()))\ndef rls(): return list(input())\ndef pli(a): return \"\".join(list(map(str, a)))\n\nN = ri()\nT = rli()\nsm = sum(T)\nM = ri()\nfor i in range(M):\n    p, x = rli()\n    print(sm - T[p-1] + x)"}
{"label": 31, "index": 3981, "code": "N=int(input())\nT=list(map(int, input().split()))\nM=int(input())\nPX=[]\ntime=T[0]\nfor i in range(1,N):\n  time+=T[i] \n[PX.append(list(map(int, input().split()))) for i in range(M)] \nfor m in range(M): \n  print(time- T[PX[m][0]-1]+PX[m][1])"}
{"label": 31, "index": 3982, "code": "def main():\n    N = int(input())\n    T = list(map(int, input().split()))\n    M = int(input())\n    P, X = [0] * M, [0] * M\n    for i in range(M):\n        P[i], X[i] = map(int, input().split())\n    s = sum(T)\n    for i in range(M):\n        print(s - T[P[i]-1] + X[i])\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 31, "index": 3983, "code": "N = int(input())\n\nTs = list(map(int,input().split()))\nM = int(input())\nsumTime = sum(Ts)\nfor i in range(0,M):\n    pi, xi = map(int,input().split())\n    print(sumTime + xi - Ts[pi-1])"}
{"label": 31, "index": 3984, "code": "num_of_problems = int(input())\ntimes = input().split()\nfor i in range(num_of_problems):\n    times[i] = int(times[i])\nnum_of_drinks = int(input())\nchanges = []\nfor i in range(num_of_drinks):\n    l = input().split()\n    l[0] = int(l[0])\n    l[1] = int(l[1])\n    changes.append(l)\nfor i in changes:\n    diff = times[i[0]-1] - i[1]\n    times[i[0]-1] = i[1]\n    print(sum(times))\n    times[i[0]-1] += diff\n    \n\n\n    \n\n"}
{"label": 31, "index": 3985, "code": "#002\nN = int(input())\nT = [int(i) for i in input().split(\" \")]\nM = int(input())\nP=[i for i in range(M)]\nX=[i for i in range(M)]\nfor i in range(M):\n    P[i],X[i]= [int(j) for j in input().split(\" \")]\nfor i in range(M):\n    temp = T[P[i]-1]\n    T[P[i]-1]=X[i]\n    print(sum(T))\n    T[P[i]-1] = temp"}
{"label": 31, "index": 3986, "code": "from sys import stdin\n\nn=int(input())\ntemps=list(map(int,stdin.readline().split()))\ntotal=sum(temps)\nm=int(input())\n\nfor i in range(m):\n    prob,tBoisson=map(int,stdin.readline().split())\n    actu=total-temps[prob-1]+tBoisson\n    print(actu)\n"}
{"label": 31, "index": 3987, "code": "n=int(raw_input())\nt=map(int,raw_input().split())\nm=int(raw_input())\npt=[map(int,raw_input().split()) for _ in xrange(m)]\nans=[0]*m\nfor i in xrange(m):\n    tmp=list(t)\n    tmp[pt[i][0]-1]=pt[i][1]\n    for j in xrange(n):\n        ans[i]+=tmp[j]\nfor i in xrange(m):\n    print(ans[i])"}
{"label": 31, "index": 3988, "code": "N = int(input())\nT = [0] + list(map(int, input().split()))\nM = int(input())\n\nsumm = sum(T)\n\nfor i in range(M):\n\tP, X = map(int, input().split())\n\tprint(summ + X - T[P])"}
{"label": 31, "index": 3989, "code": "N = int(raw_input())\nT = list(map(int, raw_input().split(' ')))\nM = int(raw_input())\n\nx_p = []\nfor i in range(M):\n    x_p.append(map(int, raw_input().split(' ')))\n\nsum = sum(T)\n\nfor i in range(M):\n    print(sum-T[x_p[i][0]-1]+x_p[i][1])\n"}
{"label": 31, "index": 3990, "code": "# \u5165\u529b\u53d7\u3051\u53d6\u308a\nN = int(input())\ntime_list = input().split()\n# str\u304b\u3089int\u306b\u578b\u5909\u63db\ntime_list = [int(i) for i in time_list]\nM = int(input())\n\ni = 0\nwhile i < M:\n    time_i = time_list\n    P_i, X = map(int, input().split())\n    P_i_original = time_list[P_i - 1]\n    time_i[P_i - 1] = X\n    result = sum(time_i)\n    time_list[P_i - 1] = P_i_original\n    print(result)\n    i +=1"}
{"label": 31, "index": 3991, "code": "n = input()\nti = map(int, raw_input().split())\n\nm = input()\nxi = []\nfor i in range(m):\n\txi.append(map(int, raw_input().split()))\n\nfor i in range(len(xi)):\n\tp = xi[i][0]\n\tx = xi[i][1]\n\ts = 0\n\tfor j in range(n):\n\t\tif(j == p-1):\n\t\t\ts += x\n\t\telse:\n\t\t\ts += ti[j]\n\tprint s"}
{"label": 31, "index": 3992, "code": "N = int(input())\nT = list(map(int, input().split()))\nM = int(input())\ntmp = sum(T)\nfor m in range(M):\n    p, x = map(int, input().split())\n    print(tmp - T[p-1] + x)\n"}
{"label": 31, "index": 3993, "code": "N = int(input())\nT_res = list(map(int,input().split()))\nM = int(input())\nPX = []\nfor i in range(M):\n      PX.append(input().split())\n      PX[i][0] = int(PX[i][0])\n      PX[i][1] = int(PX[i][1])\n\nfor i in range(M):\n      org = T_res[PX[i][0]-1]\n      T_res[PX[i][0]-1] = PX[i][1]\n      print(sum(T_res))\n      T_res[PX[i][0]-1] = org\n"}
{"label": 31, "index": 3994, "code": "N=int(input())\nT=[int(i) for i in input().split()]\nM=int(input())\nk=[]\nfor i in range(M):\n PX=[int(j) for j in input().split()]\n k.append(sum(T)-T[PX[0]-1]+PX[1])\nfor i in k:\n print(i)"}
{"label": 31, "index": 3995, "code": "N=int(raw_input())\nT=map(int, raw_input().split())\nM=int(raw_input())\nfor i in xrange(M):\n    p, x = map(int, raw_input().split())\n    ans = 0\n    for j in xrange(N):\n        if j+1 == p:\n            ans += x\n        else:\n            ans += T[j]\n    print ans\n"}
{"label": 31, "index": 3996, "code": "N = int(input())\nT = list(map(int, input().split()))\nM = int(input())\nfor i in range(M):\n    P, X = map(int, input().split())\n    print(sum(T[:P-1]) + X + sum(T[P:]))"}
{"label": 31, "index": 3997, "code": "n = int(input())\nt = list(map(int, input().split()))\nm = int(input())\n\ni = 0\nwhile i < m:\n    p = list(map(int, input().split()))\n    tn = t[:]\n    tn[p[0] - 1] = p[1]\n    total = sum(tn)\n    print(str(total))\n    i += 1\n"}
{"label": 31, "index": 3998, "code": "N = input()\nT = map(int, raw_input().split())\nSUM = sum(T)\nM = input()\nfor i in range(M):\n  p,x = map(int, raw_input().split())\n  print SUM - T[p-1] + x"}
{"label": 31, "index": 3999, "code": "#input\nT = []\nN = int(raw_input())\nT = raw_input().split()\nM = int(raw_input())\nPX = []\nX = 0\nT1 = []\n\n#input matrix\nfor i in range(M):\n    PX.append(map(int,raw_input().split()))\n\n\nfor j in range(M):\n    #new time\n    T1 = T[:]\n    PJ = PX[j][0]\n    XJ = PX[j][1]\n    a = int(PJ)\n    b = int(XJ)\n    T1[a-1] = b\n    \n    #plus each time\n    X = 0\n    for k in range(N):\n            X += int(T1[k])\n    print X\n"}
{"label": 31, "index": 4000, "code": "N = int(input())\nT = [int(i) for i in input().split()]\nM = int(input())\ntotal = []\n\nfor i in range(M):\n    P, X = [int(j) for j in input().split()]\n    tmp = T[:]\n\n    tmp[P-1] = X\n    total.append(sum(tmp))\n\nfor i in range(M):\n    print(total[i])\n"}
{"label": 31, "index": 4001, "code": "#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n\nn = input()\nti = input().split()\nsum_ti = sum(map(int, ti))\n\nm = input()\nfor m in range(int(m)):\n    px = input().split()\n    sum_p = sum_ti - int(ti[int(px[0])-1]) + int(px[1])\n    print(sum_p)\n"}
{"label": 31, "index": 4002, "code": "n = int(raw_input().strip())\nt = map(int, raw_input().strip().split())\n\nt_all = sum(t)\n\nm = int(raw_input().strip())\nfor i in range(m):\n\tp, x = map(int, raw_input().strip().split())\n\tprint t_all - t[p-1] + x\n"}
{"label": 31, "index": 4003, "code": "n=int(input())\nl=[int(x) for x in input().split()]\ntt=sum(l)\nfor _ in range(int(input())):\n    p,x=map(int,input().split())\n    print(tt-l[p-1]+x)"}
{"label": 31, "index": 4004, "code": "N = int(input())\nT = list(map(int,input().split()))\nM =int(input())\n\nsumT = sum(T)\n\nfor _ in range(M):\n    p,x = map(int,input().split())\n    ans = sumT -T[p-1]+x\n    print(ans)\n"}
{"label": 31, "index": 4005, "code": "# -*- coding: utf-8 -*-\nN = int(raw_input())\nT = map(int, raw_input().split())\nM = int(raw_input())\nPX = [map(int, raw_input().split()) for i in xrange(M)]\n\nS = sum(T)\nfor P, X in PX:\n    print S - (T[P - 1] - X)\n\n"}
{"label": 31, "index": 4006, "code": "N = int(input())\nT = list(map(int, input().split()))\nM = int(input())\nP, X = [], []\nfor _ in [0]*M:\n    p, x = map(int, input().split())\n    P.append(p)\n    X.append(x)\ntotal = sum(T)\nfor i in range(len(P)):\n    print(total + X[i] - T[P[i]-1])\n"}
{"label": 31, "index": 4007, "code": "#ABC050B\n\nn=int(raw_input())\nt=map(int,raw_input().split())\nm=int(raw_input())\nv=[]\nfor i in xrange(m):\n u=t[:]\n p,x=map(int,raw_input().split())\n u[p-1]=x\n v.append(sum(u))\nfor i in xrange(m):\n print v[i]\n"}
{"label": 31, "index": 4008, "code": "N=int(input())\nT=list(map(int, input().split()))\nM=int(input())\nPX=[list(map(int,input().split())) for i in range(M)]\n\nfor m in range(M):\n  print(sum(T) + PX[m][1] - T[PX[m][0]-1])\n"}
{"label": 31, "index": 4009, "code": "# coding: utf-8\n# Here your code !\nN = int(input())\ndata = list(map(int, input().split()))\nM = int(input())\ndrink = [list(map(int, input().split())) for i in range(M)]\nS = 0\nfor i in range(N):\n    S += data[i]\nfor i in range(M):\n    print(S - (data[drink[i][0] - 1] - drink[i][1]))\n"}
{"label": 31, "index": 4010, "code": "N = int(input())\nT = list(map(int,input().split()))\nM = int(input())\npx = list()\n\nfor i in range(M):\n    px.append(list(map(int,input().split())))\n\nfor i in range(M):\n\n    ans = sum(T) - (T[px[i][0]-1] - px[i][1])\n    print(ans)\n    "}
{"label": 31, "index": 4011, "code": "N = input()\nT = map(int, raw_input().split())\nS = sum(T)\nM = input()\nfor i in xrange(M):\n    p, x = map(int, raw_input().split())\n    print S + x - T[p-1]\n"}
{"label": 31, "index": 4012, "code": "n = int(input())\nt = list(map(int, input().split()))\nm = int(input())\nwhile(m):\n\tp, x = map(int, input().split())\n\tprint(sum(t)-t[p-1]+x)\n\tm -= 1"}
{"label": 31, "index": 4013, "code": "n = int(input())\nli = [0] * n\nli = list(map(int, input().split()))\nresult = sum(li)\n\nm = int(input())\nr1 = [0] * m\nr2 = [0] * m\n\nfor i in range(m) :\n  a,b = map(int, input().split())\n  print(result - li[a-1] + b)"}
{"label": 31, "index": 4014, "code": "n = int(input())\nts = list(map(int, input().split()))\nm = int(input())\ns = sum(ts)\nfor i in range(m):\n    n,m = map(int, input().split())\n    print(s - ts[n-1] + m)\n\n"}
{"label": 31, "index": 4015, "code": "N = int(input())\nT = [int(i) for i in input().split()]\nM = int(input())\nt = sum(T)\nans = []\nfor i in range(M):\n    p, x = [int(i) for i in input().split()]\n    ans.append(t - T[p - 1] + x)\nfor i in range(M):\n    print(ans[i])\n"}
{"label": 31, "index": 4016, "code": "from sys import stdin\nn = int(stdin.readline())\na = [0] + map(int,stdin.readline().split())\nm = int(stdin.readline())\ns = sum(a)\nfor _ in xrange(m):\n x,y = map(int,stdin.readline().split())\n print s  + y - a[x]"}
{"label": 31, "index": 4017, "code": "n=int(input())\nt=list(map(int,input().split()))\ntotal=sum(t)\nm=int(input())\nfor _ in range(m):\n    p,x=map(int,input().split())\n    print(total-t[p-1]+x)\n"}
{"label": 31, "index": 4018, "code": "N = int(input())\nT = tuple(map(int, input().split()))\nM = int(input())\ns = sum(T)\nfor _ in range(M):\n    p, x = map(int, input().split())\n    print(s - T[p-1] + x)"}
{"label": 31, "index": 4019, "code": "N=int(input())\nT=list(map(int,input().split()))\nM=int(input())\n\nPP=[]\nXX=[]\n\nfor i in range(M):\n    P, X = map(int,input().split())\n    PP.append(P)\n    XX.append(X)\n    \nfor j in range(0,M):\n    TT=T[:]\n    PPP=PP[j]\n    TT[PPP-1]=XX[j]\n    total=sum(TT)\n    print(total)"}
{"label": 31, "index": 4020, "code": "N = int(input())\nT = [int(i) for i in input().split()]\nM = int(input())\nfor i in range(M):\n    P, X = map(int, input().split())\n    result = 0\n    for j in range(len(T)):\n        if j == (P-1):\n            result += X\n        else:\n            result += T[j]\n    print(result)\n"}
{"label": 31, "index": 4021, "code": "# -*- coding: utf-8 -*-\n\nimport os\nimport sys\n\nclass Main(object):\n\n    def __init__(self):\n        pass\n\n    def some_method(self):\n        n = int(input())\n        ts = list(map(int, input().split()))\n        s = sum(ts)\n        m = int(input())\n        for i in range(m):\n            p, x = map(int, input().split())\n            print(s + (x - ts[p-1]))\n        \n        return None\n\nif __name__ == '__main__':\n    m = Main()\n    m.some_method()\n"}
{"label": 31, "index": 4022, "code": "n=int(raw_input())\nt=map(int,raw_input().split())\ntotal=sum(t)\nm=int(raw_input())\nfor _ in xrange(m):\n\tp,x=map(int,raw_input().split())\n\tprint total-t[p-1]+x"}
{"label": 31, "index": 4023, "code": "n = input()\na = map(int, raw_input().split())\ns = sum(a)\nm = input()\nfor i in xrange(m):\n\tp, x = map(int, raw_input().split())\n\tp -= 1\n\tprint s - a[p] + x\n"}
{"label": 31, "index": 4024, "code": "n = int(input())\nt = list(map(int,input().split()))\nm = int(input())\n\nT = 0\nfor v in t:\n    T += v\n\nfor i in range(m):\n    p,x = map(int,input().split())\n    p -= 1\n    print(T-t[p]+x)\n"}
{"label": 31, "index": 4025, "code": "N = int(input())\nTs = list(map(int, input().split()))\nM = int(input())\nDs = []\nfor i in range(M):\n    Ds.append(list(map(int, input().split())))\n\n\nfor d in Ds:\n    print(sum(Ts) - Ts[d[0] - 1] + d[1])"}
{"label": 31, "index": 4026, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\n\ndef main():\n    N = int(input())\n    T = list(map(int, input().split()))\n\n    M = int(input())\n\n    s = sum(T)\n    for _ in range(M):\n        p, x = map(int, input().split())\n        p -= 1 # 0-based\n        print(s - T[p] + x)\n\nif __name__ == \"__main__\": main()\n"}
{"label": 31, "index": 4027, "code": "n = input()\nt = map(int, raw_input().split())\nm = input()\n\ns = sum(t)\nfor i in range(m):\n    p, x = map(int, raw_input().split())\n    print s - t[p-1] + x"}
{"label": 31, "index": 4028, "code": "n = int(input())\nt_list = list(map(int, input().split()))\nt_sum = sum(t_list)\nm = int(input())\npx_list = []\nfor i in range(m):\n\tpx_list.append(list(map(int, input().split())))\nfor j in range(m):\n\tprint(t_sum - t_list[px_list[j][0]-1] + px_list[j][1])"}
{"label": 31, "index": 4029, "code": "N = int(raw_input())\nT = [0] + map(int, raw_input().split())\nM = int(raw_input())\nP = [map(int, raw_input().split()) for _ in range(M)]\n\nS = sum(T)\nfor p, x in P:\n    print S - T[p] + x\n"}
{"label": 32, "index": 4030, "code": "s=raw_input().replace(\",\",\" \")\nprint(s)"}
{"label": 32, "index": 4031, "code": "s = input()\nprint(s.replace(\",\",\" \")) "}
{"label": 32, "index": 4032, "code": "import sys\ns=sys.stdin.readline()\nprint(s[:5]+' '+s[6:13]+' '+s[14:])"}
{"label": 32, "index": 4033, "code": "S=raw_input()\nprint(S.replace(\",\", \" \"))\n"}
{"label": 32, "index": 4034, "code": "s = input()\nprint(s[0]+s[1]+s[2]+s[3]+s[4]+\" \"+s[6]+s[7]+s[8]+s[9]+s[10]+s[11]+s[12]+\" \"+s[14]+s[15]+s[16]+s[17]+s[18])\n"}
{"label": 32, "index": 4035, "code": "print(\" \".join(input().split(\",\")))"}
{"label": 32, "index": 4036, "code": "print raw_input().replace(\",\", \" \")"}
{"label": 32, "index": 4037, "code": "line = input()\n\nprint(line.replace(\",\", \" \"))"}
{"label": 32, "index": 4038, "code": "print(input().replace(\",\", \" \"))"}
{"label": 32, "index": 4039, "code": "#coding:utf-8\nimport re\nprint(re.sub(\",\",\" \",input()))\n"}
{"label": 32, "index": 4040, "code": "print raw_input().replace(',', \" \")"}
{"label": 32, "index": 4041, "code": "x = input()\nprint(x.replace(\",\", \" \"))"}
{"label": 32, "index": 4042, "code": "S=input()\n\nS2=S[0:5]+' '+S[6:13]+' '+S[14:19]\n\nprint (S2)\n"}
{"label": 32, "index": 4043, "code": "s=input()\nc=s[0:5]+\" \"+s[6:13]+\" \"+s[14:19]\nprint(c)"}
{"label": 32, "index": 4044, "code": "S = input()\nprint(\" \".join(S.split(\",\")))\n"}
{"label": 32, "index": 4045, "code": "s = input().split(',')\nprint(' '.join(s))"}
{"label": 32, "index": 4046, "code": "S = input().split(\",\")\nfor i in range(3):\n   print(S[i])\n"}
{"label": 32, "index": 4047, "code": "print ' '.join(raw_input().split(','))"}
{"label": 32, "index": 4048, "code": "print raw_input().replace(\",\", \" \")\n"}
{"label": 32, "index": 4049, "code": "print(input().replace(\",\", \" \"))"}
{"label": 32, "index": 4050, "code": "\ns = input().split(\",\")\n\nprint(*s)"}
{"label": 32, "index": 4051, "code": "ss = raw_input().strip().split(',')\nout = ''\nfor i in range(len(ss)):\n    out += ss[i]\n    if i != len(ss) - 1:\n        out += ' '\nprint out"}
{"label": 32, "index": 4052, "code": "haiku = input()\nprint(haiku.replace(\",\" , \" \"))\n"}
{"label": 32, "index": 4053, "code": "# -*- coding: utf-8 -*-\nINF=10**10\n\ndef main():\n    \n    s=input()\n    print(s.replace(\",\",\" \"))\n    \nif __name__==\"__main__\":\n    main()\n    "}
{"label": 32, "index": 4054, "code": "s = input()\n\nprint(s.replace(',',' '))\n"}
{"label": 32, "index": 4055, "code": "print(input().rstrip().replace(\",\",\" \"))\n"}
{"label": 32, "index": 4056, "code": "print(input().replace(\",\", \" \"))\n"}
{"label": 32, "index": 4057, "code": "print(input().replace(',', ' '))"}
{"label": 32, "index": 4058, "code": "print(input().replace(\",\",\" \"))"}
{"label": 32, "index": 4059, "code": "print(input().replace(',', ' '))"}
{"label": 32, "index": 4060, "code": "s = input().split(',')\nprint(*s)\n"}
{"label": 32, "index": 4061, "code": "a, b, c = map(str, raw_input().split(\",\"))\n\nprint \" \".join([a, b, c])\n"}
{"label": 32, "index": 4062, "code": "print(' '.join(input().split(\",\")))"}
{"label": 32, "index": 4063, "code": "s = raw_input()\nprint s.replace(\",\", \" \")\n"}
{"label": 32, "index": 4064, "code": "print(input().replace(',',' '))\n"}
{"label": 32, "index": 4065, "code": "print(input().replace(',', ' '))"}
{"label": 32, "index": 4066, "code": "#001\na = raw_input()\na=a.replace(',',' ')\nprint(a)"}
{"label": 32, "index": 4067, "code": "print(input().replace(\",\", \" \"))"}
{"label": 32, "index": 4068, "code": "print(input().replace(',', ' '))"}
{"label": 32, "index": 4069, "code": "print(' '.join(input().split(',')))"}
{"label": 32, "index": 4070, "code": "from collections import defaultdict\n\n\ndef main():\n    print(input().replace(\",\", \" \"))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 32, "index": 4071, "code": "S = input()\nprint('{} {} {}'.format(S[:5], S[6:13], S[14:]))"}
{"label": 32, "index": 4072, "code": "a, b, c = input().split(\",\")\nprint(a + \" \" + b + \" \" + c)"}
{"label": 32, "index": 4073, "code": "print(\" \".join(input().split(\",\")))"}
{"label": 32, "index": 4074, "code": "def main():\n    s = input().split(',')\n    s = ' '.join(s)\n    print(s)\n\nif __name__ == \"__main__\":\n    main()\n"}
{"label": 32, "index": 4075, "code": "s = input()\nprint(s.replace(\",\", \" \"))\n"}
{"label": 32, "index": 4076, "code": "#! -*- coding: UTF-8 -*-\n\ns = input()\nprint(\" \".join(s.strip().split(\",\")))"}
{"label": 32, "index": 4077, "code": "s = str(input())\n\nprint(s[0:5] , s[6:13] , s[14:19])\n"}
{"label": 32, "index": 4078, "code": "S=input()\nprint(S[0]+S[1]+S[2]+S[3]+S[4]+\" \"+S[6]+S[7]+S[8]+S[9]+S[10]+S[11]+S[12]+\" \"+S[14]+S[15]+S[16]+S[17]+S[18])"}
{"label": 32, "index": 4079, "code": "print(input().replace(\",\",\" \"))\n"}
{"label": 32, "index": 4080, "code": "#ARC051A\n\ns=raw_input()\nt=s.replace(\",\",\" \")\nprint t\n"}
{"label": 32, "index": 4081, "code": "s = input().replace(',', ' ')\nprint (s)\n"}
{"label": 32, "index": 4082, "code": "print(input().replace(\",\",\" \"))"}
{"label": 32, "index": 4083, "code": "s = input()\nprint(s.replace(\",\",\" \"))"}
{"label": 32, "index": 4084, "code": "import string\n\nline = raw_input()\n# line = \"haiku,atcoder,enjoy\"\nhaiku = line.split(\",\")\n\nlen1 = len(haiku[0])\nlen2 = len(haiku[1])\nlen2 = len(haiku[2])\n\nprint(haiku[0] + \" \" + haiku[1] + \" \" + haiku[2])"}
{"label": 32, "index": 4085, "code": "s = input()\nprint(s.replace(',', ' '))\n"}
{"label": 32, "index": 4086, "code": "# -*- coding: utf-8 -*-\nimport traceback\n\n\ndef main():\n    try:\n        s = raw_input().split(',')\n        return \" \".join(s)\n\n    except:\n        traceback.print_exc()\n        return 0\n\nprint main()\n"}
{"label": 32, "index": 4087, "code": "s = input()\nprint(s.replace(',',' ',3))"}
{"label": 32, "index": 4088, "code": "import sys\n\ns=raw_input()\n\nss=s.replace(',',' ',2)\n\nprint ss"}
{"label": 32, "index": 4089, "code": "s = input()\nx = s.split(',')\nprint(x[0]+' '+ x[1] + ' ' + x[2])"}
{"label": 32, "index": 4090, "code": "print(input().replace(',', ' '))\n"}
{"label": 32, "index": 4091, "code": "S = raw_input()\nS = S.replace(',', ' ')\nprint(S)"}
{"label": 32, "index": 4092, "code": "\n\n\na = input().replace(',', ' ')\nprint(a)"}
{"label": 32, "index": 4093, "code": "a, b, c = map(str, input().split(\",\"))\nprint(a, b, c)"}
{"label": 32, "index": 4094, "code": "# coding=utf-8\n\nimport sys\nstdin = sys.stdin\ndef na(): return map(int, stdin.readline().split())\ndef ns(): return stdin.readline().strip()\n\ndef main():\n    print(ns().replace(\",\", \" \"))\n    pass\n\n\nif __name__ == '__main__':\n    main()"}
{"label": 32, "index": 4095, "code": "print(input().replace(',', ' '))\n"}
{"label": 32, "index": 4096, "code": "print raw_input().replace(',', ' ')\n"}
{"label": 32, "index": 4097, "code": "s=str(input())\nprint( s.replace(\",\", \" \") )"}
{"label": 32, "index": 4098, "code": "s = input()\nprint(s.replace(',',' '))"}
{"label": 32, "index": 4099, "code": "s = input()\n\ns = s.replace(\",\",\" \")\nprint(s)"}
{"label": 32, "index": 4100, "code": "print(input().replace(\",\",\" \"))"}
{"label": 32, "index": 4101, "code": "s = input()\nt = s.replace(',', ' ')\nprint(t)"}
{"label": 32, "index": 4102, "code": "a=input()\nprint(a.replace(\",\",\" \"))"}
{"label": 32, "index": 4103, "code": "print(*input().split(\",\"))"}
{"label": 32, "index": 4104, "code": "s = input().split(\",\")\nfor w in s:\n    print(w, end=\" \")\nprint()\n"}
{"label": 32, "index": 4105, "code": "s = input()\n\nres = ''\nfor i in s:\n    if i == ',':\n        res += ' '\n    else:\n        res += i\nprint(res)"}
{"label": 32, "index": 4106, "code": "s = input()\ns = s.replace(\",\", \" \")\nprint(s)\n"}
{"label": 32, "index": 4107, "code": "S = input()\nans = S[:5]+' '+S[6:13]+' '+S[14:]\nprint(ans)\n"}
{"label": 32, "index": 4108, "code": "print(*input().split(','))"}
{"label": 32, "index": 4109, "code": "S = input().split(\",\")\nprint(*S)"}
{"label": 32, "index": 4110, "code": "getword = raw_input()\narray_word = list(getword)\n# print array_word\n\nfor num in range(len(array_word)):\n    if array_word[num]==\",\":\n        array_word[num]=\" \"\n\nans=\"\"\nfor str in array_word:\n    ans += str\n\nprint ans\n"}
{"label": 32, "index": 4111, "code": "print(*input().split(','))"}
{"label": 32, "index": 4112, "code": "s = input()\nprint(s[0:5], s[6:13], s[14:])"}
{"label": 32, "index": 4113, "code": "import re\ns = input()\n\ns = s.replace(',',' ')\n\nprint(s)"}
{"label": 32, "index": 4114, "code": "l = input().split(\",\")\ns = str(l[0]) + \" \" + str(l[1]) + \" \" + str(l[2])\n\nprint(s)"}
{"label": 32, "index": 4115, "code": "a = input()\nprint(a.replace(',',' '))"}
{"label": 32, "index": 4116, "code": "str=input()\ns=str.replace(\",\",\" \")\nprint(s)"}
{"label": 32, "index": 4117, "code": "a = input()\na = a.replace(',', ' ')\nprint(a)\n"}
{"label": 32, "index": 4118, "code": "if __name__=='__main__':\n    input_data = input()\n    a1 = input_data.split(\",\")[0]\n    a2 = input_data.split(\",\")[1]\n    a3 = input_data.split(\",\")[2]\n    print(\"{0} {1} {2}\".format(a1,a2,a3))"}
{"label": 32, "index": 4119, "code": "s = input()\ns = s.replace(\",\", \" \")\nprint(s)"}
{"label": 32, "index": 4120, "code": "s = input()\nprint(\" \".join(s.split(\",\")))\n\n"}
{"label": 32, "index": 4121, "code": "print(input().replace(',',' '))\n"}
{"label": 32, "index": 4122, "code": "print(input().replace(',', ' '))"}
{"label": 32, "index": 4123, "code": "b = input()\na = list(b)\n\nfor i in range(len(b)) :\n    if i == 5 or i == 13 :\n        print(' ',end ='')\n        continue\n    print(a[i],end ='')\n\nprint()"}
{"label": 32, "index": 4124, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\n\ndef main():\n    S = input()\n    print(S.replace(\",\", \" \"))\n\nif __name__ == \"__main__\": main()\n"}
{"label": 32, "index": 4125, "code": "def main():\n    print(input().replace(',', ' '))\n\n\nif __name__ == \"__main__\":\n    main()"}
{"label": 32, "index": 4126, "code": "print(*input().split(','))\n"}
{"label": 32, "index": 4127, "code": "print(input().replace(',', ' '))"}
{"label": 32, "index": 4128, "code": "print raw_input().replace(',',' ')"}
{"label": 32, "index": 4129, "code": "s = raw_input()\nprint ' '.join(s.split(','))"}
{"label": 32, "index": 4130, "code": "# https://abc051.contest.atcoder.jp/submit\ns=raw_input()\nss=\"\"\n\nfor i in s:\n\tif i is ',':\n\t\tss+=' '\n\telse:\n\t\tss+=i\nprint ss"}
{"label": 32, "index": 4131, "code": "S=str(input())\nprint(S.replace(',',' '))"}
{"label": 32, "index": 4132, "code": "\nc =  input()\ns = c.split(\",\")\ns2 = s[0] + \" \" + s[1] + \" \" + s[2]\nprint(s2)"}
{"label": 32, "index": 4133, "code": "a = list(input())\n\nfor i in a:\n    if i == ',':\n        print(\" \", end = \"\")\n    else:\n        print(i, end = \"\")\n\nprint()"}
{"label": 32, "index": 4134, "code": "#-*-coding = utf-8 -*-\n\na,b,c = map(str, raw_input().split(\",\"))\nprint a+ \" \"+b+\" \"+c\n"}
{"label": 32, "index": 4135, "code": "# -*- coding:utf-8 -*-\nprint(input().replace(\",\",\" \"))"}
{"label": 32, "index": 4136, "code": "#-*- coding:utf-8 -*-\ns = str(input())\ns = s.rsplit(',')\nfor i in range(len(s)-1):\n    print(s[i], end = ' ')\nprint(s[len(s)-1])"}
{"label": 32, "index": 4137, "code": "from sys import stdin\nprint ' '.join(stdin.readline().strip().split(','))"}
{"label": 32, "index": 4138, "code": "print \" \".join(raw_input().split(\",\"))\n\n"}
{"label": 32, "index": 4139, "code": "S = raw_input()\nprint S.replace(\",\", \" \")\n"}
{"label": 32, "index": 4140, "code": "s = input().split(\",\")\nprint(s[0] + \" \" + s[1] + \" \" + s[2] )\n\n"}
{"label": 32, "index": 4141, "code": "a = raw_input().strip().split(',')\nans = ''\nfor x in a:\n\tans += x\n\tans += ' '\nans = ans[:-1]\nprint(ans)"}
{"label": 32, "index": 4142, "code": "a = map(str,raw_input().split(\",\"))\n#a = raw_input()\n\nprint a[0] + \" \" + a[1] + \" \" + a[2]"}
{"label": 32, "index": 4143, "code": "s = list(map(str, input().split(',')))\nprint(' '.join(s))"}
{"label": 32, "index": 4144, "code": "a=list(map(str,input().split(',')))\nprint(' '.join(a))"}
{"label": 32, "index": 4145, "code": "s = raw_input().split(\",\")\nprint s[0] + \" \" + s[1] + \" \" + s[2]"}
{"label": 32, "index": 4146, "code": "s = input()\n\nfor item in s:\n    if item == ',':\n        print(' ', end='')\n    else:\n        print(item, end='')"}
{"label": 32, "index": 4147, "code": "a = input()\n\na = a.replace(\",\",\" \")\n\nprint(a)\n"}
{"label": 32, "index": 4148, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\ndef LI(): return list(map(int, input().split()))\ndef II(): return int(input())\ndef LS(): return input().split()\ndef S(): return input()\n\n\ndef main():\n    s = S()\n\n    return s.replace(',', ' ')\n\n\nprint(main())\n"}
{"label": 32, "index": 4149, "code": "s = input()\ns = s.split(',')\nprint(\" \".join(s))\n"}
{"label": 32, "index": 4150, "code": "print raw_input().replace(\",\", \" \")\n"}
{"label": 32, "index": 4151, "code": "s = input()\n\nprint(s.replace(',', ' '))"}
{"label": 32, "index": 4152, "code": "s=input().split(\",\")\nprint(s[0]+\" \"+s[1]+\" \"+s[2])\n"}
{"label": 32, "index": 4153, "code": "s = input()\nprint(s.replace(\",\",\" \"))\n"}
{"label": 32, "index": 4154, "code": "s = input().split(',')\nws = ' '\nprint(ws.join(s))"}
{"label": 32, "index": 4155, "code": "ans = []\nfor c in input():\n\tif c == ',':\n\t\tans.append(' ')\n\telse:\n\t\tans.append(c)\nprint(\"\".join(ans))\n"}
{"label": 32, "index": 4156, "code": "print(input().replace(\",\", \" \"))"}
{"label": 32, "index": 4157, "code": "a = raw_input().split(',')\nprint \" \".join(a)"}
{"label": 32, "index": 4158, "code": "def slv(string):\n    ret = ''\n    for i in range(len(string)):\n        if string[i] == ',':\n            ret += ' '\n        else:\n            ret += string[i]\n    return ret\n\nif __name__ == '__main__':\n    s = input()\n    print(slv(s))"}
{"label": 32, "index": 4159, "code": "# -*- coding:utf-8 -*-\n\nl = input().split()\ns = list(l[0])\n# print(s)\ns[5] = \" \"\ns[13] = \" \"\nprint(\"\".join(s))\n"}
{"label": 33, "index": 4160, "code": "A, B, C, D = map(int, input().split())\nS1 = A * B\nS2 = C * D\nif S1 > S2:\n    print(S1)\nelse:\n    print(S2)"}
{"label": 33, "index": 4161, "code": "a = list(map(int,input().split()))\ndef max(x,y):\n    if x < y:\n        return y\n    else:\n        return x\nprint(max(a[0]*a[1],a[2]*a[3]))"}
{"label": 33, "index": 4162, "code": "if __name__==\"__main__\":\n    a= list(map(int,input().strip().split()))\n    print(max(a[0]*a[1], a[2]*a[3]))\n"}
{"label": 33, "index": 4163, "code": "def solve():\n    A, B, C, D = map(int, input().split())\n    if A * B > C * D:\n        ans = A * B\n    else:\n        ans = C * D\n    print(ans)\n\nif __name__ == '__main__':\n    solve()"}
{"label": 33, "index": 4164, "code": "a, b, c, d = map(int, raw_input().split())\nprint a*b if a*b > c*d else c*d"}
{"label": 33, "index": 4165, "code": "# -*- coding:utf-8 -*-\nnum = list(map(int, input().split()))\nif num[0]*num[1] >= num[2]*num[3]:\n    print(num[0]*num[1])\nelse:\n    print(num[2]*num[3])"}
{"label": 33, "index": 4166, "code": "a, b, c, d = map(int, raw_input().split())\n\n\nprint max(a*b, c*d)"}
{"label": 33, "index": 4167, "code": "a,b,c,d = map(int,input().split())\ns1 = a*b\ns2 = c*d\nif s1 >= s2:\n    print(s1)\nelse:\n    print(s2)"}
{"label": 33, "index": 4168, "code": "A, B, C, D = map(int, input().split())\nprint(max(A * B, C * D))\n"}
{"label": 33, "index": 4169, "code": "A, B, C, D = map(int, input().split())\nprint(max(A*B, C*D))"}
{"label": 33, "index": 4170, "code": "A , B ,C , D = map(int, input().split())\nprint( max((A*B) , (C*D)))"}
{"label": 33, "index": 4171, "code": "a, b, c, d = map(int, input().split())\nprint(max(a * b, c * d))\n"}
{"label": 33, "index": 4172, "code": "A, B, C, D = map(int, input().split())\nif A * B > C * D:\n    print(A * B)\nelse:\n    print(C * D)\n    "}
{"label": 33, "index": 4173, "code": "A,B,C,D = map(int,raw_input().split())\nprint A*B if A*B>C*D else C*D"}
{"label": 33, "index": 4174, "code": "a,b,c,d=map(int,input().split())\nif a*b >= c*d:\n    print(a*b)\nelse:\n    print(c*d)"}
{"label": 33, "index": 4175, "code": "line = input()\nterms = line.split(' ')\nA = int(terms[0]) * int(terms[1])\nB = int(terms[2]) * int(terms[3])\nif A >= B:\n    print(A)\nelse:\n    print(B)\n"}
{"label": 33, "index": 4176, "code": "a,b,c,d = map(int,input().split())\nprint(max(a*b, c*d))"}
{"label": 33, "index": 4177, "code": "A, B, C, D = list(map(int, input().split()))\nS1 = A * B\nS2 = C * D\nif S1 >= S2:\n\tprint(S1)\nelse:\n\tprint(S2)"}
{"label": 33, "index": 4178, "code": "a, b, c, d = map(int, input().split())\n\nAB = a * b\nCD = c * d\n\nif (AB == CD):\n    print(AB)\nelif (AB > CD):\n    print(AB)\nelse:\n    print(CD)"}
{"label": 33, "index": 4179, "code": "def inint(): return int(input())\ndef inlint(): return list(map(int, input().split()))\ndef infloat(): return float(input())\ndef inlffloat(): return list(map(float, input().split()))\ndef inl(): return list(input())\ndef putlint(): return \"\".join(list(map(str, ans)))\n\na,b,c,d = inlint()\n\na = a*b\nb=c*d\nif a>b:\n    print(a)\nelse:\n    print(b)\n"}
{"label": 33, "index": 4180, "code": "#! /usr/bin/python3\n\nA,B,C,D= list(map(int,input().split()))\n\nprint(max(A*B, C*D))\n"}
{"label": 33, "index": 4181, "code": "# -*- coding: utf-8 -*-\na,b,c,d=[int(i)for i in input().split()]\nprint(max(a*b,c*d))\n\n"}
{"label": 33, "index": 4182, "code": "a, b, c, d = map(int, input().split())\n\nif a*b > c*d :\n    print (a*b)\nelse :\n    print(c*d)"}
{"label": 33, "index": 4183, "code": "A,B,C,D=list(map(int, input().split()))\n\nif A*B>=C*D:\n    print(A*B)\nelse:\n    print(C*D)"}
{"label": 33, "index": 4184, "code": "#ARC052A\n\na,b,c,d=map(int,raw_input().split())\ns1=a*b\ns2=c*d\nprint max(s1,s2)\n"}
{"label": 33, "index": 4185, "code": "a, b, c, d = map(int,input().split());\nprint(max(a*b,c*d));"}
{"label": 33, "index": 4186, "code": "A, B, C, D = map(int, input().split())\nif A*B>C*D:\n\tprint(A*B)\nelse:\n\tprint(C*D)"}
{"label": 33, "index": 4187, "code": "a,b,c,d=map(int,raw_input().split())\nif((a*b)<(c*d)):\n    print(c*d)\nelse:\n    print(a*b)"}
{"label": 33, "index": 4188, "code": "a = input().split()\nfor i in range(len(a)):\n    a[i] = int(a[i])\n    \nif a[0]*a[1] > a[2]*a[3]:\n    print(a[0]*a[1])\nelse:\n    print(a[2]*a[3])"}
{"label": 33, "index": 4189, "code": "A, B, C, D = map(int, input().split())\nlist = [A * B, C * D]\nprint(max(list))"}
{"label": 33, "index": 4190, "code": "a, b, c, d = map(int, input().split())\nprint(max(a*b, c*d))"}
{"label": 33, "index": 4191, "code": "[a, b, c, d] = list(map(int, input().split()))\n\nx = a * b\ny = c * d\n\nprint(max(x, y))\n"}
{"label": 33, "index": 4192, "code": "a,b,c,d=map(int,input().split())\nprint(max(a*b,c*d))\n"}
{"label": 33, "index": 4193, "code": "a,b,c,d = map(int,input().split())\nprint(max(a*b,c*d))"}
{"label": 33, "index": 4194, "code": "A,B,C,D = map(int,input().split())\nab = A*B\ncd = C*D\nif ab < cd:\n\tprint(cd)\nelse:\n\tprint(ab)"}
{"label": 33, "index": 4195, "code": "A, B, C, D = map(int, raw_input().split())\nprint max(A * B, C * D)\n"}
{"label": 33, "index": 4196, "code": "A,B,C,D=map(int,input().split())\n\n\ns1=A*B\ns2=C*D\nif s1>=s2:\n    print(s1)\nelse:\n    print(s2)\n"}
{"label": 33, "index": 4197, "code": "a,b,c,d = map(int,raw_input().split())\nprint a*b if a*b > c*d else c*d"}
{"label": 33, "index": 4198, "code": "a, b, c, d = map(int, input().split())\nprint(max(a*b,c*d))"}
{"label": 33, "index": 4199, "code": "a, b, c, d = map(int, input().split())\nprint(max(a*b, c*d))"}
{"label": 33, "index": 4200, "code": "a,b,c,d = list(map(int, input().split()))\nprint(max(a*b,c*d))\n"}
{"label": 33, "index": 4201, "code": "a, b, c, d = map(int, input().split())\nA = a * b\nB = c * d\nif A >= B:\n    print(A)\nelse:\n    print(B)\n"}
{"label": 33, "index": 4202, "code": "a,b,c,d=map(int,input().split())\nprint(max(a*b,c*d))"}
{"label": 33, "index": 4203, "code": "a,b,c,d=map(int,input().split())\nrec1=a*b\nrec2=c*d\nif rec1>rec2 :\n    print(rec1)\nelif rec1<rec2:\n    print(rec2)\nelse:\n    print(rec1)"}
{"label": 33, "index": 4204, "code": "A, B, C, D = map(int, input().split())\nprint(max(A * B, C * D))\n"}
{"label": 33, "index": 4205, "code": "a,b,c,d = map(int, input().split())\nprint(max(a*b,c*d))\n"}
{"label": 33, "index": 4206, "code": "a, b, c, d = map(int, input().split())\ns1 = a*b\ns2 = c*d\n\nif s1 > s2:\n    print(s1)\nelse:\n    print(s2)"}
{"label": 33, "index": 4207, "code": "s = list(map(int, input().split()))\n\nab = s[0] * s[1]\n\ncd = s[2] * s[3]\n\nif ab >= cd:\n\tans = ab\nelse:\n\tans = cd\n\nprint(ans)\n"}
{"label": 33, "index": 4208, "code": "A,B,C,D = [int(i) for i in raw_input().split(\" \")]     \nA = A*B\nC = C*D\nif(A > C):\n    print(A)\nelse:\n    print(C)"}
{"label": 33, "index": 4209, "code": "def Main():\n    A, B, C, D = map(int,input().split())\n    print(max((A*B), (C*D)))\n\nif __name__ == '__main__':\n    Main()"}
{"label": 33, "index": 4210, "code": "a = map(int,raw_input().split())\n#a = raw_input()\n\nif a[0]*a[1] == a[2]*a[3]:\n        print a[0]*a[1]\nelif a[0]*a[1] > a[2]*a[3]:\n        print a[0]*a[1]\nelse:\n        print a[2]*a[3]"}
{"label": 33, "index": 4211, "code": "a, b, c, d = map(int, input().split()); print(max(a * b, c * d))"}
{"label": 33, "index": 4212, "code": "A,B,C,D=map(int,input().split());print(max(A*B,C*D))"}
{"label": 33, "index": 4213, "code": "v = map(int, raw_input().split())\nprint max(v[0] * v[1], v[2] * v[3])\n"}
{"label": 33, "index": 4214, "code": "import numpy as np\n\nA ,B ,C, D = map(int,raw_input().split())\n\n\na=A*B\nc=C*D\n\n\nif a<c:\n    print c\nelse:\n    print a\n"}
{"label": 33, "index": 4215, "code": "a,b,c,d = map(int, raw_input().split())\n\nif a*b>=c*d:\n    print a*b\nelse:\n    print c*d\n"}
{"label": 33, "index": 4216, "code": "# -*- coding: utf-8 -*-\n\nimport os\nimport sys\n\nclass Main(object):\n\n    def __init__(self):\n        pass\n\n    def some_method(self):\n        a, b, c, d = map(int, input().split())\n        one = a * b\n        another = c * d\n        print(max(one, another))\n        return None\n\nif __name__ == '__main__':\n    m = Main()\n    m.some_method()\n"}
{"label": 33, "index": 4217, "code": "a,b,c,d = list(map(int, input().split()))\nprint(max(a*b,c*d))\n"}
{"label": 33, "index": 4218, "code": "a, b, c, d = map(int, input().split()); print(max(a * b, c * d))"}
{"label": 33, "index": 4219, "code": "a, b, c, d = [int(i) for i in input().split()]\nif a * b > c * d:\n    print(a * b)\nelif a * b < c * d:\n    print(c * d)\nelse:\n    print(a * b)\n"}
{"label": 33, "index": 4220, "code": "inp = input()\na, b, c, d = inp.split(' ')\n\nif int(a) * int(b) > int(c) * int(d):\n    print(int(a) * int(b))\nelse:\n    print(int(c) * int(d))\n"}
{"label": 33, "index": 4221, "code": "a, b, c, d = map(int, raw_input().split())\nprint a*b if a*b > c*d else c*d"}
{"label": 33, "index": 4222, "code": "A, B, C, D = map(int, input().split())\nR1 = A * B\nR2 = C * D\nif (R1 > R2):\n    print(str(R1))\nelse:\n    print(str(R2))"}
{"label": 33, "index": 4223, "code": "a,b,c,d = map(int,input().split())\n\nif a*b <= c*d : print (c*d)\nelse : print (a*b)\n"}
{"label": 33, "index": 4224, "code": "a,b,c,d=[int(i)for i in input().split()]\nprint(max(a*b,c*d))"}
{"label": 33, "index": 4225, "code": "from collections import defaultdict\n\n\ndef main():\n    A, B, C, D = map(int, input().split())\n    print(max(A * B, C * D))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 33, "index": 4226, "code": "A, B, C, D = map(int, input().split())\nprint(max(A*B, C*D))"}
{"label": 33, "index": 4227, "code": "a, b, c, d = map(int, input().split())\nprint(max(a*b, c*d))\n"}
{"label": 33, "index": 4228, "code": "s = input()\nx = s.split()\ny = [0,0,0,0]\ni = 0\nfor v in x:\n    y[i] = int(v)\n    i = i + 1\na1 = y[0] * y[1]\na2 = y[2] * y[3]\nif a1 >= a2:\n    print(a1)\nelse:\n    print(a2)"}
{"label": 33, "index": 4229, "code": "l = map(int, raw_input().split())\n\nx1 = l[0]*l[1]\nx2 = l[2]*l[3]\n\nprint max(x1,x2)"}
{"label": 33, "index": 4230, "code": "A,B,C,D = [int(i) for i in raw_input().split(' ')]\nAB = A*B\nCD = C*D\nif AB>CD:\n  print AB\nelse:\n  print CD"}
{"label": 33, "index": 4231, "code": "from collections import defaultdict\n\n\ndef main():\n    A, B, C, D = map(int, input().split())\n    print(max(A * B, C * D))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 33, "index": 4232, "code": "a, b, c, d = list(map(int, input().split()))\nprint(max(a * b, c * d))"}
{"label": 33, "index": 4233, "code": "line = map(int, raw_input().split())\na=line[0]*line[1]\ni=line[2]*line[3]\nprint max(a,i)"}
{"label": 33, "index": 4234, "code": "a, b, c, d = map(int, input().split())\nprint(max(a*b, c*d))"}
{"label": 33, "index": 4235, "code": "a,b,c,d = [int(i) for i in input().split()]\n\nif a*b > c*d:\n    s = a * b\nelse:\n    s = c * d\n\nprint(s)\n"}
{"label": 33, "index": 4236, "code": "A,B,C,D=map(int,raw_input().split())\nprint max([A*B,C*D])\n"}
{"label": 33, "index": 4237, "code": "A ,B ,C, D = [int(x) for x in input().strip().split(' ')]\nr1 ,r2  =A*B, C*D\nif (r1 > r2):\n    print(r1)\nelif(r2 >r1):\n    print(r2)\nelse:\n    print(r1)"}
{"label": 33, "index": 4238, "code": "#!/usr/bin/env python\n\na, b, c, d = map(int, input().split())\n\nif a * b < c * d:\n    print(c * d)\nelse:\n    print(a * b)\n"}
{"label": 33, "index": 4239, "code": "def read(): return list(map(int,input().split()))\n\na,b,c,d = read()\nprint(max(a * b, c * d))"}
{"label": 33, "index": 4240, "code": "a,b,c,d=map(int,raw_input().split())\nprint max(a*b,c*d)"}
{"label": 33, "index": 4241, "code": "data = list(map(int, input().split()))\na, b, c, d = data\nprint(max(a*b, c*d))"}
{"label": 33, "index": 4242, "code": "a, b, c, d = list(map(int, input().split()))\nif a*b > c*d:\n    print(a*b)\nelse:\n    print(c*d)"}
{"label": 33, "index": 4243, "code": "l = list(map(int, input().split()))\n\nprint(max(l[0] * l[1], l[2] * l[3]))\n"}
{"label": 33, "index": 4244, "code": "A, B, C, D = list(map(int, input().split()))\nif A*B > C*D :\n    print(A*B)\nelse:\n    print(C*D)"}
{"label": 33, "index": 4245, "code": "a, b, c, d = list(map(int, input().split()))\n\ns1 = a * b\ns2 = c * d\n\nif s1 >= s2:\n    print(s1)\nelse:\n    print(s2)"}
{"label": 33, "index": 4246, "code": "a, b, c, d = map(int, raw_input().split())\nprint max((a*b), (c*d))\n"}
{"label": 33, "index": 4247, "code": "a, b, c, d = map(int, input().split())\nif a*b == c*d:\n    print(a*b)\nelse:\n    print(max(a*b, c*d))\n"}
{"label": 33, "index": 4248, "code": "'''\nCoded by Ren Masahiro on Jan 24 2017\n\nAtCoder Beginner Contest 052\nA - Two Rectangles\n'''\n\na, b, c, d = (int(i) for i in input().split())\n\ndef main():\n    s1 = a*b\n    s2 = c*d\n\n    if s1 > s2:\n        print(s1)\n    else:\n        print(s2)\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 33, "index": 4249, "code": "#!/usr/bin/env python3\n# -*- coding: UTF-8 -*-\n\na, b, c, d = map(int, input().strip().split())\nprint(max(a*b, c*d))"}
{"label": 33, "index": 4250, "code": "a, b, c, d = map(int, raw_input().split())\n\nif a * b >= c * d:\n    print a * b\nelse:\n    print c * d"}
{"label": 33, "index": 4251, "code": "A, B, C, D = list(map(int, input().split()))\nprint(max(A*B,C*D))"}
{"label": 33, "index": 4252, "code": "A,B,C,D=map(int, input().split())\nif (A*B>=C*D):\n print(A*B)\nelse:\n print(C*D)\n"}
{"label": 33, "index": 4253, "code": "a,b,c,d=map(int,input().split())\nx = a*b\ny = c*d\n\nif x >= y:\n print(x)\nelse:\n print(y)"}
{"label": 33, "index": 4254, "code": "a, b, c, d = map(int, input().split())\nprint(max(a*b, c*d))"}
{"label": 33, "index": 4255, "code": "#coding: UTF-8\nA, B, C, D = map(int, input().split())\na1 = A*B\na2 = C*D\nif a1 >= a2:\n    print(a1)\nelse:\n    print(a2)"}
{"label": 33, "index": 4256, "code": "def main():\n    a, b, c, d = map(int, input().split())\n    ans = a*b if a*b >= c*d else c*d\n    print(ans)\n    \n\nif __name__ == \"__main__\":\n    main()"}
{"label": 33, "index": 4257, "code": "A, B, C, D = map(int, raw_input().split())\nprint max(A*B, C*D)"}
{"label": 33, "index": 4258, "code": "import sys\n\n# sys.stdin = open('a1.in')\n\n\ndef read_int_list():\n    return list(map(int, input().split()))\n\n\ndef read_str_list():\n    return input().split()\n\n\ndef read_int():\n    return int(input())\n\n\ndef read_str():\n    return input()\n\n\ndef main():\n    a, b, c, d = read_int_list()\n    res = max(a * b, c * d)\n    print(res)\n\n\nmain()\n"}
{"label": 33, "index": 4259, "code": "a,b,c,d = map(int,input().split())\nif a*b >= c*d :\n    print(a*b)\nelse:\n    print(c*d)"}
{"label": 33, "index": 4260, "code": "a, b, c, d = [int(x) for x in input().split()]\nprint(a * b if a * b > c * d else c * d)\n"}
{"label": 33, "index": 4261, "code": "a, b, c, d = map(int, input().split())\nif a*b >= c*d:\n    print(a*b)\nelse:\n    print(c*d)"}
{"label": 33, "index": 4262, "code": "a,b,c,d=(int(i) for i in input().split())\nprint(max(a*b,c*d))"}
{"label": 33, "index": 4263, "code": "s = raw_input().split()\np= int(s[0]) \nq= int(s[1])\nr= int(s[2])\ns= int(s[3])\ndef area(a,b,c, d):\n    if a*b > c*d:\n        print a*b\n    elif c*d > a*b:\n        print c*d\n    else:\n        print a*b\nx = area(p,q,r,s)"}
{"label": 33, "index": 4264, "code": "a,b,c,d = (int(i) for i in input().split())\nif (a*b >= c*d):\n    print(\"%d\" % (a*b))\nelse:\n    print(\"%d\" % (c*d))"}
{"label": 33, "index": 4265, "code": "a,b,c,d = map(int,input().split())\n \nif a*b >= c*d:\n  print(a*b)\nelse:\n  print(c*d)"}
{"label": 33, "index": 4266, "code": "a, b, c, d = map(int, input().split())\nprint(max(a*b, c*d))"}
{"label": 33, "index": 4267, "code": "a, b, c, d = map(int, input().split())\n\nif (a*b > c*d):\n    print(a*b)\nelse:\n    print(c*d)"}
{"label": 33, "index": 4268, "code": "a, b, c, d = map(int, input().split())\nprint(max((a*b), (c*d)))"}
{"label": 33, "index": 4269, "code": "a, b, c, d = map(int,input().split())\n\nprint(max(a * b, c * d))\n"}
{"label": 33, "index": 4270, "code": "a,b,c,d = map(int,input().split())\nif a * b >= c * d:\n    print(a * b)\nelse:\n    print(c * d)"}
{"label": 33, "index": 4271, "code": "a,b,c,d=map(int,input().split())\nprint(max(a*b,c*d))"}
{"label": 33, "index": 4272, "code": "A, B, C, D = map(int, raw_input().split())\nprint max(A*B, C*D)"}
{"label": 33, "index": 4273, "code": "A, B, C, D = map(int, input().split())\nS = A * B if A * B >= C * D else C * D\nprint(S)"}
{"label": 33, "index": 4274, "code": "a, b, c, d = map(int, input().split())\nx=a*b\ny=c*d\nif(x > y):\n    print(x)\nelse:\n    print(y)"}
{"label": 33, "index": 4275, "code": "a,b,c,d = map(int, input().split())\nprint(a* b if a * b > c * d else c * d)"}
{"label": 33, "index": 4276, "code": "a,b,c,d = map(int,raw_input().split())\nab =a*b\ncd=c*d\nif ab > cd:\n    print ab\nelse:\n    print cd"}
{"label": 33, "index": 4277, "code": "# -*- coding: utf-8 -*-\nA,B,C,D= map(int, raw_input().split())\nprint max(A*B,C*D)"}
{"label": 33, "index": 4278, "code": "a, b, c, d = map(int, raw_input().split())\n\nprint max(a * b, c * d)\n"}
{"label": 33, "index": 4279, "code": "a,b,c,d=map(int,input().split())\nS=a*b\nT=c*d\nprint(max(S,T))"}
{"label": 33, "index": 4280, "code": "a,b,c,d = map(int,raw_input().split())\nif a*b >= c*d:\n    print a*b\nelse:\n    print c*d"}
{"label": 33, "index": 4281, "code": "a,b,c,d = map(int, raw_input().split())\nprint max(a*b, c*d)\n"}
{"label": 33, "index": 4282, "code": "a,b,c,d= [int(i) for i in input().split()]\nprint(max(a * b, c * d))\n"}
{"label": 33, "index": 4283, "code": "A, B, C, D = [int(i) for i in input().split()]\n\ns1 = A*B\ns2 = C*D\n\nif s1 >= s2:\n    print(s1)\nelse:\n    print(s2)"}
{"label": 33, "index": 4284, "code": "a,b,c,d=map(int,raw_input().split())\nprint max(a*b,c*d)"}
{"label": 33, "index": 4285, "code": "import math\n\nl = map(int, raw_input().split())\n\nA = l[0]\nB = l[1]\nC = l[2]\nD = l[3]\n\nif A*B < C*D:\n    print(\"{}\".format(C*D))\nelse:\n    print(\"{}\".format(A*B))"}
{"label": 33, "index": 4286, "code": "A, B, C, D = map(int, input().split())\n\ni = A * B\nj = C * D\n\nif i == j:\n\tprint(i)\nelif i > j:\n\tprint(i)\nelif i < j:\n\tprint(j)"}
{"label": 33, "index": 4287, "code": "a, b, c, d = map(int, input().split())\nprint(max(a*b, c*d))\n"}
{"label": 33, "index": 4288, "code": "a, b, c, d = [int(t) for t in input().split()]\n\nj = a * b\nk = c * d\n\n\nprint(max(j, k))"}
{"label": 33, "index": 4289, "code": "A, B, C, D = map(int, input().split())\nprint(max(A*B,C*D))"}
{"label": 34, "index": 4290, "code": "n = int(input())\ns = input()\n\ndef caluculate_x(n, s):\n    x = 0\n    x_list = [0]\n    \n    i = 0\n    while (i < n):\n        if (s[i] == 'I'):\n            x += 1\n        elif (s[i] == 'D'):\n            x -= 1\n        \n        x_list.append(x)\n        \n        i += 1\n        \n    return x_list\n\nanswer = max(caluculate_x(n, s))\nprint(answer)"}
{"label": 34, "index": 4291, "code": "N = input()\nS = raw_input()\nans,max_ = 0,0\nfor char in S:\n    ans = ans + 1 if char is 'I' else ans - 1\n    max_ = ans if max_ <= ans else max_\nprint max_"}
{"label": 34, "index": 4292, "code": "# -*- coding: utf-8 -*-\n\ndef main():\n    N = int(input())\n    S = input()\n\n    x = 0\n    m = 0\n    for i in S:\n        if i == 'I':\n            x = x+1\n            if x > m:\n                m = x\n        else:\n            x = x-1\n    print(m)\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 34, "index": 4293, "code": "n = int(input())\ns = input()\nans = 0\nmax_ans = 0\n\nfor i in range(0,n):\n  if(s[i]=='I'):\n    ans+=1;\n  else:\n    ans-=1;\n  if(ans > max_ans):\n    max_ans = ans\nprint(max_ans);"}
{"label": 34, "index": 4294, "code": "length = int(input())\nvalues = input()\ncontinued_l = len(values)\nx = 0\nmax_x = 0\nfor c in values:\n    if c == 'I':\n        x += 1\n    elif c == 'D':\n        x -= 1\n    if x > max_x:\n        max_x = x\nprint(max_x)\n"}
{"label": 34, "index": 4295, "code": "N=int(raw_input())\nS=raw_input()\nprint max(map(lambda s : reduce(lambda x,y:x+(1 if y==\"I\" else -1),s,0),[S[:i]for i in range(1,len(S)+1)])+[0])"}
{"label": 34, "index": 4296, "code": "N = int(input())\nS = input()\nans = [0] * (N+1)\n\nfor i in range(N):\n\tif S[i] == 'I':\n\t\tans[i+1] = ans[i] + 1\n\telse:\n\t\tans[i+1] = ans[i] - 1\n\nprint(max(ans))"}
{"label": 34, "index": 4297, "code": "N = int(input())\nS = input()\nans = 0\nx = 0\nfor s in S:\n    if s == \"I\":\n        x += 1\n        ans = max(ans, x)\n    else:\n        x -= 1\nprint(ans)\n"}
{"label": 34, "index": 4298, "code": "N = int(input())\nS = input()\n\n\ncount = 0\nMAX = 0\nfor i in S:\n    if i == 'I':\n        count += 1\n    elif i == 'D':\n        count -= 1\n    if MAX < count:\n        MAX = count\n\nprint(MAX)\n"}
{"label": 34, "index": 4299, "code": "n = int(input())\ns = input()\ntmp = 0\nans = 0\n\nfor i in range(n):\n    if s[i] == \"I\":\n        tmp += 1\n    else:\n        tmp -= 1\n    if ans < tmp:\n        ans = tmp\nprint(ans)"}
{"label": 34, "index": 4300, "code": "if __name__ == \"__main__\":\n    N = int(input())\n    S = input()\n    x = 0\n    vs = []\n    vs.append(x)\n    for c in S:\n        if c == 'I':\n            x += 1\n        else:\n            x -= 1\n        vs.append(x)\n    print(max(vs))"}
{"label": 34, "index": 4301, "code": "from collections import defaultdict\n\n\ndef main():\n    N = int(input())\n    S = input()\n    x = 0\n    ans = 0\n    for s in S:\n        if s == \"I\":\n            x += 1\n        else:\n            x -= 1\n        ans = max(ans, x)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 34, "index": 4302, "code": "\nN = int(input())\nS = input()\n\nx = 0\nans = 0\n\nfor s in S:\n    if s == 'I':\n        x += 1\n    else:\n        x -= 1\n    ans = max(x, ans)\n\nprint(ans)\n"}
{"label": 34, "index": 4303, "code": "#coding: UTF-8\nN = int(input())\nS = input()\n\nx = 0\nX = 0\nfor i in range(1,N+1):\n    if S[i-1] == 'I':\n        x+=1\n    elif S[i-1] == 'D':\n        x-=1\n    if x >= X:\n        X = x\nprint(X)"}
{"label": 34, "index": 4304, "code": "N = int(input())\nS = list(input())\n\ncnt = 0\nli = [0]\n\nfor i in range(N):\n    if S[i] is 'I':\n        cnt += 1\n    else:\n        cnt -= 1\n    li.append(cnt)\n\nprint(max(li))\n"}
{"label": 34, "index": 4305, "code": "n = int(input())\ns = input()\n\nx = 0\nans = 0\nfor ss in s:\n    if ss == 'I':\n        x += 1\n        ans = max(ans, x)\n    else:\n        x -= 1\n\nprint(ans)\n"}
{"label": 34, "index": 4306, "code": "N = int(raw_input())\nS = raw_input()\nmax = 0\nx = 0\nfor s in S:\n\tx += 1 if s == \"I\" else -1\n\tif x > max: max = x\nprint max"}
{"label": 34, "index": 4307, "code": "n = int(input())\ns = input()\nans, x = 0, 0\n\nfor i in range(n):\n    if s[i] == 'I':\n        x += 1\n    elif s[i] == 'D':\n        x -= 1\n    ans = max(ans, x)\nprint(ans)\n"}
{"label": 34, "index": 4308, "code": "N = int(raw_input())\nS = raw_input()\nmax = 0\nx = 0\nfor s in S:\n  if s == 'I':\n    x+=1\n  else:\n    x-=1\n  if x>max:\n    max = x\nprint max"}
{"label": 34, "index": 4309, "code": "n = int(input())\ns = list(input())\ntmp = [0 for x in range(n+1)]\ncurrent=0\nfor idx, ss in enumerate(s):\n    if ss=='I':\n        tmp[idx+1]=tmp[current]+1\n    else:\n        tmp[idx+1]=tmp[current]-1\n    current+=1\nprint(max(tmp))\n"}
{"label": 34, "index": 4310, "code": "n = int(input())\ns = input()\nx = int(0)\nx_max = int(0)\n\nfor i in s:\n    if i == 'I':\n        x += 1\n    else:\n        x -= 1\n    if x > x_max:\n        x_max = x\n\nprint(x_max)\n"}
{"label": 34, "index": 4311, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\n\ndef main():\n    N = int(input())\n    S = input()\n\n    x = xmax = 0\n    for c in S:\n        if c == \"I\":\n            x += 1\n            if x > xmax:\n                xmax = x\n        elif c == \"D\":\n            x -= 1\n\n    print(xmax)\n\nif __name__ == \"__main__\": main()\n"}
{"label": 34, "index": 4312, "code": "import numpy as np\n\na=int(raw_input())\n\ncom = raw_input()\n\n#print a\ncoma = list(com)\n\nnum =[]\ns=0\nnum.append(0)\nfor i in coma:\n    if i == \"I\":\n        s=s+1\n        num.append(s)\n    else:\n        s=s-1\n        num.append(s)\n\n#print num\n#print s\nprint max(num)\n"}
{"label": 34, "index": 4313, "code": "N = int(input())\nS = input()\n\nx = 0\nx_max = 0\n\nfor i in S:\n    if i == \"I\":\n        x += 1\n    else:\n        x -= 1\n    if x > x_max:\n        x_max = x\n\nprint(x_max)"}
{"label": 34, "index": 4314, "code": "n = int(input())\ns = input()\n\nma = 0\nx = 0\nfor i in range(len(s)):\n    if s[i] == 'I':\n        x += 1\n    else:\n        x -= 1\n\n    if ma < x:\n        ma = x\n\n\nprint(ma)"}
{"label": 34, "index": 4315, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\ndef LI(): return list(map(int, input().split()))\ndef II(): return int(input())\ndef LS(): return input().split()\ndef S(): return input()\n\n\ndef main():\n    n = II()\n    s = S()\n    r = 0\n    t = 0\n    for c in s:\n        if c == 'I':\n            t += 1\n            if r < t:\n                r = t\n        else:\n            t -= 1\n    return r\n\n\nprint(main())\n"}
{"label": 34, "index": 4316, "code": "#ARC052B\n\nn=int(raw_input())\ns=raw_input()\nres_max=0\ntemp=0\nfor i in range(len(s)):\n if s[i]=='I':\n  temp+=1\n  res_max=max(res_max,temp)\n elif s[i]=='D':\n  temp-=1\nprint res_max\n"}
{"label": 34, "index": 4317, "code": "N = int(input())\n\nS = [i for i in input()]\n\ntmp = 0\nm = 0\n\nfor i in range(N):\n    if S[i] == 'I':\n        tmp += 1\n    else:\n        tmp -= 1\n\n    if tmp > m:\n        m = tmp\n\nprint(m)\n"}
{"label": 34, "index": 4318, "code": "n=int(raw_input())\ns=raw_input()\nans=0;cnt=0\nfor i in xrange(n):\n    if s[i]==\"I\":\n        cnt+=1\n        ans=max(ans,cnt)\n    elif s[i]==\"D\":\n        cnt-=1\n        ans=max(ans,cnt)\nprint(ans)"}
{"label": 34, "index": 4319, "code": "s = input()\ns = input()\ncnt = 0\nans = 0\nfor c in s:\n  if c == 'I':\n    cnt += 1\n  else:\n    cnt -= 1\n  ans = max(ans, cnt)\nprint(ans)\n"}
{"label": 34, "index": 4320, "code": "def ri(): return int(input())\ndef rli(): return list(map(int, input().split()))\ndef rls(): return list(input())\ndef pli(a): return \"\".join(list(map(str, a)))\n\nN = ri()\nS = rls()\nans = 0\nnum = 0\nfor i in S:\n    num += 1 if i == \"I\" else -1\n    ans = max(ans, num)\nprint(ans)"}
{"label": 34, "index": 4321, "code": "from collections import Counter\ninput()\nmymax=0\ns=0\nfor i in input():\n    if i =='I':\n        s+=1\n        mymax=max(mymax,s)\n    if i=='D':\n        s-=1\nprint(mymax)"}
{"label": 34, "index": 4322, "code": "N = int(input())\nS = input()\nx = 0\nans = 0\nfor i in range(N):\n\tif S[i] == 'I':\n\t\tx+=1\n\telse:\n\t\tx-=1\n\tans=max(ans, x)\nprint(ans)"}
{"label": 34, "index": 4323, "code": "n = int(input())\ns = input()\nx = 0\nmax = 0\nfor i in s:\n    if i == \"I\":\n        x += 1\n        if x > max:\n            max = x\n    else:\n        x -= 1\n\n        \nprint(max)"}
{"label": 34, "index": 4324, "code": "#coding: shift_jis\n\n\nN = int(raw_input())\nS = raw_input()\nx = 0\ny = [x]\nfor i in range(N):\n    if S[i] == 'I':\n        x += 1\n    elif S[i] == 'D':\n        x -= 1\n    y.append(x)\nprint max(y)"}
{"label": 34, "index": 4325, "code": "# -*- coding:utf-8 -*-\nN = int(input())\nS = input()\nx = 0\nmaximum = 0\n\nfor factor in range (0, len(S)):\n    if S[factor] == 'I':\n        x += 1\n    elif S[factor] == 'D':\n        x -= 1\n    \n    if maximum < x:\n        maximum = x\n\nprint(maximum)"}
{"label": 34, "index": 4326, "code": "#002\nN = int(raw_input())\nS = raw_input()\nresult = 0\nlist = [0]\nfor i in range(N):\n    if S[i] == \"I\":\n        result+=1\n        list.append(result)\n    else:\n        result -=1\n        list.append(result)\nlist.sort()\nprint(list[N])"}
{"label": 34, "index": 4327, "code": "n = input()\ns = input()\nans = 0\nx = 0\nfor c in s:\n    if c == \"I\":\n        x += 1\n        ans = max(ans, x)\n    else:\n        x -= 1\nprint(ans)\n"}
{"label": 34, "index": 4328, "code": "# coding: utf-8\n# Here your code !\n\nnum=int(input())\nwords=input().rstrip()\nx=0\nxmax=0\n\nfor i in words:\n    if i==\"I\":\n        x+=1\n    elif i==\"D\":\n        x-=1\n    \n    if x>xmax:\n        xmax=x\n\nprint(xmax)"}
{"label": 34, "index": 4329, "code": "#!/usr/bin/env python3\n# -*- coding: UTF-8 -*-\n\n_ = input()\nst = input().strip()\ntotal = 0\nresult = [0]\n\nfor i in st:\n    if (i == 'I'):\n        total += 1\n        result.append(total)\n    else:\n        total -= 1\n        result.append(total)\nprint (max(result))"}
{"label": 34, "index": 4330, "code": "n = int(input())\ns = list(input())\nx = 0\nans = 0\nfor i in range(n):\n    if s[i]==\"I\":\n        x += 1\n        if x > ans:\n            ans = x\n    else:\n        x -= 1\nprint(ans)"}
{"label": 34, "index": 4331, "code": "t=input()\nx=0\nm=0\ns=raw_input()\nfor i in s:\n\tif i=='I':\n\t\tm+=1\n\telse:\n\t\tm-=1\n\tx=max(x,m)\nprint x"}
{"label": 34, "index": 4332, "code": "N = int(raw_input())\nS = raw_input()\nans, x = 0, 0\nfor ch in S:\n    if ch == 'I':\n        x += 1\n    elif ch == 'D':\n        x -= 1\n    ans = max(ans, x)\nprint ans"}
{"label": 34, "index": 4333, "code": "n = int(input())\ns = input()\nma = 0\nv = 0\nfor i in range(n):\n    if s[i] == 'I':\n        v += 1\n    else:\n        v -= 1\n    ma = max(ma, v)\nprint(ma)\n"}
{"label": 34, "index": 4334, "code": "# -*- coding: utf-8 -*-\n# problem B\n\nN = int(input())\nS = str(input())\n\nx = 0\nx1 = 0\n\n\nfor i in range(N):\n    if S[i] == 'I':\n        x += 1\n    if S[i] == 'D':\n        x -= 1\n    if x > x1:\n        x1 = x\n\nprint(int(x1))"}
{"label": 34, "index": 4335, "code": "n = int(input())\ns = input()\n\nc = 0\nmaxi = 0\nfor i in s:\n    if i == \"I\":c+=1\n    else :c-=1\n    maxi = max(maxi, c)\nprint (maxi)\n"}
{"label": 34, "index": 4336, "code": "# -*- coding: utf-8 -*-\n\nimport sys\nimport subprocess\nimport json\nimport time\nimport math\nimport re\nimport sqlite3\n\nN = int(input())\ns = input()\nx = 0\nmax_x = 0\n\nfor c in s:\n    if c == 'I': x += 1\n    else: x -= 1\n    max_x = max(max_x, x)\n\nprint(max_x)\n\n"}
{"label": 34, "index": 4337, "code": "N = int(input())\nS = str(input())\n\nv = 0\nrecord = 0\nfor k in S:\n  if (k == 'I'):\n    record += 1\n  else:\n    record -= 1\n  v = max(v, record)\n\nprint(v)\n"}
{"label": 34, "index": 4338, "code": "n = input()\na = list(input())\n\n\nsumlist = [0]\nsuma = 0\nfor i in a:\n    if i==\"I\":\n        suma += 1\n        sumlist.append(suma)\n    else:\n        suma -= 1\n        sumlist.append(suma)\nprint(max(sumlist))"}
{"label": 34, "index": 4339, "code": "N = int(input())\nS = input()\nx = 0\n \nmax = 0\nfor i in range(N):\n    if S[i] == \"I\":\n        x += 1\n    else:\n        x -= 1\n    if x > max:\n        max = x\n \nprint(max)"}
{"label": 34, "index": 4340, "code": "N = int(raw_input())\nS = raw_input()\nx = 0\nmaxx = 0\n\nfor c in S:\n    if c == 'I':\n        x += 1\n    if c == 'D':\n        x -= 1\n    if x > maxx:\n        maxx = x\n\nprint maxx"}
{"label": 34, "index": 4341, "code": "# your code goes here\nn = int(input())\ns = input()\n\nx = 0\nmax_x = 0\n\nfor c in s:\n\tif c == \"I\":\n\t\tx += 1\n\telse:\n\t\tx -= 1\n\tmax_x = max(max_x,x)\n\nprint(max_x)\n"}
{"label": 34, "index": 4342, "code": "N = int(input())\nS = str(input())\n\nx = [0] * N\n\nfor i in range(N):\n    if S[i] == \"I\":\n        x[i] = x[i-1] + 1\n    else:\n        x[i] = x[i-1] - 1\n\nif max(x) > 0:\n    print(max(x))\nelse:\n    print(0)\n"}
{"label": 34, "index": 4343, "code": "n = int(input())\ns = list(input())\ntotal,a = 0,[]\nfor c in s:\n\tif c == \"I\":\n\t\ttotal += 1\n\telse:\n\t\ttotal -= 1\n\ta.append(total)\n\nprint(max(a) if max(a) >= 0 else 0)\n\n"}
{"label": 34, "index": 4344, "code": "n=int(input())\ns=input()\nx=0\nmaxx=0\nfor char in s:\n  if char =='I':\n    x+=1\n  else:\n    x-=1\n  if maxx<x:\n    maxx=x\nprint (maxx)\n  "}
{"label": 34, "index": 4345, "code": "input()\ns=input()\na=c=0\nfor i in s:\n  if i=='I':a+=1\n  else:a-=1\n  c=max(a,c)\nprint(c)"}
{"label": 34, "index": 4346, "code": "N = int(input())\nS = input()\nx = 0\nans = 0\nfor l in S:\n\tif l == \"I\":\n\t\tx += 1\n\telif l == \"D\":\n\t\tx -= 1\n\tans = max(ans,x)\nprint(ans)"}
{"label": 34, "index": 4347, "code": "N = int(input())\nS = input()\n\nx = 0\nmax_x = 0\nfor s in S:\n\tif s=='I':\n\t\tx = x+1\n\telse:\n\t\tx = x-1\n\tmax_x = max(x, max_x)\nprint(max_x)"}
{"label": 34, "index": 4348, "code": "n = map(int, raw_input().split())\ns = raw_input()\nx = 0\nmax = 0\ni=0\nwhile i<len(s):\n    if s[i] == 'I':\n        x = x + 1\n        if max < x:\n            max = x\n    elif s[i] == 'D':\n        x = x - 1\n\n    i=i+1\nprint max"}
{"label": 34, "index": 4349, "code": "N = int(input().strip())\nS = input().strip()\nx = 0\nmaxOfx = 0\n'''\nif(not len(S) == N):\n    print('String length match the given value of N')\n    exit()\nelse:\n    for i in range(N):\n        if not (S[i] is 'I' or S[i] is 'D'):\n            print('The character at %d is not I or D'%(i+1))\n            exit()\n'''\nfor i in S:\n    if i is 'I':\n        x+=1\n        if x > maxOfx:\n            maxOfx = x\n    else:\n        x-=1\n        if x > maxOfx:\n            maxOfx = x\nprint(maxOfx)"}
{"label": 34, "index": 4350, "code": "n = int(input())\ns = input()\nm, x = 0, 0\nfor i in range(n):\n\tif s[i] == 'I':\n\t\tx += 1\n\t\tif x > m: m = x\n\telse:\n\t\tx -= 1\n\nprint(m)"}
{"label": 34, "index": 4351, "code": "n = int(input())\ns = input().rstrip()\n\nx = 0\nans = 0\nfor c in s:\n    x += (c == 'I')\n    x -= (c == 'D')\n    ans = max(ans,x)\n\nprint(ans)"}
{"label": 34, "index": 4352, "code": "N=int(input())\nS=input()\n\nx=0\n\nX=[0]\n\nfor i in range(N):\n    if S[i]=='I':\n        x=x+1\n        X.append(x)\n        \n    elif S[i]=='D':\n        x=x-1\n        X.append(x)\n\nprint(max(X))"}
{"label": 34, "index": 4353, "code": "N = int(input())\nS = input()\nx = 0\nret = 0\nfor s in S:\n    x += 1 if s == 'I' else -1\n    ret = max(ret, x)\nprint(ret)\n"}
{"label": 34, "index": 4354, "code": "n = int(input())\ns = input()\nx = 0\nmax = 0\nfor i in range(n):\n    if (s[i] == 'I'):\n        x += 1\n    elif (s[i] == 'D'):\n        x -= 1\n\n    if (max < x):\n        max = x\n\n\nprint(\"%d\" % max)"}
{"label": 34, "index": 4355, "code": "x = 0\nn = int(input())\ns = str(input())\ns = list(s)\ndata = []\nfor i in range(n):\n    if s[i] == 'I':\n        x += 1\n    elif s[i] == 'D':\n        x = x-1\n    data.append(x)\nm = max(data)\nif m > 0:\n    print(m)\nelse:\n    print(0)"}
{"label": 34, "index": 4356, "code": "N = input()\nS = raw_input()\nx = 0\nmaxx = 0\nfor c in S:\n  if c == 'I':\n    x += 1\n  else:\n    x -= 1\n  if(x > maxx):\n    maxx = x\nprint maxx"}
{"label": 34, "index": 4357, "code": "import sys\n\nn = int(input())\nS = input()\n\nx = 0\nans = 0\n\nfor s in S:\n    if s == \"I\":\n        x += 1\n        ans = max(ans, x)\n    else:\n        x -= 1\n\nprint(ans)"}
{"label": 34, "index": 4358, "code": "N = int(input())\nS = input()\n \nx = 0\nM = 0\nfor s in list(S):\n  if s == \"I\":\n    x += 1\n  elif s == \"D\":\n    x -= 1\n  M = max(M, x)\nprint(M)"}
{"label": 34, "index": 4359, "code": "n = int(input())\ns = input()\nx = 0\nmax = 0\nfor i in range(n):\n    if s[i] == 'I':\n        x += 1\n    else:\n        x -= 1\n    if x > max:\n        max = x\n\nprint(max)\n"}
{"label": 34, "index": 4360, "code": "raw_input()\nx = 0\nans = 0\nfor ch in raw_input():\n    if ch == 'I':\n        x += 1\n    else:\n        x -= 1\n    ans = max(ans, x)\nprint ans\n"}
{"label": 34, "index": 4361, "code": "n = int(input())\ns = input()\n\nx = 0\nans = 0\nfor i in range(n):\n    if s[i] == 'I':\n        x += 1\n    else:\n        x -= 1\n    if ans < x:\n        ans = x\nprint(ans)"}
{"label": 34, "index": 4362, "code": "N = int(input())\nS = input()\n\nx = 0\nmaxx = 0\nfor s in S:\n    if s == 'I':\n        x += 1\n        maxx = max(maxx, x)\n    else:\n        x -= 1\n\nprint(maxx)"}
{"label": 34, "index": 4363, "code": "N = int(raw_input())\nS = raw_input()\nx = 0\nans = 0\nd = {\"I\": 1, \"D\": -1}\nfor c in S:\n    x += d[c]\n    ans = max(ans, x)\nprint ans\n"}
{"label": 34, "index": 4364, "code": "x = 0;\nN = int(input());\n#Max value of x\nM = 0;\nS=input();\nfor i in range(N):\n    if S[i] == 'I':\n        x = x+1;\n    else:\n        x = x-1;\n    M = max(M,x);\nprint(M);\n"}
{"label": 34, "index": 4365, "code": "n = int(input())\ns = list(input())\nx = 0\nans = 0\nfor ss in s:\n    if ss == \"I\":\n        x += 1\n    else:\n        x -= 1\n    ans = max(ans, x)\n\nprint(ans)\n"}
{"label": 34, "index": 4366, "code": "input()\nS = input()\nx = 0\nmax_x = 0\nfor elem in S:\n    if elem == \"I\":\n        x += 1\n    elif elem == \"D\":\n        x -= 1\n    if x > max_x:\n        max_x = x\nprint(max_x)"}
{"label": 34, "index": 4367, "code": "n=int(input())\ns=list(str(input()))\nm=0\nans=0\nfor i in s:\n    if i=='D':\n        m -=1\n    elif i=='I':\n        m +=1\n    ans=max(ans,m)\nprint(ans)"}
{"label": 34, "index": 4368, "code": "x = 0\nxmax = 0\nn = int(input())\ns = input()\n\nfor ss in s:\n    if ss == \"I\":\n        x = x + 1\n        if x > xmax:\n            xmax = x\n    elif ss == \"D\":\n        x = x - 1\n\nprint(xmax)"}
{"label": 34, "index": 4369, "code": "n = int(raw_input())\ns = raw_input()\ncur = 0\nans = 0\nfor i in s:\n    if i == 'I':\n        cur += 1\n        ans = max(ans, cur)\n    else:\n        cur -= 1\n        ans = max(ans, cur)\nprint ans\n"}
{"label": 34, "index": 4370, "code": "input()\ncnt = ans = 0\nfor c in raw_input():\n    if c is \"I\":\n        cnt += 1\n    else:\n        cnt -= 1\n    ans = max(ans, cnt)\nprint ans\n"}
{"label": 34, "index": 4371, "code": "N = raw_input()\n\nS = raw_input()\n\nx = 0\nmax_x = x\n\nfor s in S:\n    if s == \"I\" :\n        x += 1\n    else :\n        x -= 1\n    if x > max_x :\n        max_x = x\n\nprint max_x\n"}
{"label": 34, "index": 4372, "code": "n = int(input())\ns = input()\nx = 0\nmax_x = 0\nfor i in s:\n    if i == 'I':\n        x += 1\n    elif i == 'D':\n        x -= 1\n    max_x = max(max_x, x)\nprint(max_x)"}
{"label": 34, "index": 4373, "code": "N = int(input())\nS = input()\nx = 0\nl = [x]\n\nfor i in range(N):\n    if S[i] == \"I\":\n        x += 1\n    else:\n        x -= 1\n    l.append(x)\nprint(max(l))\n"}
{"label": 34, "index": 4374, "code": "N = int(input())\nS = input()\n\nx = 0\nx_max = 0\n\nfor s in S:\n    if s == \"I\":\n        x += 1\n    else:\n        x -= 1\n    if x > x_max:\n        x_max = x\n\nprint(x_max)\n    "}
{"label": 34, "index": 4375, "code": "N = input()\nS = raw_input()\n\nnum = 0\nmax_num = 0\n\nfor i in list(S):\n    if i == 'I':\n        num += 1\n    elif i == 'D':\n        num -= 1\n    if max_num < num:\n        max_num = num\n        \nprint max_num"}
{"label": 34, "index": 4376, "code": "n=raw_input()\ns=raw_input()\ns=list(s)\nmax=0\nnow=0\n\nfor str in s:\n    if str==\"I\":\n        now+=1\n        if now>max:\n            max=now\n    if str==\"D\":\n        now-=1\nprint max\n"}
{"label": 34, "index": 4377, "code": "N = int(input())\nS = input()\nm = x = 0\nfor c in S:\n    if c == 'I':\n        x += 1\n        m = max(m, x)\n    else:\n        x -= 1\n\nprint(m)\n"}
{"label": 34, "index": 4378, "code": "n=input()\nS=input()\nans=0\nx=0\nfor s in S:\n    if s=='I':\n        x+=1\n    else:\n        x-=1\n    ans=max(x,ans)\nprint(ans)"}
{"label": 34, "index": 4379, "code": "def Main():\n    n = int(input())\n    s = input()\n    x = 0\n    ans = 0\n    for i in range(len(s)):\n        if s[i] == 'I':\n            x += 1\n        else:\n            x -= 1\n        ans = max(ans,x)\n\n    print(ans)\n\nMain()"}
{"label": 34, "index": 4380, "code": "# coding: utf-8\n\nn = input()\ns = raw_input()\ncnt = 0\nmax = 0\n\nfor i in s:\n    if i == \"I\":\n        cnt += 1\n    else:\n        cnt -= 1\n\n    if max < cnt:\n        max = cnt\n\nprint max"}
{"label": 34, "index": 4381, "code": "N = int(input())\nS = input()\nx = 0\nxmax = 0\nfor i in S:\n    if i == \"I\":\n        x += 1\n    else:\n        x -= 1\n    if x > xmax:\n        xmax = x\nprint(xmax)"}
{"label": 34, "index": 4382, "code": "# -*- coding: utf-8 -*-\n\n\ndef main(n, s):\n    count = 0\n    max_values = []\n    for c in s:\n        if c == 'I':\n            count += 1\n            max_values.append(count)\n        else:\n            count -= 1\n    max_values = max_values if max_values else [0]\n    return max(max_values) if 0 < max(max_values) else 0\n\n\nif __name__ == '__main__':\n    n = int(input())\n    s = input()\n    answer = main(n, s)\n    print(answer)"}
{"label": 34, "index": 4383, "code": "n = int(input())\n\nans = 0\nx = 0\nfor c in input():\n    x += 1 if c == 'I' else -1\n    ans = max(ans, x)\n\nprint(ans)\n"}
{"label": 34, "index": 4384, "code": "import numpy as np\n\nn = int(input())\n\ns = np.zeros(n)\ns = input()\n\nx = 0\nx1 = 0\n\nfor i in range(n):\n    if s[i] == 'I':\n        x1 += 1\n        if x1 > x:\n            x = x1\n    else:\n        x1 -= 1\n\nprint(x)"}
{"label": 34, "index": 4385, "code": "le = int(input())\na = [i for i in input()]\nans = 0\nsum = 0\nfor i in range(le):\n    if a[i] == \"I\":\n        sum = sum + 1\n    else:\n        sum = sum - 1\n    if ans < sum:\n        ans = sum\nprint(ans)"}
{"label": 34, "index": 4386, "code": "N = int(input())\nS = input()\nc = 0\nmax_c = 0\nfor i in range(len(S)):\n    if S[i] == 'I': c += 1\n    else: c -= 1\n    max_c = max(max_c, c)\nprint(max_c)"}
{"label": 34, "index": 4387, "code": "n = int(input())\ns = input()\nx = 0\nans = 0\n\nfor i in range(n):\n    if s[i] == 'I':\n        x += 1\n        ans = max(ans, x)\n    else:\n        x -= 1\n\nprint(ans)\n"}
{"label": 34, "index": 4388, "code": "N=int(input())\nS=input()\na=0\nb=0\nfor i in range(N):\n  if S[i]==\"I\":\n     a+=1\n  else:\n     a-=1\n  if b<a:\n     b=a\nprint(b)"}
{"label": 34, "index": 4389, "code": "n = int(input())\ns = input()\n\nres = [0] * (n + 1)\n\nfor i in range(1, n+1):\n    if s[i-1] == 'I':\n        res[i] = res[i-1] + 1\n    else:\n        res[i] = res[i-1] - 1\n\n#print(res)\nprint(max(res))"}
{"label": 34, "index": 4390, "code": "a = input()\nx = 0\ns = input()\nmax = 0\n\nfor i in s:\n  if i == 'I':\n    x+=1\n    if x > max:\n      max = x\n  elif i == 'D':\n    x-=1\n\nprint(max)\n"}
{"label": 34, "index": 4391, "code": "import sys\n\nN = input()\nS = input()\nsize = len(S)\n\nif N != str(size):\n print(\"\u4e0d\u6b63\u306a\u5165\u529b\u3067\u3059\u3002\")\n sys.exit()\n\nmax = 0\ntemp = 0\n\nfor i in range(size):\n if S[i] == \"I\":\n  temp += 1\n elif S[i] == \"D\":\n  temp -= 1\n else:\n  print(\"I,D\u4ee5\u5916\u306e\u6587\u5b57\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\")\n  sys.exit()\n \n if max < temp:\n  max = temp\n\nprint(max)"}
{"label": 34, "index": 4392, "code": "N=int(input())\nS=input()\nans=0\nx=0\nfor i in range (N):\n if (S[i]=='I'):\n  x+=1\n else:\n  x-=1\n ans=max(ans,x)\nprint(ans)"}
{"label": 34, "index": 4393, "code": "if __name__==\"__main__\":\n    a= int(input())\n    S= input().strip()\n    x = 0\n    m = 0\n    for ch in S:\n        if ch == \"I\":\n            x += 1\n        else:\n            x -= 1\n        m = max(m,x)\n    print(m)"}
{"label": 34, "index": 4394, "code": "N=int(input())\nS = input()\n\n\nX=0\nX_max=0\n\nfor i in range(N):\n    \n    if S[i]==\"I\":\n        X=X+1\n       \n        if X>X_max:\n            X_max=X\n    else:\n        X=X-1\n\nprint(X_max)\n"}
{"label": 34, "index": 4395, "code": "N=int(input())\nS=input()\nx=0\nM=0\n\nfor i in range(N):\n        if S[i]=='I':\n                x+=1\n        else:\n                x-=1\n        M=max(x,M)\n\nprint(M)\n"}
{"label": 34, "index": 4396, "code": "N = input()\nS = raw_input()\n\nx = 0\nans = 0\nfor s in S:\n    if s == 'I':\n        x += 1\n        ans = max(ans, x)\n    else:\n        x -= 1\nprint ans\n"}
{"label": 34, "index": 4397, "code": "n = int(input())\ns = input()\n\nmx = 0\nx = 0\nfor c in s:\n    if c == 'I':\n        x += 1\n        if x > mx:\n            mx = x\n    else:\n        x -= 1\n\nprint(mx)\n"}
{"label": 34, "index": 4398, "code": "n = int(input())\ns = input()\nx = 0\nl = [0]\nfor i in s:\n\tif i=='I':\n\t\tx += 1\n\t\tl.append(x)\n\telse:\n\t\tx -= 1\n\t\tl.append(x)\nprint(max(l))"}
{"label": 34, "index": 4399, "code": "n = input()\ns = raw_input()\n\np = 0\ntmp = 0\n\nfor i in range(len(s)):\n    if s[i] == 'I':\n        tmp += 1\n        if p < tmp:\n            p = tmp\n    else:\n        tmp -= 1\n\nprint p"}
{"label": 34, "index": 4400, "code": "n = int(input())\ns = input()\nans, x = 0, 0\n\nfor i in range(n):\n    if s[i] == 'I':\n        x += 1\n    elif s[i] == 'D':\n        x -= 1\n    ans = max(ans, x)\nprint(ans)\n"}
{"label": 34, "index": 4401, "code": "n = int(input())\ns = list(map(lambda x: 1 if x == \"I\" else -1, list(input())))\nx = 0\nm = 0\nfor i in s:\n    x += i\n    m = max(m,x)\nprint(m)\n"}
{"label": 34, "index": 4402, "code": "x_max = 0\nx = 0\ninput()\nfor c in list(input()):\n    if c == \"I\":\n        x += 1\n        if x > x_max:\n            x_max = x\n    else:\n        x -= 1\nprint(x_max)"}
{"label": 34, "index": 4403, "code": "from collections import defaultdict\n\n\ndef main():\n    N = int(input())\n    S = str(input())\n    x = 0\n    ans = 0\n    for c in S:\n        x += {\"I\": 1, \"D\": -1}[c]\n        ans = max(ans, x)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 34, "index": 4404, "code": "N = int(input())\nS = input()\nx = 0\nans = 0\nfor i in range(N):\n    if S[i] == 'I':\n        x += 1\n        ans = max(ans, x)\n    elif S[i] == 'D':\n        x -= 1\nprint(ans)"}
{"label": 34, "index": 4405, "code": "N=int(input())\nS=str(input())\nt=[0]\ns=0\nfor i in range(N):\n  if S[i]==\"I\":\n    s+=1\n  else:\n    s-=1\n  t+=[s]\nans=0\nfor i in range(N+1):\n  ans=max(ans,int(t[i]))\nprint(ans)"}
{"label": 34, "index": 4406, "code": "n,s=int(input()),input()\nprint(max([s[0:i].count('I')-s[0:i].count('D') for i in range(n+1)]))"}
{"label": 34, "index": 4407, "code": "n = int(input())\ns = input()\n\nx = 0\nmax_x = 0\n\nfor i in range(n):\n\tif s[i] == 'I':\n\t\tx += 1\n\t\tmax_x = max(max_x, x)\n\telse:\n\t\tx -= 1\n\nprint(max_x)"}
{"label": 34, "index": 4408, "code": "N = int(input())\nS = input()\nx = 0\nmax_x = 0\nfor c in S:\n    if c == 'I': x += 1\n    else: x -= 1\n    max_x = max(max_x, x)\nprint(max_x)\n"}
{"label": 34, "index": 4409, "code": "if __name__==\"__main__\":\n    N = int(input())\n    S = input()\n    n = 0\n    max = 0\n    for s in S:\n        if(s == \"I\"):\n            n += 1\n            if(max < n):\n                max = n\n        else:\n            n -= 1\n    print(max)\n"}
{"label": 34, "index": 4410, "code": "state = [0]\nn     = int(input())\nchars = list(input())\nfor c in chars:\n  if c == \"D\":\n    a = state[-1]\n    a -= 1\n  else:\n    a = state[-1]\n    a += 1\n  state.append(a)\nprint(max(state))\n"}
{"label": 34, "index": 4411, "code": "import copy\nN = input()\nS = input()\nMax = i = 0\nfor c in S:\n    if (c == 'I'):\n        i += 1\n        if ( Max < i):\n            Max = copy.deepcopy(i)\n    else:\n        i -= 1\nprint(str(Max))"}
{"label": 34, "index": 4412, "code": "# -*- coding: utf-8 -*-\nN = int(raw_input())\nS = raw_input()\nans = cur = 0\nfor s in S:\n    if s == \"I\":\n        cur += 1\n    else:\n        cur -= 1\n    ans = max(ans, cur)\nprint ans\n"}
{"label": 34, "index": 4413, "code": "N=map(int,input())\nS=input()\nans = 0\nx = 0\nfor c in S:\n  x += {'I':+1, 'D':-1}[c]\n  ans = max(ans, x)\nprint(ans)"}
{"label": 34, "index": 4414, "code": "input()\nres = n = 0\nfor c in input():\n    if c == 'I':\n        n += 1\n    else:\n        n -= 1\n    res = max(res, n)\nprint(res)\n"}
{"label": 34, "index": 4415, "code": "N = int(input())\nS = input()\nx, rec = 0, 0\nfor w in S:\n    if w == \"I\":\n        x += 1\n        if x > rec:\n            rec = x\n    else:\n        x -= 1\n\nprint(rec)"}
{"label": 34, "index": 4416, "code": "n = int(raw_input())\ns = raw_input()\nmx = 0\ncnt = 0\nfor c in s:\n    if c == 'I':\n        cnt += 1\n    else:\n        cnt -= 1\n    mx = max(mx, cnt)\nprint mx\n"}
{"label": 34, "index": 4417, "code": "n = int(input())\ns = input()\n\nans = 0\nnow = 0\nfor i in s:\n    if i == 'I':\n        now += 1\n    else:\n        now -= 1\n    ans = max(ans, now)\n\nprint(ans)\n"}
{"label": 34, "index": 4418, "code": "input()\nans,x=0,0\nfor c in input():\n    x+={'I':1,'D':-1}[c]\n    ans=max(ans,x)\nprint(ans)"}
{"label": 34, "index": 4419, "code": "n = int(input())\n\ns = list(map(str, input()))\ncount = 0\nsmax = 0\n\nfor i in range(len(s)):\n    if s[i] == \"I\":\n        count += 1\n        if count > 0 and count > smax:\n            smax += 1\n    else:\n        count -= 1\nprint(smax)\n"}
{"label": 35, "index": 4420, "code": "x = int(raw_input())\nprint 'ABC' if x<1200 else 'ARC'"}
{"label": 35, "index": 4421, "code": "rate = int(input())\nif rate < 1200:\n    print('ABC')\nelse:\n    print('ARC')"}
{"label": 35, "index": 4422, "code": "x = int(input())\nif x<1200:\n    print(\"ABC\")\nelse:\n    print(\"ARC\")"}
{"label": 35, "index": 4423, "code": "x = int(input())\n\nif x >= 1200:\n    print(\"ARC\")\nelse:\n    print(\"ABC\")"}
{"label": 35, "index": 4424, "code": "N=int(input())\nif N<1200:\n s=\"ABC\"\nelse:\n s=\"ARC\" \nprint(s)"}
{"label": 35, "index": 4425, "code": "print(\"ABC\" if int(input()) < 1200 else \"ARC\")"}
{"label": 35, "index": 4426, "code": "print(['ABC','ARC'][int(input())>1199])"}
{"label": 35, "index": 4427, "code": "x = int(input())\nif x < 1200:\n    print('ABC')\nelse:\n    print('ARC')"}
{"label": 35, "index": 4428, "code": "x = int(raw_input())\nif x < 1200:\n    print \"ABC\"\nelse:\n    print \"ARC\"\n"}
{"label": 35, "index": 4429, "code": "x = int(raw_input())\nif x <1200:\n  print \"ABC\"\nelse:\n  print \"ARC\""}
{"label": 35, "index": 4430, "code": "s = int(input())\nif s>=1200:\n    print(\"ARC\")\nelse:\n    print(\"ABC\")\n        "}
{"label": 35, "index": 4431, "code": "#coding: UTF-8\nX=int(input())\nif X<1200:\n    print(\"ABC\")\nelse:\n    print(\"ARC\")"}
{"label": 35, "index": 4432, "code": "# -*- coding: utf-8 -*-\nn = int(input())\nif n < 1200:\n    print(\"ABC\")\nelse:\n    print(\"ARC\")"}
{"label": 35, "index": 4433, "code": "x = int(input())\nif x < 1200:\n    print('ABC')\nelse:\n    print('ARC')\n"}
{"label": 35, "index": 4434, "code": "x = int(input())\nprint(\"ABC\" if x < 1200 else \"ARC\")"}
{"label": 35, "index": 4435, "code": "x = int(raw_input())\nif x < 1200:\n    print \"ABC\"\nelse:\n    print \"ARC\"\n"}
{"label": 35, "index": 4436, "code": "import sys\n\nrate = int(next(sys.stdin).strip())\nif rate >= 1200:\n    print('ARC')\nelse:\n    print('ABC')\n"}
{"label": 35, "index": 4437, "code": "x = int(input())\n \nif x < 1200:\n    a = 'ABC'\nelse:\n    a = 'ARC'\n \nprint(a)"}
{"label": 35, "index": 4438, "code": "x = int(input())\nif x < 1200:\n    print('ABC')\nelse:\n    print('ARC')"}
{"label": 35, "index": 4439, "code": "x= int(input())\nif x < 1200:\n    print(\"ABC\")\nelse:\n    print(\"ARC\")"}
{"label": 35, "index": 4440, "code": "x = int(input())\nif x < 1200 :\n  print(\"ABC\")\nelse :\n  print(\"ARC\")\n"}
{"label": 35, "index": 4441, "code": "print(\"ABC\" if 1200 > int(input()) else \"ARC\")"}
{"label": 35, "index": 4442, "code": "print(\"ABC\" if int(input()) < 1200 else \"ARC\")\n"}
{"label": 35, "index": 4443, "code": "rate=int(input())\nif rate<1200:\n\tprint(\"ABC\")\nelse:\n\tprint(\"ARC\")\n"}
{"label": 35, "index": 4444, "code": "input = int(input())\n\nif input < 1200:\n\tprint(\"ABC\")\nelif input >= 1200:\n\tprint(\"ARC\")"}
{"label": 35, "index": 4445, "code": "\ninD =input()\n\n\nif inD < 1200:\n\tprint \"ABC\"\nelse:\n\tprint \"ARC\""}
{"label": 35, "index": 4446, "code": "\na = int(input())\n\nif a >= 1200:\n    print(\"ARC\");\nelse:\n    print(\"ABC\");"}
{"label": 35, "index": 4447, "code": "print(\"ABC\" if int(input()) < 1200 else \"ARC\")\n"}
{"label": 35, "index": 4448, "code": "print \"ABC\" if input()<1200 else \"ARC\""}
{"label": 35, "index": 4449, "code": "x=raw_input().split()[0]\nif int(x)<1200:\n    print \"ABC\"\nelse:\n    print \"ARC\""}
{"label": 35, "index": 4450, "code": "x=int(input())\nif x< 1200:\n    print('ABC')\nelse:\n    print('ARC')\n"}
{"label": 35, "index": 4451, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\n\ndef main():\n    X = int(input())\n\n    print(\"ABC\" if X < 1200 else \"ARC\")\n\nif __name__ == \"__main__\": main()\n"}
{"label": 35, "index": 4452, "code": "x = int(input())\nif x < 1200:\n    print(\"ABC\")\nelse:\n    print(\"ARC\")"}
{"label": 35, "index": 4453, "code": "import sys\n\nstdin = sys.stdin\ndef na(): return map(int, stdin.readline().split())\ndef ns(): return stdin.readline().strip()\ndef ni(): return int(stdin.readline())\n\nif(ni() < 1200): print(\"ABC\")\nelse: print(\"ARC\")"}
{"label": 35, "index": 4454, "code": "from sys import stdin\n\nn = int(stdin.readline())\n\nif n < 1200:\n    print('ABC')\nelse:\n    print('ARC')\n"}
{"label": 35, "index": 4455, "code": "x = int(input())\nif x < 1200:\n    print(\"ABC\")\nelse:\n    print(\"ARC\")"}
{"label": 35, "index": 4456, "code": "x = int(input())\nif x >= 1200:\n    print('ARC')\nelse:\n    print('ABC')\n"}
{"label": 35, "index": 4457, "code": "x = int(input())\n\nif x<1200:\n    print('ABC')\nelse:\n    print('ARC')"}
{"label": 35, "index": 4458, "code": "n = int(input())\n\nif(n < 1200):\n  print(\"ABC\")\nelse:\n  print(\"ARC\")"}
{"label": 35, "index": 4459, "code": "x = int(input())\nif x < 1200:\n\tprint(\"ABC\")\nelse:\n\tprint(\"ARC\")"}
{"label": 35, "index": 4460, "code": "print \"ABC\" if input() < 1200 else \"ARC\"\n"}
{"label": 35, "index": 4461, "code": "x = int(input())\n\nprint ('ABC' if x < 1200 else 'ARC')"}
{"label": 35, "index": 4462, "code": "x = int(input())\n\nif x < 1200:\n    print(\"ABC\")\nelse:\n    print(\"ARC\")"}
{"label": 35, "index": 4463, "code": "x=int(input())\nprint(\"ABC\" if x < 1200 else \"ARC\")"}
{"label": 35, "index": 4464, "code": "import sys\ninput_lines1 = sys.stdin.readlines()\nfor line in input_lines1:\n    strBuf = line.replace('\\n', '').split(' ')\n    if int(strBuf[0]) < 1200 :\n        print 'ABC'\n    else :\n        print 'ARC'\n\n"}
{"label": 35, "index": 4465, "code": "x=int(input())\n\nif x<1200:\n    print(\"ABC\")\n\nelse:\n    print(\"ARC\")"}
{"label": 35, "index": 4466, "code": "x = int(input())\n\nprint(\"ABC\" if x < 1200 else \"ARC\")"}
{"label": 35, "index": 4467, "code": "# -*- coding: utf-8 -*-\n# \u30ec\u30fc\u30c8\u3092\u5165\u529b\nx = int(input())\n# \u30ec\u30fc\u30c8\u304c1200\u4ee5\u4e0a\u304b\u672a\u6e80\u304b\u3067\u8868\u793a\u3059\u308b\u6587\u5b57\u5217\u3092\u6c7a\u5b9a\nif x<1200:\n    print(\"ABC\")\nelse:\n    print(\"ARC\")\n"}
{"label": 35, "index": 4468, "code": "a = int(input())\n\nif a < 1200 : print (\"ABC\")\nelse : print (\"ARC\")\n"}
{"label": 35, "index": 4469, "code": "if int(input()) < 1200:\n    print(\"ABC\")\nelse:\n    print(\"ARC\")"}
{"label": 35, "index": 4470, "code": "#!/usr/bin/python\n\nif int(input()) < 1200:\n\tprint(\"ABC\")\nelse:\n\tprint(\"ARC\")\n"}
{"label": 35, "index": 4471, "code": "n = int(input())\nprint('ABC' if n <1200 else 'ARC')"}
{"label": 35, "index": 4472, "code": "x =int( input())\n\nif x<1200:\n    print(\"ABC\")\nelse :\n    print(\"ARC\")"}
{"label": 35, "index": 4473, "code": "\nrate = int(input())\nif rate >= 1200:\n    print('ARC')\nelse:\n    print('ABC')\n\n"}
{"label": 35, "index": 4474, "code": "x = int(input())\nif x < 1200:\n    print(\"ABC\")\nelse:\n    print(\"ARC\")\n"}
{"label": 35, "index": 4475, "code": "x = int(input())\nif x < 1200:\n    print(\"ABC\")\nelse:\n    print(\"ARC\")"}
{"label": 35, "index": 4476, "code": "x = int(raw_input())\nprint 'ABC' if x < 1200 else 'ARC'"}
{"label": 35, "index": 4477, "code": "x = int(input())\nif x < 1200:\n    print('ABC')\nelse:\n    print('ARC')"}
{"label": 35, "index": 4478, "code": "print(\"ABC\" if int(input()) < 1200 else \"ARC\")"}
{"label": 35, "index": 4479, "code": "def ri(): return int(input())\ndef rli(): return list(map(int, input().split()))\ndef ris(): return list(input())\ndef pli(a): return \"\".join(list(map(str, a)))\n\nx = ri()\nprint(\"ABC\" if x < 1200 else \"ARC\")"}
{"label": 35, "index": 4480, "code": "import numpy as np\n\nx =raw_input()\nif int(x) < 1200:\n    print \"ABC\"\nelse:\n    print \"ARC\"\n"}
{"label": 35, "index": 4481, "code": "x = int(input())\n\nif(x < 1200):\n\tprint \"ABC\"\nelse:\n\tprint \"ARC\""}
{"label": 35, "index": 4482, "code": "if __name__==\"__main__\":\n    s = int(input())\n    if(s < 1200):\n        print(\"ABC\")\n    else:\n        print(\"ARC\")"}
{"label": 35, "index": 4483, "code": "x = int(input())\n\nif x < 1200:\n\tprint(\"ABC\")\nelse:\n\tprint(\"ARC\")"}
{"label": 35, "index": 4484, "code": "N = int(input())\n\nif (N < 1200):\n    print('ABC')\nelse:\n    print('ARC')"}
{"label": 35, "index": 4485, "code": "x = int(input())\nif x<1200:\n\tprint(\"ABC\")\nelse:\n\tprint(\"ARC\")"}
{"label": 35, "index": 4486, "code": "print[\"ARC\",\"ABC\"][input()<1200]"}
{"label": 35, "index": 4487, "code": "x = int(input())\nif x < 1200:\n\tprint('ABC')\nelse:\n\tprint('ARC')"}
{"label": 35, "index": 4488, "code": "x=input()\nif x<1200:\n  print \"ABC\"\nelse:\n  print \"ARC\"\n\n"}
{"label": 35, "index": 4489, "code": "#A\nnum  = int(input())\n\nif num<1200:\n    print(\"ABC\")\nelse:\n    print(\"ARC\")"}
{"label": 35, "index": 4490, "code": "x = int(input())\nif x < 1200:\n  print(\"ABC\")\nelse:\n  print(\"ARC\")"}
{"label": 35, "index": 4491, "code": "x = int(input())\nif x<1200:\n    print(\"ABC\")\nelse:\n    print(\"ARC\")"}
{"label": 35, "index": 4492, "code": "#!/usr/bin/env python3\n\nif __name__ == '__main__':\n  x = int(input())\n  if x < 1200:\n    print(\"ABC\")\n  else:\n    print(\"ARC\")\n"}
{"label": 35, "index": 4493, "code": "n = input()\nif n >= 1200:\n    print \"ARC\"\nelse:\n    print \"ABC\""}
{"label": 35, "index": 4494, "code": "\nN = int(input())\n\nif N < 1200:\n    print('ABC')\nelse:\n    print('ARC')"}
{"label": 35, "index": 4495, "code": "x = int(input())\nif x <1200:\n  print(\"ABC\")\nelse:\n  print(\"ARC\")\n"}
{"label": 35, "index": 4496, "code": "x = int(input())\nans = 'ABC' if x<1200 else 'ARC'\nprint(ans)"}
{"label": 35, "index": 4497, "code": "x = int(input())\n\nif x < 1200:\n    string = \"ABC\"\nelse:\n    string = \"ARC\"\n\nprint(string)"}
{"label": 35, "index": 4498, "code": "x = int(raw_input())\nif x < 1200:\n    print 'ABC'\nelse:\n    print 'ARC'"}
{"label": 35, "index": 4499, "code": "\nif __name__ == '__main__':\n\n\tx = input()\n\t# int , string , float , char , list , array\n\tif x >= 1200 :\n\t\tprint \"ARC\"\n\telse : \n\t\tprint \"ABC\"\n"}
{"label": 35, "index": 4500, "code": "rate = int(input())\nif rate>=1200:\n    print(\"ARC\")\nelse:\n    print(\"ABC\")"}
{"label": 35, "index": 4501, "code": "print('ABC' if int(input()) < 1200 else 'ARC')\n"}
{"label": 35, "index": 4502, "code": "rate = int(input())\n\nif rate < 1200:\n    print(\"ABC\")\nelse:\n    print(\"ARC\")"}
{"label": 35, "index": 4503, "code": "# -*- coding: utf-8 -*-\n\ndef main():\n    a=input()\n    a=int(a)\n    if(a<1200):\n        print(\"ABC\")\n    else:\n        print(\"ARC\")\n\n\nif __name__==\"__main__\":\n    main()\n    "}
{"label": 35, "index": 4504, "code": "N=int(input())\nif N<1200:\n  print(\"ABC\")\nelse:\n  print(\"ARC\")"}
{"label": 35, "index": 4505, "code": "x = int(input())\n\nif x < 1200:\n    print(\"ABC\")\nelse:\n    print(\"ARC\")"}
{"label": 35, "index": 4506, "code": "x=int(input())\nif x<1200:\n print('ABC')\nelse:\n print('ARC')"}
{"label": 35, "index": 4507, "code": "x = int(input())\nif x < 1200:\n    print('ABC')\nelse:\n    print('ARC')\n"}
{"label": 35, "index": 4508, "code": "import sys\n\ndef solve():\n    x = int(input())\n\n    if x < 1200:\n        print('ABC')\n    else:\n        print('ARC')\n    \n\ndef debug(x, table):\n    for name, val in table.items():\n        if x is val:\n            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)\n            return None\n\n\nif __name__ == '__main__':\n    solve()"}
{"label": 35, "index": 4509, "code": "x = int(input())\n\nif x < 1200:\n    print('ABC')\nelse:\n    print('ARC')"}
{"label": 35, "index": 4510, "code": "x = int(input())\nif x < 1200:\n    print('ABC')\nelse:\n    print('ARC')\n"}
{"label": 35, "index": 4511, "code": "x = int(input())\n\nif x < 1200:\n    print(\"ABC\")\nelse:\n    print(\"ARC\")"}
{"label": 35, "index": 4512, "code": "x = int(input())\n\nif x<1200:\n    print('ABC')\nelse:\n    print('ARC')"}
{"label": 35, "index": 4513, "code": "rate = int(input())\nif rate < 1200:\n  print(\"ABC\")\nelse:\n  print(\"ARC\")"}
{"label": 35, "index": 4514, "code": "print([\"ARC\",\"ABC\"][1200>int(input())])"}
{"label": 35, "index": 4515, "code": "x = int(input())\nif x < 1200:\n    print('ABC')\nelse:\n    print('ARC')"}
{"label": 35, "index": 4516, "code": "a = int(input())\n \nif a >= 1200:\n    print(\"ARC\");\nelse:\n    print(\"ABC\");"}
{"label": 35, "index": 4517, "code": "print(\"ARC\" if int(input()) >= 1200 else \"ABC\")"}
{"label": 35, "index": 4518, "code": "x = int(input())\n\nif x < 1200: print ('ABC')\nelse: print('ARC')\n"}
{"label": 35, "index": 4519, "code": "print([\"ARC\",\"ABC\"][\"1200\">input()])"}
{"label": 35, "index": 4520, "code": "def main():\n    print('ABC' if int(input()) < 1200 else 'ARC')\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 35, "index": 4521, "code": "snuke = int(raw_input())\nif snuke < 1200:\n    print 'ABC'\nelse:\n    print 'ARC'\n"}
{"label": 35, "index": 4522, "code": "x= int(raw_input())\n\nif x>=1200:\n  print \"ARC\"\nelse:\n  print \"ABC\""}
{"label": 35, "index": 4523, "code": "print \"ABC\" if int(raw_input()) < 1200 else \"ARC\""}
{"label": 35, "index": 4524, "code": "score = int(input())\nif score < 1200:\n    print(\"ABC\")\nelse:\n    print(\"ARC\")"}
{"label": 35, "index": 4525, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\ndef LI(): return list(map(int, input().split()))\ndef LF(): return list(map(float, input().split()))\ndef II(): return int(input())\ndef LS(): return input().split()\ndef S(): return input()\n\n\ndef main():\n    x = II()\n    if x < 1200:\n        return 'ABC'\n    return 'ARC'\n\nprint(main())\n"}
{"label": 35, "index": 4526, "code": "rate = int(input())\nif rate < 1200:\n    print(\"ABC\")\nelse:\n    print(\"ARC\")\n"}
{"label": 35, "index": 4527, "code": "x = int(input())\nif (x < 1200):\n    print('ABC')\nelse:\n    print('ARC')\n"}
{"label": 35, "index": 4528, "code": "a = int(input())\nif a < 1200 :\n    print('ABC')\nelse :\n    print('ARC')"}
{"label": 35, "index": 4529, "code": "a=int(input())\n\nif a>=1200:\n    print(\"ARC\")\nelse:\n    print(\"ABC\")"}
{"label": 35, "index": 4530, "code": "x = input()\nprint 'ABC' if x < 1200 else 'ARC'"}
{"label": 35, "index": 4531, "code": "x = int(input())\nif x < 1200:\n    print('ABC')\nelse:\n    print('ARC')"}
{"label": 35, "index": 4532, "code": "#a = map(int,raw_input().split())\na = int(raw_input())\n\nif a >= 1200:\n        print \"ARC\"\nelse:\n        print \"ABC\""}
{"label": 35, "index": 4533, "code": "r = int(raw_input())\nprint (\"ABC\" if r<1200 else \"ARC\")"}
{"label": 35, "index": 4534, "code": "x = int(input())\nif x < 1200:\n    ans = \"ABC\"\nelse:\n    ans = \"ARC\"\nprint(ans)"}
{"label": 35, "index": 4535, "code": "x = int(input())\nif x < 1200:\n    print(\"ABC\")\nelse:\n    print(\"ARC\")"}
{"label": 35, "index": 4536, "code": "# -*- coding: utf-8 -*-\nprint \"ABC\" if int(raw_input()) < 1200 else \"ARC\"\n"}
{"label": 35, "index": 4537, "code": "x = int(input())\nif x < 1200:\n    print(\"ABC\")\nelse:\n    print(\"ARC\")\n"}
{"label": 35, "index": 4538, "code": "x=int(input())\nif(x<1200):\n    print(\"ABC\")\nelse:\n    print(\"ARC\")\n"}
{"label": 35, "index": 4539, "code": "x = int(input())\n\nif x < 1200:\n    print(\"ABC\")\nelse:\n    print(\"ARC\")"}
{"label": 35, "index": 4540, "code": "x = int(raw_input())\nif x < 1200:\n\tprint \"ABC\"\nelse:\n\tprint \"ARC\""}
{"label": 35, "index": 4541, "code": "if int(input()) < 1200:\n    print(\"ABC\")\nelse:\n    print(\"ARC\")"}
{"label": 35, "index": 4542, "code": "print('ABC' if int(input()) < 1200 else 'ARC')"}
{"label": 35, "index": 4543, "code": "x = int(input())\nif x < 1200:\n   print(\"ABC\")\nelse:\n   print(\"ARC\")\n"}
{"label": 35, "index": 4544, "code": "x = int(input())\n\n\nif x < 1200:\n    print(\"ABC\")\nelse:\n    print(\"ARC\")"}
{"label": 35, "index": 4545, "code": "print \"ABC\" if int(raw_input()) < 1200 else \"ARC\"\n"}
{"label": 35, "index": 4546, "code": "x=input()\nif x<1200:\n    print(\"ABC\")\nelse:\n    print(\"ARC\")"}
{"label": 35, "index": 4547, "code": "x = int(input())\nif x < 1200:\n    print('ABC')\nelse:\n    print('ARC')\n"}
{"label": 35, "index": 4548, "code": "n = int(input())\nprint(\"ABC\" if n < 1200 else \"ARC\")"}
{"label": 35, "index": 4549, "code": "x = int(input())\n\nif x < 1200:\n    print(\"ABC\")\nelse:\n    print(\"ARC\")\n"}
{"label": 36, "index": 4550, "code": "input_line = raw_input()\n\nidx_start = 0\nwhile input_line[idx_start] != 'A':\n    idx_start += 1\n\nidx_end = len(input_line)\nwhile input_line[idx_end-1] != 'Z':\n    idx_end -= 1\n\nprint(idx_end - idx_start)\n"}
{"label": 36, "index": 4551, "code": "s = str(input())\ns = list(s)\nfor i in range(len(s)):\n    if s[i] == 'A':\n        a = i\n        break\n\nfor j in range(len(s)):\n    if s[-j-1] == 'Z':\n        z = j\n        break\nprint((len(s)-j)-i)"}
{"label": 36, "index": 4552, "code": "print(len(''.join(''.join(input().partition('A')[1:]).rpartition('Z')[:2])))"}
{"label": 36, "index": 4553, "code": "import re\np = input()\nm = re.findall(r\"A.+Z\",p)        \nprint(len(m[0]))"}
{"label": 36, "index": 4554, "code": "s=raw_input()\nn=len(s)\nfor i in xrange(n):\n    if s[i]==\"A\":\n        idx1=i\n        break    \nfor i in xrange(n-1,0,-1):\n    if s[i]==\"Z\":\n        idx2=i\n        break\nprint idx2-idx1+1"}
{"label": 36, "index": 4555, "code": "S = input()\nl = S.index(\"A\")\nr = S[::-1].index(\"Z\")\nn = len(S)\nprint(n-l-r)"}
{"label": 36, "index": 4556, "code": "s = input()\n\nf = -1\nb = -1\ni = 0\nn = len(s) - 1\n\nwhile f == -1:\n    if s[i] == 'A':\n        f = i\n    i = i + 1\n\nwhile b == -1:\n    if s[n] == 'Z':\n        b = n\n    n = n - 1\n\nprint(b - f + 1)\n"}
{"label": 36, "index": 4557, "code": "# -*- coding: utf-8 -*-\n\na = input()\nstart = a.find('A')\nend = len(a) - a[::-1].find('Z')\n\nprint(end - start)"}
{"label": 36, "index": 4558, "code": "s = input()\n\nAindex = s.find(\"A\")\nZindex = s.rfind(\"Z\")\n\nMaxLength = Zindex - Aindex + 1\n\nprint(MaxLength)\n"}
{"label": 36, "index": 4559, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\n\ndef main():\n    s = input()\n\n    idx_min = s.index(\"A\")\n    idx_max = s.rindex(\"Z\")\n    print(idx_max - idx_min + 1)\n\nif __name__ == \"__main__\": main()\n"}
{"label": 36, "index": 4560, "code": "s = input()\nn = len(s)\nres = 0\n\nfor i in range(0, n):\n    if s[i] == \"A\":\n        j = i\n        break\nfor i in range(0, n):\n    if s[i] == \"Z\":\n        k = i\n\nres = k - j + 1\nprint(res)"}
{"label": 36, "index": 4561, "code": "from collections import defaultdict\n\n\ndef main():\n    s = input()\n    print(s.rindex(\"Z\") - s.index(\"A\") + 1)\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 36, "index": 4562, "code": "N=str(input())\nprint(1+N.rfind(\"Z\")-N.find(\"A\"))"}
{"label": 36, "index": 4563, "code": "s = input()\ns = s[::-1]\n\nfor i in range(len(s)):\n\tif s[i] == \"Z\":\n\t\tmax = 0\n\t\tfor j in range(i+1,len(s)):\n\t\t\tif s[j] == \"A\":\n\t\t\t\tmax = j-i+1\n\t\t\t\t\n\t\telse:\n\t\t\tbreak\n\nprint(max)\n"}
{"label": 36, "index": 4564, "code": "s = input()\nN = len(s)\nx = 0\ny = N-1\nfor i in range(N):\n    if s[i] == 'A':\n        x = i\n        break\nfor i in range(N-1, -1, -1):\n    if s[i] == 'Z':\n        y = i\n        break\nprint(y-x+1)"}
{"label": 36, "index": 4565, "code": "s = input()\n\nfor i in range(len(s)):\n  if s[i] == 'A':\n    cnt_A = i\n    break\n\nfor i in range(len(s)):\n  if s[len(s)-i-1] == 'Z':\n    cnt_Z = i\n    break\n\nprint(len(s)-cnt_Z-cnt_A)"}
{"label": 36, "index": 4566, "code": "s = list(input())\n\ncnt = 0\non = False\nresult = []\nfor a in s:\n    if a is 'A':\n        on = True\n    if on:\n        cnt += 1\n    if a is 'Z':\n        result.append(cnt)\n\nprint(max(result))"}
{"label": 36, "index": 4567, "code": "s = raw_input()\nprint s.rindex('Z') - s.index('A') + 1"}
{"label": 36, "index": 4568, "code": "import re\n\ns = input()\nslist = re.findall(\"A.*Z\",s)\n\nprint(len(slist[0]))"}
{"label": 36, "index": 4569, "code": "s = input()\n\na,z = 0, len(s)-1\n\nwhile s[a] != 'A':\n    a += 1\nwhile s[z] != 'Z':\n    z -= 1\n\nprint(z-a+1)\n"}
{"label": 36, "index": 4570, "code": "S=raw_input()\na=S.find('A')\nb=S.rfind('Z')\nprint(b-a+1)\n"}
{"label": 36, "index": 4571, "code": "s = input()\nprint(len(s) - s.index('A') - s[::-1].index('Z'))"}
{"label": 36, "index": 4572, "code": "import re\n\nm = re.search('A.*Z', input())\nprint(len(m.group(0)))\n"}
{"label": 36, "index": 4573, "code": "import re\ns = input()\nans = re.search(\"A.*Z\", s).group()\nprint(len(ans))"}
{"label": 36, "index": 4574, "code": "s = input()\nprint(s.rfind('Z') - s.find('A') + 1)\n\n"}
{"label": 36, "index": 4575, "code": "S = input()\nN = len(S)\nfor i in range(N):\n\tif S[i]==\"A\":\n\t\ta_n = i\n\t\tbreak\nfor i in range(N-1, -1, -1):\n\tif S[i]==\"Z\":\n\t\tz_n = i\n\t\tbreak\nprint(z_n-a_n+1)\n"}
{"label": 36, "index": 4576, "code": "S = list(input())\na = S.index('A')\nb = list(reversed(S)).index('Z')\nprint(len(S)-b-a)"}
{"label": 36, "index": 4577, "code": "s = raw_input()\nprint s.rfind(\"Z\")-s.find(\"A\")+1"}
{"label": 36, "index": 4578, "code": "def solution():\n\ta = raw_input()\n\t\t\n\taIdx = 0\n\tzIdx = 0\n\tmaxLength = 0\n\thasSet = False\n\tfor i in range(len(a)):\n\t\tif a[i] == 'A' and not hasSet:\n\t\t\taIdx = i\n\t\t\thasSet = True\n\t\t\n\t\tif a[i] == 'Z':\n\t\t\tzIdx = i \n\n\tprint zIdx - aIdx + 1\n\nsolution()\n\t\t"}
{"label": 36, "index": 4579, "code": "s = input()\n\nl = s.find(\"A\")\nr = s.rfind(\"Z\")\nprint(r - l + 1)\n"}
{"label": 36, "index": 4580, "code": "S = input()\n\na = 0\nb = 0\nfor i in range(len(S)):\n  if(S[i] == \"A\"):\n    a = i\n    break\n\nfor i in range(len(S))[::-1]:\n    if(S[i] == \"Z\"):\n      b = i\n      break\n\nprint(b - a + 1)"}
{"label": 36, "index": 4581, "code": "import sys\n\ndef solve():\n    s = input()\n    l = s.find('A')\n    r = s.rfind('Z')\n\n    print(r - l + 1)\n    \ndef debug(x, table):\n    for name, val in table.items():\n        if x is val:\n            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)\n            return None\n\n\nif __name__ == '__main__':\n    solve()"}
{"label": 36, "index": 4582, "code": "s = input()\n\n\ndef get_z_idx(s):\n    l = len(s) - 1\n    for i in range(l, -1, -1):\n        if s[i] == 'Z':\n            z_idx = i\n            break\n    return z_idx\n\n\ndef main(s):\n    a_idx = s.index('A')\n    z_idx = get_z_idx(s)\n    _s = s[a_idx:z_idx + 1]\n    return len(_s)\n\n\nprint(main(s))"}
{"label": 36, "index": 4583, "code": "s = input()\nN = s.rfind('Z') - s.find('A') + 1\nprint(N)"}
{"label": 36, "index": 4584, "code": "s = input()\n\nstart = s.find('A')\nend = s.rfind('Z')\n\nprint(end+1-start)\n"}
{"label": 36, "index": 4585, "code": "def main():\n    s = input()\n    max_len = -1\n    idx_a, idx_z = [], []\n    for i in range(len(s)):\n        if s[i] == 'A':\n            idx_a.append(i)\n        if s[i] == 'Z':\n            idx_z.append(i)\n    print(max(idx_z)-min(idx_a)+1)\n\n\nif __name__ == \"__main__\":\n    main()"}
{"label": 36, "index": 4586, "code": "S=input()\nprint(S.rfind('Z')-S.find('A')+1)"}
{"label": 36, "index": 4587, "code": "# -*- coding: utf-8 -*-\n\ndef main():\n    a = str(input())\n    print(a.rindex('Z') - a.index('A') + 1)\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 36, "index": 4588, "code": "s = input()\n\nprint(s.rfind('Z') - s.find('A') + 1)\n"}
{"label": 36, "index": 4589, "code": "s = input()\nstart = s.index(\"A\")\nfin = s.rindex(\"Z\")\nans = s[start:fin+1]\nprint(len(ans))\n"}
{"label": 36, "index": 4590, "code": "s = input()\nl = len(s)\nsp = 0\ngp = l - 1\n\nwhile sp < l:\n  if s[sp] == 'A':\n    break\n  sp += 1\n  \nwhile gp >= -1:\n  if s[gp] == 'Z':\n    break\n  gp -= 1\n\nif gp > sp:\n  print(gp - sp + 1)\nelse:\n  print(0)\n"}
{"label": 36, "index": 4591, "code": "s = input()\nprint(len(s) - s[::-1].index('Z', ) - s.index('A'))"}
{"label": 36, "index": 4592, "code": "S = str(input())\nZ = S.rfind('Z')\nA = S.find('A')\nprint(str(Z - A + 1))\n"}
{"label": 36, "index": 4593, "code": "if __name__ == \"__main__\":\n    S = input()\n    A = 2 ** 100\n    Z = 2 ** 100\n    res = 0\n    for x,y in enumerate(S):\n\n        if y == 'A':\n            A = min(A,x)\n        if y == 'Z':\n            Z = x\n            res = max(res, (Z - A) + 1)\n    print (res)\n"}
{"label": 36, "index": 4594, "code": "# -*- coding: utf-8 -*-\nimport re\ns = input()\nans = re.findall(r\"A[A-Z]+Z\", s)\nprint(len(ans[0]))"}
{"label": 36, "index": 4595, "code": "s = str(input())\nstart = s.find(\"A\")\nend = s.rfind(\"Z\")\nprint(end - start + 1)\n"}
{"label": 36, "index": 4596, "code": "s=input()\nc=0\nfor i in range(len(s)):\n  if s[i]==\"A\" and c==0:\n     a=i\n     c=1\n  if s[i]==\"Z\":\n     b=i\nprint(b-a+1)"}
{"label": 36, "index": 4597, "code": "s=input()\nwhile s[0] != 'A':\n  s = s[1:]\nwhile s[-1] != 'Z':\n  s = s[:-1]\nprint(len(s))\n"}
{"label": 36, "index": 4598, "code": "s = input()\n\na = s.index('A')\ns = s[::-1]\nz = s.index('Z')\n\nprint(len(s)-a-z)\n"}
{"label": 36, "index": 4599, "code": "if __name__ == \"__main__\":\n    s = input()\n    i1 = s.find('A')\n    i2 = s.rfind('Z')\n    print(i2-i1+1)"}
{"label": 36, "index": 4600, "code": "s=raw_input()\nprint-~s.rindex(\"Z\")-s.index(\"A\")"}
{"label": 36, "index": 4601, "code": "s = input()\nl = 1000000\nr = 0\nfor i, c in enumerate(s):\n    if c == \"A\":\n        l = min(l, i)\n    if c == \"Z\":\n        r = i\nprint(r - l + 1)"}
{"label": 36, "index": 4602, "code": "s = input()\nprint(s.rfind('Z') - s.find('A') + 1)\n"}
{"label": 36, "index": 4603, "code": "s = input()\nprint(s.rindex(\"Z\") - s.index(\"A\") + 1)\n"}
{"label": 36, "index": 4604, "code": "import sys\ninp = sys.stdin.read().strip()\nctr, maks = -1, 0\nfor idx in range(len(inp)):\n\tif inp[idx] == 'A' and ctr == -1:\n\t\tctr = 1\n\telse:\n\t\tif ctr != -1: ctr += 1\n\t\tif inp[idx] == 'Z':\n\t\t\tmaks = max(ctr, maks)\nprint maks"}
{"label": 36, "index": 4605, "code": "s = input()\n\nprint(s.rfind('Z') - s.find('A') + 1)"}
{"label": 36, "index": 4606, "code": "\n\n\n\n\n\n\n\ndef sol(strs):\n\n\tptrA=0;\n\tptrZ=len(strs)\n\n\tfor i in range(len(strs)):\n\t\tif strs[i]==\"A\":\n\t\t\tptrA=i\n\t\t\tbreak\n\n\tfor i in range(len(strs)-1,0,-1):\n\t\tif strs[i]==\"Z\":\n\t\t\tptrZ=i\n\t\t\tbreak\n\t\n\n\treturn (ptrZ - ptrA+1)\n\n\n\n\n\ninD =raw_input()\n\ninD = str(inD)\n\nprint sol(inD)\n\n\n\n"}
{"label": 36, "index": 4607, "code": "s = input()\nposA = s.find('A')\nposZ = len(s) - s[::-1].find('Z') - 1 # s[::-1]\u3067s\u3092\u53cd\u8ee2\nprint(posZ - posA + 1)"}
{"label": 36, "index": 4608, "code": "s = list(input())\ncnt = 0\ni = 0\nj = len(s)-1\nfor t in range(len(s)):\n    if s[t] == \"A\":\n        break\n    i += 1\nfor t in range(len(s)):\n    if s[j] == \"Z\":\n        break\n    j -= 1\nprint(j-i+1)\n        \n    \n        "}
{"label": 36, "index": 4609, "code": "s = raw_input()\n\ncounter = 0\ncounterA = 0\ncounterZ = 0\n\nflag = False\n\nfor i in range(len(s)):\n    counter += 1\n    if s[i] == 'A' and not flag:\n        counterA = counter\n        flag = True\n    if s[i] == 'Z':\n        counterZ = counter\n        \n\nprint counterZ-counterA+1"}
{"label": 36, "index": 4610, "code": "import sys\n\nstdin = sys.stdin\ndef na(): return map(int, stdin.readline().split())\ndef ns(): return stdin.readline().strip()\ndef ni(): return int(stdin.readline())\n\ns = ns()\nprint(s.rfind('Z') - s.find('A') + 1)"}
{"label": 36, "index": 4611, "code": "s=input().strip()\nrev=s[::-1]\nn=len(s)\n#print(n)\nprint((n-rev.find('Z')) - (s.find('A')))"}
{"label": 36, "index": 4612, "code": "S = input()\ni = 0\nfor char in S:\n    if char == \"A\":\n        first = i\n        break\n    else:\n        i += 1\nn = 0\nfor char in S[::-1]:\n    if char == \"Z\":\n        last = n\n        break\n    else:\n        n += 1\n\nprint(len(S[i:len(S)-n]))"}
{"label": 36, "index": 4613, "code": "S = input()\nprint(S.rfind(\"Z\") - S.find(\"A\") + 1)"}
{"label": 36, "index": 4614, "code": "string = input()\n\nz_idx = len(string) - string[::-1].index('Z') - 1\n\na_idx = string.index('A')\n\nprint (z_idx - a_idx + 1)"}
{"label": 36, "index": 4615, "code": "s = input()\n\na_i = None\nz_i = None\nset_a = False\n\nfor i in range(len(s)):\n    if (not set_a) and s[i] == 'A':\n        a_i = i\n        set_a = True\n    if s[i] == 'Z':\n        z_i = i\nprint(z_i - a_i + 1)"}
{"label": 36, "index": 4616, "code": "s = input()\na, z, ans = (0, 0, 0)\n \na = s.find(\"A\")\nz = s.rfind(\"Z\")\nans = z - a + 1\nprint(ans)"}
{"label": 36, "index": 4617, "code": "x = list(input())\na = []\nz = []\n\nfor i in range(len(x)):\n    if x[i] == 'A':\n        a.append(i)\n    elif x[i] == 'Z':\n        z.append(i)\n    else:\n        pass\n\nprint(max(z) - min(a) + 1)"}
{"label": 36, "index": 4618, "code": "print(len(max(__import__(\"re\").findall('A.*Z', input()))))"}
{"label": 36, "index": 4619, "code": "S = input()\n\nsubs = 0\nl = len(S)\ni = 0\nwhile i < l:\n    if S[i] != \"A\":\n        i += 1\n        continue\n    else:\n        for j in range(l-1, i, -1):\n            if S[j] == \"Z\":\n                subs = j - i + 1\n                break\n        break\nprint(subs)"}
{"label": 36, "index": 4620, "code": "import sys\n\ns = next(sys.stdin).strip()\nprint(s.rindex('Z') - s.index('A') + 1)\n"}
{"label": 36, "index": 4621, "code": "s = str(input())\n\nindex1 = s.index(\"A\")\ntemp = s[::-1].index(\"Z\")\nindex2 = len(s) - temp\n\nprint(index2 - index1)\n"}
{"label": 36, "index": 4622, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\ndef LI(): return list(map(int, input().split()))\ndef LF(): return list(map(float, input().split()))\ndef II(): return int(input())\ndef LS(): return input().split()\ndef S(): return input()\n\n\ndef main():\n    s = S()\n    a = s.index('A')\n    z = s.rindex('Z')\n    return z-a+1\n\nprint(main())\n"}
{"label": 36, "index": 4623, "code": "S = input()\nn = S.find('A')\nm = S.rfind('Z')\nprint(m-n+1)"}
{"label": 36, "index": 4624, "code": "import re\ndef Main():\n  s = input()\n  # r = re.findall(\"A.+Z\",s)\n  # # print(r)\n  # cnt = 0\n  # for i in r:\n  #   cnt = max(cnt, len(i))\n  ans = re.findall(\"A[A-Z]+Z\", s)\n  print(len(ans[0]))\n\n  # print(cnt)\n# QWERTYASDFZXCV\n\nif __name__ == '__main__':\n  Main()"}
{"label": 36, "index": 4625, "code": "s = input()\nprint(s.rindex('Z') - s.index('A') + 1)\n"}
{"label": 36, "index": 4626, "code": "s = input()\nt = list(s)\nu = t[:]\nt.reverse()\ni, j = u.index('A'), len(s)-t.index('Z')\nprint(j-i)"}
{"label": 36, "index": 4627, "code": "s = input()\na = s.find(\"A\")\nz = s.rfind(\"Z\")\nprint(z-a+1)"}
{"label": 36, "index": 4628, "code": "s = str(input())\nprint(s.rfind('Z') - s.find('A') + 1)"}
{"label": 36, "index": 4629, "code": "# -*- coding: utf-8 -*-\n\ns = raw_input()\nprint(s.rfind('Z')-s.find('A')+1)"}
{"label": 36, "index": 4630, "code": "s = input()\n\na = 0\nfor i in range(0,len(s)):\n    if s[i] == 'A':\n        a = i\n        break\n\nb = 0\nfor i in reversed(range(0, len(s))):\n    if s[i] == 'Z':\n        b = i\n        break\n\nprint((b - a) + 1)"}
{"label": 36, "index": 4631, "code": "\"\"\"\n\u4e00\u756a\u5de6\u306ea\u306e\u4f4d\u7f6e\u3068\u4e00\u756a\u53f3\u306ez\u306e\u4f4d\u7f6e\u3060\u3051\u308f\u304b\u308c\u3070\u3088\u3044\n\"\"\"\ns = input()\na = s.index('A')\nz = len(s)-s[::-1].index('Z')\nprint(z-a)"}
{"label": 36, "index": 4632, "code": "s=list(input())\n\na=s.index(\"A\")\n\ns.reverse()\n\nb=s.index(\"Z\")\n\ns.reverse()\n\nif b==0:\n    T=s[a:-1]\n    print(len(T)+1)\nelse:\n    T=s[a:-b]\n    print(len(T))"}
{"label": 36, "index": 4633, "code": "s = raw_input()\na = s.find(\"A\")\nz = s.rfind(\"Z\")\nprint z - a + 1\n"}
{"label": 36, "index": 4634, "code": "s = input()\nprint(s.rfind(\"Z\") - s.find(\"A\") + 1)\n"}
{"label": 36, "index": 4635, "code": "s = input()\n\nstart = 0\nend = 0\n\nfor i in range(len(s)):\n    if s[i] == \"A\":\n        # print(i)\n        start = i\n        break\nfor i in range(len(s)-1):\n    if s[-i-1] == 'Z':\n        # print(i)\n        end = len(s) - i \n        break\n# print(start,end)\nprint(end-start)\n"}
{"label": 36, "index": 4636, "code": "s = raw_input()\n\nfor (i,c) in enumerate(s):\n    if c == 'A':\n        ia = i\n        break\n\nfor (i,c) in enumerate(s[::-1]):\n    if c == 'Z':\n        iz = i\n        break\n\nprint len(s) - iz - ia"}
{"label": 36, "index": 4637, "code": "s = raw_input()\nstart = s.index('A')\nend = s.rindex('Z')\nprint end - start + 1"}
{"label": 36, "index": 4638, "code": "def main():\n    s = input()\n    si, ei = 0, len(s) - 1\n    while True:\n        if s[si] == 'A':\n            break\n        si += 1\n    while True:\n        if s[ei] == 'Z':\n            break\n        ei -= 1\n    print(ei - si + 1)\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 36, "index": 4639, "code": "if __name__==\"__main__\":\n    [s] = input().split()\n    a_pos = s.find(\"A\")\n    z_pos = (len(s) - 1) - s[::-1].find(\"Z\")\n\n    print(z_pos - a_pos + 1)"}
{"label": 36, "index": 4640, "code": "s = list(raw_input())\nflag1 = True\nflag2 = True\nfor i in range(len(s)):\n\tif s[i] == 'A' and flag1:\n\t\tstartIndex = i\n\t\tflag1 = False\n\tif s[len(s) - i - 1] == 'Z' and flag2:\n\t\tendIndex = len(s) - i\n\t\tflag2 = False\n\tif not flag1 and not flag2:\n\t\tbreak\n\nprint endIndex - startIndex"}
{"label": 36, "index": 4641, "code": "def main():\n  s = input()\n  si , ei = 0, len(s) - 1\n  while True:\n    if s[si] == 'A':\n      break\n    si += 1\n  while True:\n    if s[ei] == 'Z':\n      break\n    ei -= 1\n  print(ei - si + 1)\n\nif __name__ == '__main__':\n  main()"}
{"label": 36, "index": 4642, "code": "\ns = input()\n\na = None\nfor i in range(len(s)):\n    if a is None:\n        if s[i] == 'A':\n            a = i\n    else:\n        if s[i] == 'Z':\n            z = i\n\nprint(z - a + 1)\n"}
{"label": 36, "index": 4643, "code": "s = input()\nl = s.find(\"A\")\nr = s.rfind(\"Z\")\nans = r - l + 1\nprint(ans)\n"}
{"label": 36, "index": 4644, "code": "s = input()\nw = \"\"\nans = \"\"\nf = 0\nfor c in s:\n    if c == \"A\":\n        f = 1\n    if f == 1:\n        w += c\n        if c == \"Z\":\n            ans = w\nans = len(ans)\nprint(ans)"}
{"label": 36, "index": 4645, "code": "from sys import stdin\n\ns = stdin.readline().strip()\n\nl = s.find('A')\nr = s.rfind('Z')\nprint(r - l + 1)\n"}
{"label": 36, "index": 4646, "code": "s = input()\nlength = len(s)\n#print(\"length:\",length)\nfirst = s.index(\"A\")\n#print(\"first:\",first)\ns_rev = s[::-1]\n#print(s_rev)\nend_rev = s_rev.index(\"Z\")\n#print(\"end_rev\",end_rev)\nend = (length - 1) - end_rev\n#print(\"end\",end)\nprint(end-first + 1)\n"}
{"label": 36, "index": 4647, "code": "s = input()\nx,y = 0,0\nfor i in range(len(s)):\n    if s[i] == 'A':\n        x = i\n        break\nfor i in range(1,len(s)):\n    if s[-i] == 'Z':\n        y = len(s) - i\n        break\nprint (y - x + 1)\n"}
{"label": 36, "index": 4648, "code": "#B\nnum = [i for i in raw_input()]\nresult = 0\n\na = len(num)\nz = 0\n\nfor i in range(len(num)):\n    if num[i] == \"Z\" and i>z:\n        z = i\n    elif num[i] == \"A\" and i<a:\n        a = i\ntemp = z-a\nif temp>0:\n    print(temp+1)\nelse:\n    print(0)"}
{"label": 36, "index": 4649, "code": "import re\nprint(max((len(i) for i in re.findall(r\"A.+Z\", input()))))\n"}
{"label": 36, "index": 4650, "code": "def ri(): return int(input())\ndef rli(): return list(map(int, input().split()))\ndef rls(): return list(input())\ndef pli(a): return \"\".join(list(map(str, a)))\n\ns = rls()\nt = s[::-1]\na = 0\nz = 0\nfor i in range(len(s)):\n    if(s[i] == \"A\"):\n        a = i\n        break\nfor i in range(len(t)):\n    if(t[i] == \"Z\"):\n        z = len(s) - i\n        break\nprint(z-a)"}
{"label": 36, "index": 4651, "code": "import re\n\nr = re.compile(r\"A.*Z\")\nprint(max(map(len, r.findall(input()))))"}
{"label": 36, "index": 4652, "code": "s = list(input())\n\nfor i in range(len(s)):\n    if s[i] == 'A':\n        s = s[i:]\n        break\nfor i in range(len(s) - 1, -1, -1):\n    if s[i] == 'Z':\n        s = s[:i + 1]\n        break\nprint(len(s))\n"}
{"label": 36, "index": 4653, "code": "s = []\ns = input()\nmin_a = -1\nmax_z = 0\nfor i in range(len(s)):\n  if s[i]=='A' and min_a==-1:\n    min_a = i\n  elif s[i]=='Z':\n    max_z = i\n \nprint(max_z-min_a+1)\n"}
{"label": 36, "index": 4654, "code": "s = raw_input()\n\ns_long = len(s)\nfirst_a_adress = -1\nend_z_adress = -1\nfor var in range(0,s_long):\n\tif s[var] == 'A':\n\t\tfirst_a_adress = var\n\t\tbreak\n\t\t\t\t\nfor var in reversed(range(0,s_long)):\n\tif s[var] == 'Z':\n\t\tend_z_adress = var\n\t\tbreak\nprint end_z_adress - first_a_adress + 1"}
{"label": 36, "index": 4655, "code": "# -*- coding: utf-8 -*-\n\ndef main():\n    str=input()\n    a,b=0,0\n    l=len(str)\n    \n    for i in range(l):\n        if(str[i]=='A'):\n            a=i\n            break\n    for i in reversed(range(l)):\n        if(str[i]=='Z'):\n            b=i\n            break\n    print(b-a+1)\n        \n\n\nif __name__==\"__main__\":\n    main()\n    "}
{"label": 36, "index": 4656, "code": "s=str(input())\nt=s.find('A')\nu=s.rfind('Z')\nprint(u - t +1)"}
{"label": 36, "index": 4657, "code": "S = input()\ni = 0\nj = -1\n\nwhile True:\n    if S[i] == \"A\":\n        A = i\n        break\n    i += 1\n\nwhile True:\n    if S[j] == \"Z\":\n        Z = len(S) + j\n        break\n    j -= 1\n    \nprint(Z - A + 1)"}
{"label": 36, "index": 4658, "code": "from sys import stdin\nans = ''\ns = stdin.readline().strip()\nn = len(s)\nfor i in xrange(n):\n if s[i]=='A':\n  break\nfor j in xrange(n):\n if s[n-1-j]=='Z':\n  break\nj = n-1-j\nprint j-i+1"}
{"label": 36, "index": 4659, "code": "import re\ns = input()\na = re.search(r\"A.+Z\", s)\nprint(len(a.group()))\n"}
{"label": 36, "index": 4660, "code": "s = input()\n\nfor i in range(len(s)):\n    if s[i] == \"A\":\n        a = i\n        break\n\ns2 = s[-1:0:-1]\nfor j in range(len(s2)):\n    if s2[j] == \"Z\":\n        z = len(s)-1-j\n        break\n\nprint(z-a+1)\n"}
{"label": 36, "index": 4661, "code": "s = input()\n\na = s.find(\"A\")\nb = s.rfind(\"Z\")\n\nprint(b-a+1)"}
{"label": 36, "index": 4662, "code": "s = raw_input()\naId = s.index(\"A\")\ns = s[::-1]\nzId = s.index(\"Z\")\nprint len(s) - aId - zId"}
{"label": 36, "index": 4663, "code": "S = input()\na = -1\nz = -1\nfor i in range(len(S)):\n    if S[i] == 'Z':\n        z = i\n    if S[-i - 1] == 'A':\n        a = len(S) - i - 1\nprint(z - a + 1)\n"}
{"label": 36, "index": 4664, "code": "s = input()\nAind = s.find('A')\nZind = s.rfind('Z')\nprint(Zind - Aind + 1)\n"}
{"label": 36, "index": 4665, "code": "s = raw_input()\nprint s.rfind('Z') - s.find('A') + 1\n"}
{"label": 36, "index": 4666, "code": "#!/usr/bin/env python3\nif __name__ == '__main__':\n  s = str(input())\n  L = len(s)\n  beg = -1\n  end = -1\n  for i in range(0,L):\n    if s[i]=='A' and beg==-1:\n      beg = i\n    elif s[i]=='Z':\n      end = i\n  print(end-beg+1)\n"}
{"label": 36, "index": 4667, "code": "s=str(input())\na=s.find('A')\nz=s.rfind('Z')\nprint(z-a+1)"}
{"label": 36, "index": 4668, "code": "#coding: UTF-8\ns=input()\nnA=s.find('A')\nnZ=s.rfind('Z')\nprint(nZ-nA+1)"}
{"label": 36, "index": 4669, "code": "import re\ns=raw_input()\nr=re.compile(\"A.*Z\")\nprint max(map(lambda s:len(s),r.findall(s)))\n"}
{"label": 36, "index": 4670, "code": "import re\nprint(max(map(len, re.findall(\"A.*Z\", input()))))\n"}
{"label": 36, "index": 4671, "code": "S = list(input())\na = S.index('A')\nz = len(S) - 1 - S[::-1].index('Z')\nprint(z - a + 1)"}
{"label": 36, "index": 4672, "code": "# -*- coding: utf-8 -*-\ns = raw_input()\nstart = 0\nend = 0\nfor i,stri in enumerate(s):\n    if stri == \"A\":\n        start = i\n        break\nfor i,stri in enumerate(s[::-1]):\n    if stri == \"Z\":\n        end = i\n        break\n\nprint (len(s)-end)-start\n"}
{"label": 36, "index": 4673, "code": "s = input()\nres = s.rfind('Z') - s.find('A') + 1\nprint(res)\n"}
{"label": 36, "index": 4674, "code": "s = raw_input()\nprint s.rfind('Z') - s.find('A') + 1\n"}
{"label": 36, "index": 4675, "code": "S = input()\n\nf = False\nc = 0\nmax_c = 0\n\nfor k, i in enumerate(S):\n    if i == 'A' and f == False:\n        f = True\n        c += 1\n    elif i == 'Z' and f == True:\n        c += 1\n        max_c = max(c, max_c)\n        if S[k] != 'Z':\n            f = False\n    elif f == True:\n        c += 1\n\nprint(max_c)"}
{"label": 36, "index": 4676, "code": "s = str(input())\ni = s.find('A')\ne = s.rfind('Z')\nprint(e - i + 1)\n"}
{"label": 36, "index": 4677, "code": "s = input()\nprint(s.rfind(\"Z\") - s.find(\"A\") + 1)"}
{"label": 36, "index": 4678, "code": "print((lambda s: s.rfind('Z') - s.find('A') + 1)(input()))\n"}
{"label": 36, "index": 4679, "code": "import numpy as np\n\ns = raw_input()\nl = list(s)\nA = l.index(\"A\")\nl.reverse()\nZ = l.index(\"Z\")\na = len(l)\nprint a - Z -A\n"}
{"label": 37, "index": 4680, "code": "#! coding:UTF-8\ndata = list(map(int,input().split(\" \")))\nif 1 in data:\n\tif data.count(1) == 2:\n\t\tprint(\"Draw\")\n\telif data.index(1) == 0:\n\t\tprint(\"Alice\")\n\telse:\n\t\tprint(\"Bob\")\nelse:\n\tif data[0] == data[1]:\n\t\tprint(\"Draw\")\n\telif data[0] > data[1]:\n\t\tprint(\"Alice\")\n\telse:\n\t\tprint(\"Bob\")\n"}
{"label": 37, "index": 4681, "code": "# get Alice's card A and Bob's card B\na, b = map(int, raw_input().split())\n\n# adjust for card strength, 1 > 13\nif a == 1:\n\ta = 14\nif b == 1:\n\tb = 14\n\nif a > b:\n\tprint (\"Alice\")\nelif a < b:\n\tprint (\"Bob\")\nelse:\n\tprint (\"Draw\")"}
{"label": 37, "index": 4682, "code": "AB=input().split(\" \")\nA=int(AB[0])\nB=int(AB[1])\n\nif A==1:\n    if B==1:\n        print(\"Draw\")\n    else:\n        print(\"Alice\")\nelif B==1:\n    print(\"Bob\")\n\nelse:\n    if A>B:\n        print(\"Alice\")\n    elif A<B:\n        print(\"Bob\")\n    else:\n        print(\"Draw\")\n"}
{"label": 37, "index": 4683, "code": "a,b=map(int,raw_input().split())\nif a==1:\n\ta=14\nif b==1:\n\tb=14\n \ndef val():\n\n\tif(a>b):\n\t\treturn \"Alice\"\n\telif b>a:\n\t\treturn \"Bob\"\n\treturn \"Draw\"\nprint (val())"}
{"label": 37, "index": 4684, "code": "# -*- coding: utf-8 -*-\n# \u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u306e\u6574\u6570\u306e\u5165\u529b\na, b = map(int, raw_input().split())\nans = \"\"\nif a == b:\n    ans = \"Draw\"\nelif a > b:\n    if b != 1:\n        ans = \"Alice\"\n    else:\n        ans = \"Bob\"\nelse:\n    if a != 1:\n        ans = \"Bob\"\n    else:\n        ans = \"Alice\"\n    \n# \u51fa\u529b\nprint ans"}
{"label": 37, "index": 4685, "code": "def read():\n    return int(input())\n\ndef reads(sep=None):\n    return list(map(int, input().split(sep)))\n\ndef main():\n    a, b = reads()\n    if a == 1:\n        a = 14\n    if b == 1:\n        b = 14\n\n    if a == b:\n        print('Draw')\n    elif a > b:\n        print('Alice')\n    else:\n        print('Bob')\n \nmain()\n"}
{"label": 37, "index": 4686, "code": "a,b = map(int, raw_input().split())\n \nif a==b:\n\tprint \"Draw\"\nelse:\n\tif a!=1 and b!=1:\n\t\tif a<b:\n\t\t\tprint \"Bob\"\n\t\telse:\n\t\t\tprint \"Alice\"\n\telif a==1 and b!=1:\n\t\tprint \"Alice\"\n\telse:\n\t\tprint \"Bob\"\n"}
{"label": 37, "index": 4687, "code": "A, B = [int(i) for i in raw_input().split()]\nif A == 1:\n    A += 13\nif B == 1:\n    B += 13\n\nif A > B:\n    print 'Alice'\nelif A < B:\n    print 'Bob'\nelse:\n    print 'Draw'\n\n"}
{"label": 37, "index": 4688, "code": "# coding: utf-8\ndata = map(int, raw_input().split())\n\nif data[0] == data[1]:\n    print \"Draw\"\nelif (data[1] != 1 and data[0] > data[1]) or data[0] == 1:\n    print \"Alice\"\nelse:\n    print \"Bob\"\n"}
{"label": 37, "index": 4689, "code": "a,b = map(int, raw_input().split())\nif a == b:\n    print 'Draw'\nelif (b != 1) and (a == 1 or a > b):\n    print 'Alice'\nelse:\n    print 'Bob'\n"}
{"label": 37, "index": 4690, "code": "a, b = map(int, input().split())\ndef f(x) :\n   if x == 1 :\n      return x+13\n   else :\n      return x\nif f(a) == f(b) :\n   print(\"Draw\")\nelif f(a) > f(b) :\n   print(\"Alice\")\nelse :\n   print(\"Bob\")"}
{"label": 37, "index": 4691, "code": "a, b = map(int, input().split())\nif a == b:\n    print(\"Draw\")\nelif a == 1:\n    print(\"Alice\")\nelif b == 1:\n    print(\"Bob\")\nelif a > b:\n    print(\"Alice\")\nelse:\n    print(\"Bob\")\n"}
{"label": 37, "index": 4692, "code": "A, B = map(int, input().split())\nA, B = (A - 2) % 13, (B - 2) % 13\nif A > B:\n    print(\"Alice\")\nelif A < B:\n    print(\"Bob\")\nelif A == B:\n    print(\"Draw\")\n"}
{"label": 37, "index": 4693, "code": "A, B = list(map(int, input().split()))\nif A == B:\n\tprint(\"Draw\")\nelse:\n\tif A == 1:\n\t\tprint(\"Alice\")\n\telif B == 1:\n\t\tprint(\"Bob\")\n\telse:\n\t\tif A > B:\n\t\t\tprint(\"Alice\")\n\t\telse:\n\t\t\tprint(\"Bob\")\n"}
{"label": 37, "index": 4694, "code": "if __name__==\"__main__\":\n    a, b = list(map(int, input().split(\" \")))\n    if(a==1):\n        a = 14\n    if(b==1):\n        b = 14\n    if(a > b):\n        print(\"Alice\")\n    elif(a == b):\n        print(\"Draw\")\n    else:\n        print(\"Bob\")"}
{"label": 37, "index": 4695, "code": "A,B = [int(x) for x in input().split()]\nif A==B:\n    print('Draw')\nelif A == 1:\n    print('Alice')\nelif B ==1:\n    print('Bob')\nelif A>B:\n    print('Alice')\nelif B>A:\n    print('Bob')"}
{"label": 37, "index": 4696, "code": "a = input()\na2 = a.split()\na = int(a2[0])\nb = int(a2[1])\n\nif a>b:\n    if b==1:\n        print(\"Bob\")\n    else:\n        print(\"Alice\")\nelif a<b:\n    if a==1:\n        print(\"Alice\")\n    else:\n        print(\"Bob\")\nelse:\n    print(\"Draw\")\n"}
{"label": 37, "index": 4697, "code": "from sys import exit, setrecursionlimit\nfrom functools import reduce\nfrom itertools import *\nfrom collections import defaultdict\nfrom bisect import bisect\n\ndef read():\n  return int(input())\n\ndef reads():\n  return [int(x) for x in input().split()]\n\nsetrecursionlimit(1000000)\n\n(a, b) = reads()\n\nif a == 1:\n  a = 14\nif b == 1:\n  b = 14\n\nif a > b:\n  print(\"Alice\")\nelif a < b:\n  print(\"Bob\")\nelse:\n  print(\"Draw\")\n"}
{"label": 37, "index": 4698, "code": "a = map(int,raw_input().split())\n\nif a[0] == a[1]:\n        print \"Draw\"\nelif a[0] == 1:\n        print \"Alice\"\nelif a[1] == 1:\n        print \"Bob\"\nelif a[0] > a[1]:\n        print \"Alice\"\nelse:\n        print \"Bob\""}
{"label": 37, "index": 4699, "code": "A, B = map(int, raw_input().split())\ncard = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1]\nif card.index(A) > card.index(B):\n    print \"Alice\"\nelif card.index(A) < card.index(B):\n    print \"Bob\"\nelse:\n    print \"Draw\"\n"}
{"label": 37, "index": 4700, "code": "a, b = map(int, input().split())\nif a == 1:\n  a = 14\nif b == 1:\n  b = 14\n\nif a > b:\n  print(\"Alice\")\nelif a < b:\n  print(\"Bob\")\nelse:\n  print(\"Draw\")\n"}
{"label": 37, "index": 4701, "code": "a = list(map(lambda x: int(x) if x!='1' else 14, input().split()))\nif a[0]> a[1]:\n    print('Alice')\nelif a[0] == a[1]:\n    print('Draw')\nelse:\n    print('Bob')\n"}
{"label": 37, "index": 4702, "code": "import sys\n\na, b = input().split()\na = int(a)\nb = int(b)\n\nif a == b:\n    print(\"Draw\")\n    sys.exit()\nelif a > b:\n    if b == 1:\n        print(\"Bob\")\n        sys.exit()\n    print(\"Alice\")\n    sys.exit()\nelif a == 1:\n    print(\"Alice\")\n    sys.exit()\nprint(\"Bob\")\n"}
{"label": 37, "index": 4703, "code": "import sys\na, b = map(int, sys.stdin.readline().split())\na = (a + 13) % 15\nb = (b + 13) % 15 \nif a > b:\n  print 'Alice'\nelif b > a:\n  print 'Bob'\nelse:\n  print 'Draw'\n"}
{"label": 37, "index": 4704, "code": "# -*- coading: utf-8 -#-\n\nA = raw_input()\nB = A.split()\nC, D = int(B[0]), int(B[1])\n\nif C == 1:\n  if D == 1:\n    print 'Draw'\n  else:\n    print 'Alice'\nelse:\n  if D == 1:\n    print 'Bob'\n  else:\n    if C > D:\n      print 'Alice'\n    elif C < D:\n      print 'Bob'\n    else:\n      print 'Draw'"}
{"label": 37, "index": 4705, "code": "c = input().split()\na = int(c[0])\nb = int(c[1])\nif a == 1:\n    a = 14\nif b == 1:\n    b = 14\n\nif a > b:\n    print(\"Alice\")\nelif b > a:\n    print(\"Bob\")\nelse:\n    print(\"Draw\")"}
{"label": 37, "index": 4706, "code": "a,b = map(int, raw_input().split())\nap = (a+11)%13\nbp = (b+11)%13\nif ap > bp:\n  print \"Alice\"\nelif ap < bp:\n  print \"Bob\"\nelse:\n  print \"Draw\""}
{"label": 37, "index": 4707, "code": "# -*- coding:utf-8 -*-\nimport sys\nA, B = map(int, input().split())\nif A == B:\n    print(\"Draw\")\n    sys.exit()\nif A > B:\n    if B == 1:\n        print(\"Bob\")\n    else:\n        print(\"Alice\")\nelse:\n    if A == 1:\n        print(\"Alice\")\n    else:\n        print(\"Bob\")"}
{"label": 37, "index": 4708, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\n\ndef main():\n    A, B = map(int, input().split())\n\n    A = 14 if A == 1 else A\n    B = 14 if B == 1 else B\n\n    if A == B:\n        print(\"Draw\")\n    elif A > B:\n        print(\"Alice\")\n    else:\n        print(\"Bob\")\n\nif __name__ == \"__main__\": main()\n"}
{"label": 37, "index": 4709, "code": "Alice, Bob = map(lambda x: 14 if x == \"1\" else int(x), input().split())\nif Alice > Bob:\n print(\"Alice\")\nelif Alice < Bob:\n print(\"Bob\")\nelse:\n print(\"Draw\")"}
{"label": 37, "index": 4710, "code": "a,b = map(int,input().split())\nif a == b :\n    print(\"Draw\")\nelif a==1 or (a>1 and b>1 and a>b):\n    print(\"Alice\")\nelse:\n    print(\"Bob\")\n"}
{"label": 37, "index": 4711, "code": "from sys import stdin\ndef g(n):\n if n=='1':\n  return 14\n return int(n)\na,b = stdin.readline().strip().split()\na = g(a)\nb = g(b)\nif a > b:\n print 'Alice'\nelif a<b:\n print 'Bob'\nelse:\n print 'Draw'"}
{"label": 37, "index": 4712, "code": "import sys\n[Alice, Bob] = sys.stdin.readline().split()\nif Alice == Bob:\n\tprint('Draw')\n\tsys.exit()\nif Alice == '1':\n\tprint('Alice')\n\tsys.exit()\nif Bob == '1':\n\tprint('Bob')\n\tsys.exit()\nif int(Alice) < int(Bob):\n\tprint('Bob')\nelse:\n\tprint('Alice')"}
{"label": 37, "index": 4713, "code": "a, b = map(int, raw_input().strip().split(\" \"))\na, b = map(lambda x: (x + 11) % 13, (a, b))\nif a > b:\n\tprint \"Alice\"\nelif a == b:\n\tprint \"Draw\"\nelse:\n\tprint \"Bob\"\n"}
{"label": 37, "index": 4714, "code": "A, B = tuple(map(int, input().strip().split()))\n\nif A == 1:\n    A = 14\n\nif B == 1:\n    B = 14\n\nif A > B:\n    print('Alice')\nelif A < B:\n    print('Bob')\nelse:\n    print('Draw')\n\n"}
{"label": 37, "index": 4715, "code": "a, b = map(int, input().split())\nif a == 1:\n    a = 14\nif b == 1:\n    b = 14\n\nif a == b:\n    print(\"Draw\")\nelif a > b:\n    print(\"Alice\")\nelse:\n    print(\"Bob\")\n"}
{"label": 37, "index": 4716, "code": "a, b = map(int, input().split())\n\nif a == 1:\n\ta = 14\nif b == 1:\n\tb = 14\n\nif a == b:\n\tprint('Draw')\nelif a > b:\n\tprint('Alice')\nelse:\n\tprint('Bob')"}
{"label": 37, "index": 4717, "code": "#!/usr/bin/env python3\nif __name__ == '__main__':\n  l = list([-1,100])\n  for i in range(2,14):\n    l.append(i)\n  # for i in range(1,14):\n  #   print(i, l[i])\n  s = str(input()).split(\" \")\n  a = int(s[0])\n  b = int(s[1])\n  if l[a] > l[b]:\n    print(\"Alice\")\n  elif l[a] < l[b]:\n    print(\"Bob\")\n  else:\n    print(\"Draw\")\n"}
{"label": 37, "index": 4718, "code": "num = list(map(int,raw_input().split()))\nfor i in range (2):\n    if num[i] == 1:\n        num[i] = 14\nif num[0] > num[1]:\n    print \"Alice\"\nelif num[0] < num[1]:\n    print \"Bob\"\nelse:\n    print \"Draw\"\n"}
{"label": 37, "index": 4719, "code": "a,b = map(int,input().split())\nif a == 1 : a = 14\nif b == 1 : b = 14\nif a > b : print (\"Alice\")\nelif a < b : print (\"Bob\")\nelse : print (\"Draw\")\n"}
{"label": 37, "index": 4720, "code": "A,B = map(int, input().split())\nif A == 1:\n    A = 14\nif B == 1:\n    B = 14\n\nif A > B:\n    print(\"Alice\")\nelif B > A:\n    print(\"Bob\")\nelse:\n    print(\"Draw\")"}
{"label": 37, "index": 4721, "code": "a,b= map(int,input().split())\n\nif a == b:\n    print(\"Draw\")\nelif a==1:\n    print(\"Alice\")\nelif b==1:\n    print(\"Bob\")\nelif a>b:\n    print(\"Alice\")\nelse:\n    print(\"Bob\")"}
{"label": 37, "index": 4722, "code": "a, b = map(int, input().split())\nif a == 1:\n    a = 14\nif b == 1:\n    b = 14\n\nif a > b:\n    print(\"Alice\")\nelif a < b:\n    print(\"Bob\")\nelse:\n    print(\"Draw\")"}
{"label": 37, "index": 4723, "code": "cards = input().split()\n\ndef judge(A, B):\n    if (A != 1) and (B != 1):\n        if A > B:\n            return 'Alice'\n        elif A < B:\n            return 'Bob'\n        else:\n            return 'Draw'\n    else:\n        if A < B:\n            return 'Alice'\n        elif A > B:\n            return 'Bob'\n        else:\n            return 'Draw'\n\nprint(judge(int(cards[0]), int(cards[1])))"}
{"label": 37, "index": 4724, "code": "N = input().split()\nA = int(N[0])\nB = int(N[1])\n\nif A > B:\n    if B != 1:\n        print(\"Alice\")\n    else:\n        print(\"Bob\")\nelif A == B:\n    print(\"Draw\")\nelse:\n    if A != 1:\n        print(\"Bob\")\n    else:\n        print(\"Alice\")"}
{"label": 37, "index": 4725, "code": "a, b = list(map(int, input().split()))\nif (a-2)%13 > (b-2)%13:\n    print('Alice')\nelif (a-2)%13 == (b-2)%13:\n    print('Draw')\nelse:\n    print('Bob')\n"}
{"label": 37, "index": 4726, "code": "# \u5165\u529b\nA,B = map(int,input().split())\n\n# 4\u30d1\u30bf\u30fc\u30f3\u691c\u8a0e\u3059\u308b\nif A == 1:\n    A = 14\nif B == 1:\n    B = 14\n\nif A > B:\n    print('Alice')\nelif A < B:\n    print('Bob')\nelse:\n    print('Draw')"}
{"label": 37, "index": 4727, "code": "A, B = map(int, input().split())\nif A == 1 : A = 14\nif B == 1 : B = 14\nprint('Draw' if A == B else ('Alice' if A > B else 'Bob'))"}
{"label": 37, "index": 4728, "code": "a, b = map(int, input().split())\nif a == 1:\n    a = 14\nif b == 1:\n    b = 14\nif a > b:\n    print(\"Alice\")\nelif a < b:\n    print(\"Bob\")\nelse:\n    print(\"Draw\")\n"}
{"label": 37, "index": 4729, "code": "def getRank(n):\n    nums = [2,3,4,5,6,7,8,9,10,11,12,13,1]\n    rank = 99\n    for i in range(13):\n        if n == nums[i]:\n            rank = i\n            break\n    return rank\n\n\n\na,b = list(map(int, input().split()))\nalice = getRank(a)\nbob = getRank(b)\nif alice > bob:\n    print(\"Alice\")\nelif alice < bob:\n    print(\"Bob\")\nelse:\n    print(\"Draw\")\n"}
{"label": 37, "index": 4730, "code": "import sys\nimport io\nsys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')\n \na, b = map(int, input().split())\nif a==1:a=100\nif b==1:b=100\n[print(\"Alice\") if a>b else print(\"Bob\") if a<b else print(\"Draw\")]"}
{"label": 37, "index": 4731, "code": "A,B =map(int,input().split())\n\nif A>=2 and A<B:\n    print(\"Bob\")\n\nelif A==13 and B==1:\n    print(\"Bob\")\n\nelif A==B:\n    print(\"Draw\")\n\nelse:\n    print(\"Alice\")"}
{"label": 37, "index": 4732, "code": "values = [int(i) for i in input().split()]\na = values[0] if values[0] != 1 else 14\nb = values[1] if values[1] != 1 else 14\nif a == b:\n    print(\"Draw\")\nelif a > b:\n    print(\"Alice\")\nelif a < b:\n    print(\"Bob\")\n"}
{"label": 37, "index": 4733, "code": "A,B = map(int, raw_input().split())\n\nif A == 1: \n    A = 100\nif B == 1: \n    B = 100\n\nif(A>B): \n    print 'Alice'\nelif(A<B):\n    print 'Bob'\nelse:\n    print 'Draw'"}
{"label": 37, "index": 4734, "code": "# -*- coding: utf-8 -*-\nimport sys\n# sys.setrecursionlimit(10000)\n\n\ndef main():\n    # \u5165\u529b\u51e6\u7406\n    # N = int(input())\n    A, B = map(int, input().split())\n\n    # \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u672c\u4f53\n    strength = lambda x: (x - 2) % 13\n    if strength(A) > strength(B):\n        winner = \"Alice\"\n    elif strength(A) < strength(B):\n        winner = \"Bob\"\n    else:\n        winner = \"Draw\"\n\n    # \u51fa\u529b\n    print(winner)\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 37, "index": 4735, "code": "# -*- coding: utf-8 -*-\n\"\"\"\nSpyder\u30a8\u30c7\u30a3\u30bf\n\n\u3053\u308c\u306f\u4e00\u6642\u7684\u306a\u30b9\u30af\u30ea\u30d7\u30c8\u30d5\u30a1\u30a4\u30eb\u3067\u3059\n\"\"\"\nalice = input().split()\nalice[0] = int(alice[0])\nalice[1] = int(alice[1])\nif(alice[0] == alice[1]):\n    print(\"Draw\")\nelif(alice[0] == 1):\n    print(\"Alice\")\nelif(alice[1] == 1):\n    print(\"Bob\")\nelif(alice[0] < alice[1]):\n    print(\"Bob\")\nelif(alice[0] > alice[1]):\n    print(\"Alice\")\n\n"}
{"label": 37, "index": 4736, "code": "# -*- coding:utf-8 -*-\na,b = map(int,input().split())\nif a == b:\n    print('Draw')\nelif a == 1:\n    print('Alice')\nelif b == 1:\n    print('Bob')\nelif a > b:\n    print('Alice')\nelif a < b:\n    print('Bob')"}
{"label": 37, "index": 4737, "code": "c=list(range(2,14))\nc.append(1)\na,b=map(int,input().split())\nif a==b: print(\"Draw\")\nelse: print(\"Alice\" if c.index(a) > c.index(b) else \"Bob\")"}
{"label": 37, "index": 4738, "code": "A, B = map(int, raw_input().split())\nif (A == 1): A = 14\nif (B == 1): B = 14\nif A > B:\n    print \"Alice\"\nelif A == B:\n    print \"Draw\"\nelse:\n    print \"Bob\""}
{"label": 37, "index": 4739, "code": "\nstrn = [2,3,4,5,6,7,8,9,10,11,12,13,1]\na, b = map(int, input().split())\na_idx = strn.index(a)\nb_idx = strn.index(b)\n\nans = 'Draw'\nif a_idx < b_idx:\n    ans = 'Bob'\nelif a_idx > b_idx:\n    ans = 'Alice'\nprint(ans)\n"}
{"label": 37, "index": 4740, "code": "a, b = map(int, input().split())\n\nif a == 1:\n    a = 14\nif b == 1:\n    b = 14\n\nprint('Draw' if a == b else 'Alice' if a > b else 'Bob')\n"}
{"label": 37, "index": 4741, "code": "A, B = map(int, input().split())\n\nif A == 1:\n    A = 14\nif B == 1:\n    B = 14\n\nif A > B:\n    print(\"Alice\")\nelif B > A:\n    print(\"Bob\")\nelse:\n    print(\"Draw\")\n"}
{"label": 37, "index": 4742, "code": "(A,B) = [int(x) for x in input().split()]\nif A == B:\n    print(\"Draw\")\nelif A == 1:\n    print(\"Alice\")\nelif B == 1:\n    print(\"Bob\")\nelif A > B:\n    print(\"Alice\")\nelse:\n    print(\"Bob\")"}
{"label": 37, "index": 4743, "code": "A,B = map(int, input().split())\n\nif A == B:\n    print(\"Draw\")\nelif A == 1:\n    print(\"Alice\")\nelif B == 1:\n    print(\"Bob\")\nelif A>B:\n    print(\"Alice\")\nelse :\n    print (\"Bob\")"}
{"label": 37, "index": 4744, "code": "def solve():\n    A, B = map(int, input().split())\n    if A == B:\n        ans = \"Draw\"\n    elif A == 1:\n        ans = \"Alice\"\n    elif B == 1:\n        ans = \"Bob\"\n    elif A > B:\n        ans = \"Alice\"\n    elif A < B:\n        ans = \"Bob\"\n    print(ans)\n\nif __name__ == '__main__':\n    solve()"}
{"label": 37, "index": 4745, "code": "input_line = map(int,raw_input().split(\" \"))\na = input_line[0]\nb = input_line[1]\n\nif a != b:\n\tif a == 1:\n\t\tprint \"Alice\"\n\telif b == 1:\n\t\tprint \"Bob\"\n\telif a > b :\n\t\tprint \"Alice\"\n\telif a < b:\n\t\tprint \"Bob\"\nelse:\n\tprint \"Draw\""}
{"label": 37, "index": 4746, "code": "a, b = map(int, input().split())\n\nif a == b:\n    print('Draw')\nelif a == 1 or a > b & b != 1:\n    print('Alice')\nelse:\n    print('Bob')"}
{"label": 37, "index": 4747, "code": "A, B = map(int, input().split(\" \"))\n\nif A==B:\n    print(\"Draw\")\nelif A==1:\n    print(\"Alice\")\nelif B==1:\n    print(\"Bob\")\nelif A>B:\n    print(\"Alice\")\nelse:\n    print(\"Bob\")"}
{"label": 37, "index": 4748, "code": "a, b = map(int, input().split())\nif a == 1 and b == 13:\n    print('Alice')\nelif a == 13 and b == 1:\n    print('Bob')\nelif a > b:\n    print('Alice')\nelif a < b:\n    print('Bob')\nelse:\n    print('Draw')"}
{"label": 37, "index": 4749, "code": "#!/usr/bin/env python\n\n# Input\nAlice,Bob = [int(i) for i in input().split()]\n\nif Alice==1:\n  Alice = 14\n\nif Bob==1:\n  Bob = 14\n\nif(Alice == Bob):\n  print(\"Draw\")\nelif(Alice > Bob):\n  print(\"Alice\")\nelse:\n  print(\"Bob\")\n"}
{"label": 37, "index": 4750, "code": "a,b = (int(i) for i in input().split()) \nif a==1 or b ==1:\n\tif a==1 and b==1:\n\t\tprint('Draw')\n\telif a==1 and b != 1:\n\t\tprint('Alice')\n\telif a!=1 and b==1:\n\t\tprint('Bob')\nelse:\n\tif a > b:\n\t\tprint('Alice')\n\telif b > a:\n\t\tprint('Bob')\n\telif a == b:\n\t\tprint('Draw')\n\telse:\n\t\tpass"}
{"label": 37, "index": 4751, "code": "A,B = map(int, input().split())\n\nif A > B > 1:\n    print('Alice')\nelif A == B :\n    print('Draw')\nelif A == 1 :\n    print('Alice')\nelse:\n    print('Bob')\n"}
{"label": 37, "index": 4752, "code": "a, b = map(int, raw_input().split())\n\nif a == 1:\n\ta = 14\n\nif b == 1:\n\tb = 14\n\nif a > b:\n\tprint \"Alice\"\nelif a < b:\n\tprint \"Bob\"\nelse:\n\tprint \"Draw\""}
{"label": 37, "index": 4753, "code": "a=[2,3,4,5,6,7,8,9,10,11,12,13,14]\nb,c=map(int,input().split())\nprint('Draw' if c==b else('Alice' if a[b-2]>a[c-2]else'Bob'))"}
{"label": 37, "index": 4754, "code": "a, b = [int(i) for i in input().split()]\nif a is 1:\n    a += 13\nif b is 1:\n    b += 13\nif a > b:\n    print('Alice')\nelif b > a:\n    print('Bob')\nelse:\n    print('Draw')\n"}
{"label": 37, "index": 4755, "code": "data = raw_input()\n\nq = data.split(\" \")\n\nx = int(q[0])\ny = int(q[1])\n\nif x == 1:\n  x = 14\nif y == 1:\n  y = 14\n\nif x == y:\n  print \"Draw\"\n  exit(0)\n\nif x > y:\n  print \"Alice\"\n  exit(0)\nprint \"Bob\"\n"}
{"label": 37, "index": 4756, "code": "#A One card Poker\nA,B = [int(i) for i in input().split(\" \")]\nif A == B:\n    print(\"Draw\")\nelif (A == 1) or (A>B and B!=1):\n    print(\"Alice\")\nelse:\n    print(\"Bob\")"}
{"label": 37, "index": 4757, "code": "#coding:utf-8\nA, B = map(int, input().rstrip().split())\nif A != 1 and B != 1:\n  if A > B:\n    print(\"Alice\")\n  elif A < B:\n    print(\"Bob\")\n  else:\n    print(\"Draw\")\nelse:\n  if A < B:\n    print(\"Alice\")\n  elif A > B:\n    print(\"Bob\")\n  else:\n    print(\"Draw\")"}
{"label": 37, "index": 4758, "code": "a,b = map(int,input().split())\nif a == 1:\n    a = 14\nif b == 1:\n    b = 14\nif a == b:\n    print(\"Draw\")\nelif a < b:\n    print(\"Bob\")\nelse:\n    print(\"Alice\")"}
{"label": 37, "index": 4759, "code": "A, B = map(int, input().split(' '))\nif A == 1: A=14\nif B == 1: B=14\nif A < B:\n    print(\"Bob\")\nelif A > B:\n    print(\"Alice\")\nelse:\n    print(\"Draw\")"}
{"label": 37, "index": 4760, "code": "A, B = list(map(int, input().split()))\nif A == B:\n    print('Draw')\nelse:\n    if A == 1:\n        print('Alice')\n    elif B == 1:\n        print('Bob')\n    elif A > B:\n        print('Alice')\n    else:\n        print('Bob')"}
{"label": 37, "index": 4761, "code": "A, B = map(int, raw_input().split())\n\nif A == B:\n    print \"Draw\"\nelif A == 1 or (B != 1 and A > B):\n    print \"Alice\"\nelse:\n    print \"Bob\"\n"}
{"label": 37, "index": 4762, "code": "A, B = map(int, input().split())\nif A == 1:\n    A = 14\nif B == 1:\n    B = 14\n\nif A == B:\n    print('Draw')\nelif A > B:\n    print('Alice')\nelif B > A:\n    print('Bob')"}
{"label": 37, "index": 4763, "code": "A , B = [int(n) for n in input().split()]\nif A == 1:\n    A = 14\nif B == 1:\n    B = 14\n\nif A > B:\n    print('Alice')\nelif A < B:\n    print('Bob')\nelse:\n    print('Draw')\n\n"}
{"label": 37, "index": 4764, "code": "import sys\n \nfor line in sys.stdin:\n    card = line.split(\" \")\n    alice = int(card[0])\n    bob = int(card[1])\n    if alice == 1:\n        alice += 13\n    if bob == 1:\n        bob += 13\n        \n    if alice > bob:\n        print(\"Alice\")\n    elif alice < bob:\n        print(\"Bob\")\n    else:\n        print(\"Draw\")"}
{"label": 37, "index": 4765, "code": "def to_fourteen(x):\n    return 14 if x == \"1\" else int(x)\n\nalice, bob = map(to_fourteen, input().split())\nif alice == bob:\n    print(\"Draw\")\nelse:\n    print(\"Alice\" if alice > bob else \"Bob\")"}
{"label": 37, "index": 4766, "code": "from sys import stdin\n\na, b = map(int, stdin.readline().split())\n\nif a == 1:\n    a = 100\nif b == 1:\n    b = 100\n\nif a > b:\n    print('Alice')\nelif b > a:\n    print('Bob')\nelse:\n    print('Draw')\n"}
{"label": 37, "index": 4767, "code": "a, b = map(int, input().split())\n\nif a == b:\n    print(\"Draw\")\nelif a == 1:\n    print(\"Alice\")\nelif b == 1:\n    print(\"Bob\")\nelif a > b:\n    print(\"Alice\")\nelif a < b:\n    print(\"Bob\")\n"}
{"label": 37, "index": 4768, "code": "s = input()\nx = s.split()\nA = int(x[0])\nB = int(x[1])\nif A == 1:\n    if B == 1:\n        print('Draw')\n    else:\n        print(\"Alice\")\nelif B == 1:\n    print('Bob')\nelif A > B:\n    print('Alice')\nelif B > A:\n    print('Bob')\nelif A == B:\n    print('Draw') "}
{"label": 37, "index": 4769, "code": "alice, bob = [int(x) for x in raw_input().split()]\nif alice == 1: alice = 14\nif bob == 1: bob = 14\nif alice < bob:\n   print 'Bob'\nelif alice > bob:\n   print 'Alice'\nelse:\n   print 'Draw'\n"}
{"label": 37, "index": 4770, "code": "A, B = map(int, input().split())\n\nif A == B:\n\tprint(\"Draw\")\nelif A == 1 and B != 1:\n\tprint(\"Alice\")\nelif B == 1 and A != 1:\n\tprint(\"Bob\")\nelif A > B:\n\tprint(\"Alice\")\nelif A < B:\n\tprint(\"Bob\")\n"}
{"label": 37, "index": 4771, "code": "# coding: utf-8\n\nnumbers=input().rstrip().split(\" \")\n\nif int(numbers[0])==1:\n    numbers[0]=14\n\nif int(numbers[1])==1:\n    numbers[1]=14\n    \nif int(numbers[0])>int(numbers[1]):\n    print(\"Alice\")\n\nelif int(numbers[0])<int(numbers[1]):\n    print(\"Bob\")\n\nelse:\n    print(\"Draw\")"}
{"label": 37, "index": 4772, "code": "\na,b = map(int,raw_input().split())\n\nif a==1:\n\ta=14\nif b==1:\n\tb=14\n\nif a > b:\n\tprint \"Alice\"\nelif b > a:\n\tprint \"Bob\"\nelse:\n\tprint \"Draw\""}
{"label": 37, "index": 4773, "code": "from collections import defaultdict\n\n\ndef main():\n    A, B = map(int, input().split())\n    d = {1: 14}\n\n    if d.get(A, A) == d.get(B, B):\n        print(\"Draw\")\n    elif d.get(A, A) > d.get(B, B):\n        print(\"Alice\")\n    else:\n        print(\"Bob\")\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 37, "index": 4774, "code": "import sys\n\ndef debug(x, table):\n    for name, val in table.items():\n        if x is val:\n            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)\n            return None\n\ndef solve():\n    A, B = map(int, input().split())\n\n    if A == B:\n        ans = 'Draw'\n    else:\n        if A == 1:\n            ans = 'Alice'\n        elif B == 1:\n            ans = 'Bob'\n        elif A > B:\n            ans = 'Alice'\n        else:\n            ans = 'Bob'\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    solve()"}
{"label": 37, "index": 4775, "code": "a, b = map(int, input().split())\nif a == b:\n    print(\"Draw\")\nelif a > b and b!=1 or a==1:\n    print(\"Alice\")\nelse:\n    print(\"Bob\")\n"}
{"label": 37, "index": 4776, "code": "input_line1 = input()\nstr_list = input_line1.split(\" \")\n\nAlice = int(str_list[0])\nBob = int(str_list[1])\n\nif Alice == 1:\n    Alice = 15\nif Bob == 1:\n    Bob = 15\n    \nif Alice > Bob:\n    print(\"Alice\")\nif Bob > Alice:\n    print(\"Bob\")\nif Alice == Bob:\n    print(\"Draw\")"}
{"label": 37, "index": 4777, "code": "a, b = map(int, input().split())\nif a == 1 :\n    a = 14\nif b == 1 :\n    b = 14\nif a > b :\n    print ('Alice')\nelif a < b :\n    print('Bob')\nelse :\n    print('Draw')"}
{"label": 37, "index": 4778, "code": "def main():\n    a, b = [int(x) for x in input().split()]\n    a = 14 if a == 1 else a\n    b = 14 if b == 1 else b\n    if a > b:\n        print(\"Alice\")\n    elif b > a:\n        print(\"Bob\")\n    else:\n        print(\"Draw\")\n\n\nif __name__ == \"__main__\":\n    main()\n"}
{"label": 37, "index": 4779, "code": "#ABC054A\n\na,b=map(int,raw_input().split())\nif a==1:\n a=14\nif b==1:\n b=14\nif a>b:\n print 'Alice'\nelif a<b:\n print 'Bob'\nelse:\n print 'Draw'\n"}
{"label": 37, "index": 4780, "code": "l = input().split()\n\nA = int(l[0])\nB = int(l[1])\n\nif A == 1:\n    A = 14\nif B == 1:\n    B = 14\n    \nif A > B:\n    print(\"Alice\")\nif A == B:\n    print(\"Draw\")\nif A < B:\n    print(\"Bob\")"}
{"label": 37, "index": 4781, "code": "#!/usr/bin/env python\n\nnumbers = raw_input().split()\n\nA = int(numbers[0])\nB = int(numbers[1])\n\nif A == B :\n   print \"Draw\"\nelif A == 1:\n   print \"Alice\"\nelif B == 1:\n   print \"Bob\"\nelif A > B:\n   print \"Alice\"\nelif B > A:\n   print \"Bob\""}
{"label": 37, "index": 4782, "code": "def solve(alice, bob):\n    if alice == bob: return \"Draw\"\n    return \"Alice\" if alice > bob else \"Bob\" \n\nif __name__ == '__main__':\n    alice, bob = [14 if token == '1' else int(token) for token in input().split()]\n    ans = solve(alice, bob)\n    print(ans)"}
{"label": 37, "index": 4783, "code": "#!/usr/bin/env python3\n\nAlice, Bob = map(int, input().split())\nif Alice == 1:\n    Alice = 14\nif Bob == 1:\n    Bob = 14\n\nif Alice > Bob:\n    print('Alice')\nelif Bob > Alice:\n    print('Bob')\nelse:\n    print('Draw')\n"}
{"label": 37, "index": 4784, "code": "Alice,Bob=[int(i) for i in input().split()]\n\nif Alice==1:\n\tAlice=14\nif Bob==1:\n\tBob=14\nif Alice<Bob:\n\tprint(\"Bob\")\nelif Bob<Alice:\n\tprint(\"Alice\")\nelse:\n\tprint(\"Draw\")"}
{"label": 37, "index": 4785, "code": "# -*- coding:utf8\n\nA,B = [int(x) for x in raw_input().split()]\n\nif A == 1:\n    A = 14\nif B == 1:\n    B = 14\n\nif A > B:\n    print 'Alice'\nelif B > A:\n    print 'Bob'\nelse:\n    print 'Draw'"}
{"label": 37, "index": 4786, "code": "def Main():\n  a, b = map(int, input().split())\n  if a > 1 and b > 1:\n    if a < b:\n      print(\"Bob\")\n    elif a > b:\n      print(\"Alice\")\n    elif a == b:\n      print('Draw')\n\n  elif a == 1:\n    # if b > a:\n    #   print('Bob')\n    if b == a:\n      print('Draw')\n    else:\n      print('Alice')\n  elif b == 1:\n    # if a > b:\n    #   print('Alice')\n    if b == a:\n      print(\"Draw\")\n    else:\n      print('Bob')\n\n\nif __name__ == '__main__':\n  Main()"}
{"label": 37, "index": 4787, "code": "def f(A, B):\n    if A == 1 and B == 1:\n        return 'Draw'\n    if A == 1:\n        return 'Alice'\n    if B == 1:\n        return 'Bob'\n    \n    if A > B:\n        return 'Alice'\n    if A < B:\n        return 'Bob'\n    return 'Draw'\n\nA, B = input().split()\nA = int(A)\nB = int(B)\nprint(f(A, B))"}
{"label": 37, "index": 4788, "code": "#coding: UTF-8\nA, B=map(int,input().split())\nif A==1:\n    if B==1:\n        print(\"Draw\")\n    else:\n        print(\"Alice\")\nelif B==1:\n    print(\"Bob\")\nelse:\n    if A>B:\n        print(\"Alice\")\n    elif B>A:\n        print(\"Bob\")\n    else:\n        print(\"Draw\")"}
{"label": 37, "index": 4789, "code": "a,b=map(int,input().split())\nif a==1:\n    a+=13\nif b==1:\n    b+=13\nif a==b:\n    print('Draw')\nelif a>b:\n    print('Alice')\nelse:\n    print('Bob')\n"}
{"label": 37, "index": 4790, "code": "A,B=map(int,input().split())\nif A==B:\n print ('Draw') \nelif A==1:\n print ('Alice')\nelif B==1:\n print('Bob')\nelif A>B:\n print('Alice')\nelse:\n print('Bob')\n"}
{"label": 37, "index": 4791, "code": "A, B = map(int, input().split())\nif A == 1 and B != 1:\n    print(\"Alice\")\nelif A != 1 and B == 1:\n    print(\"Bob\")\nelif A == 1 and B == 1:\n    print(\"Draw\")\nelif A > B:\n    print(\"Alice\")\nelif A < B:\n    print(\"Bob\")\nelse:\n    print(\"Draw\")\n    "}
{"label": 37, "index": 4792, "code": "A, B = map(int, raw_input().split())\nif A == 1: A = 14\nif B == 1: B = 14\nif A > B: print \"Alice\"\nif B > A: print \"Bob\"\nif A == B: print \"Draw\""}
{"label": 37, "index": 4793, "code": "a,b=map(int,input().split())\n\nif a==1:\n    if b==1:\n        print(\"Draw\")\n    elif b>=2:\n        print(\"Alice\")\nelif a>=2:\n    if b==1:\n        print(\"Bob\")\n    if b>=2:\n        if a==b:\n            print(\"Draw\")\n        if a>b:\n            print(\"Alice\")\n        if a<b:\n            print(\"Bob\")"}
{"label": 37, "index": 4794, "code": "A, B = list(map(int, input().split(\" \")))\nhand = [2,3,4,5,6,7,8,9,10,11,12,13,1]\n\nif hand.index(A) > hand.index(B):\n    print(\"Alice\")\nelif hand.index(A) == hand.index(B):\n    print(\"Draw\")\nelse:\n    print(\"Bob\")"}
{"label": 37, "index": 4795, "code": "from collections import defaultdict\n\n\ndef main():\n    A, B = map(int, input().split())\n\n    if A == 1:\n        A += 100\n    if B == 1:\n        B += 100\n\n    if A == B:\n        print(\"Draw\")\n    elif A > B:\n        print(\"Alice\")\n    else:\n        print(\"Bob\")\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 37, "index": 4796, "code": "A, B = map(int, input().split())\n\ndef v():\n    if A == 1:\n        if B != 1:\n            return 'Alice'\n        else:\n            return 'Draw'\n    if B == 1:\n        if A != 1:\n            return 'Bob'\n        else:\n            return 'Draw'\n    if A > B:\n        return 'Alice'\n    if B > A:\n        return 'Bob'\n    return 'Draw'\n\nprint(v())\n"}
{"label": 37, "index": 4797, "code": "Alice,Bob = input().split()\nAlice = int(Alice) if Alice != \"1\" else 14\nBob = int(Bob) if Bob != \"1\" else 14\n\nif Alice > Bob:\n    result = \"Alice\" \nelif Alice == Bob:\n    result = \"Draw\" \nelse: \n    result = \"Bob\"\nprint(result)"}
{"label": 37, "index": 4798, "code": "\nA, B = (int(i) for i in input().split())\n\nif (A > B or A == 1) and B != 1:\n    print(\"Alice\")\nelif A == B:\n    print(\"Draw\")\nelse:\n    print(\"Bob\")\n"}
{"label": 37, "index": 4799, "code": "a, b = map(int, input().split())\nif a == 1:\n    a = 14\nif b == 1:\n    b = 14\n    \nif a > b:\n    print (\"Alice\")\nelif a < b:\n    print (\"Bob\")\nelse:\n    print (\"Draw\")"}
{"label": 37, "index": 4800, "code": "A,B = map(int, input().split())\n\nif A==B:\n\tprint(\"Draw\")\nelif A == 1:\n\tprint(\"Alice\")\nelif B == 1:\n\tprint(\"Bob\")\nelif A > B:\n\tprint(\"Alice\")\nelse:\n\tprint(\"Bob\")"}
{"label": 37, "index": 4801, "code": "t = list(str(input()).split(\" \"))\na = int(t[0])\nb = int(t[1])\n\nif(a < b):\n    if(a == 1): print(\"Alice\")\n    else: print(\"Bob\")\nelif(b < a):\n    if(b == 1): print(\"Bob\")\n    else: print(\"Alice\")\nelse:\n    print(\"Draw\")"}
{"label": 37, "index": 4802, "code": "# coding: utf-8\n\na, b= map(int, raw_input().split())\n\nif a == 1:\n    a += 13\nif b == 1:\n    b += 13\n\nif a > b:\n    print \"Alice\"\nelif a == b:\n    print \"Draw\"\nelse:\n    print \"Bob\""}
{"label": 37, "index": 4803, "code": "# -*- coading: utf-8 -#-\n\nA = raw_input()\nB = A.split( )\nC, D = int(B[0]), int(B[1])\n\nif C == 1:\n  if D == 1:\n    print 'Draw'\n  else:\n    print 'Alice'\nelse:\n  if D == 1:\n    print 'Bob'\n  else:\n    if C > D:\n      print 'Alice'\n    elif C < D:\n      print 'Bob'\n    else:\n      print 'Draw'\n"}
{"label": 37, "index": 4804, "code": "a,b = list(int(i) for i in input().split())\nif a == 1:\n    a = 14\nif b == 1:\n    b = 14\nif a==b:\n    print(\"Draw\")\nelse:\n    print(\"Alice\" if a>b else \"Bob\")"}
{"label": 37, "index": 4805, "code": "a = map(int, raw_input().split())\n\nif a[0] == 1 :\n    a[0] = 14\nif a[1] == 1 :\n    a[1] = 14\n\nif a[0] == a[1] :\n    print 'Draw'\nelif a[0] > a[1] :\n    print 'Alice'\nelse :\n    print 'Bob'"}
{"label": 37, "index": 4806, "code": "A,B = map(int, input().split())\nif(A==B):\n    print('Draw')\nelif A==1:\n    print('Alice')\nelif B==1:\n    print('Bob')\nelif A>B:\n    print('Alice')\nelif B>A:\n    print('Bob')\n"}
{"label": 37, "index": 4807, "code": "A,B = map(int,input().split())\n\n\nif A == 1 or B == 1:\n    if A == B:\n        print(\"Draw\")\n        exit()\n    elif A == 1 and A < B:\n        print(\"Alice\")\n        exit()\n    elif B == 1 and B < A:\n        print(\"Bob\")\n        exit()\n\nif A < B :\n    print(\"Bob\")\nelif A > B:\n    print(\"Alice\")\nelse :\n    print(\"Draw\")\n"}
{"label": 37, "index": 4808, "code": "a,b=map(int,raw_input().split())\n\nif a == 1 or b == 1:\n    if a < b:\n        print \"Alice\"\n    elif a == b:\n        print \"Draw\"\n    elif a > b:\n        print \"Bob\"\nelse:\n    if a > b:\n        print \"Alice\"\n    elif a == b:\n        print \"Draw\"\n    elif a < b:\n        print \"Bob\""}
{"label": 37, "index": 4809, "code": "cards = input().split()\nalice = int(cards[0])\nbob = int(cards[1])\n\nif alice == bob:\n    print(\"Draw\")\nelif alice == 1:\n    print(\"Alice\")\nelif bob == 1:\n    print(\"Bob\")\nelif alice < bob:\n    print(\"Bob\")\nelse :\n    print(\"Alice\")"}
{"label": 38, "index": 4810, "code": "N, M = map(int, input().split())\nA = [input() for _ in range(N)]\nB = [input() for _ in range(M)]\n\ndef f():\n    for i in range(0, N - M + 1):\n        for j in range(0, N - M + 1):\n            res = f2(i, j)\n            if res == True:\n                return True\n    return False\n\ndef f2(i, j):\n    for k in range(M):\n        for l in range(M):\n            if A[i+k][j+l] != B[k][l]:\n                return False\n    return True\n\nres = 'Yes' if f() == True else 'No'\nprint(res)"}
{"label": 38, "index": 4811, "code": "def main():\n    n,m = map(int,input().split())\n    a = ['' for _ in range(n)]\n    b = ['' for _ in range(m)]\n\n    for i in range(n):\n        a[i] = input()\n    for i in range(m):\n        b[i] = input()\n\n    for i in range(n-m+1):\n        for j in range(n-m+1):\n            same = True\n            for y in range(m):\n                for x in range(m):\n                    if a[i+y][j+x] != b[y][x]:\n                        same = False\n\n            if same:\n                return 'Yes'\n\n    return 'No'\n\nif __name__ == '__main__':\n    print(main())\n"}
{"label": 38, "index": 4812, "code": "n, m = map(int, input().split())\na = [input() for _ in range(n)]\nb = [input() for _ in range(m)]\n\n\ndef f():\n    if a == b:\n        return True\n    for i in range(n - m):\n        for j in range(n - m):\n            for k in range(m):\n                if a[i + k][j:j + m] != b[k]:\n                    break\n            else:\n                return True\n    return False\n\nprint(\"Yes\" if f() else \"No\")\n"}
{"label": 38, "index": 4813, "code": "# Suplemental: ABC54 B\nN, M = map(int, input().split())\nA = []\nfor i in range(N):\n    A.append(list(input()))\nB = []\nfor i in range(M):\n    B.append(list(input()))\n\nfor i in range(N-M+1):\n    for j in range(N-M+1):\n        flag = True\n        for k in range(M):\n            for l in range(M):\n                if(A[i+k][j+l] != B[k][l]):\n                    flag = False\n                    break\n            if flag == False:\n                break\n            \n        if flag == True:\n            print('Yes')\n            exit()\n\nprint('No')"}
{"label": 38, "index": 4814, "code": "# -*- coding: utf-8 -*-\nimport sys\nimport io\n\nsys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')\n\nn, m = map(int, input().split())\nn_list = [input().split()[0] for _ in range(n)]\nm_list = [input().split()[0] for _ in range(m)]\ndif = n-m\n\nans = \"\"\n\nclass DropNest(Exception):\n    pass \n\ntry:\n    for i in range(dif+1):\n        for j in range(dif+1):\n            target = n_list[i][j:j+m]\n           \n            if target != m_list[0]:\n                continue\n            else:\n                cnt = 0\n                for k in range(m):\n                    target_h = n_list[i+k][j:j+m]\n                    if target_h == m_list[k]:\n                        cnt+=1\n                if cnt==m:\n                    ans=\"Yes\"\n                    raise DropNest\n    print(\"No\")\nexcept DropNest:\n    print(ans)\n\n\n"}
{"label": 38, "index": 4815, "code": "n, m  = map(int, input().split())\n\na = []\nb = []\n\nfor _ in range(n):\n  a.append(list(input()))\n\nfor _ in range(m):\n  b.append(list(input()))\n\nfor i in range(n-m+1):\n  for j in range(n-m+1):\n   flag = True\n   for k in range(m):\n     for l in range(m):\n       if(a[i+k][j+l] != b[k][l]):\n         flag = False\n         break\n     if(flag == False):\n       break\n\n   if(flag == True):\n     print(\"Yes\")\n     exit()\n\n\nprint(\"No\")"}
{"label": 38, "index": 4816, "code": "n, m = map(int, input().split())\na = [input() for i in range(n)]\nb = [input() for i in range(m)]\n\nfor i in range(n - m + 1):\n    for j in range(n - m + 1):\n        flag = True\n        for k in range(m):\n            for l in range(m):\n                if b[k][l] != a[k + i][l + j]:\n                    flag = False\n                    break\n            if not flag:\n                break\n        if flag:\n            print(\"Yes\")\n            exit()\nprint(\"No\")\n"}
{"label": 38, "index": 4817, "code": "from itertools import product as prd\n\nn, m = map(int, input().split())\na = [input() for i in range(n)]\nb = [input() for i in range(m)]\n\n\nc = n - m + 1\nans = [list(map(lambda l: l[j:j+m], a[i:i+m])) == b for i, j in prd(range(c), range(c))]\nprint(\"Yes\" if any(ans) else \"No\")\n"}
{"label": 38, "index": 4818, "code": "import numpy as np\nN, M = map(int,input().split())\nA = [list(map(lambda x: 1 if x == \".\" else 0, list(input()))) for n in range(N)]\nB = [list(map(lambda x: 1 if x == \".\" else 0, list(input()))) for m in range(M)]\n\nA = np.array(A)\nB = np.array(B)\n\nflag = False\nfor r in range(N-M+1):\n    for c in range(N-M+1):\n        if (A[r:r+M, c:c+M] == B).all():\n            flag = True\nif flag:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 38, "index": 4819, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\ndef LI(): return list(map(int, input().split()))\ndef II(): return int(input())\ndef LS(): return input().split()\ndef S(): return input()\n\n\ndef main():\n    n,m = LI()\n    a = []\n    for i in range(n):\n        t = 0\n        for c in S():\n            t <<= 1\n            if c == '#':\n                t += 1\n        a.append(t)\n\n    b = []\n    for i in range(m):\n        t = 0\n        for c in S():\n            t <<= 1\n            if c == '#':\n                t += 1\n        b.append(t)\n\n    mask = 2**m-1\n    for i in range(n-m+1):\n        for j in range(n-m+1):\n            f = True\n            for k in range(m):\n                ak = (a[k+j] >> i) & mask\n                if ak != b[k]:\n                    f = False\n                    break\n            if f:\n                return 'Yes'\n    return 'No'\n\n\nprint(main())\n"}
{"label": 38, "index": 4820, "code": "N,M = map(int,input().split())\nA = [input().strip() for i in range(N)]\nB = [input().strip() for i in range(M)]\n\nagree = False\nfor i in range(N-M+1):\n    for j in range(N-M+1):\n        for k in range(M):\n            if A[i+k][j:j+M] != B[k]:\n                break\n        else:\n            agree = True\n            break\n    if agree:\n        break\nif agree:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 38, "index": 4821, "code": "import numpy as np\nimport sys\ntemp = input().split()\nN = int(temp[0])\nM = int(temp[1])\nA = []\nB = []\ncheck = False\ndef change(n):\n  if(n=='#'):\n    return True;\n  return False;\n\nfor i in range(N):\n  temp = input()\n  A.append(list(map(change, temp)))\nfor i in range(M):\n  temp = input()\n  B.append(list(map(change, temp)))\nA = np.array(A)\nB = np.array(B)\n\nfor i in range(N-M+1):\n  for j in range(N-M+1):\n    if (B== A[i:M+i, j:M+j]).all():\n      check = True\n      break\n  if check:\n    break\n\nif check:\n  print(\"Yes\")\nelse:\n  print(\"No\")\n"}
{"label": 38, "index": 4822, "code": "n,m = map(int,input().strip().split())\nns,ms = [],[]\nfor _ in range(n):\n    ns.append(input().strip())\nfor _ in range(m):\n    ms.append(input().strip())\n\nallFlag = 0\nfor i in range(n-m+1):\n    for j in range(n-m+1):\n        if ns[i][j:j+m] == ms[0]:\n            Flag = 1\n            for k in range(m):\n                if ns[i+k][j:j+m]!=ms[k]:\n                    Flag = 0\n            if Flag and not allFlag:\n                print(\"Yes\")\n                allFlag = 1\nif not allFlag:\n    print(\"No\")"}
{"label": 38, "index": 4823, "code": "N, M = map(int, raw_input().split())\nA = [raw_input() for i in range(N)]\nB = [raw_input() for i in range(M)]\ndef judge():\n    for i in range(N-M+1):\n        for j in range(N-M+1):\n            ok = True\n            for r in range(M):\n                for c in range(M):\n                    if A[i+r][j+c] != B[r][c]:\n                        ok = False\n            if ok:\n                return \"Yes\"\n    return \"No\"\nprint judge()"}
{"label": 38, "index": 4824, "code": "def match_m(x, y, N, M, A, B):\n\tfor i in range(M):\n\t\tif x+i >= N: return False\n\t\tfor j in range(M): \n\t\t\tif y+j >= N: return False\n\t\t\tif A[x+i][y+j] != B[i][j]: return False\n\treturn True\n\nN, M = map(int, raw_input().split())\nA, B = [], []\nfor i in range(N): A.append(raw_input())\nfor i in range(M): B.append(raw_input())\nresult = \"No\"\nfor x in range(N):\n\tfor y in range(N):\n\t\tif(match_m(x,y,N,M,A,B)): \n\t\t\tresult = \"Yes\"\n\t\t\tbreak\nprint result"}
{"label": 38, "index": 4825, "code": "N, M = map(int, input().split())\nA = [input() for _ in range(N)]\nB = [input() for _ in range(M)]\n\nret = False\nfor i in range(N):\n    for j in range(N):\n        if i + M > N or j + M > N:\n            continue\n        f = True\n        for k in range(M):\n            for l in range(M):\n                if A[i + k][j + l] != B[k][l]:\n                    f = False\n                    break\n            if not f:\n                break\n        if f:\n            ret = True\nif ret:\n    print('Yes')\nelse:\n    print(\"No\")"}
{"label": 38, "index": 4826, "code": "N, M = map(int, input().split())\nL1 = [input() for x in range(N)]\nL2 = [input() for x in range(M)]\nLL = []\nfor i in range(N-M+1):\n    for j in range(N-M+1):\n        a = []\n        for y in range(M):\n            a += [L1[j+y][i:i+M]]\n            pass\n        LL += [a]\nprint('Yes' if sum(1 for x in LL if x == L2)>0 else 'No')"}
{"label": 38, "index": 4827, "code": "n,m = map(int,input().split())\na = [input() for _ in range(n)]\nb = [input() for _ in range(m)]\n\nf = 0\nfor i in range(n - m + 1):\n    for j in range(n - m + 1):\n        t = [k[j:j + m] for k in a[i:i + m]]\n        if t == b: f = 1\n\nprint (\"Yes\" if f else \"No\")\n"}
{"label": 38, "index": 4828, "code": "t = list(str(input()).split(\" \"))\nn = int(t[0])\nm = int(t[1])\n\na = list()\nfor i in range(n):\n    a.append(str(input()))\n\nb = list()\nfor i in range(m):\n    b.append(str(input()))\n\nc = n-m+1\nfor i in range(c):\n    for j in range(c):\n        fg = False\n        for k in range(m):\n            if(fg == True):break\n            for l in range(m):\n                if(fg == True):break\n                if(a[i+k][j+l] != b[k][l]):\n                    fg = True\n                    break\n\n        if(fg == False):\n            print(\"Yes\")\n            exit()\n\nprint(\"No\")\n"}
{"label": 38, "index": 4829, "code": "import sys\n\nn, m = map(int, input().split())\n\na = []\nfor i in range(n):\n    a.append(list(input()))\n\nb = []\nfor i in range(m):\n    b.append(list(input()))\n\nfor i in range(n-m+1):\n    for j in range(n-m+1):\n        for k in range(m):\n            if k <= m-2:\n                if a[i+k][j:j+m] == b[k]:\n                    continue\n                else:\n                    break\n            else:\n                if a[i+k][j:j+m] == b[k]:\n                    print(\"Yes\")\n                    sys.exit()\n                else:\n                    break\n\nprint(\"No\")"}
{"label": 38, "index": 4830, "code": "import sys\nif __name__ == '__main__':\n\n    N,M = map(int, input().split())\n\n    A = []\n    B = []\n    for i in range(N):\n        A.append(input())\n    for i in range(M):\n        B.append(input())\n\n    char = B[0][0]\n    matc = False\n    for i in range(N-M+1):\n        for j in range(N-M+1):\n            if A[i][j] == char:\n                matc = True\n                for k in range(M):\n                    for l in range(M):\n                        if A[i+k][j+l] == B[k][l]:\n                            matc = True\n                        else:\n                            matc = False\n                            break\n                    if not matc:\n                        break\n                if matc == True:\n                    print(\"Yes\")\n                    sys.exit(0)\n\n    if matc == True:\n        print(\"Yes\")\n    else:\n        print(\"No\")"}
{"label": 38, "index": 4831, "code": "# -*- coding:utf8\n\nN,M = [int(x) for x in raw_input().split(' ')]\n\nA = [raw_input() for x in range(N)]\nB = [raw_input() for x in range(M)]\n\ndef getpattern(image, s = 0, x = 0, y = 0):\n    if s == 0:\n        s = len(image)\n\n    return ''.join([image[i][x:x+s] for i in range(y, y + s)])\n\ndef match(N,M,A,B):\n    size = M\n\n    bpattern = getpattern(B)\n    for j in range(0, N - M + 1):\n        for i in range(0, N - M + 1):\n            if getpattern(A, size, i, j) == bpattern:\n                return 'Yes'\n\n    return 'No'\n\nprint match(N,M,A,B)"}
{"label": 38, "index": 4832, "code": "n,m = map(int,input().split())\nbase = [input() for _ in range(n)]\ntmp = [input() for _ in range(m)]\ncount = 0\nflg = False\n\nfor i in range(n - m + 1):\n    for j in range(n - m + 1):\n        for k in range(m):\n            if base[i + k][j:j+m] == tmp[k]:\n                count += 1\n            else:\n                break\n        if count == m:\n            flg = True\n            break\n        else:\n            count = 0\nif flg:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 38, "index": 4833, "code": "n,m = list(map(int,input().split()))\na = [input() for _ in range(n)]\nb = [input() for _ in range(m)]\n\nans=False\nfor i in range(n-m+1):\n    for j in range(n-m+1):\n        flag=True\n        for mi in range(m):\n            for mj in range(m):\n                if a[i+mi][j+mj]!=b[mi][mj]:\n                    flag=False\n        if flag:\n            ans=True\n\nif ans:\n    print('Yes')\nelse:\n    print('No')\n"}
{"label": 38, "index": 4834, "code": "from collections import defaultdict\n\n\ndef main():\n    N, M = map(int, input().split())\n    A, B = [], []\n    for _ in range(N):\n        A.append(input())\n    for _ in range(M):\n        B.append(input())\n\n    for y in range(N - M + 1):\n        for x in range(N - M + 1):\n            ok = True\n            for by in range(M):\n                for bx in range(M):\n                    if A[y + by][x + bx] != B[by][bx]:\n                        ok = False\n            if ok:\n                print(\"Yes\")\n                return\n    print(\"No\")\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 38, "index": 4835, "code": "def mask_judge(a, b, i, j):\n    flag = 1\n    for k in range(m):\n        for l in range(m):\n            if a[i+k][j+l] != b[k][l]:\n                flag = 0\n                break\n    return flag\n\n\ndef main():\n    a = [[0 if i == '.' else 1 for i in input()] for _ in range(n)]\n    b = [[0 if i == '.' else 1 for i in input()] for _ in range(m)]\n\n    flag = 0\n    for i in range(n-m+1):\n        for j in range(n-m+1):\n            if mask_judge(a, b, i, j):\n                flag = 1\n                break\n    if flag:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    main()"}
{"label": 38, "index": 4836, "code": "so, sp = list(map(int, input().split()))\norig = []\npart = []\nfor i in range(so):\n    orig.append(input())\nfor i in range(sp):\n    part.append(input())\nsd = so - sp\ndef check(orig, part, sd, sp):\n    for x in range(sd+1):\n        for y in range(sd+1):\n            if [a[y:y+sp] for a in orig[x:x+sp]] == part:\n                return True\n    return False\nprint('Yes' if check(orig, part, sd, sp) else 'No')\n"}
{"label": 38, "index": 4837, "code": "N, M = map(int, input().split())\n\nA = []\nfor _ in range(N):\n  A.append(input().strip())\nB = []\nfor _ in range(M):\n  B.append(input().strip())\n\ndef f():\n  for i in range(N - M + 1):\n    for j in range(N - M + 1):\n      same = True\n      for ii in range(M):\n        for jj in range(M):\n          if B[ii][jj] != A[i + ii][j + jj]:\n            same = False\n      if same:\n        print(\"Yes\")\n        return \n  print(\"No\")\n\nf()\n"}
{"label": 38, "index": 4838, "code": "N, M = map(int, raw_input().split())\nA = []\nB = []\n\nfor _ in xrange(N):\n    A.append(raw_input())\nfor _ in xrange(M):\n    B.append(raw_input())\n\ndef match(x, y):\n    for i in xrange(M):\n        for j in xrange(M):\n            if A[x+i][y+j] != B[i][j]: return None\n    return 1\n\ndef main():\n    for x in xrange(N-M+1):\n        for y in xrange(N-M+1):\n            if match(x, y):\n                return 'Yes'\n    return 'No'\n\nif __name__ == '__main__':\n    print main()"}
{"label": 38, "index": 4839, "code": "N, M = map(int, input().split())\nA = [list(input()) for _ in range(N)]\nB = [list(input()) for _ in range(M)]\nf = 0\nfor i in range(N-M+1):\n\tfor j in range(N-M+1):\n\t\tfor k in range(M):\n\t\t\tif f:\n\t\t\t\tf = 0\n\t\t\t\tbreak\n\t\t\tfor l in range(M):\n\t\t\t\tif A[i+k][j+l] != B[k][l]:\n\t\t\t\t\tf = 1\n\t\t\t\t\tbreak\n\t\t\telse:\n\t\t\t\tif k == l == M-1:\n\t\t\t\t\tprint(\"Yes\")\n\t\t\t\t\texit()\nprint(\"No\")"}
{"label": 38, "index": 4840, "code": "N, M = map(int,input().split())\n \nA=[]\nB=[]\n \nfor i in range(N):\n    a=input()\n    A.append(a)\n    \nfor j in range(M):\n    b=input()\n    B.append(b)\n\n\nres = 'No'\n    \nfor p in range(N-M+1):\n    for q in range(N-M+1):\n        # check\n        C = 0\n        for r in range(M):\n            if B[r] == A[p+r][q:(q+M)]:\n                C=C+1\n            if C==M:\n                res = 'Yes'\n                            \nprint(res)\n                "}
{"label": 38, "index": 4841, "code": "s = input()\nl = s.split()\nN = int(l[0])\nM = int(l[1])\n\nA = list()\nfor i in range(N):\n    s = input()\n    A.append(s)\n\nB = list()\nfor j in range(M):\n    s = input()\n    B.append(s)\n\n\ndef g(n, m, a, b, i, j):\n    for k in range(m):\n        for l in range(m):\n            if a[i + k][j + l] != b[k][l]:\n                return False\n    return True\n\n\ndef f(N, M, A, B):\n    for i in range(N - M + 1):\n        for j in range(N - M + 1):\n            if g(N, M, A, B, i, j):\n                return 'Yes'\n    return 'No'\n\nprint(f(N, M, A, B))\n\n"}
{"label": 38, "index": 4842, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom fractions import gcd\n\ndef readln():\n    _res = list(map(int,str(input()).split(' ')))\n    return _res\n\ndef readpic(n):\n    res = [[0 for j in range(0,n)]for i in range(0,n)]\n    for i in range(0,n):\n        t = str(input())\n        for j in range(0,n):\n            if t[j] == '#':\n                res[i][j] = 1\n            else:\n                res[i][j] = 0\n    return res\n\ndef test(x,y):\n    for i in range(0,m):\n        for j in range(0,m):\n            if b[i][j] != a[i+x][j+y]:\n                return False\n    return True\n\na = readln()\nn,m = a[0],a[1]\na = readpic(n)\nb = readpic(m)\nans = \"No\"\nfor i in range(0,n-m+1):\n    for j in range(0,n-m+1):\n        if test(i,j):\n            ans = \"Yes\"\nprint(ans)\n"}
{"label": 38, "index": 4843, "code": "n,m=map(int,input().split())\na=[]\nb=[]\nfor i in range(n):\n    a.append(str(input()))\nfor i in range(m):\n    b.append(str(input()))  \n\nfor p in range(n-m+1):\n    for q in range(n-m+1):\n        ans=0\n        for i in range(m):\n\n            row = str(a[q+i])\n            cut = str(row[p:p+m])\n\n            if cut == b[i]:\n                ans += 1\n                \n            # print(row,cut,b[i],ans)\n\n        if ans == m:\n            print('Yes')\n            exit()\n\nprint('No')\n\n        \n"}
{"label": 38, "index": 4844, "code": "def main():\n    N, M = map(int, input().split())\n    A = []\n    for i in range(N):\n        A.append(input())\n    B = []\n    for i in range(M):\n        B.append(input())\n    for i in range(N - M + 1):\n        for j in range(N - M + 1):\n            if check(i, j, M, A, B):\n                print('Yes')\n                return\n    print('No')\n\n\ndef check(i, j, M, A, B):\n    for w in range(M):\n        for h in range(M):\n            if A[i + w][j + h] != B[w][h]:\n                return False\n    return True\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 38, "index": 4845, "code": "n, m = map(int, input().split())\n\na = [input() for x in range(n)]\nb = [input() for x in range(m)]\n\nball = ''.join(b)\n\ndef check():\n    for i in range(n):\n        if i + m > n:\n            continue\n\n        for j in range(n):\n            if j + m > n:\n                continue\n\n            aall = \"\"\n            for k in range(m):\n                aall += a[i+k][j:j+m]\n\n            if aall == ball:\n                return True\n\n    return False\n\nret = \"Yes\" if check() else \"No\"\nprint(ret)\n"}
{"label": 38, "index": 4846, "code": "import sys\n\ncount = 0\nN_list = []\nM_list = []\nfor line in sys.stdin:\n    line = line.rstrip(\"\\n\")\n    if count == 0:\n        line = line.split(\" \")\n        N = int(line[0])\n        M = int(line[1])\n    elif count <= N:\n        N_list.append(line)\n    else:\n        M_list.append(line)\n    count+=1\n    \n    \ndef judge_match(N_l, M_l):\n    slide_count = len(N_l[0]) - len(M_l[0]) + 1\n    count = 0\n    for j in range(slide_count):\n        count = 0\n        for i in range(len(N_l)):\n            if N_l[i][j:j+len(M_l[0])] == M_l[i]:\n                count += 1\n                if count == len(M_l):\n                    return count\n    return count\n\nm_count = 0\nfor i in range(len(N_list)):\n    m_count = judge_match(N_list[i:i+len(M_list)], M_list)\n    if m_count == len(M_list):\n        print(\"Yes\")\n        exit(0)\nprint(\"No\")"}
{"label": 38, "index": 4847, "code": "# -*- coding: utf-8 -*-\nimport sys,copy,math,heapq,itertools as it,fractions,re,bisect,collections as coll\n\nN, M = map(int,raw_input().split())\nA = [raw_input() for i in xrange(N)]\nB = [raw_input() for i in xrange(M)]\n\nfor i in xrange(N - M + 1):\n    for j in xrange(N - M + 1):\n        same = True\n        for y in xrange(M):\n            for x in xrange(M):\n                if A[i + y][j + x] != B[y][x]: same = False\n            if not same: break\n        if same:\n            print \"Yes\"\n            exit()\nprint \"No\"\n"}
{"label": 38, "index": 4848, "code": "# determines whether b is a subimage of a at start point (x,y)\ndef findMatch(x, y):\n\tfor i in range(m):\n\t\tfor j in range(m):\n\t\t\tif b[i][j] != a[i+x][j+y]:\n\t\t\t\treturn False\n\treturn True\n\n# get size of picture A (NxN) and picture B (MxM)\nn, m = map(int, raw_input().split())\n\n# populate image a\na = []\nfor i in range(n):\n\ta.append(list(raw_input()))\n\n# populate image b\nb = []\nfor i in range(m):\n\tb.append(list(raw_input()))\n\n# iterate over all possible start points to find valid subimage\nfound = False\nfor i in range(n-m+1):\n\tfor j in range(n-m+1):\n\t\tif findMatch(i,j):\n\t\t\tfound = True\n\nif found:\n\tprint (\"Yes\")\nelse:\n\tprint (\"No\")"}
{"label": 38, "index": 4849, "code": "\ndef f(a, b):\n    for x in range(n - m + 1):\n        for y in range(n - m + 1):\n            ok = True\n            for i in range(m):\n                for j in range(m):\n                    if b[i][j] != a[i + x][j + y]:\n                        ok = False\n                    if not ok:\n                        break\n                if not ok:\n                    break\n            if ok:\n                return 'Yes'\n    return 'No'\n\n\nn, m = map(int, input().split())\na = [input() for _ in range(n)]\nb = [input() for _ in range(m)]\nprint(f(a, b))\n\n"}
{"label": 38, "index": 4850, "code": "import itertools\n\ndef solve(n, m, a, b):\n    for i, j in itertools.product(range(n - m + 1), repeat=2):\n        if all(a[i + x][j + y] == b[x][y] for x, y in itertools.product(range(m), repeat=2)): return \"Yes\"\n    return \"No\"\n\n\nif __name__ == '__main__':\n    n, m = map(int, input().split())\n    a = [[token for token in input()] for _ in range(n)]\n    b = [[token for token in input()] for _ in range(m)]\n\n    ans = solve(n, m, a, b)\n    print(ans)\n"}
{"label": 38, "index": 4851, "code": "n, m = map(int, input().split())\na = []\nb = []\n\nfor x in range(n):\n    a.append(list(input()))\n\nfor y in range(m):\n    b.append(list(input()))\n\n\ndef check_photo(base, target):\n    for i in range(n-m+1):\n        check = base[i:i+m]\n#        print(check)\n        for j in range(n-m+1):\n            check2 = [line[j:j+m] for line in check]\n#            print(check2)\n            if check2 == target:\n                return print('Yes')\n    return print('No')\n\ncheck_photo(a, b)\n"}
{"label": 38, "index": 4852, "code": "import sys\n\nA=[]\nB=[]\nNM=input().split(\" \")\nN=int(NM[0])\nM=int(NM[1])\n\nfor i in range(N):\n    t=input()\n    A.append(t)\nfor i in range(M):\n    t=input()\n    B.append(t)\n\n\n\nfor i in range(N-M+1):\n    for j in range(N-M+1):\n        k=i\n        count=0\n        while A[k+count][j:M+j:1]==B[count]:\n            count+=1\n            if count==M:\n                print(\"Yes\")\n                sys.exit()\n\nprint(\"No\")\n"}
{"label": 38, "index": 4853, "code": "# -*- coding: utf-8 -*-\nA = []\nB = []\nN, M = list(map(int, input().split()))\n\nfor n in range(N):\n    A.append(input())\nfor n in range(M):\n    B.append(input())\n\ndef match(r, c):\n    for i, row in enumerate(range(r, r+M)):\n#        print(\"{} : {}  {}\".format(A[row][c:c+M], B[i], A[row][c:c+M]==B[i]))\n        if A[row][c:c+M] != B[i]:\n            return False\n    return True\n\nok = 0\n\nfor r in range(N-M+1):\n    if ok == 1:\n        break\n    else:\n        for c in range(N-M+1):\n            if match(r, c):\n                print(\"Yes\")\n                ok = 1\n                break\n            \nif not ok:\n    print(\"No\")"}
{"label": 38, "index": 4854, "code": "n,m = map(int, raw_input().split())\naa = [0] * n\nbb = [0] * m\nfor i in range(n):\n    aa[i] = list(raw_input())\nfor i in range(m):\n    bb[i] = list(raw_input())\n\nflag = True\nfor i in range(n-m):\n    for j in range(n-m):\n        flag = True\n        for ik in range(m):\n            for jk in range(m):\n                if aa[i+ik][j+jk] != bb[ik][jk]:\n                    flag = False\n                    \n        if flag == True: break\n    if flag == True: break\n\nif flag == True:\n    print 'Yes'\nelse:\n    print 'No'\n"}
{"label": 38, "index": 4855, "code": "n, m = map(int, input().split())\n\n\ndef is_ok(A, B):\n    for i in range(n - m + 1):\n        for j in range(n - m + 1):\n            C = []\n            for k in range(i, i + m):\n                line = \"\"\n                for l in range(j, j + m):\n                    line += A[k][l]\n                C.append(line)\n            # print(C)\n            if C == B: return True\n    return False\n\n\nA = []\nB = []\nfor i in range(n):\n    A.append(input())\n\nfor i in range(m):\n    B.append(input())\n# print(A)\n# print(B)\nif is_ok(A, B):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 38, "index": 4856, "code": "import numpy as np\nimport sys\n\nif __name__==\"__main__\":\n   N, M = list(map(int, input().replace(\"\\n\",\"\").split(\" \")))\n   a = [list(map(int, list(input().replace(\"\\n\",\"\").replace(\".\", \"1\").replace(\"#\", \"0\")))) for i in range(N)]\n   a = np.array(a)\n   b = [list(map(int, list(input().replace(\"\\n\",\"\").replace(\".\", \"1\").replace(\"#\", \"0\")))) for i in range(M)]\n   b = np.array(b)\n\n\n   for i in range(N - M + 1):\n       for j in\trange(N - M + 1):\n           if((a[i:i+M,j:j+M] == b).all()):\n               print(\"Yes\")\n               sys.exit(0)\n   print(\"No\")"}
{"label": 38, "index": 4857, "code": "import sys\n\n# sys.stdin = open('b1.in')\n\n\ndef read_int_list():\n    return list(map(int, input().split()))\n\n\ndef read_str_list():\n    return input().split()\n\n\ndef read_int():\n    return int(input())\n\n\ndef read_str():\n    return input()\n\n\nN, M = read_int_list()\nA = [read_str() for i in range(N)]\nB = [read_str() for j in range(M)]\n\n\ndef g(n, m, a, b, i, j):\n    for k in range(m):\n        for l in range(m):\n            if a[i + k][j + l] != b[k][l]:\n                return False\n    return True\n\n\ndef f(N, M, A, B):\n    for i in range(0, N - M + 1):\n        for j in range(0, N - M + 1):\n            if g(N, M, A, B, i, j):\n                return 'Yes'\n    return 'No'\n\nprint(f(N, M, A, B))\n"}
{"label": 38, "index": 4858, "code": "N, M = list(map(int, input().split(\" \")))\n\nA = []\nfor i in range(N):\n    A.append(input())\n    \nB = []\nfor i in range(M):\n    B.append(input())\n\n    \nans_flag = False\nfor i in range(N-M+1):  \n    for j in range(N-M+1):\n        if A[i][j:j+M] == B[0]:\n            ans_flag = True\n            for k in range(1, M):\n                if A[i+k][j:j+M] != B[k]:\n                    ans_flag = False\n                    break\n            if ans_flag == True:\n                break\n        if ans_flag == True:\n                break\n    if ans_flag == True:\n                break\n            \nif ans_flag == True:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 38, "index": 4859, "code": "N, M = map(int, input().split())\nA = [input() for x in range(N)]\nB = [input() for x in range(M)]\nc = []\nfor i in range(N-M+1):\n    for j in range(N-M+1):\n        a = []\n        for y in range(M):\n            a += [A[j+y][i:i+M]]\n        c += [a]\nprint('Yes' if sum(1 for x in c if x == B)>0 else 'No')"}
{"label": 38, "index": 4860, "code": "N, M = map(int, input().split())\nA = []\nB = []\n\nfor _ in range(N):\n    A.append(input())\n\nfor _ in range(M):\n    B.append(input())\n\nfor i in range(N - M + 1):\n    for j in range(N - M + 1):\n        f = True\n\n        for p in range(M):\n            if A[i + p][j:j + M] != B[p]:\n                f = False\n                break\n        if f:\n            print('Yes')\n            exit()\nprint('No')\n"}
{"label": 38, "index": 4861, "code": "n,m = map(int,input().split())\n\na = []\nb = []\n\nfor i in range(n):\n    a.append(input())\nfor i in range(m):\n    b.append(input())\nOKFlag = False\n\nfor i in range(n*n):\n    SPRow,SPColumn = divmod(i,n)\n    if SPRow + m-1 <= n-1 and SPColumn + m-1 <= n-1:\n        for j in range(m*m):\n            MPRow,MPColumn = divmod(j,m)\n\n            if a[SPRow + MPRow][SPColumn + MPColumn] == b[MPRow][MPColumn]:\n                if MPRow == (m-1) and MPColumn == (m-1):\n                    OKFlag = True\n                continue\n            else:\n                break\n    else:\n        continue\nprint(\"Yes\" if OKFlag else \"No\")"}
{"label": 38, "index": 4862, "code": "def compare_image(A, B, N, M):\n    for i in range(N):\n        for j in range(N):\n            # \u7bc4\u56f2\u5185\u306a\u3089\n            if (i+M <= N) and (j+M <= N):\n                b_flag = True\n\n                for k in range(M):\n                    str_a = A[i+k][j:j+M]\n                    str_b = B[k]\n                    if str_a != str_b:\n                        b_flag = False\n\n                if b_flag:\n                    return True\n\n    return False\n\n\nN, M = map(int, input().split())\nA = [input() for i in range(N)]\nB = [input() for i in range(M)]\n\nif compare_image(A, B, N, M):\n    string = \"Yes\"\nelse:\n    string = \"No\"\n\nprint(string)\n"}
{"label": 38, "index": 4863, "code": "N,M = map(int, raw_input().split())\nA = [raw_input() for _ in range(N)]\nB = [raw_input() for _ in range(M)]\nfor y in range(N-M+1):\n  for x in range(N-M+1):\n    ok = True\n    for yy in range(M):\n      for xx in range(M):\n        if A[y+yy][x+xx] != B[yy][xx]:\n          ok = False\n    if ok:\n      print \"Yes\"\n      exit(0)\nprint \"No\"\n"}
{"label": 38, "index": 4864, "code": "import sys\ninput_num = input().split()\nN = int(input_num[0])\nM = int(input_num[1])\n\nAB = [input() for i in range(0, N + M)]\nA = AB[0: N]\nB = AB[N:]\n\ndiff = N - M\nmatches = []\nfor i in range(0, diff+1):\n    l = 0\n    while N - l > diff:\n        index = A[i][l:].find(B[0])\n        if index != -1 and i <= diff:\n            matches.append((index, l, i))\n        l += 1\nif len(matches) == 0:\n    print(\"No\")\n    sys.exit()\ncount_no = []\nfor m, l, i in matches:\n    for a, b in zip(A[i:], B):\n        if a[l:].find(b) != m:\n            count_no.append(0)\n            break\nif len(count_no) == len(matches):\n    print(\"No\")\nelse:\n    print(\"Yes\")"}
{"label": 38, "index": 4865, "code": "size = list(map(int,raw_input().split()))\n\nlarge_pic=[]\nsmall_pic=[]\nfor i in range (size[0]):\n    large_pic.append (list(raw_input().strip()))\nfor i in range (size[1]):\n    small_pic.append (list(raw_input().strip()))\n\n\nflag = False\ncut_pic = []\nfor i in range (size[0]-size[1]+1):\n    for j in range (size[0]-size[1]+1):\n        for k in range (size[1]):\n            cut_pic.append(large_pic[i+k][j:j+size[1]])\n        if cut_pic == small_pic:\n            flag = True\n        else:\n            cut_pic =[]\nprint \"Yes\" if flag == True else \"No\"\n"}
{"label": 38, "index": 4866, "code": "nums = list(map(int, input().split()))\nN =  nums[0] \nM = nums[1] \nK = N - M + 1\na = 0\nb = 0\nm = [[]]\nn  = [[]]\nwhile(a<N):\n\tif a == 0:\n\t\tn[0] = list(input())\n\telse:\n\t\tn.append(list(input()))\n\ta+=1\nwhile(b<M):\n\tif b == 0:\n\t\tm[0] = list(input())\n\telse:\n\t\tm.append(list(input()))\n\tb+=1\njudge = 0\nfor i in range(K):\n\tfor j in range(K):\n\t\tnum = 0\n\t\tfor h in range(M):\n\t\t\tfor k in range(M):\n\t\t\t\tif(m[h][k] == n[h+i][k+j]):\n\t\t\t\t\tnum+=1\n\t\tif num == M*M:\n\t\t\tjudge = 1\n\nif judge == 1:\n\tprint('Yes')\nif judge == 0:\n\tprint('No')\n"}
{"label": 38, "index": 4867, "code": "def main():\n    #infile = open(\"compprog.txt\", mode=\"r\")\n    #n, m = [int(x) for x in infile.readline().split()]\n    n, m = [int(x) for x in input().split()]\n    a = []\n    b = []\n    for _ in range(n):\n        #a.append(infile.readline())\n        a.append(input())\n    for _ in range(m):\n        #b.append(infile.readline())\n        b.append(input())\n    if solve(a, b, n, m):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\ndef solve(a, b, n, m):\n    for row in range(n - m + 1):\n        for col in range(n - m + 1):\n            if check(a, row, col, b, m):\n                return True\n    return False\n\n\ndef check(a, row, col, b, m):\n    for this_row in range(row, row + m):\n        for this_col in range(col, col + m):\n            if a[this_row][this_col] != b[this_row - row][this_col - col]:\n                return False\n    return True\n\n\nif __name__ == \"__main__\":\n    main()\n"}
{"label": 38, "index": 4868, "code": "# -*- coding: utf-8 -*-\nn = input().split()\n\nar = int(n[0])\nbr = int(n[1])\n\na = []\nb = []\nfor i in range(0, ar):\n    a.append(input())\n\nfor j in range(0, br):\n    b.append(input())\n\nfind = False\nfor i in range(0, ar - br + 1):\n    for j in range(0, ar -br + 1):\n        if a[i][j] == b[0][0]:\n            same = True\n            for k in range(0, br):\n                for l in range(0, br):\n                    if a[i+k][j+l] != b[k][l]:\n                        same = False\n                        break\n            if same:\n                find = True\n                break\nif find:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 38, "index": 4869, "code": "#!/usr/bin/env python3\n\nimport itertools\n\n\ndef judge(n, m, fig_a, fig_b):\n    for dr, dc in itertools.product(range(n - m + 1), repeat=2):\n        g = itertools.product(range(m), repeat=2)\n        if all(fig_a[r0 + dr][c0 + dc] == fig_b[r0][c0] for r0, c0 in g):\n            return True\n    return False\n\n\ndef main():\n    n, m = (int(x) for x in input().split())\n    fig_a = [[c == \"#\" for c in input()] for _ in range(n)]\n    fig_b = [[c == \"#\" for c in input()] for _ in range(m)]\n    print(\"Yes\" if judge(n, m, fig_a, fig_b) else \"No\")\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 38, "index": 4870, "code": "N, M = map(int, input().split())\n\nA = [input() for i in range(N)]\nB = [input() for i in range(M)]\n\nres = False\ncount = 0\nfor i in range(N - M + 1):\n    if res:\n        break\n    for j in range(N - M + 1):\n        count = 0\n        for m in range(M):\n            if A[i + m][j:j + M] != B[m]:\n                res = False\n                break\n            else:\n                count += 1\n        if count == M:\n            res = True\n            break\n\nif res:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 38, "index": 4871, "code": "def solve(n, m, NUM):\n    for i in range(len(m)):\n        if n[NUM + i] is not m[i]:\n            return -1\n    return 1\n\n\nN, M = [int(i) for i in input().split()]\nn_pic = [input() for i in range(N)]\nm_pic = [input() for i in range(M)]\nnum = 0\nif M is 1:\n    for n in n_pic:\n        if -1 is not n.find(m_pic[0]):\n            print('Yes')\n            exit()\n    print('No')\n    exit()\n\nfor n in range(N - M + 1):\n    for n_len in range(N - M + 1):\n        while -1 is not solve(n_pic[n + num], m_pic[num], n_len):\n            num += 1\n            if num is M:\n                print('Yes')\n                exit()\n        num = 0\nprint('No')\n"}
{"label": 38, "index": 4872, "code": "n,m = map(int, input().split())\na = [input() for i in range(n)]\nb = [input() for i in range(m)]\n\nfor i in range(n-m+1):\n    for j in range(n-m+1):\n        flag = True\n        for k in range(m):\n            for l in range(m):\n                if a[i+k][j+l] != b[k][l]:\n                    flag = False\n                    break\n            if not flag:\n                break\n        if flag:\n            print(\"Yes\")\n            exit()\nprint('No')\n"}
{"label": 38, "index": 4873, "code": "from sys import stdin\n\nn, m = map(int, stdin.readline().split())\nA = []\nB = []\nfor _ in range(n):\n    A.append(stdin.readline().strip())\nfor _ in range(m):\n    B.append(stdin.readline().strip())\n\n\ndef is_in(B, A):\n    def cmp(A, B, x, y):\n        for i in range(m):\n            for j in range(m):\n                if A[i+y][j+x] != B[i][j]:\n                    return False\n        return True\n\n    x_shift = len(A[0]) - len(B[0])\n    y_shift = len(A) - len(B)\n    for x in range(0, x_shift+1):\n        for y in range(0, y_shift+1):\n            result = cmp(A, B, x, y)\n            if result:\n                return True\n    return False\n\nif is_in(B, A):\n    print('Yes')\nelse:\n    print('No')\n"}
{"label": 38, "index": 4874, "code": "def equal(A,B,i,j):\n\tret = True\n\tfor row in xrange(i,i+len(B)):\n\t\tif A[row][j:j+len(B)] != B[row-i]:\n\t\t\tret = False\n\treturn ret\n\nn,m = map(int,raw_input().split())\nA = []\nB = []\nfor i in xrange(n):\n\tA.append(raw_input())\nfor i in xrange(m):\n\tB.append(raw_input())\n\n\ncontained = False\nfor i in xrange(n-m+1):\n\tfor j in xrange(n-m+1):\n\t\tif equal(A,B,i,j):\n\t\t\tcontained = True\n\t\t\tbreak\n\t\telse:\n\t\t \tpass\n\tif contained: break\n\nif contained: print 'Yes'\nelse: print 'No'"}
{"label": 38, "index": 4875, "code": "import numpy as np\n\nN, M = [int(x) for x in input().split()]\nA=[]\nB=[]\nfor i in range(N):\n    A.append(list(input()))\nfor j in range(M):\n    B.append(list(input()))\nA = np.array(A)\nB = np.array(B)\nfor i in range(N-M+1):\n    for j in range(N-M+1):\n        A_ = A[i:(i+M),j:(j+M)]\n        if np.array_equal(A_,B):\n            print('Yes')\n            exit()\n\nprint('No')\n"}
{"label": 38, "index": 4876, "code": "n,m = map(int, raw_input().split())\npicA = [raw_input() for _ in range(n)]\npicB = [raw_input() for _ in range(m)]\nfind = True\nfor x in range(n-m+1):\n    for y in range(n-m+1):\n        find = True\n        for p in range(m):\n            if picA[y+p][x:x+m] != picB[p]:\n                find = False\n                break\n        if find:\n            break\n    if find:\n        break\nif find:\n    print 'Yes'\nelse:\n    print 'No'\n"}
{"label": 38, "index": 4877, "code": "N, M = map(int, input().split())\nA = [input() for i in range(N)]\nB = [input() for i in range(M)]\n\ndef check(i, j):\n    for ii in range(M):\n        for jj in range(M):\n            if A[i + ii][j + jj] != B[ii][jj]:\n                return False\n    return True\n\nfor i in range(N - M + 1):\n    for j in range(N - M + 1):\n        if check(i, j):\n            print(\"Yes\")\n            exit()\nprint(\"No\")\n"}
{"label": 38, "index": 4878, "code": "import sys\nN,M=map(int,input().split())\nA=[]\nB=[]\nA+=[str(input()) for i in range(N)]\nB+=[str(input()) for i in range(M)]\nfor i in range(N-M+1):\n  for j in range(N-M+1):\n    ans=1\n    for k in range(M):\n      for l in range(M):\n        if B[k][l]!=A[i+k][j+l]:\n          ans=0\n    if ans:\n      print(\"Yes\")\n      sys.exit()\nprint(\"No\")"}
{"label": 38, "index": 4879, "code": "# -*- coding: utf-8 -*-\nimport sys\nimport math\nimport numpy as np\n\n\ndef main():\n    # \u5165\u529b\u51e6\u7406\n    # M = int(input())\n    N, M = map(int, input().split())\n    sA = ''.join([input() for i in range(N)])\n    sB = ''.join([input() for i in range(M)])\n    A = np.array([s for s in sA]).reshape(N,N)\n    B = np.array([s for s in sB]).reshape(M,M)\n\n    # \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u672c\u4f53\n    result = np.zeros((N-M+1,N-M+1), dtype=bool)\n    for i in range(N-M+1):\n        for j in range(N-M+1):\n            result[i,j] = (A[i:i+M, j:j+M] == B).all()\n\n    # \u51fa\u529b\n    if result.any():\n        print('Yes')\n    else:\n        print('No')\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 38, "index": 4880, "code": "n,m = map(int,input().split())\na = []\nb = []\nfor i in range(n):\n    a.append(input())\nfor i in range(m):\n    b.append(input())\nOKFlag = False\n\n#\u8d77\u70b9\u3092\u7ba1\u7406\u3059\u308b\u30eb\u30fc\u30d7\nfor i in range(n * n):\n    startRow,startColumn = divmod(i,n)\n    maxRow,maxColumn = startRow + (m - 1),startColumn + (m - 1)\n    if maxRow <= (n - 1) and maxColumn <= (n - 1):\n\n        for j in range(m * m):\n            moveRow,moveColumn = divmod(j,m)\n        \n            if a[startRow + moveRow][startColumn + moveColumn] == b[moveRow][moveColumn]:\n                if moveRow == (m - 1) and moveColumn == (m - 1):\n                    OKFlag = True\n                continue\n            else:\n                break\n    else:\n        continue\n\nprint(\"Yes\" if OKFlag else \"No\")"}
{"label": 38, "index": 4881, "code": "import numpy as np\n\nn, m = [int(i) for i in input().split()]\n\nN, M = [], []\nfor i in range(n):\n    N.append(list(input()))\nfor i in range(m):\n    M.append(list(input()))\n\nN, M = np.array(N), np.array(M)\n\n# print(N)\n# print(M)\n\ndef match():\n    for i in range(n - m + 1):\n        for j in range(n - m + 1):\n            # print(i, i+m, j, j+m)\n            if (N[i:i+m, j:j+m] == M).all():\n                return \"Yes\"\n    return \"No\"\n\nprint(match())"}
{"label": 38, "index": 4882, "code": "import sys\nm,n = map(int,input().split())\nmlist = []\nnlist = []\nfor i in range(m):\n    a = input()\n    mlist.append(list(a))\nfor i in range(n):\n    a = input()\n    nlist.append(list(a))\n\nfor i in range(m-n+1):\n    for j in range(m-n+1):\n        frag = 0\n        for a in range(n):\n            for b in range(n):\n                if mlist[i+a][j+b] != nlist[a][b]:\n                    frag = 1\n            if frag == 1:\n                break\n        if frag == 0:\n            print(\"Yes\")\n            sys.exit()\nprint(\"No\")"}
{"label": 38, "index": 4883, "code": "#ABC054A\nimport sys\n\nn,m=map(int,raw_input().split())\na=[]\nb=[]\nfor i in xrange(n):\n a.append(raw_input())\nfor i in xrange(m):\n b.append(raw_input())\nfor i in xrange(m):\n if b[i] not in a[i]:\n  print 'No'\n  sys.exit()\n else:\n  print 'Yes'\n  sys.exit()\n"}
{"label": 38, "index": 4884, "code": "#!/usr/bin/env python3\nif __name__ == '__main__':\n  s = str(input()).split(\" \")\n  N = int(s[0])\n  M = int(s[1])\n  A, T = list(), list()\n  for i in range(0,N):\n    A.append(input())\n  for i in range(0,M):\n    T.append(input())\n\n  # for i in range(0,N):\n  #   for j in range(0,N):\n  #     print(A[i][j], end='')\n  #   print()\n  ans = False\n  for t in range(0, N-M+1):\n    for l in range(0, N-M+1):\n      ok = True\n      for i in range(t, t+M):\n        for j in range(l, l+M):\n          if A[i][j] != T[i-t][j-l]:\n            ok = False\n      if ok:\n        ans = True\n  if ans:\n    print(\"Yes\")\n  else:\n    print(\"No\")\n"}
{"label": 38, "index": 4885, "code": "N,M=map(int, raw_input().split())\n#print N,M\nA=[]\nB=[]\nfor i in xrange(N):\n    A.append(list(raw_input()))\n#print A\n\nfor i in xrange(M):\n    B.append(list(raw_input()))\n#print B\n\ndiff=N-M+1\n#print diff\n\nfound=False\nfor i in xrange(diff):\n    for j in xrange(diff):\n        wrong=False\n        for k1 in xrange(M):\n            for k2 in xrange(M):\n                if A[i+k1][j+k2] != B[k1][k2]:\n                    wrong=True\n                    break\n            if wrong:\n                break\n        if wrong==False:\n            found=True\n            break\n    if found==True:\n        break\nif found:\n    print 'Yes'\nelse:\n    print 'No'\n"}
{"label": 38, "index": 4886, "code": "m, n = map(int, input().split())\na = [input().strip() for i in range(m)]\nb = [input().strip() for i in range(n)]\n\nfound = False\nfor x in range(m-n+1):\n  for y in range(m-n+1):\n    for k in range(n):\n      if a[x+k][y:y+n] != b[k]:\n        break\n    else:\n      found = True\n      break\n  if found: break    \nif found:\n  print(\"Yes\")\nelse:\n  print(\"No\")\n  \n  "}
{"label": 38, "index": 4887, "code": "def main():\n    N, M = map(int, input().split())\n    \n    A = []\n    for _ in range(N):\n        A.append(input())\n        \n    B = []\n    for _ in range(M):\n        B.append(input())\n\n    def check(x, y):\n        for i in range(M):\n            for j in range(M):\n                if A[x + i][y + j] != B[i][j]:\n                    return False\n        return True\n\n    for i in range(N - M + 1):\n        for j in range(N - M + 1):\n            if check(i, j):\n                print('Yes')\n                return\n    print('No')\n\nmain()\n"}
{"label": 38, "index": 4888, "code": "n, m = map(int, raw_input().strip().split(\" \"))\narr_n = [None] * n\narr_m = [None] * m\nfor i in range(n):\n\tarr_n[i] = raw_input().strip()\nfor i in range(m):\n\tarr_m[i] = raw_input().strip()\n\nfound = False\nfor i in range(n-m+1):\n\tif found:\n\t\tbreak\n\tfor j in range(n-m+1):\n\t\tif found:\n\t\t\tbreak\n\t\tmatch = True\n\t\tfor k in range(m):\n\t\t\tif arr_m[k] != arr_n[i+k][j:j+m]:\n\t\t\t\tmatch = False\n\t\t\t\tbreak\n\t\tif match:\n\t\t\tfound = True\n\t\t\tprint \"Yes\"\nif not found:\n\tprint \"No\"\n"}
{"label": 38, "index": 4889, "code": "import sys\n\nstdin = sys.stdin\ndef na(): return map(int, stdin.readline().split())\ndef ns(): return stdin.readline().strip()\n\nn,m = na()\nba = []\nfor i in range(n):\n    ba.append(ns())\nbb = []\nfor i in range(m):\n    bb.append(ns())\n\nfor i in range(n-m+1):\n    for j in range(n-m+1):\n        ok = True\n        for k in range(m):\n            if ba[i+k][j:j+m] != bb[k]:\n                ok = False\n                break\n        if ok:\n            print(\"Yes\")\n            sys.exit(0)\nprint(\"No\")\n"}
{"label": 38, "index": 4890, "code": "N , M = map(int , input().split())\nA = []\nB = []\nflg = False\n\nfor i in range(N):\n    A.append([j for j in input()])\nfor i in range(M):\n    B.append([j for j in input()])\n\nfor i in range(N-M+1):\n    for k in range(N-M+1):\n        if flg:\n            break\n        flg = True\n        for j in range(M):\n            for l in range(M):\n                if B[j][l] != A[j+i][l+k]:\n                    flg = False\n                    \n            \n \nif flg:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 38, "index": 4891, "code": "N, M = (int(i) for i in input().split())\na = []\nb = []\nfor i in range(N):\n    data = list(input())\n    a.append(data)\nfor i in range(M):\n    data = list(input())\n    b.append(data)\n\n#N=4\n#M=2\n#a=[['a','s','a','s'],['a','a','s','s'],['s','a','a','s'],['s','a','a','a']]\n#b=[['s','a'],['a','s']]\n\nL = N-M\n\ndef check(i,j):\n    ans=True\n    for line in range(M):\n        if (ans==False):\n            break\n        for row in range(M):\n            if (a[i+line][j+row]!=b[line][row]):\n                ans=False\n                break\n    return ans\n\nans=False\nfor i in range(L+1):\n    if(ans==True):\n        break\n    for j in range(L+1):\n        ansnow=check(i,j)\n #       print(ansnow,i,j)\n        if(ansnow==True):\n            ans=True\n            break\nif(ans==True):\n    print('Yes')\nelse:\n    print('No')\n    "}
{"label": 38, "index": 4892, "code": "from collections import defaultdict\n\n\ndef main():\n    N, M = map(int, input().split())\n    A, B = [], []\n    for _ in range(N):\n        a = input()\n        A.append(a)\n    for _ in range(M):\n        b = input()\n        B.append(b)\n\n    for y in range(N):\n        for x in range(N):\n\n            ok = True\n            for ys in range(M):\n                for xs in range(M):\n                    if y + ys < N and x + xs < N:\n                        if A[y + ys][x + xs] == B[ys][xs]:\n                            pass\n                        else:\n                            ok = False\n                    else:\n                        ok = False\n\n            if ok:\n                print(\"Yes\")\n                return\n    print(\"No\")\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 38, "index": 4893, "code": "from sys import exit, setrecursionlimit\nfrom functools import reduce\nfrom itertools import *\nfrom collections import defaultdict\nfrom bisect import bisect\n\ndef read():\n  return int(input())\n\ndef reads():\n  return [int(x) for x in input().split()]\n\nsetrecursionlimit(1000000)\n\n(N, M) = reads()\n\nA = []; B = []\nfor _ in range(N):\n  s = input()\n  A.append(s)\nfor _ in range(M):\n  s = input()\n  B.append(s)\n\nfor x in range(N-M+1):\n  for y in range(N-M+1):\n    if all(A[y+j][x:x+M] == B[j] for j in range(M)):\n      print(\"Yes\"); exit()\n\nprint(\"No\")\n"}
{"label": 38, "index": 4894, "code": "# -*- coding: utf-8 -*-\n\nimport sys\nimport os\n\n\nN, M = map(int, input().split())\nif N < M:\n    print('No')\n    quit()\n\nA = []\nfor i in range(N):\n    lst = list(input().strip())\n    A.append(lst)\n\nB = []\nfor i in range(M):\n    lst = list(input().strip())\n    B.append(lst)\n\n#print(A)\n#print(B)\n\n# search\nfor offset_i in range(N-M+1):\n    for offset_j in range(N-M+1):\n        # check match\n        all_match = True\n        for i in range(M):\n            for j in range(M):\n                if A[i+offset_i][j+offset_j] != B[i][j]:\n                    all_match = False\n        if all_match:\n            print('Yes')\n            quit()\nprint('No')\n"}
{"label": 38, "index": 4895, "code": "#coding: UTF-8\nimport sys\nN,M=map(int,input().split())\nAlist=[input() for i in range(0,N)]\nBlist=[input() for i in range(0,M)]\n\ndef is_match(A,B,M):\n    for i in range(0,M):\n        if A[i]!=B[i]:\n            return False\n    return True\n\ndef make_A(A,i,j,M):\n    C=[0]*M\n    for k in range(0,M):\n        C[k]=A[k+i][j:j+M]\n    return C\n\nfor i in range(0,N-M+1):\n    for j in range(0,N-M+1):\n        C=make_A(Alist,i,j,M)\n        if is_match(C,Blist,M):\n            print(\"Yes\")\n            sys.exit()\nprint(\"No\")"}
{"label": 38, "index": 4896, "code": "def contains(a, b):\n  for i in range(N-M+1):\n    for j in range(N-M+1):\n      for k in range(M):\n        if a[i+k][j:j+M] != b[k]:\n          break\n      else:\n        return True\n  return False\n\nN,M = map(int, raw_input().split())\n\nimga = [raw_input() for i in range(N)]\nimgb = [raw_input() for i in range(M)]\nprint 'Yes' if contains(imga, imgb) else 'No'"}
{"label": 38, "index": 4897, "code": "\nn, m = map(int, raw_input().split())\na = [raw_input() for _ in xrange(n)]\nb = [raw_input() for _ in xrange(m)]\nf = 0\nfor i in xrange(m):\n    if b[i] in a[i]:\n        f += 1\n\nif f == m:\n    print \"Yes\"\nelse:\n    print \"No\"\n"}
{"label": 38, "index": 4898, "code": "# coding=utf-8\n\nif __name__ == '__main__':\n    n, m = [int(s) for s in raw_input().split()]\n    a = [raw_input().strip() for row in range(n)]\n    b = [raw_input().strip() for row in range(m)]\n\n    for i in range(m):\n        if b[i] not in a[i]:\n            print('No')\n            exit(0)\n    else:\n        print('Yes')\n"}
{"label": 38, "index": 4899, "code": "data = raw_input()\n\nn,m = map(int,data.split(\" \"))\n\ndata = []\n\nfor x in range(n):\n  data.append(raw_input())\n\ntemp = []\n\nfor x in range(m):\n  temp.append(raw_input())\n\nfor x in range(n-m+1):\n  for y in range(n-m+1):\n    if temp[0] == data[x][y:y+m]:\n      flag = 1\n      pos = y\n      for xx in range(x+1,x+m):\n        if temp[xx - x] != data[xx][pos:pos+m]:\n          flag = 0\n          break\n      if flag == 1:\n        print \"Yes\"\n        exit(0)\n\nprint \"No\"\n\n"}
{"label": 38, "index": 4900, "code": "import sys\n\ndef debug(x, table):\n    for name, val in table.items():\n        if x is val:\n            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)\n            return None\n\ndef solve():\n    N, M = map(int, input().split())\n    A = []\n    B = []\n\n    for i in range(N):\n        A.append(input())\n    for i in range(M):\n        B.append(input())\n\n    for i in range(N - M + 1):\n        for j in range(N - M + 1):\n            for k in range(M):\n                s1 = A[i + k][j:j + M]\n                s2 = B[k]\n                if s1 != s2:\n                    break\n            else:\n                print('Yes')\n                return None\n\n    print('No')\n\n\nif __name__ == '__main__':\n    solve()"}
{"label": 38, "index": 4901, "code": "N, M = map(int, raw_input().split())\nA = [raw_input() for _ in range(N)]\nB = [raw_input() for _ in range(M)]\n\n\ndef check(i, j):\n    for k in range(M):\n        if A[i+k][j:j+M] != B[k]:\n            return False\n    return True\n\n\nfor i in range(N-M+1):\n    for j in range(N-M+1):\n        if check(i, j):\n            print \"Yes\"\n            exit()\nprint \"No\"\n"}
{"label": 38, "index": 4902, "code": "n,m=map(int,input().split())\na=[input() for _ in range(n)]\nb=[input() for _ in range(m)]\n\nres=any([r[j:j+m] for r in a[i:i+m]]==b for i in range(n-m+1) for j in range(n-m+1))\nprint('Yes' if res else 'No')\n"}
{"label": 38, "index": 4903, "code": "import itertools\n\n_N, _M = input().split()\nN=int(_N)\nM=int(_M)\nA=[]\nfor i in range(0,N):\n    A.append(input())\nB=[]\nfor j in range(0,M):\n    B.append(input())\n\nref_tuple = itertools.product(range(0,N-M+1),range(0,N-M+1))\nt=False\nfor ref_row_a, ref_col_a in ref_tuple:\n    for row_b, col_b in itertools.product(range(0,M),range(0,M)):\n        if not A[ref_row_a+row_b][ref_col_a+col_b]==B[row_b][col_b]:\n            break\n        if (row_b, col_b)==(M-1,M-1):\n            t=True\n            break\n    if t:\n        break\n\nif t:\n    print('Yes')\nelse:\n    print('No')"}
{"label": 38, "index": 4904, "code": "from itertools import product\n\nn, m = [int(i) for i in input().rstrip().split()]\nAA = [[0 if i == '.' else 1 for i in input().rstrip()] for _ in range(n)]\nBB = [[0 if i == '.' else 1 for i in input().rstrip()] for _ in range(m)]\n\nfor i_r, i_c in product(range(n - m + 1), range(n - m + 1)):\n    i_r -= 1\n    i_c -= 1\n    for k_r, k_c in product(range(m), range(m)):\n        if AA[i_r + k_r][i_c + k_c] == BB[k_r][k_c]:\n            continue\n        else:\n            break\n    else:\n        print('Yes')\n        break\nelse:\n    print('No')"}
{"label": 38, "index": 4905, "code": "\nN, M = map(int, input().split())\nA = []\nfor i in range(N):\n\tA.append(input())\nB = []\nfor i in range(M):\n\tB.append(input())\nt = 0\nfor i in range(N-M+1):\n\tfor j in range(N-M+1):\n\t\tt = 0\n\t\tfor k in range(M):\n\t\t\tif t:\n\t\t\t\tbreak\n\t\t\tfor l in range(M):\n\t\t\t\tif A[i+k][j+l] != B[k][l]:\n\t\t\t\t\tt = 1\n\t\t\t\t\tbreak\n\t\telse:\n\t\t\tif A[i+k][j+l] == B[k][l]:\n\t\t\t\tprint(\"Yes\")\n\t\t\t\texit()\nprint(\"No\")"}
{"label": 38, "index": 4906, "code": "n, m = map(int, raw_input().split())\nA = [raw_input() for i in xrange(n)]\nB = [raw_input() for i in xrange(m)]\n\nfor i in xrange(n-m+1):\n    for j in xrange(n-m+1):\n        ok = 1\n        for x in xrange(m):\n            for y in xrange(m):\n                if A[i+x][j+y] != B[x][y]:\n                    ok = 0\n        if ok:\n            print \"Yes\"\n            exit(0)\nprint \"No\"\n"}
{"label": 38, "index": 4907, "code": "import sys\n\nN , M = [int(n) for n in input().split()]\n\nA=[]\nB=[]\nfor i in range(N):\n    A.append(input())\nfor i in range(M):\n    B.append(input())\n\nfor i in range(N-M+1):\n    for j in range(N-M+1):\n        corres = True\n        for k in range(M):\n            if A[i+k][j:j+M] != B[k]:\n                corres = False\n                break\n        if corres == True:\n            print('Yes')\n            sys.exit()\n\nprint('No')\n"}
{"label": 38, "index": 4908, "code": "def subImage(x,y,M,A):\n    C = []\n    for i in range(M):\n        C.append(A[x+i][y:y+M])\n    return C\n    \ndef containIm(N,M,A,B):\n    judge = 0    \n    for x in range(N-M+1):\n        for y in range(N-M+1):\n            C = subImage(x,y,M,A)\n            if C == B:\n                judge = 1\n                return judge\n    return judge\n    \n\n# \u5165\u529b\nN,M = map(int,input().split())\nA = []\nB = []\nfor i in range(N):\n    A.append(input())\nfor i in range(M):\n    B.append(input())\n\njudge = containIm(N,M,A,B)\nif judge == 1:\n    print('Yes')\nelse:\n    print('No')"}
{"label": 38, "index": 4909, "code": "N,M=map(int,input().split())\nA=[]\nfor i in range(N):\n A.append(input())\nB=[]\nfor i in range(M):\n B.append(input())\nt = 0\nt = 0\nfor i in range(N-M+1):\n\tfor j in range(N-M+1):\n\t\tt = 0\n\t\tfor k in range(M):\n\t\t\tif t:\n\t\t\t\tbreak\n\t\t\tfor l in range(M):\n\t\t\t\tif A[i+k][j+l] != B[k][l]:\n\t\t\t\t\tt = 1\n\t\t\t\t\tbreak\n\t\telse:\n\t\t\tif A[i+k][j+l] == B[k][l]:\n\t\t\t\tprint(\"Yes\")\n\t\t\t\texit()\nprint(\"No\")"}
{"label": 38, "index": 4910, "code": "n,m=map(int,input().split())\na=[input() for _ in range(n)]\nb=[input() for _ in range(m)]\n\nres=False\nfor i in range(n-m+1):\n    for j in range(n-m+1):\n        t=[r[j:j+m] for r in a[i:i+m]]\n        res|=t==b\nprint('Yes' if res else 'No')\n"}
{"label": 38, "index": 4911, "code": "n,m = map(int, raw_input().split())\nnp=[]\nmp=[]\nfor i in xrange(0, n):\n  np.append(raw_input())\nfor i in xrange(0, m):\n  mp.append(raw_input())\n \nfor i in xrange(0,n-m+1):\n  for j in xrange(0, n-m+1):\n    flag = True\n    for x in xrange(0, m):\n      for y in xrange(0, m):\n        if mp[x][y] != np[i+x][j+y]:\n          flag = False\n          break\n      if flag == False:\n        break\n    if flag:\n      print \"Yes\"\n      break\n  if flag: break\nif flag==False: print \"No\""}
{"label": 38, "index": 4912, "code": "n, m = map(int, raw_input().split())\n\nA = [raw_input() for _ in xrange(n)]\nB = [raw_input() for _ in xrange(m)]\n\nfor r in xrange(n-m+1):\n    for c in xrange(n-m+1):\n        f = True\n        for x in xrange(m):\n            for y in xrange(m):\n                if A[r+x][c+y] != B[x][y]:\n                    f = False\n                    break\n            if not f:\n                break\n        if f:\n            print \"Yes\"\n            exit()\nprint \"No\"\n"}
{"label": 38, "index": 4913, "code": "N, M = map(int, input().split())\nA = [input() for i in range(N)]\nB = [input() for i in range(M)]\ndef _search(i, j):\n    flag = True\n    for k in range(M):\n        for l in range(M):\n            flag &= A[i+k][j+l] == B[k][l]\n            if not flag:\n                return flag\n    return flag\n\ndef search():\n    for i in range(N-M+1):\n        for j in range(N-M+1):\n            if _search(i, j):\n                return 'Yes'\n    return 'No'\nprint(search())\n\n"}
{"label": 38, "index": 4914, "code": "#coding:utf-8\nimport sys\na=[]\nb=[]\nN,M=map(int ,raw_input().split())\nfor i in range(N):\n    a.append(list(raw_input()))\nfor i in range(M):\n    b.append(list(raw_input()))\n\ndef chk(a,b,x,y):\n    global M\n    global N\n    #x,y:\u5de6\u4e0a\u5ea7\u6a19\n    #print x,y\n    for row in range(M):\n        for col in range(M):\n            if a[row+y][col+x]!= b[row][col]:\n                return False\n    return True\n\nf=False\nfor row in range(N-M):\n    for col in range(N-M):\n        if chk(a,b,col,row):\n            f=True\nif N==1 and M==1 and a[0][0]==b[0][0]:\n    print \"Yes\"\nelif f:\n    print \"Yes\"\nelse:\n    print \"No\""}
{"label": 38, "index": 4915, "code": "n,m = map(int,input().split())\na = []\nfor i in range(n):\n    a.append(str(input()))\nb = []\nfor i in range(m):\n    b.append(str(input()))\n\nf = [0]*m\ntmp = []\nfor j in range(m):\n    f[j] = a[j].find(b[j])\n    if f[j] != -1:\n        tmp.append(j)\nwhile -1 in f: f.remove(-1)\n\ntry:\n    if len(f) == 0:\n        print('No')\n    else:\n        count = 0\n        for i in range(len(tmp)):\n            count += 1\n            if (b[tmp[i]] in a[tmp[i]]) == False:\n                count = 0\n        if count == m:\n            print('Yes')\n        else:\n            print('No')\nexcept:\n    print('No')"}
{"label": 38, "index": 4916, "code": "from collections import defaultdict\n\n\ndef main():\n    N, M = map(int, input().split())\n    A = [input() for _ in range(N)]\n    B = [input() for _ in range(M)]\n\n    for sy in range(N):\n        for sx in range(N):\n\n            ok = True\n            for y in range(M):\n                for x in range(M):\n                    if sy + y < N and sx + x < N:\n                        ok &= A[sy + y][sx + x] == B[y][x]\n                    else:\n                        ok = False\n\n            if ok:\n                print(\"Yes\")\n                return\n    print(\"No\")\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 38, "index": 4917, "code": "n, m = map(int, input().split())\na = []\nb = []\nfor i in range(n):\n    a.append(input())\nfor i in range(m):\n    b.append(input())\nans = \"No\"\n\nfor i in range(n - m + 1):\n    for j in range(n - m + 1):\n        if a[i][j] == b[0][0]:\n            c = []\n            for k in range(m):\n                c.append(a[i + k][j:j + m])\n            if c == b:\n                ans = \"Yes\"\nprint(ans)\n"}
{"label": 38, "index": 4918, "code": "# coding: utf-8\n\n## atode\n\nn, m = list(map(int, input().split()))\n\na = []\nfor i in range(n):\n\ta.append(input())\n\nb = []\nfor i in range(m):\n\tb.append(input())\n\ndef check(x, y):\n\tfor i in range(m):\n\t\tfor j in range(m):\n\t\t\tif a[i+x][j+y] != b[i][j]:\n\t\t\t\treturn False\n\treturn True\n\ndef move(d):\n\tfor x in range(d):\n\t\tfor y in range(d):\n\t\t\tif check(x, y):\n\t\t\t\treturn True\n\treturn False\n\nis_include = move(n-m+1)\n\nif is_include:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n"}
{"label": 38, "index": 4919, "code": "n, m = map(int, input().split())\nA, B = [], []\n\nfor i in range(n):\n    A.append(input())\n\nfor i in range(m):\n    B.append(input())\n\ndef is_contain(i, b_pos):\n    containing = True\n    for k in range(1, m):\n        if A[i+k][b_pos:(b_pos+len(B))] != B[k]:\n            containing = False\n    return containing\n\nif n < m or len(A) < len(B):\n    print(\"No\")\n    exit()\n\nfor i in range(n - m + 1):\n    lineA = A[i]\n    lineB = B[0]\n    lineB_pos = lineA.find(lineB)\n    if lineB_pos >= 0:\n        if is_contain(i, lineB_pos):\n            print(\"Yes\")\n            exit()\n\nprint(\"No\")"}
{"label": 38, "index": 4920, "code": "N, M = map(int, input().split())\n\nA = [list(input()) for _ in range(N)]\nB = [list(input()) for _ in range(M)]\n\nfor i in range(N-M+1):\n    for j in range(N-M+1):\n        flag = True\n        for k in range(M):\n            for l in range(M):\n                if A[i+k][j+l] != B[k][l]:\n                    flag = False\n                    break\n            if not flag:\n                break\n        \n        if flag:\n            print('Yes')\n            exit()\n\nprint('No')"}
{"label": 38, "index": 4921, "code": "m,n=map(int,raw_input().split())\na=[]*m\nb=[]*n\np=0\nq=0\nwhile(q<m):\n\tq+=1\n\ta.append(raw_input())\nwhile(p<n):\n\tp+=1\n\tb.append(raw_input())\nflag=False\n# print a\n# print b\nfor i in xrange(n):\n\tif not b[i] in (a[i]):\n\t\tflag=True\n\t\tbreak\nif flag:\n\tprint \"No\"\nelse:\n\tprint \"Yes\""}
{"label": 38, "index": 4922, "code": "\nn, m = list(map(int, input().split()))\na = ['' for i in range(n)]\nb = ['' for i in range(m)]\n\nfor i in range(n):\n    a[i] = list(input())\n\nfor i in range(m):\n    b[i] = list(input())\n\nans = False\n\nfor i in range(n - m + 1):\n    for j in range(n - m + 1):\n        _a = a[i:i+len(b)]\n        _a = list(map(lambda x: x[j:j+len(b)], _a))\n\n        if b == _a:\n            ans = True\n\nif ans:\n    print('Yes')\nelse:\n    print('No')\n"}
{"label": 38, "index": 4923, "code": "def read():\n    return int(input())\n\ndef reads(sep=None):\n    return list(map(int, input().split(sep)))\n\ndef check(i, j, a, b):\n    for x in range(len(b)):\n        for y in range(len(b)):\n            if a[i+x][j+y] != b[x][y]:\n                return False\n    return True\n\ndef main():\n    n, m = reads();\n    a = [input() for _ in range(n)]\n    b = [input() for _ in range(m)]\n    for i in range(n - m + 1):\n        for j in range(n - m + 1):\n            if check(i, j, a, b):\n                print('Yes')\n                return\n    print('No')\n \nmain()\n"}
{"label": 38, "index": 4924, "code": "N, M = list(map(int, input().split()))\n\nA = [list(input()) for i in range(N)]\nB = [list(input()) for j in range(M)]\n\ncheck = True\nFlag = False\n\nfor s in range(N-M+1):\n    for t in range(N-M+1):\n        check = True\n        for p in range(M):\n            for q in range(M):\n                if A[s+p][t+q] != B[p][q]:\n                    check = False\n        if check:\n            Flag = True\n\nif(Flag):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 38, "index": 4925, "code": "def main():\n    nm = map(int, raw_input().split())\n    A = []\n    B = []\n    flag = False\n    for i in range(nm[0]):\n        A.append(raw_input())\n    for i in range(nm[1]):\n        B.append(raw_input())\n\n    for i in range(nm[0]):\n      if i + nm[1] <= nm[0]:\n        for j in range(nm[0]):\n            if j + nm[1] <= nm[0]:\n                for k in range(nm[1]):\n                    for l in range(nm[1]):\n                        if(A[i+k][j+l] == B[k][l]):\n                            flag = True\n                        else:\n                            flag = False\n                            break \n                    if flag == False:\n                        break\n            else:\n                break\n            if flag:\n                 break\n        if flag:\n            break\n      else:\n          break\n       \n    if flag:\n        return \"Yes\"\n    else:\n        return \"No\"    \nprint main()"}
{"label": 38, "index": 4926, "code": "n, m = [int(i) for i in input().split()]\n\nN, M = [], []\nfor i in range(n):\n    N.append(list(input()))\nfor i in range(m):\n    M.append(list(input()))\n\n# print(N)\n# print(M)\n\ndef check():\n    for i in range(n-m+1):\n        for j in range(n-m+1):\n            flag = True\n            for ii in range(m):\n                for jj in range(m):\n                    flag &= N[i+ii][j+jj] == M[ii][jj]\n                    if not flag: break\n                if not flag: break\n            if flag: return \"Yes\"\n    return \"No\"\n\nprint(check())\n\n"}
{"label": 38, "index": 4927, "code": "import sys\n\nN,M = map(int, input().split())\n\nstrNs = []\nstrMs = []\n\nfor n in range(N):\n\tstrNs.append(input())\n\t\nfor m in range(M):\n\tstrMs.append(input())\n\t\ndef check_rest(start_row, start_col):\n\tfor j in range(1,M):\n\t\tif strNs[start_row+j][start_col:start_col+M] != strMs[j]:\n\t\t\treturn False\n\telse:\n\t\treturn True\n\t\t\n\nfor i in range(N-M+1):\n\ttmp = strNs[i].find(strMs[0])\n\twhile tmp >= 0:\n\t\tif check_rest(i, tmp):\n\t\t\tprint(\"Yes\")\n\t\t\tsys.exit()\n\t\telif tmp + M > N:\n\t\t\tbreak\n\t\telse:\n\t\t\ttmp = strNs[i].find(strMs[0],tmp+1)\n\t\t\t\nprint(\"No\")"}
{"label": 38, "index": 4928, "code": "def check_match(A, B):\n    N = len(A)\n    M = len(B)\n    for i in range(N):\n        for j in range(N):\n            match = True\n            for k1 in range(M):\n                for k2 in range(M):\n                    if i+k1 >= N or j+k2 >= N or A[i+k1][j+k2] != B[k1][k2]:\n                        match = False\n                        break\n            if match == True:\n                return True\n    return False\n\nif __name__ == \"__main__\":\n    size = [int(i) for i in input().split()]\n    N = size[0]\n    M = size[1]\n    A = []\n    B = []\n    for i in range(N):\n        A.append(input())\n    for i in range(M):\n        B.append(input())\n    if check_match(A, B) == True:\n        print(\"Yes\")\n    else:\n        print(\"No\")"}
{"label": 38, "index": 4929, "code": "import sys\nimport numpy as np\n\nN, M = list(map(int, input().split()))\nA = []\nfor _ in range(N):\n    A.append(list(input()))\nB = []\nfor _ in range(M):\n    B.append(list(input()))\n\nA = np.array(A)\nB = np.array(B).flatten()\n\nfor row in range(N - M + 1):\n    for col in range(N - M + 1):\n        patch = A[row:row + M, col:col + M].flatten()\n        if str(patch) == str(B):\n            print('Yes')\n            sys.exit()\nprint('No')"}
{"label": 38, "index": 4930, "code": "# -*- coding: utf-8 -*-\n\nimport sys\nimport subprocess\nimport json\nimport time\nimport math\nimport re\nimport sqlite3\n\nN, M = map(int, input().split())\nA = []\nB = []\nfor i in range(N):\n    A.append(input())\n    \nfor i in range(M):\n    B.append(input())\n\nfor i in range(N-M+1):\n    for j in range(N-M+1):\n        ok = True\n        for k in range(M):\n            for l in range(M):\n                if A[i+k][j+l] != B[k][l]: ok = False;\n        if ok:\n            print(\"Yes\")\n            exit(0)\nprint(\"No\")\n"}
{"label": 38, "index": 4931, "code": "n,m=map(int,input().split())\na,b=[],[]\nfor i in range(n):\n    a.append(input())\nfor i in range(m):\n    b.append(input())\nfor y in range(n-m+1):\n    for x in range(n-m+1):\n        eq=True\n        for yy in range(m):\n            for xx in range(m):\n                eq &= a[y+yy][x+xx] == b[yy][xx]\n                if not eq: break\n            if not eq: break\n        if eq:\n            print(\"Yes\")\n            exit(0)\nprint(\"No\")"}
{"label": 38, "index": 4932, "code": "def srch_all(ptn, str):\n    index = []\n    i = -1\n    while True:\n        i = str.find(ptn, i + 1)\n        if i > -1:\n            index.append(i)\n        else:\n            break\n    return index\n\ndef judge(i, jlist, len):\n    for l in jlist:\n        k = 1\n        while k < M:\n            try:\n                if n[i + 1][l:l + len] == m[k]:\n                    pass\n                else:\n                    return 'No'\n            except:\n                return 'No'\n            i += 1\n            k += 1\n        else:\n            return 'Yes'\n\nN, M = map(int, input().split())\ni = 0\nn = []\nwhile i < N:\n    n.append(input())\n    i += 1\n\ni = 0\nm = []\nwhile i < M:\n    m.append(input())\n    i += 1\n\ni = 0\nr = 'No'\nwhile i < N:\n    result = srch_all(m[0], n[i])\n    if len(result) > 0:\n        r = judge(i, result, len(m[0]))\n        if r == 'Yes':\n            break\n    i += 1\nprint(r)"}
{"label": 38, "index": 4933, "code": "n, m = map(int, input().split())\na = [input() for i in range(n)]\nb = [input() for i in range(m)]\n\nres = \"No\"\nc = n - m + 1\nfor i in range(c):\n    for j in range(c):\n        if list(map(lambda l: l[j:j+m], a[i:i+m])) == b:\n            res = \"Yes\"\nprint(res)\n"}
{"label": 38, "index": 4934, "code": "N,M = map(int, input().split())\na=[input() for i in range(N)]\nb=[input() for i in range(M)]\n \nans = 0\nfor i in range(N-M+1):\n    for j in range(N-M+1):\n        t = [k[j:j+M] for k in a[i:i+M]]\n        if t==b: ans =1\n \nprint(\"Yes\" if ans else \"No\")"}
{"label": 38, "index": 4935, "code": "N, M = map(int, input().split())\nA, B = [], []\nfor _ in range(N):\n    A.append(input())\nfor _ in range(M):\n    B.append(input())\n\nres = False\nfor sy in range(N - M + 1):\n    for sx in range(N - M + 1):\n        ok = True\n        for dy in range(M):\n            y = sy + dy\n            a = A[y][sx:sx + M]\n            ok = ok and a == B[dy]\n        res = res or ok\nprint(\"Yes\" if res else \"No\")"}
{"label": 38, "index": 4936, "code": "N,M=map(int,raw_input().split())\nA=[raw_input() for _ in range(N)]\nB=[raw_input() for _ in range(M)]\n\nfor i in range(N-M+1):\n    index=A[i].find(B[0])\n    if index==-1:\n        continue\n    for j in range(M):\n        if A[i+j][index:index+M] !=B[j]:\n            break\n    else :\n        print \"Yes\"\n        break\nelse:\n    print \"No\"\n    "}
{"label": 38, "index": 4937, "code": "n, m = map(int, input().split())\na = [input() for i in range(n)]\nb = [input() for i in range(m)]\n\n\nfor i in range(n-m+1):\n    for j in range(n-m+1):\n        aa = a[i:i + m]\n        for k in range(m):\n            aa[k] = aa[k][j:j+m]\n        if aa == b:\n            print('Yes')\n            exit()\n\nprint('No')\n"}
{"label": 38, "index": 4938, "code": "#-*- coding: utf-8 -*-\n\n#matching\ndef matching(x,y):\n    for s in range(m):\n        for t in range(m):\n            if not a[x+s][y+t] == b[s][t]:\n                return 0\n\n    return 1\n\n\nif __name__ == '__main__':\n    #read\n    n, m = map(int,raw_input().split())\n    a=[]\n    for i in range(n):\n        a.append(list(raw_input()))\n    b=[]\n    for j in range(m):\n        b.append(list(raw_input()))\n\n\n    #slide  an origin point\n    for i in range(n - m + 1):\n        for j in range(n - m + 1):\n            #print a[i][j]\n            ans = matching(i,j)\n            if ans == 1:\n                print 'Yes'\n                exit()\n\n    if ans == 0:\n        print 'No'\n\n    '''\n    \u57fa\u6e96\u70b9\u3092\u30b9\u30e9\u30a4\u30c9\u3055\u305b\u3066\u3044\u304f\n    \u4e00\u5217\u76ee\u304c\u30de\u30c3\u30c1\u30f3\u30b0\u3059\u308b\u304b\u78ba\u8a8d\n    \u305d\u306e\u5f8c\u306e\u5217\u3082\u30de\u30c3\u30c1\u30f3\u30b0\u3059\u308b\u304b\u78ba\u8a8d\n    \u5168\u3066\u30de\u30c3\u30c1\u3059\u308c\u3070Yes\u3068\u8fd4\u3059\n    '''\n"}
{"label": 38, "index": 4939, "code": "def bsolve(a,b,c,d):\n\tM=len(b)\n\tfor i in range(M):\n\t\tfor j in range(M):\n\t\t\tif(a[c+i][d+j]!=b[i][j]):\n\t\t\t\treturn 0\n\treturn 1\ndef b():\n\tN,M=list(map(int,input().split()))\n\tA=[input()for _ in range(N)]\n\tB=[input()for _ in range(M)]\n\tflag=0\n\tfor i in range(N-M+1):\n\t\tfor j in range(N-M+1):\n\t\t\tif(A[i][j]==B[0][0]):\n\t\t\t\tflag=bsolve(A,B,i,j)\n\t\t\t\tif(flag==1):\n\t\t\t\t\tprint(\"Yes\")\n\t\t\t\t\treturn \n\tif(flag==1):\n\t\tprint(\"Yes\")\n\telse:\n\t\tprint(\"No\")\nb()"}
{"label": 39, "index": 4940, "code": "a = int(input())\nprint(a*800 - a//15*200)"}
{"label": 39, "index": 4941, "code": "i=int(input())\nx=int(800*i)\ny=int(200*int(i/15))\nprint(x-y)"}
{"label": 39, "index": 4942, "code": "n = input()\nprint n*800 - 200*(n//15)"}
{"label": 39, "index": 4943, "code": "n = int(input())\nprint(800*n - n//15*200)\n"}
{"label": 39, "index": 4944, "code": "N = int(raw_input())\nprint N*800-N/15*200"}
{"label": 39, "index": 4945, "code": "n = int(input())\n\nx = 800 * n\ny = n // 15 * 200\nprint(x-y)\n"}
{"label": 39, "index": 4946, "code": "N = int(input())\nx = 800 * N\ny = 200 * (N // 15)\nprint(x-y)"}
{"label": 39, "index": 4947, "code": "N = int(input())\nx = N * 800\ny = (N // 15) * 200\nprint (x-y)"}
{"label": 39, "index": 4948, "code": "N = int(raw_input())\nx = 800*N\ny = N/15*200\nprint x-y"}
{"label": 39, "index": 4949, "code": "n = input()\n\nx = 800 * n\ny = (n / 15) * 200\nprint x - y"}
{"label": 39, "index": 4950, "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nn = int(input())\nprint(n * 800 - 200 * (n // 15))\n"}
{"label": 39, "index": 4951, "code": "N = int(raw_input())\nv = 800 * N - 200 * int(N / 15)\nprint v"}
{"label": 39, "index": 4952, "code": "x = 800 * int(input())\ny = 200* (x//(800*15))\nprint(x-y)"}
{"label": 39, "index": 4953, "code": "n= int(input())\nprint(n*800-n//15*200)"}
{"label": 39, "index": 4954, "code": "N = input()\nx = N*800\ny = N/15 *200\nprint x - y"}
{"label": 39, "index": 4955, "code": "n=int(input())\nx=n*800\ny=(n//15)*200\nprint(x-y)\n"}
{"label": 39, "index": 4956, "code": "N = int(input())\n     \nx = N*800\ny = int(N//15) * 200\n     \nprint(x-y)"}
{"label": 39, "index": 4957, "code": "N = int(input())\n\nans = 800 * N - int(N / 15) * 200\n\nprint(ans)"}
{"label": 39, "index": 4958, "code": "# -*- coding: utf-8 -*-\nINF=10**10\n\ndef main():\n    \n    n=int(input())\n    print(n*800-n//15*200)\n    \nif __name__==\"__main__\":\n    main()\n    "}
{"label": 39, "index": 4959, "code": "# -*- coding:utf-8 -*-\nn = int(input())\n\nr = int(n/15)\nprint(n*800-r*200)\n"}
{"label": 39, "index": 4960, "code": "N = int(input())\n\nprint(N * 800 - N // 15 * 200)"}
{"label": 39, "index": 4961, "code": "n=input()\nprint n*800-(n/15)*200"}
{"label": 39, "index": 4962, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\ndef LI(): return list(map(int, input().split()))\ndef LF(): return list(map(float, input().split()))\ndef II(): return int(input())\ndef LS(): return input().split()\ndef S(): return input()\n\n\ndef main():\n    n = II()\n    r = n*800 - n//15*200\n    return r\n\nprint(main())\n"}
{"label": 39, "index": 4963, "code": "N = int(input())\nprint(800*N-(N//15)*200)\n"}
{"label": 39, "index": 4964, "code": "N = int(input())\n\nx = N * 800\ny = N // 15 * 200\n\nprint(x-y)"}
{"label": 39, "index": 4965, "code": "n = int(input())\nprint(int(n*800-(n//15)*200))"}
{"label": 39, "index": 4966, "code": "def culc():\n    N = int(input())\n    if 1<=N<=100:\n        tmp = N//15\n        x = 800 * N\n        y = 200 * tmp\n    return x-y\n\nif __name__==\"__main__\":\n    print(culc())\n"}
{"label": 39, "index": 4967, "code": "N = int(input())\n\nx = 800 * N\npiyo = 0\n\nfor i in range(1, N+1):\n    if i % 15 == 0:\n        piyo += 1\n\ny = 200 * piyo\n\nprint(x-y)"}
{"label": 39, "index": 4968, "code": "# -*- coding: utf-8 -*-\nN = int(input())\n\nx = 800 * N\ny = (N//15)*200\nprint(x-y)"}
{"label": 39, "index": 4969, "code": "a = int(input())\nx = a * 800\ny= (a//15)*200\n\nprint(x-y)"}
{"label": 39, "index": 4970, "code": "N = int(input())\nx = N * 800\ny = (N // 15) * 200\nprint(str(x - y))"}
{"label": 39, "index": 4971, "code": "n = input()\nprint 800 * n - 200 * (n / 15)"}
{"label": 39, "index": 4972, "code": "N = int(input().strip())\ncost = N * 800\nval = N // 15\nprint(cost - (val*200))"}
{"label": 39, "index": 4973, "code": "#!/usr/bin/env python\n\nx=0\ny=0\nn=int(raw_input().strip())\nx=800*n\ny=n/15*200\nprint x-y"}
{"label": 39, "index": 4974, "code": "N = int(input())\n\nx = 800 * N\ny = 200 * (N//15)\n\nprint(x - y)"}
{"label": 39, "index": 4975, "code": "N=int(input())\nx=800*N\ny=(N//15)*200\nZ=x-y\nprint(Z)"}
{"label": 39, "index": 4976, "code": "n = int(input())\nmoney = int(n / 15) * 200\nprint((n * 800) - money)"}
{"label": 39, "index": 4977, "code": "import sys\n\nfor x in map(int, [x.strip() for x in sys.stdin]):\n\tprice = x*800\n\tdiscount = x/15*200\n\tprint price-discount"}
{"label": 39, "index": 4978, "code": "N = int(input())\nprint(800 * N - 200 * int(N /15))\n"}
{"label": 39, "index": 4979, "code": "def main():\n    n = int(input())\n    x = n*800\n    y = n//15 * 200\n    print(x-y)\n\n\nif __name__ == \"__main__\":\n    main()"}
{"label": 39, "index": 4980, "code": "N=input()\nx=800*N\ny=N/15*200\na=x-y\nprint (a)"}
{"label": 39, "index": 4981, "code": "N = int(input())\ndis = (N//15)*200\nprint(N*800-dis)"}
{"label": 39, "index": 4982, "code": "N=int(raw_input())\nx = 800*N\ny = (N/15)*200\nprint x-y"}
{"label": 39, "index": 4983, "code": "n = int(input())\nx = 800 * n\ny = 200 * (int(n / 15))\nprint(x - y)\n"}
{"label": 39, "index": 4984, "code": "N = int(input())\nans = 800 * N - 200 * int(N/15)\nprint(ans)"}
{"label": 39, "index": 4985, "code": "N = int(input())\nprint( N * 800 - (N // 15) * 200)"}
{"label": 39, "index": 4986, "code": "N = int(input())\nprint(800 * N - 200 * (N // 15))\n"}
{"label": 39, "index": 4987, "code": "n = input()\n\nx = int(n)*800\ny = int(int(n)/15) * 200\n\nprint(x-y)\n"}
{"label": 39, "index": 4988, "code": "n = input()\n\nprint 800*n - 200*(int(n/15))\n"}
{"label": 39, "index": 4989, "code": "N=int(input());print(N*800-N//15*200)"}
{"label": 39, "index": 4990, "code": "n = int(raw_input())\n\nx = n * 800\ny = (n / 15) * 200\n\nprint x - y"}
{"label": 39, "index": 4991, "code": "n = int(input())\nx = 800 * n\ny = (n // 15) * 200\nprint(x-y)"}
{"label": 39, "index": 4992, "code": "n = int(input())\n\nx = 800 * n\ny = 200 * (n // 15)\n\nprint(x-y)"}
{"label": 39, "index": 4993, "code": "n = int(input())\nprint(n*800 - n//15*200)"}
{"label": 39, "index": 4994, "code": "n = int(input())\nprint(n * 800 - n // 15 * 200)"}
{"label": 39, "index": 4995, "code": "N = int(input())\nprint(800*N-200*(N//15))"}
{"label": 39, "index": 4996, "code": "import math\nn = int(input())\nx = 800*n\ni = n/15\ni = math.floor(i)\ny = i*200\nprint(x-y)\n"}
{"label": 39, "index": 4997, "code": "n = int(input())\n\nprint(n * 800 - (n//15) * 200)"}
{"label": 39, "index": 4998, "code": "N = int(input())\n\nx = 800 * N\ny = 200 * (N // 15)\n\nprint(x-y)\n"}
{"label": 39, "index": 4999, "code": "n = int(input())\nprint (n * 800 - (n // 15) * 200)\n"}
{"label": 39, "index": 5000, "code": "n = int(input())\nprint (n * 800 - (n // 15) * 200)\n"}
{"label": 39, "index": 5001, "code": "import math\nN = int(input())\nprint(800 * N - 200 * math.floor(N / 15))\n"}
{"label": 39, "index": 5002, "code": "import math\nN = int(input())\nx = 800 * N\ny = math.floor(N / 15)\ny *= 200\nans = x - y\nprint(ans)\n"}
{"label": 39, "index": 5003, "code": "x = int(raw_input())\nprint(x*800 - int(x/15) * 200)"}
{"label": 39, "index": 5004, "code": "N=int(input())\nans=N*800-(N-N%15)*200/15\nprint(int(ans))"}
{"label": 39, "index": 5005, "code": "# -*- coding: utf-8 -*-\n# \u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u306e\u6574\u6570\u306e\u5165\u529b\nx = int(input())\n#x, y = map(int, input().split())\ny = x//15\nz = 800 * x - 200 * y\n\nprint(\"{0}\".format(str(z)))"}
{"label": 39, "index": 5006, "code": "N = int(input())\ndiscount = 0\nif N > 15:\n    discount = N // 15\nprint(N * 800 - discount * 200)\n"}
{"label": 39, "index": 5007, "code": "# -*- coding: utf-8 -*-\n# \u6574\u6570\u306e\u5165\u529b\na = int(raw_input())\n\nx = a * 800\ny = (a / 15) * 200\nans = x - y\nprint ans"}
{"label": 39, "index": 5008, "code": "A= int(input())\n\nprint(A * 800 - int(A / 15) * 200)"}
{"label": 39, "index": 5009, "code": "n = input()\nprint 800*n - n/15*200\n"}
{"label": 39, "index": 5010, "code": "n = int(input())\n\npay = n * 800\ngain = int(n /15) * 200\nprint(pay - gain)\n"}
{"label": 39, "index": 5011, "code": "n=int(input())\nprint(int(n*800-(n-(n%15))/15*200))"}
{"label": 39, "index": 5012, "code": "n = int(input())\nx = 800*n\ny = (n // 15) * 200\nprint(x-y)"}
{"label": 39, "index": 5013, "code": "a = int(input())\n\n\nx = 800*a\ny = int(a/15)*200\n\nprint(x-y)\n"}
{"label": 39, "index": 5014, "code": "N=int(input())\nx=800*N\ny=N//15*200\nprint(x-y)\n"}
{"label": 39, "index": 5015, "code": "N = int(input())\nprint(800 * N - (N//15) * 200)"}
{"label": 39, "index": 5016, "code": "N = int(input())\nsum_pay = N*800\nbonus_cnt = N / 15\nprint(sum_pay - bonus_cnt*200)"}
{"label": 39, "index": 5017, "code": "N=input()\n\nr = N * 800 - (N/15)*200\nprint r\n\n\n"}
{"label": 39, "index": 5018, "code": "from collections import defaultdict\n\n\ndef main():\n    n = int(input())\n    print(n * 800 - 200 * ( n // 15))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 39, "index": 5019, "code": "n = int(raw_input())\nprint 800*n - 200*(n/15)\n"}
{"label": 39, "index": 5020, "code": "num = int(input())\n\nx = 800*num\nnum_15 = num // 15\ny = num_15 * 200\n\nprint(x - y)"}
{"label": 39, "index": 5021, "code": "N = int(input())\n\nprint(N * 800 - ((N // 15) * 200))"}
{"label": 39, "index": 5022, "code": "n = int(input())\n\nx = n * 800\ny = (n // 15) * 200\nans = x - y\nprint(ans)\n"}
{"label": 39, "index": 5023, "code": "# -*- coding:utf-8 -*-\nN = int(input())\nx = N*800\ny = 200*(N//15)\nprint(x-y)"}
{"label": 39, "index": 5024, "code": "N = int(input())\n\nx = 800 * N\ny = int(N / 15) * 200\n\nprint(x-y)\n"}
{"label": 39, "index": 5025, "code": "N = int(raw_input())\nprint N*800 - 200*int(N/15)"}
{"label": 39, "index": 5026, "code": "n = int(raw_input())\nprint str(n*800 - (n//15)*200)"}
{"label": 39, "index": 5027, "code": "n = int(input())\nprint(n*800 - 200*(n//15))"}
{"label": 39, "index": 5028, "code": "n = int(input())\nprint(n * 800 - (n // 15) * 200)\n"}
{"label": 39, "index": 5029, "code": "n = int(input())\nprint(800 * n - 200 * (n // 15))"}
{"label": 39, "index": 5030, "code": "n = int(raw_input())\nx = n*800\ny = int(n/15) * 200\nprint x - y\n"}
{"label": 39, "index": 5031, "code": "n = int(input())\nx = n * 800\ny = (n//15) * 200\nprint(x - y)\n"}
{"label": 39, "index": 5032, "code": "# \u6574\u6570\u306e\u5165\u529b\nN = int(input())\n# \nx = N * 800\ntemp = N // 15\ny = temp * 200\nans = x-y\n# \u51fa\u529b\nprint(ans)"}
{"label": 39, "index": 5033, "code": "import math\nN=int(input())\n\nS=N*800-200*math.floor(N/15)\n\nprint(S)"}
{"label": 39, "index": 5034, "code": "N = int(raw_input())\nprint N * 800 - (N/15) * 200\n"}
{"label": 39, "index": 5035, "code": "N = int(input())\n\nx = 800 * N\ny = (N // 15) * 200\nprint(x-y)\n"}
{"label": 39, "index": 5036, "code": "N = int(input())\n\nans = 800 * N - 200 * (N // 15)\n\nprint(ans)"}
{"label": 39, "index": 5037, "code": "N = int(input())\nx = 0\ny = 0\nfor i in range(1,N+1):\n    x += 800\n    if (i%15 == 0):\n        y += 200\nprint(x-y)\n"}
{"label": 39, "index": 5038, "code": "n=int(input());print(n*800-n//15*200)"}
{"label": 39, "index": 5039, "code": "N = int(input())\n\npay = N * 800\nback = N // 15\n\npay = pay - (back * 200)\n\nprint(pay)\n"}
{"label": 39, "index": 5040, "code": "n=int(input())\nx=800*n-200*(n//15)\nprint(x)"}
{"label": 39, "index": 5041, "code": "# -*- coding: utf-8 -*-\nimport sys\n# sys.setrecursionlimit(10000)\n\n\ndef main():\n    # \u5165\u529b\u51e6\u7406\n    N = int(input())\n\n    # \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u672c\u4f53\n    x = 800 * N\n    y = 200 * int(N / 15)\n\n    # \u51fa\u529b\n    print(x-y)\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 39, "index": 5042, "code": "N = int(input())\nx = 800 * N\ny = (N//15)*200\nprint(x-y)"}
{"label": 39, "index": 5043, "code": "N = int(input())\nx = 800*N\ny = 200*int(N/15)\nprint(x-y)\n"}
{"label": 39, "index": 5044, "code": "n = int(input())\n\ntake = n * 800\ngive = int(n / 15) * 200\n\nprint(take - give)"}
{"label": 39, "index": 5045, "code": "N = int(input())\nx = 800*N\ny = 200*(N//15)\nprint(x-y)"}
{"label": 39, "index": 5046, "code": "#!/usr/bin/python\n\nimport sys\n\ndef main(argv):\n    for line in sys.stdin:\n        n = int(line)\n        x = n * 800\n        y = int(n / 15) * 200\n        print x - y\n\nif __name__ == \"__main__\":\n    main(sys.argv)"}
{"label": 39, "index": 5047, "code": "n = input()\nn = int(n)\n\na = n // 15\nres = n * 800 - a * 200\nprint(res)"}
{"label": 39, "index": 5048, "code": "def solve():\n    N=int(input())\n    print((N//15)*(800*15-200)+(N%15)*800)\n\nif __name__ == \"__main__\":\n    solve()"}
{"label": 39, "index": 5049, "code": "n = int(input())\nprint(n*800-200*(n//15))\n"}
{"label": 39, "index": 5050, "code": "n = input()\nans = n*800-200*(n/15)\nprint ans\n"}
{"label": 39, "index": 5051, "code": "# coding: utf-8\ndef getLnInputs():\n    return input().split()\n\n\ndef getLnIntInputs():\n    return list(map(int, getLnInputs()))\n\n\ndef main():\n    N = getLnIntInputs()[0]\n    print(800 * N - 200 * (N // 15))\n    return\n\n\nmain()\n"}
{"label": 39, "index": 5052, "code": "n = int(input())\nprint(800 *n - ( 200 * int(n / 15)))"}
{"label": 39, "index": 5053, "code": "N = int(input())\nprint(int(800 * N - N // 15 * 200))\n"}
{"label": 39, "index": 5054, "code": "n = int(input())\n\nprint(n*800-n//15*200)"}
{"label": 39, "index": 5055, "code": "N = input()\nx, y = 0, 0\nfor i in range(1,N+1):\n    x += 800\n    if i%15 == 0 :\n        y += 200\nprint x-y"}
{"label": 39, "index": 5056, "code": "from sys import stdin\nn = int(stdin.readline())\nprint n*800 - (n/15)*200"}
{"label": 39, "index": 5057, "code": "# -*- coding: utf-8 -*-\nn = int(input())\nprint(n * 800 - (200 * int(n / 15)))"}
{"label": 39, "index": 5058, "code": "n = int(input())\nprint(n * 800 - n // 15 * 200)\n"}
{"label": 39, "index": 5059, "code": "from collections import defaultdict\n\n\ndef main():\n    N = int(input())\n    print(800 * N - (N // 15) * 200)\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 39, "index": 5060, "code": "N = int(input())\nprint(N*800 - (N//15)*200)\n"}
{"label": 39, "index": 5061, "code": "N = int(input())\n\nprint(800 * N - N // 15 * 200)"}
{"label": 39, "index": 5062, "code": "N = int(input())\nx = 800 * N\ny = (N//15)*200\nprint(x-y)"}
{"label": 39, "index": 5063, "code": "n = input()\nx = 800*n\ny = 200*(n/15)\nprint x-y"}
{"label": 39, "index": 5064, "code": "# coding: utf-8\n\nN = int(input())\nprint(800 * N - 200 * (N // 15))"}
{"label": 39, "index": 5065, "code": "n = int(input())\nx = 800*n\ny = int(n/15)*200\nprint(x-y)\n\n"}
{"label": 39, "index": 5066, "code": "n = int(input())\nprint(800*n -(n//15)*200)"}
{"label": 39, "index": 5067, "code": "n = int(input())\nprint(800*n - (n//15)*200)\n"}
{"label": 39, "index": 5068, "code": "N = int(raw_input())\nprint 800*N - (N/15)*200"}
{"label": 39, "index": 5069, "code": "N = int(input())\n\nx = 800*N\ny = (N//15)*200\n\nprint(x-y)"}
{"label": 40, "index": 5070, "code": "import math\nN=int(input())\nprint(math.factorial(N)%(10**9+7))"}
{"label": 40, "index": 5071, "code": "n = int(input())\nM = 10**9 + 7\n\nimport functools\n\nresult = 1\nfor i in range(1, n + 1):\n   result *= i\n   if result >= M:\n       result %= M\nprint(result)"}
{"label": 40, "index": 5072, "code": "# -*- coding: utf-8 -*-\nmod = 10**9 + 7\nN = int(raw_input())\n\nans = 1\nfor i in xrange(2, N + 1):\n    ans = ans*i % mod\nprint ans\n"}
{"label": 40, "index": 5073, "code": "n = int(input())\np = 1\nfor i in range(1, n + 1):\n    p = i * p % (10 ** 9 + 7)\nprint(p)"}
{"label": 40, "index": 5074, "code": "# \u6574\u6570\u306e\u5165\u529b\nN = int(input())\n# \u8a08\u7b971\np = 1\ntemp = 10**9 + 7\n \nfor num in range(1,N+1):\n    p = p * num\n    if p > (10**9 + 7):\n        p = p % temp\n    \n# \u8a08\u7b972\nans = p % temp\n \n# \u51fa\u529b\nprint(ans)"}
{"label": 40, "index": 5075, "code": "# -*- coding: utf-8 -*-\n\nimport sys\nimport os\n\n\nN = int(input())\n\nD = 10**9 + 7\n\npower = 1\nfor i in range(1, N+1):\n    power *= i\n    power = power % D\nprint(power)"}
{"label": 40, "index": 5076, "code": "n = int(input())\np = 1\nfor i in range(1,n+1):\n\tp = (p * i) % (10**9 + 7)\nprint(p)"}
{"label": 40, "index": 5077, "code": "N = int(input())\n\ns = 1\nfor i in range(1, N+1):\n    s *= i\n    s %= 10**9 + 7\nprint(s)\n"}
{"label": 40, "index": 5078, "code": "n = int(raw_input())\nc = 10**9 + 7\nm = 1\nfor x in xrange(1, n+1):\n    m=m*x\n    if (m > c) : m = m % c\n\nprint m\n"}
{"label": 40, "index": 5079, "code": "import math\n\nN=int(input())\n\npwr=math.factorial(N)\n\nprint(pwr%(10**9 + 7))\n"}
{"label": 40, "index": 5080, "code": "n = int(input()) \ns = 1\nfor i in range(n):\n    s = (s*(i+1))%((10**9)+7)\nprint(s%((10**9)+7))"}
{"label": 40, "index": 5081, "code": "N=int(input())\nans=1\nfor i in range(1,N+1):\n ans*=i\n ans%=10**9+7\nprint (ans)"}
{"label": 40, "index": 5082, "code": "N = int(input())\nans = 1\nmod = 10**9 + 7\nfor i in range(N):\n\tans = ans*(i+1)%mod\nprint(ans)"}
{"label": 40, "index": 5083, "code": "mod = 10**9+7\nans = 1\nfor i in range(int(input())):\n    ans *= i+1\n    ans %= mod\nprint(ans)\n"}
{"label": 40, "index": 5084, "code": "n = int(raw_input())\nans = 1\nfor x in xrange(1,n+1):\n\tans*=x;\n\tans%=(10**9+7)\nprint ans%(10**9+7)"}
{"label": 40, "index": 5085, "code": "def factorialMod(n, modulus):\n    ans=1\n    if n <= modulus//2:\n        #calculate the factorial normally (right argument of range() is exclusive)\n        for i in range(1,n+1):\n            ans = (ans * i) % modulus\n    else:\n        #Fancypants method for large n\n        for i in range(n+1,modulus):\n            ans = (ans * i) % modulus\n        ans = modinv(ans, modulus)\n        ans = -1*ans + modulus\n    return ans % modulus\n\n\nprint factorialMod(input(),10**9+7)"}
{"label": 40, "index": 5086, "code": "import math\n\ndef countPower():\n    power = 1\n    N = int(input())\n    if 1<=N<=10**5:\n        power = math.factorial(N)\n    return power % (10**9 + 7)\n\nif __name__==\"__main__\":\n    print(countPower())"}
{"label": 40, "index": 5087, "code": "N = int(input())\np = 1\nbig_num = 10**9+7\nfor i in range(1,N+1):\n    p *= i \n    p %= big_num\n\nprint(p)\n"}
{"label": 40, "index": 5088, "code": "n = int(input())\nans = 1\nmod =  1000000007\n\nfor i in range(1, n+1):\n    ans = (ans * i) % mod\n\nprint(ans)\n"}
{"label": 40, "index": 5089, "code": "n = input()\n\ndef solve(num):\n    mod = int(1e9 + 7)\n    ans = 1\n    for i in range(1, num+1):\n        ans *= i\n        ans %= mod\n    return ans\n\nprint solve(n)"}
{"label": 40, "index": 5090, "code": "N = int(input())\nm = 1\nfor i in range(2,N+1):\n    m *= i\n    m %= 1000000007\nprint(m)"}
{"label": 40, "index": 5091, "code": "n = int(input())\nans = 1\nfor i in range(n):\n    ans = ans * (i + 1) % 1000000007\nprint (ans)\n"}
{"label": 40, "index": 5092, "code": "# -*- coding: utf-8 -*-\nfrom math import factorial\nprint(factorial(int(input()))%(10**9+7))"}
{"label": 40, "index": 5093, "code": "N = int(input())\npower = 1\nfor i in range(N):\n    power = (i+1) * (power % 1000000007)\n\nprint(power%1000000007)\n"}
{"label": 40, "index": 5094, "code": "N = int(input())\n\ntotal = 1\n\nfor i in range(N):\n\ttotal = (total * (i+1)) % (10**9 + 7)\n\nprint (total)"}
{"label": 40, "index": 5095, "code": "from sys import stdin\nfrom math import factorial\n\nn = int(stdin.readline())\n\nprint(factorial(n) % 1000000007)\n"}
{"label": 40, "index": 5096, "code": "n = int(input())\n\nresult = 1\n\nfor i in range(1, n+1):\n    result = (i * result) % (10 ** 9 + 7)\n\nprint(result)"}
{"label": 40, "index": 5097, "code": "N = int(input())\nC = 10**9+7\nans = 1\nfor i in range(1, N + 1):\n    ans *= i\n    ans %= C\nprint(ans)"}
{"label": 40, "index": 5098, "code": "n = int(input())\n\n\npower = 1\n\nfor i in range(1,n+1):\n    power *= i\n    if power > (10**9+7):\n        power %= (10**9+7)\n\nprint(power)\n"}
{"label": 40, "index": 5099, "code": "mod=10**9+7\nans=1\nfor i in xrange(int(raw_input())):\n    ans*=i+1\n    ans%=mod\nprint ans"}
{"label": 40, "index": 5100, "code": "N = int(input())\nP = 10**9 + 7\n\npower = 1\n\nfor i in range(1,N+1):\n power = (i * power % P)\n\nprint(power)"}
{"label": 40, "index": 5101, "code": "n = int(raw_input())\np = 1\nfor i in range(1,n+1):\n    p *= i\n    p = p % (10**9 + 7)\nprint p\n"}
{"label": 40, "index": 5102, "code": "MOD = 10**9 + 7\nn = int(input())\n\np = 1\nfor i in range(2, n + 1):\n    p = p * i % MOD\nprint(p)\n"}
{"label": 40, "index": 5103, "code": "n = int(input())\nans = 1\n\nfor i in range(1, n+1):\n    ans *= i\n    if ans > 10 ** 9 + 7:\n        ans %= 10 ** 9 + 7\n\nprint(ans)\n"}
{"label": 40, "index": 5104, "code": "import math\nn = int(input())\nval = math.factorial(n)\nprint (val % (10**9 + 7))\n"}
{"label": 40, "index": 5105, "code": "N = int(input())\npower = 1\n\nfor i in range(N):\n\tpower = power * (i + 1) % (10**9 + 7)\n\nprint(power)"}
{"label": 40, "index": 5106, "code": "N = input()\nans = 1\nfor i in range(1, N + 1):\n\tans = (ans * i) % (1e9 + 7)\nprint int(ans)"}
{"label": 40, "index": 5107, "code": "N = int(input())\nM = 1000000007\nn=[1]*(N+1)\nfor i in range(1,N+1):\n    n[i] = (n[i-1]*i)%M\n\nprint(n[N])\n"}
{"label": 40, "index": 5108, "code": "MOD = 1000000007\nN = int(input())\nans = 1\nfor i in range(1, N+1):\n    ans *= i\n    ans %= MOD\nprint(ans)"}
{"label": 40, "index": 5109, "code": "import math\nN = int(input())\npower = math.factorial(N)\nprint(power%(10**9+7))"}
{"label": 40, "index": 5110, "code": "def calc(n):\n    ret = 1\n    for i in range(1,n+1):\n        ret *= i\n        ret = ret % (10**9+7)\n    return ret\n\nprint(calc(int(input()))%(10**9+7))\n"}
{"label": 40, "index": 5111, "code": "n = int(input())\npower = 1\n\nfor i in range(1, n+1):\n    power = power*i%(1000000000+7)\n\n\n\nprint(power)"}
{"label": 40, "index": 5112, "code": "mod = 1000000000 + 7\n\nn = input()\n\nans = 1\n\nfor i in range(1, n + 1):\n        ans = (ans * i) % mod\n\nprint ans"}
{"label": 40, "index": 5113, "code": "def imp_kai(n):\n    ac = 1\n    for i in range(n):\n        ac *= i + 1\n        ac = ac % (1e9 + 7)\n    return ac % (1e9 + 7)\n\nn = int(input())\nprint(int(imp_kai(n)))\n"}
{"label": 40, "index": 5114, "code": "n = int(input())\n\n\nmod_num = pow(10, 9) + 7\n\n\ndef main(n):\n    pre = 1\n    for i in range(2, n + 1):\n        pre = pre * i % mod_num\n    return pre\n\n\nans = main(n)\nprint(ans)\n"}
{"label": 40, "index": 5115, "code": "MOD = 1000000007\n\nn = int(input())\n\nans = 1\n\nfor i in range(2, n+1):\n    ans = (ans * i) % MOD\n\nprint(ans)"}
{"label": 40, "index": 5116, "code": "# -*- coding:utf-8 -*-\nimport math\nN = int(input())\nprint(math.factorial(N)%((10**9)+7))"}
{"label": 40, "index": 5117, "code": "n=int(input())\na=1\nfor i in range(1,n+1):\n    a*=i\n    a %= (10**9+7)\nprint(a)"}
{"label": 40, "index": 5118, "code": "# -*- coding: utf-8 -*-\nimport sys\nimport math\n# sys.setrecursionlimit(10000)\n\n\ndef main():\n    # \u5165\u529b\u51e6\u7406\n    N = int(input())\n\n    # \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u672c\u4f53\n    y = math.factorial(N) % (10**9+7)\n\n    # \u51fa\u529b\n    print(y)\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 40, "index": 5119, "code": "#coding: UTF-8\nimport math\nN=int(input())\nout=math.factorial(N)\nprint(out%(10**9+7))"}
{"label": 40, "index": 5120, "code": "N = int(input())\nans = 1\nfor i in range(1,N+1):\n  ans = ans * i % (10**9 + 7)\n\nprint(ans) "}
{"label": 40, "index": 5121, "code": "import math\nn = int(input())\npower = math.factorial(n)\nprint(power % (10**9 + 7))"}
{"label": 40, "index": 5122, "code": "\nN = int(input())\np = 1\n\nfor i in range(1, N+1):\n    p *= i\n    p = p % (10**9+7)\n\nprint(p)\n"}
{"label": 40, "index": 5123, "code": "N = int(input())\nAns = 1\nfor i in range(1,N+1):\n    Ans = (Ans*i)%1000000007\n\nprint(Ans)"}
{"label": 40, "index": 5124, "code": "#!/usr/bin/env python3\nn = int(input())\npower = 1\nfor i in range(1, n+1):\n    power *= i\n    power %= 10 ** 9 + 7\nprint(power)\n"}
{"label": 40, "index": 5125, "code": "import math\n\n\ndef main():\n    n = int(input())\n    print(math.factorial(n)%(10**9+7))\n\n\nif __name__ == \"__main__\":\n    main()"}
{"label": 40, "index": 5126, "code": "XD = 1\nfor i in range(input()):\n    XD = (XD * -~i) % (10**9+7)\nprint XD\n"}
{"label": 40, "index": 5127, "code": "n=int(input())\np=1\nfor i in range(1, n+1):\n    p = (p*i)%(10**9+7)\nprint(p)\n"}
{"label": 40, "index": 5128, "code": "import math\n\nN = int(input())\nC = 10**9 + 7\n\nprint(math.factorial(N) % C)"}
{"label": 40, "index": 5129, "code": "import sys\nimport math\n\nn = int(sys.stdin.readline())\n\npower = math.factorial(n)\n\nprint(power % (int(1e+9) + 7))\n\n"}
{"label": 40, "index": 5130, "code": "n = int(input())\nans = 1\n\nfor i in range(1, n+1):\n    ans = ans * i % (10 ** 9 + 7)\n\nprint(ans)\n"}
{"label": 40, "index": 5131, "code": "from math import factorial\n\nN = int(input())\nans = factorial(N) % (10**9 + 7)\nprint(ans)"}
{"label": 40, "index": 5132, "code": "import math\nprint(math.factorial(int(input()))%(10**9+7))"}
{"label": 40, "index": 5133, "code": "n = int(input())\np = 1\nfor i in range(1, n+1):\n    p = (p*i) % (10**9 + 7)\n\nprint(p)\n"}
{"label": 40, "index": 5134, "code": "N = int(input())\nans = 1\nMOD = int(1e9 + 7)\nfor i in range(1, N + 1):\n    ans *= i\n    ans %= MOD\nprint(ans)\n"}
{"label": 40, "index": 5135, "code": "n=int(input())\nans=1\nfor i in range(n):\n    ans*=(i+1)\n    ans%=1000000007\nprint(ans)\n"}
{"label": 40, "index": 5136, "code": "n = int(input())\n\nans = 1\nfor i in range(1, n+1):\n    ans *= i\n    ans %= (10 ** 9) + 7\n    \nprint(ans)\n\n"}
{"label": 40, "index": 5137, "code": "print reduce(lambda a,x:a*(x+1)%(10**9+7),range(input()),1)"}
{"label": 40, "index": 5138, "code": "#!/usr/bin/env python3\nif __name__ == '__main__':\n  N = int(input())\n  ans = 1\n  for i in range(1,N+1):\n    ans *= i\n    ans %= 1000000007\n  print(ans)\n"}
{"label": 40, "index": 5139, "code": "N = int(input())\n\nans = 1\nmod = 10**9 + 7\n\nfor i in range(1, N + 1):\n    ans = (ans * i) % mod\n\nprint(ans)"}
{"label": 40, "index": 5140, "code": "n = int(input())\ndiv = 10 ** 9 + 7\n\nans = 1\nfor i in range(2, n + 1):\n    ans *= i\n    ans %= div\n\nprint(ans)\n"}
{"label": 40, "index": 5141, "code": "from sys import stdin\nans = 1\nmod = 10**9 + 7\nn = int(stdin.readline())\nfor i in xrange(1,n+1):\n ans = (ans*i)%mod\nprint ans"}
{"label": 40, "index": 5142, "code": "cn = 10**9+7\ndef f(x, n):\n    for i in range(n):\n        x = (x*n)%cn\n        n-=1\n    return x\n\nn = int(input())\npw = f(1, n)\nprint(pw)\n\n"}
{"label": 40, "index": 5143, "code": "#!/usr/bin/python\n\nimport math\nimport sys\n\ndef main(argv):\n    for line in sys.stdin:\n        n = int(line)\n\n        answer = 737935835\n        if n < 50000:\n            answer = math.factorial(n)\n        elif n > 50000:\n            for i in xrange(50001, n + 1):\n                answer = (answer * i) % (10**9 + 7)\n        print answer % (10**9 + 7)\n\nif __name__ == \"__main__\":\n    main(sys.argv)"}
{"label": 40, "index": 5144, "code": "n = input()\nn = int(n)\nM = 10 ** 9 + 7\n\np = 1\nfor i in range(n):\n    p *= i + 1\n    p %= M\nprint(p)"}
{"label": 40, "index": 5145, "code": "from operator import mul\nprint reduce(lambda a,b:a*b%(10**9+7),range(1,int(raw_input())+1),1)"}
{"label": 40, "index": 5146, "code": "import math\nn = input()\n\np=math.factorial(int(n))\nprint(int(p%(10**9+7)))\n"}
{"label": 40, "index": 5147, "code": "MOD = 10**9+7\nn = int(input())\nans = 1\nfor i in range(2, n+1):\n    ans *= i\n    ans %= MOD\n    \nprint(ans)"}
{"label": 40, "index": 5148, "code": "from collections import defaultdict\n\n\ndef main():\n    N = int(input())\n    ans = 1\n    for i in range(1, N + 1):\n        ans *= i\n        ans %= 10 ** 9 + 7\n    print(ans % (10 ** 9 + 7))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 40, "index": 5149, "code": "N = int(input())\n\na = 1\nfor i in range(1, N + 1):\n    a *= i\n    a %= 1000000007\n\nprint(a)\n"}
{"label": 40, "index": 5150, "code": "N=int(input())\nans=1\nfor i in range(1,N+1):\n\tans*=i\n\tif ans>=(10**9+7):\n\t\tans%=(10**9+7)\nprint(ans)"}
{"label": 40, "index": 5151, "code": "def solve(n):\n    ans = 1 \n    for i in range(n):\n        ans = (i+1)*ans%(10**9+7)\n        \n            \n    return ans\n\nN = int(input())\nprint(solve(N))"}
{"label": 40, "index": 5152, "code": "import sys\nfrom math import factorial\n\nMOD = 10**9 + 7\n\ndef solve():\n    N = int(input())\n    ans = factorial(N) % MOD\n    print(ans)\n    \ndef debug(x, table):\n    for name, val in table.items():\n        if x is val:\n            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)\n            return None\n\n\nif __name__ == '__main__':\n    solve()"}
{"label": 40, "index": 5153, "code": "# -*- coding: utf-8 -*-\nINF=10**10\n\ndef main():\n    \n    lim=10**9+7\n    n=int(input())\n    ans=1\n    for i in range(1,n+1):\n        ans*=i\n        if ans>lim:\n            ans%=lim\n    print(ans)\n    \n    \nif __name__==\"__main__\":\n    main()\n    "}
{"label": 40, "index": 5154, "code": "N=int(input())\n\nP=1\n\nfor i in range(1,N+1):\n    P=P*i\n    P=P%(10**9+7)\n\nprint(P)"}
{"label": 40, "index": 5155, "code": "n = int(input())\nans = 1\n\nwhile n>1:\n    ans =  ans * n % (10**9 + 7)\n    n -= 1\nprint(ans)"}
{"label": 40, "index": 5156, "code": "N=int(input())\ninf=10**9+7\n\ntmp=1\nfor i in range(1,N+1):\n    tmp = (tmp*i)%inf\nprint(tmp)"}
{"label": 40, "index": 5157, "code": "N =int(raw_input())\nx=1\nfor i in range(1,N+1):\n    x=x*i%(10**9+7)\nprint x"}
{"label": 40, "index": 5158, "code": "N = int(input())\npower = 1\nfor i in range(1, N+1):\n    power = power * i\n    power = power % ((10 ** 9) + 7)\n\nprint(power)"}
{"label": 40, "index": 5159, "code": "# coding: utf-8\n# Here your code !\nN=int(input())\npower=1\n\nfor i in range(1,N+1):\n    power=power*i\n    while power>=10**9+7:\n        power=power%(10**9+7)\n\nprint(power)"}
{"label": 40, "index": 5160, "code": "import functools\nprint(functools.reduce(lambda x, y: x * y % (10**9+7), range(1,1+int(input()))))\n"}
{"label": 40, "index": 5161, "code": "N = int(input())\n\nres = 1\nfor n in range(1, N+1):\n    res = (res * n)%(10**9+7)\nprint(res)\n"}
{"label": 40, "index": 5162, "code": "n = int(input())\n\nans = 1\n\nfor i in range(n):\n    ans *= (i + 1)\n    ans %= (1000000000 + 7)\n\nprint(ans)\n"}
{"label": 40, "index": 5163, "code": "n = int(input())\np = 1\n\nfor i in range(n):\n    p = p*(i+1)\n    p = p % (1000000000+7)\nprint (p)\n"}
{"label": 40, "index": 5164, "code": "def main():\n    N = int(input())\n    ans = 1\n    for i in range(1, N + 1):\n       ans = ans * i % 1000000007\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 40, "index": 5165, "code": "n = int(input())\nans = 1\nfor i in range(1, n + 1):\n    ans = (ans * i) % (10 ** 9 + 7)\nprint(ans)\n"}
{"label": 40, "index": 5166, "code": "n = int(raw_input())\n\n\nN = []\nfor i in range(1,n+1):\n\tN.append(i)\n\nN2 = 1\nfor N1 in N:\n\tN2 = N2 * N1%(10**9+7)\n\nprint N2\n"}
{"label": 40, "index": 5167, "code": "n = int(input())\nmo = 1000000007\nans = 1\nfor i in range(1, n + 1):\n    ans *= i\n    ans %= mo\nprint(ans)\n"}
{"label": 40, "index": 5168, "code": "import math \nN=int(input())\npower=math.factorial(N)\nn=int(1e+9+7)\nprint(power%n)"}
{"label": 40, "index": 5169, "code": "N = int(input())\n\nd = 10 ** 9 + 7\n\nif N <= 50000:\n    P= 1\n    for x in range(1, N+1):\n        P *= x\nelif N > 50000:\n    P = 737935835\n    for x in range(50001, N + 1):\n        P *= x\n    \nprint(P%d)"}
{"label": 40, "index": 5170, "code": "multi = 1\nN = int(raw_input())\nfor var in range(1,N + 1):\n  multi = multi * var\n  if multi > 1000000007:\n    multi = multi % 1000000007\nprint multi"}
{"label": 40, "index": 5171, "code": "n=int(raw_input())\nmod=10**9+7\nans=1\nfor i in xrange(1,n+1):\n    ans=ans*i%mod\nprint ans%mod\n"}
{"label": 40, "index": 5172, "code": "from math import factorial\nN = int(input())\nP = factorial(N)\nprint(P%(10**9+7))"}
{"label": 40, "index": 5173, "code": "N = int(input())\npower = 1\nfor i in range(1,N+1):\n    power = (power * i) % 1000000007\nprint(power)\n"}
{"label": 40, "index": 5174, "code": "n = int(input())\npower = 1\nfor i in range(1, n+1):\n    power *= i\n    power %= 1000000007\nprint(power)"}
{"label": 40, "index": 5175, "code": "N=input()\n \nr=1\nfor i in xrange(N):\n    r=r*(i+1)\n    r=r%(10**9 + 7)\n \nprint r\n"}
{"label": 40, "index": 5176, "code": "from collections import defaultdict\n\nMOD = 10 ** 9 + 7\n\n\ndef main():\n    N = int(input())\n    ans = 1\n    for i in range(1, N + 1):\n        ans = (ans * i) % MOD\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 40, "index": 5177, "code": "import math\n\nN = int(input())\n\npower = math.factorial(N)\nans = power % (10**9 + 7)\n\nprint(ans)\n"}
{"label": 40, "index": 5178, "code": "import sys\nsys.setrecursionlimit(150000)\nmod = 1000000007\nn = int(input())\n\ndef fact(n):\n    if n <= 1:\n        return 1\n    else:\n        return n * fact(n - 1) % mod\n\nprint(fact(n))\n"}
{"label": 40, "index": 5179, "code": "n = int(input())\n\n\nmod_num = pow(10, 9) + 7\n\n\ndef main(n):\n    ret = 1\n    for i in range(1, n + 1):\n        ret = ret * i % mod_num\n    return ret\n    \n\nanswer = main(n)\nprint(answer)\n"}
{"label": 40, "index": 5180, "code": "from  math import factorial\n\nn = int(input())\n\nprint(factorial(n) % (10 ** 9 + 7))\n"}
{"label": 40, "index": 5181, "code": "N = int(input().strip())\npower = 1\nMOD = 1000000007\nfor i in range(1, N+1):\n\tpower = (power * i) % MOD\n \nprint(power)"}
{"label": 40, "index": 5182, "code": "# -*- coding: utf-8 -*-\nn = int(input())\na = 1\nfor i in range(1, n + 1):\n    a *= i\n    a = a % (10 ** 9 + 7)\n\nprint(str(a))"}
{"label": 40, "index": 5183, "code": "n=input()\nn=int(n)\na=1\nfor i in range(n):\n    a=a*(i+1)\n    if a>=pow(10,9)+7:\n        a=a%(pow(10,9)+7)\nprint(a)"}
{"label": 40, "index": 5184, "code": "# -*- coding: utf-8 -*-\n\nn = int(raw_input())\n\npower = 1\nm = 10**9 + 7\n\nfor i in range(n):\n    power *= (i+1)\n    power %= m\n\nprint(power)"}
{"label": 40, "index": 5185, "code": "import sys\nN = int(raw_input())\nassert(1 <= N <= 1e5)\n\nres = 1\nmult = 1\nfor i in xrange(N):\n    res *= mult\n    res = res%(1e9 + 7)\n    mult += 1\nprint int(res)\n"}
{"label": 40, "index": 5186, "code": "N = int(raw_input())\n\nv = 10**9 + 7\n\nt = 1\nmod = []\nfor i in range(1,N+1):\n    t = t * i\n    if (t > v):\n        mod.append(t % v)\n        t = 1 #reset\nmod.append(t % v)\n\n#print mod\n\ns = 1\nfor j in range(len(mod)):\n    s = s * mod[j]\n\nans = s % v\nprint ans\n"}
{"label": 40, "index": 5187, "code": "N = int(input())\n\ndenom = 10**9+7\n\nres = 1\nfor i in range(N):\n    res = (res * (i+1)) % denom\nprint(res)"}
{"label": 40, "index": 5188, "code": "# -*- coding: utf-8 -*-\nimport math\n\nN=int(input())\np=math.factorial(N)\no = p%(7+10**9)\nprint(o)\n\n\n"}
{"label": 40, "index": 5189, "code": "import math\nprint(math.factorial(int(input())) % (10**9 + 7))\n"}
{"label": 40, "index": 5190, "code": "# coding: utf-8\n\nif __name__ == '__main__':\n    n = int(input())\n    p = 1\n    for i in range(n):  #range(10) \u306f [0,1,2,3,4,5,6,7,8,9] \u3092\u8868\u3059\n        p *= (i+1)\n        p %= int(1e9 + 7)\n    print(p)\n"}
{"label": 40, "index": 5191, "code": "N = int(raw_input())\nans = 1\nfor i in range(1, N+1):\n    ans = (ans * i) % (10**9 + 7)\nprint ans"}
{"label": 40, "index": 5192, "code": "N = input()\nans = 1\nfor i in range(1, N + 1):\n\tans = (ans * i) % (1e9 + 7)\nprint int(ans)"}
{"label": 40, "index": 5193, "code": "MOD=1000000007\n\ndef solve():\n    N=int(input())\n    ans=1\n    for i in range(N):\n        ans*=i+1\n        ans%=MOD\n    print(ans)\n\nif __name__ == \"__main__\":\n    solve()"}
{"label": 40, "index": 5194, "code": "import math\nN = int(input())\npwr = math.factorial(N)\nprint(str(pwr % 1000000007))"}
{"label": 40, "index": 5195, "code": "import math\n \nn = int(raw_input())\nmod = pow(10,9) + 7\nans = 1\nfor i in xrange(1,n+1):\n  ans = (ans*i)%mod\n \nprint ans"}
{"label": 40, "index": 5196, "code": "# -*- coding: utf-8 -*-\n# \u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u306e\u6574\u6570\u306e\u5165\u529b\ni = int(input())\n#x, y = map(int, input().split())\npower = 1\nfor i in range(1, i+1):\n    power = (power*i) %(10**9+7)\n\nprint(power)"}
{"label": 40, "index": 5197, "code": "import sys\n\nMOD = 10**9 + 7\n\ndef solve():\n    N = int(input())\n    ans = 1\n\n    for i in range(2, N + 1):\n        ans *= i\n        ans %= MOD\n\n    print(ans)\n    \ndef debug(x, table):\n    for name, val in table.items():\n        if x is val:\n            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)\n            return None\n\n\nif __name__ == '__main__':\n    solve()"}
{"label": 40, "index": 5198, "code": "#! coding:UTF-8\nN = int(input())\ndata = [0]*N\ndef tra(N):\n    data[0] = 1\n    for i in range(N-1):\n        if (i+2)*data[i] < (10**9+7):\n            data[i+1] = (i+2)*data[i]\n        else:\n            data[i+1] = (i+2)*data[i]%(10**9+7)\n    print(data[-1])\ntra(N)\n"}
{"label": 40, "index": 5199, "code": "N = int(input())\npower = 1\nfor i in range(1,N+1):\n    power = (power*i)%1000000007\nprint (power)"}
{"label": 41, "index": 5200, "code": "N, M = map(int, (input().split()))\nif 2 * N >= M:\n    c = M // 2\nelse:\n    c = N\n    M -= 2 * N\n    c += M // 4\nprint(c)"}
{"label": 41, "index": 5201, "code": "n, m = map(int, input().split())\n\nk = m // 2\nr = m % 2\nif n >= k:\n    print(k)\nelse:\n    print(n + (k-n) // 2)"}
{"label": 41, "index": 5202, "code": "N , M = [int(i) for i in input().split()]\n\nscc = 0\nif N <= (M/2):\n    scc = N\n    M -= N * 2\n    scc += M // 4\nelse:\n    scc = M // 2\n    M -= scc\n\nprint(scc)\n"}
{"label": 41, "index": 5203, "code": "s,c = map(int,input().split())\nif c/2 <= s:\n\tprint(c//2)\nelse:\n\tprint(s + (c-s*2)//4)"}
{"label": 41, "index": 5204, "code": "from collections import defaultdict\n\n\ndef main():\n    N, M = map(int, input().split())\n    a = min(N, M // 2)\n    r = M - (2 * a)\n    print(a + r // 4)\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 41, "index": 5205, "code": "s, c = input().split()\ns = int(s); c = int(c)\nif s >= c//2:\n\tprint(c//2)\nelse:\n\tprint(s+(c-s*2)//4)"}
{"label": 41, "index": 5206, "code": "s, c = map(int, input() .split()) \n    \nif s <= c // 2:\n    print(s + (c - 2 * s) // 4)\nelse:\n    print(c // 2)\n"}
{"label": 41, "index": 5207, "code": "s,c = map(int, input().split())\nif c>=s*2:\n    cleft = c-s*2\n    print(s+cleft//4)\nelse:\n    print(c//2)\n"}
{"label": 41, "index": 5208, "code": "N,M = map(int,raw_input().split())\nif N >= M/2:\n    print M/2\nelse:\n#     print M - N*2\n#     print (M - N*2)/3\n    print N + (M - N*2)/4\n#     print M - N*2\n#     print (M - N*2)/4\n#     print N,M,M-N*2,(M-N*2)/3"}
{"label": 41, "index": 5209, "code": "n,m = [int(i) for i in input().split()]\n\nif n * 2 >= m:\n    print(m // 2)\nelse:\n    m -= n * 2\n    print( n + m//4)\n"}
{"label": 41, "index": 5210, "code": "if __name__ == \"__main__\":\n    inp = [int(i) for i in input().split()]\n    N = inp[0]\n    M = inp[1]\n    if 2*N >= M:\n        print(M//2)\n    else:\n        print(N+(M-2*N)//4)"}
{"label": 41, "index": 5211, "code": "N,M=[int(i) for i in input().split()]\n\nif 2*N<=M:\n    out = N\n    M = M-2*N\n    out += M//4\nelse:\n    out = M//2\nprint(out)"}
{"label": 41, "index": 5212, "code": "N, M = [int(i) for i in input().split()]\n\nif 2 * N >= M:\n    print(M // 2)\nelse:\n    print(N + (M//2 - N)//2)\n\n"}
{"label": 41, "index": 5213, "code": "n, m = [int(i) for i in input().split()]\n\nif m > 2 * n:\n    d = m - 2 * n\n    d //= 4\n    n += d\n    m -= 2 * d\n    print(n)\nelse:\n    print(m // 2)\n"}
{"label": 41, "index": 5214, "code": "import sys\nimport math\n\nn, m = [int(x) for x in sys.stdin.readline().split()]\n\nif n >= int(m / 2):\n    print(int(m/2))\nelse:\n    num = n\n    m -= 2*n    \n    num += int(m / 4)\n    print(num)\n"}
{"label": 41, "index": 5215, "code": "N, M = map(int,input().split())\nif 2*N >= M:\n    print(int(M / 2))\nelse:\n    print(int(N + (M - 2*N) // 4))\n"}
{"label": 41, "index": 5216, "code": "# coding: utf-8\n\n\ndef main():\n    s, c = map(int, input().split())\n\n    result = s - int(c / 2)\n\n    if result < 0:\n        r = result * -2\n        r = int(r / 4)\n        print(s + r)\n    else:\n        print(s - result)\n\nif __name__ == '__main__':\n    main()"}
{"label": 41, "index": 5217, "code": "nb_s, nb_c = map(int, input().split())\n\nif nb_s*2 > nb_c:\n    print(nb_c // 2)\nelse:\n    nb_used_c = 2*nb_s\n\n    nb_rest_c = int(nb_c) - nb_used_c\n\n    print(int(nb_s) + (nb_rest_c // 4))"}
{"label": 41, "index": 5218, "code": "def main():\n    n, m = map(int, input().split())\n\n    x = m//2\n    if n <= x:\n        sumv = n + (x-n)//2\n    else:\n        sumv = x\n    print(sumv)\n    \n    \nif __name__ == \"__main__\":\n    main()"}
{"label": 41, "index": 5219, "code": "# -*- coding:utf-8 -*-\nN, M = map(int, input().split())\nif M > 0:\n    if N*2 <= M:\n        print((N+M//2)//2)\n    else:\n        print(M//2)\nelse:\n    print(0)"}
{"label": 41, "index": 5220, "code": "# -*- coding:utf-8 -*-\nn,m = map(int,input().split())\n\nc = int(m/2)\nif n-c >= 0:\n    print(c)\nelse:\n    print(int((n*2+m)/4))\n"}
{"label": 41, "index": 5221, "code": "N, M = map(int, raw_input().split())\na = N + (M - 2 * N) / 4\nb = M / 2\nprint min(a, b)\n"}
{"label": 41, "index": 5222, "code": "#coding: UTF-8\nN,M=map(int,input().split())\nc=M//2\nif N>c:\n    out=c\nelse:\n    amari=M-N*2\n    out=N+amari//4\nprint(out)"}
{"label": 41, "index": 5223, "code": "# coding:utf-8\n#\n# atcoder begginger content 55\n\ns, c = map(int, raw_input().split())\nans = 0\n\nif (2*s > c):\n\tans = int(c/2)\nelse :\n\tans = s + int((c - 2*s)/4)\n\nprint ans\n"}
{"label": 41, "index": 5224, "code": "import math\nN,M = map(int,input().split())\ncount = 0\nif N*2>M:\n    count = math.floor(M/2)\nelse:\n    temp=M-2*N\n    count = N+math.floor(temp/4)\n\nprint(count)\n    \n"}
{"label": 41, "index": 5225, "code": "n,m = list(map(int, input().split()))\n\ndef calc(n,m):\n  if n>m//2:\n    return m//2\n  else:\n    tcnt = n\n    m = m - 2*n\n    return tcnt + m//4\n\nprint(calc(n,m))\n"}
{"label": 41, "index": 5226, "code": "N,M= [int(x) for x in raw_input().split()]\nS = M - N*2\nif S > 0:\n    print str(int(S//4+N))\nelse:\n    print str(int(M//2))"}
{"label": 41, "index": 5227, "code": "N, M = [int(i) for i in input().split()]\n\n\ndef check(a):\n    b = M - 2 * a\n    if b < 0:\n        return False\n    return b // 2 + N >= a\n\nleft, right = 0, M\nwhile right - left > 1:\n    mid = (left + right) // 2\n    if check(mid):\n        left = mid\n    else:\n        right = mid\nprint(left)"}
{"label": 41, "index": 5228, "code": "N,M = map(int, input().split())\n \ntmp=M-2*N\n\nif tmp>=0:\n    print(N+int(tmp/4))\nelse:\n    print(int(M/2))\n\n"}
{"label": 41, "index": 5229, "code": "s,c = map(int, raw_input().split())\n\nif (s*2 > c):\n    r=c/2\nelse:\n    r=s\n    c=c-s*2\n    r+=c/4\nprint r\n"}
{"label": 41, "index": 5230, "code": "N, M = map(int, input().split())\nif N == 0:\n    Scc = M // 4\nelif M / N >= 2:\n    M -= N * 2\n    Scc = N + (M // 4)\nelse:\n    Scc = M // 2\n\nprint(str(Scc))"}
{"label": 41, "index": 5231, "code": "import sys\nn,m = map(int,raw_input().split())\nif n >= m:\n    print m//2\n    sys.exit(0)\nif m > n:\n    if m>=(2*n):\n        print n + ((m-(2*n))//4)\n        sys.exit(0)\n    if m < (2*n):\n        print m//2\n        sys.exit(0)\n"}
{"label": 41, "index": 5232, "code": "#!/usr/bin/env python\n\nn,m=map(int,raw_input().split())\n\nif 2*n<=m:\n    print n+(m-2*n)/4\nelse:\n    print m/2"}
{"label": 41, "index": 5233, "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nn, m = map(int, input().split())\n\nif m < n * 2:\n    print(m // 2)\nelif m == n * 2:\n    print(n)\nelse:\n    t, m = n, m - n * 2\n    t += m // 4\n    print(t)\n"}
{"label": 41, "index": 5234, "code": "n, m = map(int, input().split())\n\nif 2 * n >= m:\n    print(int(m // 2))\nelse:\n    k = n + ((m  - 2 * n) // 4)\n    print(int(k))\n"}
{"label": 41, "index": 5235, "code": "n,m=map(int,input().split())\nprint(min((m+2*n)//4,m//2))"}
{"label": 41, "index": 5236, "code": "# -*- coding: utf-8 -*-\nn = list(map(int, input().split()))\ns = n[0]\nc = n[1]\n\nans = 0\nif s * 2 < c:\n    ans = s\n    c = c - (s * 2)\nelse:\n    # c\u304c\u8db3\u308a\u306a\u3044\u5834\u5408\u3001S\u304c\u4f5c\u308c\u306a\u3044\u306e\u3067cc\u3092\u4f5c\u308c\u308b\u6570\u304cMAX\n    ans = int(c / 2)\n    print(str(ans))\n    quit()\n# s\u306f\u4f7f\u3044\u5207\u3063\u3066\u3066c\u304c4\u500b2\u500b\u3067S+cc1\u5897\u3048\u308b\nans += int(c / 4)\nprint(str(ans))"}
{"label": 41, "index": 5237, "code": "[n,m] = map(int, raw_input().split())\na = min(n, m/2)\na += (m - 2*a) / 4\nprint a\n"}
{"label": 41, "index": 5238, "code": "l = input().split()\nn = int(l[0])\nm = int(l[1])\na = 0\n\nif n > (m // 2):\n    print( m//2 )\nelse:\n    print(n+(m-2*n) // 4)"}
{"label": 41, "index": 5239, "code": "inputs = list(map(int, input().split(' ')))\ns = inputs[0]\nc = inputs[1]\nif c - s * 2 <= 0:\n    scc = int(c / 2)\nelse:\n    scc = s\n    t = c - scc * 2\n    scc += int(t / 4)\n\nprint(scc)"}
{"label": 41, "index": 5240, "code": "import sys\n\ndef makePuzzle():\n    count_Scc = 0\n    tmp = sys.stdin.readlines()\n    num_s, num_c = tmp[0].split(\" \")\n    num_s = int(num_s)\n    num_c = int(num_c)\n\n    if num_c-num_s*2>=0:\n        count_Scc = num_s\n        num_c = num_c - num_s*2\n        count_Scc = count_Scc + num_c//4\n    else:\n        count_Scc = num_c//2\n\n    return count_Scc\n\nif __name__==\"__main__\":\n    print(makePuzzle())"}
{"label": 41, "index": 5241, "code": "s_num, c_num = map(int, input().split())\n\nans = 0\n\nif s_num * 2 >= c_num:\n    ans = min(s_num, c_num // 2)\nelse:\n    ans += s_num\n    c_num -= s_num * 2\n    ans += c_num // 4\n\nprint(ans)\n"}
{"label": 41, "index": 5242, "code": "N,M=map(int,input().split())\nans=0\nif N<M:\n    ans=N+((M-(N*2))//4)\nelse:\n    ans=M//2\nprint(ans)"}
{"label": 41, "index": 5243, "code": "N, M = map(int, input().split())\n\nL = M//2\nif N >= L:\n    print(L)\nelse:\n    print((N+L)//2)\n"}
{"label": 41, "index": 5244, "code": "N,M = map(int, input().split(\" \"))\nresult = min(N, M//2)\nresult += (M-result*2)//4\nprint(result)"}
{"label": 41, "index": 5245, "code": "N, M = map(int, raw_input().split())\n\nif M < 2:\n  print 0\nelif M - 2*N < 0:\n  print int(M/2)\nelse:\n  print N + int((M - 2*N)/4)\n"}
{"label": 41, "index": 5246, "code": "def solve(N, M) :\n    if 2 * N >= M :\n        return M // 2\n    return (2 * N + M) // 4\n\n\nN, M = map(int, input().split())\nprint(solve(N, M))"}
{"label": 41, "index": 5247, "code": "S, C = [int(i) for i in input().rstrip().split()]\nrest_C = C - S * 2\nsum = 0\nif rest_C < 0:\n    print(C // 2)\nelse:\n    print(S + rest_C // 4)"}
{"label": 41, "index": 5248, "code": "# -*- coding: utf-8 -*-\nN, M = [int(n) for n in input().split()]\nscc = 0\n\nif N > M//2:\n    print(M//2)\nelse:\n    scc += N\n    M -= 2*N\n    print(scc+(M//4))"}
{"label": 41, "index": 5249, "code": "def is_possible(N, M, m):\n    if M >= 2 * m:\n        r = M - 2 * m\n        t = r // 2\n        if N + t >= m:\n            return True\n    return False\n\n\ndef solve(N, M):\n    a = 0\n    b = 10 ** 20\n    while b - a > 1:\n        m = (a + b) // 2\n        if is_possible(N, M, m):\n            a = m\n        else:\n            b = m\n    return a\n\nN, M = map(int, input().split())\nres = solve(N, M)\nprint(res)\n"}
{"label": 41, "index": 5250, "code": "s, c = map(int, input().split())\n\nif s * 2 < c:\n    ans = s + (c - 2 * s) // 4\nelse:\n    ans = c // 2\n\nprint(ans)\n"}
{"label": 41, "index": 5251, "code": "N, M = map(int,input().split())\n\nsa = M - 2*N\nx = 0\n\nif sa <0:\n    x = M//2\nelse:\n    x = N + sa//4\n\nprint(x)\n"}
{"label": 41, "index": 5252, "code": "N, M = map(int, raw_input().split())\nprint min(N, M / 2) + (M - min(N, M / 2) * 2) / 4"}
{"label": 41, "index": 5253, "code": "N,M = input().split()\ns0,c0 = int(N),int(M)\nc1 = c0 - s0*2 \nc2 = int(c1/4) if c1 >= 0 else 0 \ns = s0 if s0 < c0 else c0//2\nprint(s+c2)"}
{"label": 41, "index": 5254, "code": "# -*- coding: utf-8 -*-\n\nn,m = map(int,raw_input().split())\n\nif m - 2*n >=0:\n    s = m -2*n\n    k = int( s / 4)\n    print(n+k)\nelse:\n    print(int(m/2))\n"}
{"label": 41, "index": 5255, "code": "N, M = map(int, input().split())\n\nif M >= 2 * N:\n    M_left = M - 2 * N\n    print(N + M_left // 4)\nelse:\n    print(M // 2)"}
{"label": 41, "index": 5256, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\nimport re\nimport math\nimport collections\nimport itertools\nimport functools\n\nDEBUG = True\nDEBUG = False\n\ndef dbg(*args):\n    if DEBUG:\n        print(\"DBG: \", file=sys.stderr, end=\"\")\n        print(*args, file=sys.stderr)\n\n\ndef possible(N, M, k):\n    if N >= k:\n        return M >= 2*k\n    else:\n        M -= 2*(k-N)\n        return M >= 2*k\n\ndef main():\n    N, M = map(int, input().split())\n\n    # cc -> S \u306f\u3067\u304d\u308b\u304c S -> cc \u306f\u3067\u304d\u306a\u3044\n\n    # [lo, hi)\n    # lo \u3067\u306f\u5fc5\u305a\u53ef\u80fd\u3001hi\u3067\u306f\u5fc5\u305a\u4e0d\u53ef\u80fd\n    hi = M // 2 + 1\n    lo = M // 4\n    while hi - lo > 1:\n        mid = (hi + lo) // 2\n        if possible(N, M, mid):\n            lo = mid\n        else:\n            hi = mid\n\n    print(lo)\n\nif __name__ == \"__main__\": main()\n"}
{"label": 41, "index": 5257, "code": "from sys import stdin\n\ns, c = map(int, stdin.readline().split())\n\nif s >= c // 2:\n    print(min(s, c // 2))\nelse:\n    d = c - s * 2\n    print(s + d // 4)\n"}
{"label": 41, "index": 5258, "code": "# -*- coding:utf-8 -*-\n\n\ndef main():\n    n, m = map(int, input().split())\n    c_num = n * 2\n\n    if m - c_num < 0:\n        result = m / 2\n    else:\n        result = n + ((m - c_num) / 4)\n    print(int(result))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 41, "index": 5259, "code": "s, c = map(int, input().split())\n\nscc = 0\n\nif s >= c//2:\n    scc = c//2\nelse:\n    scc += s\n    c -= s*2\n    scc += c//4\n\nprint(scc)\n"}
{"label": 41, "index": 5260, "code": "# -*- coding: utf-8 -*-\n\nimport sys\nimport os\n\n\nN, M = map(int, input().split())\n\nS_num = N\nc_num = M\n\n# c\u304c\u8c4a\u5bcc\u306b\u306a\u3044\u3068\u304d\nif c_num // 2 <= S_num:\n    print(c_num // 2)\nelse:\n    # \u307e\u305aS\u500b\u4f5c\u308c\u308b\n    all = S_num\n    # c\u3092\u6d88\u8cbb\u3059\u308b\n    c_num -= (2 * S_num)\n\n    # \u6b8b\u308a\u306ec\u3067\u4f55\u500b\u4f5c\u308c\u308b\u304b\n    all += c_num // 4\n\n    print(all)"}
{"label": 41, "index": 5261, "code": "N, M = map(int, input().split())\nif N >= M // 2:\n  print(M // 2)\nelse:\n  ans = N\n  M -= 2 * N\n  ans += M // 4\n  print(ans)\n"}
{"label": 41, "index": 5262, "code": "MOD = 1000000007\n\nl = input().split()\ns = int(l[0])\nc = int(l[1]) // 2\n\nif(s > c):\n    ans = c\nelse:\n    ans = s + (c-s) // 2\n\n\nprint(ans)"}
{"label": 41, "index": 5263, "code": "import math\ndef input_parser():\n    N, M=(int(str) for str in input().split())\n    return N, M\nN, M=input_parser()\nif N*2>M:\n    ans=math.floor(M/2)\nelse:\n    remc=M-N*2\n    ans=N+math.floor(remc/4)\n\ndef output_parser(output):\n    print(output)\n\noutput_parser(ans)"}
{"label": 41, "index": 5264, "code": "n,m=map(int,raw_input().split())\ns=0\nif m>=2*n:\n    s+=n\n    s += (m - 2 * n) / 4\n\nelse:\n\n    s+=m/2\n    # s+=(m-(m/2))/\nprint s\n"}
{"label": 41, "index": 5265, "code": "# \u6574\u6570\u306e\u5165\u529b\nN,M = map(int, input().split())\n# \u30d1\u30bf\u30fc\u30f31\nif M <= 2*N:\n    ans = M // 2\nelse:\n    ans = N + (M-2*N) // 4    \n\n# \u51fa\u529b\nprint(ans)"}
{"label": 41, "index": 5266, "code": "n, m = map(int, input().split())\nprint(n + (m - n * 2) // 4 if n * 2 <= m else m // 2)"}
{"label": 41, "index": 5267, "code": "s, c = [int(e) for e in input().split()]\n\n\ndef main(s, c):\n    if s >= c // 2:\n        return c // 2\n    else:\n        ret = s\n        c -= s * 2\n        ret += c // 4\n        return ret\n\n\nans = main(s, c)\nprint(ans)\n"}
{"label": 41, "index": 5268, "code": "l=raw_input().split()\nM=int(l[0])\nN=int(l[1])\n\nif N<=2*M:\n    A=N//2\nelse:\n    A=M+(N-2*M)//4\n\nprint(A)"}
{"label": 41, "index": 5269, "code": "N, M = map(int, raw_input().split())\nif N >= M/2:\n    print M/2\nelse:\n    print (N + (M - 2*N) / 4)"}
{"label": 41, "index": 5270, "code": "n, m = map(int, input().split())\nm_half = m // 2\n\nif n >= m_half:\n\ta = m_half\nelse:\n\ta = n + ((m - 2*n) // 4)\n\nprint(a)"}
{"label": 41, "index": 5271, "code": "a=input().split()\nN=int(a[0])\nM=int(a[1])\nans=0\n\nif 2*N>=M:\n\tans+=(M-M%2)/2\nelse:\n\tans+=N\n\tM-=2*N\n\tN=0\n\tans+=(M-M%4)/4\n\nprint(int(ans))"}
{"label": 41, "index": 5272, "code": "# -*- coding: utf-8 -*-\n\n\nS,C = map(int, raw_input().split())\nSCC = 0\nif(C>=2*S):\n    SCC += S\n    C = C-2*S\n    S = 0\n    SCC += C/4\nelse:\n    SCC = C/2\nprint(SCC)"}
{"label": 41, "index": 5273, "code": "ar = raw_input().split(' ')\ns = int(ar[0])\nc = int(ar[1])\n\nscc1 = min(s, int(c/2))\ns = s - scc1\nc = c - 2*scc1\n\nscc2 = int(c/4)\n\nprint scc1 + scc2"}
{"label": 41, "index": 5274, "code": "NM = raw_input().split()\ncPairs = int(NM[1]) / 2\nSCCby1S2C = min([int(NM[0]),cPairs])\nNM[0] = int(NM[0]) - SCCby1S2C\ncPairs = cPairs - SCCby1S2C\nSCCby4C = cPairs / 2\nprint SCCby1S2C + SCCby4C"}
{"label": 41, "index": 5275, "code": "N, M = [int(i) for i in input().split()]\na = min(N, M//2)\nprint((M - a * 2) // 4 + a)"}
{"label": 41, "index": 5276, "code": "S, C = map(int, raw_input().split())\nif 2*S < C:\n\tprint S + (C-2*S)/4\nelse:\n\tprint C/2"}
{"label": 41, "index": 5277, "code": "N,M=map(int,raw_input().split())\nif M<=2*N:\n    print M/2\nelse:\n    print N+(M-2*N)/4"}
{"label": 41, "index": 5278, "code": "n,m=map(int,input().split())\nprint((min(2*n,m)+m)//4)"}
{"label": 41, "index": 5279, "code": "n, m = map(int, input().split())\npi = n * 2 + m\nprint(min(pi // 4, m // 2))\n"}
{"label": 41, "index": 5280, "code": "n,m = list(map(int, input().split()))\nans = 0\nif 2 * n < m:\n    ans = n + int((m - 2*n) / 4)\nelse:\n    ans = int(m / 2)\nprint(ans)\n"}
{"label": 41, "index": 5281, "code": "def solve(n, m):\n    if 2 * n <= m: #on utilise tous les s\n        r1 = n\n    else:\n        r1 = m // 2\n    m -= 2 * r1\n\n    r2 = m // 4\n\n    res = r1 + r2\n    return res\n\nn, m = input().split()\nn = int(n)\nm = int(m)\nprint(solve(n, m))\n\n"}
{"label": 41, "index": 5282, "code": "from collections import defaultdict\n\n\ndef main():\n    N, M = map(int, input().split())\n    ans = min(N, M // 2)\n    N -= ans\n    M -= (ans * 2)\n\n    if M >= 4:\n        ans += M // 4\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 41, "index": 5283, "code": "n,m=map(int,raw_input().split())\nprint min(m/2,n+(m-2*n)/4)"}
{"label": 41, "index": 5284, "code": "s,c=map(int,input().split())\nif s >= c//2:\n    print(c//2)\nelse:\n    print(s+(c-2*s)//4)\n"}
{"label": 41, "index": 5285, "code": "nums = input().split()\n\nN = int(nums[0])\nM = int(nums[1])\n\nsum = 0\n\nif 2*N <= M:\n    sum += N\n    M -= 2*N\n    if M >= 4:\n        sum += M // 4\nelse:\n    sum += M // 2    \n\nprint(sum)"}
{"label": 41, "index": 5286, "code": "n,m = map(int,raw_input().split())\nif n*2+1>=m:\n\tprint m//2\nelse :\n\tprint n+(m-2*n)//4"}
{"label": 41, "index": 5287, "code": "n, m = map(int, input().split())\n\nif 2*n >= m:\n    print(int(m/2))\nelse:\n    print((2*n + m)//4)"}
{"label": 41, "index": 5288, "code": "N, M = [int(i) for i in input().split()]\ncount = 0\nM_dash = M // 2\nif N <= M_dash:\n    count = N + (M - N * 2) // 4\nelse:\n    count = M_dash\nprint(count)"}
{"label": 41, "index": 5289, "code": "line = raw_input()\ninputs = line.split(\" \")\nN, M = [int(i) for i in inputs]\nassert(1 <= N <= 1e12)\nassert(1 <= M <= 1e12)\nif M >= 2*N:\n    print N + (M - 2*N)/4\nelse:\n    print M/2"}
{"label": 41, "index": 5290, "code": "N, M = list(map(int, input().split(\" \")))\n\nif M < 2:\n    print(0)\nelif N >= M // 2:\n    print(M // 2)\nelse:\n    ans = N\n    M -= 2*N\n    ans += M // 4\n    print(ans)"}
{"label": 41, "index": 5291, "code": "N, M = map(int, input().split())\nif M == 0:\n    Scc = M // 4\nelif M / N >= 2:\n    M -= N * 2\n    Scc = N + (M // 4)\nelse:\n    Scc = M // 2\n\nprint(str(Scc))"}
{"label": 41, "index": 5292, "code": "S ,c  = map(int, input().split())\n# 2c\u3067S\u306b\u306a\u308b\n\nX = 0\nif c > S*2:\n    X += S\n    c -= 2*S\n    X += int(c/4)\n    print(X)\nelse:\n    print(int(c/2))"}
{"label": 41, "index": 5293, "code": "n, m = map(int, input() .split())\n\nif n >= m//2:\n\tans = m//2\nelse:\n\tans = n + (m - 2 * n) // 4\n\nprint(ans)"}
{"label": 41, "index": 5294, "code": "# -*- coding: utf-8 -*-\nimport sys\nimport math\n# sys.setrecursionlimit(10000)\n\n\ndef main():\n    # \u5165\u529b\u51e6\u7406\n    N, M = map(int, input().split())\n\n    # \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u672c\u4f53\n    if (2 * N) >= M:\n        K = int(M / 2)\n    else:\n        K = N + int((M - 2 * N) / 4)\n\n    # \u51fa\u529b\n    print(K)\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 41, "index": 5295, "code": "s_num, c_num = map(int, input().split())\n\nans = 0\n\nif s_num * 2 >= c_num:\n    ans = c_num // 2\nelse:\n    ans += s_num\n    c_num -= s_num * 2\n    ans += c_num // 4\n\nprint(ans)\n"}
{"label": 41, "index": 5296, "code": "N, M = map(int, input().split())\nprint(((2 * N + M) // 4 , M//2)[(2 * N) > M])\n"}
{"label": 41, "index": 5297, "code": "# -*- coding: utf-8 -*-\n# \u6574\u6570\u306e\u5165\u529b\ns, c = map(int, raw_input().split())\nans = 0\na = min(s,c/2)\ns -= a\nc -= a*2\nans = a + (c/4) \nprint ans"}
{"label": 41, "index": 5298, "code": "n, m = map(int, input().split())\n\nif(m >= 2*n):\n  m -= 2*n\n  q = m // 4\n  print(n + q)\nelse:\n  print(m//2)"}
{"label": 41, "index": 5299, "code": "n, m = map(int, input().split())\nprint(m//2 if n >= (m//2) else n + (m-2*n)//4)\n"}
{"label": 41, "index": 5300, "code": "#!/usr/bin/python\n\nimport sys\n\ndef main(argv):\n    for line in sys.stdin:\n        n, m = map(lambda i: int(i), line.split(' ', 2))\n\n        answer = 0\n        if m >= 2 * n:\n            answer = n + int((m - 2 * n) / 4)\n        else:\n            answer = int(m / 2)\n        print answer\n\nif __name__ == \"__main__\":\n    main(sys.argv)"}
{"label": 41, "index": 5301, "code": "s,c = map(int,input().split())\n\n#c\u304c\u8db3\u308a\u306a\u3044\u5834\u5408\nif s*2>=c:  \n    print(int(c/2))\nelse:\n    print(s+int((c-s*2)/4))"}
{"label": 41, "index": 5302, "code": "n,m=map(int,input().split());print((min(2*n,m)+m)//4)"}
{"label": 41, "index": 5303, "code": "s,c = map(int,raw_input().split())\n\nif(s < c/2):\n    s_pair = s\n    c_pair = (c - s*2)/4\nelse:\n    s_pair = c/2\n    c_pair = 0\n\nprint s_pair + c_pair\n"}
{"label": 41, "index": 5304, "code": "if __name__ == '__main__':\n    N,M = map(int, input().split())\n    if(M<=2*N):\n        ans = M // 2\n        print(ans)\n    else:\n        ans = N + (M-2*N)//4\n        print(ans)\n"}
{"label": 41, "index": 5305, "code": "s, c = map(int, input().split())\n\nif s*2 <= c:\n    add_pair = 0\n    if c-s*2 >=3:\n        add_pair = int((c-s*2)/4)\n    print(s+add_pair)\n\nelse:\n    print(int(c/2))\n"}
{"label": 41, "index": 5306, "code": "N, M = map(int, input().split())\n\nif 2 * N > M:\n    print(M//2)\nelse:\n    c = 2 * N + M\n    print(c // 4)\n"}
{"label": 41, "index": 5307, "code": "import sys\nimport numpy as np\nfrom math import *\ndef get_read_func(fileobject):\n    if fileobject == None :\n        return raw_input\n    else:\n        return fileobject.readline\n\ndef main():\n    if len(sys.argv) > 1:\n        f = open(sys.argv[1])\n    else:\n        f = None\n    read_func = get_read_func(f);\n    input_raw = read_func().strip().split()\n    [N, M] = [int(input_raw[0]), int(input_raw[1])]\n    T = M - 2 * N\n    if T < 0:\n        scc_num = int(M/2)\n    else:\n        scc_num = N + int(T/4)\n\n    print scc_num\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 41, "index": 5308, "code": "x=0\nN,M=(map(int,raw_input().split()))\nif N<M:\n    x=M-2*N\n    print (x/4+N)\n    \nelif N>=M:\n    print M/2\n\n"}
{"label": 41, "index": 5309, "code": "s, c = map(int, input().split())\n\nif s > c // 2:\n    print(c // 2)\nelse:\n    print(s + (c - s * 2) // 4)\n"}
{"label": 41, "index": 5310, "code": "N,M = [int(x) for x in raw_input().split(\" \")]\n\n\nif N < M//2:\n\tcnt = N\n\tM = M - 2*N\n\tM = M//4\n\tcnt += M\n\nelse:\n\tcnt = M//2\n\nprint cnt\n"}
{"label": 41, "index": 5311, "code": "n, m = map(int, input().split())\n\nans = min(n, m // 2)\nn -= ans\nm -= (ans * 2)\n\nans += m // 4\n\nprint(ans)"}
{"label": 41, "index": 5312, "code": "# -*- coding: utf-8 -*-\nINF=10**10\n\ndef main():\n    \n    n,m=list(map(int,input().split()))\n    \n    ans=0\n    if n>=m//2:\n        ans=m//2\n        print(ans)\n        return 0\n    \n    ans+=n #n\u4f7f\u3044\u5207\u308a\n    m-=2*n\n    ans+=m//4\n    print(ans)\n    \n    \nif __name__==\"__main__\":\n    main()\n    "}
{"label": 41, "index": 5313, "code": "s,c = map(int, raw_input().split())\n \nscc = 0\nif s*2 <= c:\n  scc = s\n  c -= s*2\nelse:\n  scc = c/2\n  c = 0\nprint  scc + c/4"}
{"label": 41, "index": 5314, "code": "n, m = map(int, input().split())\nif 2*n >= m:\n    print(int(m/2))\nelse:\n    print((2*n + m)//4)\n    "}
{"label": 41, "index": 5315, "code": "N,M=[int(x) for x in input().split()]\nif N >= M:\n    Scc = M//2\nelif N < M and (M - 2*N >=4):\n    Scc = N + (M-2*N)//4\nelse:\n    Scc = N\nprint(Scc)"}
{"label": 41, "index": 5316, "code": "n, m = map(int, input().split())\nif n >= m // 2:\n    print(min(n, m // 2))\nelse:\n    print((n * 2 + m) // 4)\n"}
{"label": 41, "index": 5317, "code": "s,c = map(int, raw_input().split())\nif s*2 <= c:\n\tprint (c-s*2)/4+s\nelse:\n\tprint c/2\n"}
{"label": 41, "index": 5318, "code": "N,M=map(int, input().split())\nif N>=M//2:\n ans=M//2\nelse:\n  ans = N\n  M -= 2 * N\n  ans += M // 4\nprint(ans)"}
{"label": 41, "index": 5319, "code": "N, M = map(int, input().split())\n\nNS = N\nNc = M\nNcc = Nc // 2\n\nif NS < Ncc:\n    # cc\u304c\u4f59\u3063\u3066\u308b\n    Nc_single = Nc - NS * 2\n    ans = NS + Nc_single // 4\nelse:\n    # S\u304c\u4f59\u3063\u3066\u308b\n    ans = Ncc\n\nprint(ans)\n"}
{"label": 41, "index": 5320, "code": "n, m = map(int, input().split())\n\nmin_n = n\nmin_m = m // 2\nans = min(min_n, min_m)\n\nif min_n < min_m:\n    m -= min_n * 2\n    ans += m // 4\n\nprint(ans)\n"}
{"label": 41, "index": 5321, "code": "s, c = map(int, input().split())\n\nif s * 2 < c:\n    ans = s + (c - 2 * s) // 4\nelse:\n    ans = c // 2\n\nprint(ans)\n"}
{"label": 41, "index": 5322, "code": "data = input().split()\nN = int(data[0])\nM = int(data[1])\n\nif(2*N > M):\n\tprint(int(M/2))\nelif(2*N == M):\n\tprint(N)\nelse:\n\tr = M - 2*N\n\tprint(N + int(r/4))\n"}
{"label": 41, "index": 5323, "code": "#! coding:UTF-8\nN,M = list(map(int,input().split(\" \")))\nresult = 0\nc_need = N * 2\nif c_need >= M:\n\tresult += M // 2\n\tprint(result)\nelse:\n\tresult += (N + (M-c_need)//4)\n\tprint(result)\n\n"}
{"label": 41, "index": 5324, "code": "N,M = map(int,input().split())\npair_C = M//2\nkekka = (N+pair_C)//2\nif kekka > pair_C:\n    kekka = pair_C\nprint(kekka)"}
{"label": 41, "index": 5325, "code": "N,M = map(int,raw_input().split())\nif(N>=M/2):\n    print M/2\nelse:\n    print N + (M - 2*N)/4"}
{"label": 41, "index": 5326, "code": "N, M = map(int, input().split(' '))\ndef sunuke_f3(n, m) :\n    if n >= m :\n        return(m//2)\n    else :\n        if 2*n < m :\n            return(n + (m-2*n)//4)\n        else :\n            return(m//2)\nprint(sunuke_f3(N, M))"}
{"label": 41, "index": 5327, "code": "def compare(a, b): # a also b are both string\n\tl = max(len(a), len(b))\n\ta_ = a.rjust(l, '0')\n\tb_ = b.rjust(l, '0')\n\treturn a_ > b_\n\ndef divide(num, den): # den is integer\n\tquo = ''; resi = 0\n\tdigit = len(num) if int(num[0]) >= den else len(num)-1\n\tfor i in range(len(num)):\n\t\ttemp = (int(num[i])+resi*10)//den\n#\t\tprint('dtemp', temp)\n\t\tresi = (int(num[i])+resi*10)%den\n#\t\tprint('dresi', resi)\n\t\tquo += str(temp)\n\treturn quo\n\ndef multi(a, n):\n\ts = ''; resi = 0\n\tfor i in range(len(a))[::-1]:\n\t\ttemp = (int(a[i])*n + resi)%10\n#\t\tprint('mltemp', temp)\n\t\tresi = (int(a[i])*n + resi)//10\n#\t\tprint('mlresi', resi)\n\t\ts = str(temp) + s\n\treturn s\n\n\ndef plus(a, b):\n\tl = max(len(a), len(b))\n\ta_ = a.rjust(l, '0')\n\tb_ = b.rjust(l, '0')\n\n\ts = ''; resi = 0\n\tfor i in range(l)[::-1]:\n\t\ttemp = (int(a_[i]) + int(b_[i]) + resi)%10\n#\t\tprint('ptemp', temp)\n\t\tresi = (int(a_[i]) + int(b_[i]) + resi)//10\n#\t\tprint('presi', resi)\n\t\ts = str(temp) + s\n\treturn s\n\n# a is higher than b\ndef minus(a, b):\n\tl = max(len(a), len(b))\n\ta_ = a.rjust(l, '0')\n\tb_ = b.rjust(l, '0')\n\n\ts = ''; bollow = 0\n\tfor i in range(l)[::-1]:\n\t\ttemp = int(a_[i]) - int(b_[i]) - bollow\n#\t\tprint('mitemp', temp)\n\t\tbollow = 0\n\t\tif temp >= 0:\n\t\t\ts = str(temp) + s\n\t\telse:\n\t\t\tbollow = 1\n\t\t\ts = str(temp + 10) + s\n\treturn s\n\n\ns, c = input().split()\nif compare(s, divide(c, 2)) or s == c:\n\tprint(int(divide(c, 2)))\nelse:\n\tprint(int(plus(s, divide(minus(c, multi(s, 2)), 4))))\n"}
{"label": 41, "index": 5328, "code": "N, M = list(map(int, input().split()))\nif(N > M // 2):\n    print(M // 2)\nelse:\n    print(N + (M - 2 * N) // 4)\n"}
{"label": 41, "index": 5329, "code": "# coding: utf-8\ndef getLnInputs():\n    return input().split()\n\n\ndef getLnIntInputs():\n    return list(map(int, getLnInputs()))\n\n\ndef main():\n    N, M = getLnIntInputs()\n    if M <= N * 2:\n        print(M // 2)\n        return\n\n    print(N + (M - N * 2) // 4)\n\n    return\n\n\nmain()\n"}
{"label": 42, "index": 5330, "code": "a,b=input().split()\nif (a=='H' and b=='H') or (a=='D' and b=='D'):\n    print('H')\nelse:\n    print('D')\n"}
{"label": 42, "index": 5331, "code": "a, b = input().split()\nprint('H' if a == b else 'D')\n"}
{"label": 42, "index": 5332, "code": "a,b = input().split()\n\nif (a == 'H' and b == 'H') or (a == 'D' and b == 'D'):\n    print('H')\nelse:\n    print('D')\n"}
{"label": 42, "index": 5333, "code": "a,b=input().split();print('HD'[a!=b])"}
{"label": 42, "index": 5334, "code": "a,b = map(str,input().split())\nif a==\"H\" and b == \"H\":\n    print(\"H\")\nelif a==\"D\" and b == \"H\":\n    print(\"D\")\nelif a==\"H\" and b == \"D\":\n    print(\"D\")\nelif a==\"D\" and b == \"D\":\n    print(\"H\")"}
{"label": 42, "index": 5335, "code": "a, b = raw_input().split()\n\nif a == b:\n    print \"H\"\nelse:\n    print \"D\"\n"}
{"label": 42, "index": 5336, "code": "a, b = map(str, input().split())\nif a == b:\n    print(\"H\")\nelse:\n    print(\"D\")"}
{"label": 42, "index": 5337, "code": "a,b = map(lambda x:  x == 'H', input().split())\nprint('H' if ~(a^b)== -1 else 'D')"}
{"label": 42, "index": 5338, "code": "def inint(): return int(input())\ndef inlint(): return list(map(int, input().split()))\ndef infloat(): return float(input())\ndef inlffloat(): return list(map(float, input().split()))\ndef inl(): return list(input())\ndef putlint(): return \"\".join(list(map(str, ans)))\n\na,b = input().split()\nif (a==\"H\" and b==\"H\") or (a==\"D\" and b==\"D\"):\n    print(\"H\")\nelse:\n    print(\"D\")"}
{"label": 42, "index": 5339, "code": "inpt = raw_input().split()\n\nif inpt[0] == 'H':\n\tprint inpt[1]\nelif inpt[0] == 'D':\n\tif inpt[1] == 'H':\n\t\tprint 'D'\n\telif inpt[1] == 'D':\n\t\tprint 'H'"}
{"label": 42, "index": 5340, "code": "a = map(str,raw_input().split())\n#a = int(raw_input())\n\nif a[0] == \"H\":\n        if a[1] == \"H\":\n                print \"H\"\n        else:\n                print \"D\"\nelse:\n        if a[1] == \"H\":\n                print \"D\"\n        else:\n                print \"H\""}
{"label": 42, "index": 5341, "code": "a,b=input().split()\nif a=='H' :\n if b=='D' :print('D')\n else:print ('H')\nelse:\n if b=='D':print('H')\n else:print('D')"}
{"label": 42, "index": 5342, "code": "chars = list(map(str, input().split()))\na = chars[0]\nb = chars[1]\n\nif (a == b):\n    print('H')\nelse:\n    print('D')\n\n"}
{"label": 42, "index": 5343, "code": "MOD=1000000007\n\ndef solve():\n    a,b=map(str,input().split())\n    if a=='H':\n        print(b)\n    else:\n        if b=='H':\n            print('D')\n        else:\n            print('H')\n\nif __name__ == \"__main__\":\n    solve()"}
{"label": 42, "index": 5344, "code": "A, B = map(str, input().split())\n\nif A == B:\n    print(\"H\")\nelif A != B:\n    print(\"D\")"}
{"label": 42, "index": 5345, "code": "def solve():\n    a, b = list(map(str, input().split(\" \")))\n\n    if a == b:\n        print(\"H\")\n    else:\n        print(\"D\")\n\n\nsolve()"}
{"label": 42, "index": 5346, "code": "n = input()\ntmp_n = n.split(\" \")\n\na = tmp_n[0]\nb = tmp_n[1]\n\nif a == \"H\":\n    if b == \"H\":\n        print(\"H\")\n    else:\n        print(\"D\")\nelse:\n    if b == \"H\":\n        print(\"D\")\n    else:\n        print(\"H\")\n"}
{"label": 42, "index": 5347, "code": "a, b = map(str, input().split(\" \"))\nif a==\"H\" and b==\"H\" or a==\"D\" and b==\"D\":\n    print(\"H\")\nelse:\n    print(\"D\")"}
{"label": 42, "index": 5348, "code": "import sys\n\na, b = (i for i in input().split(\" \"))\n\n#if a == \"H\" and b == \"H\" or a == \"D\" and b = \"D\":\nif a ==  b:\n\tprint(\"H\")\nelse:\n\tprint(\"D\")"}
{"label": 42, "index": 5349, "code": "a, b = raw_input().strip().split(\" \")\n\na = 1 if (a == \"H\") else -1\nb = 1 if (b == \"H\") else -1\nprint \"H\" if (a * b == 1) else \"D\""}
{"label": 42, "index": 5350, "code": "inputs = input().split()\na = inputs[0]\nb = inputs[1]\nif a == \"H\":\n    if b == \"H\":\n        print(\"H\")\n    else :\n        print(\"D\")\nelse :\n    if b == \"H\":\n        print(\"D\")\n    else :\n        print(\"H\")"}
{"label": 42, "index": 5351, "code": "\na = input().split()\nif(a[0] == 'H'):\n    if(a[1] == 'H'):\n        print(\"H\")\n    if(a[1] == 'D'):\n        print(\"D\")\nif(a[0] == 'D'):\n    if(a[1] == 'H'):\n        print(\"D\")\n    if(a[1] == 'D'):\n        print('H')"}
{"label": 42, "index": 5352, "code": "# -*- coding: utf-8 -*-\n\natDeer, topDeer = raw_input().split()\n\nif atDeer == \"D\":\n    if topDeer == \"H\":\n        topDeer = \"D\"\n    else:\n        topDeer = \"H\"\n\nprint(topDeer)"}
{"label": 42, "index": 5353, "code": "print(['D','H'][len(set(input().split()))==1])"}
{"label": 42, "index": 5354, "code": "a, b = raw_input().split()\n\nif a == \"H\":\n    print b\nelse:\n    if b == \"H\":\n        print \"D\"\n    else:\n        print \"H\""}
{"label": 42, "index": 5355, "code": "def main():\n    a, b = input().split()\n    if a == \"H\":\n        print(b)\n    else:\n        print(\"H\" if b == \"D\" else \"D\")\n\n\nif __name__ == \"__main__\":\n    main()\n"}
{"label": 42, "index": 5356, "code": "a, b = input() .rstrip() .split(\" \")\nif a == b:\n    print(\"H\")\nelse:\n    print(\"D\")"}
{"label": 42, "index": 5357, "code": "a,b = map(str,input().split())\nif a is 'H':\n    print(b)\nelse:\n    if b is'H':\n        print('D')\n    else:\n        print('H')"}
{"label": 42, "index": 5358, "code": "a,b = input().split(\" \")\nif a == \"H\":\n\tprint(b)\nelse:\n\tif b == \"H\":\n\t\tprint(\"D\")\n\telse:\n\t\tprint(\"H\")\n\n"}
{"label": 42, "index": 5359, "code": "a,b=map(str,input().split())\nprint('H'if a==b else 'D ')"}
{"label": 42, "index": 5360, "code": "lst = input().split(\" \")\nA =lst[0]\nB =lst[1]\nif A == \"H\" and B == \"H\":\n\tprint(\"H\")\nelif A == \"D\" and B == \"H\":\t\n\tprint(\"D\")\nelif A == \"D\" and B == \"D\":\t\t\n\tprint(\"H\")\nelif A == \"H\" and B == \"D\":\t\t\n\tprint(\"D\")\t"}
{"label": 42, "index": 5361, "code": "a,b = map(lambda x: x == 'H',input().split())\nprint('H') if not(a ^ b) else print('D')"}
{"label": 42, "index": 5362, "code": "a, b = input().split()\nprint('H' if a == b else 'D')"}
{"label": 42, "index": 5363, "code": "l = raw_input().split()\nif l[0] == l[1]:\n    print 'H'\nelse:\n    print 'D'\n"}
{"label": 42, "index": 5364, "code": "a = input().split()\n\nif(a[0] == \"H\"):\n  if(a[1] == \"H\"):\n    print(\"H\")\n  else:\n    print(\"D\")\nelse:\n  if(a[1] == \"H\"):\n    print(\"D\")\n  else:\n    print(\"H\")"}
{"label": 42, "index": 5365, "code": "lines = input().split()\na = lines[0]\nb = lines[1]\nif a == \"H\" and b == \"H\":\n    print(\"H\") \nelif a == \"H\" and b == \"D\":\n    print(\"D\")\nelif a == \"D\" and b == \"H\":\n    print(\"D\")\nelse:\n    print(\"H\")"}
{"label": 42, "index": 5366, "code": "a,b=raw_input().split()\nif (a=='H' and b=='H') or (a=='D' and b=='D'):\n    print 'H'\nelse:\n    print 'D'"}
{"label": 42, "index": 5367, "code": "a, b = input().split()\nif (a == \"H\") :\n   if ((b == \"H\") or (b == \"D\")):\n      print(b)\nif (a == \"D\") :\n   if (b == \"H\"):\n      print (\"D\")\n   if (b == \"D\"):\n      print (\"H\")\n"}
{"label": 42, "index": 5368, "code": "inp = raw_input().split()\n\nif inp[0] == 'H': print 'H' if inp[1] == 'H' else 'D'\nelse: print 'H' if inp[1] == 'D' else 'D'"}
{"label": 42, "index": 5369, "code": "a,b=input().split()\n\nif a=='H' and b=='H':\n    print(\"H\")\n\nelif a=='H' and b==\"D\":\n    print(\"D\")\n\nelif a=='D' and b=='H':\n    print(\"D\")\n\nelse:\n    print(\"H\")"}
{"label": 42, "index": 5370, "code": "a, b = map(ord, input().split())\nif a^b:\n    print('D')\nelse:\n    print('H')\n"}
{"label": 42, "index": 5371, "code": "# -*- coding: utf-8 -*- \n\na,b = input().split()\nif a == \"H\":\n\tc = 1\nelse:\n\tc = -1\n\nif b == \"H\":\n\td = 1\nelse:\n\td = -1\nif c * d == 1:\n\tprint(\"H\")\nelse:\n\tprint(\"D\")"}
{"label": 42, "index": 5372, "code": "key = tuple(input().split())\ntable = {(\"H\", \"H\"): \"H\", (\"H\", \"D\"): \"D\",\n         (\"D\", \"H\"): \"D\", (\"D\", \"D\"): \"H\"}\nprint(table[key])\n"}
{"label": 42, "index": 5373, "code": "a, b = map(str, input().split())\nif a == 'H':\n    ac = 1\nelse:\n    ac = -1\nif b == 'H':\n    tcd = 1\nelse:\n    tcd = -1\n\nif ac * tcd > 0:\n    print ('H')\nelse:\n    print ('D')\n"}
{"label": 42, "index": 5374, "code": "# -*- coding: utf-8 -*-\n\na,b = raw_input().split()\n\nif(a=='H'):\n    if(b=='H'):\n        print('H')\n    else:\n        print('D')\nelif(a=='D'):\n    if(b=='H'):\n        print('D')\n    else:\n        print('H')"}
{"label": 42, "index": 5375, "code": "# -*- coding: utf-8 -*-\n\nimport sys\nimport os\n\n\na, b = input().split()\n\nif a == 'H':\n    print(b)\nelse:\n    if b == 'H':\n        print('D')\n    else:\n        print('H')"}
{"label": 42, "index": 5376, "code": "a, b = input().split()\n\nprint('H' if a == b else 'D')\n"}
{"label": 42, "index": 5377, "code": "from collections import defaultdict\n\n\ndef main():\n    a, b = input().split()\n    if a == \"H\" and b == \"H\":\n        print(\"H\")\n    elif a == \"D\" and b == \"D\":\n        print(\"H\")\n    else:\n        print(\"D\")\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 42, "index": 5378, "code": "a, b = map(str, input().split())\n\nif a == \"H\":\n    if b == \"H\":\n        print(\"H\")\n    else :\n        print(\"D\")\nelif a == \"D\":\n    if b == \"H\":\n        print(\"D\")\n    else :\n        print(\"H\")"}
{"label": 42, "index": 5379, "code": "# -*- coding: utf-8 -*-\ndic = {\"H\":1, \"D\":-1}\na, b = raw_input().split()\nprint \"H\" if dic[a]*dic[b] > 0 else \"D\""}
{"label": 42, "index": 5380, "code": "a, b = map(str, input().split())\nif a == \"H\":\n    print(b)\nelse:\n    if b == \"H\":\n        print(\"D\")\n    else:\n        print(\"H\")\n"}
{"label": 42, "index": 5381, "code": "x = raw_input()\nif (x == \"H H\" or x == \"D D\"):\n  print \"H\"\nelse:\n  print \"D\""}
{"label": 42, "index": 5382, "code": "a,b=map(str, input().split())\nif a==b:\n  print(\"H\")\nelse:\n  print(\"D\")"}
{"label": 42, "index": 5383, "code": "a, b = list(map(str, input().split()))\nhd = True if a == \"H\" else False\nif hd: print(b)\nelse:\n    print(\"H\") if b == \"D\" else print(\"D\")\n"}
{"label": 42, "index": 5384, "code": "a,b=map(str,input().split())\nif (a==b):\n print ('H')\nelse:\n print ('D')"}
{"label": 42, "index": 5385, "code": "data = input().split()\n\nif data[0] == 'D' :\n    if data[1] == 'D' :\n        data[1] = 'H'\n    else :\n        data[1] = 'D'\nprint(data[1])"}
{"label": 42, "index": 5386, "code": "a, b = input().split()\nprint('H' if a == b else 'D')"}
{"label": 42, "index": 5387, "code": "a, b = input().split()\n\nif a == 'H':\n    # shoujiki\n    print(b)\nelse:\n    if b == 'H':\n        print('D')\n    else:\n        print('H')"}
{"label": 42, "index": 5388, "code": "a, b = raw_input().split()\n\nif (a == \"H\" and b == \"H\") or (a == \"D\" and b == \"D\"):\n    print \"H\"\nelse:\n    print \"D\"\n"}
{"label": 42, "index": 5389, "code": "# -*- coding: utf-8 -*-\n\na, b = map(str, raw_input().split())\nresult = ''\nif a == 'H':\n    if b== 'H':\n       \tresult = 'H'\n    else:\n\tresult = 'D'\nelse:\n    if b=='H':\n        result='D'\n    else:\n\tresult='H'\n\n# \u51fa\u529b\nprint result\n"}
{"label": 42, "index": 5390, "code": "l = input().split()\nif(l[0] == 'H'):\n    print(l[1])\nelif(l[0] == 'D'):\n    if(l[1] == 'H'):\n        print(\"D\")\n    elif(l[1] == 'D'):\n        print(\"H\")\n"}
{"label": 42, "index": 5391, "code": "def main():\n    a, b = input().split()\n\n    if (a == 'H' and b == 'H') or (a == 'D' and b == 'D'): print('H')\n    else: print('D')\n\n\nif __name__ == \"__main__\":\n    main()"}
{"label": 42, "index": 5392, "code": "line = input()\nhonest = line.split(\" \")\na = honest[0]\nb = honest[1]\nif a == \"H\":\n    print(b)\nelse:\n    if b == \"H\":\n        print(\"D\")\n    else:\n        print(\"H\")"}
{"label": 42, "index": 5393, "code": "a, b = input().split()\nif a == 'H':\n    print('H' if b == 'H' else 'D')\nelse:\n    print('H' if b != 'H' else 'D')"}
{"label": 42, "index": 5394, "code": "a=input()\nif a[0] !=a[2]:\n    print(\"D\")\nelse:\n    print(\"H\")"}
{"label": 42, "index": 5395, "code": "a, b = input().split()\n\nif a == b: print('H')\nelse: print('D')\n"}
{"label": 42, "index": 5396, "code": "a, b = map(str, input().split())\nif a == 'H':\n    if b == 'H':\n        print(\"H\")\n    else:\n        print(\"D\")\nelse:\n    if b == 'H':\n        print(\"D\")\n    else:\n        print(\"H\")\n    "}
{"label": 42, "index": 5397, "code": "a, b = input().split()\nif a == b:\n    print(\"H\")\nelse:\n    print(\"D\")\n"}
{"label": 42, "index": 5398, "code": "def main():\n    a, b = input().split()\n    print('H' if a == b else 'D')\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 42, "index": 5399, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\ndef LI(): return list(map(int, input().split()))\ndef LF(): return list(map(float, input().split()))\ndef II(): return int(input())\ndef LS(): return input().split()\ndef S(): return input()\n\n\n\ndef main():\n    a,b = LS()\n    if a == b:\n        return 'H'\n    return 'D'\n\nprint(main())\n"}
{"label": 42, "index": 5400, "code": "a, b = list(input().split())\nif a == b:\n    print('H')\nelse:\n    print('D')\n"}
{"label": 42, "index": 5401, "code": "ar = raw_input().split(' ')\nif ar[0] == ar[1] : ret = 'H'\nelse : ret = 'D'\nprint ret"}
{"label": 42, "index": 5402, "code": "a, b = input().split()\nif a == \"H\":\n    print(b)\nelif b == \"H\":\n    print(\"D\")\nelse:\n    print(\"H\")\n"}
{"label": 42, "index": 5403, "code": "a, b = map(str, input().split())\n\nif a == b:\n    print(\"H\")\nelif not a == b:\n    print(\"D\")"}
{"label": 42, "index": 5404, "code": "a, b = input().split()\nif a == \"H\":\n    if b == \"H\":\n        print(\"H\")\n    else:\n        print(\"D\")\nelse:\n    if b == \"H\":\n        print(\"D\")\n    else:\n        print(\"H\")\n"}
{"label": 42, "index": 5405, "code": "a, b = map(str, raw_input().split())\n\nif a == b:\n    print 'H'\nelse:\n    print 'D'"}
{"label": 42, "index": 5406, "code": "a,b = input().split(' ')\n \nif a == \"H\":\n    print(b)\nelif b == \"H\":\n    print(a)\nelse:\n    print(\"H\")"}
{"label": 42, "index": 5407, "code": "a,b = input().split()\nif (a==\"H\" and b==\"H\") or (a==\"D\" and b==\"D\"):\n    print(\"H\")\nelse:\n    print(\"D\")"}
{"label": 42, "index": 5408, "code": "x, y = map(str, input().split())\n\nif (x == 'H' and y == 'H'):\n    print('H')\nelif (x == 'D' and y == 'H'):\n    print('D')\nelif (x == 'D' and y == 'D'):\n    print('H')\nelse:\n    print('D')\n"}
{"label": 42, "index": 5409, "code": "ab=(input())\na,b=ab.split()\n\nif a==\"H\" and b==\"H\":\n    print(\"H\")\n\nelif a==\"H\" and b==\"D\":\n    print(\"D\")\n    \nelif a==\"D\" and b==\"H\":\n    print(\"D\")\n\nelif a==\"D\" and b==\"D\":\n    print(\"H\")"}
{"label": 42, "index": 5410, "code": "if __name__ == \"__main__\":\n    a,b = input().split()\n    if a == 'H':\n        print (b)\n    else:\n        if b == 'H':\n            print ('D')\n        else:\n            print ('H')\n"}
{"label": 42, "index": 5411, "code": "a, b = [(i) for i in input().split()]\nif a == 'H':\n    if b == 'H':\n        print('H')\n    else:\n        print('D')\nelse:\n    if b == 'H':\n        print('D')\n    else:\n        print('H')"}
{"label": 42, "index": 5412, "code": "# -*- coding: utf-8 -*-\n\ndef main():\n    a, b = raw_input().split()\n    if a is \"D\":\n        if b is \"H\":\n            print \"D\"\n        elif b is \"D\":\n            print \"H\"\n    elif a is \"H\":\n        if b is \"H\":\n            print \"H\"\n        elif b is \"D\":\n            print \"D\"\n\nif __name__ == '__main__':\n    main()"}
{"label": 42, "index": 5413, "code": "a,b = map(str, input().split())\nprint('H' if a==b else 'D')"}
{"label": 42, "index": 5414, "code": "def main():\n    a, b = map(str, input().split())\n\n    if a == b:\n        print(\"H\")\n    else:\n        print(\"D\")\n\n\nif __name__ == \"__main__\":\n    main()\n"}
{"label": 42, "index": 5415, "code": "a,t=((i)for i in input().split())\nif a==t:\n    print(\"H\")\nelse:\n    print(\"D\")"}
{"label": 42, "index": 5416, "code": "a,b=input().split()\nif a=='H':\n    aa=int(1)\nelse:\n    aa=int(0)\nif b=='H':\n    bb=int(1)\nelse:\n    bb=int(0)\nif aa^bb==1:\n    top = 'D'\nelse:\n    top = 'H'\n\nprint(top)\n"}
{"label": 42, "index": 5417, "code": "import sys\n\nINF = 10**9+7\n\nstdin = sys.stdin\ndef na(): return map(int, stdin.readline().split())\ndef nal(): return list(map(int, stdin.readline().split()))\ndef ns(): return stdin.readline().strip()\ndef nsl(): return list(stdin.readline().strip())\ndef ni(): return int(stdin.readline())\n\na, b = stdin.readline().strip().split(' ')\n\nif(a == 'H'):\n    print(b)\nelse:\n    if(b == 'H'):\n        print('D')\n    else:\n        print('H')\n"}
{"label": 42, "index": 5418, "code": "#coding:utf-8\n# x=int(raw_input())  # 1 # \u4e00\u3064\u306e\u6570\u5b57\u306e\u307f\nx,y=map(str,raw_input().split())  # 2 3  # \u4e8c\u3064\u306e\u6570\u5b57\n# x,z=raw_input()  # \u6587\u5b57\u5217\n# print x,y,z\n# sum =/ x[0]+y[0]+y[1]\n# s = z[0]\nif x ==\"H\":\n    print y\nelif x ==\"D\":\n    if y==\"D\":\n        print \"H\"\n    elif y==\"H\":\n        print \"D\"\nelif x ==\"D\":\n    if y ==\"D\":\n        print\"D\"\n    elif y ==\"H\":\n        print\"H\"\n# prin?t x,y\n"}
{"label": 42, "index": 5419, "code": "a, b = input().split()\nif a == b:\n\tprint(\"H\")\nelse:\n\tprint(\"D\")"}
{"label": 42, "index": 5420, "code": "x = input().split()\na = x[0]\nb = x[1]\nif a == 'H' and b == 'H':\n    print('H')\nelif a == 'H' and b == 'D':\n    print('D')\nelif a == 'D' and b == 'H':\n    print('D')\nelif a == 'D' and b == 'D':\n    print('H')"}
{"label": 42, "index": 5421, "code": "from collections import defaultdict\n\n\ndef main():\n    a, b = input().split()\n    print(\"H\" if a == b else \"D\")\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 42, "index": 5422, "code": "line = raw_input().split(\" \")\na = line[0]\nb = line[1]\n\nif a == \"H\":\n    if b == \"H\":\n        print \"H\"\n    else:\n        print \"D\"\nelse:\n    if b == \"H\":\n        print \"D\"\n    else:\n        print \"H\"\n"}
{"label": 42, "index": 5423, "code": "a, b = input().split()\nif b == a == \"H\" or a == b == \"D\":\n    print(\"H\")\nelse:\n    print(\"D\")"}
{"label": 42, "index": 5424, "code": "\n\na, b = input().split()\n\nH = True\n\nif b == 'H':\n    H = True\nelif b == 'D':\n    H = False\n\nif a == 'D':\n    H = not H\n\nif H:\n    print('H')\nelse:\n    print('D')\n"}
{"label": 42, "index": 5425, "code": "a, b = raw_input().split()\nprint \"H\" if (a == \"H\" and b == \"H\") or (a == \"D\" and b == \"D\") else \"D\""}
{"label": 42, "index": 5426, "code": "def isHonest(x):\n    return x == 'H'\nx,y = map(isHonest, input().split(' '))\nprint('H' if not (x^y) else 'D')"}
{"label": 42, "index": 5427, "code": "def main():\n    a, b = map(str, input().split())\n\n    if a == b:\n        print('H')\n    else:\n        print('D')\nmain()\n"}
{"label": 42, "index": 5428, "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\na, b = input().split()\n\nif a is \"H\":\n    print(b)\nelse:\n    if b is \"H\":\n        print(\"D\")\n    else:\n        print(\"H\")\n"}
{"label": 42, "index": 5429, "code": "a, b = map(str, input().split())\nif a == 'H' :\n    print(b)\nelse :\n    if b == 'H' :\n        print ('D')\n    else :\n        print ('H')"}
{"label": 42, "index": 5430, "code": "a, b = raw_input().split()\nif a == 'H':\n    print b\nelif b == 'H':\n    print 'D'\nelse:\n    print 'H'\n"}
{"label": 42, "index": 5431, "code": "# A-HonestOrDishonest\n# \u554f\u984cURL:http://abc056.contest.atcoder.jp/tasks/abc056_a\n\na, b = input().split()\nif a == b:\n    print(\"H\")\nelse:\n    print(\"D\")"}
{"label": 42, "index": 5432, "code": "if __name__ == '__main__':\n    a, b = input().split()\n\n    print('D' if (a == 'H') ^ (b == 'H') else 'H')\n"}
{"label": 42, "index": 5433, "code": "import sys\nimport numpy as np\n\ndef get_read_func(fileobject):\n    if fileobject == None :\n        return raw_input\n    else:\n        return fileobject.readline\n\ndef main():\n    if len(sys.argv) > 1:\n        f = open(sys.argv[1])\n    else:\n        f = None\n    read_func = get_read_func(f);\n    input_raw = read_func()\n    top_str = input_raw.strip().split()\n    [a, b] = [top_str[0], top_str[1]]\n    if a == 'H':\n        TopCoDeer = b\n    else:\n        if b == 'H':\n            TopCoDeer = 'D'\n        else:\n            TopCoDeer = 'H'\n    print TopCoDeer\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 42, "index": 5434, "code": "# -*- coding: utf-8 -*-\na, b = input().split()\nif a == 'H':\n    print(b)\nelse:\n    if b == 'H':\n        print('D')\n    else:\n        print('H')\n"}
{"label": 42, "index": 5435, "code": "a,b = raw_input().split()\n\nif a=='H':\n    if b=='H':\n        r='H'\n    else:   # b=='D'\n        r='D'\nelse: # a=='D'\n    if b=='H':\n        r='D'\n    else:   # b=='D'\n        r='H'\nprint(r)"}
{"label": 42, "index": 5436, "code": "a, b = map(str, input().split())\nif a == 'H':\n    if b == 'H':\n        print('H')\n    else:\n        print('D')\nelse:\n    if b == 'H':\n        print('D')\n    else:\n        print('H')\n        \n"}
{"label": 42, "index": 5437, "code": "# -*- coding: utf-8 -*-\n\na, b = map(str, raw_input().split())\nresult = ''\nif a == 'H':\n    if b== 'H':\n       \tresult = 'H'\n    else:\n\tresult = 'D'\nelse:\n    if b=='H':\n        result='D'\n    else:\n\tresult='H'\n\n# \u51fa\u529b\nprint result\n"}
{"label": 42, "index": 5438, "code": "# -*- coding: utf-8 -*-\nInp = raw_input().split()\nif Inp[0] == \"H\":\n    if Inp[1] == \"H\":\n        print(\"H\")\n    else:\n        print(\"D\")\nelse:\n    if Inp[1] == \"H\":\n        print(\"D\")\n    else:\n        print(\"H\")"}
{"label": 42, "index": 5439, "code": "#ABC056A\n\na,b=raw_input().split()\nif a=='H' and b=='H':\n print 'H'\nif a=='H' and b=='D':\n print 'D'\nif a=='D' and b=='H':\n print 'D'\nif a=='D' and b=='D':\n print 'H'\n"}
{"label": 42, "index": 5440, "code": "l = input().split()\nA=l[0]\nB=l[1]\n\nif A=='H' and B=='H':\n    print('H')\n\nelif A=='H'and B=='D':\n    print('D')\n\nelif A=='D' and B=='H':\n    print('D')\nelse:\n    print('H')\n"}
{"label": 42, "index": 5441, "code": "a,b = input().split()\nif a == b:\n     print('H')\nelse:\n     print('D')\n"}
{"label": 42, "index": 5442, "code": "# -*- coding:utf-8 -*-\na,b = input().split(' ')\n\na = True if a == 'H' else False\nb = True if b == 'H' else False\nif a == b:\n    print(\"H\")\nelse:\n    print(\"D\")\n"}
{"label": 42, "index": 5443, "code": "a, b = [0 if _ == 'H' else 1 for _ in input().split()]\n\nres = ['H', 'D']\n\nif a == 1:\n    b = 1 - b\n\nprint(res[b])\n\n"}
{"label": 42, "index": 5444, "code": "A,T=input().split()\n\nif A=='H' :\n    a=1\nelse:\n    a=0\n\nif T=='H' :\n    t=1\nelse:\n    t=0\n\nif a+t!=1:\n    print('H')\nelse:\n    print('D')\n"}
{"label": 42, "index": 5445, "code": "#coding: utf-8\n\na, b = input().split()\n\nif a=='H':\n\tif b=='H':\n\t\tprint('H')\n\telif b=='D':\n\t\tprint('D')\nelif a=='D':\n\tif b=='H':\n\t\tprint('D')\n\telif b=='D':\n\t\tprint('H')\n\n"}
{"label": 42, "index": 5446, "code": "a, b = input().split()\nif a =='H':\n  a = True\nelse:\n  a = False\nif b == 'H':\n  b = True\nelse:\n  b = False\n\nres = not a^b\n\nif res:\n  print('H')\nelse:\n  print('D')"}
{"label": 42, "index": 5447, "code": "a, b = [True if c == 'H' else False for c in raw_input().strip().split()]\nprint 'D' if a ^ b else 'H'"}
{"label": 42, "index": 5448, "code": "\na, b = (str(_) for _ in input().split())\n\nif a == b:\n    print(\"H\")\nelse:\n    print(\"D\")\n"}
{"label": 42, "index": 5449, "code": "a, b = input().split()\nprint('D' if a != b else 'H')"}
{"label": 42, "index": 5450, "code": "#coding: shift_jis\n\n\na,b = map(str,raw_input().split())\n\nif a=='H':\n    if b=='H':\n        print 'H'\n    elif b=='D':\n        print 'D'\nelif a=='D':\n    if b=='H':\n        print 'D'\n    elif b=='D':\n        print 'H'"}
{"label": 42, "index": 5451, "code": "def main():\n    a,b = input().split()\n    if a == 'H':\n        print(\"HD\"[b=='D'])\n    else:\n        print(\"HD\"[b!='D'])\n    \nif __name__ == \"__main__\":\n    main()\n"}
{"label": 42, "index": 5452, "code": "a,b = input().split()\nif a == \"H\" and b == \"H\":\n    print(\"H\")\nelif a == \"D\" and b == \"D\":\n    print(\"H\")\nelse:\n    print(\"D\")\n"}
{"label": 42, "index": 5453, "code": "# coding: utf-8\n\nh= map(str, raw_input().split())\nnum = [0 if t == 'H' else 1 for t in h]\nl = num[0] ^ num[1]\n\nprint 'H' if l == 0 else 'D'\n"}
{"label": 42, "index": 5454, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\n\ndef main():\n    A, B = input().split()\n\n    assert A in (\"H\", \"D\")\n    assert B in (\"H\", \"D\")\n\n    if A == \"H\":\n        print(\"H\" if B == \"H\" else \"D\")\n    elif A == \"D\":\n        print(\"H\" if B == \"D\" else \"D\")\n\nif __name__ == \"__main__\": main()\n"}
{"label": 42, "index": 5455, "code": "a, b = input().split()\na = 0 if a == 'H' else 1\nb = 0 if b == 'H' else 1\ns = a ^ b\n\nans = 'H' if not s else 'D'\n\nprint(ans)"}
{"label": 42, "index": 5456, "code": "a, b = list(input().split(\" \"))\n\nif a == b:\n    print (\"H\")\nelse:\n    print (\"D\")"}
{"label": 42, "index": 5457, "code": "#!/usr/bin/env python\n\na, b = input().split()\n\nif a == \"H\" and b == \"H\":\n    print(\"H\")\nelif a == \"D\" and b == \"H\":\n    print(\"D\")\nelif a == \"H\" and b == \"D\":\n    print(\"D\")\nelif a == \"D\" and b == \"D\":\n    print(\"H\")"}
{"label": 42, "index": 5458, "code": "t = input()\nif t == 'H H' or t == 'D D': print('H')\nelse: print('D')"}
{"label": 42, "index": 5459, "code": "A, B = input().split()\na = -1 if A == 'H' else 1\nb = -1 if B == 'H' else 1\nans = 'H' if a*b > 0 else 'D'\nprint(ans)\n"}
{"label": 43, "index": 5460, "code": "w,a,b=map(int,raw_input().split())\nif a+w<=b:\n    print b-(a+w)\nelif b+w<=a:\n    print a-(b+w)\nelse:\n    print 0"}
{"label": 43, "index": 5461, "code": "from collections import defaultdict\n\n\ndef main():\n    W, a, b = map(int, input().split())\n    if a <= b <= a + W or a <= b + W <= a + W:\n        print(0)\n    else:\n        print(min(abs(b - (a + W)), abs(a - (b + W))))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 43, "index": 5462, "code": "W, a, b = list(map(int, input().split(\" \")))\n\nif ((b - (a+W)) > 0):\n    print((b - (a+W)))\nelif ((a - (b+W)) > 0):\n    print((a - (b+W)))\nelse:\n    print(0)"}
{"label": 43, "index": 5463, "code": "import math\nw, a, b = map(int, input().split())\nif a+w < b:\n    print(int(math.fabs(b-a-w)))\nelif b+w < a:\n    print(int(math.fabs(b+w-a)))\nelse:\n    print(int(0))"}
{"label": 43, "index": 5464, "code": "W, a, b = map(int, input().split())\nif b < a: a, b = b, a\nprint(max(0, (b - a - W)))"}
{"label": 43, "index": 5465, "code": "if __name__ == '__main__':\n    w, a, b = map(int, input().split())\n    \n    if b + w < a: \n        print(a - b - w)\n    elif a <= b + w <= a + w or a <= b <= a + w: \n        print(0)\n    else: \n        print(b - a - w)\n\n"}
{"label": 43, "index": 5466, "code": "W, a, b = map(int, input().split())\nif b + W < a:\n    print(a - b - W)\nelif a + W < b:\n    print(b - a - W)\nelse:\n    print(0)\n"}
{"label": 43, "index": 5467, "code": "W, a, b = [int(i) for i in input().split()]\n\nprint(max(max(a,b) - min(a,b) - W, 0))"}
{"label": 43, "index": 5468, "code": "W, a, b = map(int, input().split())\n\ndef f(w, a, b):\n    if b <= a+W:\n        return 0\n    else:\n        return b - (a+W)\n\nprint(f(W, a, b) if a <= b else f(W, b, a))"}
{"label": 43, "index": 5469, "code": "W, a, b = map(int, input().split())\nif abs(a-b) > W:\n    print(min(abs(a - b), abs(a - b + W), abs(b - a + W)))\nelse:\n    print(0)"}
{"label": 43, "index": 5470, "code": "W, a, b = map(int, input().strip().split())\nl, r = a + W, b + W\nif a <= b:\n\tdiff = b - l\n\tif diff > 0:\n\t\tprint(diff)\n\telse:\n\t\tprint(0)\nelse:\n\tdiff = a - r\n\tif diff > 0:\n\t\tprint(diff)\n\telse:\n\t\tprint(0)"}
{"label": 43, "index": 5471, "code": "W, a, b = list(map(int, input().split()))\n#if (a > b) a, b = b, a\nif(a < b):\n    d = b - (a + W)\n    if(d <= 0):\n        print(\"0\")\n    else:\n        print(d)\nelif(a > b):\n    d = a - (b + W)\n    if(d <= 0):\n        print(\"0\")\n    else:\n        print(d)\n\nelif(a == b):\n    print(\"0\")\n    "}
{"label": 43, "index": 5472, "code": "input_lines = str(input())\n\nW = int(input_lines.split(' ')[0])\na = int(input_lines.split(' ')[1])\nb = int(input_lines.split(' ')[2])\n\nif a < b:\n\n    saidai = a + W\n\n    if saidai >= b:\n        print('0')\n    else:\n        print(b - saidai)\n\nelif a > b:\n\n    saidai = b + W\n\n    if saidai >= a:\n        print('0')\n    else:\n        print(a - saidai)\n\nelse:\n    print('0')"}
{"label": 43, "index": 5473, "code": "w,a,b = map(int, input().split())\nif a>b: a,b = b,a\nans = max(0,b-(a+w))\nprint(ans)"}
{"label": 43, "index": 5474, "code": "\n\nW, a, b = list(map(int, input().split()))\n\nif a < b:\n    ans = b - (a + W)\n    if ans < 0:\n        print(0)\n    else:\n        print(ans)\n\nelse:\n    ans = a - (b + W)\n    if ans < 0:\n        print(0)\n    else:\n        print(ans)\n"}
{"label": 43, "index": 5475, "code": "w,a,b = map(int, raw_input().split())\n\nif a+w < b:\n    print b-(a+w)\nelif b+w < a:\n    print a-(b+w)\nelse:\n    print 0\n"}
{"label": 43, "index": 5476, "code": "l = input().split()\n\nw = int(l[0])\na = int(l[1])\nb = int(l[2])\n\nif (b+w) < a:\n    print(a-(b+w))\nelif (a+w) < b:\n    print(b-(a+w))\nelse:\n    print(0)"}
{"label": 43, "index": 5477, "code": "W,a,b = [int(x) for x in raw_input().split(\" \")]\n\nif (a <=b <= a + W) or (b<=a <= b+W):\n\tprint 0\n\t\nelif a+W < b:\n\tprint b - (a+W)\n\t\nelse:\n\tprint a - (b+W)\n\t"}
{"label": 43, "index": 5478, "code": "MOD=1000000007\n\ndef solve():\n    W,a,b=map(int,input().split())\n    if a+W<b:\n        print(b-a-W)\n    elif b+W<a:\n        print(a-b-W)\n    else:\n        print(0)\n\nif __name__ == \"__main__\":\n    solve()"}
{"label": 43, "index": 5479, "code": "# -*- coding: utf-8 -*-\n\nimport sys\nimport os\n\n\nW, a, b = map(int, input().split())\n\nif a <= b:\n    if a + W <= b:\n        diff = b - (a + W)\n        print(diff)\n    else:\n        print(0)\nelse:\n    if b + W <= a:\n        diff = a - (b + W)\n        print(diff)\n    else:\n        print(0)\n\n\n"}
{"label": 43, "index": 5480, "code": "w,a,b=[int(x) for x in input().split()]\n\nif b>a+w:\n    print(b-(a+w))\nelif b+w<a:\n    print(a-(b+w))\nelse:\n    print(0)"}
{"label": 43, "index": 5481, "code": "import sys\n\nINF = 10**9+7\n\nstdin = sys.stdin\ndef na(): return map(int, stdin.readline().split())\ndef nal(): return list(map(int, stdin.readline().split()))\ndef ns(): return stdin.readline().strip()\ndef nsl(): return list(stdin.readline().strip())\ndef ni(): return int(stdin.readline())\n\nw, a, b = na()\n\nif((abs(b - a) <= w)):\n    print(0)\nelif(a < b):\n    print(b-(a+w))\nelse:\n    print(a-(b+w))"}
{"label": 43, "index": 5482, "code": "w, a, b = input().split()\nw = int(w)\na = int(a)\nb = int(b)\n\nif a < b:\n    res = b - (a + w)\nelse:\n    res = a - (b + w)\n\nif res < 0:\n    print('0')\nelse:\n    print(res)\n"}
{"label": 43, "index": 5483, "code": "W, a, b = map(int, input().split())\n\nif a-W <= b <= a+W:\n print(0)\nelif b < a-W:\n print(a-W-b)\nelse:\n print(b-(a+W))"}
{"label": 43, "index": 5484, "code": "def main():\n    w, a, b = map(int, input().split())\n    if a+w < b:\n        print(b-a-w)\n    elif b+w < a:\n        print(a-b-w)\n    else:\n        print(0)\n\n\nif __name__ == \"__main__\":\n    main()"}
{"label": 43, "index": 5485, "code": "W, a, b = map(int, input().split())\nminimum = min(a,b)\nmaximum = max(a,b)\nif maximum - (minimum + W) < 0:\n    print(0)\nelse:\n    print(maximum - (minimum + W))\n"}
{"label": 43, "index": 5486, "code": "# -*- coding: utf-8 -*-\nW,a,b = map(int, raw_input().split())\n\n\nif(b+W<a):\n    print(a-b-W)\nelif(b<=a and a<=b+W):\n    print('0')\nelif(a<=b and b<=a+W):\n    print('0')\nelif(a+W<b):\n    print(b-a-W)"}
{"label": 43, "index": 5487, "code": "# -*- coding:utf-8 -*-\nW, a, b = map(int, input().split())\na2 = a+W\nb2 = b+W\nif a2 < b:\n    print(b - a2)\nelif b2 < a:\n    print(a - b2)\nelse:\n    print(0)"}
{"label": 43, "index": 5488, "code": "w,a,b = map(int,input().split())\nans = b - (a + w)\nif a<= b and b <= a + w:\n    print(\"0\")\nelif ans >= 0:\n    print(ans)\nelse:\n    ans = a - (b + w)\n    print(ans)"}
{"label": 43, "index": 5489, "code": "W,a,b=map(int,input().split())\nif (b-a-W>0):\n print (b-a-W)\nelif (a-b-W>0):\n print(a-b-W)\nelse:\n print (0)\n"}
{"label": 43, "index": 5490, "code": "def calc(w, a, b):\n\ta_max = a + w\n\tb_max = b + w\n\t\n\tif b > a_max:\n\t\treturn b - a_max\n\telif a > b_max:\n\t\treturn a - b_max\n\telse:\n\t\treturn 0\n\ninpt = raw_input().split()\n\nw = int(inpt[0])\na = int(inpt[1])\nb = int(inpt[2])\n\nprint calc(w, a, b)"}
{"label": 43, "index": 5491, "code": "data = input().split()\nW = int(data[0])\na = int(data[1])\nb = int(data[2])\n\nif(a < b):\n\tif(b <= a+W):\n\t\tprint(\"0\")\n\telse:\n\t\tprint(b-(a+W))\nelse:\n\tif(a <= b+W):\n\t\tprint(\"0\")\n\telse:\n\t\tprint(a-(b+W))\n\n"}
{"label": 43, "index": 5492, "code": "#ABC056B\n\nw,a,b=map(int,raw_input().split())\nif abs(b-a)<=w:\n print 0\nelse:\n print abs(b-a)-w\n"}
{"label": 43, "index": 5493, "code": "#coding:utf-8\n# x=int(raw_input())  # 1 # \u4e00\u3064\u306e\u6570\u5b57\u306e\u307f\nw, a, b =map(int,raw_input().split())  # 2 3  # \u4e8c\u3064\u306e\u6570\u5b57\nif a ==b:\n    print 0\nelif a < b:\n    if a + w >= b:\n        print 0\n    else:\n        print b-(a+w)\nelif a >b:\n    if b + w >= a:\n        print 0\n    else:\n        print a-(b+w)\n\n\n\n\n# print x,y,z\n"}
{"label": 43, "index": 5494, "code": "w, a, b = map(int, input().split())\nif a > b:\n    a, b = b, a\nans = max(0, b-(a+w))\nprint(ans)\n"}
{"label": 43, "index": 5495, "code": "str = input().rstrip().split(\" \")\nW = int(str[0])\na = int(str[1])\nb = int(str[2])\nx = 0\n\nif a < b:\n        x = b - (a + W)\nelif a > b:\n        x = a - (b + W)\n\nif a == b or x < 0:\n        print(\"0\")\nelse:\n        print(x)\n"}
{"label": 43, "index": 5496, "code": "w, a, b = map(int, input().split())\n\nif b < a:\n    a, b = b, a\n\nans = max(b - (a + w), 0)\n\nprint(ans)"}
{"label": 43, "index": 5497, "code": "import numpy as np\n\nW,a,b = map(int,raw_input().split())\n\nif np.abs(a-b) < W:\n    print 0\nelse:\n    print np.abs(a-b)-W"}
{"label": 43, "index": 5498, "code": "W, a, b = [int(_) for _ in input().split()]\n\nif b >= a:\n    res = b - (a + W)\nelse:\n    res = a - (b + W)\n\nprint(max(0, res))"}
{"label": 43, "index": 5499, "code": "l = input().split()\n\nfor i in range(len(l)):\n    l[i] = int(l[i])\n\nw = l[0]    \na = l[1]\nb = l[2]\n\nif a + w < b:\n    print(b - a - w)\nelif b + w < a:\n    print(a - b - w)\nelse:\n    print(0)"}
{"label": 43, "index": 5500, "code": "W,a,b =  [int(item) for item in input().split()]\nprint(max(0, abs(b - a) - W))"}
{"label": 43, "index": 5501, "code": "from collections import defaultdict\n\n\ndef main():\n    W, a, b = map(int, input().split())\n    i, j, k, l = a, a + W, b, b + W\n    if (i <= k <= j) or (i <= l <= j) or (k <= i <= l) or (k <= j <= l):\n        print(0)\n    else:\n        print(min([abs(k - i), abs(k - j), abs(l - i), abs(l - j)]))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 43, "index": 5502, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\ndef LI(): return list(map(int, input().split()))\ndef LF(): return list(map(float, input().split()))\ndef II(): return int(input())\ndef LS(): return input().split()\ndef S(): return input()\n\n\n\ndef main():\n    w,a,b = LI()\n    if b < a:\n        a,b = b,a\n    return max(b-a-w,0)\n\nprint(main())\n"}
{"label": 43, "index": 5503, "code": "w, a, b = map(int, input().split())\nif a <= b <= a + w:\n    print(0)\nelse:\n    print(min(abs(a - (b + w)), abs(b - (a + w))))\n"}
{"label": 43, "index": 5504, "code": "w, a, b = list(map(int,input().split(\" \")))\nif b < a:\n    a, b = b, a\ns = b - a - w\nif s < 0:\n    print(0)\nelse:\n    print(s)\n"}
{"label": 43, "index": 5505, "code": "def main():\n    w, a, b = map(int, input().split())\n    if not (a + w < b or b + w < a):\n        print(0)\n    else:\n        print(min(abs(a + w - b), abs(b + w - a)))\n\n\nif __name__ == \"__main__\":\n    main()\n"}
{"label": 43, "index": 5506, "code": "w,a,b=map(int,input().split())\nprint(max(max(a,b)-min(a,b)-w,0))"}
{"label": 43, "index": 5507, "code": "W, a, b = map(int, input().split())\nif b >= a + W:\n    print(b - (a + W))\nelif b + W <= a:\n    print(a - (b + W))\nelse:\n    print(0)\n"}
{"label": 43, "index": 5508, "code": "W, a, b = map(int, input().split())\n\nif a + W < b:\n    print(b - a - W)\nelif b + W < a:\n    print(a - b - W)\nelse:\n    print(0)\n"}
{"label": 43, "index": 5509, "code": "lines = input().split()\nW = int(lines[0])\na = int(lines[1])\nb = int(lines[2])\nshortest = b-(a+W)\ns2 = a-(b+W)\nif shortest >= 0 :\n    print(shortest)\nelif shortest <= 0 and s2>=0:\n    print(s2)\nelse:\n    print(\"0\")"}
{"label": 43, "index": 5510, "code": "def solve():\n    W, a, b = list(map(int, input().split(\" \")))\n\n    if a < b:\n        if b - (a + W) > 0:\n            print(b - (a + W))\n        else:\n            print(0)\n    elif b < a:\n        if a - (b + W) > 0:\n            print(a - (b + W))\n        else:\n            print(0)\n    else:\n        print(0)\n\n\nsolve()"}
{"label": 43, "index": 5511, "code": "w, a, b = map(int, input().split())\n\nprint( max(0, abs(b-a) - w))"}
{"label": 43, "index": 5512, "code": "w, a, b = map(int, input().split())\nd = abs(a-b)-w\nprint(max(d,0))"}
{"label": 43, "index": 5513, "code": "import math\nW, a, b =  map(int, input().split())\nc = math.fabs(a - b)\nif c > W:\n    print(int(c - W))\nelse:\n    print(0)"}
{"label": 43, "index": 5514, "code": "W, a, b = (int(i) for i in input().strip().split())\nif a + W < b:\n    print(b - a - W)\nelif a > b + W:\n    print(a - b - W)\nelse:\n    print(0)"}
{"label": 43, "index": 5515, "code": "def main():\n    W, a, b = map(int, input().split())\n    if a + W < b:\n        print(b - a - W)\n    elif b + W < a:\n        print(a - b - W)\n    else:\n        print(0)\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 43, "index": 5516, "code": "W, a, b = [int(n) for n in input().split()]\nres = max(b-(a+W), a-(b+W), 0)\n\nprint(res)"}
{"label": 43, "index": 5517, "code": "[W,a,b] = map(int, raw_input().split())\nif ((a <= b) and (b <= a+W)) or ((a <= b+W) and (b+W <= a+W)):\n    print 0\nelse:\n    print min(abs(b-(a+W)), abs(a-(b+W)))\n"}
{"label": 43, "index": 5518, "code": "w,a,b=map(int,input().split())\nprint(0 if a<=b+w and b<=a+w else min(abs(a+w-b),abs(a-w-b)))"}
{"label": 43, "index": 5519, "code": "W, a, b = map(int, input().split())\n\nabs = max(a, b) - min(a, b) - W\n\nprint(max(0, abs))"}
{"label": 43, "index": 5520, "code": "W, a, b = map(int, input().split())\nif a+W < b:\n    print(abs(a+W-b))\n\nelif b+W < a:\n    print(abs(b+W-a))\n\nelif a <= b <= a+W or b <= a <= b+W :\n    print(0)"}
{"label": 43, "index": 5521, "code": "w, a, b = map(int, input().split())\nif a < b:\n    if a + w > b:\n        print(\"0\")\n    else:\n        print(b - a - w)\nelse:\n    if b + w > a:\n        print(\"0\")\n    else:\n        print(a - b - w) "}
{"label": 43, "index": 5522, "code": "W, a, b = map(int,input().split())\n\nans=abs(b-(a+W))\n\n\nif abs(a-b)<=W:\n    print(\"0\")\nelse:\n    print(abs(a-b)-W)"}
{"label": 43, "index": 5523, "code": "if __name__ == \"__main__\":\n    inp = [int(i) for i in input().split()]\n    W = inp[0]\n    a = inp[1]\n    b = inp[2]\n    print(max(0, b-(a+W), a-(b+W)))"}
{"label": 43, "index": 5524, "code": "w, a, b = [int(i) for i in input().split()]\nif a < b:\n    print(max(b - (a + w), 0))\nelse:\n    print(max(a - (b + w), 0))\n"}
{"label": 43, "index": 5525, "code": "w, a, b = map(int, input().split())\na1 = a+w\nb1 = b+w\nans = 0\n\nif a1<b:\n    ans = b-a1\nelif b1<a:\n    ans = a-b1\nprint(ans)"}
{"label": 43, "index": 5526, "code": "# -*- coding: utf-8 -*-\nW, a, b = map(int, raw_input().split())\nprint 0 if a <= b <= a + W or a <= b + W <= a + W else min(abs(b - (a + W)), abs(a - (b + W)))"}
{"label": 43, "index": 5527, "code": "W, a, b = map(int, input().split())\nr = min(a,b)\nl = max(a,b)\nprint(0 if (r+W)>=l else l-(r+W))"}
{"label": 43, "index": 5528, "code": "W, a, b = map(int, raw_input().split())\n\nif a > b:\n    a, b = b, a\nprint max(b - a - W, 0)\n"}
{"label": 43, "index": 5529, "code": "import sys\n\ndef get_read_func(fileobject):\n    if fileobject == None :\n        return raw_input\n    else:\n        return fileobject.readline\n\ndef main():\n    if len(sys.argv) > 1:\n        f = open(sys.argv[1])\n    else:\n        f = None\n    read_func = get_read_func(f);\n    input_raw = read_func()\n    top_str = input_raw.strip().split()\n    [W, a, b] = [int(top_str[0]), int(top_str[1]), int(top_str[2])]\n    if a < b:\n        rect1_s = a\n        rect1_e = a + W\n        rect2_s = b\n        rect2_e = b + W\n    else:\n        rect1_s = b\n        rect1_e = b + W\n        rect2_s = a\n        rect2_e = a + W\n\n    print max(0, rect2_s - rect1_e)\n\n\n\n\nif __name__ == '__main__':\n    main()"}
{"label": 43, "index": 5530, "code": "W, a, b = map(int,input().split())\nif a+W <= b:\n    print(b-(a+W))\nelif b+W <= a:\n    print(a-(b+W))\nelse:\n    print(0)\n"}
{"label": 43, "index": 5531, "code": "W, a, b = map(int, raw_input().split())\n\nif a < b:\n    print max(0, b - (a + W))\nelse:\n    print max(0, a - (b + W))"}
{"label": 43, "index": 5532, "code": "w,a,b = map(int, input().split(' '))\n\nif abs(a - b) < w:\n    print(0)\nelif a < b:\n    print(b - a - w)\nelse:\n    print(a - b - w)"}
{"label": 43, "index": 5533, "code": "# -*- coding: utf-8 -*-\n\nW, a, c= map(int,raw_input().split())\n\nb = a + W\nd = c + W\n\nif b < c:\n    ans = c - b\nelif d < a:\n    ans = a - d\nelse:\n    ans = 0\n    \nprint(ans)"}
{"label": 43, "index": 5534, "code": "w, a, b = map(int, input().split())\nans = max(b - a - w, a - b - w)\nprint(ans if ans > 0 else 0)\n"}
{"label": 43, "index": 5535, "code": "def main():\n    W,a,b = map(int,input().split())\n    L1, R1 = a,a+W\n    L2, R2 = b,b+W\n    if not( R2 < L1 or R1 < L2 ):\n        print(0)\n    elif R2 < L1:\n        print(L1-R2)\n    else:\n        print(L2-R1)\n\nif __name__ == \"__main__\":\n    main()\n"}
{"label": 43, "index": 5536, "code": "w, a, b = map(int, input().split())\n\nif a+w < b:\n    ans = (-(a+w-b))\nelif b+w < a:\n    ans = a-b-w\nelse:\n    ans = 0\nprint (ans)\n"}
{"label": 43, "index": 5537, "code": "i = map(int, raw_input().split(\" \"))\nl = abs(i[1] - i[2]) - i[0]\nprint( l if (l > 0) else 0)"}
{"label": 43, "index": 5538, "code": "W, a, b = map(int, raw_input().split())\n\nl = a\nr = b\nif a > b:\n    r = a\n    l = b\n\ndiff = r - (l + W)\nif diff < 0:\n    diff = 0\nprint diff\n"}
{"label": 43, "index": 5539, "code": "w,a,b = map(int,input().split())\nif a+w>=b:\n    if a<=b+w:\n        print(0)\n    elif a>=b+w:\n        print(a-b-w)\nelif a+w<=b:\n    print(b-a-w)\n"}
{"label": 43, "index": 5540, "code": "inputs = input().split()\nW = int(inputs[0])\na = int(inputs[1])\nb = int(inputs[2])\n\nif abs(a - b) <= W:\n    print(0)\nelse:\n    print(abs(a - b) - W)\n"}
{"label": 43, "index": 5541, "code": "w, a, b = input().split()\nw2 = int(w)\na2 = int(a)\nb2 = int(b)\n\nif a2+w2 <= b2:\n    print(b2-a2-w2)\nelif a2 <= b2 < a2+w2:\n    print(0)\nelse:\n    print(a2-b2-w2)"}
{"label": 43, "index": 5542, "code": "w, a, b = map(int, input().split())\nif b+w < a:\n    print(-b-w+a)\nelif b > a+w:\n    print(b-w-a)\nelse:\n    print(0)"}
{"label": 43, "index": 5543, "code": "W,a,b = map(int,input().split())\nif abs(a-b) > W:\n     print(abs(a-b)-W)\nelse:\n     print(0)\n"}
{"label": 43, "index": 5544, "code": "lst = input().split(\" \")\nW =int(lst[0])\na =int(lst[1])\nb =int(lst[2])\nif b > a+W:\n\tprint(b-(a+W))\nelif b+W <a :\n\tprint(a-(b+W))\t\nelse :\n\tprint(0)\t"}
{"label": 43, "index": 5545, "code": "W,a,b = map(int,input().split())\nif a > b:\n    temp = b\n    b = a\n    a = temp\nif a+W>=b:\n    print(0)\nelse:\n    print(b-(a+W))\n"}
{"label": 43, "index": 5546, "code": "W, a, b = map(int,input().split())\nif a<b:\n    if a+W>=b:\n        print(0)\n    else:\n        print(b-(a+W))\nelse:\n    if b+W>=a:\n        print(0)\n    else:\n        print(a-(b+W))\n"}
{"label": 43, "index": 5547, "code": "# -*- coding:utf-8 -*-\nw,a,b = map(int,input().split())\n\nif a<=b:\n    print(max(b-(a+w),0))\nelse:\n    print(max(a-(b+w),0))\n"}
{"label": 43, "index": 5548, "code": "W,a,b  = map(int,input().split())\naW = a + W\nbW = b + W\n\nif b >= aW:\n    print(b-aW)\nelif a >= bW:\n    print(a - bW) \nelse:\n    print(0)\n    \n"}
{"label": 43, "index": 5549, "code": "W, a, b = [int(x) for x in input().split()]\n\nif abs(b - a) - W > 0:\n\tans = abs(b - a) - W\nelse:\n\tans = 0\n\nprint(ans)"}
{"label": 43, "index": 5550, "code": "W,a,b = map(int, input().split())\nprint(max(abs(a - b) - W, 0))"}
{"label": 43, "index": 5551, "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nw, a, b = map(int, input().split())\n\nif (a + w >= b and b >= a) or (b + w >= a and b <= a):\n    print(0)\nelif a + w < b:\n    print(b - (a + w))\nelse:\n    print(a - (b + w))\n"}
{"label": 43, "index": 5552, "code": "w, a, b = map(int, input() .split())\n\nif a + w < b:\n    print(b - (a + w))\nelif b + w < a:\n    print(a - (b + w))\nelse:\n    print(0)"}
{"label": 43, "index": 5553, "code": "n = input()\ntmp_n = n.split(\" \")\n\nW = tmp_n[0]\na = tmp_n[1]\nb = tmp_n[2]\n\naW = int(W)+int(a)\nbW = int(W)+int(b)\n\nif a<b:\n    if int(b)-aW<0:\n        print(\"0\")\n    else:\n        print(int(b)-aW)  \nelse:\n    if int(a)-bW<0:\n        print(\"0\")\n    else:\n        print(int(a)-bW)\n"}
{"label": 43, "index": 5554, "code": "W,a,b =map(int,input().split())\n\n\nif a<=b:\n    if W+a<b:\n        print(b-(W+a))\n    else:\n        print(0)\nelse :\n    if b+W<a:\n        print(a-(W+b))\n    else:\n        print(0)\n"}
{"label": 43, "index": 5555, "code": "W, a, b = list(map(int, input().split()))\nif a > b:\n    ren = a - (b + W)\nelif a < b:\n    ren = b - (a + W)\nelse: ren = 0\n\nprint(0 if ren < 0 else ren)\n"}
{"label": 43, "index": 5556, "code": "l=map(int, raw_input().split(\" \"))\n\nimport math\n\nw=l[0]\na2b=abs(l[1]-l[2])\n\nif a2b<w:\n    print 0\nelse:\n    print a2b-w\n"}
{"label": 43, "index": 5557, "code": "# -*- coding: utf-8 -*-\nW, a, b = map(int, input().split())\nif a+W < b:\n    print(\"%d\" % (b-a-W))\nelif b+W < a:\n    print(\"%d\" % (a-b-W))\nelse:\n    print(\"0\")\n"}
{"label": 43, "index": 5558, "code": "w,a,b = map(int, input().split())\nprint(b-(a+w) if b>a+w else a-(b+w) if a>b+w else 0 )\n"}
{"label": 43, "index": 5559, "code": "# -*- coding: utf-8 -*-\n\na, b, c = map(int, raw_input().split())\nresult = 0\n\nif b > c:\n    t = b\n    b = c\n    c = t\nif a+b >= c:\n    result = 0\nelse:\n    result = c - a - b\n\n# \u51fa\u529b\nprint result"}
{"label": 43, "index": 5560, "code": "line = raw_input().split(\" \")\nw = int(line[0])\na = int(line[1])\nb = int(line[2])\n\naw = a + w\nbw = b + w\nif bw < a:\n    print a - bw\nelif bw >= a and bw <= aw:\n    print 0\nelif bw > aw:\n    if b > aw:\n        print b - aw\n    else:\n        print 0\n"}
{"label": 43, "index": 5561, "code": "def solve():\n  ar = raw_input().split(' ')\n  W = int(ar[0])\n  a = int(ar[1])\n  b = int(ar[2])\n  if a+W < b : return b-a-W\n  if b+W < a : return a-b-W\n  return 0\n\nif __name__ == '__main__' :\n  print solve()"}
{"label": 43, "index": 5562, "code": "def main():\n    W, a, b = map(int, input().split())\n\n    if a > b:\n        a, b = b, a\n    if b - a <= W:\n        print('0')\n    else:\n        l = b - (a + W)\n        print(str(l))\n\nmain()\n"}
{"label": 43, "index": 5563, "code": "w,a,b = map(int,input().split())\nd = abs(b-a)-w\nif d >0:\n    print(d)\nelse: \n    print(0)"}
{"label": 43, "index": 5564, "code": "W, a, b = map(int, raw_input().split())\nif a < b:\n    print max(b - (a + W), 0)\nelif a > b:\n    print max(a - (b + W), 0)\nelse:\n    print 0"}
{"label": 43, "index": 5565, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\nimport re\nimport math\nimport collections\nimport itertools\nimport functools\n\nDEBUG = True\nDEBUG = False\n\ndef dbg(*args):\n    if DEBUG:\n        print(\"DBG: \", file=sys.stderr, end=\"\")\n        print(*args, file=sys.stderr)\n\n\n\ndef main():\n    W, a, b = map(int, input().split())\n\n    if b+W >= a and b <= a+W:\n        print(0)\n    elif b+W < a:\n        print(a-(b+W))\n    elif b > a+W:\n        print(b-(a+W))\n\nif __name__ == \"__main__\": main()\n"}
{"label": 43, "index": 5566, "code": "W, a, b = map(int, input().split())\nif (b > (a+W)):\n    print(b - (a+W))\nelif (a <= b <= (a+W)):\n    print(0)\nelse:\n    print(a - (b+W))"}
{"label": 43, "index": 5567, "code": "w , a , b = map(int,raw_input().split())\n\nif a < b:\n    if (a+w) >= b:\n        print 0\n    else:\n        print abs(b - (a+w))\nif b < a:\n    if (b+w) >= a:\n        print 0\n    else:\n        print abs(a - (b+w))\nif a == b:\n    print 0"}
{"label": 43, "index": 5568, "code": "W, a, b = map(int, raw_input().strip().split(\" \"))\n\nif(a+W < b):\n    print b - (a+W)\nelif(b+W < a):\n    print a - (b+W)\nelse:\n    print 0\n"}
{"label": 43, "index": 5569, "code": "W, a, b =map(int,input().split())\n\nif a<=b<=(a+W) or a<=(b+W)<=(a+W):\n    print(0)\n\nelif (a+W)<=b:\n        print(b-(a+W)) \n\nelse:\n    print(a-(b+W))"}
{"label": 43, "index": 5570, "code": "W, a, b = map(int, input().split())\nprint(max(0, abs(b-a) - W))"}
{"label": 43, "index": 5571, "code": "w,a,b = map(int,input().split())\ntmp = max(a,b)\na = min(a,b)\nb =tmp\nprint(max(b-(a+w),0))"}
{"label": 43, "index": 5572, "code": "W, a, b = map(int, raw_input().split())\n\nif a+W >= b and a <= b+W:\n\tprint 0\nelse:\n\tprint min(abs(b-(a+W)), abs(a-(b+W))) "}
{"label": 43, "index": 5573, "code": "W, a, b = map(int, raw_input().split())\nprint max(abs(a-b)-W, 0)\n"}
{"label": 43, "index": 5574, "code": "def main():\n    W, a, b = map(int, input().split())\n\n    res = 0\n    if a + W < b:\n        res = b-(a+W)\n    elif b + W < a:\n        res = a-(b+W)\n    print(res)\n\n\nif __name__ == \"__main__\":\n    main()\n"}
{"label": 43, "index": 5575, "code": "W, a, b = list(map(int, input().split()))\nif a > b:\n    a, b = b, a\nprint(max(0, b-a-W))"}
{"label": 43, "index": 5576, "code": "if __name__ == \"__main__\":\n    W,a,b = map(int, input().split())\n    if a > b:\n        a,b = b,a\n    res = max((b - (a + W), 0))\n    print (res)\n"}
{"label": 43, "index": 5577, "code": "#! coding: UTF-8\nw,a,b = list(map(int,input().split(\" \")))\nif (a-w) <= b <= (a+w):\n\tprint(0)\nelse:\n\tprint(abs(b-a)-w)\n"}
{"label": 43, "index": 5578, "code": "W,a,b = map(int,input().split())\nc = abs(b - a) - W\nif c < 0:\n\tc = 0\n\nprint(c)"}
{"label": 43, "index": 5579, "code": "W, a, b = map(int, input().split())\ndiff = abs(a-b)\nprint(max(0, diff-W))"}
{"label": 43, "index": 5580, "code": "def main():\n    x = input().split()\n\n    W = int(x[0])\n    a = int(x[1])\n    b = int(x[2])\n\n    if b > a+W:\n        print(b - (a+W))\n        return\n    elif a > b+W:\n        print(a - (b+W))\n        return\n\n    print(0)\n\nif __name__ == '__main__':\n    main()"}
{"label": 43, "index": 5581, "code": "inp = input().split()\nw = int(inp[0])\na = int(inp[1])\nb = int(inp[2])\n\nprint(max(max(a-b-w,b-a-w),0))"}
{"label": 43, "index": 5582, "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nw, a, b = map(int, input().split())\n\nif a + w < b:\n    print(b - (a + w))\nelif b + w < a:\n    print(a - (b + w))\nelse:\n    print(0)\n"}
{"label": 43, "index": 5583, "code": "# -*- coding: utf-8 -*-\n\nimport sys\nimport subprocess\nimport json\nimport time\nimport math\nimport re\nimport sqlite3\n\nW, a, b = map(int, input().split())\nif a > b: a, b = b, a\nprint(max(0, b - (a + W)))\n"}
{"label": 43, "index": 5584, "code": "w, a, b =map(int, raw_input().split())\nif a > b:\n    a, b = b, a\n\nprint max(0, b-a-w)\n"}
{"label": 43, "index": 5585, "code": "#!/usr/bin/env python\n\nwab = [int(i) for i in input().split()]\n\nw = wab[0]\na = wab[1]\nb = wab[2]\n\nif (a <= b+w) and (b <= a+w):\n    print(0)\nelse:\n    if a < b:\n        print(abs(a-b+w))\n    elif b < a:\n        print(abs(a-b-w))\n    else:\n        print(w)"}
{"label": 43, "index": 5586, "code": "arg = input().split(' ')\nw = int(arg[0])\na = int(arg[1])\nb = int(arg[2])\n\nres = 0\n\nif a <= b <= a + w or a <= b + w <= a + w:\n  res = 0\nelse:\n  res = min(abs(b - (a + w)), abs(a - (b + w)))\n\nprint(res)\n"}
{"label": 43, "index": 5587, "code": "import sys, array, math, re, functools\ninput = lambda: sys.stdin.readline()\n@functools.lru_cache(maxsize = 10000)\n\ndef Main():\n  W, a, b = map(int ,input().split())\n  A = a + W\n  B = b + W\n  if b <= A <= b+W:\n    print(0)\n  elif a <= B <= a+W:\n    print(0)\n  elif A < b:\n    print(b - A)\n  elif B < a:\n    print(a - B)\n  elif A > b:\n    print(abs(a - b))\n  elif B > a:\n    print(abs(b - a))\n    \nif __name__ == '__main__':\n  Main()"}
{"label": 43, "index": 5588, "code": "w, a,b=map(int, input().split())\nprint(max(b-a-w,a-b-w,0))"}
{"label": 43, "index": 5589, "code": "w,a,b=(int(i)for i in input().split())\nif abs(a-b)>w:\n    print(min(abs(a+w-b),abs(a-w-b)))\nelse:\n    print(0)"}
{"label": 44, "index": 5590, "code": "# -*- coding:utf-8 -*-\na,b = map(int,input().split())\n\nc = (a+b)%24\nprint(c)\n"}
{"label": 44, "index": 5591, "code": "print(sum(map(int, input().split())) % 24)"}
{"label": 44, "index": 5592, "code": "A, B = list(map(int, input().split()))\nt = A + B\nif(t >= 24):\n    print(t - 24)\nelse:\n    print(t)\n"}
{"label": 44, "index": 5593, "code": "a,b = map(int, input().split())\nc = a + b\nif c<24:\n  print(c)\nelse:\n  print(c-24)"}
{"label": 44, "index": 5594, "code": "input_str = input()\ninput = input_str.split(' ')\noutput = (int(input[0]) +int(input[1]))%24\nprint(output)\n"}
{"label": 44, "index": 5595, "code": "A,B=[int(x) for x in input().split()]\nprint((A+B)%24)"}
{"label": 44, "index": 5596, "code": "print(sum(map(int, input().split()))%24)"}
{"label": 44, "index": 5597, "code": "#Remaining Time\nA,B = list(map(int, input().split()))\nprint((A+B)%24)"}
{"label": 44, "index": 5598, "code": "a, b=map(int, input().split())\nc=a+b\nif c<24:\n  print (c)\nelif c>=24:\n  print (c-24)\n"}
{"label": 44, "index": 5599, "code": "a, b = map(int, input().split())\nprint((a + b) % 24)"}
{"label": 44, "index": 5600, "code": "a = list(map(int, input().split()))\nprint(int((a[0] + a[1]) % 24))"}
{"label": 44, "index": 5601, "code": "a,b=map(int,input().split())\nprint((a+b)%24)\n"}
{"label": 44, "index": 5602, "code": "ab = list(map(int, input().split()))\n\nA = ab[0]\nB = ab[1]\n\nC = A+B\nif C >= 24:\n    C -= 24\n\nprint(C)"}
{"label": 44, "index": 5603, "code": "A,B=map(int, input().split())\nC=A+B\nif C>=24:\n    C=C-24\nprint(C)\n"}
{"label": 44, "index": 5604, "code": "a,b=raw_input().split(' ')\na=int(a)\nb=int(b)\n\nprint (a+b)%24"}
{"label": 44, "index": 5605, "code": "c, a = map(int, input().split())\nprint((c + a) % 24)"}
{"label": 44, "index": 5606, "code": "a,b=map(int,input().split())\ns=a+b\nif s-24>=0:\n    print(s-24)\nelse:\n    print(s)"}
{"label": 44, "index": 5607, "code": "# -*- coding: utf-8 -*-\nimport sys,copy,math,heapq,itertools as it,fractions,re,bisect,collections as coll\n\nA, B = map(int, raw_input().split())\nprint (A + B) % 24\n"}
{"label": 44, "index": 5608, "code": "str = input().split(' ')\na = int(str[0])\nb = int(str[1])\n\ns = a + b\nres = s\nif s >= 24:\n  res = s - 24\n\nprint(res)\n\n"}
{"label": 44, "index": 5609, "code": "def main():\n    A, B = map(int, input().split())\n\n    t = A + B\n    if t >= 24:\n        t -= 24\n    print(str(t))\n\nmain()\n"}
{"label": 44, "index": 5610, "code": "print sum(map(int, raw_input().split()))%24"}
{"label": 44, "index": 5611, "code": "A, B = map(int, input().split())\nif A + B >= 24:\n    print((A + B) - 24)\nelse:\n    print(A + B)\n    "}
{"label": 44, "index": 5612, "code": "tmp = input().split()\na, b = int(tmp[0]), int(tmp[1])\n\ns = a + b\n\nif s < 24:\n    print(s)\nelse:\n    print(s-24)"}
{"label": 44, "index": 5613, "code": "a, b = map(int, input().split())\nans = a + b\nif ans >= 24:\n    print(ans-24)\nelse:\n    print(ans)\n"}
{"label": 44, "index": 5614, "code": "A, B = map(int, input().split())\nprint((A + B) % 24)\n"}
{"label": 44, "index": 5615, "code": "a,b=map(int,raw_input().split())\nprint (a+b)%24\n"}
{"label": 44, "index": 5616, "code": "A,B = map(int, input().split())\nprint((A+B)%24)"}
{"label": 44, "index": 5617, "code": "# -*- coding: utf-8 -*-\nA,B = map(int, raw_input().split())\n\n\nprint((A+B)%24)"}
{"label": 44, "index": 5618, "code": "#coding:utf-8\n\nAB = raw_input().split()\nA = int(AB[0])\nB = int(AB[1])\n\nif A+B > 24:\n    print (A+B)%24\nelif A+B == 24:\n    print 0\nelse:\n    print A+B\n"}
{"label": 44, "index": 5619, "code": "def solve():\n    a, b = map(int, input().split())\n    if a + b >= 24:\n        print(a + b - 24)\n    else:\n        print(a + b)\n\nif __name__ == \"__main__\":\n    solve()"}
{"label": 44, "index": 5620, "code": "n = input()\ntmp_n = n.split(\" \")\n\na = tmp_n[0]\nb = tmp_n[1]\n\nt = int(a)+int(b)\n\nprint(int(t%24))\n"}
{"label": 44, "index": 5621, "code": "# -*- coding: utf-8 -*-\n# get two integers separated with half-width break\na, b = map(int, raw_input().split())\n# get a string\n\no = (a + b) % 24\n\n\n# output\nprint o\n"}
{"label": 44, "index": 5622, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\n\n\ndef main():\n    a,b = LI()\n\n    return (a+b)%24\n\n\n\nprint(main())\n"}
{"label": 44, "index": 5623, "code": "A,B = [int(x) for x in input().split(\" \")]\n\nprint((A + B) % 24)"}
{"label": 44, "index": 5624, "code": "a, b = map(int, input().split())\nif a + b >= 24:\n    print(a + b - 24)\nelse:\n    print(a + b)"}
{"label": 44, "index": 5625, "code": "A, B = map(int, input().split())\nprint( (A+B) % 24 )"}
{"label": 44, "index": 5626, "code": "A,B=map(int,input().split())\nprint((A+B)%24)"}
{"label": 44, "index": 5627, "code": "A,B = map(int, raw_input().split())\n\nprint (A+B)%24\n"}
{"label": 44, "index": 5628, "code": "a, b = [int(i) for i in input().split()]\nans = a + b\nif ans >= 24:\n    ans = ans - 24\nprint(ans)\n"}
{"label": 44, "index": 5629, "code": "a, b = map(int, input().split())\nprint((a + b) % 24)\n"}
{"label": 44, "index": 5630, "code": "a,b = map(int, raw_input().split())\nprint (a+b)%24"}
{"label": 44, "index": 5631, "code": "b = input().split()\na = [int(b[i]) for i in range(len(b))]\n\nif(a[0] + a[1] >= 24 ):\n  print(a[0] + a[1] - 24)\nelse:\n  print(a[0] + a[1])\n\n  "}
{"label": 44, "index": 5632, "code": "time = input()\nans = time.split()\nprint((int(ans[0]) + int(ans[1])) % 24)"}
{"label": 44, "index": 5633, "code": "#coding:utf-8\n\na, b = list(map(int, input().rstrip().split()))\nt = a + b\nif t >= 24:\n  t = t - 24\nprint(t)\n"}
{"label": 44, "index": 5634, "code": "# coding: utf-8\nimport sys\n\nfor line in sys.stdin.readlines():\n    a = line.strip().split(\" \")\n    a1 = int(a[0])\n    a2 = int(a[1])\n    print((a1+a2) % 24)"}
{"label": 44, "index": 5635, "code": "a, b = map(int, input().split())\n\nprint((a + b) % 24)"}
{"label": 44, "index": 5636, "code": "A, B = [int(v) for v in input().split()]\nprint ((A + B) % 24)"}
{"label": 44, "index": 5637, "code": "# coding: utf-8\n\na,b = map(int,raw_input().split())\nans = a+b\nif ans > 23:\n\tprint ans-24\nelse:\n\tprint ans"}
{"label": 44, "index": 5638, "code": "A, B = map(int, raw_input().split())\n\nprint (A + B) % 24"}
{"label": 44, "index": 5639, "code": "a,b=map(int,raw_input().split())\nc=(a+b)%24\nprint c\n"}
{"label": 44, "index": 5640, "code": "A, B = map(int, input().split())\nprint((A + B) % 24)"}
{"label": 44, "index": 5641, "code": "def ri(): return int(input())\ndef rli(): return list(map(int, input().split()))\ndef ris(): return list(input())\ndef pli(a): return \"\".join(list(map(str, a)))\n \na,b = rli()\nprint((a+b)%24)"}
{"label": 44, "index": 5642, "code": "# coding: utf-8\n\na = input().split()\nb = int(a[0]) + int(a[1])\n\nif b >= 24:\n    b = b -24\n\nprint(b)"}
{"label": 44, "index": 5643, "code": "# -*- coding: utf-8 -*-\n\n\ndef main():\n    a, b = [int(e) for e in input().split()]\n    answer = (a + b) % 24\n    return answer\n\n\nprint(main())\n"}
{"label": 44, "index": 5644, "code": "ab=(input())\na_,b_=ab.split()\na=int(a_)\nb=int(b_)\n\nif a+b>24:\n    print(a+b-24)\nelif a+b==24:\n    print(\"0\")\n        \nelse:\n    print(a+b)"}
{"label": 44, "index": 5645, "code": "A, B = list(map(int, input().split()))\nprint((A+B) % 24)"}
{"label": 44, "index": 5646, "code": "a,b = map(int, input().split())\nprint((a+b)%24)"}
{"label": 44, "index": 5647, "code": "a, b = map(int, input().split())\n\nprint((a + b) % 24)"}
{"label": 44, "index": 5648, "code": "a, b = map(int, raw_input().split())\nprint (a + b) % 24"}
{"label": 44, "index": 5649, "code": "A, B = list(map(int, input().split()))\nx = (A + B) % 24\nprint(x)"}
{"label": 44, "index": 5650, "code": "# -*- coding: utf-8 -*-\nA, B = [int(n) for n in input().split()]\nprint((A+B)%24)"}
{"label": 44, "index": 5651, "code": "a, b = map(int, input().split())\nprint((a + b) % 24)\n"}
{"label": 44, "index": 5652, "code": "a, b = map(int, input().split())\nprint ((a+b)%24)"}
{"label": 44, "index": 5653, "code": "a = map(int,raw_input().split())\n#a = int(raw_input())\n\nprint (a[0]+a[1])%24"}
{"label": 44, "index": 5654, "code": "import sys\n\nstdin = sys.stdin\n\n\ndef na(): return map(int, stdin.readline().split())\n\n\ndef ns(): return stdin.readline().strip()\n\n\na,b = na()\nprint((a+b)%24)"}
{"label": 44, "index": 5655, "code": "a,b = map(int,input().split())\nif a+b >= 24:\n    print(a+b-24)\nelse:\n    print(a+b)"}
{"label": 44, "index": 5656, "code": "A,B=map(int,raw_input().split())\nprint (A+B)%24"}
{"label": 44, "index": 5657, "code": "import sys\n\ndef get_read_func(fileobject):\n    if fileobject == None :\n        return raw_input\n    else:\n        return fileobject.readline\n\ndef main():\n    if len(sys.argv) > 1:\n        f = open(sys.argv[1])\n    else:\n        f = None\n    read_func = get_read_func(f);\n    input_raw = read_func()\n    top_str = input_raw.strip().split()\n    [A, B] = [int(top_str[0]), int(top_str[1])]\n    T = (A + B) % 24\n    print T\n\nif __name__ == '__main__':\n    main()"}
{"label": 44, "index": 5658, "code": "print(sum(map(int,input().split()))%24)"}
{"label": 44, "index": 5659, "code": "a, b = map(int, input().split())\n\nc = (a + b) % 24\nprint(c)\n"}
{"label": 44, "index": 5660, "code": "def solve():\n  ar = raw_input().split(' ')\n  A = int(ar[0])\n  B = int(ar[1])\n  return (A + B) % 24\n\nif __name__ == '__main__':\n  print solve()"}
{"label": 44, "index": 5661, "code": "a, b = map(int, input().split())\nprint ((a+b)%24)\n"}
{"label": 44, "index": 5662, "code": "\nA, B = map(int, input().split())\n\n\nprint((A + B) % 24)"}
{"label": 44, "index": 5663, "code": "a, b = map(int, input().split())\n\nprint((a+b)%24)\n"}
{"label": 44, "index": 5664, "code": "A,B=input().split()\nA=int(A)\nB=int(B)\n\nC=A+B\nif C>=24:\n    C-=24\nprint(C)"}
{"label": 44, "index": 5665, "code": "# -*- coding: utf-8 -*-\n\nA, B= map(int,raw_input().split())\n\nans = A + B\n\nif ans > 23:\n    ans -= 24\n    \nprint(ans)"}
{"label": 44, "index": 5666, "code": "A, B = map(int, input().split())\n\nif (A+B) < 24:\n    print(A+B)\nelse:\n    print(A+B-24)\n"}
{"label": 44, "index": 5667, "code": "a, b = map(int, raw_input().split())\nprint (a+b)%24"}
{"label": 44, "index": 5668, "code": "a,b = map(int,input().split())\nprint((a+b)%24)"}
{"label": 44, "index": 5669, "code": "x,y = map(int, input().split(' '))\nprint((x+y)%24)"}
{"label": 44, "index": 5670, "code": "A, B = map(int, raw_input().split())\nprint (A+B)%24"}
{"label": 44, "index": 5671, "code": "[a,b]=[int(i) for i in input().split()]\nprint((a+b)%24)"}
{"label": 44, "index": 5672, "code": "A,B = map(int,input().split())\nC = (A + B) % 24\nprint(C)"}
{"label": 44, "index": 5673, "code": "List=input().split(\" \")\na=int(List[0])\nb=int(List[1])\nc=a+b\nif c>=24:\n    print(str(c-24))\nelse:\n    print(str(c))\n"}
{"label": 44, "index": 5674, "code": "a, b = map(int, input().split())\nc = (a + b) % 24\nprint(c)"}
{"label": 44, "index": 5675, "code": "a,b = map(int, input().split())\n\nc = a+b\nif c > 23:\n    c -= 24\nprint(c)"}
{"label": 44, "index": 5676, "code": "import sys\n\na, b = sys.stdin.readline().split()\nprint (int(a) + int(b)) % 24"}
{"label": 44, "index": 5677, "code": "A, B = map(int, raw_input().split())\n\nresult = A + B\n\nwhile True:\n    if 24 <= result:\n        result -= 24\n    else:\n        break\n\nprint(result)"}
{"label": 44, "index": 5678, "code": "a, b = [int(t) for t in input().split()]\n\n\nprint((a+b)%24)"}
{"label": 44, "index": 5679, "code": "import sys\na = sys.stdin.readline()\na,b = a.strip().split(\" \")\nprint((int(a)+int(b))%24)"}
{"label": 44, "index": 5680, "code": "data = list(map(int,input().split(\" \")))\nx = sum(data)\nif x >= 24:\n\tprint(x%24)\nelse:\n    print(x)\n"}
{"label": 44, "index": 5681, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\nimport re\nimport math\nimport collections\nimport itertools\nimport functools\n\nDEBUG = True\nDEBUG = False\n\ndef dbg(*args):\n    if DEBUG:\n        print(\"DBG: \", file=sys.stderr, end=\"\")\n        print(*args, file=sys.stderr)\n\n\n\ndef main():\n    A, B = map(int, input().split())\n\n    print((A+B)%24)\n\nif __name__ == \"__main__\": main()\n"}
{"label": 44, "index": 5682, "code": "A, B = [int(n) for n in input().split()]\n\nprint((A+B)%24)"}
{"label": 44, "index": 5683, "code": "a, b = map(int, raw_input().split())\nprint (a + b) % 24\n"}
{"label": 44, "index": 5684, "code": "A, B = map(int, input().split())\nprint((A + B) % 24)\n"}
{"label": 44, "index": 5685, "code": "A, B = map(int, input().split())\nprint((A + B) % 24)"}
{"label": 44, "index": 5686, "code": "A, B = map(int, input().split())\nans = A + B\nif ans >= 24:\n    ans -= 24\nprint(ans)\n"}
{"label": 44, "index": 5687, "code": "A, B = [int(i) for i in input().split()]\nprint((A+B)%24)"}
{"label": 44, "index": 5688, "code": "a, b = list(map(int, input().split()))\nprint((a+b)%24)\n"}
{"label": 44, "index": 5689, "code": "print sum(map(int, raw_input().split()))%24"}
{"label": 44, "index": 5690, "code": "A,B=map(int,input().split())\nif (A+B<24):\n print(A+B)\nelse:\n print (A+B-24)"}
{"label": 44, "index": 5691, "code": "a,b=map(int,input().split())\n\nans = (a+b)%24\n\nprint(ans)"}
{"label": 44, "index": 5692, "code": "a, b = [int(x) for x in input().split()]\nprint((a + b) % 24)\n"}
{"label": 44, "index": 5693, "code": "A, B = map(int, raw_input().split(\" \"))\nprint (A + B) % 24"}
{"label": 44, "index": 5694, "code": "A, B = map(int, input().split())\nprint((A + B) % 24)\n"}
{"label": 44, "index": 5695, "code": "a,b=map(int,raw_input().split())\nprint (a+b)%24"}
{"label": 44, "index": 5696, "code": "a, b = map(int, raw_input().split())\n\nprint (a + b) % 24"}
{"label": 44, "index": 5697, "code": "a,b=map(int,input().split())\nprint((a + b) % 24)"}
{"label": 44, "index": 5698, "code": "L = [int(i) for i in input().split(' ')]\nprint((L[0] + L[1]) % 24)"}
{"label": 44, "index": 5699, "code": "import sys\n\nline = sys.stdin.readline()\nlst = line.split()\na = int(lst[0])\nb = int(lst[1])\n\nprint ((a + b) % 24)\n"}
{"label": 44, "index": 5700, "code": "a,b=[int(i) for i in input().split()]\nif a+b>=24:\n    print(a+b-24)\nelse : print(a+b)"}
{"label": 44, "index": 5701, "code": "A, B = map(int, input().split())\n\nsta = A + B\nif (sta >= 24):\n    sta = sta - 24\n\nprint(sta)\n"}
{"label": 44, "index": 5702, "code": "import sys\n\na, b = map(int, raw_input().split())\nprint (a + b) % 24"}
{"label": 44, "index": 5703, "code": "if __name__ == '__main__':\n    a, b = map(int, input().split())\n    diff = (a + b) % 24\n    print(diff)\n"}
{"label": 44, "index": 5704, "code": "#ABC057A\n\na,b=map(int,raw_input().split())\nprint (a+b)%24\n"}
{"label": 44, "index": 5705, "code": "input_line1 = map(int,raw_input().split(\" \"))\n#input_line2 = map(int,raw_input().split(\" \"))\n#input_line = raw_input().split(\" \")\na = input_line1[0]\nb = input_line1[1]\n\nn = a + b\nif n >= 24:\n\tprint n - 24\nelse:\n\tprint n"}
{"label": 44, "index": 5706, "code": "A,B = (map(int, input().split()))\nprint (A + B if A + B < 24 else A + B - 24)"}
{"label": 44, "index": 5707, "code": "input_lines = raw_input()\nA=int(input_lines.split()[0])\nB=int(input_lines.split()[1])\nprint (A+B)%24 "}
{"label": 44, "index": 5708, "code": "x,y = map(int, input().split(' '))\nprint((x+y)%24)"}
{"label": 44, "index": 5709, "code": "times = input().split()\na = int(times[0])\nb = int(times[1])\nif a + b >= 24:\n    print(a + b - 24 )\nelse:\n    print(a + b)"}
{"label": 44, "index": 5710, "code": "a, b = map(int, input().split())\nt = a+b\n\nif t < 24:\n    print(t)\nelse :\n    print(t - 24)"}
{"label": 44, "index": 5711, "code": "a,b = input().split()\na = int(a)\nb = int(b)\nif a+b>=24:\n    c = int(a+b-24)\n    print(c)\nelse :\n    d = int(a+b)\n    print(d)"}
{"label": 44, "index": 5712, "code": "if __name__ == '__main__':\n    a,b = map(int, input().split())\n    print ((a + b) % 24)\n"}
{"label": 44, "index": 5713, "code": "a,b=map(int,input().split())\nn=a+b\nprint(n%24)"}
{"label": 44, "index": 5714, "code": "a,b = map(int,input().split())\nprint((a+b)%24)\n"}
{"label": 44, "index": 5715, "code": "a, b = map(int, input().split())\nprint((a + b) % 24)"}
{"label": 44, "index": 5716, "code": "a,b = [int(i) for i in input().split()]\n\nprint((a+b) % 24 )\n"}
{"label": 44, "index": 5717, "code": "import sys\n\nINF = 10**9+7\n\nstdin = sys.stdin\ndef na(): return map(int, stdin.readline().split())\ndef ns(): return stdin.readline().strip()\ndef nsl(): return list(stdin.readline().strip())\ndef ni(): return int(stdin.readline())\ndef nil(): return list(map(int, stdin.readline().split()))\n\na, b = nil()\n\nprint((a+b)%24)\n\n"}
{"label": 44, "index": 5718, "code": "A,B = (map(int, input().split()))\nprint (A + B if A + B < 24 else A + B - 24)"}
{"label": 44, "index": 5719, "code": "inpt = map(int, raw_input().split())\n\nprint (inpt[0] + inpt[1]) % 24\n"}
{"label": 45, "index": 5720, "code": "N,M= (map(int,raw_input().split()))\nab=[]\ncd=[]\nfor i in range(N):\n    ab.append(map(int,raw_input().split()))\n\nfor i in range(M):\n    cd.append(map(int,raw_input().split()))\n\nfor i in range(N):\n    ab[i].append(0)\n    xmin=100000000000000\n    for j in range(M):\n        k =abs(ab[i][0]-cd[j][0])+abs(ab[i][1]-cd[j][1])\n        if xmin > k:\n            xmin=k\n            ab[i][2]=j+1\n            \nfor i in range(N):\n    print ab[i][2]"}
{"label": 45, "index": 5721, "code": "N,M = map(int,input().split())\nS = []\nT = []\nfor _ in range(N):\n  a,b = map(int,input().split())\n  S.append( (a,b) )\nfor _ in range(M):\n  a,b = map(int,input().split())\n  T.append( (a,b) )\nfor (a,b) in S:\n  ans = 0\n  best = 0\n  for i in range(M):\n    c,d = T[i]\n    here = abs(a-c)+abs(b-d)\n    if ans == 0 or best > here:\n      ans = (i+1)\n      best = here\n  print(ans)"}
{"label": 45, "index": 5722, "code": "# -*- coding: utf-8 -*-\n# get two integers separated with half-width break\nN, M = map(int, raw_input().split())\nn = []\nm = []\nfor i in range(N):\n    n.append(map(int, raw_input().split()))\n\nfor i in range(M):\n    m.append(map(int, raw_input().split()))\n\nfor i in range(N):\n    distances = [abs(n[i][0] - m[j][0]) + abs(n[i][1] - m[j][1]) for j in range(M)]\n    print(distances.index(min(distances)) + 1)\n"}
{"label": 45, "index": 5723, "code": "N, M = map(int, input().split(\" \"))\n \nstudent = [];\npos = [];\nfor i in range(N) :\n\ta, b = map(int, input().split(\" \"))\n\tstudent.append((a, b))\n \nfor i in range(M) :\n\ta, b = map(int, input().split(\" \"))\n\tpos.append((a,b))\n \nfor st in student :\n\tans = -1;\n\tscore = 10**10;\n\tfor i in range(M) :\n\t\ttmpscore = abs(st[0] - pos[i][0]) + abs(st[1] - pos[i][1])\n\t\tif score > tmpscore :\n\t\t\tscore = tmpscore;\n\t\t\tans = i;\n\tprint(ans+1);"}
{"label": 45, "index": 5724, "code": "num = list(map(int, input().split()))\nn = num[0]\nm = num[1]\nstudents = [list(map(int, input().split())) for i in range(n)]\npoints = [list(map(int, input().split())) for i in range(m)]\n\nans = [0] * n\nfor i, student in enumerate(students):\n    for j, point in enumerate(points):\n        distance = abs(student[0] - point[0]) + abs(student[1] - point[1])\n        if j == 0:\n            mini = distance\n        elif distance < mini:\n            mini = distance\n            ans[i] = j\n\nfor num in ans:\n    print(num + 1)\n"}
{"label": 45, "index": 5725, "code": "n, m = map(int, input() .split())\nman = []\nLocation = []\n\nfor i in range(n):\n    a, b = map(int, input() .split())\n    man.append([a, b])\n#print(man)\nfor i in range(m):\n    a, b = map(int, input() .split())\n    Location.append([a, b])\n#print(Location)\n\nfor i in range(n):\n    dis = []\n    for j in range(m):\n        dis.append(abs(man[i][0] - Location[j][0]) + abs(man[i][1] - Location[j][1]))\n    print(dis.index(min(dis)) + 1)"}
{"label": 45, "index": 5726, "code": "#Checkpoints\nN,M = list(map(int, input().split()))\ns,c =[],[]\nfor i in range(N):\n    s.append( list(map(int, input().split())) )\nfor i in range(M):\n    c.append( list(map(int, input().split())) )\n    \nfor si in s:\n    l = [ abs(si[0]-c[i][0])+abs(si[1]-c[i][1]) for i in range(M) ]\n    print(l.index(min(l))+1)"}
{"label": 45, "index": 5727, "code": "N, M = map(int, raw_input().split())\nS = [map(int, raw_input().split()) for _ in xrange(N)]\nP = [map(int, raw_input().split()) for _ in xrange(M)]\nC = []\n\ndef dist(s, p):\n\treturn abs(s[0]-p[0])+abs(s[1]-p[1])\n\nfor s in S:\n\tmin_dist = dist(s, P[0])\n\tmin_p = 0\n\tfor i in xrange(1, M):\n\t\td = dist(s, P[i])\n\t\tif  d < min_dist:\n\t\t\tmin_dist = d\n\t\t\tmin_p = i\n\tC.append(min_p+1)\nfor c in C:\n\tprint c \n"}
{"label": 45, "index": 5728, "code": "N, M = list(map(int, input().split()))\n\na, b = [0] * N, [0] * N\nfor i in range(N):\n    a[i], b[i] = list(map(int, input().split()))\n\nc, d = [0] * M, [0] * M\nfor i in range(M):\n    c[i], d[i] = list(map(int, input().split()))\n\ndef calc_dst(n, m):\n    return abs(a[n]-c[m]) + abs(b[n]-d[m])\n\nfor n in range(N):\n    nearest_id = 0\n    nearest_dst = calc_dst(n, 0)\n    for m in range(1, M):\n        dst = calc_dst(n, m)\n        if nearest_dst > dst:\n            nearest_id = m\n            nearest_dst = dst\n\n    print(nearest_id + 1)\n\n"}
{"label": 45, "index": 5729, "code": "import os\nimport sys\n\n\ndef manhatten(tupleA,tupleB):\n\treturn abs(tupleA[0]-tupleB[0]) + abs(tupleA[1]-tupleB[1])\n\nheader = input().split()\nN,M = int(header[0]),int(header[1])\nstudents = []\ncheckpoints = []\n\nfor i in range(N):\n\tstudent = input().split()\n\tstudent = [int(x) for x in student]\n\tstudents.append(tuple(student))\n\nfor i in range(M):\n\tcheckpoint =input().split()\n\tcheckpoint = [int(x) for x in checkpoint]\n\tcheckpoints.append(tuple(checkpoint))\n\nfor student in students:\n\tdistance = []\n\tfor checkpoint in checkpoints:\n\t\td = manhatten(student,checkpoint)\n\t\tdistance.append(d)\n\tprint(distance.index(min(distance))+ 1)"}
{"label": 45, "index": 5730, "code": "N, M = map(int, input().split())\nstudents = []\ncheckpoints = []\nfor i in range(N):\n    students.append(list(map(int,input().split())))\nfor i in range(M):\n    checkpoints.append(list(map(int, input().split())))\n\nfor sx, sy in students:\n    mindist = 10 ** 9\n    num = 0\n    for i in range(M):\n        cx, cy = checkpoints[i]\n        dist = abs(sx-cx) + abs(sy-cy)\n        if mindist > dist:\n            mindist = dist\n            num = i\n    print(num+1)\n"}
{"label": 45, "index": 5731, "code": "(n, m) = [int(x) for x in input().split(' ')]\na = []\nb = []\nfor i in range(n):\n  s = input().split(' ')\n  a.append(int(s[0]))\n  b.append(int(s[1]))\nc = []\nd = []\nfor j in range(m):\n  s = input().split(' ')\n  c.append(int(s[0]))\n  d.append(int(s[1]))\n\nfor i in range(n):\n  mindis = 10 ** 9\n  res = 0\n  for j in range(m):\n    dist = abs(a[i] - c[j]) + abs(b[i] - d[j])\n    if dist < mindis:\n      mindis = dist\n      res = j + 1\n  print(res)\n"}
{"label": 45, "index": 5732, "code": "import math\n\nn,m=[int(i) for i in input().split()]\nab=[]\ncd=[]\nfor i in range(n):\n    x,y=[int(i) for i in input().split()]\n    ab.append([x,y])\nfor i in range(m):\n    x,y=[int(i) for i in input().split()]\n    cd.append([x,y])\n\n\nfor i in range(n):\n    dist=1000000000\n    point=0\n    for j in range(m):\n        temp=abs(ab[i][0]-cd[j][0])+abs(ab[i][1]-cd[j][1])\n        if temp<dist:\n            dist=temp\n            point=j+1\n    print(point)"}
{"label": 45, "index": 5733, "code": "import math\n\nn, m = map(int, input().split())\n\n# student input\nstudent = []\nfor i in range(n):\n    a, b = map(int, input().split())\n    student.append([a, b])\n\n# check point input\ncheck = []\nfor j in range(m):\n    c, d = map(int, input().split())\n    check.append([c, d])\n\n# calc\nfor s in student:\n    distance = 10e9\n    near = 0\n    for index, k in enumerate(check):\n        v = math.fabs(s[0] - k[0]) + math.fabs(s[1] - k[1])\n        if v < distance:\n            distance = v\n            near = index + 1\n    print(near)\n"}
{"label": 45, "index": 5734, "code": "#!/usr/bin/env python3\n# input\nn, m = map(int, input().split())\npersons = []\nchecks = []\nfor i in range(n):\n    point = tuple(map(int, input().split()))\n    persons.append(point)\nfor i in range(m):\n    point = tuple(map(int, input().split()))\n    checks.append(point)\n\n# print(persons)\n# print(checks)\n    \ndef get_distance(person, check):\n    return abs(person[0] - check[0]) + abs(person[1] - check[1])\n    \nfor i in range(n):\n    min_distance = 10 ** 10\n    min_distance_point_num = -1\n\n    # calculate min distance from n to each m\n    for j in range(m):\n        distance = get_distance(persons[i], checks[j])\n        if distance < min_distance:\n            min_distance = distance\n            min_distance_point_num = j + 1\n\n    print(min_distance_point_num)\n"}
{"label": 45, "index": 5735, "code": "def distance(p1, p2):\n    return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n\nn, m = map(int, input().split())\n\nstudent = []\ncheckpoint = []\n\nfor i in range(0, n):\n    a, b = map(int, input().split())\n    student.append((a, b))\n\nfor j in range(0, m):\n    c, d = map(int, input().split())\n    checkpoint.append((c, d))\n\nfor i in range(0, n):\n    dist = 100000000000\n    ans_num = 0\n    for j in range(0, m):\n        if distance(student[i], checkpoint[j]) < dist:\n            dist = distance(student[i], checkpoint[j])\n            ans_num = j + 1\n    print(ans_num)\n"}
{"label": 45, "index": 5736, "code": "n, m = map(int, input().split())\ns = []\nd = []\nfor i in range(n):\n    x, y = map(int, input().split())\n    s.append([x, y])\nfor i in range(m):\n    x, y = map(int, input().split())\n    d.append([x, y])\nfor i in s:\n    a = 1\n    c = abs(i[0] - d[0][0]) + abs(i[1] - d[0][1])\n    for j in range(1, m):\n        c_t = abs(i[0] - d[j][0]) + abs(i[1] - d[j][1])\n        if c_t < c:\n            c = min(c, c_t)\n            a = j + 1\n    print(a)\n"}
{"label": 45, "index": 5737, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\nimport re\nimport math\nimport collections\nimport itertools\nimport functools\n\nDEBUG = True\nDEBUG = False\n\ndef dbg(*args):\n    if DEBUG:\n        print(\"DBG: \", file=sys.stderr, end=\"\")\n        print(*args, file=sys.stderr)\n\ndef dist(a, b):\n    return abs(a[0]-b[0]) + abs(a[1]-b[1])\n\ndef main():\n    N, M = map(int, input().split())\n    A = []\n    for _ in range(N):\n        a, b = map(int, input().split())\n        A.append((a,b))\n    B = []\n    for _ in range(M):\n        c, d = map(int, input().split())\n        B.append((c,d))\n\n    for i, a in enumerate(A):\n        argmin = 0\n        dmin = dist(a, B[0])\n        for j, b in enumerate(B):\n            d = dist(a, b)\n            if d < dmin:\n                argmin = j\n                dmin   = d\n        print(argmin+1)\n\nif __name__ == \"__main__\": main()\n"}
{"label": 45, "index": 5738, "code": "N,M = [int(i) for i in input().split()]\na = [0]*N\nb = [0]*N\nc = [0]*M\nd = [0]*M\n\nfor i in range(N):\n    a[i], b[i] = [int(i) for i in input().split()]\n\nfor i in range(M):\n    c[i], d[i] = [int(i) for i in input().split()]\n\nfor n in range(N):\n    near_point = 0\n    shortest = 10**9\n    for m in range(M):\n        manhattan = abs(a[n] - c[m]) + abs(b[n] - d[m])\n        if manhattan < shortest:\n            shortest = manhattan\n            near_point = m + 1\n    print(near_point)"}
{"label": 45, "index": 5739, "code": "# -*- coding:utf-8 -*-\nn,m = map(int,input().split())\naa = [list(map(int,input().split())) for i in range(n)]\ncc = [list(map(int,input().split())) for i in range(m)]\n\ncheckpoints = []\nfor a in aa:\n    d = float(\"inf\")\n    checkpoint = -1\n    for i,c in enumerate(cc):\n        tmpd = min(abs(a[0]-c[0])+abs(a[1]-c[1]),d)\n        if not tmpd == d:\n            checkpoint = i+1\n        d = tmpd\n    print(checkpoint)\n"}
{"label": 45, "index": 5740, "code": "n ,m = map(int, input().split())\na = []\nb = []\nc = []\nd = []\nfor i in range(n):\n    x, y = map(int, input().split())\n    a.append(x)\n    b.append(y)\nfor i in range(m):\n    x, y = map(int, input().split())\n    c.append(x)\n    d.append(y)\n\nfor i in range(n):\n    ans = 0\n    for j in range(m):\n        dist = abs(a[i]-c[j]) + abs(b[i]-d[j])\n        if dist < abs(a[i]-c[ans]) + abs(b[i]-d[ans]):\n            ans = j\n    print (ans+1)\n"}
{"label": 45, "index": 5741, "code": "def main():\n    N, M = map(int, input().split())\n\n    ab = []\n    i = 0\n    while i < N:\n        ab += [tuple(map(int, input().split()))]\n        i += 1\n\n    cd = []\n    i = 0\n    while i < M:\n        cd += [tuple(map(int, input().split()))]\n        i += 1\n\n    i = 0\n    while i < N:\n        j = 0\n        l = []\n        while j < M:\n            l.append(abs(ab[i][0] - cd[j][0]) + abs(ab[i][1] - cd[j][1]))\n            j += 1\n        i += 1\n        print(l.index(min(l)) + 1)\nmain()\n"}
{"label": 45, "index": 5742, "code": "# -*- coding: utf-8 -*-\n\nimport sys\nimport os\n\n\nN, M = list(map(int, input().split()))\nstudents = []\ncheckpoints = []\n\nfor i in range(N):\n    a, b = list(map(int, input().split()))\n    students.append([a, b])\n\nfor i in range(M):\n    a, b = list(map(int, input().split()))\n    checkpoints.append([a, b])\n\nfor student in students:\n    min_dist = float('inf')\n    min_i = None\n    for i, checkpoint in enumerate(checkpoints):\n        manhattan_dist = abs(checkpoint[0] - student[0]) + abs(checkpoint[1] - student[1])\n        if manhattan_dist < min_dist:\n            min_dist = manhattan_dist\n            min_i = i\n    print(min_i + 1)\n"}
{"label": 45, "index": 5743, "code": "# -*- coding: utf-8 -*-\n# !/usr/bin/env python\n# vim: set fileencoding=utf-8 :\n\n\"\"\"\n#\n# author:   noname\n# url:      https://github.com/pettan0818\n# license:  mit license\n# created: \u6728 10/12 18:57:45 2017\n\n# usage\n#\n\"\"\"\nimport math\n\n\ndef calc_distance(student_post, checkpoint_post):\n    return int(math.fabs(student_post[0] - checkpoint_post[0]) + math.fabs(student_post[1] - checkpoint_post[1]))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\n    first = input()\n    first = first.split(\" \")\n    data = [int(line) for line in first]\n\n    student_num = data[0]\n    checkpoint_num = data[1]\n\n    student_pos_data = [[int(i) for i in input().split(\" \")] for i in range(student_num)]\n    checkpoint_data = [[int(i) for i in input().split(\" \")] for i in range(checkpoint_num)]\n\n    for each_student in student_pos_data:\n        dis_list = [calc_distance(each_student, i) for i in checkpoint_data]\n        print(dis_list.index(min(dis_list)) + 1)\n"}
{"label": 45, "index": 5744, "code": "N, M  = list(map(int,input().split()))\n\ngaku = []\nfor i in range(N):\n\tgaku.append(tuple(map(int,input().split())))\n\ncp = []\nfor i in range(M):\n\tcp.append(tuple(map(int,input().split())))\n\ndef dis(x,y,a,b):\n\treturn(abs(x-a)+abs(y-b))\n\nres = []\n\nfor x,y in (gaku):\n\tc = 1\n\tmind = float(\"inf\")\n\tminc = 0\n\tfor a,b in (cp):\n\t\tif dis(x,y,a,b) < mind:\n\t\t\tminc = c\n\t\t\tmind = dis(x,y,a,b)\n\t\tc+=1\n\tres.append(minc)\n\n\nfor i in res:\n\tprint(i)"}
{"label": 45, "index": 5745, "code": "def md(a,b,c,d):\n    return abs(a-c) + abs(b-d)\nn,m = map(int, input().split())\ns = []\nfor i in range(n):\n    y,x = map(int, input().split())\n    s.append((y,x))\nc = []\nfor i in range(m):\n    y,x = map(int, input().split())\n    c.append((y,x))\nfor i in range(n):\n    min_j = 0\n    min_d = float('inf')\n    for j in range(m):\n        d = md(s[i][0], s[i][1], c[j][0], c[j][1])\n        if min_d > d:\n            min_j = j\n            min_d = d\n    print(min_j+1)\n\n\n"}
{"label": 45, "index": 5746, "code": "n, m = map(int, input().split())\n\nstudents = []\nfor i in range(n):\n    axis = [int(x) for x in input().split()]\n    students.append(axis)\n\ncheckpoints = []\nfor i in range(m):\n    axis = [int(x) for x in input().split()]\n    checkpoints.append(axis)\n\nans = []\nfor s_x, s_y in students:\n    distances = []\n    for c_x, c_y in checkpoints:\n        distances.append(abs(s_x - c_x) + abs(s_y - c_y))\n    i_c = 0\n    i_d = 4 * 10 ** 8 + 1\n    for cnt, distance in enumerate(distances, 1):\n        if i_d > distance:\n            i_d = distance\n            i_c = cnt\n        else:\n            pass\n    ans.append(i_c)\n\nfor i in ans:\n    print(i)"}
{"label": 45, "index": 5747, "code": "def dist(a,b,c,d):\n    return abs(a-c)+abs(b-d)\n\nN,M=map(int,raw_input().split())\nns=[]\nfor i in xrange(N):\n    a,b=map(int,raw_input().split())\n    ns.append((a,b))\nms=[]\nfor i in xrange(M):\n    c,d=map(int,raw_input().split())\n    ms.append((c,d))\n\nfor a,b in ns:\n    mini=None\n    idx=None\n    cnt=1\n    for c,d in ms:\n        \n        di = dist(a,b,c,d)\n        if di < mini or mini==None:\n            idx=cnt\n            mini=di\n        cnt+=1\n    print idx\n"}
{"label": 45, "index": 5748, "code": "n,m=map(int,input().split())\na,b=[0]*n,[0]*n\nfor i in range(n):\n    a[i],b[i]=map(int,input().split())\nc,d=[0]*m,[0]*m\nfor i in range(m):\n    c[i],d[i]=map(int,input().split())\n\nfor i in range(n):\n    res=min(range(m),key=lambda j:abs(a[i]-c[j])+abs(b[i]-d[j]))\n    print(res+1)\n"}
{"label": 45, "index": 5749, "code": "import sys\nimport numpy as np\n\nN, M = (int(i) for i in input().split(\" \"))\nS = [input().split(\" \") for i in range(N + M)]\n\nseito = S[0:N]\ncheck = S[N:N+M]\n\nkyori = np.zeros(M)\n\nfor j in range(0,N):\n\tfor i in range(0,M):\n\t\tkyori[i] = abs(int(seito[j][0]) - int(check[i][0])) + abs(int(seito[j][1]) - int(check[i][1]))\n\t#kyori\u304c\u4e00\u756a\u4f4e\u3044i\u3092\u51fa\u529b\u3059\u308b\n\n\tnum = np.argmin(kyori) + 1\n\tprint(num)\n\n\n\n"}
{"label": 45, "index": 5750, "code": "def solve():\n  ar = raw_input().split(' ')\n  N = int(ar[0])\n  M = int(ar[1])\n  sts = []\n  for n in range(N) :\n    ar = raw_input().split(' ')\n    a = int(ar[0])\n    b = int(ar[1])\n    sts.append((a, b))\n  cks = []\n  for m in range(M) :\n    ar = raw_input().split(' ')\n    c = int(ar[0])\n    d = int(ar[1])\n    cks.append((c, d))\n\n  for st in sts :\n    #print st\n    mind = float('inf')\n    mini = -1\n    for i in range(M):\n      ckx = cks[i][0]\n      cky = cks[i][1]\n      d = abs(st[0] - ckx) + abs(st[1] - cky)\n      #print 'd=',d\n      if d < mind :\n        mind = d\n        mini = i\n    #print 'mind=',mind, ',mini=',mini \n    print mini + 1\n\nif __name__ == '__main__':\n  solve()"}
{"label": 45, "index": 5751, "code": "import sys\n\nstdin = sys.stdin\n\n\ndef na(): return map(int, stdin.readline().split())\n\n\ndef ns(): return stdin.readline().strip()\n\n\nn,m=na()\nabss = []\nfor i in range(n):\n    abss.append(list(na()))\ncds = []\nfor i in range(m):\n    cds.append(list(na()))\n\nfor ab in abss:\n    mind = 999999999\n    argmin = -1\n    import math\n    for j in range(m):\n        v = abs(cds[j][0]-ab[0])+abs(cds[j][1]-ab[1])\n        if v < mind:\n            mind = v\n            argmin = j\n    print(argmin+1)"}
{"label": 45, "index": 5752, "code": "import math;\n\nn, m = map(int, input().split(\" \"));\nab = [];\nfor i in range(0, n):\n    ab.append(input().split(\" \"));\n\ncd = [];\nfor i in range(0, m):\n    cd.append(input().split(\" \"));\n\nfor i in range(0, n):\n    dist=9999999999999\n    nearm=0;\n    for j in range(0, m):\n         dist2 = math.fabs(int(ab[i][0]) - int(cd[j][0])) + math.fabs(int(ab[i][1]) - int(cd[j][1]));\n         if dist2 < dist:\n            dist = dist2;\n            nearm=j;\n    print(nearm+1);\n"}
{"label": 45, "index": 5753, "code": "N, M = list(map(int, input().split()))\nstudents = list()\ncheckpoints = list()\n\nfor i in range(N):\n\tstudents.append(list(map(int, input().split())))\n\nfor i in range(M):\n\tcheckpoints.append(list(map(int, input().split())))\n\nans = [0] * N\n\nfor i in range(N):\n\tmindif = 4 * 10**8 + 1\n\tfor j in range(M):\n\t\tdif = abs(students[i][0] - checkpoints[j][0]) + abs(students[i][1] - checkpoints[j][1])\n\t\tif dif < mindif:\n\t\t\tmindif = dif\n\t\t\tans[i] = j + 1\n\nfor i in range(N):\n\tprint(ans[i])\n"}
{"label": 45, "index": 5754, "code": "# -*- coding: utf-8 -*-\n# get a integer\n# get two integers separated with half-width break\nn, m = map(int, raw_input().split())\n# get a string\nnn = range(2*n)\nmm = range(2*m)\nfor i in range(n):\n    nn[i*2], nn[i*2 + 1] = map(int, raw_input().split())\nfor i in range(m):\n    mm[i*2], mm[i*2 + 1] = map(int, raw_input().split())\n#print nn,mm\nfor i in range(n):\n    for j in range(m):\n        s = abs(mm[j*2]-nn[i*2]) + abs(mm[j*2+1]-nn[i*2+1])\n        if j == 0:\n            ma = s\n            p = j + 1\n        elif s < ma:\n            ma = s\n            p = j + 1\n    print p\n"}
{"label": 45, "index": 5755, "code": "N, M = list(map(int, input().split(\" \")))\n\nab = []\ncd = []\n\nfor _ in range(N):\n    a, b = list(map(int, input().split(\" \")))\n    ab.append([a, b])\n    \nfor _ in range(M):\n    c, d = list(map(int, input().split(\" \")))\n    cd.append([c, d])\n\nfor i in range(N):\n    best = 1e9\n    best_idx = 0\n    for j in range(M):\n        manhattan = abs(ab[i][0] - cd[j][0]) + abs(ab[i][1] - cd[j][1])\n        if manhattan < best:\n            best = manhattan\n            best_idx = j\n            \n    print(best_idx+1)\n    "}
{"label": 45, "index": 5756, "code": "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Wed Apr  5 11:25:59 2017\n\n@author: syaga\n\"\"\"\nimport math\n\n\ndef getMan(x, y):\n    man = math.fabs(x[0]-y[0])+math.fabs(x[1]-y[1])\n    return man\n\nif __name__ == \"__main__\":\n    student = []\n    check = []\n    answer = []\n    N, M = list(map(int, input().split()))\n    for i in range(N):\n        student.append(list(map(int, input().split())))\n    for i in range(M):\n        check.append(list(map(int, input().split())))\n    for i in student:\n        min_tmp = 1000000000000000000\n        min_index = 0\n        for j in check:\n            man = getMan(i, j)\n            if min_tmp > man:\n                min_tmp = man\n                min_index = check.index(j)+1\n        answer.append(min_index)\n    for i in answer:\n        print(i)\n"}
{"label": 45, "index": 5757, "code": "N, M = map(int, input().split())\nX = []\nY = []\nfor i in range(N):\n    a, b = map(int, input().split())\n    X.append((a, b))\nfor i in range(M):\n    c, d = map(int, input().split())\n    Y.append((c, d))\n\n\ndef dist(p, q):\n    return abs(p[0] - q[0]) + abs(p[1] - q[1])\n\n\nfor i in range(N):\n    ans = 1e9\n    anss = -1\n    for j in range(M):\n        if ans > dist(X[i], Y[j]):\n            ans = dist(X[i], Y[j])\n            anss = j + 1\n    print(anss)\n"}
{"label": 45, "index": 5758, "code": "def calcManhattanDistance(student, checkpoint):\n    return abs(student[0] - checkpoint[0]) + abs(student[1] - checkpoint[1])\n\n\nif __name__ == \"__main__\":\n    # input process\n    N, M = map(int, input().split())\n    students = [list(map(int, input().split())) for i in range(N)]\n    checkpoints = [list(map(int, input().split())) for i in range(M)]\n\n    # calculation process\n    for student in students:\n        distance_list = []\n\n        for checkpoint in checkpoints:\n            distance_list.append(calcManhattanDistance(student, checkpoint))\n\n        # print the first index(+1) of minimum value\n        minval = min(distance_list)\n        print(distance_list.index(minval) + 1)\n\n    # END"}
{"label": 45, "index": 5759, "code": "# -*- coding:utf-8 -*-\nN, M = map(int, input().split())\ncoordinate = []\ncheckpoint = []\ntmplist = []\nfor tmp in range(N):\n    a, b = map(int, input().split())\n    coordinate.append((a,b))\nfor tmp in range(M):\n    c, d = map(int, input().split())\n    checkpoint.append((c,d))\nfor i in range(N):\n    for j in range(M):\n        tmplist.append(abs(coordinate[i][0]-checkpoint[j][0])+abs(coordinate[i][1]-checkpoint[j][1]))\n    print(tmplist.index(min(tmplist))+1)\n    tmplist = []"}
{"label": 45, "index": 5760, "code": "def distance(s, c):\n    return abs(s[0] - c[0]) + abs(s[1] - c[1])\n\n\ndef findshortest(s, checkpoints):\n    shortest = 0\n    for i in range(1, len(checkpoints)):\n        if distance(s, checkpoints[i]) < distance(s, checkpoints[shortest]):\n            shortest = i\n    return shortest\n\nn, m = map(int, input().split())\nstudents = []\ncheckpoints = []\nfor _ in range(n):\n    a, b = map(int, input().split())\n    students.append((a, b))\nfor _ in range(m):\n    c, d = map(int, input().split())\n    checkpoints.append((c, d))\n\nfor s in students:\n    print(findshortest(s, checkpoints) + 1)\n"}
{"label": 45, "index": 5761, "code": "N, M = map(int, input().split())\n\na = []\nb = []\nc = []\nd = []\n\nfor _ in range(N):\n    _a, _b = map(int, input().split())\n    a.append(_a)\n    b.append(_b)\n\nfor _ in range(M):\n    _c, _d = map(int, input().split())\n    c.append(_c)\n    d.append(_d)\n\nfor i in range(N):\n    maxIdx = 0\n    for j in range(M):\n        d1 = abs(a[i] - c[j]) + abs(b[i] - d[j])\n        d2 = abs(a[i] - c[maxIdx]) + abs(b[i] - d[maxIdx])\n        if d1 < d2:\n            maxIdx = j\n\n    print(maxIdx + 1)"}
{"label": 45, "index": 5762, "code": "# -*- coding: utf-8 -*-\nimport numpy as np\nimport math\n\nN,M = map(int, raw_input().split())\na = np.zeros(N,dtype='int')\nb = np.zeros(N,dtype='int')\nc = np.zeros(M,dtype='int')\nd = np.zeros(M,dtype='int')\nfor i in range(N):\n    a[i],b[i] = map(int, raw_input().split())\nfor i in range(M):\n    c[i],d[i] = map(int, raw_input().split())\n    \nfor i in range(N):\n    MinDist = 999999999\n    CheckPoint = -1\n    for j in range(M):\n        ManhattanDist = math.fabs(a[i]-c[j])+math.fabs(b[i]-d[j])\n        if(MinDist>ManhattanDist):\n            MinDist = ManhattanDist\n            CheckPoint = j+1\n    print(CheckPoint)    \n        "}
{"label": 45, "index": 5763, "code": "#ABC057B\n\nn,m=map(int,raw_input().split())\nab=[]\nfor i in xrange(n):\n a,b=map(int,raw_input().split())\n ab.append([a,b])\ncd=[]\nfor i in xrange(m):\n c,d=map(int,raw_input().split())\n cd.append([c,d])\n\nfor i in xrange(n):\n res=-1\n lm=10**9\n for j in xrange(m):\n  l=abs(ab[i][0]-cd[j][0])+abs(ab[i][1]-cd[j][1])\n  if l<lm:\n   lm=l\n   res=j\n print res+1\n"}
{"label": 45, "index": 5764, "code": "nm = list(map(int, input().split()))\n\nN = nm[0]\nM = nm[1]\n\nA = []\nfor i in range(0,N):\n    A.append( list(map(int, input().split())) )\n\nB = []\nfor i in range(0,M):\n    B.append( list(map(int, input().split())) )\n\nfor a in A:\n    min_d = 1000000000000000000000000\n    min_i = 0\n    d = 0\n    for i, b in enumerate(B):\n        d = abs(a[0]-b[0])+abs(a[1]-b[1])\n        if d < min_d:\n            min_i = i\n            min_d = d\n    print(min_i+1) \n"}
{"label": 45, "index": 5765, "code": "# B-Checkpoints\n# \u554f\u984cURL:http://abc057.contest.atcoder.jp/tasks/abc057_b\n\nN, M = map(int, input().split()) #\u307e\u305aN\u3068M\u3092\u53d6\u5f97\nABs = [] # \u5b66\u751f\u306e\u3044\u308b\u5ea7\u6a19\nCDs = [] #\u3000\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u306e\u5ea7\u6a19\n\n# 2\u884c\u76ee\u3088\u308aN\u884c\u5206\u5b66\u751f\u306e\u5ea7\u6a19\u3092\u53d6\u5f97\u3057\u3066ABs\u306b\u683c\u7d0d\nfor i in range(N):\n    ABs.append([int(x) for x in input().split()])\n\n# 2+N\u884c\u76ee\u3088\u308aM\u884c\u5206\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u306e\u5ea7\u6a19\u3092\u53d6\u5f97\u3057\u3066CDs\u306b\u683c\u7d0d\nfor i in range(M):\n    CDs.append([int(x) for x in input().split()])\n\nfor a,b in ABs:\n    #ABs\u306e\u4e2d\u8eab\u3092a,b\u3001CDs\u306e\u4e2d\u8eab\u3092c,d\u3068\u3057\u3066\u53d6\u308a\u51fa\u3057\u5404\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u3054\u3068\u306e\u8ddd\u96e2\u3092\u6e2c\u5b9a\n    distance = [abs(a-c) + abs(b-d) for c,d in CDs]\n    \n    #\u3000\u8ddd\u96e2\u304c\u540c\u3058\u5834\u5408\u306f\u6700\u3082\u756a\u53f7\u304c\u65e9\u3044\u3082\u306e\u3092\u51fa\u529b\u3059\u308b\u3002=(min()\u306f\u3082\u3068\u3082\u3068\u305d\u306e\u3088\u3046\u306b\u3067\u304d\u3066\u3044\u308b\u3002\u65e9\u3044\u3082\u306e\u512a\u5148\uff09\n    #+1\u306f\u30ea\u30b9\u30c8\u306f0\u756a\u76ee\u304b\u3089\u3001\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u306f1\u756a\u76ee\u304b\u3089\u59cb\u307e\u308b\u305f\u3081\n    print(distance.index(min(distance)) + 1)"}
{"label": 45, "index": 5766, "code": "N, M = list(map(int, input().split()))\n\nab = []\nfor i in range(N):\n    ab.append(list(map(int, input().split())))\n\ncd = []\nfor i in range(M):\n    cd.append(list(map(int, input().split())))\n\nfor ab_list in ab:\n    min_distance = 400000000\n    checkpoint = 0\n    for cd_list in cd:\n        checkpoint += 1\n        distance = abs(ab_list[0] - cd_list[0]) + abs(ab_list[1] - cd_list[1])\n        if distance < min_distance:\n            min_distance = distance\n            ans = checkpoint\n    print(ans)\n"}
{"label": 45, "index": 5767, "code": "# coding:utf-8\n\nNM = raw_input().split()\nN = int(NM[0])\nM = int(NM[1])\n\na = []\nb = []\nc = []\nd = []\nfor i in xrange(N):\n    ab = raw_input().split()\n    a.append(int(ab[0]))\n    b.append(int(ab[1]))\n\nfor i in xrange(M):\n    cd = raw_input().split()\n    c.append(int(cd[0]))\n    d.append(int(cd[1]))\n\nfor i in xrange(N):\n    memo = []\n    for j in xrange(M):\n        memo.append(abs(a[i]-c[j])+abs(b[i]-d[j]))\n    print memo.index(min(memo)) + 1\n"}
{"label": 45, "index": 5768, "code": "# -*- coding: utf-8 -*-\n\nN, M = map(int, input().split())\n\na_list, b_list, c_list, d_list = [], [], [], []\n\n#student\nfor i in range(N):\n\ta, b = map(int, input().split())\n\ta_list.append(a)\n\tb_list.append(b)\n\n#checkpoint\nfor i in range(M):\n\tc, d = map(int, input().split())\n\tc_list.append(c)\n\td_list.append(d)\n\nfor j in range(N):\n\tdist = []\n\tfor k in range(M):\n\t\tdist.append(abs(a_list[j] - c_list[k]) + abs(b_list[j] - d_list[k]))\n\tprint(dist.index(min(dist))+1)"}
{"label": 45, "index": 5769, "code": "import numpy as np\n\ndef manhattan(x,y):\n    return np.abs(x[0]-y[0]) + np.abs(x[1]-y[1])\n\nN,M = map(int,raw_input().split())\nstudents = np.zeros((N,2))\ncheckpoints = np.zeros((M,2))\nfor i in range(N):\n    students[i][0],students[i][1] = map(int,raw_input().split())\n#print a\nfor j in range(M):\n    checkpoints[j][0],checkpoints[j][1] = map(int,raw_input().split())\n\nindex = np.zeros(N)\nfor i in range(N):\n    min = 200000000\n    for j in range(M):\n        d = manhattan(students[i],checkpoints[j])\n        if min > d:\n            min = d\n            index[i] = j\n    print (index[i]+1).astype(np.int32)\n"}
{"label": 45, "index": 5770, "code": "class Point(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\ndef diff(p1, p2):\n    return abs(p1.x - p2.x) + abs(p1.y - p2.y)\nN, M = map(int, raw_input().split())\nS = []\nfor i in xrange(N):\n    x, y = map(int, raw_input().split())\n    s = Point(x, y)\n    S.append(s)\nC = []\nfor i in xrange(M):\n    x, y = map(int, raw_input().split())\n    c = Point(x, y)\n    C.append(c)\nfor s in S:\n    index = None\n    dist = 1e9\n    for i, c in enumerate(C):\n        d = diff(s, c) \n        if d < dist:\n            dist = d\n            index = i\n    print index + 1"}
{"label": 45, "index": 5771, "code": "\ndef amin(_data):\n    ans = 0\n    dst = 1000000000\n\n    for idx, point in enumerate(checks):\n        # x = abs(point[0] - _data[0])\n        # y = abs(point[1] - _data[1])\n        x = abs(_data[0] - point[0])\n        y = abs(_data[1] - point[1])\n\n        _dst = x + y\n\n        if _dst < dst:\n            ans = idx + 1\n            dst = _dst\n\n    return ans\n\n\n\nN, M = list(map(int, input().split()))\npoints = list()\nchecks = list()\n\nfor _ in range(N):\n    data = list(map(int, input().split()))\n    points.append(data)\n\nfor _ in range(M):\n    data = list(map(int, input().split()))\n    checks.append(data)\n\nfor point in points:\n    print(amin(point))\n"}
{"label": 45, "index": 5772, "code": "n,m = list(map(int, input().split()))\na=[]\nb=[]\nc=[]\nd=[]\ny=0\nfor i in range(n):\n    tmp=list(map(int, input().split()))\n    a.append(tmp[0])\n    b.append(tmp[1])\nfor i in range(m):\n    tmp=list(map(int, input().split()))\n    c.append(tmp[0])\n    d.append(tmp[1])\nfor i in range(n):\n    x=[1000000000]*m\n    for j in range(m):\n        x[j]=abs(c[j]-a[i])+abs(d[j]-b[i])\n        if x[y] > x[j]:\n            y = j\n    print(y+1)\n    y=0\n"}
{"label": 45, "index": 5773, "code": "import sys, math\n\nn,m = [int(x) for x in sys.stdin.readline().split()]\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\n\ns = [LI() for _ in range(n)]\np = [LI() for _ in range(m)]\n\ndef manhattan(a,b):\n\treturn math.fabs(a[0]-b[0]) + math.fabs(a[1]-b[1])\n\ndef nearest(a):\n\tr = 1\n\td = manhattan(a,p[0])\n\tfor (i,x) in enumerate(p):\n\t\tpd = manhattan(a,x)\n\t\tif pd<d:\n\t\t\tr = i+1\n\t\t\td = pd\n\treturn r\n\nfor (i,x) in enumerate(s):\n\tprint(nearest(x))"}
{"label": 45, "index": 5774, "code": "#!/usr/bin/python\n\nimport sys\n\ndef main(argv):\n    line = sys.stdin.readline().rstrip(\"\\n\")\n\n    while line:\n        n, m = map(lambda x: int(x), line.split(\" \", 2))\n\n        students = []\n        points = []\n        for i in xrange(n):\n            x, y = map(lambda x: int(x), raw_input().split(\" \", 2))\n            students.append((x, y))\n\n        for i in xrange(m):\n            x, y = map(lambda x: int(x), raw_input().split(\" \", 2))\n            points.append((x, y))\n\n        for sx, sy in students:\n            min_index = -1\n            min_distance = 4 * 100000000\n\n            for (i, (px, py)) in enumerate(points):\n                distance = abs(sx - px) + abs(sy - py)\n                if distance < min_distance:\n                    min_distance = distance\n                    min_index = i + 1\n            print min_index\n\n        line = sys.stdin.readline().rstrip(\"\\n\")\n\nif __name__ == \"__main__\":\n    main(sys.argv)"}
{"label": 45, "index": 5775, "code": "\n\nn,m=map(int,input().split())\n\na=[0 for i in range(n+1)]\nb=[0 for i in range(n+1)]\nc=[0 for i in range(m+1)]\nd=[0 for i in range(m+1)]\n\n\n\nfor i in range(1,n+1):\n    a[i],b[i]=map(int,input().split())\nfor j in range(1,m+1):\n    c[j],d[j]=map(int,input().split())\n\nfor i in range(1,n+1):\n    min=abs(a[i]-c[1])+abs(b[i]-d[1])+1\n    for j in range(1,m+1):\n        dis = abs(a[i]-c[j])+abs(b[i]-d[j])\n        if dis<min: min=dis ; ans=j\n    print(ans)"}
{"label": 45, "index": 5776, "code": "#!/usr/bin/env python\n\nnm = [int(i) for i in input().split()]\nn = nm[0]\nm = nm[1]\n\na = list()\nb = list()\nc = list()\nd = list()\n\nfor i in range(n):\n    ab = [int(tmp) for tmp in input().split()]\n    a.append(ab[0])\n    b.append(ab[1])\n\nfor j in range(m):\n    cd = [int(tmp) for tmp in input().split()]\n    c.append(cd[0])\n    d.append(cd[1])\n\nfor i in range(n):\n    min_dist = abs(a[i]-c[0]) + abs(b[i]-d[0])\n    checkpoint = 1\n    for j in range(m):\n        cur_dist = abs(a[i]-c[j]) + abs(b[i]-d[j])\n        if min_dist > cur_dist:\n            min_dist = cur_dist\n            checkpoint = j + 1\n    print(checkpoint)"}
{"label": 45, "index": 5777, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\n\n\ndef main():\n    n,m = LI()\n    a = [LI() for _ in range(n)]\n    b = [LI() for _ in range(m)]\n    r = []\n    for ai in a:\n        mi = -1\n        mm = inf\n        for i in range(m):\n            bi = b[i]\n            t = abs(ai[0]-bi[0]) + abs(ai[1]-bi[1])\n            if t < mm:\n                mi = i+1\n                mm = t\n        r.append(mi)\n\n    return '\\n'.join(map(str, r))\n\n\n\nprint(main())\n"}
{"label": 45, "index": 5778, "code": "# -*- coding: utf-8 -*-\n\nimport sys\nimport subprocess\nimport json\nimport time\nimport math\nimport re\nimport sqlite3\n\nN, M = map(int, input().split())\na = []\nb = []\nc = []\nd = []\n\nfor i in range(N):\n    a_v, b_v = map(int, input().split())\n    a.append(a_v)\n    b.append(b_v)\n\nfor i in range(M):\n    c_v, d_v = map(int, input().split())\n    c.append(c_v)\n    d.append(d_v)\n\nfor i in range(N):\n    res_id = 0\n    res = 10000000000\n    for j in range(M):\n        j_res = abs(a[i] - c[j]) + abs(b[i] - d[j])\n        if j_res < res:\n            res_id = j\n            res = j_res\n    print(res_id + 1)\n"}
{"label": 45, "index": 5779, "code": "def solve():\n    N, M = map(int, input().split())\n    students = []\n    points = []\n    \n    for _ in range(N):\n        a, b = map(int, input().split())\n        students.append([a, b])\n        \n    for _ in range(M):\n        c, d = map(int, input().split())\n        points.append([c, d])\n    \n    for [a, b] in students:\n        md = []\n        for [c, d] in points:\n            md.append(abs(a-c) + abs(b-d))\n        md_min = min(md)\n        md_min_idx = md.index(md_min)\n        print(md_min_idx + 1)\n\nif __name__ == '__main__':\n    solve()"}
{"label": 45, "index": 5780, "code": "import math\n\ndef main():\n    N, M = tuple(map(int, input().split(' ')))\n    man_list = []\n    point_list = []\n    for i in range(N):\n        man_list.append(tuple(map(int, input().split(' '))))\n    for i in range(M):\n        point_list.append(tuple(map(int, input().split(' '))))\n\n    result = []\n    for i, man in enumerate(man_list):\n        a, b = man\n        min_ = float('inf')\n        for j, point in enumerate(point_list):\n            c, d = point\n            v = abs(a-c)+ abs(b-d)\n            if len(result) < i+1:\n                min_ = v\n                result.append(j+1)\n                continue\n            if v < min_:\n                result[i] = j+1\n                min_ = v\n\n\n    for r in result:\n        print('{}'.format(r))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 45, "index": 5781, "code": "import math\nn,m=map(int,raw_input().split())\na=[]\nb=[]\nfor i in range(n):\n\tia,ib=map(int,raw_input().split())\n\ta.append(ia)\n\tb.append(ib)\nc=[]\nd=[]\nfor i in range(m):\n\tic,id=map(int,raw_input().split())\n\tc.append(ic)\n\td.append(id)\nfor i in range(n):\n\tdist=10**9\n\tans=0\n\tfor j in range(m):\n\t\tndist=abs(a[i]-c[j])+abs(b[i]-d[j])\n\t\tif ndist<dist:\n\t\t\tdist=ndist\n\t\t\tans=j+1\n\tprint ans"}
{"label": 45, "index": 5782, "code": "n, m = map(int, input().split())\nnli = []\nmli = []\n\nfor i in range(n):\n    a = input()\n    nli.append(a)\n\nfor i in range(m):\n    b = input()\n    mli.append(b)\n\nfor i in range(n):\n    mans = []\n    for j in range(m):\n        xns = mli[j]\n        a, b = map(int, xns.split())\n        yns = nli[i]\n        c, d = map(int, yns.split())\n        ans = abs(a-c) + abs(b-d)\n        mans.append(ans)\n    e = min(mans)\n    print(mans.index(e)+1)\n"}
{"label": 45, "index": 5783, "code": "N,M=map(int,input().split())\nman,pt=[],[]\ndef getter(freq,obj):\n    for _ in range(freq):\n        a,b=map(int,input().split())\n        obj.append([a,b])\ndef solve():\n    for tm in man:\n        judg=[]\n        for tp in pt:\n            judg.append(abs(tm[0]-tp[0])+abs(tm[1]-tp[1]))\n        print(judg.index(min(judg))+1)\ndef main():\n    getter(N,man)\n    getter(M,pt)\n    solve()\nif __name__ =='__main__':\n    main()"}
{"label": 45, "index": 5784, "code": "from math import *\n\n\ndef read(): return list(map(int, input().split()))\n\n\nn, m = read()\nper = []\nfor i in range(n):\n    per.append(read())\n\npoint = []\nfor i in range(m):\n    point.append(read())\n\nfor p in per:\n    mi = 1145141919\n    ans = 0\n    for i in range(m - 1, -1, -1):\n        d = abs(p[0] - point[i][0]) + abs(p[1] - point[i][1])\n        if d <= mi:\n            mi = d\n            ans = i\n    print(ans + 1)\n"}
{"label": 45, "index": 5785, "code": "# coding: utf-8\n# Here your code !\nimport numpy as np\nn,m = [int(x) for x in input().split(' ')]\nchil = []\ncheck = []\nminlist = []\nfor i in range(n):\n    chil.append([int(x) for x in input().split(' ')])\nfor i in range(m):\n    check.append([int(x) for x in input().split(' ')])\nfor c in chil:\n    min = 10**12\n    index = 0\n    for inde,ch in enumerate(check):\n        if abs(ch[1]-c[1]) + abs(ch[0]-c[0]) < min:\n            min = abs(ch[1]-c[1]) + abs(ch[0]-c[0])\n            index = inde\n    minlist.append(index + 1)\nfor i in minlist:\n    print(i)\n    \n"}
{"label": 45, "index": 5786, "code": "def ri(): return int(input())\ndef rli(): return list(map(int, input().split()))\ndef rls(): return list(input())\ndef pli(a): return \"\".join(list(map(str, a)))\n\nn, m = rli()\nstudent = [[] for i in range(n)]\nans = [[-1,1145148101919] for i in range(n)]\nfor i in range(n):\n    student[i] = rli()\nfor i in range(m):\n    x, y = rli()\n    for j in range(n):\n        if(abs(x-student[j][0]) + abs(y-student[j][1]) < ans[j][1]):\n            ans[j] = [i, abs(x-student[j][0]) + abs(y-student[j][1])]\nfor i in range(n):\n    print(ans[i][0] + 1)"}
{"label": 45, "index": 5787, "code": "a = input().split()\nstudents = int(a[0])\ncheckpoints = int(a[1])\n\nst_coord = []\nfor i in range(students):\n    b = input().split()\n    st_coord.append((int(b[0]), int(b[1])))\n\nch_coord = []\nfor j in range(checkpoints):\n    c = input().split()\n    ch_coord.append((int(c[0]), int(c[1])))\n\n\nshortest = abs(st_coord[0][0] - ch_coord[0][0]) + abs(st_coord[0][1] - ch_coord[0][1])\nfor k in range(len(st_coord)):\n    index = 1\n    shortest = abs(st_coord[k][0] - ch_coord[0][0]) + abs(st_coord[k][1] - ch_coord[0][1])\n    for l in range(len(ch_coord)):\n        distance = abs(st_coord[k][0] - ch_coord[l][0]) + abs(st_coord[k][1] - ch_coord[l][1])\n        if distance < shortest:\n            shortest = distance\n            index = l + 1\n    print(index)\n"}
{"label": 45, "index": 5788, "code": "n,m=map(int,input().split())\nst=[]\nfor i in range(n):\n    a,b=map(int,input().split())\n    st.append([a,b])\n\ncp=[]\nfor i in range(m):\n    c,d=map(int,input().split())\n    cp.append([i+1,c,d])\n\nQ=[]\n\nfor i in range(n):\n    \n    man = 10**8*4\n\n    for j in range(m):\n\n        if abs(cp[j][1]-st[i][0])+abs(cp[j][2]-st[i][1]) < man:\n            man = abs(cp[j][1]-st[i][0])+abs(cp[j][2]-st[i][1])\n            ans = cp[j][0]\n\n    Q.append(ans)\n\n\nfor i in Q:\n    print(i)"}
{"label": 45, "index": 5789, "code": "def main():\n    #infile = open(\"compprog.txt\", mode=\"r\")\n    n, m = [int(x) for x in input().split()]\n    students = []\n    cpoints = []\n    for _ in range(n):\n        students.append([int(x) for x in input().split()])\n    for _ in range(m):\n        cpoints.append([int(x) for x in input().split()])\n    for student in students:\n        res = 1\n        closest_dis = man_dis(student[0], cpoints[0][0], student[1], cpoints[0][1])\n        for c_idx in range(1, m):\n            this_dis = man_dis(student[0], cpoints[c_idx][0], student[1], cpoints[c_idx][1])\n            if this_dis < closest_dis:\n                closest_dis = this_dis\n                res = c_idx + 1\n        print(res)\n    #infile.close()\n\n\ndef man_dis(x1, x2, y1, y2):\n    return abs(x1 - x2) + abs(y1 - y2)\n\n\nif __name__ == \"__main__\":\n    main()\n"}
{"label": 45, "index": 5790, "code": "N, M=map(int,input().split())\n\nA=[]\nB=[]\nC=[]\nD=[]\n\n\nfor _ in range(N):\n    a,b=map(int,input().split())\n    A.append(a)\n    B.append(b)\n    \nfor _ in range(M):\n    c,d=map(int,input().split())\n    C.append(c)\n    D.append(d)\n     \nfor i in range(N):\n        L=[]\n        for j in range(M):\n            K=abs(A[i]-C[j])+abs(B[i]-D[j])  \n            L.append(K)  \n        next\n        P=L.index(min(L))\n        print(P+1)"}
{"label": 45, "index": 5791, "code": "import sys\n\n# sys.stdin = open('b1.in')\n\n\ndef read_int_list():\n    return list(map(int, input().split()))\n\n\ndef read_str_list():\n    return input().split()\n\n\ndef read_int():\n    return int(input())\n\n\ndef read_str():\n    return input()\n\n\ndef distance(p1, p2):\n    x1, y1 = p1\n    x2, y2 = p2\n    return abs(x1-x2) + abs(y1 - y2)\n\n\nn, m = read_int_list()\nstudents = [read_int_list() for i in range(n)]\ncheckpoints = [read_int_list() for j in range(m)]\n\nfor student in students:\n    dist = 10 ** 20\n    res = -1\n    for index, checkpoint in enumerate(checkpoints):\n        distance1 = distance(student, checkpoint)\n        if distance1 < dist:\n            dist = distance1\n            res = index + 1\n    print(res)\n"}
{"label": 45, "index": 5792, "code": "if __name__ == '__main__':\n    N,M = map(int, input().split())\n    data = []\n    for i in range(N):\n        a,b = map(int, input().split())\n        data.append([a, b])\n    checks = []\n    for i in range(M):\n        c,d = map(int, input().split())\n        checks.append([c, d])\n\n    for a,b in data:\n        res = 1 << 50\n        p = -1\n        for idx, check in enumerate(checks):\n            tmp = abs(a - check[0]) + abs(b - check[1])\n            if (tmp < res):\n                res = tmp\n                p = idx + 1\n        print (p)\n"}
{"label": 45, "index": 5793, "code": "import sys\n\nINF = 10**9+7\n\nstdin = sys.stdin\ndef na(): return map(int, stdin.readline().split())\ndef ns(): return stdin.readline().strip()\ndef nsl(): return list(stdin.readline().strip())\ndef ni(): return int(stdin.readline())\ndef nil(): return list(map(int, stdin.readline().split()))\n\nn, m = nil()\n\na = []\nb = []\nc = []\nd = []\n\nx = []\nans = []\n\nfor i in range(n):\n    u, v = nil()\n    a.append(u)\n    b.append(v)\nfor i in range(m):\n    u, v = nil()\n    c.append(u)\n    d.append(v)\n\nfor i in range(n):\n    x.append(INF)\n    ans.append(0)\n    for j in range(m):\n        t = abs(a[i] - c[j]) + abs(b[i] - d[j])\n        if(x[i] > t):\n            ans[i] = j\n            x[i] = t\n\nfor i in ans:\n    print(i+1)\n"}
{"label": 45, "index": 5794, "code": "N,M=list(map(int, input().split()))\na=[]\nc=[]\nfor n in range (0,N):\n  a.append(list(map(int, input().split())))\nfor m in range(0,M):\n  c.append(list(map(int, input().split())))\n\nans=[]\nfor n in range (0,N):\n  place=1\n  dist=abs(a[n][0]-c[0][0])+abs(a[n][1]-c[0][1])\n  for m in range(1,M):\n    if abs(a[n][0]-c[m][0])+abs(a[n][1]-c[m][1])<dist:\n      dist=abs(a[n][0]-c[m][0])+abs(a[n][1]-c[m][1])\n      place=m+1\n  ans.append(place)\n\nfor n in range (0,N):\n  print(ans[n])"}
{"label": 45, "index": 5795, "code": "from collections import defaultdict\n\n\ndef main():\n    N, M = map(int, input().split())\n    students = []\n    for _ in range(N):\n        a, b = map(int, input().split())\n        students.append((a, b))\n\n    checkpoints = []\n    for _ in range(M):\n        c, d = map(int, input().split())\n        checkpoints.append((c, d))\n\n    for s in students:\n        ans = \"\"\n        best = float(\"inf\")\n        for i, c in enumerate(checkpoints, start=1):\n            if abs(s[0] - c[0]) + abs(s[1] - c[1]) < best:\n                best = abs(s[0] - c[0]) + abs(s[1] - c[1])\n                ans = i\n        print(ans)\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 45, "index": 5796, "code": "import math\n\n# N, M\nargv = [int(x) for x in input().split(\" \")]\n\n#a_1, b_1 to a_N, b_N\nstudent_coordinates = []\nfor i in range(argv[0]):\n    student_coordinates.append([int(x) for x in input().split(\" \")])\n\n#c_1, d_1 to c_N, d_N\ncheck_points = []\nfor i in range(argv[1]):\n    check_points.append([int(x) for x in input().split(\" \")])\n\ndef manhattan_dist(point_1, point_2):\n    return math.fabs(point_1[0] - point_2[0]) + math.fabs(point_1[1] - point_2[1])\n\ndef select_check_point(student):\n    dist_list = []\n    for i in range(argv[1]):\n        dist_list.append(manhattan_dist(student, check_points[i]))\n    return dist_list.index(min(dist_list))\n\nfor i in range(argv[0]):\n    print(select_check_point(student_coordinates[i]) + 1)"}
{"label": 45, "index": 5797, "code": "n, m = list(map(int, input().split()))\na = [0 for x in range(n)] \nb = [0 for x in range(n)] \nc = [0 for x in range(m)] \nd = [0 for x in range(m)] \nfor i in range(n):\n\ta[i], b[i] = list(map(int, input().split()))\nfor i in range(m):\n\tc[i], d[i] = list(map(int, input().split()))\n\n\t\nfor i in range(n):\n\tmindis = 500000000\n\tminCheckPoint = -1\n\tfor j in range(m):\n\t\tdis = abs(a[i]-c[j]) + abs(b[i]-d[j])\n\t\tif mindis > dis:\n\t\t\tmindis = dis\n\t\t\tminCheckPoint = j + 1\n\tprint(minCheckPoint)"}
{"label": 45, "index": 5798, "code": "n, m = map(int, raw_input().split())\ns, c = [], []\nfor _ in range(n):\n    s.append(map(int, raw_input().split()))\nfor _ in range(m):\n    c.append(map(int, raw_input().split()))\nfor i in range(n):\n    minD = (4 * (10 ** 8)) + 1\n    minI = 0\n    for j in range(m):\n        dis = abs(s[i][0] - c[j][0]) + abs(s[i][1] - c[j][1])\n        if dis < minD:\n            minI = j\n            minD = dis\n    print minI + 1\n"}
{"label": 45, "index": 5799, "code": "n, m = map(int, input().split())\nnab = [list(map(int, input().split())) for x in range(n)]\nmab = [list(map(int, input().split())) + [x + 1] for x in range(m)]\nprint(\"\\n\".join(map(str, [min(mab, key=lambda x: abs(x[0] - a) + abs(x[1] - b))[-1] for a, b in nab])))"}
{"label": 45, "index": 5800, "code": "\n\ndef dist(v1, v2):\n    return abs(v1[0] - v2[0]) + abs(v1[1] - v2[1])\n\n\nN, M = (int(e) for e in input().split())\n\nstudents = []\nfor i in range(N):\n    students.append([int(e) for e in input().split()])\n\ncheckpoints = []\nfor i in range(M):\n    checkpoints.append([int(e) for e in input().split()])\n\nfor i in students:\n    min_dist = 1e9\n    to = None\n    for j, cp in enumerate(checkpoints):\n        d = dist(i, cp)\n        if min_dist > d:\n            to = j+1\n            min_dist = d\n    print(to)"}
{"label": 45, "index": 5801, "code": "N, M = map(int, input().split())\nn = [list(map(int, input().split())) for x in range(N)]\nm = [list(map(int, input().split())) for x in range(M)]\n\nfor i in n:\n    x = 0\n    for j in range(M):\n        c = m[j]\n        k = m[x]\n        a = max(i[0], k[0]) - min(i[0], k[0]) + max(i[1], k[1]) - min(i[1], k[1])\n        b = max(i[0], c[0]) - min(i[0], c[0]) + max(i[1], c[1]) - min(i[1], c[1])\n        if b < a : x = j\n    print(x + 1)"}
{"label": 45, "index": 5802, "code": "n, m = map(int, raw_input().split())\na, b = [], []\nc, d = [], []\n\nfor i in range(n):\n    a0, b0 = map(int, raw_input().split())\n    a.append(a0)\n    b.append(b0)\nfor i in range(m):\n    c0, d0 = map(int, raw_input().split())\n    c.append(c0)\n    d.append(d0)\nfor i in range(n):\n    res = 10**9\n    ans = 0\n    for j in range(m):\n        man = abs(a[i]-c[j])+abs(b[i]-d[j])\n        if res > man:\n            res = man\n            ans = j\n    print ans+1"}
{"label": 45, "index": 5803, "code": "n, m = map(int, input().split(\" \"))\n\na=[]\nb=[]\nc=[]\nd=[]\n\nfor i in range(0, n):\n    x,y = map(int, input().split(\" \"))\n    a.append(x)\n    b.append(y)\n\nfor i in range(0, m):\n    x,y = map(int, input().split(\" \"))\n    c.append(x)\n    d.append(y)\n\nfor i in range(0, n):\n    v = -1\n    index = 0\n    for j in range(0, m):\n\n        l=abs(a[i] - c[j]) + abs(b[i] - d[j])\n        if v == -1 or v > l:\n            index = j\n            v = l\n    print(index + 1)"}
{"label": 45, "index": 5804, "code": "n, m = map(int, input().split())\ndata1 = [list(map(int, input().split())) for i in range(n)]\ndata2 = [list(map(int, input().split())) for i in range(m)]\ndef d(i,j):\n  return abs(data1[i][0] - data2[j][0]) + abs(data1[i][1] - data2[j][1])\nfor i in range(n):\n  rv = d(i,0)\n  rj = 0\n  for j in range(1,m):\n    v = d(i,j)  \n    if v < rv:\n      rv = v\n      rj = j\n  print(rj+1) "}
{"label": 45, "index": 5805, "code": "INF = 10 ** 10\n\nn,m = map(int,input().split(' '))\na = [0] * n\nb = [0] * n\nfor i in range(n):\n    a[i],b[i] = map(int,input().split(' '))\nc = [0] * m\nd = [0] * m\nfor i in range(m):\n    c[i],d[i] = map(int,input().split(' '))\n\nfor i in range(n):\n    mn = INF\n    mi = -1\n    for j in range(m):\n        x = abs(a[i]-c[j]) + abs(b[i]-d[j])\n        if x < mn:\n            mn = x\n            mi = j\n    print(mi+1)"}
{"label": 45, "index": 5806, "code": "b = input().split()\na = [int(b[i]) for i in range(len(b))]\n\np = []\n\nfor j in range(a[0]):\n  tmp = input().split()\n  tmp = [int(tmp[i]) for i in range(2)]\n  p.append((tmp[0], tmp[1]))\n\nc = []\n\nfor j in range(a[1]):\n  tmp = input().split()\n  tmp = [int(tmp[i]) for i in range(2)]\n  c.append((tmp[0], tmp[1]))\n\nans = []\n\nfor i in range(a[0]):\n  min = (10000000000, 0)\n  for j in range(a[1]):\n    if(min[0] > abs(p[i][0] - c[j][0]) + abs(p[i][1] - c[j][1])):\n      min = (abs(p[i][0] - c[j][0]) + abs(p[i][1] - c[j][1]), j+1)\n\n  ans.append(min[1])\n\nfor j in range(a[0]):\n  print(ans[j])"}
{"label": 45, "index": 5807, "code": "def distance(sX, sY, pX, pY):\n\treturn abs(sX-pX) + abs(sY-pY)\n\ndef getIndex(stuX, stuY, points):\n\tminDist = -1\n\tindex = 0\n\tfor i in range(len(points)):\n\t\tpX = points[i][0]\n\t\tpY = points[i][1]\n\t\tif (minDist == -1 or distance(stuX, stuY, pX, pY) < minDist):\n\t\t\tminDist = distance(stuX, stuY, pX, pY)\n\t\t\tindex = i + 1\n\treturn index\n\n[N, M] = input().split()\nN = int(N)\nM = int(M)\nstus = []\npoints = []\nfor n in range(N):\n\t[x,y] = input().split()\n\tx = int(x)\n\ty = int(y)\n\tstus.append([x, y])\nfor m in range(M):\n\t[x,y] = input().split()\n\tx = int(x)\n\ty = int(y)\n\tpoints.append([x,y])\nfor s in stus:\n\tprint(getIndex(s[0], s[1], points))"}
{"label": 45, "index": 5808, "code": "#!/usr/bin/env python3\n\nN, M = [int(x) for x in input().split()]\nABs = []\nfor n in range(N):\n    ABs.append([int(x) for x in input().split()])\nCDs = []\nfor m in range(M):\n    CDs.append([int(x) for x in input().split()])\nfor a, b in ABs:\n    dists = [abs(a - c) + abs(b - d) for c, d in CDs]\n    print(dists.index(min(dists)) + 1)\n"}
{"label": 45, "index": 5809, "code": "def man_dis(s, c):\n    return abs(s[0]-c[0])+abs(s[1]-c[1])\n\n\ndef main():\n    n, m = map(int, input().split())\n    s_list = [list(map(int, input().split())) for _ in range(n)]\n    c_list = [list(map(int, input().split())) for _ in range(m)]\n\n    for s in s_list:\n        minv = 1000000000\n        for i, c in enumerate(c_list):\n            tmp = man_dis(s, c)\n            if tmp < minv:\n                minv = tmp\n                idx = i\n        print(idx+1)\n    \n\nif __name__ == \"__main__\":\n    main()"}
{"label": 45, "index": 5810, "code": "N,M = list(map(int, input().split()))\n\ns = []\nfor i in range(N):\n    s.append(list(map(int, input().split())))\n\nc = []\nfor j in range(M):\n    c.append(list(map(int, input().split())))\n\nfor t1 in s:\n    l = list(map(lambda x: abs(t1[0] - x[0]) + abs(t1[1] - x[1]), c))\n    print(l.index(min(l)) + 1)\n"}
{"label": 45, "index": 5811, "code": "import math\n\nN,M=map(int,input().split())\n\na,b,c,d,L=[],[],[],[],[]\nfor i in range(N):\n    f,g=map(int,input().split())\n    a.append(f)\n    b.append(g)\n\nfor i in range(M):\n    f,g=map(int,input().split())\n    c.append(f)\n    d.append(g)\n\nfor i in range(N):\n    L.clear()\n    for j in range(M):\n        L.append(int(math.fabs(a[i]-c[j])+math.fabs(b[i]-d[j])))\n    for k in range(M):\n        if L[k]==min(L):\n            print(k+1)\n            break"}
{"label": 45, "index": 5812, "code": "# -*- coding: utf-8 -*-\nimport numpy as np\nn, m = map(int, input().split())\nstudent = np.zeros([n,2])\ncheck_point = np.zeros([m,2])\nres = np.ones([n,m])\nfor i in range(n):\n    student[i,0], student[i,1] = map(int, input().split())\nfor i in range(m):\n    check_point[i,0], check_point[i,1] = map(int, input().split())\n    res[:,i] = abs(student[:,0]-check_point[i,0])+abs(student[:,1]-check_point[i,1])\nfor i in range(n):\n    print(np.argmin(res[i,:])+1)\n"}
{"label": 45, "index": 5813, "code": "N, M = map(int, input().split())\nA, B = [], []\nfor i in range(N):\n    a, b = map(int, input().split())\n    A.append(a)\n    B.append(b)\n\nC, D = [], []\nfor i in range(M):\n    c, d = map(int, input().split())\n    C.append(c)\n    D.append(d)\n\nfor a, b in zip(A, B):\n    best = 1<<30\n    res = None\n    for i in range(M):\n        d = abs(a - C[i]) + abs(b - D[i])\n        if res is None or best > d:\n            best = d\n            res = i\n    print(res + 1)"}
{"label": 45, "index": 5814, "code": "N, M = map(int, input().split())\nAs = []\nBs = []\nfor _ in range(N):\n    a, b = map(int, input().split())\n    As.append(a)\n    Bs.append(b)\nCs = []\nDs = []\nfor _ in range(M):\n    c, d = map(int, input().split())\n    Cs.append(c)\n    Ds.append(d)\n\nans = []\nfor i in range(N):\n    a = As[i]\n    b = Bs[i]\n    dist = 5 * 10**8\n    tmp = 1\n    for j in range(M):\n        c = Cs[j]\n        d = Ds[j]\n        if abs(a - c) + abs(b - d) < dist:\n            dist = abs(a - c) + abs(b - d)\n            tmp = j + 1\n    ans.append(tmp)\n    \nprint('\\n'.join(list(map(str, ans))))"}
{"label": 45, "index": 5815, "code": "\nimport sys\n\na, b, x, y = [], [], [], []\noo = 168430090\n\ndef rdl():\n\treturn map(int, raw_input().split())\n\n\ndef mht(x1, y1, x2, y2):\n\treturn abs(x1 - x2) + abs(y1 - y2)\n\n\n#sys.stdin = open(\"test.in\", \"r\")\nn, m = rdl()\nfor i in range(n):\n\tl, r = rdl()\n\tx.append(l), y.append(r)\n\nfor i in range(m):\n\tl, r = rdl()\n\ta.append(l), b.append(r)\n\nfor i in range(n):\n\tmn, mnid = oo, 0\n\tfor j in range(m):\n\t\tif mht(x[i], y[i], a[j], b[j]) < mn:\n\t\t\tmn = mht(x[i], y[i], a[j], b[j])\n\t\t\tmnid = j\n\t\n\tprint mnid + 1\n\n\n"}
{"label": 45, "index": 5816, "code": "class Point:\n\tdef __init__(self, x, y):\n\t\tself.x = x\n\t\tself.y = y\n\n\tdef getDistance(self, to):\n\t\treturn abs(self.x - to.x) + abs(self.y - to.y)\n\n\tdef __repr__(self):\n\t\treturn \"({0}, {1})\".format(self.x, self.y)\n\nN, M = [int(x) for x in input().split(\" \")]\n\na = []\nc = []\nfor _ in range(N):\n\tx, y = [int(p) for p in input().split(\" \")]\n\ta.append(Point(x, y))\n\nfor _ in range(M):\n\tx, y = [int(p) for p in input().split(\" \")]\n\tc.append(Point(x, y))\n\nfor a_i in a:\n\tmin_d = 250000000\n\tmin_i = 0\n\tfor i in range(len(c)):\n\t\td = a_i.getDistance(c[i])\n\t\tif d < min_d:\n\t\t\tmin_d = d\n\t\t\tmin_i = i\n\tprint(min_i + 1)\n"}
{"label": 45, "index": 5817, "code": "n, m = map(int, input().split())\npos = []\nche = []\nfor i in range(n):\n    a, b = map(int,input().split())\n    pos.append([a,b])\nfor i in range(m):\n    a, b = map(int,input().split())\n    che.append([a,b])\n \nfor i in range(n):\n    dis = []\n    for j in range(m):\n        dis.append(abs(pos[i][0]-che[j][0])+abs(pos[i][1]-che[j][1]))\n    print(dis.index(min(dis))+1)\n\n\n"}
{"label": 45, "index": 5818, "code": "N, M = map(int, input().split())\n\n#N = n[0]\n#M = n[1]\nn_list = []\nm_list = []\n\nfor i in range(int(N)):\n    tmp_n_list = []\n    num = input()\n    tmp_num = num.split()\n    tmp_n_list.append(int(tmp_num[0]))\n    tmp_n_list.append(int(tmp_num[1]))\n    n_list.append(tmp_n_list)\n\nfor j in range(int(M)):\n    tmp_m_list = []\n    num = input()\n    tmp_num = num.split()\n    tmp_m_list.append(int(tmp_num[0]))\n    tmp_m_list.append(int(tmp_num[1]))\n    m_list.append(tmp_m_list)\n\nfor k in range(int(N)):\n    for l in range(int(M)):\n        if l==0:\n            dis = abs(n_list[k][0]-m_list[l][0])+abs(n_list[k][1]-m_list[l][1])\n            point = l\n        else:\n            tmp_dis = abs(n_list[k][0]-m_list[l][0])+abs(n_list[k][1]-m_list[l][1])\n            if dis>tmp_dis:\n                dis = tmp_dis\n                point = l\n    print(point+1)\n"}
{"label": 45, "index": 5819, "code": "from functools import reduce\nimport sys\n\nn, m = [int(i) for i in input().split(\" \")]\nstudent = []\ncheckpoint = []\nfor i in range(n):\n    student.append([int(i) for i in input().split(\" \")])\nfor i in range(m):\n    checkpoint.append([int(i) for i in input().split(\" \")])\n    \ndef calc_dist(loc1, loc2):\n    return abs(loc1[0]-loc2[0])+abs(loc1[1]-loc2[1])\n\ndist_list = list(map(lambda s: [calc_dist(s, c) for c in checkpoint], student))\nnear_checkpoint = list(map(lambda d: d.index(min(d)), dist_list))\nfor x in near_checkpoint:\n    print(x+1)"}
{"label": 45, "index": 5820, "code": "# coding: utf-8\nimport math\nnum_N, num_M = map(int, input().split())\nl_stu = [list(map(int, input().split())) for __ in range(num_N)]\nl_che = [list(map(int, input().split())) for __ in range(num_M)]\n\nfor stu in l_stu:\n    dis_ind = []\n    for index, che in enumerate(l_che):\n        dis = math.fabs(che[0] - stu[0]) + math.fabs(che[1] - stu[1])\n        dis_ind.append([dis, index + 1])\n\n    dis_ind.sort(key=lambda x: (x[0], x[1]))\n    print(dis_ind[0][1])"}
{"label": 45, "index": 5821, "code": "# -*- coding: utf-8 -*-\n\n\ndef solve(s_pp, p_pp):\n    p_nums = []\n    for x, y in s_pp:\n        distance = []\n        for xx, yy in p_pp:\n            n = abs(x - xx) + abs(y - yy)\n            distance.append(n)\n        min_distance_idx = distance.index(min(distance))\n        p_nums.append(min_distance_idx + 1)\n    return p_nums\n\n\ndef main():\n    students, points = [int(e) for e in input().split()]\n    students_ps = []\n    points_ps = []\n\n    for _ in range(students):\n        x, y = [int(e) for e in input().split()]\n        students_ps.append([x, y])\n    for _ in range(points):\n        x, y = [int(e) for e in input().split()]\n        points_ps.append([x, y])\n    \n    for answer in solve(students_ps, points_ps):\n        print(answer)\n\n\nmain()\n"}
{"label": 45, "index": 5822, "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\ndef distance(p1, p2):\n    return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n\n\nn, m = map(int, input().split())\nst = [[int(a) for a in input().split()] for _ in range(n)]\ncp = [[int(a) for a in input().split()] for _ in range(m)]\n\nfor s in st:\n    index, dist = 0, 9999999999999999999999\n    for i, c in enumerate(cp):\n        if distance(s, c) < dist:\n            index, dist = i, distance(s, c)\n    print(index + 1)\n"}
{"label": 45, "index": 5823, "code": "import math\n\nN, M = map(int, raw_input().split())\n\na, b, c, d = [], [], [], []\n\nfor i in xrange(N):\n    s = map(int, raw_input().split())\n    a.append(s[0])\n    b.append(s[1])\n\nfor i in xrange(M):\n    s = map(int, raw_input().split())\n    c.append(s[0])\n    d.append(s[1])\n\n\nans = 0\nt = 0\nfor i in xrange(N):\n    for j in xrange(M):\n        if j == 0:\n            t = abs(a[i]-c[j]) + abs(b[i]-d[j])\n            ans = 1\n        elif t > abs(a[i]-c[j]) + abs(b[i]-d[j]):\n            t = abs(a[i]-c[j]) + abs(b[i]-d[j])\n            ans = j+1\n        #print \"t = %d\" % t\n        #print \"ans=%d\" % ans\n    print ans"}
{"label": 45, "index": 5824, "code": "n, m = map(int, input().split())\na_b = [list(map(int, input().split())) for i in range(n)]\nc_d = [list(map(int, input().split())) for i in range(m)]\n\nfor i in range(n):\n    min_dis = 400000000\n    min_dis_ind = 0\n    for j in range(m):\n        tmp = abs(a_b[i][0] - c_d[j][0]) + abs(a_b[i][1] - c_d[j][1])\n        if min_dis > tmp:\n            min_dis = tmp\n            min_dis_ind = j\n    print(min_dis_ind  + 1)\n"}
{"label": 45, "index": 5825, "code": "def distance(p1, p2):\n  (x1, y1) = p1\n  (x2, y2) = p2\n  return abs(x1 - x2) + abs(y1 - y2)\n\nN, M = map(int, input().split())\nstu = [0]*N\npoint = [0]*M\n\nfor i in range(N):\n  a, b = map(int, input().split())\n  stu[i] = (a, b)\nfor i in range(M):\n  a, b = map(int, input().split())\n  point[i] = (a, b)\n\nans = [-1]*N  # (ind, score)\nfor j, now in enumerate(stu):\n  ans[j] = -1\n  score = 1e18\n  for i in range(M):\n    pos = point[i]\n    if distance(now, pos) < score:\n      score = distance(now, pos)\n      ans[j] = i+1\n\nfor e in ans:\n  print(e)\n"}
{"label": 45, "index": 5826, "code": "import sys\n\nif __name__==\"__main__\":\n    ab=[]\n    cd=[]\n    [n,m]=map(int,raw_input().split(\" \"))\n    for i in range(n):\n        ab.append( map(int,raw_input().split(\" \")) )\n    for j in range(m):\n        cd.append( map(int,raw_input().split(\" \")) )\n    for i in range(n):\n        min=sys.maxint\n        index=0\n        for j in range(m):\n            distance = abs(ab[i][0]-cd[j][0])+abs(ab[i][1]-cd[j][1])\n            if min > distance :\n                min=distance \n                index=j\n        print(index+1)\n"}
{"label": 45, "index": 5827, "code": "N, M = map(int, input().split())\na = {}\nb = {}\nc = {}\nd = {} \n\nfor i in range(N):\n    a[i],b[i] = map(int, input().split())\nfor i in range(M):\n    c[i],d[i] = map(int, input().split())\n\nfor i in range(N):\n    m = 100000000000\n    index = 0\n    for j in range(M):\n        tmp = abs(a[i]-c[j]) + abs(b[i]-d[j])\n        if tmp < m:\n            m = tmp \n            index = j\n    print(index + 1)\n\n"}
{"label": 45, "index": 5828, "code": "#!/usr/bin/env pypy3\n# -*- coding: UTF-8 -*-\n\nn,m=map(int,input().split())\ng={int(i):[] for i in range(n)}\nfor i in range(n):\n    x,y=map(int,input().split())\n    g[i].append((x,y))\n\nfor i in range(m):\n    x,y=map(int,input().split())\n    for j in range(n):\n        tmp=abs(g[j][0][0]-x)+abs(g[j][0][1]-y)\n        if i==0:\n            g[j].append(tmp)\n            g[j].append(i)\n        elif tmp<g[j][1]:\n            g[j][1]=tmp\n            g[j][2]=i\nfor i in range(n):\n    print(g[i][2]+1)"}
{"label": 45, "index": 5829, "code": "def dis(c1, c2):\n    return abs(c1[0]-c2[0]) + abs(c1[1]-c2[1])\n\nif __name__ == \"__main__\":\n    nums = [int(num) for num in input().split()]\n    N = nums[0]\n    M = nums[1]\n    students = []\n    cps = []\n    for i in range(N):\n        coord = [int(num) for num in input().split()]\n        students.append((coord[0], coord[1]))\n    for i in range(M):\n        coord = [int(num) for num in input().split()]\n        cps.append((coord[0], coord[1]))\n\n    cps2 = []\n    for s in students:\n        idx = -1\n        d = 0\n        for i, c in enumerate(cps):\n            dd = dis(s, c)\n            if idx == -1 or d > dd:\n                idx = i\n                d = dd\n        cps2.append(idx+1)\n\n    for c in cps2:\n        print(c)"}
{"label": 45, "index": 5830, "code": "def ri():\n    return map(int, raw_input().split())\n\nn,m = ri()\nstudents = [ri() for _ in range(n)]\ncheckpoints = [ri() for _ in range(m)]\nfor a,b in students:\n    idx = -1\n    dist = 10**9\n    for i,(c,d) in enumerate(checkpoints):\n        tmp = abs(c-a) + abs(d-b)\n        if tmp < dist:\n            dist = tmp\n            idx = i\n    print idx + 1\n"}
{"label": 45, "index": 5831, "code": "N,M = map(int, input().split())\na = []\nfor i in range(N):\n    a.append(list(map(int, input().split())))\n\nb = []\nfor i in range(M):\n    b.append(list(map(int, input().split())))\n\ndef distance(i,j):\n    return abs(a[i][0]-b[j][0]) + abs(a[i][1]-b[j][1])\n\nm = []\nfor i in range(N):\n    mdis = distance(i,0)\n    mn = 0+1\n    for j in range(1,M):\n        if(mdis > distance(i,j)):\n            mdis = distance(i,j)\n            mn = j+1\n\n    m.append(mn)\n\nfor i in range(N):\n    print(m[i])"}
{"label": 45, "index": 5832, "code": "n, m = map(int, input().split())\n\na = [[0, 0] for i in range(n)]\n\nc = [[0, 0] for i in range(m)]\n\nfor i in range(n):\n    a[i][0], a[i][1] = map(int, input().split())\n\nfor i in range(m):\n    c[i][0], c[i][1] = map(int, input().split())\n\nindex = 0\n\n\nfor i in range(n):\n    for j in range(m):\n        if j == 0 :\n            k = abs(a[i][0] - c[j][0]) + abs(a[i][1] - c[j][1]) +1\n\n        di = abs(a[i][0] - c[j][0]) + abs(a[i][1] - c[j][1])\n        if di < k:\n            index = j + 1\n            k = di\n    print(index)\n"}
{"label": 45, "index": 5833, "code": "[N,M] = map(int, raw_input().split())\nsl = []\nfor i in range(N):\n    sl.append(map(int, raw_input().split()))\npl = []\nfor i in range(M):\n    pl.append(map(int, raw_input().split()))\nans = []\nfor (x,y) in sl:\n    dmin = 400000001\n    imin = -1\n    for (i, (px, py)) in enumerate(pl):\n        d = abs(x - px) + abs(y - py)\n        if(d < dmin):\n            dmin = d\n            imin = i\n    ans.append(imin+1)\nfor i in ans:\n    print i\n"}
{"label": 45, "index": 5834, "code": "import numpy as np\nN, M = map(int, input().split())\nlist_coStu = []\nlist_coChe = []\nfor i in range(N):\n    list_coStu.append(list(map(int, input().split())))\nfor i in range(M):\n    list_coChe.append(list(map(int, input().split())))\n\n#calc distance\n\nfor iS in range(len(list_coStu)):\n    coStu = np.array(list_coStu[iS])\n    min_iC = 0\n    d = 4 * 10**8 + 1\n    for iC in range(len(list_coChe)):\n        coChe = np.array(list_coChe[iC])\n        dif = coChe - coStu\n        dist = np.sum(np.abs(dif))\n        if dist < d:\n            min_iC = iC\n            d = dist\n    print(min_iC + 1)\n"}
{"label": 45, "index": 5835, "code": "N, M = map(int, input().split())\npos = []\nmini = [float('inf') for _ in range(N)]\nret = [-1 for _ in range(N)]\nfor _ in range(N):\n    pos.append((tuple(map(int, input().split()))))\n\nfor j in range(M):\n    c, d = map(int, input().split())\n    for i, s in enumerate(pos):\n        diff = abs(c - s[0]) + abs(d - s[1])\n        if mini[i] > diff:\n            ret[i] = j + 1\n            mini[i] = diff\n\nfor r in ret:\n    print(r)\n"}
{"label": 45, "index": 5836, "code": "N, M = map(int, raw_input().split())\nP = [map(int, raw_input().split()) for _ in range(N)]\nQ = [map(int, raw_input().split()) for _ in range(M)]\n\nfor x1, y1 in P:\n    dist = 10 ** 9\n    ans = -1\n    for i, (x2, y2) in enumerate(Q):\n        if abs(x1 - x2) + abs(y1 - y2) < dist:\n            dist = abs(x1 - x2) + abs(y1 - y2)\n            ans = i + 1\n    print ans\n"}
{"label": 45, "index": 5837, "code": "n, m = map(int, input().split())\n\nstd_map = [list(map(int, input().split())) for i in range(n)]\nch_map = [list(map(int, input().split())) for i in range(m)]\n\nresults = [[] for i in range(n)]\n\nfor std in std_map:\n    print(min(enumerate([abs(std[0] - ch[0]) + abs(std[1] - ch[1]) for ch in ch_map], 1), key=lambda x: x[1])[0])\n"}
{"label": 45, "index": 5838, "code": "n,m=raw_input().split(' ')\nn=int(n)\nm=int(m)\n\nstudents=[]\nfor _ in range(n):\n    x,y=raw_input().split(' ')\n    students.append((int(x),int(y)))\n\ncheckpoint=[]\nfor _ in range(m):\n    x,y=raw_input().split(' ')\n    checkpoint.append((int(x),int(y)))\n\nfor s in students:\n    min_d=99999999999\n    min_num=0\n    for i,c in enumerate(checkpoint):\n        if abs(c[0]-s[0])+abs(c[1]-s[1]) < min_d:\n            min_d=abs(c[0]-s[0])+abs(c[1]-s[1])\n            min_num=i\n\n    print min_num+1\n    \n\n"}
{"label": 45, "index": 5839, "code": "n,m = map(int, raw_input().split())\n\nstu = []\nfor _ in range(n):\n    stu.append((map(int, raw_input().split())))\n\nche = []\nfor _ in range(m):\n    che.append((map(int, raw_input().split())))\n\n\nfor st in range(n):\n    min_dis = float(\"inf\")\n    idx = -1\n    for ch in range(m):\n        dist = abs(stu[st][0] - che[ch][0]) + abs(stu[st][1] - che[ch][1])\n        if dist < min_dis:\n            min_dis = dist\n            idx = ch\n    print idx + 1\n"}
{"label": 45, "index": 5840, "code": "def manhattan_distance(s, c):\n    return abs(s[0]-c[0]) + abs(s[1]-c[1])\n\n\ndef main():\n    n, m = map(int, input().split())\n\n    student = []\n    for _ in range(n):\n        a, b = map(int, input().split())\n        student.append([a, b])\n\n    checkpoint = []\n    for _ in range(m):\n        c, d = map(int, input().split())\n        checkpoint.append([c, d])\n\n    for s in student:\n        d = {}\n        for i, c in enumerate(checkpoint):\n            d[i] = manhattan_distance(s, c)\n        print(sorted(d.items(), key=lambda x: x[1])[0][0]+1)\n    \n\n\nif __name__ == \"__main__\":\n    main()"}
{"label": 45, "index": 5841, "code": "# -*- coding: utf-8 -*-\nimport sys,copy,math,heapq,itertools as it,fractions,re,bisect,collections as coll\n\nN, M = map(int, raw_input().split())\nab = [map(int, raw_input().split()) for i in xrange(N)]\ncd = [map(int, raw_input().split()) for i in xrange(M)]\n\nfor i, (a, b) in enumerate(ab):\n    mn = 1e10\n    p = -1\n    for j, (c, d) in enumerate(cd, 1):\n        tmp = abs(a - c) + abs(b - d)\n        if tmp < mn:\n            mn = tmp\n            p = j\n    print p\n"}
{"label": 45, "index": 5842, "code": "import sys\n\ndef solve():\n    N, M = map(int, input().split())\n    st = [[int(i) for i in input().split()] for j in range(N)]\n    cp = [[int(i) for i in input().split()] for j in range(M)]\n\n    for a, b in st:\n        ans = 0\n        min_len = 10**9\n\n        for i, (c, d) in enumerate(cp):\n            tmp = abs(c - a) + abs(d - b)\n            if tmp < min_len:\n                min_len = tmp\n                ans = i + 1\n\n        print(ans)\n\n\ndef debug(x, table):\n    for name, val in table.items():\n        if x is val:\n            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)\n            return None\n\nif __name__ == '__main__':\n    solve()"}
{"label": 45, "index": 5843, "code": "n, m = map(int, raw_input().split())\nlx, ly, lxx, lyy = [], [], [], []\nfor i in range(n):\n\tx, y = map(int, raw_input().split())\n\tlx.append(x)\n\tly.append(y)\n\nfor i in range(m):\n\tx, y = map(int, raw_input().split())\n\tlxx.append(x)\n\tlyy.append(y)\n\nfor i in range(n):\n\tmi = 10000000000\n\tnote = 0\n\tfor j in range(m):\n\t\tif abs(lx[i] - lxx[j]) + abs(ly[i] - lyy[j]) < mi:\n\t\t\tmi = abs(lx[i] - lxx[j]) + abs(ly[i] - lyy[j])\n\t\t\tnote = j + 1\n\tprint note"}
{"label": 45, "index": 5844, "code": "def dis(p1, p2):\n    return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n\nN,M = map(int, input().split())\na = []\nfor i in range(N):\n    a.append(list(map(int, input().split())))\n\nb = []\nfor i in range(M):\n    b.append(list(map(int, input().split())))\n\nfor s in a:\n    max_d = 1e9\n    cp = 0\n    for k,v in enumerate(b):\n        tmp_d = dis(s, v)\n        if(tmp_d < max_d):\n            max_d = tmp_d\n            cp = k\n    print(cp+1)\n"}
{"label": 45, "index": 5845, "code": "N,M = map(int,input().split())\nA = []\nfor n in range(N):\n\ta,b = map(int,input().split())\n\tA.append([a,b])\nB = []\nfor m in range(M):\n\tl = list(map(int,input().split()))\n\tl.append(m)\n\tB.append(l)\n\nfor a in A:\n\tR = min([abs(B[i][0] - a[0]) + abs(B[i][1] - a[1]) for i in range(M)])\n\tB2 = [b for b in B if abs(b[0] - a[0]) + abs(b[1] - a[1]) == R]\n\tprint(min([b[2] for b in B2]) + 1)\n"}
{"label": 45, "index": 5846, "code": "N,M = list(map(int, input().split()))\na = [0]*N\nb = [0]*N\nc = [0]*M\nd = [0]*M\nfor k in range(N):\n     a[k],b[k] = list(map(int, input().split()))\nfor l in range(M):\n     c[l],d[l] = list(map(int, input().split()))\n\nfor i in range(N):\n    s=10**9\n    for j in range(M):\n        if  s>abs(a[i]-c[j])+abs(b[i]-d[j]):\n             s=abs(a[i]-c[j])+abs(b[i]-d[j])\n             e=j+1\n    print(e)"}
{"label": 45, "index": 5847, "code": "def mDistance(a, b):\n    axisDist = [abs(x0 - x1) for x0, x1 in zip(a, b)]\n    return(sum(axisDist))\n\n\nN, M = map(int, input().split())\nAn, Am = ([], [])\n\nwhile len(An) < N:\n    An.append(tuple(map(int, input().split())))\n\nwhile len(Am) < M:\n    Am.append(tuple(map(int, input().split())))\n\nfor a in An:\n    B = map(lambda b: mDistance(a, b), Am)\n    I, _ = min(enumerate(list(B)), key=lambda b: b[1])\n    print(I + 1)\n"}
{"label": 45, "index": 5848, "code": "import math\n\nN, M = map(int, raw_input().split())\na = []\nfor i in range(N+M):\n    a.append(map(int, raw_input().split()))\n\nb=[]\n\ndef mhtn(a,b,c,d):\n    return \n\nfor i in range(N):\n    best=4*10e8\n    num=0\n    for j in range(M):\n        x=math.fabs(a[i][0]-a[N+j][0])+math.fabs(a[i][1]-a[N+j][1])\n        \n        if(best>x):\n            best=x\n            num=j+1\n    b.append(num)\n\nfor i in b:\n    print i"}
{"label": 45, "index": 5849, "code": "n,m=map(int,raw_input().split())\nab=[map(int,raw_input().split()) for _ in xrange(n)]\ncd=[map(int,raw_input().split()) for _ in xrange(m)]\nans=[]\nfor i in xrange(n):\n    a,b=ab[i]\n    tmp=10**12\n    idx=-1\n    for j in xrange(m):\n        c,d=cd[j]\n        if abs(a-c)+abs(b-d)<tmp:\n            tmp=abs(a-c)+abs(b-d)\n            idx=j\n    ans.append(idx)\nfor i in xrange(n):\n    print ans[i]+1\n"}
{"label": 46, "index": 5850, "code": "n = int(input())\nprint(min([max(len(str(n // x)), len(str(x))) for x in range(1, int(n ** 0.5) + 1) if n%x == 0]))"}
{"label": 46, "index": 5851, "code": "def ri():\n    return map(int, raw_input().split())\n\nn = ri()[0]\n\nans = n\nfor i in xrange(1, int(n**0.5) + 10):\n    if n % i == 0:\n        ans = n / i\n\nprint len(str(ans))\n"}
{"label": 46, "index": 5852, "code": "N = int(input())\nf = 13\nfor i in range(1, 1000000):\n\tif N % i == 0:\n\t\ttmp = int(N / i)\n\t\tf = min(f ,max(len(str(i)), len(str(tmp))))\n\t\t\nprint(f)"}
{"label": 46, "index": 5853, "code": "import sys, array, re, functools\nfrom math import sqrt, ceil; from itertools import count, islice\ninput = lambda: sys.stdin.readline()\n@functools.lru_cache(maxsize = 10000)\n\n\n\ndef isPrime(n):\n    return n > 1 and all(n%i for i in islice(count(2), int(sqrt(n)-1)))\ndef f(a, b):\n  return  max(len(str(a)), len(str(b)))\n\ndef Main():\n  N = int(input())\n  v = -1\n  if isPrime(N):\n    print(len(str(N)))\n  elif not isPrime(N):\n    for i in range(1, ceil(sqrt(N)) + 1):\n      if N%i == 0:\n        t = f(int(i), int (N/i))\n        if v == -1 or v > t:\n          v = t\n    print(v)\n    \nif __name__ == '__main__':\n  Main()"}
{"label": 46, "index": 5854, "code": "import math\n\nN = int(input())\nret = float('inf')\ni = 1\n\nwhile i * i <= N:\n    if N % i == 0:\n        ret = min(ret, int(math.log10(N / i)) + 1)\n    i += 1\n\nprint(ret)\n"}
{"label": 46, "index": 5855, "code": "import itertools\n\nn = int(input())\nfactor = []\ndiv = 2\nwhile n >= div*div:\n    if n % div == 0:\n        factor.append(max(div,n//div))\n    div += 1\nfactor.append(int(n))\nprint(len(str(min(factor))))\n"}
{"label": 46, "index": 5856, "code": "N = int(raw_input())\n\nfor i in xrange(1, N+1):\n\n    if i*i > N:\n        break\n\n    if N % i == 0:\n        t = i\n\nprint len(str(N/t))"}
{"label": 46, "index": 5857, "code": "#!/usr/bin/python\n\nimport math\nimport sys\n\ndef F(a, b):\n    return max(len(str(a)), len(str(b)))\n\ndef main(argv):\n    for line in sys.stdin:\n        n = int(line)\n\n        small= 0\n        for i in xrange(int(math.sqrt(n)), 0, -1):\n            if n % i == 0:\n                small = i\n                break\n\n        print F(small, n / small)\n\nif __name__ == \"__main__\":\n    main(sys.argv)"}
{"label": 46, "index": 5858, "code": "import math\n\nn = int(input())\nret = 10000000000000000\nfor i in range(1, int(math.sqrt(float(n))+5.0)):\n    if n % i:\n        continue;\n    ret = min(ret, max(int(math.log10(n//i)), int(math.log10(i))) + 1)\n\nprint(ret)\n"}
{"label": 46, "index": 5859, "code": "import math\n\nN = int(input())\nend = math.floor(math.sqrt(N))\n\ncount = float('inf')\nfor i in range(1, end + 1):\n    if N % i == 0:\n        b = str(int(N / i))\n        a = str(i)\n        c = max(len(a), len(b))\n        count = min(c, count)\n    else:\n        count = count\nprint(count)"}
{"label": 46, "index": 5860, "code": "import math\nn=int(input())\nm=int(math.sqrt(n))\ni=0\nwhile 1:\n if n%(m-i)==0 and n%(m+i+1)==0:\n  print(min(int(math.log10(n/(m-i))),int(math.log10(m+i+1)))+1)\n  break\n if n%(m-i)==0:\n  print(int(math.log10(n/(m-i)))+1)\n  break\n if n%(m+1+i)==0:\n  print(int(math.log10(m+i+1))+1)\n  break\n i+=1"}
{"label": 46, "index": 5861, "code": "\ndef func(j):\n    if j<10:\n        return 1\n    else:\n        return func(j/10)+1\n\nN = int(raw_input())\n\n\nans=100000000\ni=0\nwhile i*i<N:\n    i+=1\n    j = 0\n    if N%i==0:\n        j = N/i\n        if ans>func(j):\n            ans=func(j)\nprint ans\n"}
{"label": 46, "index": 5862, "code": "# coding: utf-8\nimport math\n\nnum_N = int(input())\n\nmin_num = 999999\nsqrt_N = math.floor(math.sqrt(num_N))\n\nfor i in range(1, sqrt_N + 1):\n    if num_N % i == 0:\n        len_num_A = len(str(i))\n        len_num_B = len(str(int(num_N / i)))\n        min_num = min(min_num, max(len_num_A, len_num_B))\n\nprint(min_num)"}
{"label": 46, "index": 5863, "code": "from sys import stdin \nn = int(stdin.readline())\nans = 10**18 \ni = 1 \nwhile i*i <=n:\n    if n%i==0:\n        j = n/i \n        cur = max(len(str(i)) , len(str(j)))\n        ans = min(ans,cur)\n    i+=1 \nprint ans "}
{"label": 46, "index": 5864, "code": "# _*_ coding:utf-8 _*_\n\nimport sys\n\nN = sys.stdin.readline().replace('\\n','')\nN = int(N)\n\ndef Func(a,b):\n\tif a > b:\n\t\treturn digit(a)\n\telse: return digit(b)\n\t\t\ndef digit(num):\n\td = len(str(num))\n\treturn d\n\nans = 10\n\nfor i in range(1,N+1):\n\tif i*i > N: break\n\tif N % i == 0:\n\t\tdum = Func(N//i,i)\n\t\tif ans > dum:\n\t\t\tans = dum\n\nprint(ans)"}
{"label": 46, "index": 5865, "code": "import math\nn = input()\nans = ()\nfor x in xrange(1, int(math.sqrt(n))+1):\n    if n%x<1:\n        ans = min(ans, max(len(str(x)), len(str(n/x))))\nprint ans"}
{"label": 46, "index": 5866, "code": "import math\n\ndef digits(n):\n    if n == 0:\n        return 0\n    return digits(n/10) + 1\n\nN = int(raw_input())\nans = digits(N)\nfor d in range(2, int(math.sqrt(N))+1):\n    if d*d > N:\n        break\n    if N % d == 0:\n        temp = max(digits(d), digits(N/d))\n        if temp < ans:\n            ans = temp\nprint ans\n"}
{"label": 46, "index": 5867, "code": "# -*- coding:utf-8 -*-\nimport math\nN = int(input())\nprint(min(sorted(list(set([max(int(math.log10(N//B))+1,int(math.log10(B))+1) for B in range(1,int(math.sqrt(N+1))+1) if N%B == 0])))))"}
{"label": 46, "index": 5868, "code": "import math\n\nN = int(input())\na = int(math.sqrt(N))\n\nans = [0]*2\nfor i in reversed(range(1, a+1)):\n  if N % i == 0:\n    ans[0] = i\n    ans[1] = N // i\n    break\nres = 0\nfor e in ans:\n  now = len(str(e))\n  if now > res:\n    res = now\n    \nprint(res)"}
{"label": 46, "index": 5869, "code": "import math\n\nN = int(input())\ngreater = 0\nmin_greater = 10**10\n\na = round(math.sqrt(N)) + 1\n\nfor i in range(1, a):\n\tif  N % i == 0:\n\t\tgreater = max(N / i, i)\n\tif greater < min_greater:\n\t\tmin_greater = greater\n\nans = int(math.log10(min_greater) + 1)\n\nprint(ans)\n\n"}
{"label": 46, "index": 5870, "code": "import math\n\nn=int(input())\n\ndef keta(n):\n    return int(math.log10(n)+1)\ndef max(a,b):\n    if a>b :return a\n    else: return b\n\nresult=100\nfor i in range(1,math.ceil(math.sqrt(n)+3)):\n    if n%i==0 and result>max(keta(i),keta(n//i)):\n        result=max(keta(i),keta(n//i))\nprint(result)\n"}
{"label": 46, "index": 5871, "code": "import math\n\n\ndef midDivisor(n):\n    k = int(math.sqrt(n))\n    while n // k * k != n:\n        k -= 1\n    return k\n\nn = int(input())\nprint(len(str(n // midDivisor(n))))\n"}
{"label": 46, "index": 5872, "code": "N = int(input())\n\nscore = len(str(N))\n\ni = 2\nwhile i ** 2 <= N:\n    a, b = divmod(N, i)\n    if b == 0:\n        score = min(score, len(str(a)))\n    i += 1\nprint(score)\n"}
{"label": 46, "index": 5873, "code": "import math\n\nN = input()\n\na=[]\n\nfor i in range(1, int(math.sqrt(N)+1)):\n    if(N%i==0):\n        a.append(i)\n\nb=[]\n\nfor i in a:\n    x=int(math.log10(i) + 1)\n    y=int(math.log10(N/i) + 1)\n    b.append(max([x,y]))\n\nprint min(b)"}
{"label": 46, "index": 5874, "code": "import sys\n\nstdin = sys.stdin\n\n\ndef na(): return map(int, stdin.readline().split())\n\n\ndef ns(): return stdin.readline().strip()\n\nn = int(ns())\ni = 1\nmi = n\nwhile i*i <= n:\n    if n % i == 0:\n        x = n//i\n        mi = min(mi, x)\n    i += 1\nprint(len(str(mi)))\n"}
{"label": 46, "index": 5875, "code": "import math\n\nN = int(input())\n\nfor i in range(1, math.ceil(math.sqrt(N)) + 1):\n    if N % i == 0:\n        factor1 = N / i\n        factor2 = i\n\nfactor1 = int(factor1)\n\nif factor1 < factor2:\n    print(len(str(factor2)))\nelse:\n    print(len(str(factor1)))\n"}
{"label": 46, "index": 5876, "code": "# -*- coding: utf-8 -*-\nimport numpy as np\nimport math\nn = int(input())\nres = []\nfor i in range(int(math.sqrt(n))):\n    if n%(i+1) == 0:\n        res.append(i+1)\nans = int(math.log10(n/res[-1]) + 1)\nprint(ans)\n"}
{"label": 46, "index": 5877, "code": "# -*- coding: utf-8 -*-\nN = int(input())\nminf = 11\nfor i in range(1,N+1):\n    if i**2 > N:\n        break\n    if N%i == 0:\n        j = N/i ## j > i\n    for k in range(1,12):\n        if 10**k > j:\n            if k < minf:\n                minf = k\n            else:\n                break\nprint(minf)\n"}
{"label": 46, "index": 5878, "code": "import math\nN=int(input())\nfor i in range(math.ceil(math.sqrt(N)), 0, -1):\n if N % i == 0:\n  ans = int(math.log10(N / i) + 1)\n  break\nprint(ans)"}
{"label": 46, "index": 5879, "code": "from math import sqrt\nn = int(raw_input())\nminD, i = len(str(n)), 1\nwhile i <= sqrt(n) + 1:\n    if n % i != 0:\n        i += 1\n        continue\n    j = n / i\n    minD = min(minD, max(len(str(i)), len(str(j))))\n    i += 1\nprint minD"}
{"label": 46, "index": 5880, "code": "MAX = 100000\n\n\ndef F(A, B):\n    return max(len(str(A)), len(str(B)))\n\nN = int(input())\n\nres = 100\nfor a in range(1, MAX):\n    if N % a == 0:\n        res = min(res, F(a, N // a))\n\nprint(res)"}
{"label": 46, "index": 5881, "code": "import math\nimport operator\nfrom itertools import *\nfrom functools import *\n\n\ndef main():\n    #infile = open(\"compprog.txt\", mode=\"r\")\n    n = int(input())\n    res = -1\n    divisors_found = set()\n    for subset in powerset(prime_factors(n)):\n        div1 = prod(subset)\n        if div1 not in divisors_found:\n            div2 = n // div1\n            this_f = f(div1, div2)\n            if res == -1 or this_f < res:\n                res = this_f\n            divisors_found.add(div1)\n            divisors_found.add(div2)\n    print(res)\n    #infile.close()\n\n\ndef f(a, b):\n    return max(len(str(a)), len(str(b)))\n\n\ndef prime_factors(num):\n    factor_list = []\n    while num % 2 == 0:\n        factor_list.append(2)\n        num //= 2\n    i = 3\n    while i <= math.sqrt(num):\n        if num % i == 0:\n            factor_list.append(i)\n            num //= i\n            i = 3\n        else:\n            i += 2\n    if num > 1:\n        factor_list.append(num)\n    return factor_list\n\n\ndef powerset(iterable):\n    s = list(iterable)\n    return list(chain.from_iterable(combinations(s, r) for r in range(len(s) + 1)))\n\n\ndef prod(iterable):\n    return reduce(operator.mul, iterable, 1)\n\n\n\nif __name__ == \"__main__\":\n    main()\n"}
{"label": 46, "index": 5882, "code": "import math\n\nN=int(raw_input())\n\nn=math.floor(math.sqrt(N))\n\nwhile(N%n!=0): n-=1\n\nm=N/n\nn=int(n)\nm=int(m)\n\nif n>=m:\n    print len(str(n))\nelse:\n    print len(str(m))\n"}
{"label": 46, "index": 5883, "code": "N = int(input())\n\ndef count_digit(N):\n    return(len(str(N)))\n\nans = count_digit(N)\n\nA = 1\nwhile (A * A <= N):\n    if N%A != 0: pass\n    else:\n        B = N//A\n        curDig = max(count_digit(A), count_digit(B))\n    ans = min(ans, curDig)\n    A += 1\nprint(ans)\n"}
{"label": 46, "index": 5884, "code": "n = int(input())\nn_sqrt = int(n ** 0.5) + 1\n\nmax_len = 0\nfor a in range(1, n_sqrt + 1):\n    if n % a == 0:\n        b = str(n//a)\n        max_len = max(len(b), len(str(a)))\n\nprint(max_len)\n"}
{"label": 46, "index": 5885, "code": "N = int(input())\n\n\ndef func(n):\n    return 11 if (N % n > 0) else len(str(N // n))\n\nnn = min(range(1, int(N**(0.5) + 1)), key=func)\nans = len(str(N // nn))\n\nprint(ans)\n"}
{"label": 46, "index": 5886, "code": "n = int(input())\n\ndef keta(r):\n    cnt = 0\n    while r:\n        r//=10\n        cnt+=1\n    return cnt\nans = 1e10\nfor i in range (1,1000000000):\n    if i * i > n :break\n    if n%i !=0 :continue\n    ans = min(ans,max(keta(n/i),keta(i)))\nprint(ans)\n\n"}
{"label": 46, "index": 5887, "code": "import math\nN = int(input())\nans = 10\n\nfor i in reversed(range(1,int(math.sqrt(N)) + 1)):\n    if N % i == 0:\n        A = len(str(i))\n        B = len(str(N //  i))\n        ans = min(ans,max(A,B))\n\nprint(ans)\n"}
{"label": 46, "index": 5888, "code": "N = int(input())\nimport math\n\nfor A in range(1, int(math.sqrt(N))+2):\n  if N % A == 0:\n    F = len(str((N//A)))\n\nprint (F)"}
{"label": 46, "index": 5889, "code": "N = int(input())\nm = list(map(lambda t:max(len(str(t[0])), len(str(t[1]))),[(r,int(N / r)) for r in range(2, int(N ** 0.5) + 2) if N % r == 0]))\nprint(min(m) if len(m) != 0 else len(str(N)))"}
{"label": 46, "index": 5890, "code": "import math\n\n\ndef main():\n    n = int(input())\n    res = f(1, n)\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            res = min(res, f(i, n // i))\n    print(res)\n\n\ndef f(a, b):\n    return max(len(str(a)), len(str(b)))\n\n\nif __name__ == \"__main__\":\n    main()\n"}
{"label": 46, "index": 5891, "code": "import sys\nimport math\n\nn = int(sys.stdin.readline().strip())\n\na = math.ceil(math.sqrt(n))\n\nans = 10\ni = a\nwhile i > 0:\n    if n % i == 0:\n        m1 = i\n        m2 = int(n/i)\n\n        m = max(m1, m2)\n        ord_m = int(math.log10(m) + 1)\n        ans = min(ans, ord_m)\n    i -= 1\n\nprint(ans)\n"}
{"label": 46, "index": 5892, "code": "import math\n\ndef F(A, B):\n    return max(list(map(int, [math.log10(A), math.log10(B)])))+1\n\n\ndef main():\n    N = int(input())\n    max_ = 0\n    for a in range(1, int(math.sqrt(N))+1):\n        if N % a != 0:\n            continue\n\n        b = N/a\n        v = F(a, b)\n        if max_ < v:\n            max_ = v\n    print(v)\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 46, "index": 5893, "code": "N=int(input())\n\n\nans=N\nfor a in range(1,N):\n    if a*a > N:\n        break\n\n    if(N%a==0):\n        b = N//a\n        f = max(len(str(a)), len(str(b)))\n        ans=min(ans,f)\nprint(ans)\n\n"}
{"label": 46, "index": 5894, "code": "import math\ndef F(a,b):\n    return max(len(str(a)), len(str(b)))\n    \ndef main():\n    n =int(input())\n    v = F(n,1)\n    \n    for a in range(1, int(math.sqrt(n))+1):\n        if n % a != 0:\n            continue\n        \n        b = n//a\n        v = min(v, F(a,b))\n    print(v)\n\nif __name__ == \"__main__\":\n    main()\n"}
{"label": 46, "index": 5895, "code": "import numpy as np\nN = int(raw_input())\n\ndef length(x):\n    return int(np.floor(np.log10(x))) + 1\n\ndef F(A, B):\n    return max(length(A), length(B))\n\ndef EstimateRoot(y):\n    return int(np.floor(np.sqrt(y)))\n    \nminF = 11\ncandidates = []\nfor i in xrange(EstimateRoot(N)):\n    if N % (i + 1) == 0:\n        candidates.append((i + 1, N/(i + 1)))\nfor c in candidates:\n    f = F(c[0], c[1])\n    if f < minF:\n        minF = f\nprint minF\n"}
{"label": 46, "index": 5896, "code": "from math import sqrt\nn = int(input())\nx = n\ni = 2\nwhile i <= sqrt(n):\n    if n % i == 0:\n        x = n / i\n    i += 1\nprint(len(str(int(x))))\n"}
{"label": 46, "index": 5897, "code": "N = int(raw_input())\nt = 1\n\nfor i in xrange(1, N):\n\n    if i*i > N:\n        break\n\n    elif i*i == N:\n        t = i\n        break\n\n    if N % i == 0:\n        t = i\n\nprint len(str(N/t))"}
{"label": 46, "index": 5898, "code": "import numpy as np\ndef F(x,y):\n    count = 1\n    if x<=y:\n        while y >= 10:\n            y = y/10\n            count += 1\n        return count\n    else :\n        while x >= 10:\n            x = x/10\n            count += 1\n        return count\n#print F(1,13)\nN = input()\nmin = 10**10\nindex = np.zeros(2)\nfor i in range(np.sqrt(N).astype(np.int32)):\n    if N%(i+1) == 0:\n       if min > F(i+1,N/(i+1)):\n           min = F(i+1,N/(i+1))\n           index[0] = i+1\n           index[1] = N/(i+1)\n       #print i+1, N/(i+1),F(i+1,N/(i+1)), min\n\nprint min"}
{"label": 46, "index": 5899, "code": "import math\nN=int(input())\nm=int(N**(1/2))\nwhile True:\n    if(N%m==0):\n        print(int(math.log10(N/m)+1))\n        break\n    else:\n        m-=1\n        #print(m)\n        continue"}
{"label": 46, "index": 5900, "code": "# -*- coding: utf-8 -*-\nimport math\n\nN = int(input())\n\n#1*N\nA_list = [int(math.log10(N)+1)]\n\nA = 2\n\nwhile A * A <= N:\n\tif N % A == 0:\n\t\tA_list.append(int(math.log10(N/A)+1))\n\tA += 1\n\nprint(min(A_list))"}
{"label": 46, "index": 5901, "code": "import math\n\nif __name__ == '__main__':\n    n = int(input())\n    ans = float('inf')\n\n    a = 1\n    while a <= math.sqrt(n):\n        if n % a == 0:\n            b = n // a\n            f = max(math.floor(math.log10(a) + 1), math.floor(math.log10(b) + 1))\n            ans = min(f, ans)\n\n        a += 1\n\n    print(ans)\n"}
{"label": 46, "index": 5902, "code": "n = int(input())\nans = []\nfor i in range(1, int(n ** 0.5) + 1):\n    if n % i == 0:\n        ans.append((max(len(str(i)), len(str(n // i)))))\nprint(min(ans))\n"}
{"label": 46, "index": 5903, "code": "import math\nn = int(input())\ns = int(math.sqrt(n))\nfor i in range(s,0,-1):\n    if (n%i == 0):\n        print(len(str(max(int(n/i), i))))\n        break"}
{"label": 46, "index": 5904, "code": "def f(a, b):\n    return max(len(str(a)), len(str(b)))\n\n\ndef main():\n    N = int(input())\n    min_f = 10\n    for i in range(1, N + 1):\n        if i ** 2 > N:\n            break\n        if N % i != 0:\n            continue\n        f_v = f(i, N // i)\n        if f_v < min_f:\n            min_f = f_v\n    print(min_f)\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 46, "index": 5905, "code": "from math import sqrt\n\ndef numLen(num):\n  return len(str(abs(num)))\n\ndef F(a, b):\n    return max(numLen(a), numLen(b))\n\nN = int(input())\nsqrtN = int(sqrt(N))\n\np = (0, 0)\nfor i in range(1,sqrtN+1):\n    if N % i == 0 and p[0] < i:\n        p = (i, N//i)\n\nprint(F(p[0], p[1]))"}
{"label": 46, "index": 5906, "code": "\nimport sys, math\n\nifnt = 168430090\n\ndef lg(x):\n\tbwl = 0\n\twhile x > 0:\n\t\tx /= 10\n\t\tbwl = bwl + 1\n\t\n\treturn bwl\n\n\n#sys.stdin = open(\"test.in\", \"r\")\nn = input()\nans = ifnt\nfor i in range(int(math.sqrt(n))):\n\tif n % (i + 1) == 0:\n\t\tans = min(ans, max(lg(i + 1), lg(n / (i + 1))))\n\t\nprint ans\n"}
{"label": 46, "index": 5907, "code": "import math\n\na = input()\nb = int(math.sqrt(a)) + 1\nc = 1\nmi = 100\n\nfor i in range(1, b):\n\tif a % i == 0:\n\t\td = a / i\n\tif max(len(str(i)), len(str(d))) < mi:\n\t\tmi = max(len(str(i)), len(str(d)))\n\nprint mi"}
{"label": 46, "index": 5908, "code": "from math import sqrt, log10\n\nn = int(input())\nfor i in range(int(sqrt(n)), 0, -1):\n    if n % i == 0:\n        print(int(log10(n // i)) + 1)\n        break\n"}
{"label": 46, "index": 5909, "code": "import math\n\nn=int(input())\n\nres=float('inf')\nfor i in range(1,int(math.sqrt(n))+10):\n    if n%i==0:\n        res=min(res,max(len(str(i)),len(str(n//i))))\nprint(res)\n"}
{"label": 46, "index": 5910, "code": "import numpy as np\n\n\ndef numOfDigit(n):\n    return int(np.log10(n) + 1)\n\n\nN = int(input())\nM = numOfDigit(N)\n\nfor i in range(int(np.sqrt(N)) + 1):\n    if N % (i + 1) != 0:\n        continue\n    N1 = N / (i + 1)\n    N2 = i + 1\n    M = min(M, numOfDigit(max(N1, N2)))\n\nprint(M)\n"}
{"label": 46, "index": 5911, "code": "import math\n\n\ndef main():\n    n = int(input())\n    res = f(1, n)\n    for i in range(int(math.sqrt(n)), 0, -1):\n        if n % i == 0:\n            this_f = f(i, n // i)\n            if this_f <= res:\n                res = this_f\n            else:\n                break\n    print(res)\n\n\ndef f(a, b):\n    return max(len(str(a)), len(str(b)))\n\n\nif __name__ == \"__main__\":\n    main()\n"}
{"label": 46, "index": 5912, "code": "n = int(raw_input())\n\nidx = 1\nmin_len = float(\"inf\")\nwhile idx * idx <= n:\n    if n % idx == 0:\n        length = len(str(n/idx))\n        if min_len > length:\n            min_len = length\n    idx += 1\n    \nprint min_len\n"}
{"label": 46, "index": 5913, "code": "from math import sqrt\n\n# C-Digits in Multiplication\n# \u554f\u984cURl:http://abc057.contest.atcoder.jp/tasks/abc057_c\n\nN = int(input())\nF = 999;\nfor i in range(1,int(sqrt(N))+1):\n    \n    if N%i == 0: #\u4f59\u308a\u304c0 = i\u306f\u6574\u6570\u306a\u306e\u3067\u6574\u6570\u540c\u58eb\u306e\u5272\u308a\u7b97\u3068\u3044\u3046\u3053\u3068(\u4f59\u308a\u3092\u6c42\u3081\u308b\u969b\u306b\u306f\u5c11\u6570\u307e\u3067\u5546\u3092\u6c42\u3081\u306a\u3044\uff09\n        F =  min(F , max( len(str(i)) , len(str(N//i)) ) )\nprint(F)\n        "}
{"label": 46, "index": 5914, "code": "import sys\nimport math\n\ndef get_read_func(fileobject):\n    if fileobject == None :\n        return raw_input\n    else:\n        return fileobject.readline\n\n\ndef main():\n    if len(sys.argv) > 1:\n        f = open(sys.argv[1])\n    else:\n        f = None\n    read_func = get_read_func(f);\n    input_raw = read_func()\n    top_str = input_raw.strip().split()\n    [N] = [int(top_str[0])]\n\n    min_F = sys.maxint\n    digit = int(math.log10(N) + 1)\n    for i in range(10 ** int((digit)/2.0 + 0.5) , 0 , -1):\n        if(N % i == 0):\n            A = i\n            B = N/i\n            F = max(int(math.log10(A) + 1), int(math.log10(B) + 1))\n            if F < min_F:\n                min_F = F\n            #break\n    print min_F\n\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 46, "index": 5915, "code": "# -*- coding: utf-8 -*-\nimport math\n\nN = int(input())\nr = math.sqrt(N)\nR = int(r)\nif r == R:\n    print(len(str(R)))\n    quit()\nfor i in range(R + 1, 3, -1):\n    if N % i == 0:\n        b = int(N / i)\n        if len(str(i)) >= len(str(b)):\n            print (len(str(i)))\n        else:\n            print (len(str(b)))\n        quit()\nprint(len(str(N)))"}
{"label": 46, "index": 5916, "code": "def solve():\n    N = int(input())\n\n    min_length = 11\n    for a in range(1, int(N ** 0.5) + 1):\n        if N % a == 0:\n            min_length = min(min_length, max(len(list(str(a))), len(list(str(N // a)))))\n\n    print(min_length)\n\n\nsolve()"}
{"label": 46, "index": 5917, "code": "import math\nn = int(input())\nnn = int(math.sqrt(n))\nwhile n%nn != 0: nn-=1\nans = len(str(n//nn))\nprint(ans)"}
{"label": 46, "index": 5918, "code": "import math\n\nN = int(input())\n\nfor i in range(math.ceil(math.sqrt(N)), 0, -1):\n    if N % i == 0:\n        ans = int(math.log10(N / i) + 1)\n        break\nprint(ans)"}
{"label": 46, "index": 5919, "code": "from math import sqrt,log10,floor\n\nINF = 10 ** 10\n\nn = int(input())\n\nans = INF\nfor i in range(1,floor(sqrt(n))+1):\n    if n % i == 0:\n        ans = min(ans,floor(log10(max(i,n//i)))+1)\nprint(ans)"}
{"label": 46, "index": 5920, "code": "# -*- coding: utf-8 -*-\ndef reduce(N):\n    from math import sqrt, ceil\n    from copy import deepcopy\n    h_reductions = []\n    for i in range(ceil(sqrt(N))):\n        if N % (i+1) == 0:\n            h_reductions.append(i+1)\n\n    reductions = deepcopy(h_reductions)\n\n    if h_reductions[-1]**2 != N:\n        for i in range(len(h_reductions)):\n            reductions.append(int(N/h_reductions[-1*i - 1]))\n    else:\n        for i in range(len(h_reductions)-1):\n            reductions.append(int(N/h_reductions[-1*i - 2]))\n    return reductions\n\nN = int(input())\n\nreductions = reduce(N)\n\nprint(len(str(int(reductions[len(reductions)//2]))))\n"}
{"label": 46, "index": 5921, "code": "import math;\n \nn = int(input());\na = int(math.sqrt(n));\n \nwhile True:\n    b = n // a;\n    if n == a * b:\n        print(int(math.log10(b))+1);\n        break\n    a = a-1;"}
{"label": 46, "index": 5922, "code": "import math\n\nN = int(raw_input())\n\nsqn = int(math.sqrt(N))\nans = 100\n\nfor A in range(1, sqn + 1):\n    if N % A == 0:\n        B = N / A\n        ans = min(ans, max(len(str(A)), len(str(B))))\nprint ans"}
{"label": 46, "index": 5923, "code": "import math\n\nn = int(input())\nans = len(str(n))\n\nfor i in range(1, int(math.sqrt(n))+1):\n    if n % i == 0:\n        ans = min(ans, max(len(str(i)), len(str(n // i))))\nprint(ans)\n"}
{"label": 46, "index": 5924, "code": "import math\n\ndef keta(a):\n    count=1\n    while a>=10:\n        a/=10\n        count+=1\n    return count\n\n\nN=int(input())\nmi=10\nfor i in range(1,int(N/math.sqrt(N)+1)):\n    if N%i==0:\n        j=int(N/i)\n        if mi>max(keta(i),keta(j)):\n            mi=max(keta(i),keta(j))\n\nprint(mi)"}
{"label": 46, "index": 5925, "code": "# -*- coding: utf-8 -*-\n\nimport math\n\nn = int(raw_input())\n\ni = 1\n# sqn = math.ceil(math.sqrt(n))\n\nwhile i * i <= n:\n    if n % i == 0:\n        ans = n / i\n        #ans = int(math.log10(n / i)) + 1\n    i += 1\nprint len(str(ans))#(ans)"}
{"label": 46, "index": 5926, "code": "import itertools,math,bisect,pprint,sys\n#n, m = map(int, raw_input().split())\nn = input()\nres = 10**5\nfor i in range(1,int(math.sqrt(n)+1)):\n    a = i\n    if n%i==0:\n        b = n/a\n        res = min(res,max(len(str(a)),len(str(b))))\nprint res"}
{"label": 46, "index": 5927, "code": "n = int(input())\n\na = []\nb = []\n\nimport math\n\nfor i in range(1, math.floor(n**0.5) + 1):\n    if n%i == 0:\n        a.append(i)\n        b.append(int(n/i))\n\na = list(map(str, a))\nb = list(map(str, b))\n\n\nresult = []\nfor i in range(len(a)):\n    result.append(max(len(a[i]), len(b[i])))\n\nprint(min(result))\n"}
{"label": 46, "index": 5928, "code": "import math\n\n\ndef f(a, b):\n    return max(len(str(a)), len(str(b)))\n\n\ndef main():\n    n = int(input())\n\n    i = 1\n    minv = 100000000000\n    while i <= int(math.sqrt(n)):\n        if n%i == 0 and f(i, n//i) < minv:\n            minv = f(i, n//i)\n        i += 1\n    print(minv)\n    \n\nif __name__ == \"__main__\":\n    main()"}
{"label": 46, "index": 5929, "code": "import math\nN=int( input())\nfor r in range (int(math.sqrt(N)),0,-1):\n  if N%r==0:\n    count=1\n    l=N/r\n    for i in range (0,10):\n      l=l/10\n      if l<1:\n        print(count)\n        break\n      count+=1\n    break"}
{"label": 46, "index": 5930, "code": "import math\nn = int(input())\nnn = int(math.sqrt(n))\nwhile n%nn != 0: nn-=1\nans = len(str(n//nn))\nprint(ans)"}
{"label": 46, "index": 5931, "code": "import math\nn = int(input())\nnn = int(math.sqrt(n))\nfor i in range(nn,0,-1):\n    if n%i==0:\n        print(len(str(n//i)))\n        break\n"}
{"label": 46, "index": 5932, "code": "from math import sqrt\n\n\ndef F(a, b):\n    return max(len(str(a)), len(str(b)))\n\nN = int(input())\n\nbest = 1<<30\nfor A in range(1, int(sqrt(N)) + 1):\n    B = N // A\n    if A * B != N:\n        continue\n    c = F(A, B)\n    if best > c:\n        best = c\n\nprint(best)"}
{"label": 46, "index": 5933, "code": "\ndef countDigs(n):\n\tdigs = 0\n\twhile n > 0:\n\t\tdigs += 1\n\t\tn = n // 10\n\treturn digs\n\n# def calcUpperLimit(n):\n# \tx = 1\n# \tif (n <= x**2):\n# \t\treturn int(n // 2) + 1\n# \tfor i in range(x, 0, -1):\n# \t\tif (n % x == 0):\n# \t\t\treturn n // x + 1\n# \treturn int(n // 2) + 1\n\n# def digs(n):\n# \tfor i in range(int((n + 0.1) ** 0.5), calcUpperLimit(n)):\n# \t\tif (n % i == 0):\n# \t\t\tprint(countDigs(i))\n# \t\t\treturn\n# \tprint(countDigs(n))\n\ndef digs(n):\n\tfor i in range(int((n + 0.1) ** 0.5), 0, -1):\n\t\tif n % i == 0:\n\t\t\tprint(countDigs(n // i))\n\t\t\treturn\n\ndigs(int(input()))"}
{"label": 46, "index": 5934, "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport math\n\n\ndef f(a, b):\n    return max(len(str(a)), len(str(b)))\n\n\nn = int(input())\nr, cur = math.floor(math.sqrt(n)), 999999\n\nfor i in range(1, r + 1):\n    if n % i != 0: continue\n\n    ret = f(i, int(n / i))\n    if ret < cur:\n        cur = ret\n\nprint(cur)\n"}
{"label": 46, "index": 5935, "code": "def main():\n    N = int(input())\n    n = int(N**(0.5) + 1)\n    while N % n > 0:\n        n -= 1\n    print(len(str(N // n)))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 46, "index": 5936, "code": "# -*- coding: utf-8 -*-\nimport sys,copy,math,heapq,itertools as it,fractions,re,bisect,collections as coll\n\ndef fact(n):\n    i = 2\n    res = []\n    while i*i <= n:\n        while n % i == 0:\n            res.append(i)\n            n /= i\n        i += 1\n    res.append(n)\n    return sorted(res)\n\ndef dfs(array, a, b, pos):\n    if len(array) == pos:\n        return max(len(str(a)), len(str(b)))\n    return min(dfs(array, a*array[pos], b, pos + 1), dfs(array, a, b*array[pos], pos + 1))\n\nN = int(raw_input())\nf = fact(N)\nprint dfs(f, 1, 1, 0)\n"}
{"label": 46, "index": 5937, "code": "import math\n\n\ndef f(a, b):\n    q = len(str(a))\n    w = len(str(b))\n    return max(q, w)\n\n\nN = int(input())\nmi = 10**10\nfor i in range(1, int(math.sqrt(N)) + 1):\n    if N % i == 0:\n        mi = min(mi, f(i, int(N/i)))\nprint(mi)\n"}
{"label": 46, "index": 5938, "code": "import math\n\ndef digits(num):\n    return len(str(num))\n\nN = int(input())\nmin_d = digits(N)\nfor i in list(range(2, math.ceil(math.sqrt(N)) + 1, 1)):\n    if (N % i == 0):\n        min_d = min(max(digits(i),digits(int(N / i))), min_d)\nprint(min_d)\n"}
{"label": 46, "index": 5939, "code": "import math\n\nn = int(input())\nf = 10\n\nfor a in range(1, int(math.sqrt(n))+1):\n    if not n%a==0:\n        continue\n    b = n//a\n\n    f = min(f, max(len(str(a)), len(str(b))))\n    \nprint(f)"}
{"label": 46, "index": 5940, "code": "import math\n\n\nN = int(input())\nNsq = int(math.sqrt(N)) + 1\nans = 10**9\n\nfor n in range(1, Nsq):\n    if N % n == 0:\n        A = n\n        B = N // n\n\n        F = max(len(str(B)), len(str(A)))\n        ans = min(ans, F)\n\n\nprint(ans)\n"}
{"label": 46, "index": 5941, "code": "import math\ndef digit(X):\n    d = 0\n    while X:\n        X //= 10\n        d += 1\n    return d\n\ndef F(A, B):\n    return max(digit(A), digit(B))\n\nN = int(input())\n\nmin_F = 20\nmax_div = round(math.sqrt(N)) + 10\nfor i in range(1, max_div):\n    if N % i == 0:\n        f = F(i, N/i)\n        if f < min_F:\n            min_F = f\nprint(min_F)\n\n"}
{"label": 46, "index": 5942, "code": "#!/usr/bin/env python3\n\n\ndef div_pairs(n):\n    for i in range(1, n + 1):\n        if i * i > n:\n            break\n        d, m = divmod(n, i)\n        if m == 0:\n            yield (i, d)\n\n\ndef f(a, b):\n    return max(len(str(a)), len(str(b)))\n\n\ndef solve(n):\n    return min(f(a, b) for a, b in div_pairs(n))\n\n\ndef main():\n    print(solve(int(input())))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 46, "index": 5943, "code": "def keta(N):\n  return len(str(N))\n\nN=int(input())\nA=1\nans=keta(N)\nwhile A*A <= N:\n  if N % A == 0:\n    B = N // A\n    ans=min(ans,keta(B))\n  A += 1\nprint(ans)"}
{"label": 46, "index": 5944, "code": "#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport os\nimport sys\nimport itertools\nimport math\nfrom collections import Counter, defaultdict\n\nclass Main(object):\n    \n    def __init__(self):\n        pass\n\n    def solve(self):\n        '''\n        insert your code\n        '''\n        n = int(input())\n        candidate = int(math.sqrt(float(n)))\n\n        for i in range(candidate, 0, -1):\n            if n % i == 0:\n                print(max(int(math.log10(i)) + 1, int(math.log10(n / i)) + 1))\n                break\n        return None\n\nif __name__ == '__main__':\n    m = Main()\n    m.solve()\n"}
{"label": 46, "index": 5945, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\n\n\ndef main():\n    n = I()\n    s = int(math.sqrt(n))+1\n    t = n\n    for i in range(s,0,-1):\n        if n % i == 0:\n            t = max(n//i,i)\n            break\n    ti = 0\n    while t > 0:\n        ti += 1\n        t //= 10\n    return ti\n\n\n\nprint(main())\n"}
{"label": 46, "index": 5946, "code": "N = int(raw_input())\n\nimport math\nmid = int(math.sqrt(N))\n\nleft = mid\nwhile left > 0:\n    if not N % left: break\n    left -= 1\nright = N / left\nres = len(str(right))\nprint res"}
{"label": 46, "index": 5947, "code": "from math import sqrt\n\ndef F(t):\n    return max(len(str(t[0])), len(str(t[1])))\n\nN = int(input())\nm = list(map(F,[(r,int(N / r)) for r in range(2, int(sqrt(N)) + 1) if N % r == 0]))\nprint(min(m) if len(m) != 0 else len(str(N)))"}
{"label": 46, "index": 5948, "code": "import math\n\ndef main():\n    N = int(input())\n\n    a = int(math.sqrt(N))\n    while a >= 1:\n        if N % a == 0:\n            break\n        a -= 1\n    b = int(N / a)\n    print(len(str(b)))\n\nmain()\n"}
{"label": 46, "index": 5949, "code": "import sys,math\n\nN = int(raw_input())\nn = int(math.sqrt(N)) + 1\nd = None\nfor x in range(1, n):\n\tif (N % x == 0): d = x\nprint len(list(str(N / d)))\n"}
{"label": 46, "index": 5950, "code": "#! coding: UTF-8\nnum = int(input())\n#\u6841\u6570\ndef digit(x):\n    point = 0\n    while int(x) > 0:\n        x /= 10\n        point += 1\n    return point\n#num=A*B\u306e\u6642\u306e\u6700\u5c0f\u6841\u6570\ndef Multi(num):\n    y = digit(num)\n    A = 1\n    while A*A <= num:\n        if num%A == 0:\n            B = num/A\n            C = max(digit(A),digit(B))\n            if y > C:\n                y = C\n        A += 1\n    print(y)\nMulti(num)\n"}
{"label": 46, "index": 5951, "code": "def keta(n):\n    return len(str(n))\n\ndef F(a, b):\n    return max(keta(a), keta(b))\n\nN = input()\n\ni = 1\nans = float('inf')\nwhile i * i <= N:\n    if N % i == 0:\n        ans = min(ans, F(i, N/i))\n    i += 1\nprint ans\n"}
{"label": 46, "index": 5952, "code": "N = int(input())\n\nrN = int(pow(N, (1/2)))+1\n\nminf = float(\"inf\")\nfor i in range(1,rN):\n\tif (N//i) * i == N:\n\t\tminf = min(minf,max(len(str(i)),len(str(N//i))))\n\nprint(minf)"}
{"label": 46, "index": 5953, "code": "#ABC057C\n\nn=int(raw_input())\nres=n\ni=1\nwhile i*i<=n:\n if n%i==0:\n  res=min(res,n/i)\n i+=1\nprint len(str(res))\n"}
{"label": 46, "index": 5954, "code": "import sys\nimport math\n\ndef get_degit(n):\n    return int(math.log10(n) + 1)\n\ndef solve(n):\n    ans = 100\n\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            a = n / i\n            b = n / a\n            k = max(get_degit(a), get_degit(b))\n            if k < ans:\n                ans = k\n\n    return ans\n\ndef main():\n    n = int(sys.stdin.readline())\n    ans = solve(n)\n\n    print(ans)\n\n    return 0\n\nif __name__ == '__main__':\n    sys.exit(main())\n"}
{"label": 46, "index": 5955, "code": "N=int(input())\nA=1\nB=N\n\ndef f(A,B):\n    A,B=str(A),str(B)\n    A,B=len(A),len(B)\n    return max(A,B)\n\nans=[]\nfor i in range(1,int(N**0.5+2)):\n    if N%i!=0:continue\n    B=N//i\n    ans.append(f(i,B))\nprint(min(ans))\n"}
{"label": 46, "index": 5956, "code": "import math\ndef solve():\n  N = int(raw_input())\n  yaks = []\n  for n in range(1, int(math.sqrt(N)) + 1) :\n    if(N % n == 0): yaks.append(n)\n  #print yaks\n  mind = 999\n  for a in yaks:\n    b = N / a\n    #print(a, b)\n    d = max(len(str(a)), len(str(b)))\n    #print d\n    if d < mind :\n      mind = d\n  return mind\n\nif __name__ == '__main__':\n  print solve()"}
{"label": 46, "index": 5957, "code": "N = int(input())\nA = []\ni = 1\nn = N ** (1/2)\nwhile i <= n:\n\tif round((N / i) % 1,6) == 0:\n\t\tA.append(i)\n\ti = i + 1\na = max(len(str(A[-1])),len(str(N // A[-1])))\nprint(a)"}
{"label": 46, "index": 5958, "code": "import math\nn = int(input())\na = int(math.sqrt(n))\nwhile n%a != 0: a-=1\nprint(len(str(n//a)))"}
{"label": 46, "index": 5959, "code": "import sys\nimport math\n\nINF = 10**9+7\n\nstdin = sys.stdin\ndef na(): return map(int, stdin.readline().split())\ndef ns(): return stdin.readline().strip()\ndef nsl(): return list(stdin.readline().strip())\ndef ni(): return int(stdin.readline())\ndef nil(): return list(map(int, stdin.readline().split()))\n\na = b = INF\nn = ni()\n\nx = int(math.sqrt(n) // 1 + 1)\nfor i in reversed(range(x)):\n    if((n/i) == (n//i)):\n        a = i\n        b = n // i\n        break\n\nans = max(len(str(a)), len(str(b)))\nprint(ans)\n\n"}
{"label": 46, "index": 5960, "code": "import sys\n\n# sys.stdin = open('c1.in')\n\n\ndef read_int_list():\n    return list(map(int, input().split()))\n\n\ndef read_str_list():\n    return input().split()\n\n\ndef read_int():\n    return int(input())\n\n\ndef read_str():\n    return input()\n\n\ndef F(a, b):\n    return max(len(str(a)), len(str(b)))\n\n\nn = read_int()\nres = 10 ** 20\nfor a in range(1, n + 1):\n    if a * a > n:\n        break\n    if n % a == 0:\n        b = n // a\n        f = F(a, b)\n        if f < res:\n            res = f\nprint(res)\n"}
{"label": 46, "index": 5961, "code": "#!/usr/bin/env python3\n\nimport math\n\nN = int(input())\nans = 1e10\nfor i in range(1, int(math.sqrt(N)) + 1):\n    j = N // i\n    if N == i * j:\n        ans = min(ans, max(len(str(i)), len(str(N // i))))\nprint(ans)\n"}
{"label": 46, "index": 5962, "code": "N=int(input())\nans=len(str(N))\nfor i in range(1,int(N**0.5)+1):\n    if N % i == 0:\n        ans = min(ans,max(len(str(i)),len(str(N//i))))\n\nprint(ans)"}
{"label": 46, "index": 5963, "code": "import math\n\nN = int(input())\n\nresult_set = []\n\nfor i in range(1, int(pow(N, 0.5)) + 1):\n    if N % i == 0:\n        result_set.append([i, N // i])\n\nresult = pow(10, 10)\n\nfor i in result_set:\n    result = min(result, int(math.log10(max(i)) + 1))\n\n\nprint(result)"}
{"label": 46, "index": 5964, "code": "import math\n\nif __name__ == \"__main__\":\n    N = int(input())\n    n = len(str(N))\n    for i in xrange(int(math.sqrt(N)), 1, -1):\n        if N % i == 0:\n            ii = N/i\n            n = max(len(str(i)), len(str(ii)))\n            break\n    print(n)"}
{"label": 46, "index": 5965, "code": "n = int(input())\ni = 1\nans = n\n\nwhile i * i <= n:\n    if n % i == 0:\n        b = n // i\n        f = len(str(max(ans, b)))\n        ans = min(ans, f)\n\n    i += 1\n\nprint(ans)\n"}
{"label": 46, "index": 5966, "code": "def dig(t):\n    res = 0\n    \n    if t == 0:\n        return 1\n    \n    while t > 0:\n        t//=10\n        res+=1\n\n    return res\n\nn = int(input())\n\nf = 1000000000\n\nfor i in range(n+1):\n    if i*i > n: break\n    if i <= 0 or n%i > 0: continue\n    \n    f = min(f, max(dig(i), dig(n//i)))\n    \nprint(f)\n"}
{"label": 46, "index": 5967, "code": "import numpy as np\n\nn = int(input())\nmax_div = 1\nfor i in range(1,int(np.sqrt(n))+1):\n    if n % i == 0:\n        max_div = n//i\nret = len(str(max_div))\nprint(ret)"}
{"label": 46, "index": 5968, "code": "N = int(input());\n\nans = 1000;\nfor i in range(1, N+1) :\n\tif i * i > N :\n\t\tbreak;\n\tif N % i == 0 : \n\t\tm = N / i;\n\t\tans = min(ans, len(str(m)));\nprint(ans-2);"}
{"label": 46, "index": 5969, "code": "# -*- coding: utf-8 -*-\nimport numpy as np\nimport math\n\nN = input()\n\nMinDigit = 10000000001\nfor i in range(int(math.sqrt(N))+1):\n    quotient = 1.0*N/(i+1)\n    if(quotient.is_integer() == True):\n        #print(i+1,quotient)\n        #print(len(str(i+1)),len(str(int(quotient))))\n        #print(max(len(str(i+1)),len(str(int(quotient)))))\n        if(MinDigit>max(len(str(i+1)),len(str(int(quotient))))):\n            MinDigit = max(len(str(i+1)),len(str(int(quotient))))\n\nprint(MinDigit)"}
{"label": 46, "index": 5970, "code": "import math\nn=long(raw_input())\na=1\nans=0\nwhile a*a<=n:\n\tif n%a==0:\n\t\tb=n/a\n\t\tans=0\n\t\twhile b>=1.0:\n\t\t\tans+=1\n\t\t\tb/=10\n\ta+=1\nprint ans\n"}
{"label": 46, "index": 5971, "code": "from math import *\n\n\ndef read(): return list(map(int, input().split()))\n\ndef f(a, b):\n    return max(len(str(a)), len(str(b)))\n\n\nn = int(input())\nans = 114514\nfor a in range(1, int(sqrt(n)) + 1):\n    if n % a != 0: continue\n    b = n // a\n    ans = min(ans, f(a, b))\n\nprint(ans)\n"}
{"label": 46, "index": 5972, "code": "# -*- coding: utf-8 -*-\n\nimport sys\nimport os\nimport math\n\n\nN_str = input().strip()\nmin_digit = len(N_str)\n\nN = int(N_str)\n\nMAX = int(math.sqrt(N)) + 1\nmin_digit = float('inf')\n\nfor i in range(1, MAX + 1):\n    if N % i == 0:\n        # \u5272\u308c\u308b\n        digit0 = len(str(i))\n        digit1 = len(str(int(N / i)))\n        digit = max(digit0, digit1)\n        if digit < min_digit:\n            min_digit = digit\nprint(min_digit)\n"}
{"label": 46, "index": 5973, "code": "import math\n\ndef f(a,b):\n    return max(len(str(a)), len(str(b)))\n\nn = int(input())\nv = -1\nfor i in range(1, math.ceil(math.sqrt(n)) + 1):\n    if n % i == 0:\n        t = f(int(i), int(n/i))\n        if v == -1 or v > t:\n            v = t\nprint(v)"}
{"label": 46, "index": 5974, "code": "import math\nN = int(input())\nM = math.floor(math.sqrt(N))\n\ndef F(a,b):\n    return max(math.floor(math.log10(a)), math.floor(math.log10(b))) + 1\n\nres = 0\n\nfor m in range(1, M+1):\n    if N % m == 0:\n        res = F(m, N//m)\n\nprint(res)"}
{"label": 46, "index": 5975, "code": "import math\n\ndef keta(a):\n    count=1\n    while a>=10:\n        a/=10\n        count+=1\n    return count\n\n\nN=int(input())\nmi=10\nfor i in range(1,int(N/math.sqrt(N)+1)):\n    if N%i==0:\n        j=int(N/i)\n        if mi>max(keta(i),keta(j)):\n            mi=max(keta(i),keta(j))\n\nprint(mi)\n"}
{"label": 46, "index": 5976, "code": "import math\n\ndef NumOfDigit(X):\n    i=0\n    while X>0:\n        X//=10\n        i+=1\n    return i\n\ndef F(A,B):\n    return max(NumOfDigit(A),NumOfDigit(B))\n\nif __name__==\"__main__\":\n    N=int(input())\n\n    A,B=1,1\n    now_min=NumOfDigit(N)\n    while A<=math.sqrt(N):\n        if N%A==0:   #B\u306f\u6574\u6570\u304b\uff1f\n            B=N/A     #A*B=N\u304c\u6210\u7acb\n\n            result=F(A,B)\n            if result<now_min:\n                now_min=result\n\n        A+=1\n\n    print(now_min)\n"}
{"label": 46, "index": 5977, "code": "import math\n\nn = int(input())\n\na = 1\nfor x in range(1, math.floor(math.sqrt(n)) + 1):\n  if n % x == 0:\n    a = x\n\nb = n / a\nres = 1\nfor i in reversed(range(11)):\n  if b >= 10 ** i:\n    res = i + 1\n    break\n\nprint(res)\n"}
{"label": 46, "index": 5978, "code": "import math\n\nN = int(input())\nret = float('inf')\ni = 1\n\nwhile i * i <= N:\n    if N % i == 0:\n        ret = min(ret, int(max(math.log10(i), math.log10(N/i))) + 1)\n    i += 1\n\nprint(ret)"}
{"label": 46, "index": 5979, "code": "import math\n\nN = int(input())\nn = int(math.sqrt(N)) + 1\nif N / n == n:\n    print(int(math.log10(n) + 1))\nelse:\n    while N % n != 0:\n        n -= 1\n    print(int(math.log10(N/n) + 1))\n"}
{"label": 47, "index": 5980, "code": "a,b,c=map(int,raw_input().split())\nprint [\"NO\",\"YES\"][b-a==c-b]"}
{"label": 47, "index": 5981, "code": "a = [int(i) for i in input().split()]\nprint(\"YES\" if a[1]*2==a[0]+a[2] else \"NO\")"}
{"label": 47, "index": 5982, "code": "a=input().split()\nif int(a[1])*2==int(a[0])+int(a[2]):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 47, "index": 5983, "code": "a, b, c = map(int, input().split())\nprint(\"YES\" if b - a == c - b else \"NO\")\n"}
{"label": 47, "index": 5984, "code": "#! -*- coding:utf-8 -*-\nimport math\nimport sys\na,b,c = map(int,input().split())\nx = b - a\ny = c - b\nif x == y:\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 47, "index": 5985, "code": "a, b, c = input().split(\" \")\nif int(b) * 2 == int(a) + int(c):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 47, "index": 5986, "code": "n = input()\ntmp_n = n.split(\" \")\n\nc1 = int(tmp_n[1]) - int(tmp_n[0])\nc2 = int(tmp_n[2]) - int(tmp_n[1])\n\nif c1 == c2:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 47, "index": 5987, "code": "a, b, c = [int(i) for i in input().split()]\nif(b - a == c - b):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 47, "index": 5988, "code": "a = list(map(int, input().split()))\nif a[0] -a[1] == a[1] - a[2]:\n print(\"YES\")\nelse:\n print(\"NO\")"}
{"label": 47, "index": 5989, "code": "n = map(int, raw_input().split())\n\nif n[1]*2 == n[0] + n[2]:\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 47, "index": 5990, "code": "a, b, c = map(int,input().split())\n\nif b - a == c - b:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 47, "index": 5991, "code": "l = input().split()\n\na = l[0]\nb = l[1]\nc = l[2]\n\nx = int(b) - int(a)\ny = int(c) - int(b)\n\nif x == y:\n\tprint('YES')\nelse:\n\tprint('NO')"}
{"label": 47, "index": 5992, "code": "b = input().split()\na = [int(b[i]) for i in range(len(b))]\n\nprint(\"YES\") if (a[1] - a[0] == a[2] - a[1]) else print(\"NO\")"}
{"label": 47, "index": 5993, "code": "a, b, c = list(map(int, input().split()))\nif b - a == c - b:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n\t"}
{"label": 47, "index": 5994, "code": "A, B, C = map(int, input().split())\n\nif(B - A == C - B):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 47, "index": 5995, "code": "a, b, c = list(map(int, input().split()))\n\nif b - a == c - b:\n    print('YES')\nelse:\n    print('NO')\n\n"}
{"label": 47, "index": 5996, "code": "a,b,c =map(int,input().split())\n\nif b-a==c-b:\n    print(\"YES\")\n\nelse:\n    print (\"NO\")\n"}
{"label": 47, "index": 5997, "code": "a, b, c = map(int, input().split())\nif (b - a) == (c - b):\n    print('YES')\nelse:\n    print('NO')\n    \n"}
{"label": 47, "index": 5998, "code": "a, b, c = list(map(int, input().split()))\n\nif b - a == c - b:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 47, "index": 5999, "code": "a = list(map(int, input().split()))\nif a[1] - a[0] == a[2] - a[1]:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 47, "index": 6000, "code": "a,b,c=map(int,input().split())\n\nif b-a==c-b :\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 47, "index": 6001, "code": "\nlength = list(map(int, input().split()))\nif length[0] == 2*length[1] - length[2]:\n    print('YES')\n\nelse:\n    print('NO')\n\n"}
{"label": 47, "index": 6002, "code": "a, b, c = map(int, input().split(\" \"));\n\nif b-a == c-b:\n    print(\"YES\");\nelse:\n    print(\"NO\");\n"}
{"label": 47, "index": 6003, "code": "a,b,c = map(int, input().split())\nprint(\"YES\" if b-a == c-b else \"NO\")"}
{"label": 47, "index": 6004, "code": "input_lines = str(input())\ninputAry = input_lines.split(' ')\n\na = int(inputAry[0])\nb = int(inputAry[1])\nc = int(inputAry[2])\n\nif b-a == c-b:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 47, "index": 6005, "code": "a, b, c = [int(t) for t in input().split()]\n\nif b-a == c-b:\n  print('YES')\nelse:\n  print('NO')"}
{"label": 47, "index": 6006, "code": "a,b,c = [int(i) for i in input().split()]\nif b-a==c-b:\n\tprint('YES')\nelse:\n\tprint('NO')"}
{"label": 47, "index": 6007, "code": "abc = raw_input().split()\na = int(abc[0])\nb = int(abc[1])\nc = int(abc[2])\n\nif b - a == c - b:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 47, "index": 6008, "code": "a,b,c = map(int,input().split())\nif b-a == c-b:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 47, "index": 6009, "code": "a, b, c = map(int, input().split())\nif b-a == c-b : print('YES')\nelse: print('NO')\n\n"}
{"label": 47, "index": 6010, "code": "# -*- coding: utf-8 -*-\n\nimport sys\nimport os\nimport math\n\n\na, b, c = list(map(int, input().split()))\n\nif b - a == c - b:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 47, "index": 6011, "code": "a, b, c = map(int, input().split(\" \"))\nif b - a == c - b:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 47, "index": 6012, "code": "#ABC058A\n\na,b,c=map(int,raw_input().split())\nx=a+c-b*2\nif x:\n print 'NO'\nelse:\n print 'YES'\n"}
{"label": 47, "index": 6013, "code": "a,b,c =map(int,input().split())\n\nif (b-a) == (c-b):\n    print(\"YES\")\n\nelse:\n    print(\"NO\")"}
{"label": 47, "index": 6014, "code": "a, b, c = map(int, raw_input().split())\nprint \"YES\" if ((b - a) == (c - b)) else \"NO\""}
{"label": 47, "index": 6015, "code": "a,b,c = map(int,input().split())\nif 2 * b == a + c:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 47, "index": 6016, "code": "a, b, c = map(int, input().split())\nif c-b == b-a:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 47, "index": 6017, "code": "strs = input().split()\na = int(strs[0])\nb = int(strs[1])\nc = int(strs[2])\n\nif b - a == c - b:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n\n"}
{"label": 47, "index": 6018, "code": "a,b,c=map(int,input().split())\nif b-a==c-b:\n print ('YES')\nelse:\n print ('NO')\n"}
{"label": 47, "index": 6019, "code": "ns=list(map(int, input().split()))\nns.sort()\nif ns[0] + ns[2] == ns[1]*2:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 47, "index": 6020, "code": "a, b, c = map(int, raw_input().split())\nif b - a == c - b:\n\tprint 'YES'\nelse:\n\tprint 'NO'\n"}
{"label": 47, "index": 6021, "code": "a, b, c = list(map(int, input(\" \").split(\" \")))\nif b-a == c-b:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 47, "index": 6022, "code": "if __name__ == '__main__':\n    a, b, c = map(int, input().split())\n    print(\"YES\" if b - a == c - b else \"NO\")\n"}
{"label": 47, "index": 6023, "code": "A, B, C = map(int, raw_input().split())\n\nmergin1=B-A\nmergin2=C-B\n\nif mergin1==mergin2:\n print 'YES'\nelse:\n print 'NO'"}
{"label": 47, "index": 6024, "code": "a, b, c = (int(_) for _ in input().split())\nif b-a==c-b:\n\tprint('YES')\nelse:\n\tprint('NO')"}
{"label": 47, "index": 6025, "code": "a, b, c = [int(i) for i in input().split(' ')]\n\nif b-a == c-b:\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 47, "index": 6026, "code": "a,b,c = map(int,raw_input().split())\n\nif a - b == b - c:\n  print 'YES'\nelse:\n  print 'NO'\n"}
{"label": 47, "index": 6027, "code": "#!/usr/bin/env python\n# -*- conding: utf-8 -*-\n\nraw = raw_input()\na = int(raw.split()[0])\nb = int(raw.split()[1])\nc = int(raw.split()[2])\n\nif (b - a) - (c - b) == 0:\n    print 'YES'\nelse:\n    print 'NO'\n"}
{"label": 47, "index": 6028, "code": "a, b, c = map(int, input().split())\nif b-a == c-b:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 47, "index": 6029, "code": "a, b, c = input().split()\n\na = int(a)\nb = int(b)\nc = int(c)\n\nprint('YES') if b-a == c-b else print('NO')\n"}
{"label": 47, "index": 6030, "code": "a, b, c = map(int, input().split())\n\nif (a-b==b-c):\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 47, "index": 6031, "code": "a,b,c = map(int, raw_input().split())\n\nif b-a == c-b:\n    print 'YES'\nelse:\n    print 'NO'"}
{"label": 47, "index": 6032, "code": "a,b,c = map(int,input().split())\nif b-a == c-b:\n  print(\"YES\")\nelse:\n  print(\"NO\")\n"}
{"label": 47, "index": 6033, "code": "a, b, c = map(int, input().split())\n\nif (b-a)==(c-b):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 47, "index": 6034, "code": "# coding: utf-8\n\nif __name__ == '__main__':\n    a,b,c = map(int,input().split())\n    if b-a == c-b:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"}
{"label": 47, "index": 6035, "code": "a, b, c = input().split()\nA, B, C = int(a), int(b), int(c)\nif B-A == C-B:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")"}
{"label": 47, "index": 6036, "code": "a, b, c = input().split()\na = int(a)\nb = int(b)\nc = int(c)\nif b - a == c - b:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 47, "index": 6037, "code": "# \u03b9\u22a5l\na,b,c = list(map(int, input().split()))\nif ( b-a==c-b ):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 47, "index": 6038, "code": "a,b,c = map(int,input().split())\nif 2 * b == a + c:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 47, "index": 6039, "code": "x = list(map(int,input().split()))\nif x[1]-x[0]==x[2]-x[1]:\n\tprint('YES')\nelse:\n\tprint('NO')\n"}
{"label": 47, "index": 6040, "code": "a,b,c = map(int,input().split())\nif b-a == c-b:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 47, "index": 6041, "code": "a, b, c = map(int, input().split())\nx1 = b-a\nx2 = c-b\nif(x1 == x2): print(\"YES\")\nelse: print(\"NO\")"}
{"label": 47, "index": 6042, "code": "tmp = input().split()\na, b, c = int(tmp[0]), int(tmp[1]), int(tmp[2])\n\ns1 = b - a\ns2 = c - b\n\nif s1 == s2:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 47, "index": 6043, "code": "a,b,c=(int(i) for i in input().split())\nif b-a==c-b:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 47, "index": 6044, "code": "a, b, c = map(int, input().split())\nprint(\"YES\" if b - a == c - b else \"NO\")"}
{"label": 47, "index": 6045, "code": "a, b, c = map(int, input().split())\nprint('YES' if b - a == c - b else 'NO')\n"}
{"label": 47, "index": 6046, "code": "def solve():\n    a, b, c = map(int, input().split())\n    if b - a == c - b:\n        ans = \"YES\"\n    else:\n        ans = \"NO\"\n    print(ans)\n\nif __name__ == \"__main__\":\n    solve()\n"}
{"label": 47, "index": 6047, "code": "a,b,c=map(int,raw_input().split())\nif b-a==c-b:\n    print \"YES\"\nelse:\n    print \"NO\""}
{"label": 47, "index": 6048, "code": "a, b, c = input().split()\na = int(a)\nb = int(b)\nc = int(c)\n\nif b - a == c - b:\n    res = 'YES'\nelse:\n    res = 'NO'\nprint(res)\n"}
{"label": 47, "index": 6049, "code": "a = map(int,raw_input().split())\n#a = int(raw_input())\n\nif a[1] - a[0] == a[2] - a[1]:\n        print \"YES\"\nelse:\n        print \"NO\""}
{"label": 47, "index": 6050, "code": "#! coding: UTF-8\na,b,c = list(map(int,input().split(\" \")))\nif (b-a) == (c-b):\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n"}
{"label": 47, "index": 6051, "code": "a = list(map(int,input().split()))\nif a[1] - a[0] == a[2] - a[1]:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 47, "index": 6052, "code": "a, b, c = map(int, input().split())\nprint('YES' if b - a == c - b else 'NO')\n"}
{"label": 47, "index": 6053, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\n\n\ndef main():\n    a,b,c = LI()\n    if c-b == b-a:\n        return 'YES'\n    return 'NO'\n\n\n\nprint(main())\n"}
{"label": 47, "index": 6054, "code": "a = [int(i) for i in input().split()]\na.sort()\nif a[1] - a[0] == a[2] - a[1] :\n    print('YES')\nelse :\n    print('NO')"}
{"label": 47, "index": 6055, "code": "(a, b, c) = sorted(map(int, input().split()))\nprint('YES' if c - b == b - a else 'NO')"}
{"label": 47, "index": 6056, "code": "a, b, c = map(int, input().split())\nif b - a == c - b:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 47, "index": 6057, "code": "a, b, c = map(int, raw_input().split())\n\nif (b - a) == (c - b):\n    print('YES')\nelse:\n    print('NO')"}
{"label": 47, "index": 6058, "code": "import sys\n\ndef main():\n    line = sys.stdin.readline()\n    a, b, c = [ int(i) for i in line.split() ]\n    if b - a == c - b:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n    return 0\n\nif __name__ == '__main__':\n    sys.exit(main())\n"}
{"label": 47, "index": 6059, "code": "a,b,c = input().split()\na = int(a)\nb = int(b)\nc = int(c)\nif b-a==c-b:\n    print('YES')\nelse :\n    print('NO')"}
{"label": 47, "index": 6060, "code": "a, b, c = map(int, input().split())\nif (b - a) == (c - b) :\n    print(\"YES\")\nelse :\n    print(\"NO\")\n"}
{"label": 47, "index": 6061, "code": "def judge(a, b, c):\n\tif b - a == c - b:\n\t\treturn 'YES'\n\telse:\n\t\treturn 'NO'\n\t\t\ninpt = map(int, raw_input().split())\n\nprint judge(inpt[0], inpt[1], inpt[2])\n"}
{"label": 47, "index": 6062, "code": "import sys\nimport math\n\nINF = 10**9+7\n\nstdin = sys.stdin\ndef na(): return map(int, stdin.readline().split())\ndef ns(): return stdin.readline().strip()\ndef nsl(): return list(stdin.readline().strip())\ndef ni(): return int(stdin.readline())\ndef nil(): return list(map(int, stdin.readline().split()))\n\na, b, c = nil()\n\nif(b-a == c-b):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 47, "index": 6063, "code": "s = input().split()\na,b,c = int(s[0]),int(s[1]),int(s[2])\nif b-a==c-b:\n print('YES')\nelse:\n print('NO')"}
{"label": 47, "index": 6064, "code": "# -*- coding: utf-8 -*-\n\na,b,c = map(int,raw_input().split())\n\nif(b-a == c-b):\n    print('YES')\nelse:\n    print('NO')\n    "}
{"label": 47, "index": 6065, "code": "a,b,c=map(int,raw_input().split())\nif(b-a==c-b):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 47, "index": 6066, "code": "# -*- coding:utf-8 -*-\na, b, c = map(int, input().split())\nif b-a == c-b:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 47, "index": 6067, "code": "\na,b,c=input().split()\nif (int(b)-int(a))==(int(c)-int(b)):\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")"}
{"label": 47, "index": 6068, "code": "from collections import defaultdict\n\n\ndef main():\n    a, b, c = map(int, input().split())\n    print(\"YES\" if b - a == c - b else \"NO\")\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 47, "index": 6069, "code": "def read_int_list():\n    return list(int(i) for i in input().split())\n    \na,b,c = read_int_list()\nif b-a == c-b:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 47, "index": 6070, "code": "a, b, c = map(int, raw_input().split())\nif a - b == b - c:\n\tprint 'YES'\nelse:\n\tprint 'NO'\n"}
{"label": 47, "index": 6071, "code": "d=input().split()\na=int(d[0])\nb=int(d[1])\nc=int(d[2])\n\n\n\nif b-a==c-b:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 47, "index": 6072, "code": "a, b, c = map(int, raw_input().split())\nif b - a == c - b:\n    print \"YES\"\nelse:\n    print \"NO\"\n"}
{"label": 47, "index": 6073, "code": "a, b, c = map(int, input().split())\n\nif (b-a) == (c-b):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n        "}
{"label": 47, "index": 6074, "code": "(lambda x: print('YES') if x[1] - x[0] == x[2] - x[1]  else print('NO'))(list(map(int,input().split())))"}
{"label": 47, "index": 6075, "code": "# -*- coding: utf-8 -*-\n\ndef list_n():\n    return [int(e) for e in input().split()]\n\n\n\ndef main(a, b, c):\n    if b - a == c - b:\n        return 'YES'\n    else:\n        return 'NO'\n\nif __name__ == '__main__':\n    a, b, c = list_n()\n    print(main(a, b, c))\n"}
{"label": 47, "index": 6076, "code": "# coding: utf-8\n\na, b, c = map(int, raw_input().split())\n\nl = b - a\nr = c - b\n\nif l == r:\n    print \"YES\"\nelse:\n    print \"NO\"\n"}
{"label": 47, "index": 6077, "code": "a, b, c = map(int, input().split())\n\nif b-a == c-b:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 47, "index": 6078, "code": "a, b, c = input().split()\na, b, c = int(a), int(b), int(c)\n\nif b-a==c-b:\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 47, "index": 6079, "code": "a,b,c=[int(i)for i in input().split()]\nif a-b==b-c:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 47, "index": 6080, "code": "A,B,C=map(int,input().split())\nif B-A==C-B:\n  print(\"YES\")\nelse:\n  print(\"NO\")\n"}
{"label": 47, "index": 6081, "code": "a, b, c = map(int, input().split())\nif (b-a) == (c-b):\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 47, "index": 6082, "code": "a,b,c=map(int,input().split())\nif b-a == c-b :\n   print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 47, "index": 6083, "code": "a, b, c = map(int, input().split())\nif b-a == c-b:\n\tprint('YES')\nelse:\n\tprint('NO')"}
{"label": 47, "index": 6084, "code": "a, b, c = map(int, input().split())\nif (b - a) == (c - b):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 47, "index": 6085, "code": "a,b,c=map(int,input().split())\n\nif b-a==c-b:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 47, "index": 6086, "code": "a,b,c = map(int, input().split())\nprint('YES' if a-b == b-c else 'NO')"}
{"label": 47, "index": 6087, "code": "a,b,c = map(int,input().split())\n\nif b-a == c-b:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 47, "index": 6088, "code": "numbers = list(map(int, input().split(' ')))\nif numbers[2] - numbers[1] == numbers[1] - numbers[0]:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 47, "index": 6089, "code": "a, b, c = map(int, input().split())\nprint(\"YES\" if b - a == c - b else \"NO\")\n"}
{"label": 47, "index": 6090, "code": "#!/usr/bin/env python\n\na,b,c=map(int,raw_input().split())\n\nif c-b==b-a:\n    print 'YES'\nelse:\n    print 'NO'"}
{"label": 47, "index": 6091, "code": "a, b, c = map(int, input().split())\nif b - a == c - b:\n    print ('YES')\nelse:\n    print ('NO')"}
{"label": 47, "index": 6092, "code": "a,b,c=map(int,input().split())\nprint('YES' if b-a==c-b else 'NO')"}
{"label": 47, "index": 6093, "code": "a, b, c = map(int, raw_input().split())\n\nif c - b == b - a:\n\tprint \"YES\"\nelse:\n\tprint \"NO\""}
{"label": 47, "index": 6094, "code": "a, b, c = map(int, raw_input().split())\n\nif (b-a == c-b):                                                                                                                                                                                                                                                              \n    print \"YES\"\nelse:\n    print \"NO\""}
{"label": 47, "index": 6095, "code": "a, b, c = [int(i) for i in input().split()]\n\nif (b-a) == (c-b):\n    print('YES')\nelse:\n    print('NO')"}
{"label": 47, "index": 6096, "code": "a, b, c = map(int, input().split())\nif b - a == c - b:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 47, "index": 6097, "code": "a,b,c = map(int, input().split())\n\nif b - a == c - b:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 47, "index": 6098, "code": "a,b,c=input().split()\nd=[]\nd.append(int(a))\nd.append(int(b))\nd.append(int(c))\nif d[2]-d[1]==d[1]-d[0]:\n\tprint('YES')\nelse:\n\tprint('NO')"}
{"label": 47, "index": 6099, "code": "a,b,c = map(int,input().split())\n\nif b - a == c - b:\n  print(\"YES\")\nelse:\n  print(\"NO\")"}
{"label": 47, "index": 6100, "code": "a, b, c = map(int, input().split())\nif b - a == c - b:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 47, "index": 6101, "code": "strs = input().split()\na = int(strs[0])\nb = int(strs[1])\nc = int(strs[2])\n\nif b -a == c - b:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n\n"}
{"label": 47, "index": 6102, "code": "a, b, c = map(int, input().split())\nprint(\"YES\" if b-a==c-b else \"NO\")"}
{"label": 47, "index": 6103, "code": "a,b,c=map(int,input().split())\n\nif b-a==c-b:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 47, "index": 6104, "code": "#coding:utf-8\n\n\na,b,c =map(int,raw_input().split())  # 2 3  # \u4e8c\u3064\u306e\u6570\u5b57\n\nif (b-a) == (c-b):\n    print \"YES\"\nelse:\n    print \"NO\"\n"}
{"label": 47, "index": 6105, "code": "a,b,c = map(int, input().split(\" \"));\n\nprint( \"YES\" if (b-a == c-b) else \"NO\" );"}
{"label": 47, "index": 6106, "code": "a,b,c=map(int,raw_input().split())\nprint ['NO','YES'][b-a==c-b]"}
{"label": 47, "index": 6107, "code": "print 'YES' if (lambda l: l[2]-l[1] == l[1]-l[0] )([int(x) for x in raw_input().split()]) else 'NO'"}
{"label": 47, "index": 6108, "code": "a,b,c=map(int,input().split())\nif b-a == c-b:\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 47, "index": 6109, "code": "a,b,c = map(int,input().split())\n\nl = min(a,b,c)\nr = max(a,b,c)\nm = a+b+c-l-r\n\nprint('YES' if m-l == r-m else 'NO')\n"}
{"label": 48, "index": 6110, "code": "a = input()\nb = input()\n\nans = \"\"\nfor i in range(len(a)):\n  ans += a[i]\n  if(i != len(a) - 1):\n    ans += b[i]\n  else:\n    if(len(a) == len(b)):\n      ans += b[i]\n\nprint(ans)\n"}
{"label": 48, "index": 6111, "code": "O = raw_input()\nE = raw_input()\npw = ''\nif len(O) == len(E):\n    for (o, e) in zip(O, E):\n        pw += o\n        pw += e\nelif len(O) > len(E):\n    for (o, e) in zip(O[:len(E)], E):\n        pw += o\n        pw += e\n    pw += O[-1]\nelse:\n    for (o, e) in zip(O, E[:len(O)]):\n        pw += o\n        pw += e\n    pw += E[-1]\nprint pw"}
{"label": 48, "index": 6112, "code": "# -*- coding: utf-8 -*-                                                \n\nimport os\nimport sys\nimport math\nimport numpy as np\n\nO = input()\nE = input()\nans = ''\nfor i in range(len(E)):\n    ans += O[i]\n    ans += E[i]\n\nif len(O) != len(E):\n    ans += O[-1]\n\nprint(ans)"}
{"label": 48, "index": 6113, "code": "import sys\n\ndef solve():\n    O = input()\n    E = input() + '#'\n\n    ans = [c1 + c2 for c1, c2 in zip(O, E)]\n    ans = ''.join(ans).rstrip('#')\n\n    print(ans)\n\nif __name__ == '__main__':\n    solve()"}
{"label": 48, "index": 6114, "code": "a=raw_input()\nb=raw_input()\nl=''\nfor i in range(len(a)):\n    l+=a[i]\n    if i<len(b):\n        l+=b[i]\nprint l"}
{"label": 48, "index": 6115, "code": "# -*- coding: utf-8 -*-\n\nimport sys\nimport os\nimport math\n\n\nA = input().strip()\nB = input().strip()\n\n\n\nif len(A) == len(B):\n    for i in range(len(A)):\n        print(A[i], end='')\n        print(B[i], end='')\nelse:\n    for i in range(len(B)):\n        print(A[i], end='')\n        print(B[i], end='')\n    print(A[-1], end='')\n\n"}
{"label": 48, "index": 6116, "code": "# -*- coding: utf-8 -*-\n\nimport sys\nimport subprocess\nimport json\nimport time\nimport math\nimport re\nimport sqlite3\n\nO = input()\nE = input()\nres = \"\"\nfor i in range(len(O)):\n    res += O[i]\n    if i < len(E): res += E[i]\n\nprint(res)\n\n"}
{"label": 48, "index": 6117, "code": "from itertools import zip_longest\nO = input()\nE = input()\nfor w, z in zip_longest(O, E):\n    if w == None:\n        print(z, end=\"\")\n    elif z == None:\n        print(w, end=\"\")\n    else:\n        print(w + z, end=\"\")\nprint()\n"}
{"label": 48, "index": 6118, "code": "o = input()\ne = input()\n\nans = \"\"\nfor i in range(len(e)):\n    ans += o[i]\n    ans += e[i]\nif len(o) > len(e):\n    ans += o[-1]\nprint(ans)\n"}
{"label": 48, "index": 6119, "code": "od = input()\nev = input().ljust(len(od), '0')\n\npw = ''\nfor i, j in zip(od, ev):\n\tpw += i+j\n\nif pw[-1] == '0':\n\tpw = pw[0:-1]\n\nprint(pw)"}
{"label": 48, "index": 6120, "code": "O = list(input())\nE = list(input())\nleng =  len(O) + len(E)\npasswd = \"\"\n\nfor i in range(0, leng):\n  if i % 2 == 1:\n    j = int( (i - 1)/2 )\n    passwd += E[j]\n  else:\n    j = int( i / 2 )\n    passwd += O[j]\n\nprint(passwd)"}
{"label": 48, "index": 6121, "code": "O = input()\nE = input()\nE += '*' * (len(O) - len(E))\nans = ''\nfor i in range(len(O)):\n    ans += O[i]\n    ans += E[i]\nif ans[-1] == '*':\n    print(ans[:-1])\nelse:\n    print(ans)\n    \n"}
{"label": 48, "index": 6122, "code": "A = str(input())\nB = str(input())\nC = [A[i]+B[i] for i in range(len(B))]\n\nif len(A) > len(B):\n    C.append(A[-1])\nelse:\n    pass\n\nC_str = \"\".join(C)\n\nprint(C_str)"}
{"label": 48, "index": 6123, "code": "O = input()\nE = input()\n\nans = ''\nfor i in range(len(O)+len(E)):\n    ans += O[i//2] if i % 2 == 0 else E[i//2]\n    \nprint(ans)"}
{"label": 48, "index": 6124, "code": "# -*- coding: utf-8 -*-\nO = input()\nE = input()\ntext = \"\"\nif len(O) == len(E):\n    for i in range(len(O)):\n        text += O[i] + E[i]\nelse:\n    for i in range(len(O) - 1):\n        text += O[i] + E[i]\n    text += O[-1]\nprint(text)"}
{"label": 48, "index": 6125, "code": "# -*- coding;utf-8 -*-\nO, E = (list(input()),list(input()))\nO.reverse()\nE.reverse()\nfactor = len(O)+len(E)\nnum = 1\nans = []\nwhile factor > 0:\n    if num%2 != 0:\n        tmp = O.pop()\n    else:\n        tmp = E.pop()\n    ans.append(tmp)\n    num += 1\n    factor -= 1\nans = ''.join(ans)\nprint(ans)"}
{"label": 48, "index": 6126, "code": "o = input()\ne = input()\nret = \"\"\nfor i in range(len(o) + len(e)):\n    if i % 2 == 0:\n        ret += o[i//2]\n    else:\n        ret += e[i//2]\nprint(ret)\n"}
{"label": 48, "index": 6127, "code": "O = [i for i in input()]\nE = [i for i in input()]\npsw = ''\n\nfor i in range(len(E)):\n    psw += O[i] + E[i]\n\nif len(O) > len(E):\n    psw += O[-1]\n\n\nprint(psw)\n"}
{"label": 48, "index": 6128, "code": "O = input()\nE = input()\nresult = ''\nfor o,e in zip(O, E):\n    result += o+e\nelse:\n    if len(O)==len(E)+1:\n        result += O[-1]    \nprint(result)"}
{"label": 48, "index": 6129, "code": "def main():\n    O = list(input())\n    E = list(input())\n\n    if len(O) > len(E):\n        E.append('')\n\n    i = 0\n    passwd = ''\n    while i < len(O):\n        passwd = passwd + O[i] + E[i]\n        i += 1\n    print(passwd)\n\nmain()\n"}
{"label": 48, "index": 6130, "code": "o = input()\ne = input()\na = list(zip(range(0,len(o) * 2,2), list(o)))\nb = list(zip(range(1,len(e) * 2,2),list(e)))\nprint(''.join(map(lambda x: x[1], sorted(a + b))))"}
{"label": 48, "index": 6131, "code": "#coding:utf-8\n\n\no = list(str(raw_input()))  # \u5947\u6570\ne = list(str(raw_input()))  # \u5076\u6570\nout=[]\n# print o\n# print e\n# print len(o)\n# print len(e)\n# count =0\nif len(o)>len(e):\n    for i in range(len(e)):\n        # if i == len(o):\n        #     out.append(o[i])\n        #     print a\n        #     break\n        # else:\n        out.append(o[i])\n        out.append(e[i])\n    out.append(o[-1])\n        # count+=1\nelse:\n    for i in range(len(e)):\n        out.append(o[i])\n        out.append(e[i])\n        # count +=1\n# print out\n# out = [1,2,3,4,5]\n# out_str = map(str,out)\n# print out_str #=> \"1,2,3,4,5\"\n# print count\nprint \"\".join(out)\n"}
{"label": 48, "index": 6132, "code": "o = list(input())\ne = list(input())\n\nans = \"\"\nfor i in range(len(e)):\n    ans += o.pop(0)\n    ans += e.pop(0)\nelse:\n    if o:\n        ans += o.pop(0)\n\nprint(ans)\n"}
{"label": 48, "index": 6133, "code": "o = input()\ne = input()\n\n\nans = \"\"\nfor i in range(len(o) + len(e)):\n    if i % 2 == 0:\n        ans += o[i//2]\n    else:\n        ans += e[(i-1)//2]\n\nprint(ans)"}
{"label": 48, "index": 6134, "code": "# -*- coding: utf-8 -*-\n\nimport os\nimport sys\n\nclass Main(object):\n\n    def __init__(self):\n        pass\n\n    def some_method(self):\n        o = input()\n        e = input()\n        ans = ''\n        length = max(len(o), len(e))\n        for i in range(length):\n            if i < len(o):\n                ans += o[i]\n            if i < len(e):\n                ans += e[i]\n        print(ans)\n                         \n                \n\n        return None\n\nif __name__ == '__main__':\n    m = Main()\n    m.some_method()\n"}
{"label": 48, "index": 6135, "code": "O=input()\nE=input()\n\nL=[]\n\nif len(O)>len(E):\n    for i in range(len(E)): \n        L.append(O[i])\n        L.append(E[i])\n        \n    L.append(O[i+1])\n        \nelse:\n    for i in range(len(E)): \n        L.append(O[i])\n        L.append(E[i])\n\nprint(\"\".join(L))"}
{"label": 48, "index": 6136, "code": "if __name__ == \"__main__\":\n    X = input()\n    Y = input()\n    N = len(X) + len(Y)\n    res = \"\"\n    cnt1 = 0\n    cnt2 = 0\n    for x in range(N):\n        if (x % 2 == 0):\n            res += X[cnt1]\n            cnt1 += 1\n        else:\n            res += Y[cnt2]\n            cnt2 += 1\n    print (res)\n"}
{"label": 48, "index": 6137, "code": "import sys\nimport numpy as np\n\nI = input()\nJ = input()\nE = list(I)\nO = list(J)\n\npassword = E[0] + O[0]\nif len(E) == len(O):\n\tfor i in range(1,len(O)):\n\t\tpassword = password + E[i] + O[i]\nelse:\n\tfor i in range(1,len(O)):\n\t\tpassword = password + E[i] + O[i]\n\tpassword = password + E[len(E) - 1]\n\nprint(password)\n"}
{"label": 48, "index": 6138, "code": "o = list(input())\ne = list(input())\n\nfor i in range(len(e)):\n        print(o[i],e[i],sep=\"\",end=\"\")\n\nif len(e)<len(o):\n        print(o[len(o)-1])\n\nprint(\"\")\n"}
{"label": 48, "index": 6139, "code": "O, E = raw_input(), raw_input()\nprint \"\".join([(O[i/2] if (i % 2 == 0) else E[i/2]) for i in range(len(O+E))])"}
{"label": 48, "index": 6140, "code": "O = input()\nE = input()\n\nans = ''\nfor o, e in zip(O, E):\n    ans += o + e\n\nif len(O) > len(E):\n    ans += O[-1]\n\nprint (ans)"}
{"label": 48, "index": 6141, "code": "# coding: utf-8\n\nodd = raw_input()\neven = raw_input()\n\nres = \"\"\nfor (o, e) in zip(odd, even):\n    res = res + o + e\n\nprint res if len(odd) - len(even) == 0 else res + odd[-1]\n"}
{"label": 48, "index": 6142, "code": "import numpy as np\ndef na(): return map(int, input().split())\n\no = input()\ne = input()\nm = min(len(o),len(e))\npassword = \"\"\nfor i in range(m):\n    password+=o[i]\n    password+=e[i]\n\nif len(o) > len(e):\n    password+=o[m]\n\nprint(password)"}
{"label": 48, "index": 6143, "code": "O=str(input())\nE=str(input())\nn=len(O)\nm=len(E)\nans=''\nfor i in range(n):\n    ans += O[i]\n    if i < m:\n        ans += E[i]\n\nprint(ans)\n"}
{"label": 48, "index": 6144, "code": "o = list(input())\ne = input()\n\nfor i in range(len(e)):\n    o.insert(i*2+1, e[i])\n\nprint(''.join(o))\n"}
{"label": 48, "index": 6145, "code": "o, e = [input().rstrip() for i in range(2)] \nans = \"\"\nfor i in range(len(o)):\n  ans += o[i]\n  if len(e) > i: ans += e[i]\nprint(ans)"}
{"label": 48, "index": 6146, "code": "O = input()\nE = input()\nX = \"\"\nfor i in range(len(E)):\n    X += (O[i]+E[i])\nif len(O) != len(E):\n    X += O[-1]\n\nprint(X)\n"}
{"label": 48, "index": 6147, "code": "print((lambda O, E, f: f('', list(O + E[::-1]), f))(input(), input(), lambda a, q, f: f(a + q[0], list(reversed(q[1:])), f) if q else a))"}
{"label": 48, "index": 6148, "code": "a = input()\nb = input()\nr = ''\nfor i in range(len(a)):\n  r+=a[i]\n  if i < len(b):\n    r+=b[i]\nprint(r)"}
{"label": 48, "index": 6149, "code": "s = input();\nt = input();\n\nn = len(s);\nfor i in range(n) :\n\tprint(s[i], end=\"\");\n\tif i < len(t) :\n\t\tprint(t[i], end=\"\");\nprint(\"\");\n"}
{"label": 48, "index": 6150, "code": "a = input()\nb = input()\n\nif len(a) == len(b):\n    for i in range(0,len(a)):\n        print(a[i]+b[i],end='')\nelse:\n    for i in range(0,len(a) - 1):\n        print(a[i] + b[i],end='')\n    print(a[len(a) - 1])"}
{"label": 48, "index": 6151, "code": "from itertools import zip_longest\n\nodd_line = input()\neven_line = input()\n\nres = \"\"\nfor o, e in zip_longest(odd_line, even_line, fillvalue=\"\"):\n\n    res += (o + e)\n\nprint(res)"}
{"label": 48, "index": 6152, "code": "s_vec1 = input()\ns_vec2 = input()\ndef abc_057_2(o,e):\n    s_vec3 = []\n    for i in range(0,len(e)):\n        s_vec3.append(o[i])\n        s_vec3.append(e[i])\n    if len(o) == len(e):\n        pass\n    else:\n        s_vec3.append(o[i+1])\n    return(''.join(s_vec3))\nprint(abc_057_2(s_vec1,s_vec2))"}
{"label": 48, "index": 6153, "code": "a = raw_input()\nb = raw_input()\nc = \"\"\ncount  = 0\nwhile count < len(b) :\n    c += a[count]+b[count]\n    count += 1\ntry:\n    c += a[count]\nexcept:\n    pass\nprint c"}
{"label": 48, "index": 6154, "code": "import itertools\n\nO = list(input())\nE = list(input())\n\nprint(\"\".join(itertools.chain(*zip(O, E))) + (O[-1] if len(O) is not len(E) else \"\"))\n"}
{"label": 48, "index": 6155, "code": "O = list(input())\nE = list(input())\npassword = []\nif len(O) - len(E) == 0:\n    for i in range(len(O)):\n        password.append(O[i])\n        password.append(E[i])\nelif len(O) - len(E) == 1:\n    for i in range(len(E)):\n        password.append(O[i])\n        password.append(E[i])\n    password.append(O[len(O)-1])\npassword = \"\".join(password)\n\nprint(password)\n"}
{"label": 48, "index": 6156, "code": "o=input()\ne=input()\nfor i in range(len(e)):\n    print(o[i],end='')\n    print(e[i],end='')\nif len(o)!=len(e):\n    print (o[len(e)],end='')\nprint()"}
{"label": 48, "index": 6157, "code": "O = raw_input()\nE = raw_input()\nout = O+E\nout =  list(out)\nfor count in range(0,len(out)/2):\n\tout[2*count] = O[count]\n\tout[2*count+1] = E[count]\nif len(O) > len(E):\n\tout[2*count+2] = O[count+1]\nout = ''.join(out)\nprint out"}
{"label": 48, "index": 6158, "code": "O = list(input())\nE = list(input())\ns = ''\nwhile O or E:\n    if len(E) >= len(O):\n        s = E.pop() + s\n    else:\n        s = O.pop() + s\nprint(s)\n"}
{"label": 48, "index": 6159, "code": "\nO=raw_input()\nE=raw_input()\n\nR=\"\"\nfor o,e in zip(O,E):\n    R=R+o+e\n\n\nif len(O)>len(E):\n    R=R+O[-1]\nelif len(O)<len(E):\n    R=R+E[-1]\n\nprint R\n"}
{"label": 48, "index": 6160, "code": "O = raw_input()\nE = raw_input()\nans = \"\"\nfor o, e in zip(O, E):\n    ans += o\n    ans += e\nif len(O) != len(E):\n    ans += O[-1]\nprint ans\n"}
{"label": 48, "index": 6161, "code": "ls = [raw_input() for _ in range(2)]\ns = ''\nfor i in range(len(ls[0])+len(ls[1])):\n    s += ls[i%2][i/2]\nprint s\n"}
{"label": 48, "index": 6162, "code": "O = input()\nE = input()\n\n# print(O, E)\nstr = \"\"\nfor i, j in zip (O, E):\n#     print(i, j)\n    str = str + i+j\n\nif(len(O) > len(E)): str += O[len(O)-1]\n\nprint(str)\n"}
{"label": 48, "index": 6163, "code": "s = input()\nt = input()\nfor i in range(0, len(s)+len(t)):\n\tprint((t[i//2] if i&1 else s[i//2]), end=\"\")\nprint(\"\")"}
{"label": 48, "index": 6164, "code": "a=list(input())\nb=list(input())\nc=[t[0]+t[1] for t in list(zip(a, b))]\nif len(a) > len(b):\n    c.append(a[-1])\nprint(''.join(c))"}
{"label": 48, "index": 6165, "code": "#coding:utf-8\nO = raw_input()\nE = raw_input()\n\np = \"\"\n\nif (len(O)+len(E)) % 2 == 0:\n    for i in xrange(len(O)):\n        p += O[i]\n        p += E[i]\nelse:\n    for i in xrange(len(O)-1):\n        p += O[i]\n        p += E[i]\n    p += O[len(O)-1]\n\nprint(p)\n"}
{"label": 48, "index": 6166, "code": "o = input()\ne = input()\n\n\nfor i in range(0, len(o)):\n    print(o[i], end='');\n    if i < len(e):\n        print(e[i], end='');\n"}
{"label": 48, "index": 6167, "code": "O,E = input(), input()\nans = ''\nfor a,b in zip(O,E):\n    ans += a\n    ans += b\nif len(O) > len(E): ans += O[-1]\nprint(ans)\n"}
{"label": 48, "index": 6168, "code": "o = input()\ne = input()\ns = \"\"\nn = max([len(o),len(e)])\n\nfor i in range(n):\n    s += o[i]\n    if i<=len(e)-1:\n        s += e[i]\n\nprint(s)\n"}
{"label": 48, "index": 6169, "code": "input_lines = str(input())\ninput_lines2 = str(input())\n\noCount = len(input_lines)\neCount = len(input_lines2)\n\no = list(input_lines)\ne = list(input_lines2)\n\nanswer = \"\"\n\nif oCount - eCount == 1:\n    for i in range(oCount-1):\n        answer = answer + o[i] + e[i]\n    answer = answer + o[oCount-1]\nelse:\n    for i in range(oCount):\n        answer = answer + o[i] + e[i]\n\nprint(answer)"}
{"label": 48, "index": 6170, "code": "#coding=UTF-8\n\npswd=[[],[]]\npswd[0]=input()\npswd[1]=input()\n\nmozilen=len(pswd[0])+len(pswd[1])\n\nans=''\nfor idx in range(0,mozilen,1):\n    ans=ans+pswd[idx%2][idx//2]\n\nprint(ans)\n\n"}
{"label": 48, "index": 6171, "code": "O=str(input())\nE=str(input())\npasswords=str()\n\nif len(O)==len(E):\n    for i in range(0,len(O)):\n        passwords=passwords+O[i]\n        passwords=passwords+E[i]\nelif len(O)>len(E):\n    for i in range(0,len(E)):\n        passwords=passwords+O[i]\n        passwords=passwords+E[i]\n    passwords=passwords+O[-1]\nelse:\n    for i in range(0,len(O)):\n        passwords=passwords+O[i]\n        passwords=passwords+E[i]\n    passwords=passwords+E[-1]\n    \nprint(passwords)"}
{"label": 48, "index": 6172, "code": "O = input()\nE = input()\nans = \"\"\nif len(O) - len(E) == 0:\n    for i in range(0, len(O)):\n        ans += O[i]\n        ans += E[i]\nelse:\n    for i in range(0, len(E)):\n        ans += O[i]\n        ans += E[i]\n    ans += O[-1:]\n\nprint(ans)\n"}
{"label": 48, "index": 6173, "code": "a=raw_input()\nb=raw_input()\n\nout=\"\"\n\nfor i in range(len(b)):\n    out+=a[i]\n    out+=b[i]\nif len(a)>len(b):\n    out+=a[-1]\n\nprint out"}
{"label": 48, "index": 6174, "code": "o = raw_input()\ne = raw_input()\no = list(o)\ne = list(e)\npassword = []\nif len(e) == len(o):\n    for i in range(len(e)):\n        password.append(o[i])\n        password.append(e[i])\nelse:\n    for i in range(len(e)):\n        password.append(o[i])\n        password.append(e[i])\n    password.append(o[len(o)-1])\nprint ''.join(password)"}
{"label": 48, "index": 6175, "code": "# -*- coding: utf-8 -*-\nfrom collections import deque\n\n\ndef list_n():\n    return [int(e) for e in input().split()]\n\n\ndef main(o, e):\n    answer = ''\n    o = deque(o)\n    e = deque(e)\n    for i in range(len(o) + len(e)):\n        if i % 2 == 0:\n            answer += o.popleft()\n        else:\n            answer += e.popleft()\n    return answer\n\n# print(main(\n#     'xyz',\n#     'abc'\n# ))\nif __name__ == '__main__':\n    o = input()\n    e = input()\n    print(main(o, e))\n"}
{"label": 48, "index": 6176, "code": "O = input()\nE = input()\np = \"\"\nfor i in range(len(O)):\n    p += O[i]\n    if(i < len(E)):\n        p += E[i]\nprint(p)"}
{"label": 48, "index": 6177, "code": "o = input()\nlio = list(o)\ne = list(input())\nans = \"\"\n\nfor (i, j) in zip(lio, e):\n    ans += i + j\nif len(o) > len(e):\n    num = len(o)\n    ans += o[num-1]\nprint(ans)\n"}
{"label": 48, "index": 6178, "code": "O = input()\nE = input()\ns = ''\nN = len(E)\nfor i in range(N):\n    s += O[i] + E[i]\nif len(O) == N+1:\n    s += O[N]\nprint(s)"}
{"label": 48, "index": 6179, "code": "O=input()\nE=input()\na=int(len(O))\nb=int(len(E))\ns=str()\nfor i in range(b):\n    s += O[i]\n    s += E[i]\nif a>b:\n    s += O[a-1]\n\nprint(s)"}
{"label": 48, "index": 6180, "code": "import sys\n\nx = sys.stdin.readline().strip()\ny = sys.stdin.readline().strip()\n\nresult = \"\"\nn = len(y)\nfor i in range(0,n):\n\tresult = result + x[i] + y[i]\n\nif len(x)>n:\n\tresult = result + x[-1]\n\nprint(result)\n"}
{"label": 48, "index": 6181, "code": "a = input()\nb = input()\n\ntmp1 = len(a)\ntmp2 = len(b)\n\ns = ''\n\nif tmp1 > tmp2:\n    for i in range(tmp1):\n        if i+1 == tmp1:\n            s += a[i]\n        else:\n            s += a[i]\n            s += b[i]\nelse:\n    for i in range(tmp2):\n            s += a[i]\n            s += b[i]\n\nprint(s)"}
{"label": 48, "index": 6182, "code": "O = str(input())\nE = str(input())\npw = \"\"\n\nfor i in range(0, len(O)):\n    str = (O + E)[i::len(O)]\n    pw += str\n\nprint(pw)\n"}
{"label": 48, "index": 6183, "code": "o = str(input())\ne = str(input())\nprint(\"\".join(i + j for i, j in zip(o, e + \" \")).rstrip())\n"}
{"label": 48, "index": 6184, "code": "O=raw_input()\nE=raw_input()\nmoji=''\nOlength = len(O)\nElength = len(E)\nfor i in range(Olength):\n moji = moji + O[i]\n if i < Elength:\n  moji = moji +E[i]\nprint moji"}
{"label": 48, "index": 6185, "code": "o = list(input())\ne = list(input())\nj = 0\nk = 0\nans = \"\"\nfor i in range(0, len(o) + len(e)):\n    if i%2 == 0:\n        ans += o[j]\n        j += 1\n    else:\n        ans += e[k]\n        k += 1\nprint(ans)"}
{"label": 48, "index": 6186, "code": "O = str(input())\nE = str(input())\n\nma = max(len(O), len(E))\n\nfor i in range(ma):\n    if (i < len(O)):\n        print(O[i], end=\"\")\n    if (i < len(E)):\n        print(E[i], end=\"\")\n"}
{"label": 48, "index": 6187, "code": "import sys\na = []\nb = []\na = input()\nb = input()\n\nfor num in range(0,len(a)):\n   sys.stdout.write(a[num])\n   if len(b) > num:\n       sys.stdout.write(b[num])"}
{"label": 48, "index": 6188, "code": "O = input()\nE = input()\n\npassword = O[0] + E[0]\n\nif len(O)-len(E)==1:\n    for i in range(1, len(O)-1):\n        password = password + O[i] + E[i]\n    password = password + O[-1]\nelse:\n    for i in range(1, len(O)):\n        password = password + O[i] + E[i]\n\nprint(password)\n"}
{"label": 48, "index": 6189, "code": "a=input()\nb=input()\ns=[]\nif len(a)==len(b):\n    for i in range(len(a)):\n        s.append(a[i])\n        s.append(b[i])\nelse:\n    for i in range(len(b)):\n        s.append(a[i])\n        s.append(b[i])\n    s.append(a[-1])\nprint(\"\".join(s))"}
{"label": 48, "index": 6190, "code": "O = raw_input()\nE = raw_input()\nans = \"\"\n\nfor i in xrange(len(O)-1):\n\t\tans += O[i] + E[i]\n\nans += O[len(O)-1]\n\nif len(O) == len(E):\n\tans += E[len(E)-1]\n\nprint ans"}
{"label": 48, "index": 6191, "code": "o=list(input())\ne=list(input())\np=\"\"\nfor i in range(len(e)):\n    p+=o[i]\n    p+=e[i]\nif len(o)-i==2:\n    p+=o[i+1]\nprint(p)\n"}
{"label": 48, "index": 6192, "code": "s = input()\nt = input()\n\nr = \"\"\nfor i in range(len(s)+len(t)):\n  if i%2==0:\n    r += s[i//2]\n  else:\n    r += t[i//2]\n\nprint(r)"}
{"label": 48, "index": 6193, "code": "O = input()\nE = input()\ns = ''\n\nfor i in range(len(O) + len(E)):\n    if i % 2 == 0:\n        s += O[i//2]\n    else:\n        s += E[i//2]\n\nprint(s)"}
{"label": 48, "index": 6194, "code": "o = input()\ne = input()\n\nans = ''\n\nfor i in range(len(o) - 1):\n    ans += o[i] + e[i]\n\nans += o[-1]\n\nif len(o) == len(e):\n    ans += e[-1]\n\nprint(ans)\n"}
{"label": 48, "index": 6195, "code": "eve = raw_input()\nodd = raw_input()\n\nans = \"\"\n\nfor i in range(len(eve)):\n    ans += eve[i]\n    if i < len(odd):\n        ans += odd[i]\n\nprint ans "}
{"label": 48, "index": 6196, "code": "O = list(input())\nE = list(input())\n\ns = \"\"\nfor i in range(len(O)):\n\tif i < len(E):\n\t\ts += O[i] + E[i]\n\telse:\n\t\ts += O[i]\n\nprint(s)\n"}
{"label": 48, "index": 6197, "code": "a = input()\nb = input()\nn = len(a)\nlimit = len(b)\nfor i in range(n):\n    print(a[i], end = '')\n    if i < limit:\n        print(b[i], end = '')"}
{"label": 48, "index": 6198, "code": "from __future__ import print_function\n\no = raw_input()\ne = raw_input()\n\nif len(o) - len(e) == 0:\n    for i in range(len(o)):\n        print (o[i], end='')\n        print (e[i], end='')\n    print()\nelse:\n    for i in range(len(e)):\n        print (o[i], end='')\n        print (e[i], end='')\n    print (o[len(o)-1], end='')\n    print()"}
{"label": 48, "index": 6199, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\n\n\ndef main():\n    o = S()\n    e = S()\n    l = len(o)\n    el = len(e)\n    r = ''\n    for i in range(l):\n        r += o[i]\n        if i < el:\n            r += e[i]\n    return r\n\n\n\nprint(main())\n"}
{"label": 48, "index": 6200, "code": "O = input()\nE = input()\n\nfor i in range(len(O)-1):\n    print(O[i]+E[i], end=\"\")\n    \nif len(O) == len(E):\n    print(O[-1]+E[-1])\nelse:\n    print(O[-1])"}
{"label": 48, "index": 6201, "code": "O = list(input())\nE = list(input())\nN = len(O) + len(E)\nans = \"\"\nfor i in range(N):\n    if i % 2 == 0:\n        ans += O[i // 2]\n    else:\n        ans += E[i // 2]\nprint(ans)\n"}
{"label": 48, "index": 6202, "code": "O=list(str(input()))\nE=list(str(input()))\np=[]\nfor i in range(1,len(O)+len(E)+1):\n    if i%2==1:\n        p.append(O[(i-1)//2])\n    else:\n        p.append(E[(i-2)//2])\nprint(\"\".join(p))"}
{"label": 48, "index": 6203, "code": "o = input()\ne = input()\nif len(o) == len(e):\n    for i in range(len(o)):\n        print(o[i], end=\"\")\n        print(e[i], end=\"\")\nelse:\n    for i in range(len(e)):\n        print(o[i], end=\"\")\n        print(e[i], end=\"\")\n    print(o[len(e)])\nprint()"}
{"label": 48, "index": 6204, "code": "#! -*- coding:utf-8 -*-\nO = str(input())\nE = str(input())\nO = list(O)\nE = list(E)\nn = 0\narr = []\nfor i in range(len(O)*2):\n    if n % 2 == 0:\n        try:\n            arr.append(O.pop(0))\n        except:\n            pass\n    else:\n        try:\n            arr.append(E.pop(0))\n        except:\n            pass        \n    n += 1\ntry:\n    arr.append(O.pop(0))\nexcept:\n    pass\n\nfor i in range(len(arr)-1):\n    print(arr[i],end = '')\n\nprint(arr[-1])\n"}
{"label": 48, "index": 6205, "code": "odd = raw_input()\neven = raw_input()\n\noddlength = len(odd)\nevenlength = len(even)\n\ni = 0\ns = ''\n\nwhile i < evenlength:\n\ts += odd[i]\n\ts += even[i]\n\ti += 1\n\t\nif oddlength > evenlength:\n\ts += odd[oddlength-1]\n\nprint s\n"}
{"label": 48, "index": 6206, "code": "a = input(); b = input(); print(\"\".join(map(\"\".join, zip(a, b))) + (a[-1] if len(a) is not len(b) else \"\"))\n"}
{"label": 48, "index": 6207, "code": "#\u3059\u306c\u3051\u541b\u306f\u65b0\u3057\u304f\u3067\u304d\u305f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30b3\u30f3\u30c6\u30b9\u30c8\u306b\u4f1a\u54e1\u767b\u9332\u3057\u307e\u3057\u305f\u3002 \u767b\u9332\u306b\u4f7f\u3063\u305f\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u899a\u3048\u3066\u304a\u304f\u81ea\u4fe1\u304c\u7121\u304b\u3063\u305f\u3059\u306c\u3051\u541b\u306f\u3001 \u624b\u5143\u306e\u7d19\u306b\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u30e1\u30e2\u3057\u3066\u304a\u304f\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002 \u305f\u3060\u3057\u3001\u305d\u306e\u307e\u307e\u30e1\u30e2\u3092\u3059\u308b\u3068\u8ab0\u304b\u306b\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u76d7\u307e\u308c\u3066\u3057\u307e\u3046\u304b\u3082\u3057\u308c\u306a\u3044\u306e\u3067\u3001 \u6587\u5b57\u5217\u306e\u5076\u6570\u756a\u76ee\u306e\u6587\u5b57\u3068\u5947\u6570\u756a\u76ee\u306e\u6587\u5b57\u3092\u305d\u308c\u305e\u308c\u5225\u3005\u306e\u7d19\u306b\u30e1\u30e2\u3057\u3066\u304a\u304f\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n#\u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u5947\u6570\u756a\u76ee\u306e\u6587\u5b57\u3060\u3051\u3092\u9806\u756a\u3092\u5909\u3048\u305a\u306b\u53d6\u308a\u51fa\u3057\u305f\u6587\u5b57\u5217 O \u3068\u3001 \u5076\u6570\u756a\u76ee\u306e\u6587\u5b57\u3060\u3051\u3092\u9806\u756a\u3092\u5909\u3048\u305a\u306b\u53d6\u308a\u51fa\u3057\u305f\u6587\u5b57\u5217 E \u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002 \u3059\u306c\u3051\u541b\u306e\u304b\u308f\u308a\u306b\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u5fa9\u5143\u3057\u3066\u304f\u3060\u3055\u3044\u3002\no = input()\ne = input()\nr = ''\nfor i in range(len(o)):\n  r += o[i]\n  if i < len(e):\n    r += e[i]\nprint(r)"}
{"label": 48, "index": 6208, "code": "import sys\n\n# sys.stdin = open('b1.in')\n\n\ndef read_int_list():\n    return list(map(int, input().split()))\n\n\ndef read_str_list():\n    return input().split()\n\n\ndef read_int():\n    return int(input())\n\n\ndef read_str():\n    return input()\n\n\no = read_str()\ne = read_str()\nif len(e) < len(o):\n    e = e + ' '\nl = []\nfor i, j in zip(o, e):\n    l.append(i)\n    l.append(j)\nres = ''.join(l)\nprint(res)\n"}
{"label": 48, "index": 6209, "code": "import sys\nimport math\n\nINF = 10**9+7\n\nstdin = sys.stdin\ndef na(): return map(int, stdin.readline().split())\ndef ns(): return stdin.readline().strip()\ndef nsl(): return list(stdin.readline().strip())\ndef ni(): return int(stdin.readline())\ndef nil(): return list(map(int, stdin.readline().split()))\n\no = ns()\ne = ns()\n\nans = []\nfor i in range(len(e)):\n    ans.append(o[i])\n    ans.append(e[i])\n\nif(len(o) - len(e) == 1):\n    ans.append(o[-1])\n\nprint(''.join(ans))"}
{"label": 48, "index": 6210, "code": "import sys\n\ndef main():\n    line_odd = sys.stdin.readline().rstrip()\n    line_ev = sys.stdin.readline().rstrip()\n\n    len_odd = len(line_odd)\n    len_ev = len(line_ev)\n    if len_odd > len_ev:\n        ans = \"\".join([\"\".join(tpl) for tpl in zip(line_odd, line_ev)]) + line_odd[-1]\n        print(ans)\n    elif len_odd < len_ev:\n        ans = \"\".join([\"\".join(tpl) for tpl in zip(line_odd, line_ev)]) + line_ev[-1]\n        print(ans)\n    else:\n        ans = \"\".join([\"\".join(tpl) for tpl in zip(line_odd, line_ev)])\n        print(ans)\n    return 0\n\nif __name__ == '__main__':\n    sys.exit(main())\n"}
{"label": 48, "index": 6211, "code": "O = list(input())\nE = list(input())\ns = ''\nwhile O or E:\n    if len(E) >= len(O):\n        s = E.pop() + s\n    else:\n        s = O.pop() + s\nprint(s)\n"}
{"label": 48, "index": 6212, "code": "o = input()\ne = input()\nif(len(o)>len(e)): e+=' '\nprint(\"\".join([ch1 + ch2 for ch1 , ch2 in zip(o,e)]))"}
{"label": 48, "index": 6213, "code": "O = input()\nE = input()\nfor (o, e) in zip(O, E):\n    print(o, end='')\n    print(e, end='')\n\nif len(O) > len(E):\n    print(O[len(O) - 1], end='')\n\nprint()\n"}
{"label": 48, "index": 6214, "code": "a = input()\nb = input()\nc = \"\"\n\nfor i in range(len(a)):\n    if len(b) >= i+1:\n        d = a[i] + b[i]\n        c += d\n    else:\n        c += a[i]\n        break\n\nprint(c)\n    "}
{"label": 48, "index": 6215, "code": "o = input()\ne = input()\n\ni = 0\nwhile(i < len(o)):\n    print(o[i], end='')\n    if i < len(e):\n        print(e[i], end='')\n    i = i + 1"}
{"label": 48, "index": 6216, "code": "a = raw_input()\nb = raw_input()\nans = \"\"\nfor i in xrange(len(a)):\n    ans += a[i]\n    if i < len(b):\n       ans += b[i]\nprint ans"}
{"label": 48, "index": 6217, "code": "O = raw_input()\nE = raw_input()\n\nans = ''\nfor o,e in zip(O,E):\n    ans = '%s%s%s' % (ans,o,e)\n\nif len(O) - len(E) == 1:\n    ans = '%s%s' % (ans, O[-1])\n\nprint ans\n"}
{"label": 48, "index": 6218, "code": "a = input()\nb = input()\np = \"\"\nfor i in range(len(a)):\n    p += a[i]\n    if len(b)>i:\n        p+=b[i]\n        \nprint(p)"}
{"label": 48, "index": 6219, "code": "odds = input()\nevens = input()\n\nresult = \"\"\nwhile (not(len(odds) == 0 and len(evens) == 0)):\n   if (len(odds) != 0):\n      result += odds[0]\n      odds = odds[1:]\n   if (len(evens) != 0):\n      result += evens[0]\n      evens = evens[1:]\n\nprint(result)"}
{"label": 48, "index": 6220, "code": "o = list(input())\ne = list(input())\n\nfor i in range(len(e)):\n    print(o[i], end='')\n    print(e[i], end='')\n\nif len(o) > len(e):\n    print(o[len(o)-1])\n\nprint()"}
{"label": 48, "index": 6221, "code": "O = raw_input()\nE = raw_input()\n\nresult = \"\"\n\nfor i in range(len(O)):\n    result = result + O[i]\n    try:\n        result = result + E[i]\n    except IndexError:\n        break\n\nprint(result)"}
{"label": 48, "index": 6222, "code": "o = input()\ne = input()\n\nans = ''\nfor i in range(len(e)):\n    ans = ans+o[i]+e[i]\n\nif len(o) > len(e):\n    ans = ans+o[-1]\n\nprint(ans)\n"}
{"label": 48, "index": 6223, "code": "# -*- coding: utf-8 -*-\nO = raw_input()\nE = raw_input()\n\npassword = ''\nif(len(O) == len(E)):\n    for i in range(len(O)):\n        password += O[i]\n        password += E[i]\nelse:\n    for i in range(len(E)):\n        password += O[i]\n        password += E[i]\n    password += O[len(O)-1]\nprint(password)\n    "}
{"label": 48, "index": 6224, "code": "o = list(input())\ne = list(input())\nans = \"\"\n\nolen = len(o)\nnum = olen - len(e)\nif num==0:\n    for n in range(olen):\n        ans += o[n] + e[n]\nelse:\n    for n in range(len(e)):\n        ans += o[n] + e[n]\n    ans += o[olen-1]\nprint(ans)"}
{"label": 48, "index": 6225, "code": "#coding:utf-8\n\nif __name__ == \"__main__\":\n    o_str = raw_input()\n    e_str = raw_input()\n\n    password = \"\"\n    for o, e in zip(o_str, e_str):\n        password += o\n        password += e\n\n    if len(o_str) != len(e_str):\n        password += o_str[-1]\n\n    print password\n\n"}
{"label": 48, "index": 6226, "code": "o = str(input())\ne = str(input())\nans = \"\"\nfor i in range(len(e)):\n        ans += o[i]\n        ans += e[i]\nif len(o) != len(e):\n    ans += o[-1]\nprint(ans)\n"}
{"label": 48, "index": 6227, "code": "def S():\n\treturn input()\no = S()\ne = S()\nol = len(o)\nel = len(e)\nr = ''\nfor i in range(ol):\n\tr += o[i]\n\tif i < el:\n\t\tr += e[i]\nprint(r)"}
{"label": 48, "index": 6228, "code": "import sys\nread=lambda:sys.stdin.readline().rstrip()\nreadi=lambda:int(sys.stdin.readline())\nwriteln=lambda x:sys.stdout.write(str(x)+\"\\n\")\nwrite=lambda x:sys.stdout.write(x)\na=read();b=read();la,lb=len(a),len(b);r=[]\nfor i in range(lb):\n    r.append(a[i]);r.append(b[i])\nif la != lb:\n    r.append(a[-1])\nprint(''.join(r))"}
{"label": 48, "index": 6229, "code": "#! coding: UTF-8\nO = input()\nE = input()\nx = []\nfor i in range(len(E)):\n    x.append(O[i]+E[i])\nif len(O) > len(E):\n    x.append(O[-1])\nprint(\"\".join(x))\n"}
{"label": 48, "index": 6230, "code": "o = input()\ne = input()\nfor i in range(len(o)-1):\n    print(o[i],end='')\n    print(e[i],end='')\nif len(o)==len(e):\n    print(o[-1],end='')\n    print(e[-1])\nelse:\n    print(o[-1])\n"}
{"label": 48, "index": 6231, "code": "from collections import defaultdict\nfrom itertools import zip_longest\n\n\ndef main():\n    O = input()\n    E = input()\n    ans = \"\"\n    for o, e in zip_longest(O, E, fillvalue=\"\"):\n        ans += o + e\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 48, "index": 6232, "code": "# \u2235\u2234\u2235\n\nO = input()\nE = input()\nE+=\" \"\ns=\"\"\nfor i in range(len(O)):\n    s+= (O[i]+E[i])\ns.split()\nprint(s)"}
{"label": 48, "index": 6233, "code": "o = input()\ne = input()\n\ni = 0\ns = \"\"\n\nleno = len(o)\nlene = len(e)\n\nfor i in range(lene):\n    s += o[i] + e[i]\nif leno > lene:\n    s += o[leno-1]\n\nprint(s)"}
{"label": 48, "index": 6234, "code": "# -*- coding: utf-8 -*-\n\n\no = list(input())\ne = list(input())\n\ni = 0\n\nwhile i < max(len(o),len(e)):\n    if(i<len(o)):\n        print(o[i],end=\"\")\n    if(i<len(e)):\n        print(e[i],end=\"\")\n    i += 1"}
{"label": 48, "index": 6235, "code": "O = input()\nE = input()\n\ns = \"\".join(i+j for i, j in zip(O, E))\n\nif len(O) == len(E):\n    print(s)\nelse:\n    print(s+O[-1])"}
{"label": 48, "index": 6236, "code": "a = list(input())\nb = list(input())\nc = []\nfor i in range(len(b)):\n    c.append(a[i])\n    c.append(b[i])\nif len(a) != len(b):\n    c.append(a[-1])\nprint(''.join(c))\n\n    "}
{"label": 48, "index": 6237, "code": "O = input()\nE = input()\n\nprint(\"\".join([O[i] + E[i] if i < len(E) else O[i] for i in range(len(O))]))"}
{"label": 48, "index": 6238, "code": "# coding: utf-8\n\nO = raw_input()\nE = raw_input()\n\nif len(O) > len(E):\n    E += \" \"\n\npasswd = \"\"\n\nfor o, e in zip(O, E):\n    passwd += o + e\n\npasswd = passwd.replace(\" \", \"\")\nprint passwd\n"}
{"label": 48, "index": 6239, "code": "# coding: utf-8\n\no = raw_input()\ne = raw_input()\npasswd = \"\"\n\nfor i in range(0, len(o)):\n    passwd += o[i]\n    if i < len(e):\n        passwd += e[i]\n\nprint passwd\n"}
{"label": 49, "index": 6240, "code": "a,b,c=input().split()\nprint(a[0].upper()+b[0].upper()+c[0].upper())"}
{"label": 49, "index": 6241, "code": "line = input().split(' ')\nfor i in line:\n    print(i[0].upper(), end= '')"}
{"label": 49, "index": 6242, "code": "x = input().split()\nprint(x[0][0].upper() + x[1][0].upper() + x[2][0].upper())\n"}
{"label": 49, "index": 6243, "code": "def main():\n    a,b,c = input().split()\n\n    p = a[0:1].upper()\n    q = b[0:1].upper()\n    r = c[0:1].upper()\n\n    print(p+q+r)\n\n\nif __name__ == \"__main__\":\n    main()\n"}
{"label": 49, "index": 6244, "code": "s = raw_input().split()\nprint s[0][0].upper()+s[1][0].upper()+s[2][0].upper()\n"}
{"label": 49, "index": 6245, "code": "s = map(str, raw_input().split())\n\nresult = s[0][0] + s[1][0] + s[2][0]\n\nprint(result.upper())"}
{"label": 49, "index": 6246, "code": "s1,s2,s3=map(str,input().split())\nprint((s1[0]+s2[0]+s3[0]).upper())\n"}
{"label": 49, "index": 6247, "code": "print ''.join(s[0] for s in raw_input().split()).upper()"}
{"label": 49, "index": 6248, "code": "s1, s2, s3 = input().split()\nprint( (s1[0] + s2[0] + s3[0]).upper())"}
{"label": 49, "index": 6249, "code": "a, b, c = input().split()\nprint((a[0]+b[0]+c[0]).upper())\n"}
{"label": 49, "index": 6250, "code": "s1,s2,s3 = input().split()\nprint((s1[0] + s2[0] + s3[0]).upper())\n"}
{"label": 49, "index": 6251, "code": "ans=\"\"\ns=list(map(str,(input().upper()).split()))\nfor x in range(len(s)):\n    ans+=s[x][0]\nprint(ans)\n"}
{"label": 49, "index": 6252, "code": "a,b,c=input().split()\n\na=a[0].upper()\nb=b[0].upper()\nc=c[0].upper()\n\nprint(a+b+c)\n"}
{"label": 49, "index": 6253, "code": "abc = input().split(' ')\nABC = ''\nfor i in abc:\n    ABC += i[0]\nABC = ABC.upper()\nprint(ABC)"}
{"label": 49, "index": 6254, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\n\ndef main():\n    r = ''.join(map(lambda x: x[0], LS())).upper()\n\n    return r\n\nprint(main())\n"}
{"label": 49, "index": 6255, "code": "s1, s2, s3 = raw_input().split()\nprint (s1[0] + s2[0] + s3[0]).upper()"}
{"label": 49, "index": 6256, "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ns1,s2,s3 = map(str, raw_input().split(\" \"))\n\nanswer = s1[0]+s2[0]+s3[0]\nanswer = answer.upper()\n\nprint answer"}
{"label": 49, "index": 6257, "code": "a = list(map(lambda x: x[0], input().split()))\nfor i in a:\n    print(i.upper(), end='')"}
{"label": 49, "index": 6258, "code": "a,b,c=raw_input().split()\nprint a[0].upper()+b[0].upper()+c[0].upper()"}
{"label": 49, "index": 6259, "code": "words = input().split()\nom = \"\"\n\nfor i in words:\n  om += i[0].upper()\n \nprint(om)"}
{"label": 49, "index": 6260, "code": "import sys\n\nif __name__ == '__main__':\n    string = raw_input().split()\n\n    for strLine in string:\n        sys.stdout.write(strLine[0].upper())\n    print\n"}
{"label": 49, "index": 6261, "code": "s1,s2,s3=map(str, input().split())\nprint ((s1[0]+s2[0]+s3[0]).upper())"}
{"label": 49, "index": 6262, "code": "n = input()\ntmp_n = n.split(\" \")\n\na = tmp_n[0].upper()\nb = tmp_n[1].upper()\nc = tmp_n[2].upper()\n\nprint(a[0]+b[0]+c[0])\n"}
{"label": 49, "index": 6263, "code": "if __name__ == \"__main__\":\n    S = input().split()\n    print (S[0][0].upper() + S[1][0].upper() + S[2][0].upper())\n"}
{"label": 49, "index": 6264, "code": "s1, s2, s3 = input().split()\n\n\n\ns1_cap = s1[0].upper()\ns2_cap = s2[0].upper()\ns3_cap = s3[0].upper()\n\nprint(s1_cap, s2_cap, s3_cap, sep=\"\")"}
{"label": 49, "index": 6265, "code": "# -*- coding: utf-8 -*-\n# problem A\n\ns = input().split(' ')\n\nprint(s[0][0].upper() + s[1][0].upper() + s[2][0].upper())"}
{"label": 49, "index": 6266, "code": "print(\"\".join([s[0].upper() for s in input().split()]))"}
{"label": 49, "index": 6267, "code": "a,b,c = map(str, raw_input().split())\n\nprint a[0].upper() + b[0].upper() + c[0].upper()"}
{"label": 49, "index": 6268, "code": "print(''.join(x[0].upper() for x in input().split()))"}
{"label": 49, "index": 6269, "code": "# -*- coding: utf-8 -*-\na, b, c = [n for n in input().split()]\nprint((a[0] + b[0] + c[0]).upper())"}
{"label": 49, "index": 6270, "code": "arr=input().split()\nprint(arr[0][0].upper()+arr[1][0].upper()+arr[2][0].upper())\n"}
{"label": 49, "index": 6271, "code": "#! coding UTF-8\ndata = input().split()\nfor i in range(len(data)):\n    data[i] = data[i].upper()\nprint(data[0][0]+data[1][0]+data[2][0])\n"}
{"label": 49, "index": 6272, "code": "a = list(input().split())\n\nprint((a[0][0] + a[1][0] + a[2][0]).upper())\n"}
{"label": 49, "index": 6273, "code": "a,b,c = input().split()\nans = (a[0]+b[0]+c[0]).upper()\nprint(ans)\n"}
{"label": 49, "index": 6274, "code": "s1,s2,s3 = map(str,input().split())\noutput = s1[0].upper() + s2[0].upper() + s3[0].upper()\nprint(output)"}
{"label": 49, "index": 6275, "code": "print ''.join([x[0].upper() for x in raw_input().split()])"}
{"label": 49, "index": 6276, "code": "l=raw_input().split()\nprint l[0][0].upper()+l[1][0].upper()+l[2][0].upper()\n"}
{"label": 49, "index": 6277, "code": "str = input()\n\nchars = str.split(\" \")\n\nchars = [char.capitalize()[0] for char in chars]\n\nprint('{}{}{}'.format(chars[0], chars[1], chars[2]))\n"}
{"label": 49, "index": 6278, "code": "print(\"\".join([i[0].capitalize() for i in input().split()]))"}
{"label": 49, "index": 6279, "code": "a = input()\na = a.upper()\nb = a.split()\n\ns = b[0]\ns = s[0]\nt = b[1]\nt = t[0]\nr = b[2]\nr = r[0]\n\nq = s + t + r\nprint (q)"}
{"label": 49, "index": 6280, "code": "MOD=1000000007\n\ndef solve():\n    s = input().split()\n    print((s[0][0]+s[1][0]+s[2][0]).upper())\n\nif __name__ == \"__main__\":\n    solve()"}
{"label": 49, "index": 6281, "code": "a, b, c = input().split()\nans = a[0]+b[0]+c[0]\nprint(ans.upper())"}
{"label": 49, "index": 6282, "code": "a,b,c = map(str,input().split())\nprint(a[0].upper() + b[0].upper() + c[0].upper())"}
{"label": 49, "index": 6283, "code": "a,b,c=map(str,input().split())\nprint(a[0].upper()+b[0].upper()+c[0].upper())"}
{"label": 49, "index": 6284, "code": "a,b,c=raw_input().split()\ns=a[0]+b[0]+c[0]\nprint s.upper()"}
{"label": 49, "index": 6285, "code": "# your code goes here\ndata = input().split(\" \")\nprint(\"\".join([n[0].upper() for n in data]))"}
{"label": 49, "index": 6286, "code": "b, c, d = list(map(str, input().split()))\nprint(b[0].upper(),end='')\nprint(c[0].upper(),end='')\nprint(d[0].upper())"}
{"label": 49, "index": 6287, "code": "#ABC059A\n\na,b,c=raw_input().split()\ns=a[0]+b[0]+c[0]\nprint s.upper()\n"}
{"label": 49, "index": 6288, "code": "import sys\nimport math\n\nINF = 10**9+7\n\ndef k(i):\n    if(i == 1):\n        return 1\n    else:\n        return(i * k(i-1))\n\ndef comb(n, r):\n    if(n == r or r == 1):\n        return 1\n    else:\n        return k(n) / (k(n-r) * k(r))\n\nstdin = sys.stdin\ndef na(): return map(int, stdin.readline().split())\ndef ns(): return stdin.readline().strip()\ndef nsl(): return list(stdin.readline().strip())\ndef ni(): return int(stdin.readline())\ndef nil(): return list(map(int, stdin.readline().split()))\n\ns = input().split(\" \")\n\na = s[0][0].upper()\nb = s[1][0].upper()\nc = s[2][0].upper()\n\nprint(a+b+c)\n"}
{"label": 49, "index": 6289, "code": "l=input().split()\na=l\nfor i in range(3):\n    a[i]=l[i][0].upper()\nprint(\"\".join(a))"}
{"label": 49, "index": 6290, "code": "s1,s2,s3=input().split(\" \")\nh1,h2,h3=s1[0].upper(),s2[0].upper(),s3[0].upper()\nprint(h1+h2+h3)"}
{"label": 49, "index": 6291, "code": "s1,s2,s3=input().split()\n\nprint(s1[0].upper(),s2[0].upper(),s3[0].upper(),sep='')\n"}
{"label": 49, "index": 6292, "code": "l = input().split()\n\nans = \"\"\nfor i in range(3):\n    ans += l[i][0].upper()\n\nprint(ans)"}
{"label": 49, "index": 6293, "code": "src = input().split()\ns = src[0][0] + src[1][0] + src[2][0]\nprint(s.upper())\n"}
{"label": 49, "index": 6294, "code": "a, b, c = map(str, raw_input().split())\n\nans = a[0] + b[0] + c[0]\nans = ans.upper()\nprint ans\n"}
{"label": 49, "index": 6295, "code": "abc = (input())\na,b,c = abc.split()\n\nd = a[0]\ne = b[0]\nf = c[0]\n\nprint ((d+e+f).upper())\n"}
{"label": 49, "index": 6296, "code": "# -*- coding: utf-8 -*-\n\na,b,c = raw_input().split()\n\na = a.upper()\nb = b.upper()\nc = c.upper()\nAns = ''\nAns += a[0]\nAns += b[0]\nAns += c[0]\nprint(Ans)"}
{"label": 49, "index": 6297, "code": "l = raw_input().split()\nprint l[0][0].upper() + l[1][0].upper() + l[2][0].upper()\n"}
{"label": 49, "index": 6298, "code": "a,b,c =(input().split())\n\nprint((a[0]+b[0]+c[0]).upper())"}
{"label": 49, "index": 6299, "code": "s1, s2, s3  =raw_input().split()\nprint((s1[0]+s2[0]+s3[0]).upper())\n"}
{"label": 49, "index": 6300, "code": "import sys\n\n# sys.stdin = open('a1.in')\n\n\ndef read_int_list():\n    return list(map(int, input().split()))\n\n\ndef read_str_list():\n    return input().split()\n\n\ndef read_int():\n    return int(input())\n\n\ndef read_str():\n    return input()\n\n\ns1, s2, s3 = read_str_list()\nres = s1[0]+s2[0]+s3[0]\nres = res.upper()\nprint(res)\n"}
{"label": 49, "index": 6301, "code": "if __name__ == \"__main__\":\n    s1, s2, s3 = input().split()\n\n    print(s1[0].upper() + s2[0].upper() + s3[0].upper())"}
{"label": 49, "index": 6302, "code": "s = input().split()\n\na = \"\"\nfor si in s:\n    a += si[0].upper()\nprint(a)"}
{"label": 49, "index": 6303, "code": "# -*- coding: utf-8 -*-\nimport sys\n\ninputs = []\nfor line in sys.stdin:\n    inputs.append(line.split())\n\nfor i in range(len(inputs)):\n    print \"{0}{1}{2}\".format(inputs[i][0][0].upper(),inputs[i][1][0].upper(),inputs[i][2][0].upper())"}
{"label": 49, "index": 6304, "code": "s1,s2,s3 = input().upper().split()\nprint(s1[0] + s2[0] + s3[0])\n"}
{"label": 49, "index": 6305, "code": "a, b, c = raw_input().split()\nprint (a[0]+b[0]+c[0]).upper()"}
{"label": 49, "index": 6306, "code": "a, b, c = map(str, input().split())\nprint(a.upper()[0] + b.upper()[0] + c.upper()[0])\n"}
{"label": 49, "index": 6307, "code": "a,b,c = input().split()\nprint(a[0].upper()+b[0].upper()+c[0].upper())"}
{"label": 49, "index": 6308, "code": "# -*- coding: utf-8 -*-\n\ns1, s2, s3 = input().split()\nprint((''.join([s1[0], s2[0], s3[0]])).upper())"}
{"label": 49, "index": 6309, "code": "import sys\n\ndef main():\n    line = sys.stdin.readline().rstrip()\n    lst = line.split(' ')\n    print(\"\".join([s[0].upper() for s in lst]))\n\n    return 0\n\nif __name__ == '__main__':\n    sys.exit(main())\n"}
{"label": 49, "index": 6310, "code": "s1, s2, s3 = map(str,input().split())\n\ns1 = s1.upper()\ns2 = s2.upper()\ns3 = s3.upper()\n\nprint(s1[0] + s2[0] + s3[0])"}
{"label": 49, "index": 6311, "code": "ans = []\nline = input().split()\nfor i in line:\n    ans.append(i[0])\nans = \"\".join(ans)\nprint(ans.upper())"}
{"label": 49, "index": 6312, "code": "s_list = [i[0].upper() for i in input().split(' ')]\nprint(''.join(s_list))"}
{"label": 49, "index": 6313, "code": "a, b, c = input().split()\n\nprint(\"%s%s%s\"% (a[0].upper(), b[0].upper(), c[0].upper()))\n"}
{"label": 49, "index": 6314, "code": "a,b,c = map(str,input().split())\n\nprint (a[0].upper()+b[0].upper()+c[0].upper())"}
{"label": 49, "index": 6315, "code": "s = input().split()\n\nprint ((s[0][0]+s[1][0]+s[2][0]).upper())"}
{"label": 49, "index": 6316, "code": "s = list(input().split())\nS = s[0][0].upper() +s[1][0].upper() +s[2][0].upper()\nprint (S)"}
{"label": 49, "index": 6317, "code": "s1, s2, s3 = input().split()\ns = s1[0] + s2[0] + s3[0]\na = s.upper()\nprint(a)\n"}
{"label": 49, "index": 6318, "code": "userinput = input().split()\n\nout = \"\"\nfor i in userinput:\n\tout += i[0].upper()\n\nprint(out)"}
{"label": 49, "index": 6319, "code": "# -*- coding:utf-8 -*-\ns1, s2, s3 = input().split()\nprint((s1[0]+s2[0]+s3[0]).upper())"}
{"label": 49, "index": 6320, "code": "A, B, C = input().split()\nprint(A[0].upper(), end = \"\")\nprint(B[0].upper(), end = \"\")\nprint(C[0].upper())\n"}
{"label": 49, "index": 6321, "code": "import sys\nstrin = [x.strip() for x in sys.stdin.read().split()]\nout = \"\".join([x[0].upper()for x in strin])\nprint out"}
{"label": 49, "index": 6322, "code": "# -*- coding: utf-8 -*-\n# \u6574\u6570\u306e\u5165\u529b\ns_1, s_2, s_3= map(str, input().split())\n# \u51fa\u529b\nprint(s_1[0].upper()+s_2[0].upper()+s_3[0].upper())"}
{"label": 49, "index": 6323, "code": "s1, s2, s3  = raw_input().split()\nprint s1[0].upper() + s2[0].upper() + s3[0].upper()\n"}
{"label": 49, "index": 6324, "code": "def main():\n    print(''.join([s[0].upper() for s in input().split()]))\n\n\nif __name__ == \"__main__\":\n    main()"}
{"label": 49, "index": 6325, "code": "s = map(str, raw_input().split())\nx = [s[i][0] for i in range(len(s))]\nprint(\"\".join(x).upper())"}
{"label": 49, "index": 6326, "code": "data = input().split()\n\ns1 = data[0][0]\ns2 = data[1][0]\ns3 = data[2][0]\n\nprint(s1.upper() + s2.upper() + s3.upper())\n"}
{"label": 49, "index": 6327, "code": "import sys\nimport numpy as np\n\n\nl = raw_input().split()\n\nstr1=[]\nstr2=[]\nstr3=[]\n\nstr1= l[0].upper()\nstr2=l[1].upper()\nstr3=l[2].upper()\n\nprint str1[0] + str2[0]+ str3[0]\n"}
{"label": 49, "index": 6328, "code": "print(*[a[0] for a in input().upper().split()], sep=\"\")\n"}
{"label": 49, "index": 6329, "code": "l= input().split()\nprint((l[0][0]+l[1][0]+l[2][0]).upper())"}
{"label": 49, "index": 6330, "code": "# -*- coding:utf-8 -*-\n\nfullstr = raw_input()\n\nsf = ['','','']\n\nsf[0] = fullstr[0]\nnum = 1\n\nfor i in range(len(fullstr)):\n  if (fullstr[i] == ' '):\n    sf[num] = fullstr[i+1]\n    num += 1\n\nprint '%s%s%s' % (sf[0].upper(), sf[1].upper(), sf[2].upper())\n"}
{"label": 49, "index": 6331, "code": "def solve():\n    a, b, c = map(str, input().split())\n    \n\n    print (a[0].upper() + b[0].upper() + c[0].upper())\n\n\nif __name__ == '__main__':\n   solve()   \n"}
{"label": 49, "index": 6332, "code": "s1, s2, s3 = input().split()\nprint( s1[0].upper() + s2[0].upper() + s3[0].upper())"}
{"label": 49, "index": 6333, "code": "ls = list(map(str,input().split(' ')))\nprint(ls[0][0].upper() + ls[1][0].upper() + ls[2][0].upper())"}
{"label": 49, "index": 6334, "code": "s1, s2, s3 = input().split()\n\nS1 = s1[0].upper()\nS2 = s2[0].upper()\nS3 = s3[0].upper()\nprint(S1 + S2 + S3)\n"}
{"label": 49, "index": 6335, "code": "s = raw_input().split()\nprint s[0][0].upper() + s[1][0].upper() + s[2][0].upper()\n"}
{"label": 49, "index": 6336, "code": "S = input()\nout = \"\"\nfor s in S.split():\n    out += s[0].upper()\nprint(out)"}
{"label": 49, "index": 6337, "code": "ss = input().split()\nprint(ss[0][0].upper() +  ss[1][0].upper() + ss[2][0].upper())"}
{"label": 49, "index": 6338, "code": "s1, s2, s3 = input().split()\nt = s1[0] + s2[0] + s3[0]\nprint(t.upper())\n"}
{"label": 49, "index": 6339, "code": "s1,s2,s3=input().split()\nprint((s1[0]+s2[0]+s3[0]).upper())"}
{"label": 49, "index": 6340, "code": "w = map(lambda x:x, input().split())\nprint(''.join([x[0].upper() for x in w]))"}
{"label": 49, "index": 6341, "code": "a=list(input().split())\ns=a[0][0].upper()+a[1][0].upper()+a[2][0].upper()\nprint(s)"}
{"label": 49, "index": 6342, "code": "S = [i.upper() for i in input().split()]\n\nTLA = ''\nfor i  in S:\n    s = list(i)\n    TLA += s[0]\n\nprint(TLA)"}
{"label": 49, "index": 6343, "code": "a , b , c = raw_input().split()\n\nprint a[0].upper() + b[0].upper() + c[0].upper()"}
{"label": 49, "index": 6344, "code": "s = list(input().split())\nprint((s[0][0] + s[1][0] + s[2][0]).upper())"}
{"label": 49, "index": 6345, "code": "# -*- coding: utf-8 -*-\n# \u6587\u5b57\u5217\u306e\u5165\u529b\na, b, c = map(str, raw_input().split())\na = a.upper()\nb = b.upper()\nc = c.upper()\nprint a[0] + b[0] + c[0]\n"}
{"label": 49, "index": 6346, "code": "s1, s2, s3 = input().split(\" \")\n    \nprint(s1[0].upper()+s2[0].upper()+s3[0].upper())"}
{"label": 49, "index": 6347, "code": "input_line = raw_input().split(\" \")\ns1 = chr(ord(input_line[0][0]) - 32)\ns2 = chr(ord(input_line[1][0]) - 32)\ns3 = chr(ord(input_line[2][0]) - 32)\nprint s1 + s2 + s3"}
{"label": 49, "index": 6348, "code": "for a in input().upper().split():print(a[0],end=\"\")"}
{"label": 49, "index": 6349, "code": "s = input().split()\nprint (s[0][0].upper() + s[1][0].upper() + s[2][0].upper())"}
{"label": 49, "index": 6350, "code": "s1, s2, s3 = list(map(str, input().split()))\nprint(s1[0].upper()+s2[0].upper()+s3[0].upper())"}
{"label": 49, "index": 6351, "code": "s1, s2, s3 = raw_input().split(' ')\n\nprint (s1[0] + s2[0] + s3[0]).upper()\n"}
{"label": 49, "index": 6352, "code": "A, B, C = input().split()\nprint(A[0].upper()+B[0].upper()+C[0].upper())\n"}
{"label": 49, "index": 6353, "code": "S = raw_input().split()\nprint \"\".join([s[0] for s in S]).upper()\n"}
{"label": 49, "index": 6354, "code": "s1, s2, s3 = list(input().split())\nprint((s1[0]+s2[0]+s3[0]).upper())"}
{"label": 49, "index": 6355, "code": "a, b, c = raw_input().split()\nprint a[0].upper() + b[0].upper() + c[0].upper()"}
{"label": 49, "index": 6356, "code": "import sys\n\ndata = sys.stdin.readline().split(\" \")\nprint(\"\".join([x[0].upper() for x in data]))"}
{"label": 49, "index": 6357, "code": "def main():\n    s1, s2, s3 = map(str, input().split())\n\n    print('{}{}{}'.format(s1[0].upper(), s2[0].upper(), s3[0].upper()))\n\nmain()\n"}
{"label": 49, "index": 6358, "code": "S = input().split(' ')\nout = S[0][0] + S[1][0] + S[2][0]\nprint(out.upper())\n"}
{"label": 49, "index": 6359, "code": "s = raw_input().split()\nres = (s[0][0]+s[1][0]+s[2][0]).upper()\nprint res"}
{"label": 49, "index": 6360, "code": "s1,s2,s3 = map(str, input().split())\nprint(s1.upper()[0]+s2.upper()[0]+s3.upper()[0])"}
{"label": 49, "index": 6361, "code": "l = input().split()\nLst = l[0][0] + l[1][0] + l[2][0]\nprint(Lst.upper())"}
{"label": 49, "index": 6362, "code": "# coding: utf-8\n\na, b, c = raw_input().split(\" \")\nprint a[0].upper() + b[0].upper() + c[0].upper()\n"}
{"label": 49, "index": 6363, "code": "def a(inp):\n    sts = inp.split(' ')\n    ans = [s[0].upper() for s in sts]\n    print(''.join(ans))\n\na(input())"}
{"label": 49, "index": 6364, "code": "# coding: utf-8\nprint ''.join([x[0] for x in map(str, raw_input().split())]).upper()\n"}
{"label": 49, "index": 6365, "code": "words = raw_input('').split(' ')\nprint words[0][0].capitalize()+words[1][0].capitalize()+words[2][0].capitalize()"}
{"label": 49, "index": 6366, "code": "print(\"\".join(x[0].upper()for x in input().split()))"}
{"label": 49, "index": 6367, "code": "A, B, C = input().split()\nprint((A[0] + B[0] + C[0]).upper())"}
{"label": 49, "index": 6368, "code": "s1,s2,s3 = input().split()\n\nprint(s1[0].upper()+s2[0].upper()+s3[0].upper())\n"}
{"label": 49, "index": 6369, "code": "s1, s2, s3 = input().split()\n\nprint('{0}{1}{2}'.format(s1[0].upper(), s2[0].upper(), s3[0].upper()))\n"}
{"label": 50, "index": 6370, "code": "A = int(input())\nB = int(input())\n\nif A > B:\n    print('GREATER')\nelif A < B:\n    print('LESS')\nelse:\n    print('EQUAL')"}
{"label": 50, "index": 6371, "code": "a = int(input())\nb = int(input())\n\n\nif a < b:\n    print(\"LESS\")\nelif a > b:\n    print(\"GREATER\")\nelse:\n    print(\"EQUAL\")\n"}
{"label": 50, "index": 6372, "code": "a=int(input())\nb=int(input())\nif a>b:\n    print('GREATER')\nelif a<b:\n    print('LESS')\nelse:\n    print('EQUAL')"}
{"label": 50, "index": 6373, "code": "#!/usr/bin/env python3\n\na = input()\nb = input()\nA = int(a)\nB = int(b)\n\nif A > B:\n    print(\"GREATER\")\nelif A < B:\n    print(\"LESS\")\nelse:\n    print(\"EQUAL\")"}
{"label": 50, "index": 6374, "code": "import sys\nimport numpy as np\n\nN1 = input()\nN2 = input()\n\na = N1\nb = N2\n\nif (a>b):\n    print \"GREATER\"\nif(a==b):\n    print \"EQUAL\"\nif(a<b):\n    print \"LESS\""}
{"label": 50, "index": 6375, "code": "#coding:utf-8\n\nif __name__ == \"__main__\":\n    a = int(raw_input())\n    b = int(raw_input())\n\n    if a > b:\n        print \"GREATER\"\n    elif a < b:\n        print \"LESS\"\n    elif a == b:\n        print \"EQUAL\"\n"}
{"label": 50, "index": 6376, "code": "A = int(input())\nB = int(input())\n\n\nif A > B:\n    print(\"GREATER\")\nelif A < B:\n    print(\"LESS\")\nelse:\n    print(\"EQUAL\")\n"}
{"label": 50, "index": 6377, "code": "# your code goes here\na = raw_input()\nb = raw_input()\na = int(a)\nb = int(b)\ng = \"GREATER\"\nl = \"LESS\"\ne = \"EQUAL\"\nif a<b:\n\tprint l\nelif a>b:\n\tprint g\nelse:\n\tprint e"}
{"label": 50, "index": 6378, "code": "A=int(input())\nB=int(input())\nif A>B:\n    print('GREATER')\nelif A<B:\n    print('LESS')\nelse:\n    print('EQUAL')"}
{"label": 50, "index": 6379, "code": "a = int(input())\nb = int(input())\n\nif a > b:\n    print(\"GREATER\")\nelif a < b:\n    print(\"LESS\")\nelse:\n    print(\"EQUAL\")"}
{"label": 50, "index": 6380, "code": "a=(int)(input())-(int)(input());print(a>0 and'GREATER'or a<0 and'LESS'or'EQUAL')"}
{"label": 50, "index": 6381, "code": "a=input()\nb=input()\nc='EQUAL'\nif(a>b):\n    c='GREATER'\nelif(a<b):\n    c='LESS'\nprint c"}
{"label": 50, "index": 6382, "code": "a=input();b=input()\nif a>b:print\"GREATER\"\nelif a<b:print\"LESS\"\nelse:print\"EQUAL\""}
{"label": 50, "index": 6383, "code": "A = int(raw_input())\nB = int(raw_input())\nif A > B:\n    print \"GREATER\"\nelif A < B:\n    print \"LESS\"\nelse:\n    print \"EQUAL\"\n"}
{"label": 50, "index": 6384, "code": "a = int(input())\nb = int(input())\n\nif a == b:\n    print(\"EQUAL\")\nelif a > b:\n    print(\"GREATER\")\nelse:\n    print(\"LESS\")"}
{"label": 50, "index": 6385, "code": "A = int(raw_input())\nB = int(raw_input())\n\nif A > B:\n    print(\"GREATER\")\nelif A < B:\n    print(\"LESS\")\nelse:\n    print(\"EQUAL\")"}
{"label": 50, "index": 6386, "code": "a=int(input())\nb=int(input())\n \nif a>b:\n    print(\"GREATER\")\nelif a<b:\n    print(\"LESS\")\nelse:\n    print(\"EQUAL\")"}
{"label": 50, "index": 6387, "code": "a = int(input())\nb = int(input())\n\nif a > b:\n    print(\"GREATER\")\nelif a < b:\n    print(\"LESS\")\nelse:\n    print(\"EQUAL\")\n"}
{"label": 50, "index": 6388, "code": "A, B = int(raw_input()), int(raw_input())\nif A > B:\n    print \"GREATER\"\nelif A < B:\n    print \"LESS\"\nelse:\n    print \"EQUAL\""}
{"label": 50, "index": 6389, "code": "n1 = int(input())\nn2 = int(input())\n\nif n1 > n2:\n    print(\"GREATER\")\nelif n1 < n2:\n    print(\"LESS\")\nelse:\n    print(\"EQUAL\")"}
{"label": 50, "index": 6390, "code": "# -*- coding:utf-8 -*-\nA, B = (int(input()), int(input()))\nif A > B:\n    print('GREATER')\nelif A < B:\n    print('LESS')\nelse:\n    print('EQUAL')"}
{"label": 50, "index": 6391, "code": "A = int(input())\nB = int(input())\nif A > B:\n    print(\"GREATER\")\nelif A < B:\n    print(\"LESS\")\nelse:\n    print(\"EQUAL\")\n    "}
{"label": 50, "index": 6392, "code": "# -*- coding: utf-8 -*-\nA = int(input())\nB = int(input())\n\nif A > B:\n    print(\"GREATER\")\nelif A == B:\n    print(\"EQUAL\")\nelif A < B:\n    print(\"LESS\")"}
{"label": 50, "index": 6393, "code": "# -*- coding: utf-8 -*-\n\nA = int(input())\nB = int(input())\n\nif A>B:\n    ans = 'GREATER'\nelif A<B:\n    ans = 'LESS'\nelif A==B:\n    ans = 'EQUAL'\n\nprint(ans)"}
{"label": 50, "index": 6394, "code": "a = int(input())\nb = int(input())\nif a > b:\n    print(\"GREATER\")\nelif a < b:\n    print(\"LESS\")\nelse:\n    print(\"EQUAL\")"}
{"label": 50, "index": 6395, "code": "a = int(input())\nb = int(input())\n\nif a > b:\n    print('GREATER')\nelif a < b:\n    print('LESS')\nelif a == b:\n    print('EQUAL')\n"}
{"label": 50, "index": 6396, "code": "A = int(input())\nB = int(input())\n \nif A > B:\n    print(\"GREATER\")\nelif A < B:\n    print(\"LESS\")\nelse:\n    print(\"EQUAL\")"}
{"label": 50, "index": 6397, "code": "a = int(input())\nb = int(input())\nif a < b:\n    print(\"LESS\")\nelif a > b:\n    print(\"GREATER\")\nelse:\n    print(\"EQUAL\")"}
{"label": 50, "index": 6398, "code": "a,b = int(input()), int(input())\nans = 'GREATER' if a > b else 'LESS' if a < b else 'EQUAL'\nprint(ans)\n"}
{"label": 50, "index": 6399, "code": "a = int(raw_input())\nb = int(raw_input())\nif a > b:\n    print \"GREATER\"\nelif a < b:\n    print \"LESS\"\nelse:\n    print \"EQUAL\""}
{"label": 50, "index": 6400, "code": "\nA = int(input())\nB = int(input())\n\n\nif A > B:\n\tprint(\"GREATER\")\nelif A < B:\n\tprint(\"LESS\")\nelse:\n\tprint(\"EQUAL\")\n"}
{"label": 50, "index": 6401, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\na = input()\nb = input()\n\na = int(a)\nb = int(b)\nif a > b:\n    print(\"GREATER\")\nelif a < b:\n    print(\"LESS\")\nelse:\n    print(\"EQUAL\")\n"}
{"label": 50, "index": 6402, "code": "a = input()\nb = input()\nret = \"\"\nif len(a) > len(b):\n    ret = \"GREATER\"\nelif len(a) < len(b):\n    ret = \"LESS\"\nelse:\n    for (i, c) in enumerate(a):\n        if(c > b[i]):\n            ret = \"GREATER\"\n            break\n        elif(c < b[i]):\n            ret = \"LESS\"\n            break\n        else:\n            pass\nif ret == \"\":\n    print(\"EQUAL\")\nelse:\n    print(ret)\n"}
{"label": 50, "index": 6403, "code": "n1 = int(input())\nn2 = int(input())\n\nif n1 > n2:\n    print(\"GREATER\")\nelif n1 < n2:\n    print(\"LESS\")\nelse:\n    print(\"EQUAL\")\n"}
{"label": 50, "index": 6404, "code": "a = int(input())\nb = int(input())\n\nif a > b:\n    print(\"GREATER\")\nelif a < b:\n    print(\"LESS\")\nelse:\n    print(\"EQUAL\")"}
{"label": 50, "index": 6405, "code": "A = int(input())\nB = int(input())\n\nif A > B:\n\tprint(\"GREATER\")\n\nelif A < B:\n\tprint(\"LESS\")\n\nelse:\n\tprint(\"EQUAL\")\n"}
{"label": 50, "index": 6406, "code": "a=int(input())\nb=int(input())\nif a>b:\n    print(\"GREATER\")\nelif a<b:\n    print(\"LESS\")\nelse:\n    print(\"EQUAL\")\n"}
{"label": 50, "index": 6407, "code": "in1 = int(input())\nin2 = int(input())\n\nif in1 > in2:\n    ans = 'GREATER'\nelif in1 < in2:\n    ans = 'LESS'\nelse:\n    ans = 'EQUAL'\n\nprint(ans)"}
{"label": 50, "index": 6408, "code": "# -*- coding: utf-8 -*-\n# \u6587\u5b57\u5217\u306e\u5165\u529b\nN = int(raw_input())\nM = int(raw_input())\nif N > M:\n    print \"GREATER\"\nelif N == M:\n    print \"EQUAL\"\nelse:\n    print \"LESS\"\n"}
{"label": 50, "index": 6409, "code": "n=[int(input()) for x in range(2)]\nif n[0]>n[1]:\n    print(\"GREATER\")\nelif n[0]==n[1]:\n    print(\"EQUAL\")\nelse:\n    print(\"LESS\")"}
{"label": 50, "index": 6410, "code": "a=int(input())-int(input());print(a>0and'GREATER'or a and'LESS'or'EQUAL')"}
{"label": 50, "index": 6411, "code": "a = int(input())\nb = int(input())\n\nif a > b:\n    print(\"GREATER\")\nelif a < b:\n    print(\"LESS\")\nelse:\n    print(\"EQUAL\")"}
{"label": 50, "index": 6412, "code": "a = int(input())\nb = int(input())\nprint(\"GREATER\" if a>b else \"LESS\" if a<b else \"EQUAL\")"}
{"label": 50, "index": 6413, "code": "A = input()\nB = input()\n\nif(A > B):\n    print \"GREATER\"\nelif(A == B):\n    print \"EQUAL\"\nelse:\n    print \"LESS\""}
{"label": 50, "index": 6414, "code": "a=input();b=input();print a<b and'LESS'or a>b and'GREATER'or'EQUAL'"}
{"label": 50, "index": 6415, "code": "a = int(input())\nb = int(input())\n\nans = 'EQUAL'\nif a<b:\n    ans = 'LESS'\nelif a>b:\n    ans = 'GREATER'\nprint(ans)\n"}
{"label": 50, "index": 6416, "code": "a = int(input())\nb = int(input())\nprint('GREATER' if a > b else 'LESS' if a < b else 'EQUAL')\n"}
{"label": 50, "index": 6417, "code": "# Comparison\nA = int(input())\nB = int(input())\n\nif ( A-B>0 ):\n    print( \"GREATER\" )\nelif( A-B<0 ):\n    print(\"LESS\")\nelse:\n    print(\"EQUAL\")"}
{"label": 50, "index": 6418, "code": "a=raw_input()\nb=raw_input()\nif len(a)<len(b):\n\tprint \"LESS\"\nelif len(a)>len(b):\n\tprint \"GREATER\"\nelse:\n\tp=0\n\tflag=True\n\twhile flag and p<len(a):\n\t\tif a[p]<b[p]:\n\t\t\tprint \"LESS\"\n\t\t\tflag=False\n\t\telif a[p]>b[p]:\n\t\t\tprint \"GREATER\"\n\t\t\tflag=False\n\t\telse:\n\t\t\tpass\n\t\tp+=1\n\tif flag:\n\t\tprint \"EQUAL\""}
{"label": 50, "index": 6419, "code": "a = int(input())\nb = int(input())\n \nif a > b:\n    print('GREATER')\nelif a < b:\n    print('LESS')\nelse:\n    print('EQUAL')"}
{"label": 50, "index": 6420, "code": "A = int(input())\nB = int(input())\nif A>B:\n\tprint('GREATER')\nelif A==B:\n\tprint('EQUAL')\nelse:\n\tprint('LESS')"}
{"label": 50, "index": 6421, "code": "def main():\n    a = [int(i) for i in input()]\n    b = [int(i) for i in input()]\n\n    if len(a) > len(b):\n        print(\"GREATER\")\n    elif len(a) < len(b):\n        print(\"LESS\")\n    else:\n        flag = 1\n        for m, n in zip(a, b):\n            if m > n:\n                print(\"GREATER\")\n                flag = 0\n                break\n            elif m < n:\n                print(\"LESS\")\n                flag = 0\n                break\n        if flag:\n            print(\"EQUAL\")\n\n\nif __name__ == \"__main__\":\n    main()"}
{"label": 50, "index": 6422, "code": "A = int(input())\nB = int(input())\nif A > B:\n    print('GREATER')\nelif A < B:\n    print('LESS')\nelse:\n    print('EQUAL')"}
{"label": 50, "index": 6423, "code": "A=int(input())\nB=int(input())\nif A>B:\n print ('GREATER')\nelif A<B:\n print ('LESS')\nelse:\n print ('EQUAL')\n"}
{"label": 50, "index": 6424, "code": "# -*- coding: utf-8 -*-\n\nA = input()\nB = input()\nif len(A) > len(B):\n    print('GREATER')\nelif len(A) < len(B):\n    print('LESS')\nelse:\n    for i in range(len(A)):\n        if A[i] > B[i]:\n            print('GREATER')\n            exit()\n        elif A[i] < B[i]:\n            print('LESS')\n            exit()\n        else:\n            continue\n    print('EQUAL')\n"}
{"label": 50, "index": 6425, "code": "A = int(input())\nB = int(input())\n\nif A>B:\n    print ('GREATER')\nelif A==B:\n    print ('EQUAL')\nelse : print ('LESS')"}
{"label": 50, "index": 6426, "code": "def ri(): return int(input())\ndef rli(): return list(map(int, input().split()))\ndef rls(): return list(input())\ndef pli(a): return \"\".join(list(map(str, a)))\n\nA = ri()\nB = ri()\nif(A == B):\n    print(\"EQUAL\")\nelse:\n    print(\"GREATER\" if A>B else \"LESS\")"}
{"label": 50, "index": 6427, "code": "import sys\n\nA=raw_input()\nB=raw_input()\nG=\"GREATER\"\nL=\"LESS\"\nE=\"EQUAL\"\n\nif len(A) > len(B):\n    print G\n    sys.exit()\nif len(A) < len(B):\n    print L\n    sys.exit()\n\nfor i in range(len(A)):\n    a = int(A[i])\n    b = int(B[i])\n    if a > b:\n        print G\n        sys.exit()\n    if a < b:\n        print L\n        sys.exit()\n\nprint E"}
{"label": 50, "index": 6428, "code": "# -*- coding:utf-8 -*-\n\nsA = raw_input()\nsB = raw_input()\n\nA = int(sA)\nB = int(sB)\n\nif (A > B):\n  print 'GREATER'\nelif (A < B):\n  print 'LESS'\nelse:\n  print 'EQUAL'  "}
{"label": 50, "index": 6429, "code": "A = int(input())\nB = int(input())\n\nif A > B:\n    print('GREATER')\nelif A < B:\n    print('LESS')\nelse:\n    print('EQUAL')"}
{"label": 50, "index": 6430, "code": "A = int(input())\nB = int(input())\n\nif A > B:\n    print(\"GREATER\")\nelif A < B:\n    print(\"LESS\")\nelse:\n    print(\"EQUAL\")\n    \n"}
{"label": 50, "index": 6431, "code": "A=int(input())\nB=int(input())\n\nif A>B:\n    print('GREATER')\nelif A==B:\n    print('EQUAL')\nelse:\n    print('LESS')"}
{"label": 50, "index": 6432, "code": "a = int(input())\nb = int(input())\nif a > b:\n    print('GREATER')\nelif a < b:\n    print('LESS')\nelse:\n    print('EQUAL')"}
{"label": 50, "index": 6433, "code": "a = int(raw_input())\nb = int(raw_input())\n\nif a > b:\n    print \"GREATER\"\nif a < b:\n    print \"LESS\"\nif a == b:\n    print \"EQUAL\"\n"}
{"label": 50, "index": 6434, "code": "A = int(input())\nB = int(input())\nif A > B:\n print('GREATER')\nelif A <B:\n print('LESS')\nelse:\n print('EQUAL')"}
{"label": 50, "index": 6435, "code": "A=input()\nB=input()\nif A>B:\n    print 'GREATER'\nelif A<B:\n    print 'LESS'\nelse:\n    print 'EQUAL'\n"}
{"label": 50, "index": 6436, "code": "n1 = input()\na = int(n1)\nn2 = input()\nb = int(n2)\n\nif a>b:\n    print(\"GREATER\")\nelif a<b:\n    print(\"LESS\")\nelse:\n    print(\"EQUAL\")\n"}
{"label": 50, "index": 6437, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\n\ndef main():\n    a = I()\n    b = I()\n    if a > b:\n        return 'GREATER'\n    if a < b:\n        return 'LESS'\n\n    return 'EQUAL'\n\nprint(main())\n"}
{"label": 50, "index": 6438, "code": "A = int(input())\nB = int(input())\n\nif A > B:\n print(\"GREATER\")\nelif A == B:\n print(\"EQUAL\")\nelse:\n print(\"LESS\")"}
{"label": 50, "index": 6439, "code": "# coding: utf-8\n\nif __name__ == \"__main__\":\n\ta = int(input())\n\tb = int(input())\n\n\tif a>b:\n\t\tprint('GREATER')\n\telif a<b:\n\t\tprint('LESS')\n\telse:\n\t\tprint('EQUAL')\n"}
{"label": 50, "index": 6440, "code": "a=int(input())-int(input());print('GREATER'if a>0else'LESS'if a else'EQUAL')"}
{"label": 50, "index": 6441, "code": "\n\na=int(input())\nb=int(input())\nif a>b:\n    print('GREATER')\nif a<b:\n    print('LESS')\nif a==b:\n    print('EQUAL')"}
{"label": 50, "index": 6442, "code": "a = int(raw_input())\nb = int(raw_input())\n\nif a < b:\n    print 'LESS'\nelif b < a:\n    print 'GREATER'\nelse:\n    print 'EQUAL'"}
{"label": 50, "index": 6443, "code": "A = int(input())\nB = int(input())\nif A > B:\n    print('GREATER')\nelif A < B:\n    print('LESS')\nelse:\n    print('EQUAL')"}
{"label": 50, "index": 6444, "code": "import sys\nx, y = map(int, sys.stdin.readlines())\nif x > y:\n    print(\"GREATER\")\nelif x == y:\n    print(\"EQUAL\")\nelse:\n    print(\"LESS\")"}
{"label": 50, "index": 6445, "code": "A = int(input())\nB = int(input())\nif A > B:\n    print('GREATER')\nelif A < B:\n    print('LESS')\nelse:\n    print('EQUAL')\n"}
{"label": 50, "index": 6446, "code": "A = int(input())\nB = int(input())\n\nif A > B:\n    print(\"GREATER\")\nelif A < B:\n    print(\"LESS\")\nelif A == B:\n    print(\"EQUAL\")\n"}
{"label": 50, "index": 6447, "code": "a = int(raw_input())\nb = int(raw_input())\nif a>b:\n    print 'GREATER'\nelif a<b:\n    print 'LESS'\nelse:\n    print 'EQUAL'"}
{"label": 50, "index": 6448, "code": "a = int(input())\nb = int(input())\n\nif a > b:\n    print(\"GREATER\")\nelif a < b:\n    print(\"LESS\")\nelse:\n    print(\"EQUAL\")\n    "}
{"label": 50, "index": 6449, "code": "a=int(raw_input())\nb=int(raw_input())\nif a<b:\n\tprint \"LESS\"\nelif a>b:\n\tprint \"GREATER\"\nelse:\n\tprint \"EQUAL\""}
{"label": 50, "index": 6450, "code": "A=int(input())\nB=int(input())\n\nif A>B:\n    print(\"GREATER\")\nelif A<B:\n    print(\"LESS\")\nelse:\n    print(\"EQUAL\")"}
{"label": 50, "index": 6451, "code": "a = int(input())\nb = int(input())\nif a > b:\n    print(\"GREATER\")\nelif a < b:\n    print(\"LESS\")\nelse:\n    print(\"EQUAL\")"}
{"label": 50, "index": 6452, "code": "import sys\n\ndef solve():\n    a = int(input())\n    b = int(input())\n\n    if a > b:\n        ans = 'GREATER'\n    elif a < b:\n        ans = 'LESS'\n    else:\n        ans = 'EQUAL'\n\n    print(ans)\n\nif __name__ == '__main__':\n    solve()"}
{"label": 50, "index": 6453, "code": "a=int(input())\nb=int(input())\nprint('EQUAL' if a==b else 'GREATER' if a>b else 'LESS')"}
{"label": 50, "index": 6454, "code": "A = int(input())\nB = int(input())\n\nif A > B:\n    print(\"GREATER\")\nelif A < B:\n    print(\"LESS\")\nelse:\n    print(\"EQUAL\")"}
{"label": 50, "index": 6455, "code": "A = int(input())\nB = int(input())\n\nif A > B:\n\tprint(\"GREATER\")\nelif A < B:\n\tprint(\"LESS\")\nelse:\n\tprint(\"EQUAL\")"}
{"label": 50, "index": 6456, "code": "A = int(input())\nB = int(input())\n\nif A > B:\n    print(\"GREATER\")\nelif A == B:\n    print(\"EQUAL\")\nelse:\n    print(\"LESS\")"}
{"label": 50, "index": 6457, "code": "a = int(raw_input().strip())\nb = int(raw_input().strip())\nif a > b:\n\tprint \"GREATER\"\nelif a < b:\n\tprint \"LESS\"\nelse:\n\tprint \"EQUAL\""}
{"label": 50, "index": 6458, "code": "a = int(input())\nb = int(input())\n\nif a > b:\n    print('GREATER')\nelif a < b:\n    print('LESS')\nelse:\n    print('EQUAL')"}
{"label": 50, "index": 6459, "code": "import sys\na = list(raw_input())\nb = list(raw_input())\n\nif len(a) > len(b):\n    print 'GREATER'\n    sys.exit(0)\nif len(b) > len(a):\n    print 'LESS'\n    sys.exit(0)\n\nif len(a) == len(b):\n    flag = 'equal'\n    for i in xrange(len(a)):\n        if a[i] > b[i]:\n            flag = 'greater'\n            break\n        if b[i] > a[i]:\n            flag = 'less'\n            break\n    print flag.upper()"}
{"label": 50, "index": 6460, "code": "a = int(input())\nb = int(input())\nif a > b:\n    print(\"GREATER\")\nelif a < b:\n    print(\"LESS\")\nelse:\n    print(\"EQUAL\")\n"}
{"label": 50, "index": 6461, "code": "a = int(raw_input())\nb = int(raw_input())\nif a > b:\n    print 'GREATER'\nelif a < b:\n    print 'LESS'\nelse:\n    print 'EQUAL'\n"}
{"label": 50, "index": 6462, "code": "#coding:utf-8\nimport math\n\nif __name__ == \"__main__\":\n    a = raw_input()\n    b = raw_input()\n\n    if len(a) > len(b):\n        print \"GREATER\"\n    elif len(a) < len(b):\n        print \"LESS\"\n    elif len(a) == len(b):\n        for i in range(len(a)):\n            if a[i] > b[i]:\n                print \"GREATER\"\n                break\n            elif a[i] < b[i]:\n                print \"LESS\"\n                break\n            elif a[i] == b[i] and i == len(a) - 1:\n                print \"EQUAL\"\n\n\n"}
{"label": 50, "index": 6463, "code": "a=int(input())\nb=int(input())\nif a>b:\n    print(\"GREATER\")\nelif a<b:\n    print(\"LESS\")\nelse:\n    print(\"EQUAL\")\n"}
{"label": 50, "index": 6464, "code": "a = long(raw_input())\nb = long(raw_input())\n\nif a > b:\n    print \"GREATER\"\nelif a < b:\n    print \"LESS\"\nelse:\n    print \"EQUAL\"\n"}
{"label": 50, "index": 6465, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\nimport re\nimport math\nimport collections\nimport itertools\nimport functools\n\nDEBUG = True\nDEBUG = False\n\ndef dbg(*args):\n    if DEBUG:\n        print(\"DBG: \", file=sys.stderr, end=\"\")\n        print(*args, file=sys.stderr)\n\n\n\ndef main():\n    A = input()\n    B = input()\n\n    A = A.zfill(len(B))\n    B = B.zfill(len(A))\n\n    if A > B:\n        print(\"GREATER\")\n    elif A < B:\n        print(\"LESS\")\n    else:\n        print(\"EQUAL\")\n\nif __name__ == \"__main__\": main()\n"}
{"label": 50, "index": 6466, "code": "\nA = int(input())\nB = int(input())\n\nif A > B:\n    print(\"GREATER\")\nelif A < B:\n    print(\"LESS\")\nelse:\n    print(\"EQUAL\")"}
{"label": 50, "index": 6467, "code": "a = int(input())\nb = int(input())\n\nans = 'EQUAL'\nif a<b:\n    ans = 'LESS'\nelif a>b:\n    ans = 'GREATER'\nprint(ans)\n"}
{"label": 50, "index": 6468, "code": "\n\na = int(input())\nb = int(input())\n\nif a > b:\n    print('GREATER')\nelif a < b:\n    print('LESS')\nelse:\n    print('EQUAL')\n"}
{"label": 50, "index": 6469, "code": "A = input()\nB = input()\n\nA = int(A)\nB = int(B)\n\nif A<B:\n\tprint('LESS')\nelif A==B:\n\tprint('EQUAL')\nelse:\n\tprint('GREATER')"}
{"label": 50, "index": 6470, "code": "A = int(input())\nB = int(input())\n\nif A == B:\n    print(\"EQUAL\")\nelif A < B:\n    print(\"LESS\")\nelse:\n    print(\"GREATER\")\n\n"}
{"label": 50, "index": 6471, "code": "a=int(input())-int(input());print(a>0and'GREATER'or a<0and'LESS'or'EQUAL')"}
{"label": 50, "index": 6472, "code": "A = int(input())\nB = int(input())\nif A > B:\n    print(\"GREATER\")\nelif A == B:\n    print(\"EQUAL\")\nelif A < B:\n    print(\"LESS\")\n"}
{"label": 50, "index": 6473, "code": "a = int(input())\nb = int(input())\nif a > b:\n    print(\"GREATER\")\nelif a < b:\n    print(\"LESS\")\nelse:\n    print(\"EQUAL\")\n"}
{"label": 50, "index": 6474, "code": "# coding: utf-8\n\n[A,B] = [int(raw_input()) for i in range(2)]\nif A > B:\n    print 'GREATER'\nelif A < B:\n    print 'LESS'\nelse:\n    print 'EQUAL'\n"}
{"label": 50, "index": 6475, "code": "a = input()\na = int(a)\nb = input()\nb = int(b)\nif a < b:\n    print(\"LESS\")\nif a == b:\n    print(\"EQUAL\")\nif a > b:\n    print(\"GREATER\")"}
{"label": 50, "index": 6476, "code": "a=int(input())\nb=int(input())\n\nif a>b:print(\"GREATER\")\nelif a==b:print(\"EQUAL\")\nelse: print(\"LESS\")\n"}
{"label": 50, "index": 6477, "code": "a = int(input())\nb = int(input())\nif a > b:\n    print(\"GREATER\")\nelif a < b:\n    print(\"LESS\")\nelse:\n    print(\"EQUAL\")\n"}
{"label": 50, "index": 6478, "code": "import math\nimport sys\n\nx = int(input())\ny = int(input())\n\nif x == y:\n    print(\"EQUAL\")\nelif x > y:\n    print(\"GREATER\")\nelse:\n    print(\"LESS\")\n"}
{"label": 50, "index": 6479, "code": "A = int(input())\nB = int(input())\nif A > B:\n\tprint(\"GREATER\")\nelif A < B:\n\tprint(\"LESS\")\nelse:\n\tprint(\"EQUAL\")\n\n"}
{"label": 50, "index": 6480, "code": "A = int(input())\nB = int(input())\nif A == B:\n\tprint \"EQUAL\"\nelif A < B:\n\tprint \"LESS\"\nelse:\n\tprint \"GREATER\""}
{"label": 50, "index": 6481, "code": "n = input()\nm = input()\nif n==m: print \"EQUAL\"\nelif n>m: print \"GREATER\"\nelse: print \"LESS\"\n"}
{"label": 50, "index": 6482, "code": "a = int(input())\nb = int(input())\n \nif a > b:\n    print('GREATER')\nelif b > a:\n    print('LESS')\nelse:\n    print('EQUAL')"}
{"label": 50, "index": 6483, "code": "# -*- coding: utf-8 -*-\n# problem B\n\na = int(input())\nb = int(input())\n\ndef comp(a, b):\n    if a < b:\n        print(\"LESS\")\n    elif a > b:\n        print(\"GREATER\")\n    else:\n        print(\"EQUAL\")\n        \ncomp(a, b)"}
{"label": 50, "index": 6484, "code": "a = int(input())\nb = int(input())\nif a > b:\n    print(\"GREATER\")\nelif a == b:\n    print(\"EQUAL\")\nelse:\n    print(\"LESS\")"}
{"label": 50, "index": 6485, "code": "A=int(input())\nB=int(input())\ns='EQUAL'\nif A>B: s='GREATER'\nif A<B: s='LESS'\nprint(s)"}
{"label": 50, "index": 6486, "code": "A = int(input())\nB = int(input())\n\nif A > B:\n    print(\"GREATER\")\nelif A == B:\n    print(\"EQUAL\")\nelse:\n    print(\"LESS\")"}
{"label": 50, "index": 6487, "code": "a = int(input())\nb = int(input())\n\nif a > b:\n  print(\"GREATER\")\nelif a < b:\n  print(\"LESS\")\nelse :\n  print(\"EQUAL\")\n"}
{"label": 50, "index": 6488, "code": "a = int(input())\nb = int(input())\n\nif a > b:\n    print ('GREATER')\nelif a < b:\n    print ('LESS')\nelse:\n    print ('EQUAL')"}
{"label": 50, "index": 6489, "code": "# -*- coding: utf-8 -*-\n# \u6574\u6570\u306e\u5165\u529b\nA=int(input())\nB=int(input())\n# \u51fa\u529b\nif A>B:\n  print(\"GREATER\")\nelif A<B:\n  print(\"LESS\")\nelse:\n  print(\"EQUAL\")"}
{"label": 50, "index": 6490, "code": "a = input()\nb = input()\nif a > b:\n\tprint \"GREATER\"\nelif a < b:\n\tprint \"LESS\"\nelse:\n\tprint \"EQUAL\"\n\n"}
{"label": 50, "index": 6491, "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nA = int(raw_input())\nB = int(raw_input())\n\nif(A>B):\n\tprint \"GREATER\"\nelif(A<B):\n\tprint \"LESS\"\nelse:\n\tprint \"EQUAL\"\n\n"}
{"label": 50, "index": 6492, "code": "#ABC059B\n\na=int(raw_input())\nb=int(raw_input())\nif a>b:\n print 'GREATER'\nelif a<b:\n print 'LESS'\nelse:\n print 'EQUAL'\n"}
{"label": 50, "index": 6493, "code": "A = int(input())\nB = int(input())\nif A>B:\n   print('GREATER')\nelif A<B:\n   print('LESS')\nelse:\n   print('EQUAL')\n"}
{"label": 50, "index": 6494, "code": "a = input()\nb = input()\nn = len(a)\nif len(a) == len(b):\n    i = 0\n    while i<n and a[i] == b[i]:\n        i += 1\n    if i == n:\n        print(\"EQUAL\")\n    elif a[i] > b[i]:\n        print(\"GREATER\")\n    else:\n        print(\"LESS\")\nelif len(a) > len(b):\n    print(\"GREATER\")\nelse:\n    print(\"LESS\")"}
{"label": 50, "index": 6495, "code": "A=int(input())\nB=int(input())\nif A==B:\n    print('EQUAL')\nelif A<B:\n    print('LESS')\nelse:\n    print('GREATER')"}
{"label": 50, "index": 6496, "code": "if __name__ == \"__main__\":\n    A = input()\n    B = input()\n    if (len(A) > len(B)):\n        print (\"GREATER\")\n    if (len(A) < len(B)):\n        print (\"LESS\")\n    if (len(A) == len(B)):\n        if (A == B):\n            print (\"EQUAL\")\n        for x,y in zip(A, B):\n            x = int(x)\n            y = int(y)\n            if (x > y):\n                print (\"GREATER\")\n                break\n            if (x < y):\n                print (\"LESS\")\n                break\n"}
{"label": 50, "index": 6497, "code": "# -*- coding: utf-8 -*-\n\nA = input()\nB = input()\n\nif(A>B):\n    print('GREATER')\nelif(A<B):\n    print('LESS')\nelse:\n    print('EQUAL')"}
{"label": 50, "index": 6498, "code": "A = int(input())\nB = int(input())\nif A > B:\n    print(\"GREATER\")\nelif A < B:\n    print(\"LESS\")\nelif A == B:\n    print(\"EQUAL\")\n"}
{"label": 50, "index": 6499, "code": "MOD=1000000007\n\ndef solve():\n    a=int(input())\n    b=int(input())\n    if a<b:\n        print(\"LESS\")\n    elif a>b:\n        print(\"GREATER\")\n    else:\n        print(\"EQUAL\")\n\nif __name__ == \"__main__\":\n    solve()"}
{"label": 51, "index": 6500, "code": "a, b, c = map(str, raw_input().split())\n\nif a[-1] == b[0] and b[-1] == c[0]:\n    print \"YES\"\nelse:\n    print \"NO\""}
{"label": 51, "index": 6501, "code": "a, b, c = map(str, input().split())\n\nif a[-1] != b[0]:\n    print(\"NO\")\n\nelif b[-1] != c[0]:\n    print(\"NO\")\nelse:\n    print(\"YES\")\n"}
{"label": 51, "index": 6502, "code": "A, B, C = input().split()\nif A[-1] == B[0] and B[-1] == C[0]:\n    print('YES')\nelse:\n    print('NO')\n    \n"}
{"label": 51, "index": 6503, "code": "def is_shiritori(s):\n    before_mozi = None\n    for mozi in s.split():\n        if before_mozi is None:\n            before_mozi = mozi\n            continue\n        else:\n            if mozi[0] is not before_mozi[-1]:\n                print(\"NO\")\n                return False\n            before_mozi = mozi\n    print(\"YES\")\n\nss = input()\nis_shiritori(ss)"}
{"label": 51, "index": 6504, "code": "li = list(map(str, input().split()))\nli = [list(_) for _ in li]\n\nif li[0].pop() == li[1][0] and li[1].pop() == li[2][0]:\n        print(\"YES\")\nelse:\n        print(\"NO\")\n"}
{"label": 51, "index": 6505, "code": "A, B, C = raw_input().split()\n\nif A[-1] == B[0] and B[-1] == C[0]:\n    print \"YES\"\nelse:\n    print \"NO\"\n"}
{"label": 51, "index": 6506, "code": "A , B , C = input().split()\nif A[-1] == B[0] and B[-1] == C[0]:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 51, "index": 6507, "code": "a,b,c = input().split()\nprint(\"YES\" if a[-1] == b[0] and b[-1] == c[0] else \"NO\")"}
{"label": 51, "index": 6508, "code": "l = raw_input().split(\" \")\n\njudge=\"YES\"\n\nif (l[0][-1] != l[1][0]):\n    judge=\"NO\"\n\nif (l[1][-1] != l[2][0]):\n    judge=\"NO\"\n\nprint judge"}
{"label": 51, "index": 6509, "code": "A,B,C =(input().split())\n\nif A[-1]==B[0] and B[-1]==C[0]:\n    print(\"YES\")\n\nelse:\n    print(\"NO\")"}
{"label": 51, "index": 6510, "code": "A, B, C = map(str,input().split())\n\nif A[-1] == B[0]:\n    if B[-1] == C[0]:\n        print(\"YES\")\n    else:\n        print(\"NO\")\nelse:\n    print(\"NO\")"}
{"label": 51, "index": 6511, "code": "a, b, c = input().split()\nif a[-1] == b[0] and b[-1] == c[0]:\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 51, "index": 6512, "code": "A, B, C = input().split()\nif A[-1] == B[0] and B[-1] == C[0]:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 51, "index": 6513, "code": "a = input().split()\nb = list(a[0])\nc = list(a[1])\nd = list(a[2])\nif b[-1] != c[0]:\n    print('NO')\nelif c[-1] != d[0]:\n    print('NO')\nelse:\n    print('YES')"}
{"label": 51, "index": 6514, "code": "a,b,c=input().split();print([\"NO\",\"YES\"][a[-1]==b[0]and b[-1]==c[0]])"}
{"label": 51, "index": 6515, "code": "\nA, B, C = raw_input().split()\na=A[-1]\nb1=B[0]\nb2=B[-1]\nc=C[0]\n\nif a==b1 and b2==c:\n    print \"YES\"\nelse:\n    print \"NO\"\n"}
{"label": 51, "index": 6516, "code": "a, b, c = map(str, input().split())\nif a[-1] == b[0] and b[-1] == c[0]:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 51, "index": 6517, "code": "moji=raw_input().split(\" \")\nflag=0\nfor i in range(len(moji)-1):\n\tif(moji[i][len(moji[i])-1]!=moji[i+1][0]):\n\t\tprint \"NO\"\n\t\tflag=1\n\t\tbreak\nif(flag==0):\n\tprint \"YES\"\n\n"}
{"label": 51, "index": 6518, "code": "a,b,c=input().split();print(['NO','YES'][a[-1]==b[0]and b[-1]==c[0]])"}
{"label": 51, "index": 6519, "code": "A,B,C=input().split()\n\nif A[-1]==B[0] and B[-1]==C[0]:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 51, "index": 6520, "code": "n = input()\ntmp_n = n.split(\" \")\n\na = tmp_n[0]\nb = tmp_n[1]\nc = tmp_n[2]\n\nif a[-1] == b[0] and b[-1] == c[0]:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 51, "index": 6521, "code": "a, b, c = map(str, input().split())\nab, bc = (0, 0)\n\nif a[-1] == b[0]:\n    ab = 1\nif b[-1] == c[0]:\n    bc = 1\nif ab==1 and bc==1:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 51, "index": 6522, "code": "a = map(str, raw_input().split(\" \"))\nfirst = \"\"\nfor i in a:\n    if len(first)!=0:\n        if i.startswith(first) == False:\n            print \"NO\"\n            exit()\n    first = i[len(i)-1]\nprint \"YES\"\n"}
{"label": 51, "index": 6523, "code": "strs = input().split()\nif strs[0][len(strs[0]) -1] == strs[1][0] and strs[1][len(strs[1]) -1] == strs[2][0]:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 51, "index": 6524, "code": "a,b,c = map(str,input().split())\nif a[-1] == b[0] and b[-1] == c[0]:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 51, "index": 6525, "code": "A, B, C = input().split()\n\nif A[-1] == B[0] and B[-1] == C[0]:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n\n"}
{"label": 51, "index": 6526, "code": "# coding: utf-8\n\na, b, c = raw_input().split()\n\nif a[-1] == b[0]:\n    if b[-1] == c[0]:\n        print \"YES\"\n    else:\n        print \"NO\"\nelse:\n    print \"NO\"\n"}
{"label": 51, "index": 6527, "code": "a, b, c = input().split()\n\nif (a[-1] is b[0]) and (b[-1] is c[0]):\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 51, "index": 6528, "code": "s = input().split()\nA = s[0]\nB = s[1]\nC = s[2]\nif A[len(A)-1]==B[0] and B[len(B)-1]==C[0]:\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 51, "index": 6529, "code": "a = input().split()\nprint(\"YES\" if a[0][-1]==a[1][0] and a[1][-1]==a[2][0] else \"NO\")"}
{"label": 51, "index": 6530, "code": "A,B,C = map(str, input().split())\nif A[-1] == B[0] and B[-1] == C[0]:\n\tprint('YES')\nelse:\n\tprint('NO')"}
{"label": 51, "index": 6531, "code": "a,b,c=map(str,input().split())\nif a[-1]==b[0] and b[-1]==c[0]:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 51, "index": 6532, "code": "A, B, C = input().split()\nif A[-1] == B[0] and B[-1] == C[0]:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n    "}
{"label": 51, "index": 6533, "code": "a, b, c = input().split()\nif a[-1] == b[0] and b[-1] == c[0]:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n\n"}
{"label": 51, "index": 6534, "code": "import sys\n\ndef main():\n    line = sys.stdin.readline()\n    lst = line.split()\n    a = lst[0]\n    b = lst[1]\n    c = lst[2]\n\n    if a[-1] == b[0] and b[-1] == c[0]:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    return 0\n\nif __name__ == '__main__':\n    sys.exit(main())\n"}
{"label": 51, "index": 6535, "code": "a, b, c = input().split()\nif a[-1] == b[0] and b[-1] == c[0]:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n\n"}
{"label": 51, "index": 6536, "code": "A, B, C = [i for i in input().split()]\nif A[-1] == B[0] and B[-1] == C[0]:\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 51, "index": 6537, "code": "a,b,c = input().split()\n\nif a[len(a)-1]==b[0] and b[len(b)-1]==c[0]:\n    print('YES')\nelse:\n    print('NO')\n    \n"}
{"label": 51, "index": 6538, "code": "A, B,C=map(str, input().split())\nif A[-1]==B[0] and B[-1]==C[0]:\n  print(\"YES\")\nelse: \n  print(\"NO\")"}
{"label": 51, "index": 6539, "code": "A, B, C = map(str, input().split())\n\nif (A[-1] == B[0]) and (B[-1] == C[0]):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 51, "index": 6540, "code": "a, b, c = map(str, input().split())\na_arr = list(a)\na_tail = a_arr[-1]\n\nb_arr = list(b)\nb_head = b_arr[0]\nb_tail = b_arr[-1]\n\nc_arr = list(c)\nc_head = c_arr[0]\n\nif a_tail == b_head:\n   if b_tail == c_head:\n      print(\"YES\")\n   else:\n      print(\"NO\")\nelse:\n   print(\"NO\")"}
{"label": 51, "index": 6541, "code": "arr=input().split()\nif arr[0][-1] == arr[1][0] and arr[1][-1] == arr[2][0]:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 51, "index": 6542, "code": "import sys\nimport math\n\nINF = 10**9+7\n\nstdin = sys.stdin\ndef na(): return map(int, stdin.readline().split())\ndef ns(): return stdin.readline().strip()\ndef nsl(): return list(stdin.readline().strip())\ndef ni(): return int(stdin.readline())\ndef nil(): return list(map(int, stdin.readline().split()))\n\na, b, c = ns().split(\" \");\n\nif(a[-1] == b[0] and b[-1] == c[0]):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 51, "index": 6543, "code": "a, b, c = map(str, input().split())\nif a[-1] == b[0] and b[-1] == c[0]:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 51, "index": 6544, "code": "a,b,c=map(str,input().split())\nif a[len(a)-1]==b[0] and b[len(b)-1]==c[0]:\n  print(\"YES\")\nelse:\n  print(\"NO\")"}
{"label": 51, "index": 6545, "code": "s = input().split()\nprint(\"YES\" if s[0][-1] == s[1][0] and s[1][-1] == s[2][0] else \"NO\")"}
{"label": 51, "index": 6546, "code": "A,B,C=map(str,raw_input().split())\nif(A[-1]==B[0] and B[-1]==C[0]):\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 51, "index": 6547, "code": "a,b,c=input().split()\nprint(['NO','YES'][a[-1]==b[0]and b[-1]==c[0]])"}
{"label": 51, "index": 6548, "code": "A, B, C = input().split()\n\nif A[-1] == B[0] and B[-1] == C[0]:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n"}
{"label": 51, "index": 6549, "code": "A,B,C=input().split()\n\nif A[-1]==B[0] and B[-1]==C[0]:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 51, "index": 6550, "code": "# coding: utf-8\n\nif __name__ == \"__main__\":\n\ta, b, c = input().split()\n\tif a[-1] == b[0] and b[-1] == c[0]:\n\t\tprint('YES')\n\telse:\n\t\tprint('NO')\n"}
{"label": 51, "index": 6551, "code": "A,B,C = input().split()\n\nif A[-1] == B[0] and B[-1] == C[0]:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 51, "index": 6552, "code": "A, B, C = raw_input().split()\nprint \"YES\" if A[-1] == B[0] and B[-1] == C[0] else \"NO\"\n"}
{"label": 51, "index": 6553, "code": "mo=input()\nlist=mo.split()\na=str(list[0])\nb=str(list[1])\nc=str(list[2])\nif a[-1]==b[0] and b[-1]==c[0]:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 51, "index": 6554, "code": "a,b,c = raw_input().split()\n\nif a[-1] == b[0] and b[-1] == c[0]:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 51, "index": 6555, "code": "a,b,c=[i for i in input().split()]\nif a[len(a)-1]==b[0] and b[len(b)-1]==c[0]:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 51, "index": 6556, "code": "a=map(str, raw_input().split())\n\na_0=list(a[0])\na_1=list(a[1])\na_2=list(a[2])\n\nif a_0[-1]==a_1[0] and a_1[-1]==a_2[0]:\n  print \"YES\"\nelse:\n  print \"NO\""}
{"label": 51, "index": 6557, "code": "a, b, c = input().split(\" \")\n\n\nif a[-1] == b[0] and b[-1] == c[0]:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 51, "index": 6558, "code": "\ninput_string = input()\ns1, s2, s3 = input_string.split()\n\nif (s1[-1] == s2[0]) and (s2[-1] == s3[0]):\n    print('YES')\nelse:\n    print('NO')"}
{"label": 51, "index": 6559, "code": "a,b,c=map(str,input().split())\nif a[-1]==b[0] and b[-1]==c[0]:\n        print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 51, "index": 6560, "code": "a,b,c = raw_input().split()\nif a[-1] == b[0] and b[-1] == c[0]:\n    print 'YES'\nelse:\n    print 'NO'\n"}
{"label": 51, "index": 6561, "code": "S = input().split()\n\nif(S[0][-1] == S[1][0] and S[1][-1] == S[2][0]):\n  print(\"YES\")\nelse:\n  print(\"NO\")"}
{"label": 51, "index": 6562, "code": "a, b, c = input().split(' ')\nif a[len(a) - 1] == b[0] and b[len(b) - 1] == c[0]:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 51, "index": 6563, "code": "def main():\n    a,b,c = map(str, input().split())\n\n    if a[-1] == b[0] and b[-1] == c[0]:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n"}
{"label": 51, "index": 6564, "code": "import sys\n\na, b, c = [str(x) for x in sys.stdin.readline().split()]\n\nif a[len(a)-1] == b[0] and b[len(b)-1] == c[0]:\n\tprint('YES')\nelse:\n\tprint('NO')"}
{"label": 51, "index": 6565, "code": "s = input().split()\nif s[0][-1] == s[1][0] and s[1][-1] == s[2][0]:\n print(\"YES\")\nelse:\n print(\"NO\")"}
{"label": 51, "index": 6566, "code": "import sys\n\na, b, c = sys.stdin.readline().rstrip().split()\n\nif a[len(a)-1] == b[0] and b[len(b)-1] == c[0]:\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 51, "index": 6567, "code": "# -*- coding: utf-8 -*-\ndef shiritori(a, b):\n    return a[len(a)-1:] == b[:1]\n\n\na, b, c = input().split()\nif shiritori(a, b) is True and shiritori(b, c) is True:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 51, "index": 6568, "code": "l = list(map(str, input().split()))\n\n\nif (l[0][-1] == l[1][0]) and (l[1][-1] == l[2][0]):\n  print('YES')\nelse:\n  print('NO')\n"}
{"label": 51, "index": 6569, "code": "A, B, C = map(str, input().split())\n\nif A[-1]==B[0] and B[-1]==C[0]:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 51, "index": 6570, "code": "a = raw_input()\n\nl = a.split(' ')\n\nif l[0][-1] == l[1][0] and l[1][-1] == l[2][0]:\n\tprint \"YES\"\nelse:\n\tprint \"NO\""}
{"label": 51, "index": 6571, "code": "a, b, c = list(input().split())\nif a[-1] == b[0] and b[-1] == c[0]:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 51, "index": 6572, "code": "A, B, C = input().split()\n\n\nif A[-1] == B[0] and B[-1] == C[0]:\n    print('YES')\nelse:\n    print('NO')\n\n"}
{"label": 51, "index": 6573, "code": "#coding:utf-8\n\nif __name__ == \"__main__\":\n    A, B, C = raw_input().split(\" \")\n\n    if A[-1] == B[0] and B[-1] == C[0]:\n        print \"YES\"\n    else:\n        print \"NO\"\n"}
{"label": 51, "index": 6574, "code": "s = input().split()\nif s[0][-1] == s[1][0] and s[1][-1] == s[2][0]:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 51, "index": 6575, "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\na, b, c = raw_input().split()\nflag    = True\n\nif a[-1] != b[0] or b[-1] != c[0]:\n\tflag = False\n\nif flag == True:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")"}
{"label": 51, "index": 6576, "code": "A, B, C = input().split()\nif A[-1:] == B[:1] and B[-1:] == C[:1]:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")"}
{"label": 51, "index": 6577, "code": "def read(): return list(map(int, input().split()))\n\na,b,c = input().split()\nif a[-1] == b[0] and b[-1] == c[0]:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 51, "index": 6578, "code": "a,b,c = input().split()\nprint(\"YES\" if a[-1]==b[0] and b[-1]==c[0] else \"NO\")"}
{"label": 51, "index": 6579, "code": "a, b, c = input().split()\nprint('YES' if a[-1] == b[0] and b[-1] == c[0] else 'NO')\n"}
{"label": 51, "index": 6580, "code": "a,b,c = map(str, input().split())\nprint('YES' if a[-1]==b[0] and b[-1]==c[0] else 'NO')\n"}
{"label": 51, "index": 6581, "code": "a,b,c=raw_input().split()\n\nif a[len(a)-1]==b[0] and b[len(b)-1]==c[0]:\n    print('YES')\nelse:\n    print('NO')\n    "}
{"label": 51, "index": 6582, "code": "A, B, C = input().split()\nif A[-1] is B[0] and B[-1] is C[0]:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 51, "index": 6583, "code": "a,b,c=input().split();print('YES'*(a[-1]==b[0])*(b[-1]==c[0])or'NO')"}
{"label": 51, "index": 6584, "code": "a, b, c = input().split()\n\nif a[-1] == b[0] and b[-1] == c[0]:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 51, "index": 6585, "code": "a, b, c = input().split()\nif a[-1] == b[0] and b[-1] == c[0]:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 51, "index": 6586, "code": "a, b, c = input().split()\nif a[-1] == b[0] and b[-1] == c[0]:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 51, "index": 6587, "code": "A,B,C = raw_input().split()\nif A[-1:]==B[:1] and B[-1:]==C[:1]:\n    print \"YES\"\nelse:\n    print \"NO\""}
{"label": 51, "index": 6588, "code": "a, b, c = input().split()\n\nif(a[-1] == b[0] and b[-1] == c[0]):\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 51, "index": 6589, "code": "A, B, C = input().split()\n\nif A[-1] == B[0] and B[-1] == C[0]:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 51, "index": 6590, "code": "A,B,C=map(str,input().split())\nif (A[-1:]==B[:1] and B[-1:]==C[:1]):\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 51, "index": 6591, "code": "a, b, c = input().split()\n\nif a[-1] == b[0] and b[-1] == c[0]:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 51, "index": 6592, "code": "a, b, c = input().split()\n\nif a[-1] == b[0] and b[-1] == c[0]:\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 51, "index": 6593, "code": "l = input().split(' ')\n\ndef shiritori(_l):\n    for s,t in zip(_l[:-1], _l[1:]):\n        if not s[-1]==t[0]:\n            return 'NO'\n    else:\n        return 'YES'\n    \nprint(shiritori(l))"}
{"label": 51, "index": 6594, "code": "word = list(input().split())\nif word[0][-1] == word[1][0] and word[1][-1] == word[2][0]:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n    \n    "}
{"label": 51, "index": 6595, "code": "input_line = raw_input().split(\" \")\na = input_line[0]\nb = input_line[1]\nc = input_line[2]\nif a[len(a)-1] == b[0] and b[len(b)-1] == c[0]:\n\tprint \"YES\"\nelse:\n\tprint \"NO\""}
{"label": 51, "index": 6596, "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\nA,B,C = map(str,raw_input().split(\" \"))\n\nif(A[-1]==B[0]):\n\tif(B[-1]==C[0]):\n\t\tprint \"YES\"\n\telse:\n\t\tprint \"NO\"\n\nelse:\n\tprint \"NO\"\n\n"}
{"label": 51, "index": 6597, "code": "a,b,c = input().split()\n\nif b[0] == a[-1] and c[0] == b[-1]:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 51, "index": 6598, "code": "A, B, C = map(str, input().split())\n\nif A[-1] == B[0]:\n\tif B[-1] == C[0]:\n\t\tprint('YES')\n\telse:\n\t\tprint('NO')\nelse:\n\tprint('NO')"}
{"label": 51, "index": 6599, "code": "if __name__ == \"__main__\":\n    A,B,C = input().split()\n    if (A[-1] == B[0] and B[-1] == C[0]):\n        print ('YES')\n    else:\n        print (\"NO\")\n"}
{"label": 51, "index": 6600, "code": "A, B, C = map(str, input().split())\nif (A[-1] == B[0]) and (B[-1] == C[0]) :\n    print(\"YES\")\nelse :\n    print(\"NO\")\n"}
{"label": 51, "index": 6601, "code": "A, B, C = map(str, input().split())\n\nif A[-1] == B[0] and B[-1] == C[0]:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 51, "index": 6602, "code": "A, B, C = raw_input().split()\n\nif A[-1] == B[0] and B[-1] == C[0]:\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 51, "index": 6603, "code": "a,b,c = input().split()\nprint('YES' if a[-1]==b[0] and b[-1]==c[0] else 'NO')\n"}
{"label": 51, "index": 6604, "code": "a,b,c=map(str, input().split())\nif a[-1]==b[0] and b[-1]==c[0]:\n print ('YES')\nelse:\n print('NO')"}
{"label": 51, "index": 6605, "code": "# coding: utf-8\n\na,b,c = input().rstrip().split(\" \")\n\nif a[-1] == b[0] and b[-1] == c[0]:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 51, "index": 6606, "code": "#!/usr/bin/env python3\nimport os\nimport sys\n\nl = sys.stdin.readline()\nl.rstrip('\\n')\na, b, c = l.split(\" \")\nif (a[len(a)-1] == b[0] and b[len(b)-1] == c[0]):\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 51, "index": 6607, "code": "if __name__ == '__main__':\n    a = input().split()\n    if a[0][-1]==a[1][0] and a[1][-1]==a[2][0]:\n        print('YES')\n    else:\n        print('NO')"}
{"label": 51, "index": 6608, "code": "str = raw_input().split()\nif (str[0][-1:] == str[1][0] and str[1][-1:] == str[2][0]):\n\tprint (\"YES\")\nelse :\n\tprint(\"NO\")\n"}
{"label": 51, "index": 6609, "code": "#coding=UTF-8\n\nmozir=input()\nhyo=mozir.split(' ')\n\nans=True\nfor idx in range(0,2,1):\n    ras=hyo[idx][len(hyo[idx])-1]\n    cap=hyo[idx+1][0]\n    if ras != cap:\n        ans = False\n\nif ans:\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 51, "index": 6610, "code": "a = input()\nb = a.split()\n\nif b[0][-1] == b[1][0] and b[1][-1] == b[2][0]:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 51, "index": 6611, "code": "a,b,c = raw_input().split()\nif a[len(a)-1] == b[0] and b[len(b)-1] == c[0]:\n    print 'YES'\nelse:\n    print 'NO'\n"}
{"label": 51, "index": 6612, "code": "A,B,C=raw_input().split(' ')\n\nif A[-1]==B[0] and B[-1]==C[0]:\n    print \"YES\"\nelse:\n    print \"NO\""}
{"label": 51, "index": 6613, "code": "#ABC060A\n\na,b,c=raw_input().split()\nif a[-1]==b[0] and b[-1]==c[0]:\n print 'YES'\nelse:\n print 'NO'\n"}
{"label": 51, "index": 6614, "code": "# coding: utf-8 \narray = input().split(\" \")\nflag = True\nfor i,s in enumerate(array[:(len(array)-1)]):\n    if s[-1] != array[i+1][0]:\n        flag = False\nif flag is True:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 51, "index": 6615, "code": "def read_str_list():\n    return list(str(s) for s in input().split())\n\na,b,c = read_str_list()\nif a[-1]==b[0] and b[-1]==c[0]:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 51, "index": 6616, "code": "S = input().split()\na2 = S[0][-1]\nfor i,s in enumerate(S):\n\tif i == 0:\n\t\tcontinue\n\ta1 = s[0]\n\tif a1 != a2:\n\t\tprint(\"NO\")\n\t\tbreak\n\ta2 = s[-1]\n\tif i == 2:\n\t\tprint(\"YES\")"}
{"label": 51, "index": 6617, "code": "strs = input().split()\nif strs[0][-1] == strs[1][0] and strs[1][-1] == strs[2][0]:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 51, "index": 6618, "code": "# coding: utf-8\na,b,c=input().split()\nif a[-1]==b[0] and b[-1]==c[0]:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 51, "index": 6619, "code": "a,b,c = map(str, raw_input().split())\nif(a[-1] == b[0] and b[-1] == c[0]):\n    print \"YES\"\nelse:\n    print \"NO\"\n"}
{"label": 51, "index": 6620, "code": "A, B, C = map(str, input().split())\n\nif (A[-1]==B[0]) and (B[-1]==C[0]):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n\n"}
{"label": 51, "index": 6621, "code": "A = list(map(str,input().split(\" \")))\nif A[0][-1] == A[1][0] and  A[1][-1] ==  A[2][0]:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 51, "index": 6622, "code": "A, B, C = input().split()\nif A[-1] == B[0] and B[-1] == C[0]:\n  print(\"YES\")\nelse:\n  print(\"NO\")\n"}
{"label": 51, "index": 6623, "code": "import sys\n\ndef solve():\n    a, b, c = input().split()\n\n    if a[-1] == b[0] and b[-1] == c[0]:\n        ans = 'YES'\n    else:\n        ans = 'NO'\n\n    print(ans)\n\nif __name__ == '__main__':\n    solve()"}
{"label": 51, "index": 6624, "code": "def solve():\n  ar = raw_input().split(' ')\n  A = ar[0]\n  B = ar[1]\n  C = ar[2]\n  if A[-1] == B[0] and B[-1] == C[0] : return 'YES'\n  else: return 'NO'\n\nif __name__ == '__main__' :\n  print solve()"}
{"label": 51, "index": 6625, "code": "a,b,c = map(str,input().split())\n \nif a[-1]==b[0] and b[-1]==c[0]:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 51, "index": 6626, "code": "def main():\n    a, b, c = input().split()\n\n    if a[-1] == b[0] and b[-1] == c[0]: print(\"YES\")\n    else: print(\"NO\")\n\n\nif __name__ == \"__main__\":\n    main()"}
{"label": 51, "index": 6627, "code": "a, b, c = input().split()\nif a[-1] == b[0] and b[-1] == c[0]:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 51, "index": 6628, "code": "# coding: utf-8\n# \u6574\u6570\u306e\u5165\u529b\n#a = int(raw_input())\n# \u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u306e\u6574\u6570\u306e\u5165\u529b\nimport numpy as np\nimport itertools\n\nA, B, C = raw_input().split()\nif (A[len(A) - 1] == B[0] and B[len(B)-1] == C[0]):\n    print \"YES\"\nelse:\n    print \"NO\"\n"}
{"label": 51, "index": 6629, "code": "A, B, C = input().split()\n     \nif A[len(A)-1] == B[0] and B[len(B)-1] == C[0]:\n  print(\"YES\")\nelse:\n  print(\"NO\")"}
{"label": 52, "index": 6630, "code": "\ndef gcd(a,b):\n    if b==0:\n        return a\n    return gcd(b, a%b)\n\na,b,c = map(int, input().split())\n\ncount = int(b/gcd(a,b))\nflag = 0\n\nfor i in range(count):\n    if (a*i) % b == c:\n        flag = 1\n        break\n\nif flag == 0:\n    print(\"NO\")\n\nif flag == 1:\n    print(\"YES\")\n"}
{"label": 52, "index": 6631, "code": "def main():\n    A, B, C = map(int, input().split())\n\n    i = 1\n    while i <= B:\n        if A * i % B == C:\n            print('YES')\n            break\n        i += 1\n    else:\n        print('NO')\n\nmain()\n"}
{"label": 52, "index": 6632, "code": "a, b, c = [int(i) for i in input().split()]\nfor i in range(1, b+1):\n    if a*i % b == c:\n        print(\"YES\")\n        break\nelse: print(\"NO\")\n\n"}
{"label": 52, "index": 6633, "code": "import math, itertools, collections, heapq\na, b, c = map(int, input().split())\n\ndef gcd(a, b):\n        if a < b:\n                a, b = b, a\n        if a % b ==0:\n                return b\n        else:\n                return gcd(b, a % b)\n\nans = \"NO\"\nd = gcd(a, b)\nif c % d == 0 and c < b:\n        ans = \"YES\"\n\nprint(ans)"}
{"label": 52, "index": 6634, "code": "a,b,c=map(int,input().split())\nd=0\n \nfor n in range(1,b+1):\n    if n*a%b==c:\n        d=d+1\n    else:\n        d=d\nif d>0:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 52, "index": 6635, "code": "A, B, C = list(map(int, input().split()))\nflag = False\nfor i in range(1, B+1):\n    if (i*A)%B == C:\n        flag = True\nif flag:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 52, "index": 6636, "code": "A, B, C = map(int, input().split())\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nif C % gcd(A, B) == 0:\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 52, "index": 6637, "code": "a,b,c = map(int,input().split())\nflag = 0\nfor i in range(100):\n    if a*i%b == c :\n        flag = 1\nif flag == 1 :\n    print(\"YES\\n\")\nelse :\n    print(\"NO\\n\")\n"}
{"label": 52, "index": 6638, "code": "a, b, c = map(int, input().split())\n\nfor i in range(1, b + 1):\n    if (a * i) % b == c:\n        print('YES')\n        quit()\n\nprint('NO')"}
{"label": 52, "index": 6639, "code": "a, b, c = [int(i) for i in input().split()]\n\nans='NO'\n\ni = 1\nf = a % b\nwhile(1):\n    tmp = a * i\n    mod = tmp % b\n\n    if mod == c:\n        ans = 'YES'\n        break\n\n    if i != 1 and mod == f:\n        break\n\n    i += 1\n\n\nprint(ans)\n"}
{"label": 52, "index": 6640, "code": "a, b, c = map(int, input().split())\nn = max(int(b / a), 1)\np = 'NO'\ns = set()\nr = n * a % b\n\nwhile r not in s:\n    if r == c:\n        p = 'YES'\n        break\n    else:\n        s.add(r)\n        n += 1\n        r = n * a % b\nprint(p)\n"}
{"label": 52, "index": 6641, "code": "a,b,c =(int(i) for i in input().split())\nif a<b:\n    a,b=b,a\nwhile a % b:\n    a,b=b,a % b\nif c % b:\n    print(\"NO\")\nelse:\n    print(\"YES\")"}
{"label": 52, "index": 6642, "code": "a,b,c = map(int, input().split())\nflag = 0\nfor i in range(1,b+1):\n    if (a*i-c)%b==0:\n        flag = 1\n        break\nprint('YES' if flag == 1 else 'NO')\n"}
{"label": 52, "index": 6643, "code": "if __name__ == '__main__':\n    abc = input().split()\n    A = int(abc[0])\n    B = int(abc[1])\n    C = int(abc[2])\n    a = A % B\n    r = 0 #result\n    for i in range(1, B):\n        if a * i % B == C:\n            r = 1\n            break\n    if 1 == r:\n        print('YES')\n    else:\n        print('NO')"}
{"label": 52, "index": 6644, "code": "A, B, C=map(int, raw_input().split())\n\n\na=range(1000)\n\njudge=\"NO\"\n\nfor i in range(1000):\n    a[i]=A*a[i]%B\n    if (a[i]==C):\n        judge=\"YES\"\n\nprint(judge)"}
{"label": 52, "index": 6645, "code": "x=raw_input().split(\" \")\nx=map(int,x)\n#print x\nflag=1\nfor i in range(1,101):\n\tif(x[0]*i)%x[1]==x[2]:\n\t\tprint \"YES\"\n\t\tflag = 0\n\t\tbreak\nif(flag==1):\n\tprint \"NO\"\n\n\n\n\n"}
{"label": 52, "index": 6646, "code": "# -*- coding: utf-8 -*-\na, b, c = map(int, raw_input().split())\ncheck = 0\nwhile check <= a:\n    if (b * check + c) % a == 0:\n        print \"YES\"\n        exit()\n    check += 1\nprint \"NO\"\n"}
{"label": 52, "index": 6647, "code": "a,b,c=map(int,input().split())\ni=1\nmemo=[]\nwhile True:\n    if (a*i)%b not in memo:\n        memo.append((a*i)%b)\n    else:\n        break\n    i+=1\nif c in memo:\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 52, "index": 6648, "code": "def choose_intenger(s):\n    a, b, c = map(int, s.split())\n    for i in range(b):\n        if ( a + a*i ) % b == c:\n            print(\"YES\")\n            return \n\n    print(\"NO\")\n\n# choose_intenger(\"40 98 58\")\nchoose_intenger(input())"}
{"label": 52, "index": 6649, "code": "from fractions import gcd\n\na,b,c = map(int, raw_input().split())\n\nif c % gcd(a,b) == 0:\n\tprint \"YES\"\nelse:\n\tprint \"NO\"\n"}
{"label": 52, "index": 6650, "code": "A, B, C = map(int,input().split())\n\nfor i in range(100):\n    if A*i%B==C:\n        print(\"YES\")\n        break\n        \nelse:\n    print(\"NO\")"}
{"label": 52, "index": 6651, "code": "def b():\n    a, b, c = map(int, input().split())\n    for i in range(2, 200):\n        if a*i % b == c:\n            print('YES')\n            break\n    else: print('NO')\n\nb()"}
{"label": 52, "index": 6652, "code": "a,b,c=list(map(int,input().split()))\nan=\"NO\"\nfor i in range(b):\n    d=a*i\n    if d%b==c:\n        an=\"YES\"\nprint(an)"}
{"label": 52, "index": 6653, "code": "ABC = input().split()\nA=int(ABC[0])\nB=int(ABC[1])\nC=int(ABC[2])\n\n\ncount = A*B\n\n\nfor index in range(count+1):\n    if (A*index)%B==C:\n        print(\"YES\")\n        break\n    elif index ==count:\n        print(\"NO\")\n    "}
{"label": 52, "index": 6654, "code": "def main():\n    n = list(map(int, input().split()))\n    l = [n[0]*i for i in range(1,n[1]+1) if (n[0]*i)%n[1] == n[2] ]\n    if 0 < len(l):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nmain()"}
{"label": 52, "index": 6655, "code": "a, b, c = map(int, input().split())\naa = a\nfor i in range(200):\n    if a == c:\n        print(\"YES\")\n        exit(0)\n    a = (a + aa) % b\nprint(\"NO\")\n"}
{"label": 52, "index": 6656, "code": "a, b, c = [int(i) for i in input().split(' ')]\n\ndef remainderSet(divident, divisor):\n    mul = 1\n    r_set = set()\n    for _ in range(divisor):\n        r_set.add((mul * divident) % divisor)\n        mul += 1\n    return r_set\n\nif c in remainderSet(a, b):\n    print('YES')\nelse:\n    print('NO')"}
{"label": 52, "index": 6657, "code": "a,b,c=map(int,raw_input().split())\nfor i in xrange(105):\n    if a*i%b==c:\n        print \"YES\"\n        break\nelse:\n    print \"NO\"\n"}
{"label": 52, "index": 6658, "code": "a, b, c = input().split(' ')\na = int(a)\nb = int(b)\nc = int(c)\nflag = 0\nfor i in range(1,b+1):\n    if (a*i)%b == c:\n        flag = 1\nif flag == 1:\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 52, "index": 6659, "code": "A, B, C = [int(x) for x in input().split()]\n\ndef common_factor(n,m):\n    ret = []\n    for i in range(1, min(n,m)+1):\n        if n%i==0 and m%i==0:\n            ret.append(i)\n\n    return ret\n\ncommon_factor = common_factor(A, B)\nans = True\nfor i in common_factor:\n    if C%i != 0:\n        ans = False\n        break\n\nif ans:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 52, "index": 6660, "code": "a,b,c = [int(i) for i in input().split()]\nif a < b:\n    a,b = b,a\n\nwhile b > 0:\n    d = a % b\n    a = b\n    b = d\n\nprint(\"YES\" if c % a == 0 else \"NO\")\n"}
{"label": 52, "index": 6661, "code": "A, B, C = map(int,input().split())\n\nfor i in range(1000):\n    if A * i % B == C:\n        print(\"YES\")\n        break\n    \nif A * i % B != C:\n    print(\"NO\")"}
{"label": 52, "index": 6662, "code": "import fractions\na,b,c=map(int,input().split())\ng = fractions.gcd(a,b)\nif c % g ==0 :\n    print('YES')\nelse:\n    print('NO')"}
{"label": 52, "index": 6663, "code": "A, B, C = map(int, raw_input().split()) \nfor i in xrange(1, 1000):\n    if A*i%B == C:\n        print \"YES\"\n        exit()\nprint \"NO\"\n"}
{"label": 52, "index": 6664, "code": "# coding: utf-8 \na,b,c = [int(i) for i in input().split(\" \")]\nflag = False\namari = a % b\nlimit = b\nfor x in range(1,limit):\n    if (amari * x) % b == c:\n        flag = True\n        break\nif flag is True:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 52, "index": 6665, "code": "a,b,c = map(int, raw_input().split())\ntemp = a\nfor i in xrange(1, 101):\n    if a % b == c:\n        flag = 1\n        break\n    else:\n        a = temp * i\n        flag = 0\nif flag == 1:\n    print \"YES\"\nelse:\n    print \"NO\"\n"}
{"label": 52, "index": 6666, "code": "import sys\n\na, b, c = sys.stdin.readline().rstrip().split()\n\na = int(a)\nb = int(b)\nc = int(c)\n\nd = a % b\ne = d\nwhile True:\n    e = (e + d) % b\n    if e == c:\n        print('YES')\n        break\n    if e == d:\n        print('NO')\n        break\n"}
{"label": 52, "index": 6667, "code": "A,B,C = map(int,input().split())\nanswer = []\nfor i in range(1,B+1):\n\tanswer.append(A*i%B)\nif C in answer:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n"}
{"label": 52, "index": 6668, "code": "a, b, c = input().split()\na = int(a)\nb = int(b)\nc = int(c)\n\nfor k in range(a, b * a + 1, a):\n    if k % b == c:\n        #print (str(k) + ' % ' + str(b) + ' = ' + str(k % b))\n        print ('YES')\n        break\nif k == b * a:\n    print ('NO')"}
{"label": 52, "index": 6669, "code": "\na, b, c = input().split()\n\na = int(a)\nb = int(b)\nc = int(c)\n\nflag = False\n\nfor i in range(100):\n    tmp = (a * i) % b\n    if tmp == c:\n        flag = True\n        break\n\nif flag:\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 52, "index": 6670, "code": "# CHoose Integers\na,b,c = list(map(int, input().split()))\n\nf = False\nfor i in range(b):\n    if( ((i+1)*(a%b)+c)%b==0 ):\n        f = True\n        break\nif f:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 52, "index": 6671, "code": "if __name__ == '__main__':\n    a, b, c = map(int, input().split())\n\n    table = set()\n    x = 1\n    while True:\n        mod = (a * x) % b\n        if mod in table: break\n\n        table.add(mod)\n        x += 1\n\n    ans = \"YES\" if c in table else \"NO\"\n    print(ans)\n"}
{"label": 52, "index": 6672, "code": "A,B,C = input().split()\n\nA = int(A)\nB = int(B)\nC = int(C)\n\nresulting = C % B\n\nfor i in range(100):\n    if (A * i) % B == resulting:\n        print(\"YES\")\n        break\nelse:\n    print(\"NO\")\n    \n"}
{"label": 52, "index": 6673, "code": "a, b, c = map(int, input().split())\nans = \"NO\"\nfor i in range(100):\n    if a * i % b == c:\n        ans = \"YES\"\nprint(ans)\n"}
{"label": 52, "index": 6674, "code": "a, b, c = map(int, input().split())\n\nresult = \"NO\"\n\nfor i in range(a, a*b+a, a):\n    if i % b is c:\n        result = \"YES\"\n        break\n\nprint(result)"}
{"label": 52, "index": 6675, "code": "if __name__ == \"__main__\":\n    A,B,C = map(int, input().split())\n    res = set()\n    a = A % B\n    while (True):\n        if a in res:\n            break\n        res.add(a)\n        a += A % B\n        a %= B\n    if C in res:\n        print (\"YES\")\n    else:\n        print (\"NO\")\n"}
{"label": 52, "index": 6676, "code": "A, B, C = map(int, input().split())\n\nn = A % B\nif n == 0:\n    print('NO')\nelse:\n    f = n\n    i = 2\n    l = [f]\n    while True:\n        n = (i * f) % B\n        i += 1\n        l.append(n)\n        if n == f:\n            break\n    if C in set(l):\n        print('YES')\n    else:\n        print('NO')\n        \n"}
{"label": 52, "index": 6677, "code": "A,B,C = map(int, input().split())\nX = 0\nfor  k in range(B-1):\n    if A * k % B == C:\n         print('YES')\n         X = 1\n         break\n\nif X == 0:\n    print('NO')"}
{"label": 52, "index": 6678, "code": "a, b, c = map(int, input().split())\nflag = False\nfor i in range(1, 100000):\n    if (a*i)%b==c:\n        flag = True\n        break\nprint(\"YES\" if flag else \"NO\")"}
{"label": 52, "index": 6679, "code": "\nA, B, C = map(int,raw_input().split())\nans = \"NO\"\nfor n in range(B):\n    if (A*n)%B == C:\n       ans = \"YES\"\nprint ans"}
{"label": 52, "index": 6680, "code": "A, B, C = map(int, input().split())\n\nsurplus = []\nfor i in range(100):\n    surplus.append((A*(i+1))%B)\n\nif C in surplus:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 52, "index": 6681, "code": "a,b,c =map(int,input().split())\n\nD=[]\n\n\nfor n in range(1, 10000):\n\n    if((a * n) % b) == c:\n        D.append(\"Y\")   \n        \nif len(D)>0:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n    \n"}
{"label": 52, "index": 6682, "code": "a,b,c = map(int,input().split())\nsum_all = 0\ncount = 0\nfor i in range(1,101):\n    if (a * i) % b == c:\n        print(\"YES\")\n        break\n    else:\n        count += 1\n        if count == 100:\n            print(\"NO\")\n            break"}
{"label": 52, "index": 6683, "code": "nums = list(map(int,input().split()))\na = nums[0]\nb = nums[1]\nc = nums[2]\nx = [i*a for i in range(100) if i*a % b == c ]\nif len(x) != 0 :\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 52, "index": 6684, "code": "# coding: utf-8\n# \u6574\u6570\u306e\u5165\u529b\n#a = int(raw_input())\n# \u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u306e\u6574\u6570\u306e\u5165\u529b\nimport numpy as np\nimport itertools\n\ndef gcd(x, y):\n    if x == y:\n        return x\n    elif x > y:\n        return gcd(x-y, y)\n    else:\n        return gcd(y-x, x)\n\nA, B, C = map(int, raw_input().split())\nif (C % gcd(A, B)) == 0:\n    print \"YES\"\nelse:\n    print \"NO\""}
{"label": 52, "index": 6685, "code": "A, B, C = map(int, raw_input().split())\n\nsample = 0\nc = []\nwhile True:\n    sample += A\n    if (sample % B) == C:\n        print(\"YES\")\n        break\n    if (sample % B) in c:\n        print(\"NO\")\n        break\n    c.append(sample % B)"}
{"label": 52, "index": 6686, "code": "a, b, c = [int(x) for x in input().split()]\n \ndef foo(a, b, c):\n    for i in range(1, b+1):\n        if (a*i)%b == c:\n            return \"YES\"\n    return \"NO\"\n    \nprint(foo(a, b, c))"}
{"label": 52, "index": 6687, "code": "import sys\nA , B , C = map(int, input().split())\n\nfor x in range(1,101):\n    for y in range(1,101):\n        if A*x % B*y == C:\n            print(\"YES\")\n            sys.exit()\nelse:\n    print(\"NO\")"}
{"label": 52, "index": 6688, "code": "A, B, C = map(int, input().split())\nfor i in range(A, A * B + 1, A):\n    if i % B == C:\n        print('YES')\n        exit()\nprint('NO')\n"}
{"label": 52, "index": 6689, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\nimport re\nimport math\nimport collections\nimport itertools\nimport functools\n\nDEBUG = True\nDEBUG = False\n\ndef dbg(*args):\n    if DEBUG:\n        print(\"DBG: \", file=sys.stderr, end=\"\")\n        print(*args, file=sys.stderr)\n\n\n\ndef main():\n    A, B, C = map(int, input().split())\n\n    for i in range(A, A*B+1, A):\n        if i % B == C:\n            print(\"YES\")\n            return\n\n    print(\"NO\")\n\nif __name__ == \"__main__\": main()\n"}
{"label": 52, "index": 6690, "code": "A, B, C = list(map(int, input().split()))\n\nmod_list = []\ni = 1\nwhile True:\n    mod = (A * i) % B\n    if mod in mod_list:\n        break\n    mod_list.append(mod)\n    i += 1\n\nif C in mod_list:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n\n\n"}
{"label": 52, "index": 6691, "code": "a,b,c = map(int,input().split())\nflag = 0\nfor i in range(b):\n\tif (a * i) % b == c:\n\t\tflag = 1\n\t\tbreak\nif flag == 0:\n\tprint(\"NO\")\nelse:\n\tprint(\"YES\")"}
{"label": 52, "index": 6692, "code": "# -*- coding: utf-8 -*-\nimport sys\n(A,B,C) = map(int,input().split(\" \"))\n\nfor i in range(B):\n    if (A*i) % B == C:\n        print('YES')\n        sys.exit()\nprint('NO')\n"}
{"label": 52, "index": 6693, "code": "def main():\n    A,B,C = map(int, input().split())\n\n    if C == 0:\n        print(\"YES\")\n        return\n\n    D = set()\n    for b in range(1, B):\n        D.add((A*b)%B)\n\n    if C in D:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n"}
{"label": 52, "index": 6694, "code": "\n\ndef solve():\n    for i in range(1, b+1):\n        if (a * i) % b == c:\n            print(\"YES\")\n            return \n    print(\"NO\")\n    return\n\nif __name__ == '__main__':\n    a, b, c = map(int, input().split())\n    if a == 1:\n        print(\"YES\")\n    else:\n        solve()"}
{"label": 52, "index": 6695, "code": "A, B, C = map(int, input().split())\n\njudge = 0\nfor i in range(B):\n    if C == A*i % B:\n        judge = 1\n\nif judge == 1:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 52, "index": 6696, "code": "a = map(int, raw_input().split(\" \"))\nA = a[0]\na[1]\na[2]\nb = []\n\nwhile True:\n    B = A % a[1]\n    if A >= a[1]:\n        if (B == a[2]):\n            print \"YES\"\n            quit()\n\n        if B in b:\n            print \"NO\"\n            quit()\n        else:\n            b.append(B)\n    A += a[0]\n"}
{"label": 52, "index": 6697, "code": "a, b, c = map(int,raw_input().split())\n\nm = []\nm.append(a % b)\nn = 2\nwhile(a * n % b not in m):\n    m.append(a * n % b)\n    n += 1\n\nif c not in m:\n    print(\"NO\")\nelse:\n    print(\"YES\")"}
{"label": 52, "index": 6698, "code": "def b():\n    a, b, c = map(int, input().split())\n    for i in range(2, b):\n        if a*i % b == c:\n            print('YES')\n            break\n    else: print('NO')\n\nb()"}
{"label": 52, "index": 6699, "code": "a,b,c = map(int,input().split())\nd=0\nfor i in range(b):\n  if a*i %b == c:\n    d+=1\nprint(\"NO\" if d==0 else \"YES\")"}
{"label": 52, "index": 6700, "code": "if __name__ == \"__main__\":\n    A, B, C = [int(i) for i in raw_input().split()]\n    flags = [False]*B\n    n = A % B\n    while True:\n        if flags[n] == True:\n            print \"NO\"\n            break\n        flags[n] = True\n        n = (n+A) % B\n        if flags[C] == True:\n            print \"YES\"\n            break"}
{"label": 52, "index": 6701, "code": "a, b, c = map(int, input().split())\nl = []\nfor i in range(b):\n    l.append((a * i) % b)\nif c in l:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 52, "index": 6702, "code": "#coding:utf-8\n\nif __name__ == \"__main__\":\n    A, B, C = map(int, raw_input().split(\" \"))\n\n    ans = \"NO\"\n    for k in range(1, B + 1):\n        if k * A % B == C:\n            ans = \"YES\"\n            break\n    print ans\n"}
{"label": 52, "index": 6703, "code": "abc = list(map(int, input().split()))\na = abc[0]\nb = abc[1]\nc = abc[2]\n\nfound = False\nfor i in range(1,b+1):\n    if i*a % b == c:\n        found = True\n        break\nif not found:\n    print(\"NO\")\nelse:\n    print(\"YES\")"}
{"label": 52, "index": 6704, "code": "a, b, c = map(int, input().split())\nflag = True\nfor i in range(b):\n    if ((i+1) * a) % b == c:\n        print('YES')\n        flag = False\n        break\nif flag:\n    print('NO')"}
{"label": 52, "index": 6705, "code": "def solve():\n  ar = raw_input().split(' ')\n  A = int(ar[0])\n  B = int(ar[1])\n  C = int(ar[2])\n\n  s = set([])\n  sum = 0\n  while True:\n    sum = sum + A\n    m = sum % B\n    #print 'sum=',sum,'m=',m\n    if (m == C): return 'YES'\n    if (m in s): return 'NO'\n    s.add(m)\n\nif __name__ == '__main__' :\n  print solve()"}
{"label": 52, "index": 6706, "code": "def main():\n    a, b, c = map(int, input().split())\n\n    flag = 1\n    comp = a\n    while comp <= a*b:\n        if comp%b == c:\n            print(\"YES\")\n            flag = 0\n            break\n        comp += a\n\n    if flag: print(\"NO\")\n\n\nif __name__ == \"__main__\":\n    main()"}
{"label": 52, "index": 6707, "code": "import sys\n\nA, B, C = map(int, raw_input().split())\n\nfor i in range(1, 101):\n    if C == 0 and (B * i % A) == 0 or \\\n            (C % A) == 0 and (B * i % A) == 0 or \\\n            (B * i % A) != 0 and (C % A) % (B * i % A) == 0:\n        print('YES')\n        sys.exit()\n\nprint('NO')\n"}
{"label": 52, "index": 6708, "code": "a, b, c = map(int, input().split(' '))\nmodlist = []\nresult = \"\"\nfor i in range(1, b + 1):\n    value = a * i\n    if value % b == c:\n        result = \"YES\"\n        break\n    if value % b not in modlist:\n        modlist.append(value % b)\n    else:\n        result = \"NO\"\n        break\nprint(result)\n"}
{"label": 52, "index": 6709, "code": "num = input()\nnum = num.split(\" \")\n\nfor i in range(3):\n    num[i] = int(num[i])\n\ntop = num[0] % num[1]\n\ni = 1\nn = ( i * num[0] ) % num[1]\nwhile True:\n\n    if n == num[2]:\n        print(\"YES\")\n        break\n\n    i +=1\n    n = ( i * num[0] ) % num[1]\n\n    if n == top:\n        print(\"NO\")\n        break\n"}
{"label": 52, "index": 6710, "code": "\n\na,b,c = map(int, input().split())\nrem = -1\nflag = False\nfor i in range(1, b):\n    rem = (a * i) % b\n    if rem == c:\n        flag = True\nif flag:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 52, "index": 6711, "code": "from sys import stdin\na,b,c = map(int, stdin.readline().split())\nans = 'NO'\nfor i in xrange(1000):\n if (i*a)%b==c:\n  ans = 'YES'\nprint ans"}
{"label": 52, "index": 6712, "code": "number = list(input().split())\n\nalist = []\nfor i in range(1,1000000000):\n    mod = int(number[0]) * i % int(number[1])\n    if mod == int(number[2]):\n        print(\"YES\")\n        break\n    if mod in alist:\n        print(\"NO\")\n        break\n    alist.append(mod)\n    "}
{"label": 52, "index": 6713, "code": "a, b, c = map(int, input().split())\n\namari = []\n\nfor i in range(0, 10000000):\n    d = a * i\n    if d % b == c:\n        print(\"YES\")\n        break\n\n    else:\n        if d % b not in amari:\n            amari.append(d % b)\n        else:\n            print(\"NO\")\n            break\n"}
{"label": 52, "index": 6714, "code": "#ABC060B\na,b,c=map(int,raw_input().split())\nres='NO'\nfor i in xrange(b+1):\n if (a*i)%b==c:\n  res='YES'\nprint res\n"}
{"label": 52, "index": 6715, "code": "A, B, C = map(int,input().split())\nlist=[]\nfor i in range(B):\n    list.append((i*A)%B)\nif C in list:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 52, "index": 6716, "code": "A, B, C = list(map(int, input().split()))\nfor i in range(1, B):\n\tif i * A % B == C:\n\t\tprint(\"YES\")\n\t\tquit()\nprint(\"NO\")"}
{"label": 52, "index": 6717, "code": "#!/usr/bin/python\n\nimport sys\n\ndef main(argv):\n    for line in sys.stdin:\n        a, b, c = map(lambda x: int(x), line.split(\" \", 3))\n        p = a % b\n        q = c % b\n\n        if p == q:\n            print(\"YES\")\n        elif p == 0:\n            print(\"NO\")\n        else:\n            candidates = []\n            i = 1\n            candidate = (i * a) % b\n            while not candidate in candidates:\n                if candidate == q:\n                    break\n                candidates.append(candidate)\n\n                i += 1\n                candidate = (i * a) % b\n\n            if candidate == q:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\nif __name__ == \"__main__\":\n    main(sys.argv)"}
{"label": 52, "index": 6718, "code": "A,B,C= [int(i) for i in input().split()]\n\nflag = 0\n\nfor i in range(B):\n    if(i==0):\n        continue\n\n    amari = (i * A) % B\n\n    if(amari == C):\n        flag = 1\n\nif(flag==1):\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 52, "index": 6719, "code": "# \u6700\u5927\u516c\u7d04\u6570\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n# \u6700\u5c0f\u516c\u500d\u6570\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\nif __name__ == \"__main__\":\n    input_list = list(map(int, input().split()))\n    a, b, c = input_list\n\n    result = False\n    lcm_of_ab = lcm(a, b)\n    for i in range(lcm_of_ab // a + 1):\n        if (not i):\n            continue\n\n        if (a * i) % b == c:\n            result = True\n            break\n\n    if result:\n        print(\"YES\")\n    else:\n        print(\"NO\")"}
{"label": 52, "index": 6720, "code": "a, b, c = map(int, raw_input().split())\nans = \"NO\"\n\nfor i in range(1, b+1):\n    if (a * i) % b == c:\n        ans = \"YES\"\n\nprint ans"}
{"label": 52, "index": 6721, "code": "num = map(int, raw_input().split())\nwhile(num[1] != 0):\n\ttmp = num[1]\n\tnum[1] = num[0] % num[1]\n\tnum[0] = tmp\nif(num[2] % num[0] == 0):\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")"}
{"label": 52, "index": 6722, "code": "A, B, C = map(int, input().split())\nres = \"NO\"\nfor i in range(1, B):\n    if (A * i) % B == C:\n        res = \"YES\"\n        break\nprint(res)"}
{"label": 52, "index": 6723, "code": "a, b, c = map(int, input().split())\n\nresult = \"NO\"\nfor i in range(1, 1000):\n    if a * i % b == c:\n        result = \"YES\"\n        break\nprint(result)\n"}
{"label": 52, "index": 6724, "code": "a,b,c = [int(i) for i in input().split()]\narr = set()\nret = \"NO\"\nr = a%b\nif r==0:\n    if c==0:\n        ret=\"YES\"\n    else:\n        pass\nelif r==1:\n    ret = \"YES\"\nelse:\n    rr = r\n    while not(rr in arr):\n        # print(arr,rr)\n        if rr <= c and (c-rr)%r == 0:\n            ret = \"YES\"\n            break\n        else:\n            arr.add(rr)\n            n = int((b-rr)/r)\n            n += 1 if (b-rr)%r != 0 else 0\n            rr = (n*r + rr)%b\n            # print(n,rr)\nprint(ret)\n\n"}
{"label": 52, "index": 6725, "code": "A = list(map(int,input().split(\" \")))\nB = 0\nfor i in range(100):\n    if (A[0]*(i + 1)) % A[1] == A[2]:\n        B = 1\n        break\nif B == 1:\n    print(\"YES\")\nelse:\n    print(\"NO\") "}
{"label": 52, "index": 6726, "code": "n = input()\ntmp_n = n.split(\" \")\n\na = tmp_n[0]\nb = tmp_n[1]\nc = tmp_n[2]\n\nflag=0\n\nfor i in range(0,100):\n    check = int(b)*i+int(c)\n    if check%int(a) == 0:\n        flag = 1\n\nif flag==1:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 52, "index": 6727, "code": "A,B,C=list(map(int, input().split()))\n\nfor i in range(100):\n    if (i+1)*A%B==C:\n        print('YES')\n        break\n    else:\n        if i==99:\n            print('NO')"}
{"label": 52, "index": 6728, "code": "a=map(int, raw_input().split())\n\ntime=a[0]\nans=0\n\nwhile time%a[1]!=0:\n  if time%a[1]==a[2]:\n    ans=1\n    break\n  time+=a[0]\n\nif ans==0:\n  print \"NO\"\nelse:\n  print \"YES\""}
{"label": 52, "index": 6729, "code": "a, b, c = input().split(' ')\na = int(a)\nb = int(b)\nc = int(c)\nflag = 0\nx = a%b\nfor i in range(1, 101):\n    if (x*i)%b == c:\n        flag=1\n        break\n\nif flag == 1:\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 52, "index": 6730, "code": "import sys\n\n# sys.stdin=open('b1.in')\n\na, b, c = map(int, input().split())\n\nres = 'NO'\nfor k in range(1, b + 1):\n    if k * a % b == c:\n        res = 'YES'\n        break\nprint(res)\n"}
{"label": 52, "index": 6731, "code": "A, B, C = map(int, input().split())\nloop = int(5050 / A)\nx = 0\nfor i in range(1, loop+1):\n    if A * i % B == C:\n        x += 1\n    else:\n        pass\n\nif x > 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 52, "index": 6732, "code": "A,B,C=map(int,input().split())\nans='NO'\nfor k in range(1000):\n  if A * k % B == C:\n    ans='YES'\nprint(ans)"}
{"label": 52, "index": 6733, "code": "A, B, C = map(int, input().split())\n\ndef check():\n    for i in range(1000000):\n        if (A * i) % B == C:\n            return 'YES'\n    return 'NO'\n    \nprint(check())\n"}
{"label": 52, "index": 6734, "code": "import sys\nimport math\n\nINF = 10**9+7\n\nstdin = sys.stdin\ndef na(): return map(int, stdin.readline().split())\ndef ns(): return stdin.readline().strip()\ndef nsl(): return list(stdin.readline().strip())\ndef ni(): return int(stdin.readline())\ndef nil(): return list(map(int, stdin.readline().split()))\n\ndef gcd(a, b):\n    if b == 0: return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n\treturn a * b // gcd(a, b)\n\na, b, c = nil()\n\nans = \"NO\"\n\nif c % (b/(lcm(a, b)/a)) == 0:\n    ans = \"YES\"\n\nprint(ans)"}
{"label": 52, "index": 6735, "code": "def solve(a, b):\n    c = a % b\n    if c == 0:\n        return b\n    else:\n        return solve(b, c)\n\n\nA, B, C = [int(i) for i in input().split()]\nz = 0\nnum = abs(A - B)\nif num == 0:\n    print('NO')\n    exit()\nelse:\n    num = solve(B, num)\nif C % num == 0:\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 52, "index": 6736, "code": "a, b, c = map(int, input().split())\n\namari = [False] * b\n\nfor i in range(1000):\n    if (a * i) % b == c:\n        print('YES')\n        break\n    elif amari[(a * i) % b]:\n        print('NO')\n        break\n\n    amari[(a * i) % b] = True"}
{"label": 52, "index": 6737, "code": "import sys\n\nA,B,C=map(int,raw_input().split(' '))\n\n#d=abs(A-B)\no=A\n\na=[]\n\nwhile not(A%B in a):\n    if A%B==C:\n        print \"YES\"\n        sys.exit()\n    a.append(A%B)\n    A+=o\n\nprint \"NO\"\n"}
{"label": 52, "index": 6738, "code": "i = input().split()\na = int(i[0])\nb = int(i[1])\nc = int(i[2])\n\nanswer = \"NO\"\ncount = a\n\nfor i in range(1,b+1):\n    if (i*a)%b==c:\n        answer = \"YES\"\n\n    \nprint(answer)\n\n"}
{"label": 52, "index": 6739, "code": "A, B, C = list(map(int, input().split()))\n\nflag = False\nfor i in range(B):\n    if A*i % B == C: flag = True\n\nif(flag):print(\"YES\")\nelse:print(\"NO\")"}
{"label": 52, "index": 6740, "code": "a,b,c = map(int, input().split())\nable = set()\nu = a%b\nable.add(u)\nv = (u + u) % b\nwhile v not in able:\n    able.add(v)\n    v = (v + u) % b\n\nif c in able:\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 52, "index": 6741, "code": "a, b, c = map(int, input().split())\ndef check(a, b, c):\n    for i in range(b):\n        if i * a % b == c:\n            return True\n    return False\nprint('YES' if check(a, b, c) else 'NO')\n"}
{"label": 52, "index": 6742, "code": "A,B,C=[int(i) for i in input().split()]\n\nfor i in range(B):\n    if A*(i+1)%B==C:\n        print('YES')\n        break\nelse:\n    print('NO')"}
{"label": 52, "index": 6743, "code": "a, b, c = map(int, raw_input().split())\n\nn = 0\nwhile n < 10**6:\n    if (n*a - c) % b == 0:\n        print \"YES\"\n        break\n    n += 1\nelse:\n    print \"NO\"\n"}
{"label": 52, "index": 6744, "code": "def read(): return list(map(int, input().split()))\n\na, b, c = read()\nx = 1\nfor i in range(1, 5000):\n    x = a * i\n    if x % b == c:\n        print(\"YES\")\n        exit(0)\n\nprint(\"NO\")"}
{"label": 52, "index": 6745, "code": "a, b, c = map(int, input().split())\n\nresult = \"NO\"\nfor i in range(1, 1000):\n    if a * i % b == c:\n        result = \"YES\"\nprint(result)\n"}
{"label": 52, "index": 6746, "code": "a,b,c=map(int,input().split())\ns=set()\nn=1\nwhile (a*n)%b not in s:\n    s.add((a*n)%b)\n    n += 1\nprint('YES' if c in s else 'NO')"}
{"label": 52, "index": 6747, "code": "A, B, C = map(int, raw_input().split())\n\nfor i in xrange(1, 1000):\n    if C == (A * i) % B:\n        print \"YES\"\n        exit()\nprint \"NO\"\n"}
{"label": 52, "index": 6748, "code": "A, B, C = map(int, input().split())\n\nM = set()\nnow = A % B\n\nwhile now not in M:\n    M.add(now)\n    now = (now + A) % B\n\nused = [False] * B\nstack = list(M)\nwhile stack:\n    x = stack.pop()\n    if used[x]:\n        continue\n    if x == C:\n        print(\"YES\")\n        break\n    used[x] = True\n    for m in M:\n        if not used[(x + m) % B]:\n            stack.append((x + m) % B)\nelse:\n    print(\"NO\")\n"}
{"label": 52, "index": 6749, "code": "a, b, c = map(int, input().split(\" \"))\n\n\nfor i in range(1, b):\n    if (a * i) % b == c:\n        print(\"YES\")\n        break\nelse:\n    print(\"NO\")\n"}
{"label": 52, "index": 6750, "code": "a, b, c = map(int, input().split())\nli = []\ni = 1\nwhile i >= 0:\n    ans = (a*i) % b\n    if ans == c:\n        print(\"YES\")\n        break\n    else:\n        al = ans in li\n        if al == True:\n            print(\"NO\")\n            break\n        else:\n            li.append(ans)\n    i += 1\n"}
{"label": 52, "index": 6751, "code": "from fractions import gcd\nA, B, C = map(int, raw_input().split())\nprint \"YES\" if (C % gcd(A, B) == 0) else \"NO\""}
{"label": 52, "index": 6752, "code": "A, B, C = map(int,input().split())\n\nX = False\n\nfor i in range(1,B+1):\n    if A*i%B == C:\n        X = True\n\nif X:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 52, "index": 6753, "code": "a, b, c = map(int,input().split(' '))\nn = 1\nmod = []\nwhile(True):\n    if (a * n) % b == c:\n        print(\"YES\")\n        break\n    else:\n        if (a * n) % b not in mod:\n            mod.append((a * n) % b)\n        else:\n            print(\"NO\")\n            break\n    n += 1\n"}
{"label": 52, "index": 6754, "code": "a,b,c = map(int,input().split())\nsum_all = 0\ncount = 0\nfor i in range(1,101):\n    if (a * i) % b == c:\n        print(\"YES\")\n        break\n    else:\n        count += 1\n        if count == 100:\n            print(\"NO\")\n            break\n"}
{"label": 52, "index": 6755, "code": "a, b, c = map(int, input().split())\n\nans = \"NO\"\n\nfor i in range(b):\n    if (a*(i+1))%b == c:\n        ans = \"YES\"\n    else:\n        pass\n\nprint(ans)  "}
{"label": 52, "index": 6756, "code": "input_str = input()\ninput = input_str.split(' ')\na = int(input[0])\nb = int(input[1])\nc = int(input[2])\nflag = False\nfor n in range(100):\n    if (n*a)%b == c:\n        flag = True\n\nif flag:\n    output = 'YES'\nelse:\n    output = 'NO'\n\nprint(output)"}
{"label": 52, "index": 6757, "code": "# nA = C mod B\n# 1 - B\n\n\nl = [int(x) for x in input().split(\" \")]\nA = l[0]\nB = l[1]\nC = l[2]\n\nfor n in range(1,B+1,1):\n\tif (n * A) % B == C:\n\t\tprint(\"YES\")\n\t\tquit()\n\nprint(\"NO\")"}
{"label": 52, "index": 6758, "code": "def main():\n    a,b,c = map(int, raw_input().split())\n    for i in xrange(b):\n        if a*(i+1)%b == c: break\n    else:\n        print 'NO'\n        return 0\n    print 'YES'\n    return 0\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 52, "index": 6759, "code": "# -*- coding: utf-8 -*-\nimport time\nA,B,C=[int(i) for i in input().split()]\nn=1\nts=time.time()\nwhile True:\n    if (A*n)%B==C:\n        print('YES')\n        break\n    if time.time()-ts>=1.8:\n        print('NO')\n        break\n    n+=1\n"}
{"label": 53, "index": 6760, "code": "N,T=map(int,input().split())\na=list(map(int,input().split()))\nans=T\nfor i in range(1,N):\n if a[i-1]+T > a[i]:\n  ans += a[i] - a[i-1] \n else:\n  ans += T\nprint (ans)"}
{"label": 53, "index": 6761, "code": "N, T = map(int, input().split())\nti = input().split()\n\nsum = T\nfor i in range(1, N):\n    if (int(ti[i]) - int(ti[i-1])) <= T:\n        sum += (int(ti[i]) - int(ti[i-1]))\n    else:\n        sum += T\n\nprint(sum)\n"}
{"label": 53, "index": 6762, "code": "N, T = map(int, input().split())\nt = list(map(int, input().split()))\n\nans = 0\nfor i in range(N - 1):\n    ans += min(t[i + 1] - t[i], T)\nans += T\n\nprint(ans)\n"}
{"label": 53, "index": 6763, "code": "N, T = list(map(int, input().split()))\nt_list = list(map(int, input().split()))\nsum_time = 0\nfor i in range(1, N):\n    t_delta = t_list[i] - t_list[i-1]\n    if t_delta > T:\n        sum_time += T\n    else:\n        sum_time += t_delta\n\nsum_time += T\n\nprint(sum_time)\n\n"}
{"label": 53, "index": 6764, "code": "# -*- coding: utf-8 -*-\nimport math\nimport sys\nimport itertools\nimport numpy as np\n\nn, t = map(int, input().split())\ntmp = list(map(int, input().split()))\na = np.array(tmp)\n\nret = t\nfor i in range(1, n):\n    if a[i] - a[i-1] <= t:\n        ret += a[i] - a[i-1]\n    else:\n        ret += t\n\nprint(ret)\n"}
{"label": 53, "index": 6765, "code": "N , T = map(int, input().split())\nt = [int(i) for i in input().split()]\n\nX = T\n\nfor i in range(1,N):\n    if t[i] - t[i-1] >= T:\n        X += T\n    else:\n        X += T - (T - (t[i] - t[i-1]))\n\nprint(X)"}
{"label": 53, "index": 6766, "code": "# -*- coding: utf-8 -*-\nN, T = map(int, raw_input().split())\nt = map(int, raw_input().split())\ntotal = 0\nfor k in range(0, N - 1):\n    if t[k + 1] - t[k] <= T:\n        total += t[k + 1] - t[k]\n    else:\n        total += T\ntotal += T\nprint total\n"}
{"label": 53, "index": 6767, "code": "def main():\n    N, T = map(int, input().split())\n    TN = tuple(map(int, input().split()))\n\n    i = 0\n    t = 0\n    while i < N - 1:\n        t += min(TN[i+1] - TN[i], T)\n        i += 1\n\n    print(t + T)\n\nmain()\n"}
{"label": 53, "index": 6768, "code": "def rren(): return list(map(int, input().split()))\n\nN, oyu = rren()\nT = rren()\n\nAns = 0\nfor i in range(N-1):\n    Ans += oyu if T[i+1] - T[i] >= oyu else T[i+1] - T[i]\n\nprint(Ans + oyu)"}
{"label": 53, "index": 6769, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\nimport re\nimport math\nimport collections\nimport itertools\nimport functools\n\nDEBUG = True\nDEBUG = False\n\ndef dbg(*args):\n    if DEBUG:\n        print(\"DBG: \", file=sys.stderr, end=\"\")\n        print(*args, file=sys.stderr)\n\n\n\ndef main():\n    N, T = map(int, input().split())\n    TS = list(map(int, input().split()))\n\n    X = 0\n    prev = TS[0]\n    for i in range(1, N):\n        now = TS[i]\n        X += min(now-prev, T)\n        prev = now\n    X += T\n\n    print(X)\n\nif __name__ == \"__main__\": main()\n"}
{"label": 53, "index": 6770, "code": "n, T = map(int, input().split())\nt = list(map(int, input().split()))\ntotal = T\nlastnum = 0\nfor i in t:\n    time = i - lastnum \n    if  T < time:\n        total += T\n    else:\n        total += time\n    lastnum = i\n    \nprint(total)"}
{"label": 53, "index": 6771, "code": "import sys\n\n# sys.stdin = open('c1.in')\n\nn, T = map(int, input().split())\nt = list(map(int, input().split()))\nres = 0\nt.append(10 ** 20)\nfor i in range(n):\n    dif = t[i + 1] - t[i]\n    if dif > T:\n        res += T\n    else:\n        res += dif\nprint(res)\n"}
{"label": 53, "index": 6772, "code": "n, t = map(int, input().split())\nt_l = [int(i) for i in input().split()]\n\ncost = t\n\nfor i in range(1, n):\n    cost += min(t, t_l[i] - t_l[i - 1])\nprint(cost)\n"}
{"label": 53, "index": 6773, "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n\nN,T = map(int,raw_input().split(\" \"))\nt = map(int,raw_input().split(\" \"))\nX = 0\nsum = 0\n\nif(N == 1):\n\tprint T\nelse:\n\tfor n in range(N-1):\n\t\tif(t[n+1]- t[n]<=T):\n\t\t\tX = t[n+1] + X - t[n]\n\t\telse:\n\t\t\tX = X + T\n\n\tX = X + T\n\n\tprint X"}
{"label": 53, "index": 6774, "code": "N,T = map(int,input().split())\ntau = list(map(int,input().split()))\nanswer = 0\ncont = 0\nfor i in range(N):\n\tif tau[i] < cont:\n\t\tdif = cont - tau[i]\n\t\tanswer += T - dif\n\telse:\n\t\tanswer += T\n\tcont =tau[i] + T\nprint(answer)\n"}
{"label": 53, "index": 6775, "code": "N, T = map(int,raw_input().split())\nt = map(int,raw_input().split())\nresult = 0\n\nfor i, v in enumerate(t):\n    if i == 0: continue\n    diff = v - t[i - 1]\n    if diff > T:\n        result += T\n    else:\n        result += diff\nresult += T\n\n\nprint result"}
{"label": 53, "index": 6776, "code": "n, t = map(int, input().split())\nti = list(map(int, input().split()))\nttl = t\nfor i in range(n-1):\n    ttl += min(ti[i+1]-ti[i], t)\nprint(ttl)\n"}
{"label": 53, "index": 6777, "code": "N,T = map(int,input().split())\nlast, time = 0,-T\nfor temp in map(int,input().split()):\n    if temp - last < T:\n        time += T - (temp - last)\n    last = temp\nprint(N*T-time)"}
{"label": 53, "index": 6778, "code": "#N,T\u306e\u53d6\u5f97\nl = list(map(int, input().split()))\nN = l[0]\nT = l[1]\n\n#\u79d2\u306e\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\ntl = list(map(int, input().split()))\n\nbt = 0 #\u76f4\u524d\u306e\u30b9\u30a4\u30c3\u30c1\u3092\u62bc\u3057\u305f\u6642\u9593\ngt = T #\u79d2\u6570\u7dcf\u548c\nfor t in tl[1:]:\n    if t - bt > T:\n        gt += T #\u30b9\u30a4\u30c3\u30c1\u30aa\u30d5\u306e\u6642\u306fT\u79d2\u8ffd\u52a0\n    else:\n        gt += t - bt #\u30b9\u30a4\u30c3\u30c1\u304c\u30aa\u30f3\u306e\u3068\u304d\u3001\u524d\u56de\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\u3092\u52a0\u7b97\n    bt = t\n        \n\nprint(str(gt))"}
{"label": 53, "index": 6779, "code": "N, T = [int(x) for x in input().split()]\nt = [int(x) for x in input().split()]\nans = 0\n\nfor i in range(N -1):\n\tif t[i + 1] -t[i] < T:\n\t\tans += t[i + 1] -t[i]\n\telse:\n\t\tans += T\nans += T\n\t\t\nprint(ans)"}
{"label": 53, "index": 6780, "code": "import sys\n\nn, t = [int(x) for x in sys.stdin.readline().split()]\na = [int(x) for x in sys.stdin.readline().split()]\ntotal = t\nfor i in range(n-1):\n\td = a[i+1] - a[i]\n\tif d <= t:\n\t\ttotal += d\n\telse:\n\t\ttotal += t\nprint(total)"}
{"label": 53, "index": 6781, "code": "# -*- coding: utf-8 -*-\n\nn,T = map(int, raw_input().split())\nt = map(int, raw_input().split())\ntotal_time = 0\nstop_time = 0\nfor i in range(n):\n    if(stop_time<=t[i]):\n        total_time += T\n    else:\n        total_time += t[i]-t[i-1]\n    stop_time = t[i]+T\n        \nprint (total_time)\n\n"}
{"label": 53, "index": 6782, "code": "def main():\n    N, T = map(int, input().split())\n    t = list(map(int, input().split()))\n    s, e = 0, 0\n    ans = 0\n    for i in range(N):\n        if t[i] <= e:\n            e = t[i] + T\n        else:\n            ans += e - s\n            s = t[i]\n            e = t[i] + T\n    ans += e - s\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 53, "index": 6783, "code": "N,T=map(int,input().split())\nt=list(map(int,input().split()))\n\ndef check(N,T,t):\n    counter=0\n    for i in range(N-1):\n        finish=t[i]+T\n        start=t[i+1]\n        #print(counter)        \n        if finish>start:\n            counter=counter+finish-start\n                 \n    return counter\nprint(N*T-check(N,T,t))"}
{"label": 53, "index": 6784, "code": "N, T = map(int, input().split())\nt = list(map(int, input().split()))\nsum = 0\nend = 0\nfor i in range(N):\n    sum += T - max(0, end - t[i])\n    end = t[i] + T\nprint(sum)"}
{"label": 53, "index": 6785, "code": "N, T = map(int, input().split())\nt = list(map(int, input().split()))\n\nw = 0\n\nfor i in range(len(t)-1):\n    if t[i+1]-t[i]<=T:\n        w+=t[i+1]-t[i]\n    else:\n        w+=T\n\nw+=T\n\nprint(w)"}
{"label": 53, "index": 6786, "code": "N, T = map(int, raw_input().split())\nt = map(int, raw_input().split())\n\nX = T\n\ndur = T\n\n# durs = map(\n\nfor i in range(0, N-1):\n    if t[i+1] - t[i] < T:\n        X += t[i+1] - t[i]\n    else:\n        X += T\n\nprint(X)\n"}
{"label": 53, "index": 6787, "code": "A = list(map(int,input().split(\" \")))\nB = list(map(int,input().split(\" \")))\nC = A[1]\nfor i in range(A[0]-1):\n    ii = i + 1\n    if B[ii] - B[i] < A[1]:\n        C = C + B[ii] - B[i]\n    else:\n        C = C +A[1]\nprint(C)"}
{"label": 53, "index": 6788, "code": "N, T = [int(n) for n in input().split()]\nt = [int(n) for n in input().split()]\n\nres = T\nfor i in range(1, N):\n  res += T\n  if t[i]-t[i-1] < T:\n    res -= t[i-1]+T-t[i]\nprint(res)"}
{"label": 53, "index": 6789, "code": "# -*- coding: utf-8 -*-\n# \u6574\u6570\u306e\u5165\u529b\nN, T= map(int, input().split())\nt=list(map(int, input().split()))\ncount=0\nfor j in range (0,N-1):\n  count+=min(T,t[j+1]-t[j])\nprint(count+T)"}
{"label": 53, "index": 6790, "code": "n, t = input().split()\nn = int(n)\nt = int(t)\n\na = [int(x) for x in input().split()]\nsum = 0\n\nfor i in range(1, n):\n    #print ('a[' + str(i) + '] = ' + str(a[i]))\n    if a[i] - a[i - 1] > t:\n        tmp = t\n    else:\n        tmp = a[i] - a[i - 1]\n    #print ('tmp = ' + str(tmp))\n    sum += tmp\nsum += t\nprint (sum)"}
{"label": 53, "index": 6791, "code": "N, T = map(int,input().split())\nt = list(map(int,input().split()))\n\nX = 0\nfor i in range(N-1):\n    sa = t[i+1] - t[i]\n    if sa < T:\n        X += sa\n    else:\n        X += T\n\nX += T\nprint(X)\n"}
{"label": 53, "index": 6792, "code": "# -*- coding: utf-8 -*-\n\nN, T = map(int, raw_input().split())\nans = 0\ntime = map(int, raw_input().split())\n\nans = 0\ntmp = 0\nstart = time[0]\nend = T\nfor t in time[1:]:\n    if end < t:\n        ans = ans + (end - start)\n        start = t\n        end = T + start\n    else:\n        end = t + T\n\nend = time[N-1] + T\nans = ans + (end - start)\n\nprint ans"}
{"label": 53, "index": 6793, "code": "N, T = map(int, input().split())\nt = list(map(int, input().split()))\ni = 0\nX = 0\n\nwhile i <= N-2:\n\tif t[i+1] - t[i] >= T:\n\t\tX += T\n\t\ti += 1\n\telse:\n\t\tX += t[i+1] - t[i]\n\t\ti += 1\n\nX += T\n\nprint(X)"}
{"label": 53, "index": 6794, "code": "N ,T =map(int,input().split())\nt = list(map(int,input().split()))\nans = 0\n\nfor i in range(1,N):\n    if t[i] - t[i-1] >=T:\n        ans += T\n    else:\n        ans += t[i] - t[i-1]\nans += T\n\nprint(ans)"}
{"label": 53, "index": 6795, "code": "N, T = map(int, input().split())\n\nt_list = [int(x) for x in input().split()]\n\ntotal = 0\nfor i in range(1, len(t_list)):\n    if t_list[i] - t_list[i-1] > T:\n        total += T\n    else:\n        total += t_list[i] - t_list[i-1]\ntotal += T\n\nprint(total)"}
{"label": 53, "index": 6796, "code": "n = input()\ntmp_n = n.split(\" \")\n\nN = tmp_n[0]\nT = tmp_n[1]\n\nnum = input()\ntmp_num = num.split(\" \")\n\nyu_interval = int(T)\nyu_fin = int(T)\nloss_time = 0\n\nfor i in range(int(N)):\n    if int(tmp_num[i]) <= yu_fin:\n        yu_fin = int(tmp_num[i]) + yu_interval\n    elif int(tmp_num[i]) > yu_fin:\n        loss_time += int(tmp_num[i])-yu_fin\n        yu_fin = int(tmp_num[i]) + yu_interval\n\nprint(yu_fin-loss_time)\n"}
{"label": 53, "index": 6797, "code": "N, T = map(int, raw_input().split())    \nt = map(int, raw_input().split())   \nans = 0\ncur = 0\nfor i in xrange(N - 1):\n    if t[i + 1] - t[i] > T:\n        ans += t[i] + T - cur\n        cur = t[i + 1]\nans += t[N - 1] + T - cur\nprint ans\n\n"}
{"label": 53, "index": 6798, "code": "NT = list(map(int, input().split()))\nN = NT[0]\nT = NT[1]\ndel NT\n\nt = list(map(int, input().split()))\n\nans = 0\nfor i in range(N-1):\n    l = t[i+1] - t[i]\n    if l <= T:\n        ans += l\n    else:\n        ans += T\nans += T\nprint(ans)"}
{"label": 53, "index": 6799, "code": "N, T = [int(i) for i in input().split(' ')]\nt = [int(i) for i in input().split(' ')]\nans = 0\n\nfor i in range(1,N):\n    if t[i]-t[i-1]<=T:\n        ans += t[i]-t[i-1]\n    else:\n        ans += T\nans += T\nprint(ans)"}
{"label": 53, "index": 6800, "code": "nt = list(map(int,input().split()))\nn = nt[0]\nt = nt[1]\np = list(map(int,input().split()))\nx = 0\nfor i in range(n-1):\n    sub = p[i+1] - p[i]\n    if sub < t:\n        x += sub\n    else:\n        x += t\nprint(x+t)"}
{"label": 53, "index": 6801, "code": "N, t = map(int, raw_input().split())\nn = map(int, raw_input().split())\ntotal = 0\nnext = t\nfor i in range(N-1):\n\tif(next < n[i+1]):\n\t\ttotal += t\n\t\tnext = n[i+1]+t\n\telse:\n\t\ttotal += n[i+1]-n[i]\n\t\tnext = n[i+1]+t\ntotal += t\nprint(total)"}
{"label": 53, "index": 6802, "code": "n, t = map(int, input().split())\na = [int(s) for s in input().split()]\ntotal = 0\nfor i in range(1, n):\n    total += min(t, a[i]-a[i-1])\ntotal += t\nprint(total)"}
{"label": 53, "index": 6803, "code": "N,T=list(map(int,input().split()));p=T;b=0\nfor t in map(int,input().split()):\n    if p<t:b+=t-p\n    p=t+T\nprint(p-b)"}
{"label": 53, "index": 6804, "code": "#!/usr/bin/python\n\nimport sys\n\ndef main(argv):\n    line = sys.stdin.readline()\n    while line:\n        n, t = map(lambda x: int(x), line.split(\" \", 2))\n        showers = map(lambda x: int(x), raw_input().split(\" \"))\n\n        water = 0\n        stop = 0\n        for shower in showers:\n            if stop > shower:\n                water -= (stop - shower)\n            water += t\n            stop = shower + t\n        print(water)\n\n        line = sys.stdin.readline()\n\nif __name__ == \"__main__\":\n    main(sys.argv)"}
{"label": 53, "index": 6805, "code": "N,T=map(int,input().split())\na=list(map(int,input().split()))\nans=T\nfor i in range(1,N):\n    if a[i-1]+T > a[i]:\n        ans += T - (a[i-1] + T -a[i])\n    else:\n        ans += T\n\nprint(ans)\n"}
{"label": 53, "index": 6806, "code": "N,T=[int(i) for i in input().split()]\nt_n=[int(i) for i in input().split()]\n\nans=T\nfor i in range(N-1):\n    if t_n[i+1]-t_n[i]<=T:\n        ans+=t_n[i+1]-t_n[i]\n    else:\n        ans+=T\nprint(ans)"}
{"label": 53, "index": 6807, "code": "import sys\n\nN, T = sys.stdin.readline().rstrip().split()\nt_list = sys.stdin.readline().rstrip().split()\n\nN = int(N)\nT = int(T)\nt_list = [int(x) for x in t_list]\n\nt_old = t_list[0]\nt_sum = T\nfor t in t_list:\n    t_diff = t - t_old\n\n    if t_diff >= T:\n        t_sum += T\n    else:\n        t_sum += t_diff\n\n    t_old = t\n\nprint(t_sum)\n"}
{"label": 53, "index": 6808, "code": "#ABC060C\n\nn,t=map(int,raw_input().split())\nl=map(int,raw_input().split())\nres=0\nfor i in xrange(1,n):\n res+=min(t,l[i]-l[i-1])\nres+=t\nprint res\n"}
{"label": 53, "index": 6809, "code": "def solve():\n  ar = raw_input().split(' ')\n  N = int(ar[0])\n  T = int(ar[1])\n  ar = raw_input().split(' ')\n  end = 0\n  count = 0\n  for i in range(N):\n    ti = int(ar[i])\n    if(ti < end) : count -= (end-ti)\n    end = ti + T\n    count += T\n  return count\n\nif __name__ == '__main__' :\n  print solve()"}
{"label": 53, "index": 6810, "code": "N , T = [int(i) for i in input().split()]\n\nt = [int(i) for i in input().split()]\n\nX = 0\nmae = 0\nfor i in t:\n    if(i == 0):\n        X = T\n        continue\n\n    gap = i - mae\n\n    if(gap < T):\n        X = X + gap\n    else:\n        X = X + T\n\n    mae = i\n\nprint(X)"}
{"label": 53, "index": 6811, "code": "\nN, T = map(int, input().split())\nt = list(map(int, input().split()))\n\n\nret = T\n\nfor i in range(1, N):\n    if t[i] - t[i -1] > T:\n        ret += T\n    else:\n        ret += (t[i] - t[i - 1])\n\nprint(ret)"}
{"label": 53, "index": 6812, "code": "data = input().split()\nN = int(data[0])\nT = int(data[1])\n\ndata = input().split()\nt = []\nfor i in range(N):\n\tt.append(int(data[i]))\n\nX = 0\nfor n in range(N-1):\n\tif((t[n+1] - t[n]) < T):\n\t\tX += t[n+1] - t[n]\n\telse:\n\t\tX += T\nX += T\n\nprint(X)\n"}
{"label": 53, "index": 6813, "code": "\nN,T = map(int, input().split())\nt = list(map(int,input().split()))\n\n\nX = 0\n\nfor i in range(N):\n    if i == 0:\n        continue\n    X = X + min(t[i]-t[i-1],T)\n\nX = X + T \nprint(X)\n"}
{"label": 53, "index": 6814, "code": "N,T = map(int,input().split())\ntimes = list(map(int,input().split()))\nans = T\nt1 = 0\nfor t2 in times:\n\tt = t2 - t1\n\tt1 = t2\n\tans = ans + min(t, T)\nprint(ans)"}
{"label": 53, "index": 6815, "code": "\nT = int(input().split(\" \")[1])\nt = [int(x) for x in input().split(\" \")]\nt.append(100000000000)\n\nret = 0\n\nfor i in range(len(t)-1):\n\tret += min(T,t[i+1] - t[i])\n\nprint(ret)"}
{"label": 53, "index": 6816, "code": "N,T = map(int,input().split())\nt=list(map(int,input().split()))\n\ndef count_time(N,T,t):\n    cnt = T\n    for i in range(N-1):\n        tt =t[i+1]-t[i]        \n        if tt <=T:\n            cnt += tt\n        else:\n            cnt += T\n    return cnt\n\nprint(count_time(N,T,t))"}
{"label": 53, "index": 6817, "code": "# coding: utf-8\nimport numpy as np\n\nif __name__ == \"__main__\":\n\tn, t = map(int, input().split())\n\ttn = list(map(int, input().split()))\n\n\tclusters = [[0, 0]]\n\tfor i in range(0, len(tn)-1):\n\t\tif tn[i+1] - tn[i] <= t:\n\t\t\tclusters[-1][1] = i+1\n\t\telse:\n\t\t\tclusters.append([i+1, i+1])\n\n\ttsum = 0\n\tfor s, e in clusters:\n\t\ttsum += tn[e] - tn[s] + t\n\n\tprint(tsum)\n"}
{"label": 53, "index": 6818, "code": "n, t = map(int, input().split())\nl = list(map(int, input().split()))\nl.append(10**11)\nans = 0\n\nfor i in range(n):\n    nex = l[i + 1] - l[i]\n    ans += min(nex, t)\n\nprint(ans)\n"}
{"label": 53, "index": 6819, "code": "n, t = map(int, input().split())\np = list(map(int, input().split()))\ntotal = t\nfor i in range(n - 1):\n    t2 = p[i + 1] - p[i]\n    total += min(t, t2)\nprint(total)\n"}
{"label": 53, "index": 6820, "code": "# -*- coding:utf-8 -*-\nN, T = map(int , input().split())\nt = list(map(int, input().split()))\nans = 0\nfor tmp in range(N):\n    if tmp == 0:\n        ans += T\n    else:\n        a = t[tmp] - t[tmp-1]\n        if a < T:\n            ans -= T-a\n        ans += T\nprint(ans)"}
{"label": 53, "index": 6821, "code": "NT = list(map(int,input().split()))\n\nt = list(map(int,input().split()))\n\n\nans = NT[0]*NT[1]\n\nfor i in range(len(t)-1):\n    if t[i+1]-t[i]<NT[1]:\n        ans -= NT[1]-t[i+1]+t[i]\nprint(ans)"}
{"label": 53, "index": 6822, "code": "n, t = (int(i) for i in input().split())\nb = [int(i) for i in input().split()]\nx = 0\nfor i in range(n-1):\n    if b[i+1] - b[i] < t:\n        x += (b[i+1] - b[i])\n    else:\n        x += t\nprint(x+t)"}
{"label": 53, "index": 6823, "code": "if __name__ == '__main__':\n    NT = input().split()\n    N = int(NT[0])\n    # print(N)\n    T = int(NT[1])\n    # print(T)\n    t = input().split()\n    s = 0\n    for k in range(N-1):\n        tmp = int(t[k+1]) - int(t[k])\n        if tmp > T:\n            s += tmp-T\n    print( int(t[N-1]) + T - s )"}
{"label": 53, "index": 6824, "code": "x = list(map(int, input().split()))\nN,T=x[0],x[1]\nt=list(map(int, input().split()))\noyu=0\n\nfor i in range(1,N):\n    if(t[i]-t[i-1]<T):\n        oyu += t[i]-t[i-1]\n    else:\n        oyu += T\n        \n\noyu += T\nprint(oyu)\nquit()"}
{"label": 53, "index": 6825, "code": "N, T = map(int, input().split())\ntn = map(int, input().split())\n\nprev = 0\nans = 0\nfor t in tn:\n    ans += min(T, t - prev + T)\n    prev = t + T\n    \nprint(ans)"}
{"label": 53, "index": 6826, "code": "# coding: utf-8 \nN,T = [int(i) for i in input().split(\" \")]\narray = input().split(\" \")\nans = 0\nfin = 0\nfor x in array:\n    time = int(x)\n    if time <= fin:\n        ans += (time + T - fin)\n    else:\n        ans += T\n    fin = time + T\nprint(ans)"}
{"label": 53, "index": 6827, "code": "n,T=list(map(int,input().split()))\nt=list(map(int,input().split()))\nsum=0\nfor i in range(n-1):\n    if t[i+1]-t[i]>=T:\n        sum+=T\n    else:\n        sum+=t[i+1]-t[i]\nsum+=T\nprint(sum)"}
{"label": 53, "index": 6828, "code": "n, t = map(int, input().split(' '))\ntlist = list(map(int, input().split(' ')))\n\nsum_time = 0\nfor i in range(1, len(tlist)):\n    delta = tlist[i] - tlist[i-1]\n    shower = delta if delta <= t else t\n    sum_time += shower\nsum_time += t\nprint(sum_time)\n"}
{"label": 53, "index": 6829, "code": "N,T = map(int,raw_input().split())\nt = map(int,raw_input().split())\nsum = 0\nfor n in range(N-1):\n    if t[n+1] - t[n] > T:\n        sum += T\n    else:\n        sum += t[n+1] - t[n]\nprint sum+T"}
{"label": 53, "index": 6830, "code": "### C - Sentou\nn,t = [ int(i) for i in input().split() ]\ntk = [ int(i) for i in input().split() ]\n\nx=0;\nfor i in range(n):\n    if i == n-1:\n        x += t\n    else:\n        x += min(t, tk[i+1] - tk[i])\n\nprint(x)"}
{"label": 53, "index": 6831, "code": "N, T = [int(x) for x in input().split()]\nTs = [int(x) for x in input().split()]\nsum = 0\nfor i in range(N):\n    if i == N-1:\n        sum += T\n    else:\n        sum += min(Ts[i+1]-Ts[i], T)\n\nprint(sum)\n"}
{"label": 53, "index": 6832, "code": "Tsum = 0\n\ncatch = input()\ncatch = catch.split(\" \")\nT = int(catch[1])\n\ncatch = input()\nt = catch.split(\" \")\n\nt2 = [0]\nfor i in range(1, len(t)):\n    t2.append(int(t[i]) - int(t[i-1]) )\n\nfor i in t2:\n\n    if i < T:\n        Tsum +=i\n\n    else:\n        Tsum +=T\n\nprint(Tsum + T)\n"}
{"label": 53, "index": 6833, "code": "X = 0\nN, T = map(int, input().split())\n\nt = list(map(int, input().split()))\n\nX = T\nfor i in range(1, N):\n    if t[i - 1] + T <= t[i]:\n        X += T\n    else:\n        X += T - (t[i - 1] + T - t[i])\n\nprint(X)\n"}
{"label": 53, "index": 6834, "code": "def main():\n    N, T = map(int, input().split())\n\n    t_list = [int(t) for t in input().split()]\n    sumv = T\n    ti_1 = 0\n    for ti in t_list[1:]:\n        if ti_1 + T <= ti:\n            sumv += T\n        else:\n            sumv += ti-ti_1\n        ti_1 = ti\n    print(sumv)\n\n\nif __name__ == \"__main__\":\n    main()"}
{"label": 53, "index": 6835, "code": "import math, itertools, collections, heapq\n\nn, t = map(int, input().split())\ntlist = list(map(int, input().split()))\n\nans = n * t\n\nfor i in range(n):\n        if i != 0:\n                dur = tlist[i] - tlist[i - 1]\n                if  dur < t:\n                        ans -= t - dur\nprint(ans)"}
{"label": 53, "index": 6836, "code": "# -*- coding: utf-8 -*-\n(N,T) = map(int,input().split(\" \"))\nt = list(map(int,input().split(\" \")))\n\ndiffs=0\nfor i in range(1,N):\n    diff = t[i] - t[i-1]\n    if diff < T:\n        diffs = diffs + T - diff\n\nprint(T*N-diffs)"}
{"label": 53, "index": 6837, "code": "N, T = map(int, input().split())\nt = list(map(int, input().split()))\n\nans = 0\nfor i in range(1, N):\n  if(t[i] - t[i-1] >= T): ans += T\n  else: ans += (t[i] - t[i-1])\n\n\nprint(ans + T)\n\n"}
{"label": 53, "index": 6838, "code": "n,t=map(int,input().split())\nhito=list(map(int,input().split()))\nans=n*t\nfor i in range(len(hito)-1):\n    if hito[i+1]-hito[i]<t:\n        ans-=t-(hito[i+1]-hito[i])\nprint(ans)\n"}
{"label": 53, "index": 6839, "code": "n,t = map(int, raw_input().split())\na = map(int, raw_input().split())\n\nprevx = ans = 0\nfor x in a:\n\tans += min(x,prevx+t) - prevx\n\tprevx = x\nans += t\nprint ans\n"}
{"label": 53, "index": 6840, "code": "a, b = map(int, raw_input().split(' '))\nc = map(int, raw_input().split(' '))\ns = 0\n\nfor i in range(len(c) - 1):\n\tt = b - (c[i + 1] - c[i])\n\ts += t if t > 0 else 0\n\nprint a * b - s"}
{"label": 53, "index": 6841, "code": "N, T = list(map(int, input().split()))\nt =  list(map(int, input().split()))\nans = N*T\nt.pop(0)   # start\u304c0\u306a\u306e\u5fd8\u308c\u3066\u305f\nfor i in range(len(t)):\n    if i == len(t) - 1:\n        break\n    t[len(t) - 1- i] -= t[len(t) - 2 - i]\nfor i in t:\n    if i < T:\n        ans -= T - i\nprint(ans)"}
{"label": 53, "index": 6842, "code": "#coding:utf-8\n\nif __name__ == \"__main__\":\n    N, T = map(int, raw_input().split(\" \"))\n    t_list = map(int, raw_input().split(\" \"))\n\n    total = 0\n    for i in range(1, N):\n        sub = t_list[i] - t_list[i - 1]\n\n        if sub > T:\n            total += T\n        else:\n            total += sub\n\n    total += T\n    print total\n"}
{"label": 53, "index": 6843, "code": "n, t = map(int, input().split())\nts = map(int, input().split())\nx = 0\nout = False\nt_sw = 0\nt_last = 0\nfor ti in ts:\n    if out and t_sw > ti:\n        t_sw = ti + t\n    elif out and t_sw <= ti:\n        x += t_sw - t_last\n        out = False\n    if not out:\n        t_last = ti\n        t_sw = t_last + t\n        out = True\nif out:\n    x += t_sw - t_last\nprint(x)\n"}
{"label": 53, "index": 6844, "code": "# coding: utf-8\n# \u6574\u6570\u306e\u5165\u529b\n#a = int(raw_input())\n# \u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u306e\u6574\u6570\u306e\u5165\u529b\nimport numpy as np\nimport itertools\n\nN, T = map(int, raw_input().split())\nTimings = map(int, raw_input().split())\n\nTotalTime = 0\nbeforeTime = 0\nfor i in range(N):\n    if (Timings[i] - beforeTime) > T or i == 0:\n        TotalTime += T\n    else:\n        TotalTime += Timings[i] - beforeTime\n    beforeTime = Timings[i]\n\nprint TotalTime"}
{"label": 53, "index": 6845, "code": "N,T = [int(i) for i in input().split(\" \")]\nt = [int(i) for i in input().split(\" \")]\nans = T\nfor i in range(N-1):\n    r = t[i+1] - t[i]\n    if r >= T :\n        ans += T\n    else :\n        ans += r\nprint(ans)"}
{"label": 53, "index": 6846, "code": "a,b=map(int,input().split())\nk=list(map(int,input().split()))\n\ntime=b\nfor i in range(a-1):\n    tc=k[i+1]-k[i]\n    if tc<b:\n        time = time+tc\n    else:\n        time=time+b\nprint(time)"}
{"label": 53, "index": 6847, "code": "num,time = map(int, input().split())\ntimes = [int(n) for n in input().split()]\nstop = time\ntotal = 0\nfor i in range(1,num):\n    if times[i]<=stop:\n        total += times[i]-times[i-1]\n    else:\n        total += stop-times[i-1]\n    stop = times[i]+time\ntotal += time\nprint(total)\n"}
{"label": 53, "index": 6848, "code": "import numpy as np\n\nN, T = map(int, input().split())\n\nt_ary = input().split()\nt_ary = np.array([int(e) for e in t_ary])\n\ndiff_ary = t_ary[1:] - t_ary[:-1]\n\n#print(diff_ary < T)\n#print(diff_ary)\n\ntf_ary = diff_ary < T\n\ntotal = 0\nfor i, flag in enumerate(tf_ary):\n    if flag:\n        total += diff_ary[i]\n    else:\n        total += T\n\ntotal += T\n\nprint(total)"}
{"label": 53, "index": 6849, "code": "N, T = input().split(' ')\nN = int(N)\nT = int(T)\nx = [i for i in range(N+1)]\nt = input()\ncnt = 0\nfor ti in t.split(' '):\n    x[cnt] = int(ti)\n    cnt += 1\nx[cnt] = -1\nans = 0\nprev = -1\nfor ti in x:\n    if ti == -1:\n        ans += T\n    elif prev != -1:\n        if ti-prev > T:\n            ans += T\n        else:\n            ans += ti-prev\n    prev = ti\nprint (ans)\n"}
{"label": 53, "index": 6850, "code": "\n\ndef solve():\n    timer = 0\n    count = 0\n    ans = 0\n    while (count < n):\n        diff = timer - ti[count]\n        timer = ti[count] + t\n        if 0 < (diff) < t:\n            ans += t - diff\n        else:\n            ans += t\n        count += 1\n    print(ans)\n\nif __name__ == '__main__':\n    n, t = map(int, input().split())\n    ti = list(map(int, input().split()))\n    solve()"}
{"label": 53, "index": 6851, "code": "N,T=map(int,raw_input().split())\nt=map(int,raw_input().split())\n\ntime=0\ntotal=0\n\nfor i in t:\n    if i < time:\n        total += i+T-time\n        time = i+T\n    else:\n        total += T\n        time = i+T\n\nprint total"}
{"label": 53, "index": 6852, "code": "N, T = map(int, raw_input().split())\nt = map(int, raw_input().split())\n\nresult = T\nfor i in range(1, N):\n    result += T\n    if (t[i] - t[i - 1]) < T:\n        result -= (T - (t[i] - t[i - 1]))\nprint(result)"}
{"label": 53, "index": 6853, "code": "n, T = [int(i) for i in input().split()]\nt = [int(i) for i in input().split()]\n\n# print(n, T, t)\n\nsum = 0\n\nfor i in range(1,n):\n    interval = t[i] - t[i-1]\n    if interval < T:\n        sum += interval\n    else:\n        sum += T\n\nsum += T\n\nprint(sum)\n"}
{"label": 53, "index": 6854, "code": "n, t = map(int, input().split())\npush = list(map(int, input().split()))\nans = 0\nfor i in range(n - 1):\n    if push[i + 1] - push[i] >= t:\n        ans += t\n    else:\n        ans += push[i + 1] - push[i]\nans += t\nprint(ans)\n"}
{"label": 53, "index": 6855, "code": "\nN, T = map(int, input().split())\nt = list(map(int, input().split()))\nsum = 0\nend = 0\nfor i in range(N):\n    sum += T - max(0, end - t[i])\n    end = t[i] + T\n\nprint(sum)\n\n"}
{"label": 53, "index": 6856, "code": "N, T = map(int, input().split())\nt = [int(i) for i in input().split()]\nsec = 0\n\nfor i in range(len(t)-1):\n    if t[i+1] - t[i] > T:\n        sec += T\n    else:\n        sec += t[i+1] - t[i]\nsec += T\nprint(sec)\n"}
{"label": 53, "index": 6857, "code": "n,t = map(int, raw_input().split())\nl = map(int, raw_input().split())\nret = t\nfor i in range(1,n):\n    if l[i] - l[i-1] >= t:\n        ret += t\n    else:\n        ret += l[i] - l[i-1]\nprint ret\n"}
{"label": 53, "index": 6858, "code": "N, T = map(int, input().split())\n\npushed_time = list(map(int, input().split()))\nperiod = [pushed_time[0], pushed_time[0] + T]\n# \u4eca\u6d41\u308c\u3066\u3044\u308b\u304a\u6e6f\u306e [\u51fa\u59cb\u3081\u305f\u6642\u523b, \u6b62\u307e\u308b\u6642\u523b]\nduration = 0\n\nfor t_i in pushed_time[1:]:\n    if t_i <= period[1]: # \u304a\u6e6f\u304c\u6b62\u307e\u308b\u524d\u306b\u6b21\u306e\u4eba\u304c\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u306a\u3089\u3070\n        period[1] = t_i + T # \u304a\u6e6f\u304c\u6b62\u307e\u308b\u6642\u523b\u306f {\u62bc\u3057\u305f\u6642} + T \u306b\u306a\u308b\n    else:\n        duration += period[1] - period[0]\n        # \u304a\u6e6f\u304c\u6b62\u307e\u308b\u3002\u6b62\u307e\u308b\u307e\u3067\u306e\u6642\u9593\u3092\u304a\u6e6f\u304c\u51fa\u3066\u3044\u305f\u7dcf\u6642\u9593\u306b\u52a0\u7b97\n        period = [t_i, t_i + T] # \u6b21\u306e\u533a\u9593\u304c\u59cb\u307e\u308b\nduration += period[1] - period[0]\n\nprint(duration)\n"}
{"label": 53, "index": 6859, "code": "N, T = map(int, input().split())\nt = list(map(int, input().split()))\n\nsum = 0\nstart = t[0]\nend = t[0] + T\n\nfor i in range(N - 1):\n    if end >= t[i + 1]:\n        sum += t[i + 1] - start\n        start = t[i + 1]\n        end = t[i + 1] + T\n    else:\n        sum += end -start\n        start = t[i + 1]\n        end = t[i + 1] + T\n\nsum += end - start\n\nprint(sum)\n"}
{"label": 53, "index": 6860, "code": "#N,T\u306e\u53d6\u5f97\nl = list(map(int, input().split()))\nN = l[0]\nT = l[1]\n\n#\u79d2\u306e\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\ntl = list(map(int, input().split()))\n\nsw = 0 #\u30b9\u30a4\u30c3\u30c1\u30aa\u30f3\u30aa\u30d5\u306e\u7ba1\u7406\nbt = 0 #\u76f4\u524d\u306e\u30b9\u30a4\u30c3\u30c1\u3092\u62bc\u3057\u305f\u6642\u9593\ngt = 0 #\u79d2\u6570\u7dcf\u548c\nfor i, t in enumerate(tl):\n    if sw == 1 and t - bt > T:\n        sw = 0 #\u5168\u5feb\u30b9\u30a4\u30c3\u30c1\u3092\u62bc\u3057\u3066\u304b\u3089T\u79d2\u7d4c\u904e\u3057\u3066\u3044\u305f\u3089\u3001\u30b9\u30a4\u30c3\u30c1\u30aa\u30d5\n    if sw == 0:\n        gt += T #\u30b9\u30a4\u30c3\u30c1\u30aa\u30d5\u306e\u6642\u306fT\u79d2\u8ffd\u52a0\n    else:\n        gt += t - bt  #\u30b9\u30a4\u30c3\u30c1\u304c\u30aa\u30f3\u306e\u3068\u304d\u3001\u524d\u56de\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\u3092\u52a0\u7b97\n    bt = t\n    sw = 1 #\u30b9\u30a4\u30c3\u30c1\u30aa\u30f3\u3002\n        \n\nprint(str(gt))"}
{"label": 53, "index": 6861, "code": "if __name__ == '__main__':\n    N, T = map(int, input().split())\n    ts = list(map(int, input().split()))\n    \n    \namount =0\n\n\n    \nfor index in range(N-1):\n    t_sub = ts[index+1]-ts[index]\n    amount+=min(t_sub,T)\n\n        \namount +=T\n\nprint(amount)"}
{"label": 53, "index": 6862, "code": "def sentou(NT, ts):\n    N, T = map(int, NT.split())\n    before_oshitano = None\n    total_s = 0\n    for t in map(int, ts.split()):\n        if before_oshitano is None:\n            before_oshitano = t\n            continue\n        elif T > (t - before_oshitano):\n            total_s += t - before_oshitano\n        else:\n            total_s += T\n        before_oshitano = t\n    total_s += T\n\n    print(total_s)\n\n\n# sentou(\"9 10\", \"0 3 5 7 100 110 200 300 311\")\nsentou(input(), input())\n"}
{"label": 53, "index": 6863, "code": "ini=map(int,raw_input().split())\na=map(int,raw_input().split())\n\nsum=0\n\nfor i in range(ini[0]):\n  if a[i]==0:\n    pass\n  else:\n    if a[i]-a[i-1]>=ini[1]:\n      sum+=ini[1]\n    else:\n      sum+= a[i]-a[i-1]\n\nsum+=ini[1]\n\nprint sum"}
{"label": 53, "index": 6864, "code": "n, T = map(int,raw_input().split())\nt = map(int,raw_input().split())\nmt = 0\nfor i in range(1, n):\n    if t[i] - t[i - 1] > T:\n        mt += t[i] - t[i - 1] - T\nprint t[n-1] + T - mt"}
{"label": 53, "index": 6865, "code": "N, T = list(map(int, input().split())); p = b = 0\nfor t in map(int, input().split()):\n    if p + T < t: b += (t - (p + T))\n    p = t\nprint(T + p - b)"}
{"label": 53, "index": 6866, "code": "#\u5165\u529b\u90e8\nN,T = map(int,input().split())\nt_list = list(map(int,input().split()))\n#\u51e6\u7406\u90e8\nT_sum = 0\nfor i in range(N-1):\n    if t_list[i+1]-t_list[i] < T:\n        T_sum += t_list[i+1]-t_list[i]\n    else:\n        T_sum += T\nT_sum += T\nprint(T_sum)"}
{"label": 53, "index": 6867, "code": "N,T = map(int,input().split())\nt = list(map(int,input().split()))\non_t=0\nall_t=0\nfor i in range(1,N):\n    d = t[i]-t[i-1]\n    if T>=d:\n        on_t += d\n        all_t += d\n    else:\n        on_t += T\n        all_t += d\non_t += T\nprint(on_t)"}
{"label": 53, "index": 6868, "code": "N, T = map(int, input().split())\nlist_t = list(map(int, input().split()))\n\ntotal_emp_T = 0\nts = T\nfor t in list_t[1:]:\n    if t > ts:\n        total_emp_T += t - ts\n    ts = t + T\nans = ts  - total_emp_T\nprint(ans)\n\n    \n"}
{"label": 53, "index": 6869, "code": "N, T = input().split(' ')\nN = int(N)\nT = int(T)\nx = [i for i in range(N+1)]\nt = input()\ncnt = 0\nfor ti in t.split(' '):\n    x[cnt] = int(ti)\n    cnt += 1\nx[cnt] = -1\nans = 0\nprev = -1\n\nfor ti in x:\n    if ti == -1:\n        ans += T\n    elif prev == -1:\n        prev = ti\n    else:\n        if ti-prev > T:\n            ans += T\n        else:\n            ans += ti-prev\n\n    prev = ti\n\nprint (ans)\n"}
{"label": 53, "index": 6870, "code": "N, T = list(map(int, input().split()))\nt = list(map(int, input().split()))\nans = 0\nend = 0\nfor tt in t:\n\tdiff = 0 if end <= tt else end - tt\n\tans += T - diff\n\tend = tt + T\nprint(ans)\n"}
{"label": 53, "index": 6871, "code": "import sys\nimport math\n\nINF = 10**9+7\n\nstdin = sys.stdin\ndef na(): return map(int, stdin.readline().split())\ndef ns(): return stdin.readline().strip()\ndef nsl(): return list(stdin.readline().strip())\ndef ni(): return int(stdin.readline())\ndef nil(): return list(map(int, stdin.readline().split()))\n\nN, T = nil()\n\nt = nil()\n\ns = 0\n\nfor i in range(0, len(t)-1):\n    f = T - (t[i+1] - t[i])\n    if f > 0:\n        s += f\n\nprint(N*T - s)\n"}
{"label": 53, "index": 6872, "code": "N,T=list(map(int, input().split()))\nt=[0]*N\nt=list(map(int, input().split()))\n\nS=T\n\nfor i in range(N-1):\n    if t[i+1]-t[i]>T:\n        S=S+T\n    else:\n        S=S+(t[i+1]-t[i])\n\nprint(S)"}
{"label": 53, "index": 6873, "code": "N, T = map(int, raw_input().split())\nt = map(int, raw_input().split())\n\ntotal = T\nfor idx in range(N-1):\n    if t[idx+1] - t[idx] <= T:\n        total += t[idx+1] - t[idx]\n    else:\n        total += T\nprint total"}
{"label": 53, "index": 6874, "code": "#! -*- coding:utf-8 -*-\nN,T = map(int,input().split())\nt = input()\n\nt = t.split()\nfor i in range(len(t)):\n    t[i] = int(t[i])\n\ntotal = 0\nfor i in range(len(t)-1):\n    if t[i+1] - t[i] >= T:\n        total += T\n    else:\n        total += t[i+1] - t[i]\ntotal += T\nprint(total)"}
{"label": 53, "index": 6875, "code": "#N,T\u306e\u53d6\u5f97\nN,T = map(int, input().split())\n#\u79d2\u306e\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\ntl = list(map(int, input().split()))\n\nbt = 0 #\u76f4\u524d\u306e\u30b9\u30a4\u30c3\u30c1\u3092\u62bc\u3057\u305f\u6642\u9593\ngt = T #\u79d2\u6570\u7dcf\u548c\nfor t in tl[1:]:\n    if t - bt > T:\n        gt += T #\u30b9\u30a4\u30c3\u30c1\u30aa\u30d5\u306e\u6642\u306fT\u79d2\u8ffd\u52a0\n    else:\n        gt += t - bt #\u30b9\u30a4\u30c3\u30c1\u304c\u30aa\u30f3\u306e\u3068\u304d\u3001\u524d\u56de\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\u3092\u52a0\u7b97\n    bt = t\n\nprint(str(gt))"}
{"label": 53, "index": 6876, "code": "N, T = map(int, input().split(\" \"))\nt = list(map(int, input().split(\" \")))\n\nshower = 0\n\nfor i in range(0, N-1):\n    if t[i+1]-t[i] >= T:\n        shower += T\n    else:\n        shower += t[i+1]-t[i]\n\nshower += T\nprint(shower)\n"}
{"label": 53, "index": 6877, "code": "def main():\n    N, T = map(int, input().split())\n    t = list(map(int, input().split()))\n\n    total = T\n    for n in range(1, N):\n        if t[n] < t[n-1] + T:\n            total += (t[n]+T) - (t[n-1]+T)\n        else:\n            total += T\n\n    print(total)\n\n\nif __name__ == \"__main__\":\n    main()\n"}
{"label": 53, "index": 6878, "code": "#coding=UTF-8\n\nmozir=input()\nhyo=mozir.split(' ')\nN=int(hyo[0])\nT=int(hyo[1])\n\nmozir=input()\nhyo=mozir.split(' ')\nt=[ int(mono) for mono in hyo]\n\nX=0\n\nhazimetime=None\nowaritime=None\nfor hito in t:\n    #\u6642\u9593\u6e05\u7b97\n    if owaritime != None:\n        if owaritime > hito:\n            X=X+(hito-hazimetime)\n        else:\n            X=X+T\n        \n    #\u62bc\u3059\u51e6\u7406\n    hazimetime=hito\n    owaritime=hito+T\n\n\n#\u6700\u5f8c\u306e\u4eba\u306e\u51e6\u7406\nX=X+T\nprint(X)\n"}
{"label": 53, "index": 6879, "code": "# coding: utf-8\n\nn,t = [int(x) for x in input().rstrip().split(\" \")]\npush_times = [int(x) for x in input().rstrip().split(\" \")]\n\ntotal_duration = 0\n\nfor i in range(len(push_times)):\n    if i == len(push_times) - 1:\n        total_duration = total_duration + t\n        break\n\n    time_diff = (push_times[i+1] - push_times[i])\n    if time_diff > t:\n        total_duration = total_duration + t\n    elif time_diff <= t:\n        total_duration = total_duration + time_diff\n\nprint(total_duration)\n"}
{"label": 53, "index": 6880, "code": "# -*- coding: utf-8 -*-\n\n#-------\n# Initialize\n\nN,T = map(int, input().split())\nt = list(map(int, input().split()))\nans = T\n\n#-------\n# Do\nfor i in range(len(t)-1):\n    ans += min(T, t[i+1] - t[i])\n\n#-------\n# Output\nprint(ans)\n"}
{"label": 53, "index": 6881, "code": "N,T = map(int,input().split())\norder = list(map(int,input().split()))\nov = 0\nfor i in range(N-1):\n    if (order[i+1]-order[i])<T:\n        ov += T-(order[i+1]-order[i])\nprint(N*T-ov)"}
{"label": 53, "index": 6882, "code": "N, T = map(int, input().split())\nt = list(map(int, input().split()))\n\nans = T\nfor i in range(N-1):\n  now = t[i+1] - t[i]\n  ans += min(now, T)\n\nprint(ans)\n"}
{"label": 53, "index": 6883, "code": "N, T = [int(i) for i in input().split()]\nt = [int(i) for i in input().split()]\nx = T\nfor i in range(1, N):\n    if t[i]-t[i-1] < T:\n        x += T - abs(T - (t[i] - t[i - 1]))\n    else:\n        x += T\nprint(x)"}
{"label": 53, "index": 6884, "code": "\n# -*- coding: utf-8 -*-\nN,T=[int(i) for i in input().split()]\nt=[int(i) for i in input().split()]\ns=0\nfor i in range(N-1):\n   s+=max((t[i]+T-t[i+1],0))\nprint(T*N-s)"}
{"label": 53, "index": 6885, "code": "# coding: utf-8\n\nn, t = map(int, raw_input().split())\nti_list = map(int, raw_input().split())\nti = ti_list.pop(0)\ntotal = t\n\nfor ti_plus1 in ti_list:\n    total += min(ti_plus1-ti, t)\n    ti = ti_plus1\n\nprint total\n"}
{"label": 53, "index": 6886, "code": "##N T\n#t1 t2 ... tN\nN, T = map(int,input().split())\na = list(map(int, input().split()))\nb = []\nzo  = [0, T]\nleng = T\n\"\"\"\nd = set()\nfor i in range(N):\n    d = d | set(range(a[i], a[i] + T))\n\"\"\"\nfor i in range(N):\n    if  a[i] + T <= zo[1]:\n        pass\n    elif a[i] <= zo[1] and zo[1] <= a[i] + T:\n        leng += a[i] + T - zo[1]\n        zo[1] = a[i] + T\n    elif zo[1] <= a[i]:\n        zo[0] = a[i]\n        zo[1] = a[i] + T\n        leng += T\n\n\n\n\n\n\nprint(leng)"}
{"label": 53, "index": 6887, "code": "N, Y = map(int, input().split())\nt = list(int (i) for i in input().split())\nw=0\nfor i in range(len(t)-1):\n    if t[i+1]-t[i]<=Y:\n        w+=t[i+1]-t[i]\n    else:\n        w+=Y\nw+=Y\nprint(w)"}
{"label": 53, "index": 6888, "code": "N, T = map(int, raw_input().split())\nTL = map(int, raw_input().split())\n\ne = 0\nans = 0\nfor t in TL:\n    ans += min(t + T - e, T)\n    e = T + t\nprint ans\n"}
{"label": 53, "index": 6889, "code": "n,t = map(int,input().split())\narr=list(map(int,input().split()))\ntotal=0\nfor i in range(1,n):\n    if arr[i]-arr[i-1]<t:\n        total+=arr[i]-arr[i-1]\n    else:\n        total+=t\ntotal+=t\nprint(total)\n"}
{"label": 54, "index": 6890, "code": "def main():\n    A, B, C = list(map(int, input().strip().split()))\n    answer = \"No\"\n    if A <= C <= B:\n        answer = \"Yes\"\n    print(answer)\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 54, "index": 6891, "code": "A, B, C = map(int, input().split())\n\n\nif A <= C <= B:\n    print('Yes')\nelse:\n    print(\"No\")"}
{"label": 54, "index": 6892, "code": "# -*- coding: utf-8 -*-\nx=input()\ny=[]\ny=x.split(\" \")\n\nif int(y[2])>=int(y[0]) and int(y[2])<=int(y[1]):\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n\t\n"}
{"label": 54, "index": 6893, "code": "# -*- coding: utf-8 -*-\nA, B, C = map(int, raw_input().split()) \nprint \"Yes\" if A <= C <= B else \"No\"\n"}
{"label": 54, "index": 6894, "code": "a,b,c = map(int,input().split())\n\nif(a<=c and c <= b):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 54, "index": 6895, "code": "A, B, C = map(int, raw_input().split())\n \nprint \"Yes\" if A <= C <= B else \"No\"\n"}
{"label": 54, "index": 6896, "code": "a, b, c = [int(x) for x in input().split()]\n \nif c < a or c > b:\n    print(\"No\")\nelse:\n    print(\"Yes\")\n"}
{"label": 54, "index": 6897, "code": "#ABC061A\n\na,b,c=map(int,raw_input().split())\nif a<=c and c<=b:\n print 'Yes'\nelse:\n print 'No'\n"}
{"label": 54, "index": 6898, "code": "A,B,C = map(int, input().split())\nif (A<=C)and(C<=B):\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 54, "index": 6899, "code": "a, b, c = map(int, input().split())\n\nif a <= c <= b:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 54, "index": 6900, "code": "#coding:utf-8\n\ninput_lines = raw_input().split()\nn = map(int,input_lines)\n\nif n[0] <= n[2] and n[2]<=n[1]:\n    print \"Yes\"\nelse:\n    print \"No\""}
{"label": 54, "index": 6901, "code": "a, b, c = map(int, input().split())\n\nif a <= c <= b:\n    print('Yes')\nelse:\n    print('No')\n"}
{"label": 54, "index": 6902, "code": "a,b,c = map(int,input().split())\n\nif a<=c and c<=b:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 54, "index": 6903, "code": "A, B, C = map(int, input().split())\nif C >= A and C <= B:\n    print('Yes')\nelse:\n    print('No')"}
{"label": 54, "index": 6904, "code": "table = input().split()\nA,B,C = int(table[0]),int(table[1]),int(table[2])\nif A <= C and C<= B:\n    print('Yes')\nelse:\n    print('No')"}
{"label": 54, "index": 6905, "code": "A,B,C=list(map(int,input().split()))\nprint(['No','Yes'][A<=C<=B])"}
{"label": 54, "index": 6906, "code": "a = input()\nb = a.split()\nb[0], b[1], b[2] = int(b[0]), int(b[1]), int(b[2])\n\nif b[2] >= b[0] and b[2] <= b[1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 54, "index": 6907, "code": "A, B, C = map(int, input().split())\n\nif A<=C and C<=B:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 54, "index": 6908, "code": "a,b,c = map(int,input().split())\nif a <= c and c <= b:\n  print('Yes')\nelse:\n  print('No')"}
{"label": 54, "index": 6909, "code": "A, B, C = map(int, input().split())\nprint('Yes' if A <= C and C <= B else 'No')"}
{"label": 54, "index": 6910, "code": "a, b, c = list(map(int, input().split()))\nif a <= c <= b:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 54, "index": 6911, "code": "a,b,c=list(map(int,input().split(\" \")))\n\nif c>=a and c<=b:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 54, "index": 6912, "code": "a,b,c = map(int,input().split())\nprint(\"Yes\" if a <= c <= b else \"No\")"}
{"label": 54, "index": 6913, "code": "a,b,c=map(int,input().split())\nprint('Yes' if a <= c <= b else 'No')"}
{"label": 54, "index": 6914, "code": "a = [int(num) for num in input().split()]\nprint('Yes' if a[0]<=a[2]<=a[1] else 'No')"}
{"label": 54, "index": 6915, "code": "l = input().split()\n\nA = int(l[0])\nB = int(l[1])\nC = int(l[2])\n\nif C >= A and C <= B:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 54, "index": 6916, "code": "A, B, C = map(int, input().split())\n\nif C >= A and C <= B:\n\tprint('Yes')\nelse:\n\tprint('No')"}
{"label": 54, "index": 6917, "code": "#coding:utf-8\n\nif __name__ == \"__main__\":\n    a, b, c = map(int, input().split(\" \"))\n\n    if a <= c <= b:\n        print (\"Yes\")\n    else:\n        print (\"No\")\n"}
{"label": 54, "index": 6918, "code": "A,B,C = map(int,input().split())\nif C >= A and C<= B:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 54, "index": 6919, "code": "input = [int(x) for x in input().split()]\nif input[2] >= input[0] and input[2] <= input[1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 54, "index": 6920, "code": "a, b, c = map(int, input().split())\nif c >= a and c <= b:\n    print('Yes')\nelse:\n    print('No')\n"}
{"label": 54, "index": 6921, "code": "A, B, C = list(map(int, input().split()))\nif C >= A and C <= B:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")"}
{"label": 54, "index": 6922, "code": "a,b,c=map(int,input().split())\nif a<=c<=b:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 54, "index": 6923, "code": "A,B,C=list(map(int, input().split()))\n\nif A<=C and C<=B:\n    print('Yes')\n\nelse:\n    print('No')"}
{"label": 54, "index": 6924, "code": "# A\nA, B, C = map(int, input().split())\nif C >= A and C <= B:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 54, "index": 6925, "code": "A, B, C = map(int, input().split())\nif A <= C <= B:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 54, "index": 6926, "code": "a, b, c = list(map(int, input().split()))\n\nif c >= a and c <= b:\n    print('Yes')\nelse:\n    print('No')\n"}
{"label": 54, "index": 6927, "code": "A,B,C = input().split()\nA = int(A)\nB = int(B)\nC = int(C)\nif C >= A and C <= B:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 54, "index": 6928, "code": "a, b, c = [int(x) for x in input().split()]\n\nif a <= c and c <= b:\n    print('Yes')\nelse:\n    print('No')"}
{"label": 54, "index": 6929, "code": "a,b,c=map(int,input().split())\n\nif a<=c and b>=c:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 54, "index": 6930, "code": "a, b, c = map(int, input().split())\nprint(\"Yes\" if a <= c <= b else \"No\")"}
{"label": 54, "index": 6931, "code": "a, b, c = map(int, input().split())\nif a <= c <= b:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 54, "index": 6932, "code": "def main():\n    a, b, c = map(int, input().split())\n    \n    if c >= a and b >= c:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 54, "index": 6933, "code": "# -*- coding: shift_jis -*-\n# matching features of two images\nimport sys\nimport numpy as np\n\n\nl = map(int, raw_input().split())\n\na=l[0]\nb=l[1]\nc=l[2]\n\nif(c>=a and c<=b):\n    print \"Yes\"\nelse:\n    print \"No\""}
{"label": 54, "index": 6934, "code": "s = raw_input().split()\n\nA = int(s[0])\nB = int(s[1])\nC = int(s[2])\n\nif C >= A and C <= B:\n    print \"Yes\"\nelse:\n    print \"No\""}
{"label": 54, "index": 6935, "code": "print((lambda a,b,c: \"Yes\" if a<=c and c<=b else \"No\")(*[int(_) for _ in input().split()]))"}
{"label": 54, "index": 6936, "code": "a,b,c=map(int, input().split())\nif a<=c and c<=b:\n print ('Yes')\nelse:\n print('No')\n"}
{"label": 54, "index": 6937, "code": "a,b,c = map(int, input().split())\nif a <= c <=b :\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")"}
{"label": 54, "index": 6938, "code": "a, b, c = map(int, input().split())\nif  a <= c <= b:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 54, "index": 6939, "code": "A,B,C=[int(i) for i in input().split()]\n\nif A<=C<=B:\n    print('Yes')\nelse:\n    print('No')"}
{"label": 54, "index": 6940, "code": "A,B,C = map(int, raw_input().split())\nif A<=C and C<=B:\n print \"Yes\"\nelse:\n print \"No\""}
{"label": 54, "index": 6941, "code": "l = list(map(int, input().split()))\nif l[0]<=l[2] and l[2]<=l[1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 54, "index": 6942, "code": "a, b, c = map(int,  raw_input().split())\nprint [\"No\", \"Yes\"][a <= c <= b]"}
{"label": 54, "index": 6943, "code": "A, B, C = map(int, input().split())\n\nprint(\"Yes\" if A <= C <= B else \"No\")"}
{"label": 54, "index": 6944, "code": "a, b, c = map(int, input().split())\n\nif a <= c <= b:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 54, "index": 6945, "code": "a,b,c = input().split()\na = int(a)\nb = int(b)\nc = int(c)\n\nif a <= c and c <= b:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 54, "index": 6946, "code": "a,b,c = [int(x) for x in input().split(' ')]\nif a <= c <= b:\n    print('Yes')\nelse:\n    print('No')\n    \n"}
{"label": 54, "index": 6947, "code": "a, b, c = map(int, input().split())\nif c >= a and c <= b:\n    print (\"Yes\")\nelse:\n    print (\"No\")\n"}
{"label": 54, "index": 6948, "code": "inf=float('inf')\n\n\nx = list(map(int, input().split()))\n\nif(x[2]<=x[1] and x[2]>=x[0]):print(\"Yes\")\nelse: print (\"No\")\n"}
{"label": 54, "index": 6949, "code": "a,b,c=[int(i) for i in input().split()]\n\nif c>=a and c<=b:print('Yes')\nelse:print('No')\n\n"}
{"label": 54, "index": 6950, "code": "a, b, c = map(int, input().split())\nif a <= c <= b:\n    print('Yes')\nelse:\n    print('No')"}
{"label": 54, "index": 6951, "code": "A, B, C = list(map(int, input().split()))\nif A <= C <= B: print(\"Yes\")\nelse: print(\"No\")"}
{"label": 54, "index": 6952, "code": "a,b,c=map(int,input().split())\nif a <= c <= b:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 54, "index": 6953, "code": "a, b, c = map(int, input().split(\" \"))\n\nif a <= c <= b:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 54, "index": 6954, "code": "a, b, c = map(int, input().split(' '))\nprint(\"Yes\") if c >= a and c <= b else print(\"No\")\n"}
{"label": 54, "index": 6955, "code": "# Between Two Integers\na,b,c = list(map(int, input().split()))\n\nif ( c-a>=0 and  b-c>=0):\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 54, "index": 6956, "code": "a,b,c = map(int,input().split())\nif a <= c <= b:\n    print('Yes')\nelse:\n    print('No')\n"}
{"label": 54, "index": 6957, "code": "A, B, C = [int(n) for n in input().split()]\nif A <= C and C <= B:\n  print(\"Yes\")\nelse:\n  print(\"No\")"}
{"label": 54, "index": 6958, "code": "import sys\n\na, b, c = [int(x) for x in sys.stdin.readline().split()]\n\nif a <= c and b >= c:\n\tprint('Yes')\nelse:\n\tprint('No')"}
{"label": 54, "index": 6959, "code": "# -*- coding: utf-8 -*-\nA, B, C = map(int, raw_input().split()) \nprint \"Yes\" if A <= C <= B else \"No\"\n"}
{"label": 54, "index": 6960, "code": "a,b,c = map(int,input().split())\nif a <= c <= b:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 54, "index": 6961, "code": "# coding: utf-8\n\na, b, c = map(int, raw_input().split())\n\nif a <= c and b >= c:\n    print \"Yes\"\nelse:\n    print \"No\"\n"}
{"label": 54, "index": 6962, "code": "A, B, C = map(int, input().split())\n\nif A <= C <= B:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n\n"}
{"label": 54, "index": 6963, "code": "a, b, c = map(int, raw_input().split(' '))\n\nif c >= a and c <= b:\n\tprint \"Yes\"\nelse:\n\tprint \"No\""}
{"label": 54, "index": 6964, "code": "a, b, c = [int(i) for i in input().split()]\nif a<=c<=b:\n    print('Yes')\nelse:\n    print('No')"}
{"label": 54, "index": 6965, "code": "A, B, C = [int(x) for x in input().split()]\nif C >= A and C <= B:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")"}
{"label": 54, "index": 6966, "code": "a,b,c = map(int, input().split(\" \"))\n\nif a <= c <= b:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 54, "index": 6967, "code": "#!/usr/bin/env python\n\nA,B,C=map(int,raw_input().split())\nif C>=A and C<=B:\n    print \"Yes\"\nelse:\n    print \"No\""}
{"label": 54, "index": 6968, "code": "a,b,c=map(int,input().split());print(('No','Yes')[a<=c<=b])"}
{"label": 54, "index": 6969, "code": "def siritori(a):\n    s1 = int(a[0])\n    s2 = int(a[1])\n    s3 = int(a[2])\n    if s1<=s3 and s3<=s2:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nsiritori(input().split(\" \"))"}
{"label": 54, "index": 6970, "code": "ABCstr = input().split()\nABC = []\nfor n in ABCstr:\n    ABC.append(int(n))\nif ABC[0]<=ABC[2] and ABC[1]>=ABC[2]:\n    print('Yes')\nelse:\n    print('No')"}
{"label": 54, "index": 6971, "code": "a, b, c = map(int, input().split())\nprint('Yes' if a <= c <= b else 'No')\n"}
{"label": 54, "index": 6972, "code": "def main():\n    a, b, c = map(int, input().split())\n\n    if c >= a and c <= b: print(\"Yes\")\n    else: print(\"No\")\n\n\nif __name__ == \"__main__\":\n    main()"}
{"label": 54, "index": 6973, "code": "a,b,c = map(int,input().split())\nif a<= c and c<=b:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 54, "index": 6974, "code": "a, b, c = map(int, input().split())\nif a <= c and b >= c:\n    print('Yes')\nelse:\n    print('No')\n"}
{"label": 54, "index": 6975, "code": "A, B, C = map(int, raw_input().split())\nprint \"Yes\" if (A <= C <= B) else \"No\""}
{"label": 54, "index": 6976, "code": "a, b, c = map(int, input().split())\nif c >= a and c <= b:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 54, "index": 6977, "code": "if __name__ == '__main__':\n\tA, B, C = map(int, input().split())\n\tif(A<=C):\n\t\tif(C<=B):\n\t\t\tprint('Yes')\n\t\telse:\n\t\t\tprint('No')\n\telse:\n\t\tprint('No')"}
{"label": 54, "index": 6978, "code": "A, B, C = map(int, input().split())\n\nif C >= A and C <= B:\n    print('Yes')\nelse:\n    print('No')"}
{"label": 54, "index": 6979, "code": "nums = list(map(int, input().split()))\nt = nums[2]\nif (nums[0] <= t and nums[1] >= t):\n    print('Yes')\nelse:\n    print('No')\n"}
{"label": 54, "index": 6980, "code": "a, b, c = map(int, input().split())\nif b >= c >= a:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 54, "index": 6981, "code": "a, b, c = map(int, input().split())\nprint(\"Yes\" if a <= c <= b else \"No\")\n"}
{"label": 54, "index": 6982, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\n\n\ndef main():\n    a,b,c = LI()\n    if c >= a and c <= b:\n        return 'Yes'\n    return 'No'\n\nprint(main())\n"}
{"label": 54, "index": 6983, "code": "(lambda x: print('Yes') if x[0] <= x[2] <= x[1] else print('No'))(list(map(int,input().split())))"}
{"label": 54, "index": 6984, "code": "A,B,C = map(int,input().split())\nif A <= C and C <= B:\n  print('Yes')\nelse:\n  print('No')"}
{"label": 54, "index": 6985, "code": "a, b, c = map(int,input().split(\" \"))\n\nif a <= c and c <= b:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 54, "index": 6986, "code": "# -*- coding: utf-8 -*-\n\na,b,c = map(int, raw_input().split())\n\nif(c>=a and c<=b):\n    print('Yes')\nelse:\n    print('No')"}
{"label": 54, "index": 6987, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nline = input().split(' ')\nA = int(line[0])\nB = int(line[1])\nC = int(line[2])\n\nif __name__ == '__main__':\n    if A <= C and C <= B:\n        print('Yes')\n    else:\n        print('No')\n"}
{"label": 54, "index": 6988, "code": "a, b, c = map(int, raw_input().split())\n\n\nif a <= c <= b:\n    print \"Yes\"\nelse:\n    print \"No\""}
{"label": 54, "index": 6989, "code": "string = input().split()\na = int(string[0])\nb = int(string[1])\nc = int(string[2])\nif a <= c and b >= c:\n    print(\"Yes\")\n    pass\nelse:\n    print(\"No\")\n    pass"}
{"label": 54, "index": 6990, "code": "a, b, c = [int(i) for i in input().split()]\nprint('Yes') if a <= c <= b else print('No')"}
{"label": 54, "index": 6991, "code": "A, B, C = map(int, raw_input().split())\nprint 'Yes' if A <= C <= B else 'No'"}
{"label": 54, "index": 6992, "code": "input_line = input()\n\na, b, c = [int(x) for x in input_line.split()]\n\nif (a <= c <= b):\n    print('Yes')\nelse:\n    print('No')\n"}
{"label": 54, "index": 6993, "code": "A, B, C = map(int, raw_input().split())\n\nif A <= C and C <= B:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 54, "index": 6994, "code": "a,b,c=map(int,input().split())\nprint(\"Yes\"if a<=c<=b else\"No\")"}
{"label": 54, "index": 6995, "code": "a,b,c = map(int,input().split())\n\nif c >= a:\n    if c <= b:\n        print(\"Yes\")\n\n    elif c > b:\n        print(\"No\")\n\nelif c < a:\n    print(\"No\")\n"}
{"label": 54, "index": 6996, "code": "a, b, c = map(int,input().split())\nif a <= c <= b:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 54, "index": 6997, "code": "if __name__ == '__main__':\n    a, b, c = map(int, input().split())\n    r = 'Yes' if a <= c <= b else 'No'\n    print(r)\n"}
{"label": 54, "index": 6998, "code": "# -*- coding: utf-8 -*-\n\n# get three integers separated with half-width break\na, b, c = map(int, raw_input().split())\n# output\nif c >= a and c <= b:\n    print \"Yes\" \nelse:\n    print \"No\"\n"}
{"label": 54, "index": 6999, "code": "a, b, c = list(map(int, input().split()))\n \nif(a <= c and c <= b):\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 54, "index": 7000, "code": "a,b,c = [int(x) for x in input().split()]\n\nif c >= a and c <= b:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 54, "index": 7001, "code": "A, B, C = map(int, input().split())\nif A <= C <= B:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 54, "index": 7002, "code": "# -*- coding:utf-8 -*-\nA, B, C = map(int,input().split())\nif A <= C and C <= B:\n    print('Yes')\nelse:\n    print('No')"}
{"label": 54, "index": 7003, "code": "a,b,c=map(int, input().split())\nprint('Yes' if a<=c<=b else 'No')\n"}
{"label": 54, "index": 7004, "code": "A, B, C = map(int, input().split())\nif A <= C and C <= B:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n    "}
{"label": 54, "index": 7005, "code": "temp=input().split()\nA=int(temp[0])\nB=int(temp[1])\nC=int(temp[2])\n\nif(A<=C<=B):\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")"}
{"label": 54, "index": 7006, "code": "a, b, c = map(int, input().split())\nif c >= a and c <= b:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 54, "index": 7007, "code": "A ,B ,C = [int(x) for x in input().strip().split(' ')]\nif(not C < A and not C > B):\n    print('Yes')\nelse:\n    print('No')"}
{"label": 54, "index": 7008, "code": "a,b,c=map(int,input().split())\nprint(\"Yes\" if a <= c <= b else \"No\")"}
{"label": 54, "index": 7009, "code": "a, b, c = map(int, raw_input().split())\nprint \"Yes\" if a <= c <= b else \"No\"\n"}
{"label": 54, "index": 7010, "code": "a, b, c = map(int, input().split())\nif c >= a and c <= b:\n    print (\"Yes\")\nelse:\n    print (\"No\")\n"}
{"label": 54, "index": 7011, "code": "a, b, c = list(map(int,input().split()))\nif a <= c and c <= b:\n    print('Yes')\nelse:\n    print('No')"}
{"label": 54, "index": 7012, "code": "# -*- coding: utf-8 -*-\nA,B,C = map(int,input().split(\" \"))\n\nif C >=A and C <= B:\n    print('Yes')\nelse:\n    print('No')"}
{"label": 54, "index": 7013, "code": "# -*- coding: utf-8 -*-\na, b, c = map(int, raw_input().split())\n\nif a <= c <= b:\n    print \"Yes\"\nelse:\n    print \"No\"\n"}
{"label": 54, "index": 7014, "code": "import sys\nfrom collections import Counter\n\nsys.setrecursionlimit(10**7)\n \ninf = 1<<100\n \ndef solve():\n    a, b, c = map(int, input().split())\n\n    print('Yes' if a <= c <= b else 'No')\n\nif __name__ == '__main__':\n    solve()"}
{"label": 54, "index": 7015, "code": "a,b,c = map(int,input().split())\nprint('Yes' if a<=c<=b else 'No')\n"}
{"label": 54, "index": 7016, "code": "a,b,c=map(int,input().split())\nif c >= a and c <= b:\n    print('Yes')\nelse:\n    print('No')\n"}
{"label": 54, "index": 7017, "code": "\nabc = input().split(' ')\nif int(abc[2]) <= int(abc[1]) and int(abc[2]) >= int(abc[0]):\n    print('Yes')\nelse:\n    print('No')\n"}
{"label": 54, "index": 7018, "code": "A, B, C = map(int, input().split())\nif (A <= C <= B):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 54, "index": 7019, "code": "a,b,c = list(map(int,input().split()))\nif c>=a and c<=b:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 55, "index": 7020, "code": "def solve():\n    N,M=map(int,input().split())\n    ans=[0]*N\n    for i in range(M):\n        a,b=map(int,input().split())\n        ans[a-1]+=1\n        ans[b-1]+=1\n    for i in range(N):\n        print(ans[i])\n\nif __name__ == \"__main__\":\n    solve()"}
{"label": 55, "index": 7021, "code": "n,m=map(int,input().split())\nj=[]\nfor x in range(m):\n    j+=list(map(int,input().split()))\nfor x in range(1,n+1):\n    print(j.count(x))"}
{"label": 55, "index": 7022, "code": "N,M = map(int,input().split())\na = []\nfor i in range(M):\n    x,y = input().split()\n    a.append(x),a.append(y)\n    \nfor i in range(1,N+1):print(a.count(str(i)))\n"}
{"label": 55, "index": 7023, "code": "# -*- coding: utf-8 -*-\n\nN, M = map(int,input().split())\n\nstreet = [0 for i in range(N)]\n\nfor i in range(M):\n    a, b = map(int,input().split())\n    street[a-1] += 1\n    street[b-1] += 1\n\nfor s in street:\n    print(s)"}
{"label": 55, "index": 7024, "code": "def makelist(n, m):\n    return [[0 for i in range(m)] for j in range(n)]\n\n# n = int(input())\n# a, b = map(int, input().split())\n# s = input()\n\n\nN, M = map(int, input().split())\ndp = makelist(N+1, N+1)\n\nfor _ in range(M):\n    a, b = map(int, input().split())\n    dp[a][b] += 1\n    dp[b][a] += 1\n\nfor i in range(1, N+1):\n    ans = 0\n    for k in range(1, N+1):\n        if k != i:\n            ans += dp[i][k]\n    print(ans)\n"}
{"label": 55, "index": 7025, "code": "# coding: utf-8\nimport array, bisect, collections, copy, heapq, itertools, math, random, re, string, sys, time\nsys.setrecursionlimit(10 ** 7)\nINF = 10 ** 20\nMOD = 10 ** 9 + 7\n\n\ndef II(): return int(input())\ndef ILI(): return list(map(int, input().split()))\ndef IAI(LINE): return [ILI() for __ in range(LINE)]\ndef IDI(): return {key: value for key, value in ILI()}\n\n\ndef read():\n    N, M = ILI()\n    edges = IAI(M)\n    return (N, M, edges)\n\n\ndef solve(N, M, edges):\n    ans = [0] * N\n    for edge in edges:\n        a, b = map(lambda x: x - 1, edge)\n        ans[a] += 1\n        ans[b] += 1\n    \n    return ans\n\n\ndef main():\n    params = read()\n    ans = solve(*params)\n    for i in ans:\n        print(i)\n\n\nif __name__ == \"__main__\":\n    main()\n"}
{"label": 55, "index": 7026, "code": "n,m=map(int,raw_input().split())\ncnt=[0]*n\nfor i in xrange(m):\n    a,b=map(int,raw_input().split())\n    a-=1;b-=1\n    cnt[a]+=1\n    cnt[b]+=1\nfor i in xrange(n):\n    print cnt[i]\n"}
{"label": 55, "index": 7027, "code": "N,M=map(int,input().split())\nlist1=[]\nfor i in range (M):\n    list1 += list(map(int,input().split()))\nfor j in range(1,N+1):\n print (list1.count(j))"}
{"label": 55, "index": 7028, "code": "n,m=map(int,input().split())\na=[0]*n\nfor i in range(0, m):\n    s,t = map(int,input().split())\n    a[s-1]+=1\n    a[t-1]+=1\nfor i in range(n):\n    print(a[i])"}
{"label": 55, "index": 7029, "code": "n, m = map(int, raw_input().split())\nans = [0 for _ in xrange(n)]\nfor i in xrange(m):\n    a, b = map(int, raw_input().split())\n    ans[a-1] += 1\n    ans[b-1] += 1\nfor i in xrange(n):\n    print ans[i]\n"}
{"label": 55, "index": 7030, "code": "#coding:utf-8\n\nfrom collections import defaultdict\n\nif __name__ == \"__main__\":\n    N, M = map(int, input().split(\" \"))\n\n    roads = defaultdict(int)\n    for i in range(M):\n        a, b = map(int, input().split(\" \"))\n        roads[a] += 1\n        roads[b] += 1\n\n    for j in range(1, N + 1):\n        print (roads[j])\n"}
{"label": 55, "index": 7031, "code": "n,m = map(int, input().split())\na = []\nb = []\nfor i in range(m):\n\tai,bi = map(int, input().split())\n\ta.append(ai)\n\tb.append(bi)\n\nres = [0 for i in range(n)]\n\nfor i in range(m):\n\tai = a[i] - 1\n\tbi = b[i] - 1\n\tres[ai] += 1\n\tres[bi] += 1\n\nfor i in range(n):\n\tprint(res[i])"}
{"label": 55, "index": 7032, "code": "n, m = [int(i) for i in input().split()]\n\npath = [0 for i in range(n)]\n\nfor i in range(m):\n    a, b = [int(i) for i in input().split()]\n    path[a-1] += 1\n    path[b-1] += 1\n\nfor i in range(n):\n    print(path[i])"}
{"label": 55, "index": 7033, "code": "N, M = map(int, input().split())\ncnt = [0 for i in range(N)]\nfor i in range(M):\n    a, b = map(int, input().split())\n    cnt[a-1] += 1\n    cnt[b-1] += 1\nfor i in range(N):\n    print(cnt[i])"}
{"label": 55, "index": 7034, "code": "x = list(map(int, input().split()))\na = [list(input().split()) for i in range(x[1])]\nb = []\nfor i in range(x[1]):\n    b += a[i]\n\nfor i in range(x[0]):\n    print(b.count('{}'.format(i+1)))\n"}
{"label": 55, "index": 7035, "code": "\n# coding: utf-8\nimport numpy as np\n\nif __name__ == \"__main__\":\n\tn, m = map(int, input().split())\n\n\tmat = [[0]*n for _ in range(n)]\n\tfor _ in range(m):\n\t\ta, b = map(int, input().split())\n\t\ta -= 1; b -= 1\n\t\tmat[a][b] += 1\n\t\tmat[b][a] += 1\n\n\tfor i in range(n):\n\t\tprint(sum(mat[i]))\n"}
{"label": 55, "index": 7036, "code": "n, m = map(int,input().split(\" \"))\nline = [0] * n\nfor i in range(m):\n    a, b = map(int, input().split(\" \"))\n    line[a - 1] += 1\n    line[b - 1] += 1\n\nfor i in range(n):\n    print(line[i])\n"}
{"label": 55, "index": 7037, "code": "n, m = map(int, raw_input().split())\n\nans = [0] * (n + 1)\nfor i in range(m):\n    a, b = map(int, raw_input().split())\n    ans[a] += 1\n    ans[b] += 1\n\nfor i in range(1, n + 1):\n    print ans[i]\n"}
{"label": 55, "index": 7038, "code": "N, M = map(int, raw_input().split())\n\narr = []\n\nfor i in range(M):\n    arr.append(map(int, raw_input().split()))\n\nans = [0 for i in range(N)]\n\nfor i in range(M):\n    tempa = arr[i][0] - 1\n    tempb = arr[i][1] - 1\n\n    ans[tempa] += 1\n    ans[tempb] += 1\n\nfor i in range(N):\n    print ans[i]"}
{"label": 55, "index": 7039, "code": "n, m = map(int, input().split())\n\nab_list = [list(map(lambda x: int(x) - 1, input().split())) for i in range(m)]\n\nresult_list = [[] for i in range(n)]\n\nfor ab in ab_list:\n    result_list[ab[0]].append(ab[1])\n    result_list[ab[1]].append(ab[0])\n\n\nfor result in result_list:\n    print(len(result))"}
{"label": 55, "index": 7040, "code": "n, m = map(int, raw_input().split())\ncount = [0] * n\nfor i in xrange(m):\n    a, b = map(int, raw_input().split())\n    count[a - 1] += 1\n    count[b - 1] += 1\nfor i in xrange(n):\n    print(count[i])\n"}
{"label": 55, "index": 7041, "code": "N, M = [int(i) for i in input().split()]\nans = [0]*N\nfor i in range(M):\n    a,b = [int(i) for i in input().split()]\n    ans[a-1] += 1\n    ans[b-1] += 1\nfor i in range(N):\n    print(ans[i])\n"}
{"label": 55, "index": 7042, "code": "N,M = map(int,input().split())\nA = [0 for i in range(N)]\nfor m in range(M):\n\ta,b = map(int,input().split())\n\tA[a - 1] += 1\n\tA[b - 1] += 1\nfor a in A:\n\tprint(a)"}
{"label": 55, "index": 7043, "code": "N,M = map(int, input().split())\na = []\nfor i in range(M):\n    tmp_l = map(int, input().split())\n    for i in tmp_l:\n        a.append(i)\n\nitr = 0\ncount = 0\nd = {}\nfor j in list(range(1,N+1,1)):\n    d[j] = 0\n\nfor k in a:\n    d[k] = d[k] + 1\n\nfor o in list(range(1,N+1,1)):\n    print(d[o])\n"}
{"label": 55, "index": 7044, "code": "n, m = map(int, input().split())\nroad = [0] * n\n\nfor i in range(0, m):\n    a, b = map(int, input().split())\n    road[a-1] = road[a-1] + 1\n    road[b-1] = road[b-1] + 1\n\nfor i in road:\n    print(i)"}
{"label": 55, "index": 7045, "code": "n,m = map(int, input().split())\nans = [0] * n\nfor _ in range(m):\n        way = map(int, input().split())\n        for w in way:\n                ans[w - 1] += 1\nfor i in range(len(ans)):\n        print(ans[i])\n"}
{"label": 55, "index": 7046, "code": "N, M = map(int, input().split())\nroad = [0] * N\n\nfor _ in range(M):\n    a, b = [int(i) for i in input().split()]\n    road[a - 1] += 1\n    road[b - 1] += 1\nfor r in road:\n    print(r)\n"}
{"label": 55, "index": 7047, "code": "# -*- coding: utf-8 -*-\nN, M = map(int, raw_input().split())\ncnt = [0]*N\nfor loop in xrange(M):\n    a, b = map(int, raw_input().split())\n    cnt[a - 1] += 1\n    cnt[b - 1] += 1\nfor i in cnt:\n    print i\n\n"}
{"label": 55, "index": 7048, "code": "n,m=map(int,input().split())\nans=[0]*n\n\nfor i in range(m):\n    a,b=map(int,input().split())\n    ans[a-1] += 1\n    ans[b-1] += 1\n\nfor i in ans:\n    print(i)\n\n"}
{"label": 55, "index": 7049, "code": "def solve():\n  ar = raw_input().split(' ')\n  N = int(ar[0])\n  M = int(ar[1])\n  counts = [0 for i in range(N)]\n  for i in range(M):\n    #print counts\n    ar = raw_input().split(' ')\n    a = int(ar[0])\n    b = int(ar[1])\n    counts[a-1] = counts[a-1] + 1\n    counts[b-1] = counts[b-1] + 1\n  #print counts\n  print '\\n'.join(str(c) for c in counts)\n\nif __name__ == '__main__' :\n  solve()"}
{"label": 55, "index": 7050, "code": "import sys\n\n# sys.stdin = open('b1.in')\n\nn, m = map(int, input().split())\n\nroads = []\nfor i in range(m):\n    a, b = map(int, input().split())\n    roads.append((a, b))\n\nres = [0] * n\nfor a, b in roads:\n    res[b - 1] += 1\n    res[a - 1] += 1\nfor r in res:\n    print(r)\n"}
{"label": 55, "index": 7051, "code": "#nm = '4 3'.split(' ')\n#print(abc)\nnm = input().split(' ')\nvv = []\nfor i in range(int(nm[1])):\n    a = input().split(' ')\n    vv.append(int(a[0]))\n    vv.append(int(a[1]))\n\nfor i in range(int(nm[0])):\n    c = vv.count(1+i)\n    if c != 0:\n        print(c)\n    else:\n        print('0')\n            \n"}
{"label": 55, "index": 7052, "code": "N,M=map(int,raw_input().split())\nc=[0]*N\nfor i in range(M):\n\ta,b=map(int,raw_input().split())\n\tc[a-1]+=1;c[b-1]+=1\n\nfor i in c:\n\tprint i"}
{"label": 55, "index": 7053, "code": "n,m=map(int,input().split())\nlist=[]\nfor i in range(m):\n    a,b=map(int,input().split())\n    list.append(a); list.append(b)\n\nfor i in range(n):\n    i+=1\n    ans=list.count(i)\n    print(ans)"}
{"label": 55, "index": 7054, "code": "n = input()\ntmp_n = n.split(\" \")\n\nN = tmp_n[0]\nM = tmp_n[1]\nn_list = []\n\nfor i in range(int(M)):\n    num = input()\n    tmp_num = num.split()\n    n_list.append(int(tmp_num[0]))\n    n_list.append(int(tmp_num[1]))\n    \nfor j in range(1,int(N)+1):\n    count = 0\n    for k in n_list:\n        if k == j:\n            count = count + 1        \n    print(count)\n"}
{"label": 55, "index": 7055, "code": "if __name__ == '__main__':\n\n\tN, M = map(int, input().split())\n\tn=[]\n\tfor j in range(N):\n\t\tn.append(0)\n\n\tfor i in range(M):\n\t\ta, b = map(int, input().split())\n\t\tn[a-1]+=1\n\t\tn[b-1]+=1\n\n\tfor j in range(N):\n\t\tprint(n[j])"}
{"label": 55, "index": 7056, "code": "# -*- coding: shift_jis -*-\n# matching features of two images\nimport sys\nimport numpy as np\n\n\nl = map(int, raw_input().split())\nN=l[0]\nM=l[1]\n\na = []\nb = []\nfor i in range(M):\n    a= map(int, raw_input().split())\n    b.append(a)\n    if (i>=1):\n        b[0].extend(b[i])\n\n\nfor i in range(N):\n    counti = b[0].count(i+1)\n    print counti\n"}
{"label": 55, "index": 7057, "code": "N, M = map(int, input().split())\n\nnum = [0] * N\nfor i in range(M):\n    a, b = map(int, input().split())\n    num[a - 1] += 1\n    num[b - 1] += 1\n\nprint('\\n'.join(map(str, num)))\n"}
{"label": 55, "index": 7058, "code": "N, M = list(map(int, input().split(\" \")))\n\ngraph = [list() for _ in range(N+1)]\n\nfor _ in range(M):\n    a, b = list(map(int, input().split(\" \")))\n    graph[a].append(b)\n    graph[b].append(a)\n    \nfor i in range(1, N+1):\n    print(len(graph[i]))"}
{"label": 55, "index": 7059, "code": "b = input().split(\" \")\nnum = [0 for i in range(int(b[0]))] \nfor i in range(int(b[1])):\n    a = input().split(\" \")\n    num[int(a[0])-1] = num[int(a[0])-1]+1\n    num[int(a[1])-1] = num[int(a[1])-1]+1\n\nfor i in range(int(b[0])):\n    print(num[i])"}
{"label": 55, "index": 7060, "code": "# -*- coding: utf-8 -*-\nN, M = map(int, raw_input().split())\ncnt = [0]*N\nfor loop in xrange(M):\n    a, b = map(int, raw_input().split())\n    cnt[a - 1] += 1\n    cnt[b - 1] += 1\nfor i in cnt:\n    print i\n\n"}
{"label": 55, "index": 7061, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\nimport re\nimport math\nimport collections\nimport itertools\nimport functools\n\nDEBUG = True\nDEBUG = False\n\ndef dbg(*args):\n    if DEBUG:\n        print(\"DBG: \", file=sys.stderr, end=\"\")\n        print(*args, file=sys.stderr)\n\n\n\ndef main():\n    N, M = map(int, input().split())\n\n    cnt = [0 for _ in range(N+1)]\n    for _ in range(M):\n        a, b = map(int, input().split())\n        cnt[a] += 1\n        cnt[b] += 1\n\n    for i in range(1, N+1):\n        print(cnt[i])\n\nif __name__ == \"__main__\": main()\n"}
{"label": 55, "index": 7062, "code": "#coding=UTF-8\n\nmozir=input()\nhyo=mozir.split(' ')\nN_toshi=int(hyo[0])\nM_miti=int(hyo[1])\n\nhindo=[0]*N_toshi\n\nfor idx in range(0,M_miti,1):\n    mozir=input()\n    hyo=mozir.split(' ')\n    hashis=(int(mono)-1 for mono in hyo)\n    for tenn in hashis:\n        hindo[tenn]=hindo[tenn]+1\n\nfor tenn in hindo:\n    print(tenn)\n"}
{"label": 55, "index": 7063, "code": "# -*- coding: utf-8 -*-\n# \u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u306e\u6574\u6570\u306e\u5165\u529b\nimport numpy as np\nN, K = map(int, raw_input().split())\nR = []\nfor i in xrange(K):\n    ia, ib = map(int, raw_input().split())\n    R.extend([ia, ib])\n\nR = sorted(R)\nR.reverse()\n\ncount = 1\nc = 0\nr = R.pop()\n\nfor i in xrange(N):\n    while count == r:\n        c += 1\n        if len(R) > 0:\n             r = R.pop()\n        else:\n             break\n\n    print c\n    count += 1\n    c = 0"}
{"label": 55, "index": 7064, "code": "# N,M\u306e\u628a\u63e1\nl = list(map(int, input().split()))\nN = l[0]\nM = l[1]\n\n#list(map(str, input().split()))\u3092M\u56de\u304f\u308a\u304b\u3048\u3057\u3001\uff11\u3064\u306e\u30ea\u30b9\u30c8\u306b\u307e\u3068\u3081\u308b\u3002\n\nc = []\nfor i in range(M):\n\tc = c + list(map(int, input().split()))\n\n# \u30ea\u30b9\u30c8\u3092\u6307\u5b9a\u306e\u756a\u53f7\u3067\u691c\u7d22\u3057\u3066\u3001\u9805\u76ee\u6570\u3092\u8fd4\u3059\u95a2\u6570\ndef r(x):\n\ty = str(c.count(x))\n\treturn y\n\n#\u90fd\u5e02\u756a\u53f71\u304b\u3089N\u307e\u3067\u30ea\u30b9\u30c8\u3092\u691c\u7d22\u3057\u3001\u51fa\u529b\ndic = {}\nfor i in range(1,N+1):\n\tprint(r(i))"}
{"label": 55, "index": 7065, "code": "N,M = [int(x) for x in input().split()]\na=[]\nb=[]\nfor i in range(M):\n    A,B=[int(x) for x in input().split()]\n    a.append(A)\n    b.append(B)\n\nfor i in range(N):\n    print(a.count(i+1)+b.count(i+1))\n"}
{"label": 55, "index": 7066, "code": "#!/usr/bin/env/ python\n\nfrom itertools import chain\n\nN,M=map(int,raw_input().split())\nroad=[0]*M\nfor i in range(M):\n    road[i]=map(int,raw_input().strip().split())\n\nroad=list(chain.from_iterable(road))\n\nfor i in range(N):\n    print road.count(i+1)"}
{"label": 55, "index": 7067, "code": "\nN,M = map(int, input().split())\ncount = [0 for i in range(N+1)] #0-N\u756a\u306e\u9053\u8def\u306e\u500b\u6570\uff08\uff10\u756a\u76ee\u306f\u4f7f\u7528\u3057\u306a\u3044\u3088\u3046\u306b\u6ce8\u610f)\n\nfor i in range(M):\n    a,b = map(int, input().split())\n    count[a]+=1\n    count[b]+=1\n\nfor i in range(1,N+1):\n    print(count[i])\n    "}
{"label": 55, "index": 7068, "code": "import numpy as np\nn,m=map(int,raw_input().split())\na=[]\nb=[]\nfor k in range(m):\n    aa,bb=map(int,raw_input().split())\n    a.append(aa)\n    b.append(bb)\na=np.array(a)\nb=np.array(b)\n\nfor k in range(1,n+1):\n    print(len(np.where(a==k)[0])+len(np.where(b==k)[0]))\n"}
{"label": 55, "index": 7069, "code": "import sys\nfrom collections import Counter\n\nsys.setrecursionlimit(10**7)\n \ninf = 1<<100\n \ndef solve():\n    N, M = map(int, input().split())\n    ans = [0]*N\n\n    for i in range(M):\n        ai, bi = map(int, input().split())\n        ai -= 1\n        bi -= 1\n        ans[ai] += 1\n        ans[bi] += 1\n\n    print(*ans, sep='\\n')\n \nif __name__ == '__main__':\n    solve()"}
{"label": 55, "index": 7070, "code": "n,m=map(int,input().split())\narr=[0]*n\nfor _ in range(m):\n    a,b=map(int,input().split())\n    arr[a-1]+=1\n    arr[b-1]+=1\nfor road in arr:\n    print(road)\n"}
{"label": 55, "index": 7071, "code": "def main():\n    N, M = map(int, input().split())\n\n    R = [[0]*N for x in range(N)]\n    for n in range(M):\n        a, b = map(lambda x:int(x)-1, input().split())\n        R[a][b] += 1\n        R[b][a] += 1\n\n    for n in range(N):\n        print(sum(R[n]))\n\nif __name__ == \"__main__\":\n    # global stime\n    # stime = time.clock()\n    main()\n"}
{"label": 55, "index": 7072, "code": "n,m = map(int,input().split())\nroad = []\n\nfor i in range(m):\n    a,b = [int(i) for i in input().split()]\n    road.append([a,b])\n\nroad = sum(road,[])\n#print(road)\n    \nfor j in range(n):\n   print (road.count(j+1))"}
{"label": 55, "index": 7073, "code": "N, M = map(int, raw_input().split())\nE = [map(int, raw_input().split()) for _ in range(M)]\n\ncnt = [0 for _ in range(N)]\nfor a, b in E:\n    cnt[a-1] += 1\n    cnt[b-1] += 1\n\nfor v in cnt:\n    print v\n"}
{"label": 55, "index": 7074, "code": "n,m = map(int, raw_input().split())\nd = [0] * n\nfor i in range(m):\n  a,b = map(int, raw_input().split())\n  d[a-1] += 1\n  d[b-1] += 1\n\nfor i in range(n):\n  print d[i]"}
{"label": 55, "index": 7075, "code": "N,M = map(int,input().split())\n\nl = [0 for i in range(N)]\nfor i in range(M):\n\ta,b = map(int,input().split())\n\tl[a-1] += 1\n\tl[b-1] += 1\n\nfor i in l:\n\tprint(i)\n"}
{"label": 55, "index": 7076, "code": "n, m = map(int, input().split())\n\nans = [0 for i in range(n)]\nfor i in range(m):\n    a, b = map(int, input().split())\n    ans[a-1] += 1\n    ans[b-1] += 1\nprint('\\n'.join(map(str, ans)))\n"}
{"label": 55, "index": 7077, "code": "nm = list(map(int, input().split()))\nn = nm[0]\nm = nm[1]\n\nans = [0 for i in range(n)]\nfor i in range(m):\n    ab = list(map(int, input().split()))\n    ans[ab[0]-1] += 1\n    ans[ab[1]-1] += 1\n\nfor i in range(n):\n    print(ans[i])"}
{"label": 55, "index": 7078, "code": "n, m = map(int,input().split())\ngraph = [[0] * (n + 1) for i in range(n + 1)]\nfor i in range(m):\n    a, b = map(int,input().split())\n    graph[a][b] += 1\n    graph[b][a] += 1\n\nfor i in range(n):\n    ans = 0\n    for j in range(n):\n        ans += graph[j + 1][i + 1]\n    print(ans)"}
{"label": 55, "index": 7079, "code": "# -*- coding: utf-8 -*-\n\nimport sys\nimport subprocess\nimport json\nimport time\nimport math\nimport re\nimport sqlite3\n\nN, M = map(int, input().split())\nl = []\nfor i in range(N):\n    l.append(0)\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    a -= 1; b -= 1;\n    l[a] += 1\n    l[b] += 1\n\nfor i in range(N):\n    print(l[i])\n\n\n"}
{"label": 55, "index": 7080, "code": "N, M = map(int, input().split())\nEs = [[] for _ in range(N)]\nfor n in range(M):\n    a, b = map(int, input().split())\n    Es[a - 1].append(b - 1)\n    Es[b - 1].append(a - 1)\n\nfor e in Es:\n    print(len(e))\n"}
{"label": 55, "index": 7081, "code": "N,M=map(int,raw_input().split())\n\nr=[0]*N\nfor i in range(M):\n    a,b=map(int,raw_input().split())\n    a-=1\n    b-=1\n    r[a]+=1\n    r[b]+=1\n\nfor i in r:\n    print i"}
{"label": 55, "index": 7082, "code": "n, m = map(int, input().split())\ncounts = [0] * (n + 1)\nfor _ in range(m):\n    a, b = map(int, input().split())\n    counts[a] += 1\n    counts[b] += 1\nprint('\\n'.join(map(str, counts[1:])))\n"}
{"label": 55, "index": 7083, "code": "import sys\n\nN, M = (int(i) for i in raw_input().split())\nab_list = [[int(i) for i in raw_input().split()] for i in range(M)]\n\nroad_list = [0] * N\nfor ab in ab_list:\n    a, b = ab\n    road_list[a-1] += 1\n    road_list[b-1] += 1\n\nfor road_num in road_list:\n    print road_num\n"}
{"label": 55, "index": 7084, "code": "# Counting Roads\n\nn,m =  list(map(int, input().split()))\na = []\nfor i in range(m):\n    a.append( list(map(int, input().split())) ) \n\nb = []\nfor s in a:\n    b.extend(s)\nfor i in range (n):\n    print(b.count(i+1))"}
{"label": 55, "index": 7085, "code": "N, M = map(int, input().split())\nt = [[] for i in range(N+1)]\nfor i in range(M):\n    a, b = map(int, input().split())\n    t[a].append(b)\n    t[b].append(a)\nfor i in range(1, N+1):\n    print(len(t[i]))"}
{"label": 55, "index": 7086, "code": "n, m  = map(int, input().split())\ndef prob_B(n, m):    \n    ls_ans = [0] * n\n\n    for _ in range(m):\n        a, b = map(int, input().split())\n        ls_ans[a-1] += 1\n        ls_ans[b-1] += 1\n\n    return ls_ans    \n    \nls_ans = prob_B(n=n, m=m)\n[print(ls_ans[i]) for i in range(len(ls_ans))]"}
{"label": 55, "index": 7087, "code": "n, m = map(int, raw_input().split())\nroads = {}\nfor _ in range(m):\n    a, b = map(int, raw_input().split())\n    if a not in roads: roads[a] = 0\n    if b not in roads: roads[b] = 0\n    roads[a] += 1\n    roads[b] += 1\nfor i in range(1, n + 1):\n    print (roads[i] if i in roads else 0)"}
{"label": 55, "index": 7088, "code": "n, m = map(int, raw_input().split())\n\nmp = [[0]*n for _ in xrange(n)]\n\nfor idx in xrange(m):\n    a, b = map(int, raw_input().split())\n    mp[a-1][b-1] += 1\n    mp[b-1][a-1] += 1\n\nfor idx in range(n):\n    print sum(mp[idx])\n"}
{"label": 55, "index": 7089, "code": "N,M=map(int,input().split())\nA=[]\nB=[]\nfor i in range(M):\n    a,b=map(int,input().split())\n    A.append(a)\n    B.append(b)\nfor i in range(1,N+1):\n    print(A.count(i)+B.count(i))"}
{"label": 55, "index": 7090, "code": "N,M = [int(i) for i in input().split(\" \")]\nroad = [0]*(N+1)\nfor i in range(M):\n    a_i,b_i = [int(j) for j in input().split(\" \")]\n    road[a_i] += 1\n    road[b_i] += 1\nfor i in range(1,N+1):\n    print(road[i])"}
{"label": 55, "index": 7091, "code": "n, m = map(int, input().split())\ncity = [0] * 100\n\nfor i in range(m):\n    a, b = map(int, input().split())\n    city[a] += 1\n    city[b] += 1\n\nfor j in range(n):\n    print(city[j + 1])\n"}
{"label": 55, "index": 7092, "code": "import numpy as np\nfrom collections import Counter\nN,M = list(map(int,input().split()))\n\na = []\n\nfor i in range(M):\n    a.append(list(map(int,input().split())))\na = np.array(a)\na = a.flatten()\n\ncount = Counter(a)\nfor i in range(N):\n    print (count[i+1])"}
{"label": 55, "index": 7093, "code": "N, M = map(int, input().split())\nm_list = [0] * (N + 1)\nfor i in range(M):\n    a, b = map(int, input().split())\n    m_list[a] += 1\n    m_list[b] += 1\nfor j in m_list[1:]:\n    print(j)\n"}
{"label": 55, "index": 7094, "code": "n, m = map(int, input().split())\na = []\nb = []\n\nfor i in range(m):\n    x, y = map(int, input().split())\n    a.append(x)\n    b.append(y)\n\nfor i in range(n):\n    count = 0\n    for j in range(m):\n        if a[j] == i+1:\n            count += 1\n        if b[j] == i+1:\n            count += 1\n    print (count)\n"}
{"label": 55, "index": 7095, "code": "# -*- coding: utf-8 -*-\n\nx = input()\ny=[]\ny=x.split(\" \")\nN=int(y[0])\nM=int(y[1])\n\nz=[]\nfor i in range(M):\n\ttemp1=input()\n\ttemp2=temp1.split(\" \")\n\tfor j in temp2:\n\t\tj=int(j)\n\t\tz.append(j)\n\ndict={}\nfor i in range(N):\n\ti+=1\n\tdict[i]=0\n\nfor i in z:\n\tdict[i]=dict[i]+1\n\nfor i in range(N):\n\ti+=1\n\tprint(dict[i])\n\t"}
{"label": 55, "index": 7096, "code": "N,M = list(map(int,input().split()))\ndata = [list(map(int,input().split())) for i in range(M)]\nroad = [0]*N\nfor i in range(M):\n    x = data[i][0] - 1\n    y = data[i][1] - 1\n    road[x] += 1\n    road[y] += 1\nfor i in range(N):\n    print(road[i])\n"}
{"label": 55, "index": 7097, "code": "def main():\n    n, m = map(int, input().split())\n    adj = [0] * n\n    for _ in range(m):\n        a, b = map(int, input().split())\n        adj[a-1] += 1\n        adj[b-1] += 1\n    for i in range(n):\n        print(adj[i])\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 55, "index": 7098, "code": "cr = input().split()\nc = int(cr[0])\nr = int(cr[1])\ni = 0\nn = []\nmichi = []\nciti = [0] * c\nwhile(i < r):\n    michi.append(input().split())\n    i += 1\n    pass\ni = 0\nwhile(i < r):\n    src = int(michi[i][0])\n    dst = int(michi[i][1])\n    citi[src-1] += 1\n    citi[dst-1] += 1\n    i += 1\n    pass\ni = 0\nwhile(i < c):\n    print(citi[i])\n    i += 1"}
{"label": 55, "index": 7099, "code": "N, M = map(int, input().split())\nL = [[] for i in range(N)]\nfor i in range(M):\n    a, b = map(int, input().split())\n    a -= 1\n    b -= 1\n    L[a].append(b)\n    L[b].append(a)\nfor i in range(N):\n    print(len(L[i]))\n"}
{"label": 55, "index": 7100, "code": "n, m = map(int, input().split())\na = [0 for i in range(1, n + 2)]\nfor i in range(m):\n    x, y = map(int, input().split())\n    a[x] = a[x] + 1\n    a[y] = a[y] + 1\nfor i in range(1, n + 1):\n    print(a[i])\n"}
{"label": 55, "index": 7101, "code": "n,m=map(int,input().split())\nans= [0] * n\n \nfor i in range(m):\n    a,b=map(int,input().split())\n    ans[a-1] += 1\n    ans[b-1] += 1\n \nfor i in ans:\n    print( i )"}
{"label": 55, "index": 7102, "code": "import numpy as np\nn,m = input().split()\nn = int(n)\nm = int(m)\ncount = np.zeros(n)\nfor i in range(m):\n    a, b = input().split()\n    count[int(a)-1] += 1\n    count[int(b)-1] += 1\n\nfor i in count:\n    print(int(i))"}
{"label": 55, "index": 7103, "code": "read = lambda: map(int, input().split())\nn, m = read()\ng = [0] * (n + 1)\nfor i in range(m):\n    a, b = read()\n    g[a] += 1\n    g[b] += 1\nprint('\\n'.join(map(str, g[1:])))"}
{"label": 55, "index": 7104, "code": "table = input().split()\nN,M = int(table[0]),int(table[1])\nhyou = []\nfor i in range(M):\n    ith = input().split()\n    hyou += ith\nhyou = list(map(int,hyou))\nj = 1\nwhile j <= N:\n    print(hyou.count(j))\n    j += 1\n"}
{"label": 55, "index": 7105, "code": "N, M = map(int, input().split())\ncity = {key:0 for key in range(1, N+1)}\nfor i in range(M):\n    a, b = map(int, input().split())\n    city[a] += 1\n    city[b] += 1\nfor key in city:\n    print(city[key])\n"}
{"label": 55, "index": 7106, "code": "N, M = map(int, raw_input().split())\nv = [map(int, raw_input().split()) for i in range(M)]\nw = [0 for i in range(N)]\nfor a, b in v:\n    w[a-1] += 1\n    w[b-1] += 1\nfor i in range(N):\n    print w[i]"}
{"label": 55, "index": 7107, "code": "N, M = map(int, input().split())\nc = []\nfor i in range(M):\n\tc.append(input().split())\n\nd = []\nfor i in range(M):\n\td = d + c[i]\n\nfor i in range(N):\n\tprint(d.count(str(i+1)))"}
{"label": 55, "index": 7108, "code": "N, M = map(int, input().split())\ncity = [0] * N\nfor i in range(0, M):\n    a, b = map(int, input().split())\n    for j in range(1, N+1):\n        if a == j or b == j:\n            city[j-1] += 1\nfor n in range(0, N):\n    print(city[n])"}
{"label": 55, "index": 7109, "code": "N, M = map(int, raw_input().split())\nkotae = [0]*N\nfor i in range(M):\n l=map(int, raw_input().split())\n for j in range(len(l)):\n  kotae[l[j]-1]=kotae[l[j]-1]+1\nfor k in range(N):\n print kotae[k]"}
{"label": 55, "index": 7110, "code": "N,M=map(int,input().split())\n\nroads_cnt=[0]*N\nfor i in range(M):\n    a_i,b_i=map(int,input().split())\n    roads_cnt[a_i-1] +=1\n    roads_cnt[b_i-1] +=1\n\nfor road_cnt in roads_cnt:\n    print(road_cnt)\n\n\n"}
{"label": 55, "index": 7111, "code": "NM = list(map(int,input().split()))\nr = [0 for _ in range(NM[0])]\nfor _ in range(NM[1]):\n    for i in list(map(int,input().split())):\n        r[i-1] += 1\nfor i in r:\n    print(i)"}
{"label": 55, "index": 7112, "code": "N, M = map(int, input().split())\ncnt = [0 for _ in range(N)]\n\nfor _ in range(M):\n    a, b = map(int, input().split())\n    cnt[a-1] += 1\n    cnt[b-1] += 1\n\nfor c in cnt:\n    print(c)\n"}
{"label": 55, "index": 7113, "code": "import sys\nimport numpy as np\nn,m = [int(x) for x in sys.stdin.readline().split()]\nr = np.zeros(n)\nfor i in range(m):\n\ta, b = [int(x) for x in sys.stdin.readline().split()]\n\tr[a-1] += 1\n\tr[b-1] += 1\nfor i in range(n):\n\tprint(int(r[i]))"}
{"label": 55, "index": 7114, "code": "n, m = map(int, input().split())\nnums = []\nfor i in range(m) :\n    for val in map(int, input().split()):\n        nums.append(val-1)\nfor i in range(n):\n    print(nums.count(i))"}
{"label": 55, "index": 7115, "code": "import sys\nfrom collections import defaultdict\n\ndef main():\n    line = sys.stdin.readline()\n    lst = line.split()\n    n = int(lst[0])\n    m = int(lst[1])\n\n    ans_dic = defaultdict(int) #\u90fd\u5e02\u756a\u53f7 -> \u672c\u6570\n    for i in range(m):\n        line = sys.stdin.readline()\n        lst = line.split()\n        a = int(lst[0])\n        b = int(lst[1])\n        ans_dic[a] += 1\n        ans_dic[b] += 1\n\n    for i in range(1, n+1):\n        print(\"%d\" % ans_dic[i])\n    return 0\n\nif __name__ == '__main__':\n    sys.exit(main())\n"}
{"label": 55, "index": 7116, "code": "n, m = [int(i) for i in input().split()]\n\nr = []\nfor i in range(m):\n    r += [int(i) for i in input().split()]\n\nfor i in range(n):\n    print(r.count(i+1))"}
{"label": 55, "index": 7117, "code": "n,m = map(int,input().split())\narr = [list(map(int,input().split())) for i in range(m)]\nans = []\nfor i in arr:\n    ans.extend(i)\nfor i in range(1,n + 1):\n    print(ans.count(i))"}
{"label": 55, "index": 7118, "code": "def main():\n    N, M = map(int, input().split())\n    m = [None, None] * M\n    i = 0\n    while i < M * 2:\n        a, b = map(int, input().split())\n        m[i] = a\n        m[i+1] = b\n        i += 2\n\n    for s in range(1, N + 1):\n        ans = m.count(s)\n        print(ans)\n\nmain()\n"}
{"label": 55, "index": 7119, "code": "N, M = map(int,input().split())\na = []\nb = []\nfor i in range(M):\n    a.append(list(map(int, input().split())))\n\na=[flatten for inner in a for flatten in inner]\n \nfor i in range(N):\n    b.append((a.count(i+1)))\n\n\nc = list(map(str, b))\n\nanswer = '\\n'.join(c)\nprint(answer)\n\n\n"}
{"label": 55, "index": 7120, "code": "N, M = map(int, raw_input().split())\nresult = [0] * N\nfor i in range(M):\n    a, b = map(int, raw_input().split())\n    result[a - 1] += 1\n    result[b - 1] += 1\n\nfor i in range(N):\n    print(result[i])"}
{"label": 55, "index": 7121, "code": "n,m = map(int, input().split())\n\ndeg = [0]*n\n\nfor i in range(m):\n  a,b = map(int,input().split())\n  deg[a-1] += 1\n  deg[b-1] += 1\n\nprint('\\n'.join(map(str,deg)))"}
{"label": 55, "index": 7122, "code": "n, m = map(int, input().split(\" \"))\n\ncount = [0 for i in range(0,n)]\n\nfor i in range(0, m):\n    a, b = map(int, input().split(\" \"))\n    count[a-1] += 1\n    count[b-1] += 1\n\nfor i in range(0, n):\n    print(count[i])\n"}
{"label": 55, "index": 7123, "code": "# coding: utf-8\nn,m=map(int,input().split())\nnum=[0]*n\nfor i in range(m):\n    x,y=map(int,input().split())\n    num[x-1]+=1\n    num[y-1]+=1\nfor i in range(n):\n    print(num[i])"}
{"label": 55, "index": 7124, "code": "n, m = list(map(int, input().split(' ')))\n\nvalue_list = []\nfor i in range(m):\n    a, b = map(int, input().split(' '))\n    value_list.append(a)\n    value_list.append(b)\nfor i in range(1, n + 1):\n    print(value_list.count(i))\n"}
{"label": 55, "index": 7125, "code": "N, M = list(map(int, input().split()))\n\nroad = [[] for i in range(N)]\nfor i in range(M):\n    a, b = list(map(int, input().split()))\n    road[a - 1].append(b)\n    road[b - 1].append(a)\n\nfor i in range(N):\n    print(len(road[i]))\n"}
{"label": 55, "index": 7126, "code": "# -*- coding: utf-8 -*-\n\nn,m = map(int, input().split())\ncity = [0] * (n + 1)\n\nfor i in range(m):\n    a, b = map(int, input().split())\n    city[a] += 1\n    city[b] += 1\n\nfor i in range(1,n+1):\n    print(str(city[i]))\n"}
{"label": 55, "index": 7127, "code": "N,M = map(int,raw_input().split())\n\nroad = [0 for i in range(N)]\n\nfor i in range(M):\n    a,b = map(int,raw_input().split())\n    road[a-1]+=1\n    road[b-1]+=1\n    \nfor r in road:\n    print r"}
{"label": 55, "index": 7128, "code": "N,M=list(map(int, input().split()))\np=[0]*N\nfor i in range(0,M):\n  count=list(map(int, input().split()))\n  p[count[0]-1]+=1\n  p[count[1]-1]+=1\n[print(p[i]) for i in range(N)]"}
{"label": 55, "index": 7129, "code": "import sys\n\n# sys.stdin = open('b1.in')\nfrom collections import Counter\n\nn, m = map(int, input().split())\n\nres = Counter()\nfor i in range(m):\n    a, b = map(int, input().split())\n    res[b] += 1\n    res[a] += 1\nfor i in range(1, n + 1):\n    print(res[i])\n"}
{"label": 55, "index": 7130, "code": "l = []\nn, m = map(int, input().split())\nfor i in range(0, m):\n    l += map(int, input().split())\n\nfor i in range(1, n + 1):\n    print(l.count(i))\n"}
{"label": 55, "index": 7131, "code": "\"\"\" abc061_b:B - Counting Roads \"\"\"\nL = input().rstrip().split(' ')\nN = int(L[0])\nM = int(L[1])\n\nANS = []\nfor i in range(N):\n    ANS.append(0)\n\nfor i in range(M):\n    L = input().rstrip().split(' ')\n    ANS[int(L[0])-1] += 1\n    ANS[int(L[1])-1] += 1\n\nfor i in range(N):\n    print(ANS[i])\n"}
{"label": 55, "index": 7132, "code": "nm = [int(n) for n in input().split()]\nc = [0] * nm[0]\nfor i in range(nm[1]):\n    ab = [int(num) for num in input().split()]\n    c[ab[0] - 1] += 1\n    c[ab[1] - 1] += 1\nfor i in range(nm[0]):\n    print(c[i])"}
{"label": 55, "index": 7133, "code": "N,M = map(int, raw_input().split())\nC = [0]*N\nfor _ in range(M):\n  a,b = map(int, raw_input().split())\n  C[a-1] += 1\n  C[b-1] += 1\nfor c in C:\n  print c\n"}
{"label": 55, "index": 7134, "code": "a = list(map(int,input().split(\" \")))\nb = list()\nc = list()\ntmp = list()\n\nfor i in range(a[1]):\n    tmp = list(map(int,input().split(\" \")))\n    b.append(tmp[0])\n    b.append(tmp[1])\n\nfor i in range(a[0]):\n    print(b.count(i + 1))\n\n"}
{"label": 55, "index": 7135, "code": "N, M = list(map(int, input().split()))\nL = []\nfor i in range(N):\n\tL.append(0)\nfor i in range(M):\n\ta, b = list(map(int, input().split()))\n\tL[a - 1] += 1\n\tL[b - 1] += 1\nfor i in range(N):\n\tprint(L[i])"}
{"label": 55, "index": 7136, "code": "\nx = list(map(int, input().split()))\na=[input() for i in range(x[1])]\ncount=[]\n\nfor i in range(0,x[0]+2):\n    count=count+[[0,i]]\n\nfor i in a:\n    i=list(map(int, i.split()))\n    count[i[0]][0]+=1\n    count[i[1]][0]+=1\n   \n  \nfor i in range (1,x[0]+1):\n    print(count[i][0])\n"}
{"label": 55, "index": 7137, "code": "from collections import defaultdict\n\n\ndef main():\n    n, m = map(int, input().split())\n\n    d = {}\n    for i in range(1, n+1):\n        d[i] = 0\n    \n    for _ in range(m):\n        a, b = map(int, input().split())\n        d[a] += 1\n        d[b] += 1\n\n    for i, v in sorted(d.items()):\n        print(v)\n\n\nif __name__ == \"__main__\":\n    main()"}
{"label": 55, "index": 7138, "code": "a = [int(num) for num in input().split()]\ncounts = [0 for i in range(a[0])]\nfor i in range(0,a[1]):\n    b = [int(num) for num in input().split()]\n    counts[b[0]-1]+=1\n    counts[b[1]-1]+=1\nfor i in counts:\n    print(i)"}
{"label": 55, "index": 7139, "code": "N,M=list(map(int, input().split()))\n\na = [0]*M\nb = [0]*M\nc = [0]*N\n\nfor i in range(M):\n    a[i],b[i]=list(map(int, input().split()))\n\nfor j in range(N):\n    \n    for k in range(M):\n        if a[k]==j+1:\n            c[j]+=1\n\n        if b[k]==j+1:\n            c[j]+=1\n\n    print(c[j])"}
{"label": 55, "index": 7140, "code": "N, M = list(map(int, input().split()))\nab = []\nfor i in range(M):\n    ab.append(list(map(int, input().split())))\n\n\ndp = {}\nfor i in range(M):\n    a = ab[i][0]\n    b = ab[i][1]\n    if a not in dp:\n        dp[a] = 1\n    else:\n        dp[a] += 1\n\n    if b not in dp:\n        dp[b] = 1\n    else:\n        dp[b] += 1\n\nfor i in range(1, N + 1):\n    if i in dp:\n        print(dp[i])\n    else:\n        print(0)"}
{"label": 55, "index": 7141, "code": "def b():\n    # N \u500b\u306e\u90fd\u5e02\u304c\u3042\u308a\u3001M \u672c\u306e\u9053\u8def\u304c\u3042\u308a\u307e\u3059\u3002\n    # i(1\u2266i\u2266M) \u756a\u76ee\u306e\u9053\u8def\u306f\u3001\u90fd\u5e02 ai \u3068 \u90fd\u5e02 bi (1\u2266ai,bi\u2266N) \u3092\u53cc\u65b9\u5411\u306b\u7d50\u3093\u3067\u3044\u307e\u3059\u3002\n    # \u540c\u3058 2 \u3064\u306e\u90fd\u5e02\u3092\u7d50\u3076\u9053\u8def\u306f\u30011 \u672c\u3068\u306f\u9650\u308a\u307e\u305b\u3093\u3002\n    # \u5404\u90fd\u5e02\u304b\u3089\u4ed6\u306e\u90fd\u5e02\u306b\u5411\u3051\u3066\u3001\u4f55\u672c\u306e\u9053\u8def\u304c\u4f38\u3073\u3066\u3044\u308b\u304b\u6c42\u3081\u3066\u304f\u3060\u3055\u3044\u3002\n    #\n    # \u5236\u7d04\n    # 2\u2266N,M\u226650\n    # 1\u2266ai,bi\u2266N\n    # ai\u2260bi\n    # \u5165\u529b\u306f\u5168\u3066\u6574\u6570\u3067\u3042\u308b\u3002\n    n, m = map(int, input().split())\n    city = [0]*n\n    for i in range(m):\n        ai, bi = map(int, input().split())\n        city[ai-1] += 1\n        city[bi-1] += 1\n    for c in city: print(c)\n    pass\n\nb()"}
{"label": 55, "index": 7142, "code": "N, M = [int(i) for i in input().split()]\ng = [[int(i) for i in input().split()] for j in range(M)]\nf = [item for sublist in g for item in sublist]\nfor i in range(1,N+1):\n    print(f.count(i))"}
{"label": 55, "index": 7143, "code": "N,M=map(int,input().split())\nlis=list()\nfor var in range(1,M+1):\n    a,b=map(int,input().split())\n    lis.append(a)\n    lis.append(b)\n\nfor n in range(1,N+1):\n    print(lis.count(n))"}
{"label": 55, "index": 7144, "code": "read = lambda: map(int, input().split())\nn, m = read()\ng = [0] * (n + 1)\nfor i in range(m):\n    a, b = read()\n    g[a] += 1\n    g[b] += 1\nprint('\\n'.join(map(str, g[1:])))"}
{"label": 55, "index": 7145, "code": "n,m = map(int,input().split())\nans = [0]*(n+1)\nfor _ in range(m):\n  a,b = map(int,input().split())\n  ans[a] += 1\n  ans[b] += 1\nfor a in ans[1:]:\n  print(a)"}
{"label": 55, "index": 7146, "code": "n, m = map(int, input().split())\n\nroad_list = [0] * n\n\nfor num in range(m):\n  a, b = map(int, input().split())\n  road_list[a - 1] += 1\n  road_list[b-  1] += 1\n\nfor road in road_list:\n  print(road)"}
{"label": 55, "index": 7147, "code": "n,m=map(int,input().split())\nc=[0]*n\nfor i in range(m):\n    a,b=map(int,input().split())\n    c[a-1]+=1\n    c[b-1]+=1\nfor i in range(n):\n    print(c[i])"}
{"label": 55, "index": 7148, "code": "import collections\n\n\ndef main():\n    n, m = map(int, input().split())\n\n    streets = collections.defaultdict(list)\n\n    for i in range(m):\n        a, b = map(int, input().split())\n        streets[a].append(b)\n        streets[b].append(a)\n\n    for i in range(1, n + 1):\n        print(len(streets[i]))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 55, "index": 7149, "code": "def int_input():\n    line = input()\n    return [int(x) for x in line.split()]\n\nn, m = int_input()\ncities = {}\n\nfor i in range(n):\n    cities[i+1] = []\n\nfor i in range(m):\n    a, b = int_input()\n    cities[a].append(b)\n    cities[b].append(a)\n\nfor i in sorted(cities.keys()):\n    print(len(cities[i]))\n"}
{"label": 56, "index": 7150, "code": "d = []\nn, k = map(int, input().split())\ndata = [[int(i) for i in input().split()] for i in range(n)]\ndata.sort()\ncount = 0\nfor i in data:\n    count += i[1]\n    if count >= k:\n        print(i[0])\n        break"}
{"label": 56, "index": 7151, "code": "N,K = list(map(int,input().split()))\ndata = []\ndef insert(num,N,K):\n    for i in range(N):\n        if num[i][1] >= K:\n            print(num[i][0])\n            break\n        else:\n            K -= num[i][1]\nnum = [list(map(int,input().split())) for i in range(N)]\nnum.sort(key=lambda x:x[0])\ninsert(num,N,K)\n"}
{"label": 56, "index": 7152, "code": "n,k = map(int, input().split())\nt = []\nfor i in range(n):\n\tti = tuple(map(int, input().split()))\n\tt.append(ti)\n\nt = sorted(t, key=lambda x: x[0])\n\nres = 0\nx = 0\nfor i in range(n):\n\tres = t[i][0]\n\tinc = t[i][1]\n\tx += inc\n\tif x >= k:\n\t\tbreak\n\nprint(res)"}
{"label": 56, "index": 7153, "code": "# -*- coding: utf-8 -*-\n\nimport sys\nimport os\nimport math\n\nN, K = map(int, input().split())\n\nA = []\nfor i in range(N):\n    a, b = map(int, input().split())\n    A.append((a, b))\n\nA.sort()\n\ni = 0\ncnt = 0\nfor a in A:\n    v = a[0]\n    num = a[1]\n    cnt += num\n\n    if cnt >= K:\n        print(v)\n        break"}
{"label": 56, "index": 7154, "code": "n, k = map(int, input().split())\na = []\ncount = 0\n\nfor i in range(n):\n    a.append(list(map(int, input().split())))\na = sorted(a, key = lambda x: x[0])\ni = 0\nwhile count < k:\n    count += a[i][1]\n    ans = a[i][0]\n    i += 1\nprint (ans)\n"}
{"label": 56, "index": 7155, "code": "N, K = map(int, raw_input().split())\na = []\nb = []\nfor i in range(N):\n    temp0, temp1 = map(int, raw_input().split())\n    a.append(temp0)\n    b.append(temp1)\n\nindex = sorted(range(N), key=a.__getitem__)\n\nfor i in range(N):\n    K -= b[index[i]]\n    if K <= 0:\n        print(a[index[i]])\n        break"}
{"label": 56, "index": 7156, "code": "# Big Array\nn,k =  list(map(int, input().split()))\n\nA = []\nfor i in range(n):\n    a,b = list(map(int, input().split())) \n    A.append([a,b])\n    \nA.sort(key=lambda x:x[0])\n\ncnt = 0\nfor i in range(n):\n    cnt += A[i][1]\n    if ( cnt >= k ):\n        print(A[i][0])\n        break"}
{"label": 56, "index": 7157, "code": "tmp = input().split(\" \")\nN = int(tmp[0])\nK = int(tmp[1])\n\nnum = [0 for i in range(10**5)]\nfor i in range(N):\n    tmp = input().split(\" \")\n    a = int(tmp[0])\n    b = int(tmp[1])\n    num[a-1] = num[a-1] + b\n\ntmp = 0\ni = 0\nwhile tmp < K:\n    tmp = tmp + num[i]\n    if tmp >= K:\n        print(i+1)\n    i = i + 1"}
{"label": 56, "index": 7158, "code": "N, K = [int(x) for x in input().split()]\n\narray = []\ncount = 0\nfor i in range(N):\n    array.append(tuple(map(int, input().split())))\n\narray.sort()\nK -= 1\nfor tup in array:\n    if K < tup[1]:\n        print(tup[0])\n        break\n    else:\n        K -= tup[1]"}
{"label": 56, "index": 7159, "code": "# C\nimport numpy as np\nN, K = map(int, input().split())\na_list = []\nb_list = []\nfor i in range(N):\n    a, b = map(int, input().split())\n    a_list.append(a)\n    b_list.append(b)\n\na_order = np.argsort(a_list)\nkc = 0\nfor i in range(N):\n    kc += b_list[a_order[i]]\n    if kc >= K:\n        print(a_list[a_order[i]])\n        break\n"}
{"label": 56, "index": 7160, "code": "n,k=map(int,input().split())\nd={}\nfor i in range(n):\n\ta,b=map(int,input().split())\n\tif a in d:d[a]+=b\n\telse:d[a]=b\ncnt=0\nd=sorted(tuple(d.items()),key=lambda a:a[0])\nfor i in d:\n\tif cnt+i[1]>=k:\n\t\tprint(i[0]);quit()\n\tcnt+=i[1]"}
{"label": 56, "index": 7161, "code": "from operator import itemgetter, attrgetter\nNK = list(map(int,input().split()))\nAB = sorted([tuple(map(int, input().split())) for _ in range(NK[0])],key = itemgetter(0))\nfor i,j in AB:\n    NK[1] = NK[1] - j\n    if NK[1]<=0:\n        print(i)\n        break"}
{"label": 56, "index": 7162, "code": "import sys\nr = [0]*(100000+1)\nn,k = [int(x) for x in sys.stdin.readline().split()]\nfor i in range(n):\n\ta, b = [int(x) for x in sys.stdin.readline().split()]\n\tr[a] += b\nc = 0\nfor i,j in enumerate(r):\n\tc += j\n\tif c >= k:\n\t\tprint(i)\n\t\tbreak"}
{"label": 56, "index": 7163, "code": "N,K = map(int,raw_input().split())\n\nab_list=[]\n\ncount = 0\nfor i in range(N):\n    a,b = map(int,raw_input().split())\n    ab_list.append([a,b])\n    \nab_list = sorted(ab_list,key=lambda ab:ab[0])\n\nfor i in range(N):\n    count+=ab_list[i][1]\n    if count>=K:\n        print ab_list[i][0]\n        break\n\n"}
{"label": 56, "index": 7164, "code": "n,k=map(int,raw_input().split())\ncnt=[0]*(10**5+1)\nfor i in xrange(n):\n    a,b=map(int,raw_input().split())\n    cnt[a]+=b\nfor i in xrange(10**5+1):\n    if k-cnt[i]<=0:\n        print i\n        break\n    k-=cnt[i]\n"}
{"label": 56, "index": 7165, "code": "def int_input():\n    line = input()\n    return [int(x) for x in line.split()]\n\nn, k = int_input()\nnums = {}\n\nfor i in range(n):\n    a, b = int_input()\n    nums[i] = (a, b)\n\ns = 0\nfor i, x in sorted(nums.values()):\n    s += x\n    if k <= s:\n        print(i)\n        break\n"}
{"label": 56, "index": 7166, "code": "N,K = [int(i) for i in input().split(\" \")]\nnum = [0]*((10**5)+1)\nfor i in range(N):\n    a_k,b_k = [int(i) for i in input().split(\" \")]\n    num[a_k] += b_k\nfor i, v in enumerate(num): # i \u306f index v \u306f \u4e2d\u8eab\n    K = K - v\n    if K<=0:\n        print(i)\n        break"}
{"label": 56, "index": 7167, "code": "# -*- coding: utf-8 -*-\nN, K = map(int, raw_input().split())    \nab = [map(int, raw_input().split()) for i in xrange(N)]\nab.sort()\nfor a, b in ab:\n    if K <= b:\n        print a\n        break\n    else:\n        K -= b\n"}
{"label": 56, "index": 7168, "code": "def main():\n    N, K = list(map(int, input().strip().split()))\n    num_counts = {}\n    for _ in range(N):\n        a, b = list(map(int, input().strip().split()))\n        if a in num_counts:\n            num_counts[a] += b\n        else:\n            num_counts[a] = b\n\n    num_counts = sorted(num_counts.items(),\n                        key=lambda x: x[0])\n    for n, c in num_counts:\n        if K - c <= 0:\n            print(n)\n            break\n        K -= c\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 56, "index": 7169, "code": "def c():\n    n, k = map(int, input().split())\n    U = []\n    for i in range(n):\n        U.append(tuple(map(int, input().split())))\n    U = sorted(U, key=lambda i: i[0])\n    # print(U)\n    for i in U:\n        k -= i[1]\n        if k <= 0:\n            print(i[0])\n            break\n\nc()\n"}
{"label": 56, "index": 7170, "code": "N, K = map(int, input().split())\nfreq = [0] * (10**5 + 1)\nfor n in range(N):\n    a, b = map(int, input().split())\n    freq[a] += b\n    \nfor i, f in enumerate(freq):\n    K -= f\n    if K <= 0:\n        print(i)\n        break\n"}
{"label": 56, "index": 7171, "code": "col = {}\nN, K = [int(i) for i in input().split()]\nfor _ in range(N):\n\ta_i, b_i = [int(i) for i in input().split()]\n\tif not a_i in col:\n\t\tcol[a_i] = b_i\n\telse:\n\t\tcol[a_i] += b_i\n\ncount = 0\nfor i in sorted(col.items()):\n\tcount += i[1]\n\tif count >= K:\n\t\tprint(i[0])\n\t\tbreak"}
{"label": 56, "index": 7172, "code": "n, k = map(int, raw_input().split())\nary = []\nfor i in xrange(n):\n    a, b = map(int, raw_input().split())\n    ary.append([a, b]) \nary.sort(key=lambda x:x[0])\nfor i in xrange(n):\n    k -= ary[i][1]\n    if k <= 0:\n        result = ary[i][0]\n        break\nprint result\n"}
{"label": 56, "index": 7173, "code": "m = {}\nn, k = map(int, input().split())\nfor j in range(0, n):\n    a, b = map(int, input().split())\n    m[a] = (m[a] if a in m else 0) + b\n\ni = 0\nfor a, b in sorted(m.items()):\n    i += b\n    if i >= k:\n        print(a)\n        break\n"}
{"label": 56, "index": 7174, "code": "N,K=map(int,raw_input().split())\nK-=1\ns={}\nfor i in range(N):\n    a,b=map(int,raw_input().split())\n    if a in s:\n        s[a] += b\n    else:\n        s[a] = b\n\nc=sorted(s.items())\n\nindex = 0\nfor i in c:\n    index += i[1]\n    if K<index:\n        print i[0]\n        break"}
{"label": 56, "index": 7175, "code": "N, K = map(int, input().split())\n\ndic = {}\nfor i in range(N):\n    a, b = map(int, input().split())\n    if a in dic:\n        dic[a] += b\n    else:\n        dic[a] = b\nkeys = list(dic.keys())\nkeys.sort()\n\ncur_pos = 0\nfor key in keys:\n    b = dic[key]\n    cur_pos += b\n    if cur_pos >= K:\n        print(key)\n        break"}
{"label": 56, "index": 7176, "code": "import sys\nr = [0]*100000\nn,k = [int(x) for x in sys.stdin.readline().split()]\nfor i in range(n):\n\ta, b = [int(x) for x in sys.stdin.readline().split()]\n\tr[a-1] += b\nc = 0\nfor i,j in enumerate(r):\n\tc += j\n\tif c >= k:\n\t\tprint(i+1)\n\t\tbreak"}
{"label": 56, "index": 7177, "code": "n, k = map(int,input().split(\" \"))\nnum_count = dict()\nfor i in range(n):\n    a, b = map(int, input().split(\" \"))\n    if a not in num_count:\n        num_count[a] = 0\n\n    num_count[a] += b\n\ntemp = 0\nfor key in sorted(num_count.keys()):\n    temp += num_count[key]\n    if temp >= k:\n        print(key)\n        break\n"}
{"label": 56, "index": 7178, "code": "if __name__ == \"__main__\":\n    N,K = map(int, input().split())\n    deg = [0 for x in range(10 ** 5 + 1)]\n    for x in range(N):\n        a,b = map(int, input().split())\n        deg[a] += b\n    res = 0\n    for i,val in enumerate(deg):\n        res += val\n        if (res >= K):\n            print (i)\n            break\n"}
{"label": 56, "index": 7179, "code": "from operator import itemgetter\nN, K = [int(i) for i in input().split()]\nab = [[int(i) for i in input().split()] for j in range(N)]\nab = sorted(ab, key=itemgetter(0))\nfor row in ab:\n    K -= row[1]\n    if K <= 0:\n        print(row[0])\n        break"}
{"label": 56, "index": 7180, "code": "from sys import stdin\nn,k = map(int,stdin.readline().split())\na = []\nfor _ in xrange(n):\n    x,y = map(int,stdin.readline().split())\n    a.append( (x,y) )\na.sort()\ncur = 0\nfor x,y in a:\n    cur += y\n    if cur >=k:\n        break\nprint x"}
{"label": 56, "index": 7181, "code": "import sys\nfrom collections import Counter\n\ndef solve():\n    N, K = map(int, input().split())\n    cntr = Counter()\n\n    for i in range(N):\n        ai, bi = map(int, sys.stdin.readline().split())\n        cntr[ai] += bi\n\n    cntr = sorted(cntr.items())\n    # print(cntr)\n\n    cnt = 0\n\n    for a, b in cntr:\n        cnt += b\n\n        if cnt >= K:\n            print(a)\n            return\n\n\nif __name__ == '__main__':\n    solve()"}
{"label": 56, "index": 7182, "code": "n,k=map(int,input().split())\np=[]\nfor i in range(n):\n    a,b=map(int,input().split())\n    p.append([a,b])\n\np.sort()\n\nans=0\nfor i in range(n):\n    ans += p[i][1]\n    if ans >= k:\n        print(p[i][0])\n        break"}
{"label": 56, "index": 7183, "code": "# coding: utf-8\n\nl = 10 ** 5\nnum = [0] * (l + 1)\nn, k = map(int, raw_input().split())\n\nfor _ in xrange(n):\n    a, b = map(int, raw_input().split())\n    num[a] += b\n\nfor i in xrange(1, l+1):\n    k -= num[i]\n    if k <= 0:\n        print i\n        break\n"}
{"label": 56, "index": 7184, "code": "read = lambda: map(int, input().split())\nn, k = read()\nN = 10 ** 5 + 10\nc = [0] * N\nfor i in range(n):\n    a, b = read()\n    c[a] += b\nfor i in range(N):\n    k -= c[i]\n    if k <= 0:\n        ans = i\n        break\nprint(ans)"}
{"label": 56, "index": 7185, "code": "import sys\nfrom collections import defaultdict\n\ndef main():\n    line = sys.stdin.readline()\n    lst = line.split()\n    n = int(lst[0])\n    k = int(lst[1])\n\n    cnt_dic = defaultdict(int)\n    for line in sys.stdin:\n        lst = line.split()\n        a = int(lst[0])\n        b = int(lst[1])\n\n        cnt_dic[a] += b\n\n    cnt = 0\n    for key in sorted(cnt_dic.keys()):\n        val = cnt_dic[key]\n        cnt += val\n\n        # sys.stderr.write(\"%d\" % cnt)\n        if cnt >= k:\n            print(\"%d\" % key)\n            break\n\n    return 0\n\nif __name__ == '__main__':\n    sys.exit(main())\n"}
{"label": 56, "index": 7186, "code": "import sys\nimport numpy as np\nimport collections\nn,k = [int(x) for x in sys.stdin.readline().split()]\nr = collections.defaultdict(int)\nfor i in range(n):\n\ta, b = [int(x) for x in sys.stdin.readline().split()]\n\tr[a] += b\nd = sorted(r.items())\nc = 0\nfor i,j in enumerate(d):\n\tc += j[1]\n\tif c >= k:\n\t\tprint(int(j[0]))\n\t\tbreak"}
{"label": 56, "index": 7187, "code": "N, K = map(int, input().split())\n\ninput_data = []\nfor x in range(N):\n    a, b = map(int, input().split())\n    input_data.append([a,b])\n\ninput_data.sort()\ncount = 0\nfor i in range(N):\n    count += input_data[i][1]\n    if count >= K:\n        print(input_data[i][0])\n        break"}
{"label": 56, "index": 7188, "code": "import sys\n\nN , K = map(int, input().split())\nbox = []\n\nfor i in range(N):\n    box.append([int(i) for i in input().split()])\n    \nbox.sort()\ncnt = 0\nfor i in range(N):\n    cnt += box[i][1]\n    if cnt >= K:\n        print(box[i][0])\n        sys.exit()"}
{"label": 56, "index": 7189, "code": "import heapq\n\ndef solve():\n  firstline = raw_input().split(' ')\n  N = int(firstline[0])\n  K = int(firstline[1])\n\n  heap = []\n  for i in range(N) :\n    ar = raw_input().split(' ')\n    a = int(ar[0])\n    b = int(ar[1])\n    heapq.heappush(heap, (a, b))\n\n  count = 0\n  while len(heap) > 0 :\n    t = heapq.heappop(heap)\n    count += t[1]\n    if (count >= K) : return t[0]\n  return -1\n\nif __name__ == '__main__' :\n  print solve()"}
{"label": 56, "index": 7190, "code": "# N,K\u306e\u628a\u63e1\nl1 = list(map(int, input().split()))\nN = l1[0]\nK = l1[1]\n\n#\u30ea\u30b9\u30c8\u3092\u3059\u3050\u306b\u4f5c\u6210\u3059\u308b\u306e\u304c\u60aa\u624b\u3002\u6570\u5024\u3068\u56de\u6570\u3092\u30bb\u30c3\u30c8\u4f5c\u6210\ndic = {}\nfor i in range(N):\n\tl2 = list(map(int, input().split()))\n\ta = l2[0]\n\tb = l2[1]\n\tif a in dic:\n\t\tdic[a] += b #\u65e2\u306b\u5b58\u5728\u3059\u308b\u6570\u5024\u3067\u3042\u308c\u3070\u305d\u306e\u307e\u307e\u56de\u6570\u3092\uff0b\n\telse:\n\t\tdic.update({a: b}) #\u65b0\u898f\u306e\u6570\u5024\u3067\u3042\u308c\u3070\u8ffd\u52a0\n\ndic = sorted(dic.items(), key=lambda x:x[0])\n\nx = 0\nfor key, value in dic: #\u56de\u6570\u5024\u3092\u8db3\u3057\u3066\u3044\u304d\u3001\u7dcf\u56de\u6570\uff1e\uff1dK\u3068\u306a\u3063\u305f\u3068\u304d\u306e\u6570\u5024\u3092\u51fa\u529b\u3059\u308b\u3002\n\tx += value\n\tif x >= K:\n\t\tprint(str(key))\n\t\tbreak"}
{"label": 56, "index": 7191, "code": "n, k = map(int, raw_input().split())\nop = {}\nfor _ in range(n):\n    a, b = map(int, raw_input().split())\n    if a not in op: op[a] = 0\n    op[a] += b\nnums = sorted(op.keys())\nfor i in nums:\n    k -= op[i]\n    if k <= 0:\n        print i\n        break\n"}
{"label": 56, "index": 7192, "code": "# def makelist(n, m):\n#     return [[0 for i in range(m)] for j in range(n)]\n\n# n = int(input())\n# a, b = map(int, input().split())\n# s = input()\n\n\nN, K = map(int, input().split())\nl = [0] * N\nfor i in range(N):\n    a, b = map(int, input().split())\n    l[i] = (a, b)\n\n\nl.sort()\ni = 0\ncnt = 0\nans = -1\nwhile True:\n    a, b = l[i]\n    K -= b\n    if K <= 0:\n        ans = a\n        break\n\n    i += 1\n\nprint(ans)\n"}
{"label": 56, "index": 7193, "code": "# -*- coding:utf-8 -*-\nimport sys\nN, K = map(int, input().split())\nans = []\nfor tmp in range(N):\n    a, b = map(int, input().split())\n    ans.append((a,b))\nans.sort()\ns = 0\nfor tmp in range(len(ans)):\n    s += (ans[tmp])[1]\n    if s >= K:\n        print((ans[tmp])[0])\n        sys.exit()"}
{"label": 56, "index": 7194, "code": "from collections import Counter\nN, K = [int(x) for x in input().split()]\ncounter = Counter()\n\nfor _ in range(N):\n    a,b = [int(x) for x in input().split()]\n    counter[a] += b\n\nt = 0\nfor key,value in sorted(counter.items()):\n    t += value\n    if t >= K:\n        print(key)\n        break\n"}
{"label": 56, "index": 7195, "code": "if __name__ == '__main__':\n\tN, K = map(int, input().split())\n\n\tn=[]\n\tnum=0\n\tfor j in range(100000):\n\t\tn.append(0)\n\n\tfor i in range(N):\n\t\ta, b = map(int, input().split())\n\t\tn[a-1] += b\n\n\tfor j in range(100000):\n\t\tnum+=n[j]\n\t\tif(num>=K):\n\t\t\tbreak\n\n\tprint(j+1)"}
{"label": 56, "index": 7196, "code": "N,K = map(int,input().split())\nd = {}\nfor n in range(N):\n\ta,b = map(int,input().split())\n\tif a in d:\n\t\td[a] += b\n\telse:\n\t\td[a] = b \nd2 = list(d)\nd2.sort()\ncnt = 0\nfor i in d2:\n\tcnt += d[i]\n\tif cnt >= K:\n\t\tprint(i)\n\t\tbreak"}
{"label": 56, "index": 7197, "code": "n, k = map(int, input().split())\ndic = {}\nlst = []\nans = 0\nfor i in range(n):\n    a, b = map(int, input().split())\n    if (a in dic)==False:\n        dic[a] = b\n        lst.append(a)\n    else:\n        dic[a] += b\nlst.sort()\n\nfor i in range(len(dic)):\n    if k > (dic[lst[i]] + ans):\n        ans += dic[lst[i]]\n    else:\n        ans = lst[i]\n        break\nprint(ans)"}
{"label": 56, "index": 7198, "code": "\nd={}\nN,K=map(int,raw_input().split())\n\nfor i in xrange(N):\n    a,b=map(int,raw_input().split())\n#    print a,b\n    if a in d:\n        d[a] = d[a] + b\n    else:\n        d[a]=b\n#    td={}\n#    cnt=0\n#    print d\n#    for key in sorted(d):\n#        print key\n#        if cnt<=K:\n#            td[key]=d[key]\n#        else:\n#            break\n#    d=td\n\naa=None\ncnt=0\n#print d\nfor k in sorted(d):\n    aa=k\n    cnt+=d[k]\n#    print cnt\n    if cnt>=K:\n        break\nprint aa\n\n    \n"}
{"label": 56, "index": 7199, "code": "temp=input().split()\nN=int(temp[0])\nK=int(temp[1])\nab=[[int(j) for j in input().split()] for i in range(N)]\n\nab.sort()\nwhile ab[0][1]<K:\n\tK-=ab[0][1]\n\tdel ab[0]\n\t#print(ab)\nprint(ab[0][0])"}
{"label": 56, "index": 7200, "code": "from operator import itemgetter\n\nN, K = [int(x) for x in input().split()]\nArray = list()\nA = list()\ncount = 0\nans = 0\nfor i in range(N):\n\tA.append([int(x) for x in input().split()])\n\nA.sort(key=itemgetter(0))\nfor i in range(N):\n\tcount += A[i][1]\n\tif count >= K:\n\t\tans = A[i][0]\n\t\tbreak\n\t\t\nprint(ans)"}
{"label": 56, "index": 7201, "code": "# -*- coding: utf-8 -*-\n\nn,k = map(int, raw_input().split())\n\narray = [0]*(10**5+1)\nnum = 0        \nindex = 0\nfor i in range(n):\n    a,b = map(int, raw_input().split())\n    array[a] += b\nfor i in range(10**5+1):\n    num += array[i]\n    if(num>=k):\n        index = i\n        break\n    \n\nprint(index)"}
{"label": 56, "index": 7202, "code": "# -*- coding: utf-8 -*-\n\nN, K = map(int, input().split(' '))\n\narray = [tuple(map(int, input().split(' '))) for i in range(N)]\narray = sorted(array, key=lambda x: x[0])\n\ncount = 0\ni = 0\nwhile True:\n    count = count + array[i][1]\n    if count >= K:\n        break\n    i = i + 1\n\nprint(array[i][0])\n"}
{"label": 56, "index": 7203, "code": "# -*- coding: utf-8 -*-\n\nN, K = map(int,input().split())\n\nA = []\ntable = []\n\nfor i in range(N):\n    #\u4e8c\u3064\u306e\u6574\u6570\u3092\u8aad\u307f\u53d6\u3063\u3066\u3001\u914d\u5217\u3068\u3057\u3066\u305f\u3059\n    a,b = map(int,input().split())\n    table.append([a,b])\n\ntable.sort(key=lambda x:x[0])\nt = 0\n\nfor i in range(N):\n    t += table[i][1]\n    if t >= K:\n        print (table[i][0])\n        break\n"}
{"label": 56, "index": 7204, "code": "n,k = map(int,input().split())\nl = []\nfor _ in range(n):\n  a,b = map(int,input().split())\n  l.append((a,b))\nl.sort()\ncnt = 0\nfor a,b in l:\n  cnt += b\n  if k <= cnt:\n    print(a)\n    break"}
{"label": 56, "index": 7205, "code": "tmp1 = list(map(int, input().split(\" \")))\nnum = [0 for i in range(10**5)]\nfor i in range(tmp1[0]):\n    tmp = list(map(int, input().split(\" \")))\n    num[tmp[0]-1] += tmp[1]\ntmp = 0\ni = 0\nwhile tmp < tmp1[1]:\n    tmp = tmp + num[i]\n    if tmp >= tmp1[1]:\n        print(i+1)\n    i = i + 1"}
{"label": 56, "index": 7206, "code": "import sys\n\nN, K = (int(i) for i in raw_input().split())\nab_list = [[int(i) for i in raw_input().split()] for i in range(N)]\nab_list = sorted(ab_list, key=lambda ab: ab[0])\n\nnum = 0\nfor i in range(N):\n    num += ab_list[i][1]\n    if num >= K:\n        print ab_list[i][0]\n        break"}
{"label": 56, "index": 7207, "code": "# -*- coding:utf-8 -*-\nimport sys\nN, K = map(int, input().split())\na, b, ans = ( [], [], [] )\nfor tmp in range(N):\n    a, b = map(int, input().split())\n    ans.append((a,b))\nans.sort()\ns = 0\nfor tmp in range(len(ans)):\n    s += (ans[tmp])[1]\n    if s >= K:\n        print((ans[tmp])[0])\n        sys.exit()"}
{"label": 56, "index": 7208, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\n\n\ndef main():\n    n,k = LI()\n    r = []\n    for _ in range(n):\n        r.append(LI())\n\n    r = sorted(r)\n    c = 0\n    for a,b in r:\n        c += b\n        if k <= c:\n            return a\n\nprint(main())\n"}
{"label": 56, "index": 7209, "code": "import sys\nimport random\n\ndef rd():\n        return sys.stdin.readline().rstrip()\n\ndef rdi():\n        return [ int(x) for x in rd().split() ]\n\nN, K = rdi()\na = []\nb = []\n\nfor i in range(N):\n        ai, bi = rdi()\n        a.append(ai)\n        b.append(bi)\n\nc = {}\nfor i in range(N):\n        ai = a[i]\n        bi = b[i]\n        if ai not in c:\n                c[ai] = bi\n        else:\n                c[ai] += bi\nr = K\nfor x in sorted(c.keys()):\n        y = c[x]\n        r -= y\n        if r <= 0:\n                print x\n                break"}
{"label": 56, "index": 7210, "code": "# Big Array\nn,k =  list(map(int, input().split()))\n\nA = []\nfor i in range(n):\n    a,b = list(map(int, input().split())) \n    A.append([a,b])\n    \nA.sort(key=lambda x:x[0])\n\ncnt = 0\nfor i in range(n):\n    cnt += A[i][1]\n    if ( cnt >= k ):\n        print(A[i][0])\n        break"}
{"label": 56, "index": 7211, "code": "import numpy as np\n\nN,K = map(int,input().split())\n\nal = []\nbl = []\n\nfor i in range(N):\n\ta,b = map(int, input().split())\n\tal.append(a)\n\tbl.append(b)\n\nal = np.array(al)\nbl = np.array(bl)\n\ns = al.argsort()\n\nbl = bl[s]\nal = al[s]\n\nc = 0\n\nfor a,b in zip(al,bl):\n\tc += b\n\tif c >= K:\n\t\tprint(a)\n\t\tbreak\n\n\n"}
{"label": 56, "index": 7212, "code": "tmp = input().split(\" \")\nK = int(tmp[1])\n \nnum = [0 for i in range(10**5)]\nfor i in range(int(tmp[0])):\n    tmp = input().split(\" \")\n    num[int(tmp[0])-1] += int(tmp[1])\n    \ntmp = 0\ni = 0\nwhile tmp < K:\n    tmp = tmp + num[i]\n    if tmp >= K:\n        print(i+1)\n    i = i + 1"}
{"label": 56, "index": 7213, "code": "def main():\n    N, K = (int(i) for i in input().split())\n    array = [[int(i) for i in input().split()] for i in range(N)]\n    array = sorted(array, key=lambda x:x[0])\n\n    for i in range(N):\n        K -= array[i][1]\n        if (K <= 0):\n            print(array[i][0])\n            break\n\n\nif __name__ == '__main__':\n    main()\n\n"}
{"label": 56, "index": 7214, "code": "from operator import itemgetter\nN, K = map(int, input().split())\nl = []\nfor i in range(N):\n    a, b = map(int, input().split())\n    l.append([a, b])\nl.sort(key = itemgetter(0))\nc = 0\nfor e in l:\n    add = e[1]\n    c += add\n    if c >= K:\n        print(e[0])\n        break\n"}
{"label": 56, "index": 7215, "code": "n, k = map(int, raw_input().split())\nd = {}\nfor i in xrange(n):\n    a, b = map(int, raw_input().split())\n    d[a] = d.get(a, 0) + b\ni = 1\nks = sorted(d)\nfor e in ks:\n    if i <= k < i+d[e]:\n        print e\n        break\n    i += d[e]\n"}
{"label": 56, "index": 7216, "code": "N , K = map(int,input().split())\ncnt =0\nget_val = [[0,0]]*N\nfor i in range(N):\n    get_val[i] = list(map(int,input().split()))\nget_val.sort()\n\nfor i in range(N):\n    cnt = cnt + get_val[i][1]\n    if cnt >= K:\n        print(get_val[i][0])\n        break"}
{"label": 56, "index": 7217, "code": "from collections import defaultdict as dd\ndef main():\n    N, K = map(int, input().split())\n\n    d = dd(int)\n    for n in range(N):\n        a,b = map(int, input().split())\n        d[a] += b\n\n    count = 0\n    A = sorted(d.keys())\n    for k in A:\n        # print(k,v)\n        count += d[k]\n        if count >= K:\n            print(k)\n            break\n\nif __name__ == \"__main__\":\n    # global stime\n    # stime = time.clock()\n    main()\n\n"}
{"label": 56, "index": 7218, "code": "n,k = map(int,raw_input().split())\nl = []\ns = list()\nfor i in range(n):\n    v,count = map(int,raw_input().split())\n    l.append((count,v))\n\nl = sorted(l, key=lambda x: x[1])\n\ncountTmp = 0\nfor count,v in l:\n    countTmp = countTmp + count\n    if k <= countTmp:\n       print v\n       break\n       "}
{"label": 56, "index": 7219, "code": "n, k = map(int, raw_input().split())\nab = {}\nfor i in range(n):\n    l = map(int, raw_input().split())\n    if l[0] not in ab:\n        ab[l[0]] = [l[1]]\n    else:\n        ab[l[0]].append(l[1])\nkey = sorted(ab.keys())\nx = 0\nfor i in key:\n    sum = 0\n    for j in ab[i]:\n        sum += j\n    x += sum\n    if k <= x:\n        print i\n        break\n"}
{"label": 56, "index": 7220, "code": "n, k = [int(i) for i in input().split()]\ntuple_array = []\n\nfor i in range(n):\n    a, b = [int(i) for i in input().split()]\n    tuple_array.append((a, b))\n\nnum = 0\nfor a, b in sorted(tuple_array):\n    num += b\n    if num >= k:\n        print(a)\n        break"}
{"label": 56, "index": 7221, "code": "n, k = map(int, input().split())\nl = []\n\nfor i in range(n):\n    a, b = map(int, input().split())\n    l.append([a, b])\n\nl.sort(key=lambda x: x[0])\n\ncount = 0\nfor j in l:\n    count += j[1]\n    if k <= count:\n        print(j[0])\n        break\n"}
{"label": 56, "index": 7222, "code": "N, K = map(int, raw_input().split())\nD = [map(int, raw_input().split()) for _ in range(N)]\n\npos = 0\nfor a, b in sorted(D):\n    if pos + b < K:\n        pos += b\n    else:\n        print a\n        exit()\n"}
{"label": 56, "index": 7223, "code": "N,K = map(int, input().split())\na = []\nd = {}\nfor i in range(N):\n    ls = list(map(int, input().split()))\n    if ls[0] in d:\n        d[ls[0]] = d[ls[0]] + ls[1]\n    else:\n        d[ls[0]] = ls[1]\nd = sorted(d.items())\ncnt = 0\nfor t in d:\n    cnt += t[1]\n    if cnt >= K:\n        print(t[0])\n        break"}
{"label": 56, "index": 7224, "code": "N,K = map(int,input().split())\nl = []\n\nfor i in range(N):\n    x,y = (map(int, input().split()))\n    l.append((x,y))\nl.sort()\ncnt = 0\nans = 0\nindex = 0\nwhile cnt < K:\n    ans = l[index][0]\n    cnt += l[index][1]\n    index += 1\n\nprint(ans)"}
{"label": 56, "index": 7225, "code": "n, k = map(int, input().split())\nab = []\nfor i in range(n):\n        li = list(map(int, input().split()))\n        ab.append(li)\nab.sort(key = lambda x : x[0]) \nsum = 0\nfor i in range(n):\n        sum += ab[i][1]\n        if sum >= k:\n                print(ab[i][0])\n                break"}
{"label": 56, "index": 7226, "code": "N, K = map(int, input().split())\ncount = 0\nm_list = []\nfor i in range(N):\n    m_list.append(list(map(int, input().split())))\n\nm_list.sort(key=lambda x: x[0])\n\nfor m in m_list:\n    count += m[1]\n    if count >= K:\n        print(m[0])\n        break\n"}
{"label": 56, "index": 7227, "code": "N, K = list(map(int, input().split()))\nmemo = [0] * ((10 ** 5) + 1)\nfor _ in range(N):\n    a, b = list(map(int, input().split()))\n    memo[a] += b\nfor i, v in enumerate(memo):\n    K = K - v\n    if K<=0:\n        print(i)\n        exit()"}
{"label": 56, "index": 7228, "code": "def c():\n    n, k = map(int, input().split())\n    U = []\n    for i in range(n):\n        U.append(tuple(map(int, input().split())))\n    U = sorted(U, key=lambda i: i[0])\n    # print(U)\n    for i in U:\n        if k <= i[1]:\n            print(i[0])\n            break\n        k -= i[1]\n    else:\n        print(U[-1][0])\n        # if k <= 0:\n        #     print(i[0])\n        #     break\n        # print(i, k)\n\nc()"}
{"label": 56, "index": 7229, "code": "N, K = map(int, input().split())\ncnt = [0 for _ in range(100000)]\n\nfor _ in range(N):\n    a, b = map(int, input().split())\n    cnt[a - 1] += b\n\nfor i in range(100000):\n    K -= cnt[i]\n    if K <= 0:\n        print(i + 1)\n        break\n"}
{"label": 56, "index": 7230, "code": "#ABC061C\n\nn,k=map(int,raw_input().split())\nl=[]\nfor i in xrange(n):\n a,b=map(int,raw_input().split())\n l.append((a,b))\nl.sort()\ns=0\nfor i in xrange(n):\n s+=l[i][1]\n if s>=k:\n  print l[i][0]\n  break\n"}
{"label": 56, "index": 7231, "code": "N, K = map(int, input().split())\nA = {}\nfor _ in range(N):\n    a, b = map(int, input().split())\n    if not a in A:\n        A[a] = 0\n    A[a] += b\n\nc = 0\nfor a in sorted(A.keys()):\n    c += A[a]\n    if c >= K:\n        print(a)\n        break\n"}
{"label": 56, "index": 7232, "code": "import sys\n\nstdin = sys.stdin\n\n\ndef na(): return map(int, stdin.readline().split())\n\n\ndef ns(): return stdin.readline().strip()\n\n\nstack = []\nn,k = na()\nfor i in range(n):\n    stack.append(list(na()))\nstack.sort(key=lambda x: x[0])\n\nsp = 0\nfor x in stack:\n    sp += x[1]\n    if sp >= k:\n        print(x[0])\n        break"}
{"label": 56, "index": 7233, "code": "n, k = [int(i) for i in input().split()]\n\narray = [None for i in range(n)]\n\nfor i in range(n):\n    array[i] = [int(i) for i in input().split()]\n\n# print(array)\n#\n# print(sorted(array))\n\nsa = sorted(array)\n\n# print(sa)\n\ncnt = 0\n\nfor i in range(n):\n    cnt += sa[i][1]\n    if cnt >= k:\n        print(sa[i][0])\n        break\n"}
{"label": 56, "index": 7234, "code": "def rren(): return list(map(int, input().split()))\n\n\na = set()\nb = dict()\nN, K = rren()\n\nfor i in range(N):\n    a_t, b_t = rren()\n    if(a_t not in a):\n        a.add(a_t)\n        b[a_t] = b_t\n    else:\n        b[a_t] += b_t\n\nli_a = list(a)\nli_a.sort()\ncount = K\nfor i in range(K):\n    count -= b[li_a[i]]\n    if(count <= 0):\n        print(li_a[i])\n        break\n"}
{"label": 56, "index": 7235, "code": "N,K = map(int, raw_input().split())\nab = sorted(map(int, raw_input().split()) for _ in range(N))\nc = 0\nfor a,b in ab:\n  if c+b >= K:\n    print a\n    break\n  c += b\n"}
{"label": 56, "index": 7236, "code": "def C(_mid):\n    tmp_sum = 0\n    if len(ab) <= _mid:\n        return False\n    for i in range(0, _mid):\n        tmp_sum += ab[i][1]\n    if tmp_sum < K:\n        return True\n    else:\n        return False\n\n\nN, K = list(map(int, input().split()))\nab = []\nfor i in range(N):\n    a, b = list(map(int, input().split()))\n    ab.append([a, b])\n\nab.sort(key=lambda x: x[0])\n\nlb = 0\nub = 100000\nwhile ub - lb > 1:\n    # print(str(lb) + \" \" + str(ub))\n    mid = int((lb + ub) / 2)\n    if C(mid):\n        lb = mid\n    else:\n        ub = mid\n\nprint(ab[lb][0])\n"}
{"label": 56, "index": 7237, "code": "n, k = map(int, input().split())\nl = [0] * 100001\nfor i in range(n):\n    a, b = map(int, input().split())\n    l[a] += b\nfor i, j in enumerate(l):\n    k -= j\n    if k <= 0:\n        print(i)\n        break\n"}
{"label": 56, "index": 7238, "code": "n, k = map(int, raw_input().split())\ncounter = {}\nfor i in range(n):\n    a, b = map(int, raw_input().split())\n    if counter.has_key(a):\n        counter[a] += b\n    else:\n        counter[a] = b\n\nnum = 0\nfor ele in sorted(counter.items()):\n    num += ele[1]\n    if k <= num:\n        print ele[0]\n        break"}
{"label": 56, "index": 7239, "code": "N,K = list(map(int,input().split()))\ndata = []\ndef insert(num,N,K):\n    x = 0\n    for i in range(N):\n        x += num[i][1]\n        if x >= K:\n            print(num[i][0])\n            break\nnum = [list(map(int,input().split())) for i in range(N)]\nnum.sort(key=lambda x:x[0])\ninsert(num,N,K)\n"}
{"label": 56, "index": 7240, "code": "# -*- coding: utf-8 -*-\nimport math\nimport sys\nimport itertools\nimport numpy as np\n\nn, k = map(int, input().split())\nmemo = np.zeros(100010, dtype=np.int)\n\nfor i in range(n):\n    a, b = map(int, input().split())\n    memo[a] += b\n\ns = 0\nfor i in range(len(memo)):\n    s += memo[i]\n    if k <= s:\n        print(i)\n        exit()"}
{"label": 56, "index": 7241, "code": "N, K = list(map(int, input().split()))\nval_dict = dict()\n\nfor _ in range(N):\n    a, b = list(map(int, input().split()))\n    val_dict[a] = val_dict.get(a, 0) + b\n\nval_keys = sorted(val_dict.keys())\n\nK_rest = K\nfor key in val_keys:\n    K_rest -= val_dict[key]\n    if K_rest <= 0:\n        print(key)\n        break\n\n"}
{"label": 56, "index": 7242, "code": "N,K = map(int,input().split())\n\nfrom collections import defaultdict\nd = defaultdict(int)\n\nfor i in range(N):\n  a,b = map(int,input().split())\n  d[a]+=b\n\nd = sorted(d.items())\n\ncnt = 0\nfor a,b in d:\n  cnt += b\n  if cnt >= K:\n    print(a)\n    break"}
{"label": 56, "index": 7243, "code": "n, k = map(int, input().split())\ndata = []\nfor i in range(n):\n    data.append( list(map(int, input().split())) )\ndata.sort( key = lambda x: x[0] )\npos = 0\nfor val in data:\n    pos += val[1]\n    if k <= pos:\n        print(val[0])\n        break"}
{"label": 56, "index": 7244, "code": "n, k = map(int, raw_input().split(' '))\nd = {}\n\nfor i in range(n):\n\ta, b = map(int, raw_input().split(' '))\n\tif d.has_key(a):\n\t\td[a] += b\n\telse:\n\t\td[a] = b\n\nl = d.keys()\nl.sort()\n\ns = 0\nfor i in l:\n\ts += d[i]\n\tif s >= k:\n\t\tprint i\n\t\tbreak\n\n"}
{"label": 56, "index": 7245, "code": "# coding: utf-8\nn,m=map(int,input().split())\ndic={}\nfor i in range(n):\n    x,y=map(int,input().split())\n    if x not in dic:\n        dic[x]=y\n    else:\n        dic[x]+=y\nfor i in sorted(dic.items()):\n    m-=i[1]\n    if m<=0:\n        print(i[0])\n        break;\n"}
{"label": 56, "index": 7246, "code": "N,K = map(int,input().split())\ntmp=[]\nfor i in range(N):\n    a_i,b_i=map(int,input().split())\n    tmp.append([a_i,b_i])\n\ntmp.sort(key=lambda x:x[0])\nfor t in tmp:\n    K -= t[1]\n    if K<=0:\n        print(t[0])\n        break"}
{"label": 56, "index": 7247, "code": "n, k = map(int, raw_input().split())\nd = {}\nfor i in range(n):\n    a, b = map(int, raw_input().split())\n    if a not in d:\n        d[a] = 0\n    d[a] += b\n\nc = 0\nfor a, b in sorted(d.items()):\n    c += b\n    if c >= k:\n        print a\n        break\n"}
{"label": 56, "index": 7248, "code": "N, K = map(int,input().split())\n\nl = []\n\nfor i in range(N):\n    a, b = map(int, input().split())\n    l.append((a,b))\ndef c(x):\n    return  x[0]\nl = sorted(l, key=c)\nt = 0\nfor a,b in l:\n    t2 = t\n    t += b\n    if t2 <= K and t >= K:\n        break\n\nprint(a)"}
{"label": 56, "index": 7249, "code": "N, K = map(int, input().split())\n\nd = []\nfor _ in range(N):\n    a, b = map(int, input().split())\n    d.append((a, b))\n\nd.sort(key=lambda x: x[0])\n\nc = 0\nfor p in d:\n    c += p[1]\n    if c >= K:\n        print(p[0])\n        break\n"}
{"label": 56, "index": 7250, "code": "N, K = map(int, raw_input().split())\nV = {}\nfor i in range(N):\n    a, b = map(int, raw_input().split())\n    if not a in V:\n        V[a] = 0\n    V[a] += b\nfor v, num in sorted(V.items()):\n    K -= num\n    if K <= 0:\n        print v\n        break"}
{"label": 56, "index": 7251, "code": "n,k = map(int,input().split())\nls = []\n\nfor i in range(n):\n    a,b = [int(i) for i in input().split()]\n    ls.append([a,b])\n\nls.sort()\nfor a,b in ls:\n    if b >= k:\n        print(a)\n        break\n    else:\n        k -= b"}
{"label": 56, "index": 7252, "code": "N, K = list(map(int, input().split(\" \")))\n\nnums = {}\n\nfor _ in range(N):\n    a, b = list(map(int, input().split(\" \")))\n    \n    if a in nums:\n        nums[a] += b\n    else :\n        nums[a] = b\n        \nacc = 0\nfor key in sorted(nums.keys()):\n    acc += nums[key]\n    if acc >= K:\n        print(key)\n        break"}
{"label": 56, "index": 7253, "code": "n, k = map(int, input().split())\ninserts = [tuple(map(int, input().split())) for _ in range(n)]\ninserts.sort()\ncumsum = 0\nfor a, b in inserts:\n    cumsum += b\n    if k <= cumsum:\n        print(a)\n        break\n"}
{"label": 56, "index": 7254, "code": "N,K=list(map(int,input().split()))\nl=[]\nfor i in range(N):\n a,b=list(map(int,input().split()))\n l.append((a,b))  \nl.sort()\ns = 0\nfor a,b in l:\n    s += b\n    if K <= s:\n        print(a)\n        break"}
{"label": 56, "index": 7255, "code": "import sys\nimport bisect\n\nN, K = map(int, sys.stdin.readline().split())\nd = []\n\n\nfor i in range(N):\n    a, b = map(int, sys.stdin.readline().split())\n    d.append([a,b])\n\nd.sort()\n\nl = [0] * N\nl[0] = d[0][1]\n\nfor i in range(1, N):\n    l[i] = d[i][1]+ l[i-1]\n\npos = bisect.bisect_left(l, K)\nprint(d[pos][0])"}
{"label": 56, "index": 7256, "code": "#!/usr/bin/env python\n\nN,K=map(int,raw_input().split())\narr=[[0,0]]*N\nfor i in range(N):\n    arr[i]=map(int,raw_input().split())\n#print \"Not sorted arr\",\n#print arr\narr=sorted(arr)\n#print \"sorted\",\n#print arr\nsum=0\nfor i in range(N):\n#    print \"i: \"+str(i)\n    sum=sum+arr[i][1]\n#    print \"sum = \"+str(sum)\n    if sum>=K:\n#        print \"sum: \"+str(sum)\n        print arr[i][0]\n        break"}
{"label": 56, "index": 7257, "code": "N, K = map(int, input().split())\nd = {}\nfor n in range(N):\n    a, b = map(int, input().split())\n    d[a] = d.get(a, 0) + b\n\nkeys = list(d.keys())\nkeys.sort()\n\ncnt = 0\nfor k in keys:\n    cnt += d[k]\n    if cnt >= K:\n        print(k)\n        exit()\nprint(keys[-1])\n"}
{"label": 56, "index": 7258, "code": "from collections import defaultdict\n\n\ndef main():\n    n, k = map(int, input().split())\n\n    d = defaultdict(lambda: 0)\n    for _ in range(n):\n        a, b = map(int, input().split())\n        d[a] += b\n\n    cnt = 0\n    for i, v in sorted(d.items()):\n        cnt += v\n        if cnt >= k:\n            print(i)\n            break\n\n\nif __name__ == \"__main__\":\n    main()"}
{"label": 56, "index": 7259, "code": "N,K = map(int, input().split())\nab_list = []\nfor i in range(N):\n    a = list(map(int, input().split()))\n    ab_list.append(a)\n    \nab_list.sort()\n    \ncount =0\nfor i in ab_list:\n    count+=i[1]\n    if (count >= K):\n        print(i[0])\n        break"}
{"label": 56, "index": 7260, "code": "n,K = list(map(int, input().split()))\nseq = []\nd = {}\nfor _ in range(n):\n    a,b = list(map(int, input().split()))\n    if a in d.keys():\n        d[a] += b\n    else:\n        d[a] = b\nc = 0\nfor k in sorted(d.keys()):\n    ans = k\n    # print(ans,k,c)\n    c += d[k]\n    if c >= K:\n        ans = k\n        break\nprint(ans)\n"}
{"label": 56, "index": 7261, "code": "#N,K\u306e\u53d6\u5f97\nN,K = list(map(int,input().split()))\n\n#[(a_1,b_1),(a_2,b_2),...]\u306e\u5f62\u3067\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\nnumList = []\nfor a,b in [ map(int,input().split()) for _ in range(N) ]:\n\tnumList.append((a,b))\n\n#\u4f5c\u6210\u3057\u305f\u30ea\u30b9\u30c8\u3092\u3001a\u306e\u5927\u304d\u3055\u3067\u6607\u9806\u30bd\u30fc\u30c8\nnumList = sorted(numList,key=lambda x:x[0])\n\n#\u5c0f\u3055\u3044\u9806\u306b\u8981\u7d20\u6570b\u3092\u8db3\u3057\u3066\u3044\u304d\u3001K\u3092\u8d85\u3048\u305f\u6bb5\u968e\u3067\u51fa\u529b\u3001\u7d42\u4e86\ncount = 0\nfor a,b in numList:\n\tcount += b\n\tif count>=K:\n\t\tprint(a)\n\t\tquit()"}
{"label": 56, "index": 7262, "code": "import sys\n\ndef solve():\n    N, K = map(int, input().split())\n\n    cnt = [0]*(10**5 + 1)\n\n    for i in range(N):\n        ai, bi = map(int, sys.stdin.readline().split())\n        cnt[ai] += bi\n\n    tot = 0\n\n    for i, cnti in enumerate(cnt):\n        tot += cnti\n\n        if tot >= K:\n            print(i)\n            return\n\nif __name__ == '__main__':\n    solve()"}
{"label": 56, "index": 7263, "code": "n, k = [int(x) for x in input().split(' ')]\nexist = []\nstorage = [0 for x in range(10 ** 5+1)]\nfor i in range(n):\n    a, b = [int(x) for x in input().split(' ')]\n    storage[a] += b\nsum = 0\nfor i in range(1, 10**5+1):\n    sum += storage[i]\n    if sum >= k:\n        print(i)\n        break\n    else:\n        continue\n"}
{"label": 56, "index": 7264, "code": "N, K = list(map(int, input().split(\" \")))\n\nd = dict()\n\nfor i in range(N):\n    a, b = list(map(int, input().split(\" \")))\n    if a in d:\n        d[a] = d[a] + b\n    else:\n        d[a] = b\n    \nans_sum = 0\n\nfor key in sorted(d.keys()):\n    ans_sum += d[key]\n    if (ans_sum) >= K:\n        print(key)\n        break"}
{"label": 56, "index": 7265, "code": "cnt_a = [0] * 100001\n\nN, K = [int(n) for n in input().split()]\nfor n in range(N):\n  a, b = [int(i) for i in input().split()]\n  cnt_a[a] += b\n\ncnt = 0\nfor n in range(100001):\n  cnt += cnt_a[n]\n  if cnt >= K:\n    print(n)\n    import sys\n    sys.exit(0)"}
{"label": 56, "index": 7266, "code": "import sys\nd = [0] * 10**5\nN, K = [int(x) for x in sys.stdin.readline().split()]\n\nfor i in range(N):\n    a, b = [int(x) for x in sys.stdin.readline().split()]\n    d[a-1] += b\n    \ncnt = 0\n\nfor i, j in enumerate(d):\n    cnt += j\n    if cnt >= K:\n        print(i+1)\n        break"}
{"label": 56, "index": 7267, "code": "n,k = map(int, raw_input().split())\nab = []\nfor i in range(n):\n  a,b = map(int, raw_input().split())\n  ab.append((a,b))\n\nab.sort()\nk -= 1\nfor a,b in ab:\n  if k >= b:\n    k -= b\n  else:\n    print a\n    exit()\n"}
{"label": 56, "index": 7268, "code": "n, k = map(int, input().split())\na = []\nfor i in range(n):\n    x, y = map(int, input().split())\n    a.append((x, y))\na.sort()\nfor i in range(n):\n    if k - a[i][1] <= 0:\n        print(a[i][0])\n        break\n    k -= a[i][1]\n"}
{"label": 56, "index": 7269, "code": "from sys import stdin, stdout\nfrom collections import defaultdict\ndef readLine_int_list():return list(map(int, stdin.readline().split()))\ndef main():\n    n,k = readLine_int_list()\n    \n    l = defaultdict(lambda: 0)\n    for i in range(n):\n        a,b =readLine_int_list()\n        l[a] += b\n    \n    cnt = 0\n    for key in sorted(l.keys()):\n        val = l[key]\n        cnt += val\n        if cnt >= k:\n            print(key)\n            break\n\n\nif __name__ == \"__main__\":\n    main()"}
{"label": 56, "index": 7270, "code": "a,b=map(int,input().split())\nalllist=[]\ngoukei=1\nfor i in range(a):\n    tmplist=list(map(int,input().split()))\n    alllist.append(tmplist)\n\nalllist2=sorted(alllist)\nfor i in range(a):\n    goukei=alllist2[i][1]+goukei\n    if goukei>b:\n        owari=alllist2[i][0]\n        break\n    else:\n        pass\n\nprint(owari)"}
{"label": 56, "index": 7271, "code": "n,k = map(int, input().split())\na = []\nfor i in range(n):\n    x,y = map(int, input().split())\n    a.append((x,y))\na.sort()\nfor x,y in a:\n    if y >= k:\n        print(x)\n        exit()\n    else:\n        k -= y\n\n"}
{"label": 56, "index": 7272, "code": "nums = [int(x) for x in input().split()]\nN = nums[0]\nK = nums[1]\narr = []\nfor i in range(N):\n\tnums = [int(x) for x in input().split()]\n\tarr.append(tuple(nums))\n\narr = sorted(arr, key=lambda x: x[0])\n\nvol = 0\nfor i in range(len(arr)):\n\tvol = vol + arr[i][1]\n\tif vol >= K:\n\t\tprint(arr[i][0])\n\t\tbreak"}
{"label": 56, "index": 7273, "code": "from collections import defaultdict\nN, K = map(int, input().split())\nseq = defaultdict(lambda: 0) \nfor i in range(N):\n    a, b = map(int, input().split())\n    seq[a] += b\n\nvalues = list(seq.keys())\n\nvalues.sort()\nans = 0\nfor i in range(len(values)):\n    K -= seq[values[i]]\n    if(K<=0):\n        print(values[i])\n        break\n\n"}
{"label": 56, "index": 7274, "code": "n,k=map(int,input().split())\narr=[]\nfor _ in range(n):\n    arr.append(tuple(map(int,input().split())))\narr.sort(key=lambda x:x[0])\ncur=0\nfor pair in arr:\n    cur+=pair[1]\n    if cur>=k:\n        print(pair[0])\n        break\n"}
{"label": 56, "index": 7275, "code": "n, k = map(int, input().split(\" \"))\n \nnums=[]\nfor i in range(0, n):\n    a, b = map(int, input().split(\" \"))\n    nums.append([a, b])\n\nnums.sort(key=lambda x:x[0])\n#print(nums)\nsum = 0\nfor i in range(0, n):\n    sum +=nums[i][1]\n    if sum >= k:\n        print(nums[i][0])\n        break\n\n\n"}
{"label": 56, "index": 7276, "code": "N,K = map(int,input().split())\ntemp = []\nc,t = K,-1\nfor i in range(N):\n    temp.append(list(map(int,input().split())))\ntemp.sort()\nwhile c>0:\n    t += 1\n    c -= temp[t][1]\nprint(temp[t][0])"}
{"label": 56, "index": 7277, "code": "N, K = map(int, input().split())\nab = [tuple(map(int, input().split())) for i in range(N)]\n\nab.sort()\n\nfor a, b in ab:\n    K -= b\n    if K <= 0:\n        print(a)\n        break\n"}
{"label": 56, "index": 7278, "code": "a = list(map(int,input().split(\" \")))\nb = list()\n\nfor i in range(a[0]):\n    b.append(list(map(int,input().split(\" \"))))\n\nc = sorted(b, key=lambda x:x[0])\n\nans = c[0][0]\ntmp = 0\n\n\nfor i in range(a[0]):\n    tmp = tmp + c[i][1]\n    if tmp >= a[1]:\n        ans = c[i][0]\n        break\n\nprint(ans)"}
{"label": 56, "index": 7279, "code": "# -*- coding: utf-8 -*-\nN, K = map(int, raw_input().split())    \nab = [map(int, raw_input().split()) for i in xrange(N)]\nab.sort()\nfor a, b in ab:\n    if K <= b:\n        print a\n        break\n    else:\n        K -= b"}
{"label": 57, "index": 7280, "code": "n,m=map(int,input().split())\na=[1,3,5,7,8,10,12]\nb=[4,6,9,11]\nc=[2]\n\nif ((n in a) and (m in a)) or ((n in b) and (m in b)) :\n  print(\"Yes\")\nelse:\n  print(\"No\")"}
{"label": 57, "index": 7281, "code": "g1 = [1, 3, 5, 7, 8, 10, 12]\ng2 = [4, 6, 9, 11]\ng3 = [2]\n\ns = map(int, raw_input().split())\n\nx = s[0]\ny = s[1]\n\nif (x in g1) and (y in g1):\n    print \"Yes\"\nelif (x in g2) and (y in g2):\n    print \"Yes\"\nelif (x in g3) and (y in g3):\n    print \"Yes\"\nelse:\n    print \"No\""}
{"label": 57, "index": 7282, "code": "a = [1, 3, 5, 7, 8, 10, 12]\nb = [4, 6, 9, 11]\nc = [2]\n\nx, y = map(int, raw_input().split())\n\nif x in a:\n    if y in a:\n        print 'Yes'\n    else:\n        print 'No'\nelif x in b:\n    if y in b:\n        print 'Yes'\n    else:\n        print 'No'\nelse:\n    if y in c:\n        print 'Yes'\n    else:\n        print 'No'"}
{"label": 57, "index": 7283, "code": "a=set([1,3,5,7,8,10,12])\nb=set([4,6,9,11])\nx,y=map(int, input().split())\nif x in a and y in a or x in b and y in b:\n print ('Yes')\nelse:\n print ('No')\n"}
{"label": 57, "index": 7284, "code": "a = list(map(int,input().split(\" \")))\n\nb = [1,3,5,7,8,10,12]\nc = [4,6,9,11]\nd = 2\n\nif a[0] in b:\n    a0 = 1\nelif a[0] in c:\n    a0 = 2\nelse:\n    a0 = 3\n\nif a[1] in b:\n    a1 = 1\nelif a[1] in c:\n    a1 = 2\nelse:\n    a1 = 3\n\nif a0 == a1:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n\n\n"}
{"label": 57, "index": 7285, "code": "a, b = map(int, input().split())\n\nt = [0, 2, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0]\nif t[a - 1] == t[b - 1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 57, "index": 7286, "code": "def main():\n    d = dict()\n    for i in range(1, 13):\n        if i == 2:\n            d[i] = 'a'\n        elif i in [4, 6, 9, 11]:\n            d[i] = 'b'\n        else:\n            d[i] = 'c'\n\n    x, y = map(int ,input().split())\n    if d[x] == d[y]: print(\"Yes\")\n    else: print(\"No\")\n\n\nif __name__ == \"__main__\":\n    main()"}
{"label": 57, "index": 7287, "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nx,y = map(int,raw_input().split(\" \"))\n \nlista = [1,3,5,7,8,10,12]\nlistb = [4,6,9,11]\n \nif(x in lista):\n\tif(y in lista):\n\t\tprint \"Yes\"\n\telse:\n\t\tprint \"No\"\n \nelif(x in listb):\n\tif(y in listb):\n\t\tprint \"Yes\"\n\telse:\n\t\tprint \"No\"\n \n \nelse:\n\tprint \"No\"\n"}
{"label": 57, "index": 7288, "code": "x, y = [int(x) for x in input().split()]\n\nlist1 = [1, 3, 5, 7, 8, 10, 12]\nlist2 = [4, 6, 9, 11]\nlist3 = [2]\n\nif x in list1:\n\tif y in list1:\n\t\tprint(\"Yes\")\n\telse:\n\t\tprint(\"No\")\nelif x in list2:\n\tif y in list2:\n\t\tprint(\"Yes\")\n\telse:\n\t\tprint(\"No\")\nelse:\n\tif y in list3:\n\t\tprint(\"Yes\")\n\telse:\n\t\tprint(\"No\")\n"}
{"label": 57, "index": 7289, "code": "a = [1, 3, 5 ,7, 8, 10, 12]\nb = [4, 6, 9, 11]\nc = [2]\nx, y = map(int, raw_input().split())\nif (x in a and y in a) or (x in b and y in b) or (x in c and y in c):\n    print 'Yes'\nelse:\n    print 'No'\n"}
{"label": 57, "index": 7290, "code": "\ndef f(x, y):\n    a = [[1,3,5,7,8,10,12], [4,6,9,11], [2]]\n    for b in a:\n        if x in b and y in b:\n            return True\n    return False\n\nx, y = [int(x) for x in input().split(' ')]\n\nprint('Yes' if f(x, y) else 'No')\n\n\n"}
{"label": 57, "index": 7291, "code": "A = set([1,3,5,7,8,10,12])\nB = set([4,6,9,11])\nC = set([2])\n\nx,y = map(int, input().split())\n\nif x in A and y in A:\n    print(\"Yes\")\n\nelif x in B and y in B:\n    print(\"Yes\")\n\nelif x in C and y in C:\n    print(\"Yes\")\n\nelse:\n    print(\"No\")"}
{"label": 57, "index": 7292, "code": "import sys\n\n# sys.stdin = open(\"a1.in\")\n\n\nx, y = map(int, input().split())\na = [1, 3, 5, 7, 8, 10, 12]\nb = [4, 6, 9, 11]\nc = [2]\n\nif x in a:\n    gx = 1\nif x in b:\n    gx = 2\nif x in c:\n    gx = 3\nif y in a:\n    gy = 1\nif y in b:\n    gy = 2\nif y in c:\n    gy = 3\n\nif gx == gy:\n    print('Yes')\nelse:\n    print('No')\n"}
{"label": 57, "index": 7293, "code": "l1 = [1, 3, 5, 7, 8, 10, 12]\nl2 = [4, 6, 9, 11]\n\nx, y = [int(n) for n in input().split()]\n\nif (x in l1 and y in l1) or (x in l2 and y in l2):\n  print(\"Yes\")\nelse:\n  print(\"No\")"}
{"label": 57, "index": 7294, "code": "x, y = list(map(int,input().split()))\nif x in [1, 3, 5, 7, 8, 10] and y in [3, 5, 7, 8, 10, 12]:\n    print('Yes')\nelif x in [4, 6, 9] and y in [6, 9, 11]:\n    print('Yes')\nelse:\n    print('No')"}
{"label": 57, "index": 7295, "code": "a = [1, 3, 5, 7, 8, 10, 12]\nb = [4, 6, 9, 11]\nx, y = map(int, input().split())\nprint('Yes' if (x in a and y in a) or (x in b and y in b) else 'No')\n"}
{"label": 57, "index": 7296, "code": "g1=[1,3,5,7,8,10,12]\ng2=[4,6,9,11]\ng3=[2]\nx,y=[int(i) for i in input().split()]\n\nif x in g1 and y in g1:\n    print('Yes')\nelif x in g2 and y in g2:\n    print('Yes')\nelif x in g3 and y in g3:\n    print('Yes')\nelse:\n    print('No')"}
{"label": 57, "index": 7297, "code": "def group(inp):\n    if inp ==  '4' or inp == '6' or inp == '9' or inp == '11':\n        return 2\n    if inp == '2':\n        return 3\n    else:\n        return 1\n\nif __name__ == '__main__':\n    x, y = input().split()\n    if group(x) == group(y):\n        print('Yes')\n    else:\n        print('No')\n"}
{"label": 57, "index": 7298, "code": "G1 = [1, 3, 5, 7, 8, 10, 12]\nG2 = [4, 6, 9, 11]\n \nx, y = map(int, input().strip().split(' '))\n \nif x in G1 and y in G1 or x in G2 and y in G2:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 57, "index": 7299, "code": "import sys\n\n#        1  2  3  4  5  6  7  8  9 10 11 12\ns = [-1, 0, 2, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0]\n\ndef solve():\n    x, y = map(int, input().split())\n\n    if s[x] == s[y]:\n        ans = 'Yes'\n    else:\n        ans = 'No'\n\n    print(ans)\n\nif __name__ == '__main__':\n    solve()"}
{"label": 57, "index": 7300, "code": "i1 = input()\ni2 = i1.split()\n\ni2[0] = int(i2[0])\ni2[1] = int(i2[1])\n\nl1 = [1,3,5,7,8,10,12]\nl2 = [4,6,9,11]\nl3 = [2]\n\nif (i2[0] in l1 and i2[1] in l1) or (i2[0] in l2 and i2[1] in l2) or (i2[0] in l3 and i2[1] in l3):\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 57, "index": 7301, "code": "x,y=map(int,input().split());a=[4,6,9,11];b=[1,3,5,7,8,10,12];print(['No','Yes'][(x in a and y in a)+(x in b and y in b)])"}
{"label": 57, "index": 7302, "code": "def flg_fun(a):\n    if a in [1,3,5,7,8,10,12]:\n        b=1\n    else:\n        if a==2:\n            b=2\n        else:\n            b=3\n    return b\n\n\ndef assign_fun(x, y):\n    if x==y:\n        print(\"Yes\")\n    else:\n        if flg_fun(x)==flg_fun(y):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\na = input().split(\" \")\nassign_fun(int(a[0]), int(a[1]))"}
{"label": 57, "index": 7303, "code": "g = [0,1,3,1,2,1,2,1,1,2,1,2,1]\nx, y = [int(i) for i in input().split()]\nif(g[x] == g[y]):\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 57, "index": 7304, "code": "#!/bin/usr/python\n\nA = [1,3,5,7,8,10,12]\nB = [4,6,9,11]\nC = [2]\n\nx,y = [int(i) for i in input().split()]\n\nif x in A and y in A or x in B and y in B or x in C and y in C:\n  print(\"Yes\")\nelse:\n  print(\"No\")"}
{"label": 57, "index": 7305, "code": "x, y = map(int, input().split())\nlst = [1, 3, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1]\nif lst[x - 1] == lst[y - 1]:\n    print('Yes')\nelse:\n    print('No')"}
{"label": 57, "index": 7306, "code": "gr = [0, 2, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0]\n\nx, y = map(int, input().split())\n\nif gr[x - 1] == gr[y - 1]:\n    print('Yes')\nelse:\n    print('No')\n"}
{"label": 57, "index": 7307, "code": "data = input().split()\nx = int(data[0])\ny = int(data[1])\n\nL1 = [1,3,5,7,8,10,12]\nL2 = [4,6,9,11]\nL3 = [2]\n\nif((x in L1 and y in L1) or (x in L2 and y in L2) or (x in L3 and y in L3)):\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n"}
{"label": 57, "index": 7308, "code": "\nx, y = map(int, input().split())\n\nset1 = [1, 3, 5, 7, 8, 10, 12]\nset2 = [4, 6, 9, 11]\nset3 = [2]\n\n\nif x in set1:\n    if y in set1:\n        print('Yes')\n    else:\n        print('No')\nelif x in set2:\n    if y in set2:\n        print('Yes')\n    else:\n        print('No')\nelif x == 2:\n    if y == 2:\n        print('Yes')\n    else:\n        print('No')\n"}
{"label": 57, "index": 7309, "code": "x, y = map(int, input().split())\ngroup = (0, 1, 3, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1)\nprint('Yes' if group[x] == group[y] else 'No')\n"}
{"label": 57, "index": 7310, "code": "x,y=map(int,input().split())\nA=[1, 3, 5, 7, 8, 10, 12]\nB=[4, 6, 9, 11]\nC=[2]\nif x in A:\n  a=1\nelif x in B:\n  a=2\nelse:\n  a=3\nif y in A:\n  b=1\nelif y in B:\n  b=2\nelse:\n  b=3\nif a==b:\n  print(\"Yes\")\nelse:\n  print(\"No\")"}
{"label": 57, "index": 7311, "code": "x,y = map(int,input().split())\na = [1,3,5,7,8,10,12]\nb = [4,6,9,11]\nif (x in a and y in a) or (x in b and y in b):\n\tprint('Yes')\nelse:\n\tprint('No')"}
{"label": 57, "index": 7312, "code": "a = [1,3,5,7,8,10,12]\nb = [4,6,9,11]\n\nx,y = map(int,(input().split()))\ncou1 = 0\ncou2 = 0\n\nfor i in a:\n    if i==x or i==y:\n        cou1 += 1\nfor i in b:\n    if i==x or i==y:\n        cou2 += 1\n\nif cou1>1 or cou2>1:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 57, "index": 7313, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\n\n\ndef main():\n    a = set([1,3,5,7,8,10,12])\n    b = set([4,6,9,11])\n    c = set([2])\n    x,y = LI()\n    d = [a,b,c]\n    xi = yi = -1\n    for i in range(3):\n        if x in d[i]:\n            xi = i\n        if y in d[i]:\n            yi = i\n\n    if xi == yi:\n        return 'Yes'\n\n    return 'No'\n\n\n\nprint(main())\n"}
{"label": 57, "index": 7314, "code": "x, y = map(int,input().split())\nt1 = [1,3,5,7,8,10,12]\nt2 = [4,6,9,11]\nt3 = [2]\n\nif x in t1 and y in t1:\n    print(\"Yes\")\nelif x in t2 and y in t2:\n    print(\"Yes\")\nelif x in t3 and y in t3:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 57, "index": 7315, "code": "l = [0, 1, 3, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1]\nx,y = map(int, raw_input().split())\nif l[x] == l[y]:\n    print 'Yes'\nelse:\n    print 'No'\n"}
{"label": 57, "index": 7316, "code": "x, y = map(int, input().split())\ngroup = [[1, 3, 5, 7, 8, 10, 12], [4, 6, 9, 11], [2]]\nret = 'No'\nfor g in group:\n    if x in g and y in g:\n        ret = 'Yes'\nprint(ret)\n"}
{"label": 57, "index": 7317, "code": "#Python\n\nG1=[1,3,5,7,8,10,12]\nG2=[4,6,9,11]\nG3=[2]\n\nN = map(int, raw_input().split())\n#print N\n\n\nif N[0] in G1 and N[1] in G1:\n\tprint 'Yes'\nelif N[0] in G2 and N[1] in G2:\n\tprint 'Yes'\nelif N[0] in G3 and N[1] in G3:\n\tprint 'Yes'\nelse:\n\tprint 'No'\n\n\n"}
{"label": 57, "index": 7318, "code": "x, y = map(int, input().split())\nA = [1, 3, 5, 7, 8, 10, 12]\nB = [4, 6, 9, 11]\ncount = 0\nax = x in A\nay = y in A\nbx = x in B\nby = y in B\nif ax == True and ay == True:\n    print(\"Yes\")\nelif bx == True and by == True:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 57, "index": 7319, "code": "x, y= map(int,input().split())\n\nA = [1, 3, 5, 7, 8, 10, 12]\nB = [4, 6, 9, 11]\nC = [2]\n\nif x in A:\n    if y in A:\n        print(\"Yes\")\n    else:\n        print(\"No\")\nif x in B:\n    if y in B:\n        print(\"Yes\")\n    else:\n        print(\"No\")\nif x in C:\n    if y in C:\n        print(\"Yes\")\n    else:\n        print(\"No\")"}
{"label": 57, "index": 7320, "code": "x, y = map(int, input().split())\nlst1 = [1, 3, 5, 7, 8, 10, 12]\nlst2 = [4, 6, 9, 11]\n\nif (x in lst1)==1 and (y in lst1)==1:\n    print(\"Yes\")\nelif (x in lst2)==1 and (y in lst2)==1:\n    print(\"Yes\")\nelif x==2 and y==2:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 57, "index": 7321, "code": "s1={1,3,5,7,8,10,12}\ns2={4,6,9,11}\ns3={2}\nx,y=map(int,raw_input().split())\nif ((x in s1) and (y in s1)) or ((x in s2) and (y in s2)) or ((x in s3) and (y in s3)):\n print 'Yes'\nelse:\n print 'No'\n"}
{"label": 57, "index": 7322, "code": "M = {2: 0, 4: 1, 6: 1, 9: 1, 11: 1}\nx, y = map(int, raw_input().split())\nprint 'Yes' if M.get(x, 2) == M.get(y, 2) else 'No'"}
{"label": 57, "index": 7323, "code": "# -*- coding: utf-8 -*-\n\ndef check_group(n):\n    if n == 2:\n        return 3\n    elif n in (4, 6, 9, 11):\n        return 2\n    else:\n        return 1\n\nx,y = map(int, raw_input().split())\nxgroup, ygroup = (check_group(x), check_group(y))\nif xgroup == ygroup:\n    print \"Yes\"\nelse:\n    print \"No\"\n"}
{"label": 57, "index": 7324, "code": "x,y = [int(i) for i in input().split()]\n\ngroupA = [1,3,5,7,8,10,12]\ngroupB = [4,6,9,11]\ngroupC = [2]\n\nif x in groupA and y in groupA:\n    print(\"Yes\")\nelif x in groupB and y in groupB:\n    print(\"Yes\")\nelif x in groupC and y in groupC:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 57, "index": 7325, "code": "x, y = list(map(int, input().split()))\ng = [4, 6, 9, 11]\nif x == 2 or y == 2:\n    print('No')\nelif (x in g and y in g) or (x not in g and y not in g):\n    print('Yes')\nelse:\n    print('No')"}
{"label": 57, "index": 7326, "code": "a = [1, 3, 5, 7, 8, 10, 12]\nb = [4, 6, 9, 11]\nx, y = map(int, raw_input().split())\nif (x in a and y in a) or (x in b and y in b):\n    print \"Yes\"\nelse:\n    print \"No\"\n"}
{"label": 57, "index": 7327, "code": "import sys\n\nx, y = [int(x) for x in sys.stdin.readline().split()]\n\na = [1, 3, 5, 7, 8, 10, 12]\nb = [4, 6, 9, 11]\nc = [2]\n\ndef inn(x):\n\txin = ''\n\tif x in a:\n\t\txin = 'a'\n\telif x in b:\n\t\txin = 'b'\n\telse:\n\t\txin = 'c'\n\treturn xin\n\nif inn(x) == inn(y):\n\tprint('Yes')\nelse:\n\tprint('No')"}
{"label": 57, "index": 7328, "code": "a=[1,3,5,7,8,10,12]\nb=[4,6,9,11]\nc=[2]\n\nd=[int(i) for i in input().split()]\n\ndef judge(d):\n    if (d[0] in a) and (d[1] in a):\n        print(\"Yes\")\n    elif (d[0] in b) and (d[1] in b):\n        print(\"Yes\")\n    elif (d[0] in b) and (d[1] in b):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\njudge(d)"}
{"label": 57, "index": 7329, "code": "a = [1 , 3 , 5 ,7 ,8 , 10 , 12]\na1 = [4,6,9,11]\na2 = [2]\nx , y = map(int ,raw_input().split())\nif x in a and y in a:\n\tprint 'Yes'\nelif x in a1 and y in a1:\n\tprint 'Yes'\nelif x in a2 and y in a2:\n\tprint 'Yes'\nelse:\n\tprint 'No'\n"}
{"label": 57, "index": 7330, "code": "\n\n\nx, y = map(int, input().split())\n\ndef whichone(x):\n    a = [1, 3, 5, 7, 8, 10, 12]\n    b = [4, 6, 9, 11]\n    if x in a:\n        return 0\n    if x in b:\n        return 1\n    return 2\n\nx = whichone(x)\ny = whichone(y)\n\nif x == y:\n    print('Yes')\nelse:\n    print('No')\n"}
{"label": 57, "index": 7331, "code": "x,y=map(int, input().split())\n\n\na = [0, 1, 3, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1]\n\nif a[x] == a[y]:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 57, "index": 7332, "code": "x, y = list(map(int, input().split(\" \")))\n\ngroup_list = [[1, 3, 5, 7, 8, 10, 12], [4, 6, 9, 11], [2]]\n\nfinished = False\nfor gl in group_list:\n    if (x in gl) and (y in gl):\n        print(\"Yes\")\n        finished = True\nif finished != True:\n    print(\"No\")"}
{"label": 57, "index": 7333, "code": "group = [0,1,3,1,2,1,2,1,1,2,1,2,1]\n\nx, y = map(int, input().split())\n\nprint(\"Yes\" if group[x] == group[y] else \"No\")\n"}
{"label": 57, "index": 7334, "code": "x,y = [int(i) for i in input().split()]\ngroup1 = [1,3,5,7,8,10,12]\ngroup2 = [4,6,9,11]\nif x in group1 and y in group1:\n    print(\"Yes\")\nelif x in group2 and y in group2:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 57, "index": 7335, "code": "group=[[1,3,5,7,8,10],[4,6,9,11]\\\n\t,[2]]\n\nx = list(map(int, input().split()))\n\n\nfor i in group:\n\tfor j in i:\n\t\tif (x[0]==j):\n\t\t\tfor l in i:\n\t\t\t\tif(x[1]==l):\n\t\t\t\t\tprint(\"Yes\")\n\t\t\t\t\t\n\t\t\t\t\tquit()\n\t\t\t\t\t\nprint(\"No\")\n"}
{"label": 57, "index": 7336, "code": "x, y = map(int, input().split())\n\na = [1, 3, 5, 7, 8, 10, 12]\nb = [4, 6, 9, 11]\n\nif (x in a and y in a) or (x in b and y in b):\n    print('Yes')\nelse:\n    print('No')\n"}
{"label": 57, "index": 7337, "code": "import sys\ngroup = [[1, 3, 5, 7, 8, 10, 12],[4, 6, 9, 11],[2]]\nx, y = list(map(int, input().split()))\nfor g in group:\n    if (x in g) and (y in g):\n        print(\"Yes\")\n        sys.exit()\nprint(\"No\")"}
{"label": 57, "index": 7338, "code": "x, y = map(int, input().split())\n\nabc = [[1, 3, 4, 5, 7, 8, 10, 12], [4, 6, 9, 11], [2]]\n\nresult = \"No\"\nfor i in abc:\n    if (x in i) and (y in i):\n        result = \"Yes\"\n        break\n\nprint(result)"}
{"label": 57, "index": 7339, "code": "x,y = map(int,input().split())\nlst1 = [1,3,5,7,8,10,12]\nlst2 = [4,6,9,11]\nif (x in lst1) and (y in lst1):\n    print(\"Yes\")\nelif (x in lst2) and (y in lst2):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 57, "index": 7340, "code": "# -*- coding:utf-8 -*-\nx, y = map(int, input().split())\na = [1, 3, 5, 7, 8, 10, 12]\nb = [4, 6, 9, 11]\nc = [2]\nif ((x in a) and (y in a)) or ((x in b) and (y in b)) or ((x in c) and (y in c)):\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 57, "index": 7341, "code": "x, y = map(int, input().split())\ng1 = [1, 3, 5, 7, 8, 10, 12]\ng2 = [4, 6, 9, 11]\ng3 = [2]\n\ngroup = [g1, g2, g3]\n\nflag = False\nfor g in group:\n    if x in g and y in g:\n        print(\"Yes\")\n        flag = True\n\nif flag == False:\n    print(\"No\")"}
{"label": 57, "index": 7342, "code": "grp1=[1,3,5,7,8,10,12]\ngrp2=[4,6,9,11]\n\nx,y = map(int, input().split())\n\nprint('Yes') if (x == y) or (x in grp1 and y in grp1) or (x in grp2 and y in grp2) else print('No')\n"}
{"label": 57, "index": 7343, "code": "# -*- coding: utf-8 -*-\nx, y = [int(n) for n in input().split()]\ngroup = [0, 1, 3, 1, 2, 1 , 2, 1, 1, 2, 1, 2, 1]\nif group[x] == group[y]:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 57, "index": 7344, "code": "x, y = map(int, input().split())\nhoge = [[1,3,5,7,8,10,12], [4,6,9,11],[2]]\nans = \"No\"\nfor e in hoge:\n    if x in e and y in e:\n        ans = \"Yes\"\nprint(ans)\n\n"}
{"label": 57, "index": 7345, "code": "# coding: utf-8\n\nimport sys\n\nl1 = [1,3,5,7,8,10,12]\nl2 = [4,6,9,11]\n\nx, y = map(int, input().split())\nif x == 2 or y == 2:\n        print(\"No\")\nelif x in l2:\n        if y in l2:\n                print(\"Yes\")\n        else:\n                print(\"No\")\nelif y in l2:\n        print(\"No\")\nelse:\n        print(\"Yes\")\n"}
{"label": 57, "index": 7346, "code": "x,y=map(int,input().split())\nif x in [1,3,5,7,8,10,12]:\n    x=1\nelif x in [4,6,9,11]:\n    x=2\nelse:\n    x=3\nif y in [1,3,5,7,8,10,12]:\n    y=1\nelif y in [4,6,9,11]:\n    y=2\nelse:\n    y=3\n\nif x==y:\n    print('Yes')\nelse:\n    print('No')\n"}
{"label": 57, "index": 7347, "code": "x,y = map(int,input().split())\n\ndef calc(x):\n    if x == 2:\n        return  -1\n    elif  x == 4 or x == 6 or x == 9 or x == 11:\n        return  -2\n    else:\n        return  -3\n\nif calc(x)==calc(y):\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 57, "index": 7348, "code": "def solve() :\n    ri = raw_input()\n\n    inarr = ri.split(' ')\n    a = inarr[0]\n    b = inarr[1]\n\n    if a in ['2'] :\n        return ( b == '2')\n    elif a in ['4','6','9','11'] :\n        return ( b in ['4','6','9','11'])\n    else :\n        return ( b in ['1','3','5','7','8','10','12'])\n\nif __name__ == '__main__':\n     if solve() : print 'Yes'\n     else : print 'No'"}
{"label": 57, "index": 7349, "code": "lis = [[1,3,5,7,8,10,12],[4,6,9,11],[2]]\nx, y = list(map(int,input().split()))\n\nfor i in lis:\n    if x in i:\n        if y in i:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n"}
{"label": 57, "index": 7350, "code": "x, y = map(int, raw_input().split())\n\ndef group(n):\n    if n == 2:\n        return 1\n    elif n == 4 or n == 6 or n == 9 or n == 11:\n        return 2\n    else:\n        return 3\n\nif group(x) == group(y):\n    print 'Yes'\nelse:\n    print 'No'"}
{"label": 57, "index": 7351, "code": "x,y = map(int,input().split())\na = [1,3,5,7,8,10,12]\nb = [4,6,9,11]\nc = [2]\n\nif x in a and y in a:\n  print(\"Yes\")\nelif x in b and y in b:\n  print(\"Yes\")\nelse:\n  print(\"No\")"}
{"label": 57, "index": 7352, "code": "lst1 = [1,3,5,7,8,10,12]\nlst2 = [4,6,9,11]\nlst3 = [2]\n\nx, y = [int(n) for n in input().split()]\n\nif x in lst1 and y in lst1:\n    print(\"Yes\")\n\nelif x in lst2 and y in lst2:\n    print(\"Yes\")\n\nelse:\n    print(\"No\")\n"}
{"label": 57, "index": 7353, "code": "x, y = list(map(int, input().split(\" \")))\n\ngroup_list = [[1, 3, 5, 7, 8, 10, 12], [4, 6, 9, 11], [2]]\n\nfor i in range(3):\n    if x in group_list[i]:\n        if y in group_list[i]:\n            print(\"Yes\")\n        else:\n            print(\"No\")"}
{"label": 57, "index": 7354, "code": "x,y =map(int,input().split())\n\nL1=[1,3,5,7,8,10,12]\nL2=[4,6,9,11]\nL3=[2]\n\nif x in L1 and y in L1:\n    print(\"Yes\")\n    \nelif x in L2 and y in L2:\n    print(\"Yes\")\n\nelif x in L3 and y in L3:\n    print(\"Yes\")\n    \nelse:\n    print(\"No\")\n"}
{"label": 57, "index": 7355, "code": "#!/bin/python3\n \nimport sys\n \nG1 = [1, 3, 5, 7, 8, 10, 12]\nG2 = [4, 6, 9, 11]\n \nx,y = input().strip().split(' ')\nx,y = [int(x),int(y)]\n \nif x in G1 and y in G1:\n    print(\"Yes\")\nelif x in G2 and y in G2:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 57, "index": 7356, "code": "x,y=map(int,input().split());a=[x,~y,x,y,x,y,x,x,y,x,y,x];print(['No','Yes'][a[~-x]==a[~-y]])"}
{"label": 57, "index": 7357, "code": "l1 = [1,3,5,7,8,10,12]\nl2 = [4,6,9,11]\nl3 = [2]\n\nx, y = map(int, input().split())\nif x in l1 and y in l1:\n    print(\"Yes\")\nelif x in l2 and y in l2:\n    print(\"Yes\")\nelif x in l3 and y in l3:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 57, "index": 7358, "code": "def main():\n    x, y = list(map(int, input().strip().split()))\n    groups = [\n        [1, 3, 5, 7, 8, 10, 12],\n        [4, 6, 9, 11],\n        [2]\n    ]\n    answer = \"No\"\n    for g in groups:\n        if x in g and y in g:\n            answer = \"Yes\"\n            break\n    print(answer)\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 57, "index": 7359, "code": "# -*- coding: utf-8 -*-\nx, y = map(int, input().split(\" \"))\ngroup_a = [1, 3, 5, 7, 8, 10, 12]\ngroup_b = [4, 6, 9, 11]\ngroup_c = [2]\nx_group = \"\"\ny_group = \"\"\n\nif x in group_a:\n    x_group = \"a\"\nelif x in group_b:\n    x_group = \"b\"\nelse:\n    x_group = \"c\"\n\nif y in group_a:\n    y_group = \"a\"\nelif y in group_b:\n    y_group = \"b\"\nelse:\n    y_group = \"c\"\n\nif x_group == y_group:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 57, "index": 7360, "code": "A = set([1, 3, 5, 7, 8, 10, 12])\nB = set({4, 6, 9, 11})\nC = set({2})\nD = set(map(int, raw_input().split()))\nif A.issuperset(D) or B.issuperset(D) or C.issuperset(D):\n    print \"Yes\"\nelse:\n    print \"No\""}
{"label": 57, "index": 7361, "code": "x, y = map(int,input().split())\n\nif x == 2 :\n  print ('No')\n\nif x == 4 or x == 6 or x == 9 or x == 11 :\n  if y == 4 or y == 6 or y == 9 or y == 11 :\n    print ('Yes')\n  else :\n    print ('No')\n\nif x == 1 or x == 3 or x == 5 or x == 7 or x == 8 or x == 10 or x == 12 :\n  if y == 1 or y == 3 or y == 5 or y == 7 or y == 8 or y == 10 or y == 12 :\n    print ('Yes')\n  else :\n    print ('No')\n"}
{"label": 57, "index": 7362, "code": "lis = [0,1,3,1,2,1,2,1,1,2,1,2,1]\n\nx,y = (int(i) for i in input().split())\n\nif lis[x] == lis[y] :\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 57, "index": 7363, "code": "S=[0, 2, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0]\na,b=[int(x) for x in input().split()]\nif(S[a-1]==S[b-1]):\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 57, "index": 7364, "code": "def grouping():\n\ts1 = {1, 3, 5, 7, 8, 10, 12}\n\ts2 = {4, 6, 9, 11}\n\ts3 = {2}\n\n\ts4 = set(map(int, input().split()))\n\n\tfor s in [s1, s2, s3]:\n\t\tif s & s4 == s4:\n\t\t\tprint('Yes')\n\t\t\treturn 0\n\n\tprint('No')\n\treturn 0\n\nif __name__ == '__main__':\n\tgrouping()"}
{"label": 57, "index": 7365, "code": "group1 = [1, 3, 5, 7, 8, 10, 12]\ngroup2 = [4, 6, 9, 11]\ngroup3 = [2]\n\ninput = list(map(int, input().split()))\ninput_x = int(input[0])\ninput_y = int(input[1])\n\nexist_group1 = group1.count(input_x) + group1.count(input_y)\nexist_group2 = group2.count(input_x) + group2.count(input_y)\nexist_group3 = group3.count(input_x) + group3.count(input_y)\n\nif exist_group1 == 2 or exist_group2 == 2 or exist_group3 == 2:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 57, "index": 7366, "code": "if __name__ == \"__main__\":\n\n\tx, y = map(int, input().split())\n\ta = [1, 3, 5, 7, 8, 10, 12]\n\tb = [4, 6, 9, 11]\n\tif (x in a and y in a) or (x in b and y in b):\n\t\tprint('Yes')\n\telse:\n\t\tprint('No')"}
{"label": 57, "index": 7367, "code": "x,y=map(int,input().split())\ng=(0,1,3,1,2,1,2,1,1,2,1,2,1)\nif g[x] == g[y]:\n  print(\"Yes\")\nelse:\n  print(\"No\")"}
{"label": 57, "index": 7368, "code": "x, y = map(int, input().split())\n\ngroup1 = [1, 3, 5, 7, 8, 10, 12]\ngroup2 = [4, 6, 9, 11]\ngroup3 = [2]\n\nif (x in group1 and y in group1) or (x in group2 and y in group2) or (x in group3 and y in group3):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 57, "index": 7369, "code": "g = [[1,3,5,7,8,10,12], [4,6,9,11], [2]]\n\ns = input().split(' ')\nx = int(s[0])\ny = int(s[1])\nlx = list(map(lambda a: x in a, g))\nly = list(map(lambda b: y in b, g))\nif lx==ly:\n    print('Yes')\nelse:\n    print('No')\n"}
{"label": 57, "index": 7370, "code": "\ni = raw_input().strip().split(\" \")\nx = int(i[0])\ny = int(i[1])\n\ngroups = []\ngroups.append([1, 3, 5, 7, 8, 10, 12])\ngroups.append([4, 6, 9, 11])\ngroups.append([2])\n\nfor g in groups:\n    if x in g and y in g:\n        print \"Yes\"\n        break\nelse:\n    print \"No\""}
{"label": 57, "index": 7371, "code": "import sys\nA = [1,3,5,7,8,10,12]\nB = [4,6,9,11]\nC = [2]\n\nnums = [int(x) for x in input().split()]\na = nums[0]\nb = nums[1]\n\nfor group in [A,B,C]:\n\tif a in group:\n\t\tif b in group:\n\t\t\tprint(\"Yes\")\n\t\t\tsys.exit()\n\nprint(\"No\")"}
{"label": 57, "index": 7372, "code": "a, b = map(int, input().split())\n\ngroup1 = {1,3,5,7,8,10,12}\ngroup2 = {4,6,9,11}\ngroup3 = {2}\n\ngroups = [group1, group2, group3]\n\ndef check():\n    for i in range(3):\n        if a in groups[i] and b in groups[i]:\n            print('Yes')\n            return\n    print('No')\n\ncheck()\n\n"}
{"label": 57, "index": 7373, "code": "x=[int(i) for i in input (). split ()]\ng=[0,0]\nfor i in range(len(x)):\n    if x[i]==2:\n        g[i]=2\n    elif x[i]==4 or x[i]==6 or x[i]==9 or x[i]==11:\n        g[i]=1\nif g[0]==g[1]:\n    print (\"Yes\")\nelse:\n    print (\"No\")"}
{"label": 57, "index": 7374, "code": "x, y = map(int, input().split())\na = [1,3,5,7,8,10,12]\nb = [4,6,9,11]\n\nif (x==2) or (y==2):\n    print(\"No\")\nelif (x in a) and (y in a):\n    print(\"Yes\")\nelif (x in b) and (y in b):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n\n\n"}
{"label": 57, "index": 7375, "code": "x,y = list(map(int,input().split()))\ndata = [(1,3,5,7,8,10,12),(4,6,9,11),(2,0)]\na = 0\ndef group(x,y,a):\n    for i in range(3):\n        if x in data[i]:\n            if y in data[i]:\n                print(\"Yes\")\n                a = 1\n                break\n    if a == 0:\n        print(\"No\")\ngroup(x,y,a)\n"}
{"label": 57, "index": 7376, "code": "import sys\n\ndef solve():\n    x, y = map(int, input().split())\n\n    if x in [1,3,5,7,8,10,12] and y in [1,3,5,7,8,10,12]:\n        print(\"Yes\")\n    elif x in [4,6,9,11] and y in [4,6,9,11]:\n        print(\"Yes\")\n    elif x in [2] and y in [2]:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif __name__ == '__main__':\n    solve()"}
{"label": 57, "index": 7377, "code": "from sys import stdin\na = [1,3,5,7,8,10,12]\nb = [4,6,9,11]\nc = [2]\nx,y = map(int,stdin.readline().split())\nans = 'No'\nif x in a and y in a:\n    ans = 'Yes' \nif x in b and y in b:\n    ans = 'Yes'\nif x in c and y in c:\n    ans = 'Yes'\nprint ans"}
{"label": 57, "index": 7378, "code": "group1 = [1, 3, 5, 7, 8, 10, 12]\ngroup2 = [2]\ngroup3 = [4, 6, 9, 11]\ntable = {}\n\nfor i in group1:\n    table[i] = 1\n\nfor i in group2:\n    table[i] = 2\n\nfor i in group3:\n    table[i] = 3\n\n[x, y] = map(int, raw_input().strip().split())\nif table[x] == table[y]:\n    print \"Yes\"\nelse:\n    print \"No\"\n"}
{"label": 57, "index": 7379, "code": "import sys\n\ns = [1,3,5,7,8,10,12]\nt = [4,6,9,11]\nr = [2]\n\narg = raw_input()\nx = int(arg.split(\" \")[0])\ny = int(arg.split(\" \")[1])\n\nif (x in s and y in s) or (x in t and y in t) or (x in r and y in r):\n    print \"Yes\";\nelse:\n    print \"No\";\n"}
{"label": 57, "index": 7380, "code": "x, y = map(int, input().split())\n\na = [0,1,3,1,2,1,2,1,1,2,1,2,1]\n\nif a[x] == a[y]:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 57, "index": 7381, "code": "g1=[1,3,5,7,8,10,12]\ng2=[4,6,9,11]\ng3=[2]\n\nx,y=map(int,input().split())\n\nif x in g1 and y in g1:\n    print(\"Yes\")\nelse:\n\n    if x in g2 and y in g2:\n      print(\"Yes\")\n    else:\n      print(\"No\")"}
{"label": 57, "index": 7382, "code": "#!/usr/bin/env/ python\n\nA=[[0]]*3\nA[0]=[1,3,5,7,8,10,12]\nA[1]=[4,6,9,11]\nA[2]=[2]\n\nx,y=map(int,raw_input().split())\n\nfor i in range(3):\n    if x in A[i]:\n        xx=i\n    if y in A[i]:\n        yy=i\n\nif xx==yy:\n    print 'Yes'\nelse:\n    print 'No'"}
{"label": 57, "index": 7383, "code": "n = input()\ntmp_n = n.split(\" \")\n\nlist1=[1,3,5,7,8,10,12]\nlist2=[4,6,9,11]\nlist3=[2]\n\nif int(tmp_n[0]) in list1 and int(tmp_n[1]) in list1:\n    print(\"Yes\")\nelif int(tmp_n[0]) in list2 and int(tmp_n[1]) in list2:\n    print(\"Yes\")\nelif int(tmp_n[0]) in list3 and int(tmp_n[1]) in list3:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 57, "index": 7384, "code": "x, y = [int(i) for i in input().split()]\na = [1, 3, 5, 7, 8, 10, 12]\nb = [4, 6, 9, 11]\nif a.count(x) and a.count(y):\n    print('Yes')\nelif b.count(x) and b.count(y):\n    print('Yes')\nelse:\n    print('No')\n"}
{"label": 57, "index": 7385, "code": "a = {1, 3, 5, 7, 8, 10, 12}\nb = {4, 6, 9, 11}\nc = {2}\nx, y = map(int, input().split())\nif (x in a and y in a) or (x in b and y in b):\n    print('Yes')\nelse:\n    print('No')"}
{"label": 57, "index": 7386, "code": "x, y = map(int, input().split())\nif x == 2 or y == 2:\n    print('No')\nelse:\n    m1 = set([1, 3, 5, 7, 8, 10, 12])\n    m2 = set([4, 6, 9, 11])\n    if (x in m1 and y in m1) or (x in m2 and y in m2):\n        print('Yes')\n    else:\n        print('No')"}
{"label": 57, "index": 7387, "code": "x, y = map(int, input().split())\nL = [1, 3, 5, 7, 8, 10, 12]\nM = [4, 6, 9, 11]\nN = [2]\n\nif (x in L and y in L) or (x in M and y in M) or (x in N and y in N):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 57, "index": 7388, "code": "l1 = [1, 3, 5, 7, 8, 10, 12]\nl2 = [4, 6, 9, 11]\nl3 = [2]\n\na, b = map(int,raw_input().split())\nif a in l1 and b in l1:\n\tprint \"Yes\"\nelif a in l2 and b in l2:\n\tprint \"Yes\"\nelif a in l2 and b in l3:\n\tprint \"Yes\"\nelse :\n\tprint \"No\""}
{"label": 57, "index": 7389, "code": "g = [None, 0, 2, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0]\nx, y = map(int, input().split())\nprint('Yes' if g[x] == g[y] else 'No')\n"}
{"label": 57, "index": 7390, "code": "x=[int(i) for i in input (). split ()]\ng=[0,0]\nfor i in range(len(x)):\n    if x[i]==2:\n        g[i]=2\n    elif x[i]==4 or x[i]==6 or x[i]==9 or x[i]==11:\n        g[i]=1\nif g[0]==g[1]:\n    print (\"Yes\")\nelse:\n    print (\"No\")"}
{"label": 57, "index": 7391, "code": "def solve():\n    a,b=map(int,input().split())\n    if a==2 or b==2:\n        print(\"No\")\n    elif (a==4 and not(b==6 or b==9 or b==11)) or (a==6 and not(b==9 or b==11)) or (a==9 and not b==11) or a==11:\n        print(\"No\")\n    else:\n        print(\"Yes\")\n\nif __name__ == \"__main__\":\n    solve()"}
{"label": 57, "index": 7392, "code": "from __future__ import division\nimport math\n\n\ndef get_min(w, h):\n    m = 1e11\n    for x in [w // 3, w // 3 + 1]:\n        if x == 0: continue\n        a = [x*h, (w-x)*(h//2), (w-x)*(h - h//2)]\n        print a\n        m = min(m, max(a) - min(a))\n    return m\n\ndigits = raw_input()\na, b = [int(x) for x in digits.split(' ')]\ng_1 = [1, 3, 5, 7, 8, 10, 12]\ng_2 = [4, 6, 9, 11]\ng_3 = [2]\nif (a in g_1 and b in g_1) or (a in g_2 and b in g_2) or (a in g_3 and b in g_3):\n    print 'Yes'\nelse:\n    print \"No\""}
{"label": 57, "index": 7393, "code": "x, y = map(int, raw_input().split())\n\ndef f(a):\n    if a in [1,3,5,7,8,10,12]:\n        return 1\n    if a in [4,6,9,11]:\n        return 2\n    if a == 2:\n        return 3\n    return None\n\nif f(x) == f(y):\n    print \"Yes\"\nelse:\n    print \"No\"\n"}
{"label": 57, "index": 7394, "code": "# _*_ coding: utf-8_*_\nimport sys\n\nis_ingroup = False\n\ninput = sys.stdin.readline()\n\nnum = input.split(' ')\nx = int(num[0])\ny = int(num[1])\n\ngroup = [[1,3,5,7,8,10,12],[4,6,9,11],[2]]\n\nfor i in range(len(group)):\n\tif x in group[i] and y in group[i]:\n\t\tis_ingroup = True\n\nif is_ingroup:\n\tprint('Yes')\nelse:\n\tprint('No')"}
{"label": 57, "index": 7395, "code": "x,y = map(int, input().split())\nL1 = [1,3,5,7,8,10,12]\nL2 = [4,6,9,11]\n\nif x == 2 or y == 2:\n print(\"No\")\n\nelif x in L1 and y in L1:\n print(\"Yes\")\n\nelif x in L2 and y in L2:\n print(\"Yes\")\n\nelse:\n print(\"No\")"}
{"label": 57, "index": 7396, "code": "a=input().split()\nx=int(a[0])\ny=int(a[1])\nA=[1,3,5,7,8,10,12]\nB=[4,6,9,11]\ncount =0\nfor i in A:\n if(x==i):\n  count +=1\n if(y==i):\n  count +=1\nfor i in B:\n if(x==i):\n  count -=1\n if(y==i):\n  count -=1\nif((count==2)or(count==-2)):\n print(\"Yes\")\nelse:\n print(\"No\")"}
{"label": 57, "index": 7397, "code": "def solve():\n    x, y = map(int, input().split())\n    a = [0 , 1 , 3 , 1 , 2 , 1 , 2 , 1 , 1 , 2 , 1 , 2 , 1]\n    if a[x] == a[y]:\n        ans = \"Yes\"\n    else:\n        ans = \"No\"\n    print(ans)\n\nif __name__ == '__main__':\n    solve()  "}
{"label": 57, "index": 7398, "code": "x, y = map(int, input().split())\n\ng1 = [1, 3, 5, 7, 8, 10, 12]\ng2 = [4, 6, 9, 11]\ng3 = [2]\n\nif x in g1 and y in g1:\n    print('Yes')\nelif x in g2 and y in g2:\n    print('Yes')\nelif x in g3 and y in g3:\n    print('Yes')\nelse:\n    print('No')"}
{"label": 57, "index": 7399, "code": "x, y = list(map(int, input().split()))\ng = [4, 6, 9, 11]\nif x == 2 or y == 2:\n    print('No')\nelif (x in g and y in g) or (x not in g and y not in g):\n    print('Yes')\nelse:\n    print('No')"}
{"label": 57, "index": 7400, "code": "# -*- coding: utf-8 -*-\n\"\"\"\nhttp://abc062.contest.atcoder.jp/tasks/abc062_a\n\n\"\"\"\nimport sys\nfrom sys import stdin\ninput = stdin.readline\n\n\ndef main(args):\n    group1 = [1, 3, 5, 7, 8, 10, 12]\n    group2 = [4, 6, 9, 11]\n    # group3 = [2]\n\n    ans = 'No'\n    x, y = map(int, input().split())\n    if x in group1 and y in group1:\n        ans = 'Yes'\n    elif x in group2 and y in group2:\n        ans = 'Yes'\n    print(ans)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"label": 57, "index": 7401, "code": "X,Y=map(int,input().split())\n\nS={X,Y}\n\nS1={1,3,5,7,8,10,12}\nS2={4,6,9,11}\nS3={2}\n\nif len(S1)==len(S1|S):\n    print(\"Yes\")\nelif len(S2)==len(S2|S):\n    print(\"Yes\")\nelif len(S3)==len(S3|S):\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 57, "index": 7402, "code": "a=[1,3,5,7,8,10,12]\nb=[4,6,9,11]\nc=[2]\n\nx,y=map(int,input().split())\n\ndef jj(n):\n        if n in a:\n            return 1\n        if n in b:\n            return 2\n        if n in c:\n            return 3\n\nif jj(x)==jj(y):\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 57, "index": 7403, "code": "g = [[1,3,5,7,8,10,12],[4,6,9,11],[2]]\nret = 'No'\nx,y = map(int,input().split())\nfor i in range(0,3):\n  if x in g[i] and y in g[i]:\n    ret = 'Yes'\nprint(ret)"}
{"label": 57, "index": 7404, "code": "x, y = map(int, input().split())\ngrp1 = {1, 3, 5, 7, 8, 10, 12}\ngrp2 = {4, 6, 9, 11}\ngrp3 = {2}\nif x in grp1 and y in grp1 or x in grp2 and y in grp2 or x in grp3 and y in grp3:\n    print('Yes')\nelse:\n    print('No')\n"}
{"label": 57, "index": 7405, "code": "def rren(): return list(map(int, input().split()))\n\n\na = [\"1 3 5 7 8 10 12\".split(), \"4 6 9 11\".split(), [\"2\"]]\n\nx, y = rren()\nflag = False\nfor i in range(3):\n    if(str(x) in a[i] and str(y) in a[i]):\n        flag = True\n\nif(flag):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 57, "index": 7406, "code": "g=[0,2,0,1,0,1,0,0,1,0,1,0]\nx,y=map(int,raw_input().split()) \nprint \"Yes\" if g[x-1]==g[y-1] else \"No\"\n"}
{"label": 57, "index": 7407, "code": "# -*- coding: utf-8 -*-\n\nx,y = map(int, raw_input().split())\n\na = [1,3,5,7,8,10,12]\nb = [4,6,9,11]\nc = [2]\n\nif(x in a and y in a):\n    print('Yes')\nelif(x in b and y in b):\n    print('Yes')\nelif(x in c and y in c):\n    print('Yes')\nelse:\n    print('No')"}
{"label": 57, "index": 7408, "code": "groups = [{1, 3, 5, 7, 8, 10, 12},\n          {4, 6, 9, 11},\n          {2}]\n\nx, y = [int(i) for i in input().split()]\n\nfor g in groups:\n    if x in g and y in g:\n        print('Yes')\n        exit()\n\nprint('No')"}
{"label": 57, "index": 7409, "code": "n_to_cluster = {}\nfor n in [1, 3, 5, 7, 8, 10, 12]:\n    n_to_cluster[n] = 0\nfor n in [4, 6, 9, 11]:\n    n_to_cluster[n] = 1\nfor n in [2]:\n    n_to_cluster[n] = 2\n\nx, y = map(int, input().split())    \nif n_to_cluster[x] == n_to_cluster[y]:\n    print('Yes')\nelse:\n    print('No')"}
{"label": 58, "index": 7410, "code": "# -*- coding:utf-8 -*-\nh,w = map(int,input().split())\narr = []\nfor i in range(h):\n    arr.append(input())\n\n\nfor i in range(w+2):\n    print('#',sep = '',end = '')\nprint('')\n\nfor i in range(h):\n    print('#',sep = '',end = '')\n    print(arr[i],sep = '',end = '')\n    print('#')\n\nfor i in range(w+2):\n    print('#',sep = '',end = '')\nprint('')    \n"}
{"label": 58, "index": 7411, "code": "hw = list(map(int, input().split()))\nh = hw[0]\nw = hw[1]\n\nimg = list()\nfor i in range(h):\n    img.append(input())\n\nprint(\"#\"*(w+2));\nfor row in img:\n    print(\"#\"+row+\"#\")\n    \nprint(\"#\"*(w+2));"}
{"label": 58, "index": 7412, "code": "size = input()\nsize = size.split()\n\nprint(\"#\" * (int(size[1]) + 2))\n\nfor i in range(int(size[0])):\n\trow = input()\n\tprint(\"#\" + row + \"#\")\n\nprint(\"#\" * (int(size[1]) + 2))\n"}
{"label": 58, "index": 7413, "code": "h, w = map(int, input().split())\npic = [input().split() for i in range(h)]\n\n\nfor i in range(w+2):\n    print(\"#\", end='')\nprint()\n\nfor i in range(h):\n    print(\"#{}#\".format(pic[i][0]))\n\nfor i in range(w+2):\n    print(\"#\", end='')\nprint()"}
{"label": 58, "index": 7414, "code": "H, W = list(map(int, input().split()))\n\noutput = []\noutput.append('#'*(W+2))\n\nfor _ in range(H):\n    pics = '#{}#'.format(input())\n    output.append(pics)\n\noutput.append('#'*(W+2))\n\nfor pics in output:\n    print(pics)\n\n"}
{"label": 58, "index": 7415, "code": "import sys\nimport random\n\ndef rd():\n        return sys.stdin.readline().rstrip()\n\ndef rdi():\n        return [ int(x) for x in rd().split() ]\n\nH, W = rdi()\nprint \"#\" * (W+2)\nfor i in range(H):\n        s = rd()\n        print \"#\" + s + \"#\"\nprint \"#\" * (W+2)\n"}
{"label": 58, "index": 7416, "code": "h,w = map(int, input().split())\na=[]\nfor i in range(h):\n    a.append(input())\n\n\nprint('#'*(w+2))\n\nfor i in range(h):\n    print('#'+a[i]+'#')\n    \nprint('#'*(w+2))    \n"}
{"label": 58, "index": 7417, "code": "H, W = map(int, input().split())\ntable = []\nfor h in range(H):\n    table.append(input())\nprint(\"#\" * (W + 2))\nfor h in range(H):\n    print(\"#\" + table[h] + \"#\")\nprint(\"#\" * (W + 2))\n"}
{"label": 58, "index": 7418, "code": "h, w = map(int, input().split())\na = [input() for i in range(h)]\n\nfor i in range(h+2):\n    for j in range(w+2):\n        if(i==0 or i==h+1 or j==0 or j==w+1):\n            print(\"#\", end=\"\")\n        else:\n            print(a[i-1][j-1], end =\"\")\n    print()\n"}
{"label": 58, "index": 7419, "code": "H,W=map(int, input().split())\nprint(\"#\"*(W+2))\nfor i in range(H):\n  print(\"#\"+input()+\"#\")\nprint(\"#\"*(W+2))"}
{"label": 58, "index": 7420, "code": "H,W=[int(i) for i in input().split()]\n\nl_n=[input() for i in range(H)]\n\nfor i in range(W+1):\n    print('#',end='')\nprint('#')\n\nfor i in range(H):\n    print('#{}#'.format(l_n[i]))\n\nfor i in range(W+2):\n    print('#',end='')"}
{"label": 58, "index": 7421, "code": "x, y = map(int,input().split())\n\nfor i in range(y + 1) :\n  print ('#', end = '')\nprint ('#')\n\nfor i in range(x) :\n  print ('#', end = '')\n  print (input(), end = '')\n  print ('#')\n\nfor i in range(y + 1) :\n  print ('#', end = '')\nprint ('#')\n"}
{"label": 58, "index": 7422, "code": "h, w = map(int, input().split())\na = []\nfor i in range(h):\n    a.append(input())\nfor i in range(w+1):\n    print('#',end='')\nprint('#')\nfor i in range(h):\n    print('#',end='')\n    print(a[i],end='')\n    print('#')\nfor i in range(w+1):\n    print('#',end='')\nprint('#')"}
{"label": 58, "index": 7423, "code": "H,W = map(int, raw_input().split())\n\nsrc = []\nfor i in range(H):\n    src.append(raw_input())\n\nprint \"#\" * (W + 2)\nfor row in src:\n    print \"#\" + row + \"#\"\nprint \"#\" * (W + 2)"}
{"label": 58, "index": 7424, "code": "h , w = map(int, input().split())\n \nprint(\"#\" * (w + 2))\nfor i in range(h):\n     print(\"#\" + str(input()) + \"#\")\nprint(\"#\" * (w + 2))"}
{"label": 58, "index": 7425, "code": "h, w = map(int, raw_input().split())\n\nprint '#' * (w+2)\nfor i in range(h):\n    print '#{}#'.format(raw_input())\nprint '#' * (w+2)"}
{"label": 58, "index": 7426, "code": "H, W = map(int, raw_input().split())\npicture = [list(\"#\"*(W+2)) for _ in xrange(H+2)]\nfor i in xrange(1, H+1):\n    a = list(raw_input())\n    for j in xrange(1, W+1):\n        picture[i][j] = a.pop(0)\nfor p in picture:\n    print \"\".join(p)"}
{"label": 58, "index": 7427, "code": "h, w = [int(n) for n in input().split()]\nimage = []\nfor i in range(h):\n    image.append(input())\n\nprint('#' * (w + 2))\nfor i in range(h):\n    print('#' + image[i] + '#')\nprint('#' * (w + 2))\n"}
{"label": 58, "index": 7428, "code": "H, W = map(int, input().split())\n\npict = []\nfor i in range(H):\n    row = input()\n    pict.append(row)\n\nprint('#' * (W + 2))\nfor i in range(H):\n    print('#' + pict[i] + '#')\nprint('#' * (W + 2))"}
{"label": 58, "index": 7429, "code": "# coding: utf-8\nh, w = map(int, input().split())\npict =[]\nfor i in range(h):\n    pict.append(input().rstrip())\n    pict[i] = '#'+ pict[i] + '#'\npict.insert(0,'#'*(w+2))\npict.append('#'*(w+2))\nfor i in range(len(pict)):\n    print(pict[i])"}
{"label": 58, "index": 7430, "code": "h,w = map(int, raw_input().split())\nl = [ '#' + raw_input() + '#' for _ in range(h)]\ns = '#' * (w+2)\nprint s\nfor t in l:\n    print t\nprint s\n"}
{"label": 58, "index": 7431, "code": "h,w=map(int,raw_input().split())\na=[\"#\"+raw_input()+\"#\" for _ in xrange(h)]\nprint \"#\"*(w+2)\nfor i in xrange(h):\n    print a[i]\nprint \"#\"*(w+2)"}
{"label": 58, "index": 7432, "code": "h,w = map(int,input().split())\ns = []\nfor _ in range(h):\n  s.append(input().strip())\nprint('#'*(w+2))\nfor c in s:\n  print('#{}#'.format(c))\nprint('#'*(w+2))"}
{"label": 58, "index": 7433, "code": "h,w = map(int,input().split())\nword = []\nfor i in range(h):\n    word.append(input())\n\nprint(\"#\" * (w + 2))\nfor i in range(h):\n    print(\"#\" + word[i] + \"#\")\nprint(\"#\" * (w + 2))"}
{"label": 58, "index": 7434, "code": "H, W = (int(i) for i in input().split())\nstr = [input() for i in range(H)]\n\nfor i in range(W+2):\n        print('#', end = \"\")\nprint(\"\")\n\nfor i in range(H):\n        print('#', end = \"\")\n        print(str[i], end = \"\")\n        print('#')\n\nfor i in range(W+2):\n        print('#', end = \"\")\nprint(\"\")\n"}
{"label": 58, "index": 7435, "code": "(h, w) = map(int, input().split(\" \"))\n\na=[]\nfor i in range(h):\n        a.append(input())\n\nprint(\"#\" * (w+2))\n\nfor i in range(h):\n    print(\"#\"+a[i]+\"#\")\n\nprint(\"#\" * (w+2))\n\n"}
{"label": 58, "index": 7436, "code": "h, w = map(int, raw_input().split())\n\ns = []\nfor i in range(h):\n  s.append(raw_input())\n\nprint '#'*(w+2)\nfor i in range(h):\n  print '#' + s[i] + '#'\nprint '#'*(w+2)\n"}
{"label": 58, "index": 7437, "code": "h, w = map(int, raw_input().split())\n\nprint \"\".join([\"#\" for _ in range(w + 2)])\nfor _ in range(h):\n    st = raw_input()\n    print \"#\" + st +\"#\"\nprint \"\".join([\"#\" for _ in range(w + 2)])    \n"}
{"label": 58, "index": 7438, "code": "\n# coding: utf-8\n\nif __name__ == \"__main__\":\n\n\th, w = map(int, input().split())\n\ta = []\n\ta.append('#'*(w+2))\n\tfor _ in range(h):\n\t\ta.append('#' + input() + '#')\n\ta.append('#'*(w+2))\n\n\tfor i in range(h+2):\n\t\tprint(a[i])\n"}
{"label": 58, "index": 7439, "code": "# -*- coding: utf-8 -*-\n\nimport sys\nimport os\n\nH, W = map(int, input().split())\n\nA = []\nfor i in range(H):\n    A.append(input().strip())\n\nprint('#' * (W + 2))\nfor a in A:\n    print('#{}#'.format(a))\nprint('#' * (W + 2))\n"}
{"label": 58, "index": 7440, "code": "h, w = [int(i) for i in input().split()]\npic = []\nfor i in range(h):\n    pic.append(input())\nprint(\"#\" * (w+2))\nfor i in range(h):\n    print(\"#\" + pic[i] + \"#\")\nprint(\"#\" * (w+2))"}
{"label": 58, "index": 7441, "code": "n = input()\ntmp_n = n.split(\" \")\n\nh = int(tmp_n[0])\nw = int(tmp_n[1])\nin_list = []\n\nfor i in range(h):\n    in_pixel = input()\n    in_list.append(in_pixel)\n\nprint(\"#\"*(w+2))\nfor j in in_list:\n    print(\"#\"+j+\"#\")\nprint(\"#\"*(w+2))\n"}
{"label": 58, "index": 7442, "code": "#Python\n\nA=map(int, raw_input().split())\nH=A[0]\nW=A[1]\n\nprint \"#\"*(W+2)\n\nfor i in range(H):\n    print \"#\"+raw_input()+\"#\"\n\nprint \"#\"*(W+2)"}
{"label": 58, "index": 7443, "code": "# coding: utf-8\n\nh, w = map(int, raw_input().split())\n\npic = [[\"#\" for _j in xrange(w+2)] for _i in xrange(h+2)]\n\nfor i in xrange(h):\n    aij = raw_input()\n\n    for j in xrange(len(aij)):\n        pic[i+1][j+1] = aij[j]\n\nfor p in pic:\n    print \"\".join(p)\n"}
{"label": 58, "index": 7444, "code": "H, W = [int(i) for i in input().split()]\na = [input() for i in range(H)]\nprint('#'*(W+2))\nfor i in range(H):\n    print('#' + a[i] + '#')\nprint('#'*(W+2))"}
{"label": 58, "index": 7445, "code": "from functools import reduce\nh,w = [int(i) for i in input().split()]\na = []\nfor i in range(0,h):\n    a.append('#' + input() + '#')\nudFrame = reduce(lambda x,y: x+y, ['#' for i in range(0,w+2)])\nprint(udFrame)\nfor pic in a:\n    print(pic)\nprint(udFrame)"}
{"label": 58, "index": 7446, "code": "a = input().split(\" \")\n\ntmp_out=[[\"\"] for i in range(int(a[0])+2)]\n\nfor j in range(int(a[1])+2):\n    tmp_out[0]=[\"\".join(tmp_out[0]+[\"#\"])]\n\nfor i in range(1, int(a[0])+1):\n    tmp_out[i]=[\"\".join([\"#\"]+input().split(\" \")+[\"#\"])]\n\ntmp_out[int(a[0])+1]=tmp_out[0]\n\nfor i in range(int(a[0])+2):\n    print(\"\".join(tmp_out[i]))"}
{"label": 58, "index": 7447, "code": "H, W = map(int, input().split())\nstring = list()\nfor i in range(H):\n    string.append(input())\n\nfor i in range(W+2):\n    print(\"#\", end=\"\")\n\nprint(\"\")\n\nfor i in range(H):\n    print(\"#\", end=\"\")\n    print(string[i], end=\"\")\n    print(\"#\")\n\nfor i in range(W+2):\n    print(\"#\", end=\"\")\n"}
{"label": 58, "index": 7448, "code": "h,w = map(int, input().split())\na = [[0] for i in range(h)]\nfor i in range(h):\n    a[i] = input()\n    a[i] = \"#\"+a[i]+\"#\"\ns=[\"#\"*(w+2)]\na.extend(s)\ns.extend(a)\nfor a_ in s:\n    print(a_)\n"}
{"label": 58, "index": 7449, "code": "# -*- coding: utf-8 -*-\nH, W = map(int, raw_input().split())\n\nprint \"\".join([\"#\"] * (W + 2))\n\nfor i in xrange(H):\n    print \"#\" + raw_input() + \"#\"\n\nprint \"\".join([\"#\"] * (W + 2))"}
{"label": 58, "index": 7450, "code": "def picture_frame():\n\th, w = map(int, input().split())\n\n\tprint('#'*(w+2))\n\tfor i in range(h):\n\t\tprint('#'+input()+'#')\n\tprint('#'*(w+2))\n\nif __name__ == '__main__':\n\tpicture_frame()"}
{"label": 58, "index": 7451, "code": "h,w = map(int,input().split())\nprint('#'*(w+2))\nfor i in range(0,h):\n  print('#'+input()+'#')\nprint('#'*(w+2))\n"}
{"label": 58, "index": 7452, "code": "h,w = map(int, input().split())\nprint('#'*(w+2))\nfor i in range(h):\n    print('#' + input() + '#')\nprint('#'*(w+2))\n"}
{"label": 58, "index": 7453, "code": "H, W = map(int, raw_input().split())\n\nA = [raw_input() for _ in range(H)]\n\nprint \"#\" * (W+2)\nfor a in A:\n    print \"#\" + a + \"#\"\nprint \"#\" * (W+2)\n"}
{"label": 58, "index": 7454, "code": "h, w = map(int, raw_input().split())\npic0 = []\nfor i in range(h):\n    pic0.append(raw_input().rstrip())\n\npic = [[\"#\" for i in range(w + 2)] for j in range(h + 2)]\nfor i in range(h):\n    for j in range(w):\n        pic[i + 1][j + 1] = pic0[i][j]\n\nfor i in range(h+2):\n    line = \"\".join(pic[i])\n    print line\n"}
{"label": 58, "index": 7455, "code": "H, W = list(map(int, input().split()))\nL = []\n\nfor i in range(H):\n\tL.append(input().split())\n\nprint(\"#\" * (W + 2))\n\nfor i in range(H):\n\tprint(\"#\", end = \"\")\n\tprint(\"\".join(L[i]), end = \"\")\n\tprint(\"#\")\n\nprint(\"#\" * (W + 2))"}
{"label": 58, "index": 7456, "code": "#!/usr/bin/env python\n\n\ndef read():\n    row, col = map(int, raw_input().split())\n    b = []\n    for i in range(row):\n        b.append(raw_input())\n    return b\n\n\ndef work(b):\n    print \"#\" * (len(b[0]) + 2)\n    for line in b:\n            print \"#\" + line + \"#\"\n    print \"#\" * (len(b[0]) + 2)\n   \n\nif __name__ == \"__main__\":\n    work(read())\n"}
{"label": 58, "index": 7457, "code": "# -*- coding: utf-8 -*-\nH, W = [int(n) for n in input().split()]\nA = []\n\nfor h in range(H):\n    A.append([str(n) for n in input().split()])\n\nresult = \"#\" * (W+2) \nfor a in A:\n    result += \"\\n#{}#\".format(\"\".join(a))\nresult += \"\\n\"+\"#\" * (W+2)\nprint(result)"}
{"label": 58, "index": 7458, "code": "import sys\n\nh, w = map(int, raw_input().split())\nimg = []\nfor i in range(h):\n    r = raw_input()\n    img.append(r)\n\nprint ''.join(['#'] * (len(img[0])+2))\nfor r in img:\n    sys.stdout.write('#')\n    sys.stdout.write(r)\n    sys.stdout.write('#')\n    print\nprint ''.join(['#'] * (len(img[0])+2))\n\n"}
{"label": 58, "index": 7459, "code": "h, w = map(int, input().split())\n\nprint('#' * (w + 2))\nfor i in range(h):\n    print('#{}#'.format(input()))\nprint('#' * (w + 2))"}
{"label": 58, "index": 7460, "code": "h, w = map(int, input().split())\n\nprint('#' * (w + 2))\n\nfor i in range(h):\n    print('#', end='')\n    print(input(), end='')\n    print('#')\n\nprint('#' * (w + 2))\n"}
{"label": 58, "index": 7461, "code": "h,w=map(int,input().split())\nstr =[]\nfor i in range(h):\n    str+=input().split()\nprint(\"#\"*(w+2))\nfor i in range(h):\n    print(\"#\"+str[i]+\"#\")\nprint(\"#\"*(w+2))"}
{"label": 58, "index": 7462, "code": "# -*- coding:utf-8 -*-\nH, W = map(int, input().split())\na = []\nb = []\nfor tmp in range(H):\n    a.append(list(input()))\nadd = [ '#' for tmp in range(W+2) ]\nb.append(add)\nfor tmp in range(H):\n    c = ['#'] + a[tmp] + ['#']\n    b.append(c)\nb.append(add)\nfor tmp in range(H+2):\n    print(''.join(b[tmp]))"}
{"label": 58, "index": 7463, "code": "h, w = map(int,input().split())\na = [\"#\" + input() + \"#\" for i in range(h)]\n\nprint(\"#\" * (w + 2))\nfor i in range(h):\n    print(a[i])\nprint(\"#\" * (w + 2))\n"}
{"label": 58, "index": 7464, "code": "def main():\n    H, W = map(int, input().split())\n    a = [None] * H\n    i = 0\n    while i < H:\n        a[i] = str(input())\n        i += 1\n\n    print('#' * (W + 2))\n    for s in a:\n        print('#{}#'.format(s))\n    print('#' * (W + 2))\n\nmain()\n"}
{"label": 58, "index": 7465, "code": "data = input().split()\nH = int(data[0])\nW = int(data[1])\n\nstr = []\nfor i in range(H):\n\tdata = input()\n\tstr.append(data[:W])\n\nfor j in range(W+2):\n\tprint(\"#\", end=\"\")\nprint(\"\")\nfor i in range(H):\n\tprint(\"#\", end=\"\")\n\tprint(\"\".join(str[i]), end=\"\")\n\tprint(\"#\")\nfor j in range(W+2):\n\tprint(\"#\", end=\"\")\n\n"}
{"label": 58, "index": 7466, "code": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\nimport sys\nimport math\n\nsets = [\n    set([1,3,5,7,8,10,12]),\n    set([4,6,9,11]),\n    set([2])\n]\n\ndef find_group(i):\n    for index, group in enumerate(sets):\n        if i in group:\n            return index\n\n\nH,W = map(int, sys.stdin.readline().rstrip().split())\nprint(\"#\"*(W+2))\nfor _ in range(H):\n    print(\"#\"+sys.stdin.readline().rstrip()+\"#\")\nprint(\"#\"*(W+2))\n\nexit(0)\n"}
{"label": 58, "index": 7467, "code": "x,y=map(int,input().split())\nprint('#'*(y+2))\nfor i in range(x):\n    print('#'+input()+'#')\nprint('#'*(y+2))\n"}
{"label": 58, "index": 7468, "code": "H,W = list(map(int,input().split()))\ndata = [input() for i in range(H)]\nprint(\"#\"*(W+2))\nfor i in range(H):\n\tprint(\"#\" + data[i] + \"#\")\nprint(\"#\"*(W+2))\n"}
{"label": 58, "index": 7469, "code": "h, w = map(int, input().split())\nli = []\n\nfor i in range(h):\n    a = input()\n    li.append(a)\n\nb = \"#\" * (w + 2)\n\nprint(b)\nfor i in range(h):\n    ans = li[i]\n    print(\"#\" + ans + \"#\")\n\nprint(b)\n"}
{"label": 58, "index": 7470, "code": "H, W = [int(x) for x in input().split()]\nW += 2\n\nprint(\"#\" * W)\nfor i in range(H):\n    print(\"#\", end = \"\")\n    print(input().strip(), end = \"\")\n    print(\"#\")\n\nprint(\"#\" * W)"}
{"label": 58, "index": 7471, "code": "\nx = list(map(int, input().split()))\na=[input() for i in range(x[0])]\n\nfor i in range(x[1]+2):\n    print('#',end=\"\")\nprint('')\nfor i in a:\n    print('#{0}#'.format(i))\nfor i in range(x[1]+2):\n    print('#',end=\"\")\nprint('')\n"}
{"label": 58, "index": 7472, "code": "h, w = [int(t) for t in input().split()]\n\ndat = [input() for i in range(h)]\nprint(\"#\" * (w+2))\n\nprint(*(\"#\" + dat[i] + \"#\" for i in range(h)), sep=\"\\n\")\nprint(\"#\" * (w+2))\n\n"}
{"label": 58, "index": 7473, "code": "a = input().split(\" \")\n\ntmp_out=[[\"\"] for i in range(int(a[0])+2)]\n\nfor j in range(int(a[1])+2):\n    tmp_out[0]=[\"\".join(tmp_out[0]+[\"#\"])]\n\nfor i in range(1, int(a[0])+1):\n    tmp=input().split(\" \")\n    tmp_out[i]=[\"\".join([\"#\"]+tmp+[\"#\"])]\n\ntmp_out[int(a[0])+1]=tmp_out[0]\n\nfor i in range(int(a[0])+2):\n    print(\"\".join(tmp_out[i]))"}
{"label": 58, "index": 7474, "code": "# -*- coding: utf-8 -*-\ny, x = map(int, input().split(\" \"))\nline = \"#\" * (x + 2)\nprint(line)\nfor n in range(y):\n    line = input()\n    print(\"#{}#\".format(line))\nline = \"#\" * (x + 2)\nprint(line)\n"}
{"label": 58, "index": 7475, "code": "H,W = [int(i) for i in input().split()]\nprint(\"#\"*(W+2))\nfor i in range(H):\n    H0 = input()\n    print(\"#\"+H0+\"#\")\nprint(\"#\"*(W+2))\n"}
{"label": 58, "index": 7476, "code": "h, w = map(int, input().strip().split(' '))\nhorizontal_frame = \"##\" + \"#\" * w\n\nprint(horizontal_frame)\nfor i in range(h):\n    image_row = \"#\" + input().strip() + \"#\"\n    print(image_row)\nprint(horizontal_frame)"}
{"label": 58, "index": 7477, "code": "s = input().split()\nh = int(s[0])\nw = int(s[1])\n\nain = [\"\" for i in range(h)]\n\nfor i in range(h):\n    ain[i] = input()\n\naout = [\"\" for j in range(h+2)]\n\naout[0] = \"#\" * (w+2)\n\nfor i in range(h):\n    aout[i+1] = \"#\" + ain[i] + \"#\"\n\naout[h+1] =\"#\" * (w+2)\n\nfor i in range(h+2):\n    print(aout[i])\n"}
{"label": 58, "index": 7478, "code": "H, W = map(int, input().split())\nprint(\"#\"*(W+2))\nfor i in range(H):\n    print(\"#\" + input()  + \"#\")\nprint(\"#\"*(W+2))\n"}
{"label": 58, "index": 7479, "code": "H, W = list(map(int, input().split()))\n\nprint(\"#\" * (W + 2))\nfor i in range(H):\n    print(\"#\" + input() + \"#\")\n\nprint(\"#\" * (W + 2))\n"}
{"label": 58, "index": 7480, "code": "H,W = map(int,raw_input().split(' '))\nprint \"#\"*(W+2)\nfor _ in xrange(H):\n    s = raw_input()\n    print \"#\"+s+\"#\"\nprint \"#\"*(W+2)"}
{"label": 58, "index": 7481, "code": "h, w = map(int, raw_input().split())\n\nprint '#'*(w+2)\nfor _ in xrange(h):\n    print '#' + raw_input() + '#'\nprint '#'*(w+2)"}
{"label": 58, "index": 7482, "code": "H, W = map(int, raw_input().split())\nmp = [[\"#\"] * (W+2)]\nfor _ in range(H):\n    a = raw_input().split()\n    a = [\"#\"] + a + [\"#\"]\n    mp.append(a)\n\nmp.append([\"#\"]*(W+2))\n\nfor idx in range(H+2):\n    print \"\".join(mp[idx])\n"}
{"label": 58, "index": 7483, "code": "y, x = map(int, input().split())\nimage = [\"#\" * (x+2)]\nfor y in range(0,y):\n    image.append(\"#\"  + input() + \"#\")\nimage.append(\"#\" * (x+2))\nfor img in image:\n    print(img)\n"}
{"label": 58, "index": 7484, "code": "h , w = map(int ,raw_input().split())\nprint '#'*(w+2)\nfor i in range(h):\n\ts = raw_input()\n\tprint '#'+s+'#'\nprint '#'*(w+2)"}
{"label": 58, "index": 7485, "code": "import sys\n\n# sys.stdin = open('b1.in')\n\n\nh, w = map(int, input().split())\na = []\nfor i in range(h):\n    ligne = input()\n    a.append(ligne)\n\ns = '#' * (w + 2)\nprint(s)\nfor ligne in a:\n    l = list(ligne)\n    l.append('#')\n    l.insert(0, '#')\n    ligne2 = ''.join(l)\n    print(ligne2)\nprint(s)\n"}
{"label": 58, "index": 7486, "code": "y, x = map(int, input().split(\" \"))\n \nh = []\nfor v in range(0, x+2):\n    h.append(\"#\")\n    \nh = ''.join(h)\nprint(h)\nfor v in range(0, y):\n    print(\"#\" + input() + \"#\")\n \nprint(h)"}
{"label": 58, "index": 7487, "code": "import sys\n\nh, w = [int(x) for x in sys.stdin.readline().split()]\n\ndef printer(h,w):\n\tfor _ in range(h):\n\t\ts = input()\n\t\ts = s.replace(' ','')\n\t\tprint('#'+s+'#')\n\nprint('#'*(w+2))\nprinter(h, w)\nprint('#'*(w+2))"}
{"label": 58, "index": 7488, "code": "size=[int(i) for i in input().split()]\nimage=[[str(input())] for i in range(size[0])]\n\nprint(\"#\"*(size[1]+2))\nfor i in image:\n    print(''.join([\"#\"]+i+[\"#\"]))\nprint(\"#\"*(size[1]+2))"}
{"label": 58, "index": 7489, "code": "H, W = map(int, input().split())\na = [input() for i in range(H)]\n\nprint(\"#\" * (W+2))\nfor i in range(H):\n    print(\"#\" + a[i] + \"#\")\nprint(\"#\" * (W+2))\n"}
{"label": 58, "index": 7490, "code": "import sys\n\nH,W = raw_input().split()\na =[]\nfor line in range(int(H)):\n    a.append(raw_input())\n\nfor i in range(0,int(W)+2):\n    sys.stdout.write(\"#\")\nprint\n\nfor i in range(0,int(H)):\n    sys.stdout.write(\"#\")\n    for j in range(0,int(W)):\n        sys.stdout.write(a[i][j])\n    sys.stdout.write(\"#\")\n    print\n\nfor i in range(0,int(W)+2):\n    sys.stdout.write(\"#\")\nprint\n"}
{"label": 58, "index": 7491, "code": "from __future__ import division\nimport math\n\n\ndef get_min(w, h):\n    m = 1e11\n    for x in [w // 3, w // 3 + 1]:\n        if x == 0: continue\n        a = [x*h, (w-x)*(h//2), (w-x)*(h - h//2)]\n        print a\n        m = min(m, max(a) - min(a))\n    return m\n\ndigits = raw_input()\na, b = [int(x) for x in digits.split(' ')]\nm = []\nfor i in range(a):\n    s = raw_input()\n    m.append(s)\nprint ''.join(['#'] * (b + 2))\nfor i in range(a):\n    print '#' + m[i] + '#'\nprint ''.join(['#'] * (b + 2))\n"}
{"label": 58, "index": 7492, "code": "h, w = list(map(int, input().split()))\n\nsha = ''.join(['#' for i in range(w + 2)])\na = [sha]\n\nfor j in range(h):\n    a.append('#' + input() + '#')\n\na.append(sha)\n\nfor k in a:\n    print(k)\n"}
{"label": 58, "index": 7493, "code": "\n\nh, w = [int(x) for x in input().split(' ')]\n\nans = (w + 2) * '#' + '\\n'\n\nfor i in range(h):\n    ans += '#' + input() + '#\\n'\n\nans += (w + 2) * '#'\n\nprint(ans)\n"}
{"label": 58, "index": 7494, "code": "h,w = map(int,input().split())\nword = []\nfor i in range(h):\n    word.append(input())\n \nprint(\"#\" * (w + 2))\nfor i in range(h):\n    print(\"#\" + word[i] + \"#\")\nprint(\"#\" * (w + 2))"}
{"label": 58, "index": 7495, "code": "H, W = list(map(int, input().split(' ')))\nlst = []\n\nfor h in range(H):\n  lst.append(input())\n\n\nprint('#'*(W+2))\nfor s in lst:\n  print('#{}#'.format(s))\nprint('#'*(W+2))\n"}
{"label": 58, "index": 7496, "code": "h,w = map(int,input().split())\n\nx = [input() for i in range(h)]\n\nprint(\"#\"*(w+2))\n\nfor i in x:\n    print(\"#\"+i+\"#\")\n\nprint(\"#\"*(w+2))\n "}
{"label": 58, "index": 7497, "code": "def read(): return list(map(int, input().split()))\n\n\nh, w = read()\nlines = [input() for y in range(h)]\n\nprint(\"#\" * (w + 2))\n\nfor line in lines:\n    print(\"#\", end=\"\")\n    print(line, end=\"\")\n    print(\"#\")\n\nprint(\"#\" * (w + 2))"}
{"label": 58, "index": 7498, "code": "H,W = [int(x) for x in input().split()]\n\nimage = []\nfor i in range(H):\n    image.append(input())\n\nframed_image = []\nfor i in range(H+2):\n    if i == 0 or i == H+1:\n        framed_image.append(\"#\"*(W+2))\n    else:\n        framed_image.append(\"#\"+image[0]+\"#\")\n        del image[0]\n\nfor line in framed_image:\n    print(line)"}
{"label": 58, "index": 7499, "code": "H, W = map(int, input().split())\nL = []\nfor i in range(H):\n L.append(list(map(str, input().split())))\n\nprint(\"#\" * (W + 2))\nfor i in range(H):\n print(\"#\", end=\"\")\n for j in L[i]:\n  print(j, end=\"\")\n print(\"#\")\nprint(\"#\" * (W + 2))"}
{"label": 58, "index": 7500, "code": "a=input().split()\nx=int(a[1])+2\ns=[]\nfor i in range(int(a[0])):\n    s.append(input())\nprint(\"#\"*x)\nfor i in range(int(a[0])):\n    print(\"#\"+s[i]+\"#\")\nprint(\"#\"*x)\n"}
{"label": 58, "index": 7501, "code": "import sys\n\nif __name__ == '__main__':\n    count = 0\n    D = []\n    for line in sys.stdin:\n        if count == 0:\n            line = line.rstrip(\"\\n\").split(\" \")\n            H = int(line[0])\n            W = int(line[1])\n            count+=1\n\n        else:\n            D.append(line.rstrip(\"\\n\"))\n\n    print(\"\".join([\"#\"]*(W+2)))\n    for i in range(len(D)):\n        print(\"#\"+D[i]+\"#\")\n    print(\"\".join([\"#\"]*(W+2)))"}
{"label": 58, "index": 7502, "code": "H, W = map(int,input().split())\nAs = [input() for i in range(H)]\nprint(\"#\" * (W + 2))\nfor a in As:\n    print(\"#\" + a + \"#\")\nprint(\"#\" * (W + 2))\n"}
{"label": 58, "index": 7503, "code": "# -*- coding: utf-8 -*-\n\nh,w = map(int, raw_input().split())\nsharp = ''\n\nfor i in range(w+2):\n    sharp += '#' \nprint(sharp)\nfor i in range(h):\n    print('#'+raw_input()+'#')\nprint(sharp)\n"}
{"label": 58, "index": 7504, "code": "buf = input()\nH,W = buf.split()\nH = int(H)\nW = int(W)\npic = []\n \nfor i in range(H):\n    pic.append(input())\n \n#for row in pic:\n#    print(row)\n \nfor i in range(W+2):\n    print(\"#\",end=\"\")\nprint()\n \nfor i in range(H):\n    print(\"#\"+pic[i]+\"#\")\n \nfor i in range(W+2):\n    print(\"#\",end=\"\")"}
{"label": 58, "index": 7505, "code": "# -*- coding: utf-8 -*-\n\"\"\"\nhttp://abc062.contest.atcoder.jp/tasks/abc062_b\n\n\"\"\"\nimport sys\nfrom sys import stdin\ninput = stdin.readline\n\n\ndef main(args):\n    H, W = map(int, input().split())\n    data = []\n    for _ in range(H):\n        data.append(input().strip())\n\n    frame = ['#' * (W+2)]\n\n    for d in data:\n        frame.append('#' + d + '#')\n    frame.append('#' * (W+2))\n\n    for line in frame:\n        print(line)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"label": 58, "index": 7506, "code": "h,w=map(int,input().split())\nbob=[\"#\"*(w+2)]\nfor x in range(h):\n    bob.append(\"#\"+input()+\"#\")\nbob+=[\"#\"*(w+2)]\nfor x in range(len(bob)):\n    print(bob[x])"}
{"label": 58, "index": 7507, "code": "h,w=map(int,input().split());w+=2\nprint('#'*w)\nfor _ in[0]*h:print('#'+input()+'#')\nprint('#'*w)"}
{"label": 58, "index": 7508, "code": "x, y = map(int, raw_input().split())\n\nprint \"#\" * (y + 2)\n\nfor i in range(x):\n\ta = raw_input()\n\tprint \"#\" + a + \"#\"\n\nprint \"#\" * (y + 2)"}
{"label": 58, "index": 7509, "code": "h, w = map(int, raw_input().split())\nstrings = []\nfor i in range(h):\n    strings.append(raw_input())\nprint '#' * (w+2)\nfor string in strings:\n    print '#' + string + '#'\nprint '#' * (w+2)"}
{"label": 58, "index": 7510, "code": "n, m = map(int, input().split())\na = ['#' * (m + 2)] + ['#' + input() + '#' for i in range(n)] + ['#' * (m + 2)]\n[print(''.join(i)) for i in a]"}
{"label": 58, "index": 7511, "code": "import sys\nHW = map(int, raw_input().split())\ntext = []\nfor i in range(HW[0]):\n\t text.append(raw_input())\nfor j in range(HW[1] + 2):\n\tsys.stdout.write('#')\nprint\nfor i in range(HW[0]):\n\tsys.stdout.write('#')\n\tsys.stdout.write(text[i])\n\tprint('#')\nfor j in range(HW[1] + 2):\n\tsys.stdout.write('#')\nprint"}
{"label": 58, "index": 7512, "code": "H, W = list(map(int,input().split()))\n\n\nblank = [\"#\" for i in range(W + 2)]\nprint(\"\".join(blank))\nfor line in range(H):\n    print(\"#\" + input() + \"#\")\nprint(\"\".join(blank))\n\n"}
{"label": 58, "index": 7513, "code": "h, w = map(int, input().split())\n\nimage = [\"\".join([\"#\"] + input().split() + [\"#\"]) for i in range(h)]\nimage.insert(0, \"#\"*(w+2))\nimage.append(\"#\"*(w+2))\n\nfor i in image:\n    print(i)\n"}
{"label": 58, "index": 7514, "code": "def main():\n    h, w = map(int, input().split())\n    mat = [['#' for _ in range(w+2)] for _ in range(h+2)]\n\n    inp = [[c for c in input()] for _ in range(h)]\n    for i in range(1, h+1):\n        for j in range(1, w+1):\n            mat[i][j] = inp[i-1][j-1]\n\n    for i in range(h+2):\n        print(''.join(mat[i]))\n\n\nif __name__ == \"__main__\":\n    main()"}
{"label": 58, "index": 7515, "code": "\nmat_small = []\nxy = input().split(' ')\nfor i in range(int(xy[0])):\n    mat_small.append(input())\n\nbig  = [(int(xy[1])+ 2)* '#'  for a in range(int(xy[0])+ 2) ]\n\nfor s in range(1, (int(xy[0])+ 1)):\n    big[s] = '#' + mat_small[s-1] + '#'\n\nfor v in big:\n    \n    print(v)  "}
{"label": 58, "index": 7516, "code": "# _*_ coding:utf-8 _*_\n\nimport sys\n\ninput = [int(i) for i in sys.stdin.readline().split(' ')]\ninput_matrix = []\n\nfor i in range(input[0]):\n\tinput_matrix.append(sys.stdin.readline().replace('\\n',''))\n\nfor i in range(input[1] + 2):\n\tprint('#',end='')\nprint()\n\nfor i in range(input[0]):\n\tprint('#',end='')\n\tprint(input_matrix[i],end='')\n\tprint('#',)\n\t\nfor i in range(input[1] + 2):\n\tprint('#',end='')\n\t\n"}
{"label": 58, "index": 7517, "code": "h,w=map(int,input().split())\nprint(\"#\"*(w+2))\nfor _ in range(h):\n    print(\"#\"+input()+\"#\")\nprint(\"#\"*(w+2))\n"}
{"label": 58, "index": 7518, "code": "# coding: utf-8\n# Here your code !\nh,w=map(int,input().split())\ndata=['#'*(w+2)]\nfor i in range(h):\n    data.append('#'+input()+\"#\")\ndata.append('#'*(w+2))\nprint('\\n'.join(data))"}
{"label": 58, "index": 7519, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\n\n\ndef main():\n    h,w = LI()\n    a = ['#'*(w+2)] + ['#' + S() + '#' for _ in range(h)] + ['#'*(w+2)]\n\n    return '\\n'.join(a)\n\n\n\nprint(main())\n"}
{"label": 58, "index": 7520, "code": "H,W=map(int,input().split())\nprint(\"#\"*(W+2))\nfor i in range(H):\n    tmp=input()\n    print(\"#\"+tmp+\"#\")\nprint(\"#\"*(W+2))\n"}
{"label": 58, "index": 7521, "code": "# -*- coding: utf-8 -*-\n\nimport sys\nimport subprocess\nimport json\nimport time\nimport math\nimport re\nimport sqlite3\n\nH, W = map(int, input().split())\na = []\n\na.append('#' * W)\n\nfor i in range(H):\n    a.append(input())\n    \na.append('#' * W)\n\nfor i in range(len(a)):\n    a[i] = '#' + a[i] + '#'\n    print(a[i])\n\n\n"}
{"label": 58, "index": 7522, "code": "H, W = [int(n) for n in input().split()]\n\n\ninputs = []\nfor i in range(H):\n    inputs.append(input())\n\nfirst_line = \"\".join(\"#\" for i in range(W+2))\n\nprint(first_line)\nfor i in range(H):\n    print(\"#\" + inputs[i] + \"#\")\nprint(first_line)"}
{"label": 58, "index": 7523, "code": "N, M = map(int,input().split())\na = []\nfor i in range(N):\n    a.append(input())\n\nprint(\"#\"*(M+2))\nfor i,b in enumerate(a):\n  print(\"#\"+a[i]+\"#\")\nprint(\"#\"*(M+2))"}
{"label": 58, "index": 7524, "code": "H, W = map(int,input().split())\n\nprint(\"#\" * (W + 2))\nfor i in range(H):\n    print(\"#\" + str(input()) + \"#\")\nprint(\"#\" * (W + 2))"}
{"label": 58, "index": 7525, "code": "H, W = map(int, input().split())\nprint('#' * (W+2))\nfor i in range(H):\n    s = input()\n    print('#' + s + '#')\nprint('#' * (W+2))\n"}
{"label": 58, "index": 7526, "code": "# input\nx, y = [int(i) for i in input().split()]\ns = [input() for i in range(x)]\n\nans = []\n\nr0 = ''\nfor i in range(y+2):\n    r0 += '#'\nans.append(r0)\n\nfor ss in s:\n    ans.append('#' + ss + '#')\n\nans.append(r0)\n\nfor a in ans:\n    print(a)"}
{"label": 58, "index": 7527, "code": "# Problem D-D\nH, W = [int(x) for x in input().strip().split(' ')]\nimage = []\nfor row in range(H):\n    image.append(input().strip())\nprint(\"#\" * (W + 2))\nfor i in range(H):\n    print(\"#\" + image[i] + \"#\")\nprint(\"#\" * (W + 2))\n"}
{"label": 58, "index": 7528, "code": "H, W = map(int, input().split())\narray = list()\nheader = \"\"\nfor i in range(0, H):\n    array.append(\"#\" + input() + \"#\")\nfor i in range(0, W + 2):\n    header += \"#\"\n\nprint(header)\nfor p in array:\n    print(p)\nprint(header)"}
{"label": 58, "index": 7529, "code": "H,W=map(int,input().split())\nprint ('#' *(W+2))\nfor i in range (H):\n print ('#'+str(input())+'#')\nprint ('#'*(W+2))"}
{"label": 58, "index": 7530, "code": "H,W=map(int,input().split())\nA=[]\n\nfor i in range(H):\n    A.append(input())\n\nprint(\"#\"*(W+2))\nfor i in range(H):\n    print(\"#\"+A[i]+\"#\")\nprint(\"#\"*(W+2))"}
{"label": 58, "index": 7531, "code": "h, w = map(int, input().split())\nlst = []\nfor i in range(h):\n    lst.append(list(input().split()))\n    lst[i].insert(0, \"#\")\n    lst[i].append(\"#\")\nhead = [\"#\" for i in range(w+2)]\nbottom = head\n\nprint(\"\".join(head))\nfor i in range(h):\n    print(\"\".join(lst[i]))\nprint(\"\".join(bottom))\n"}
{"label": 58, "index": 7532, "code": "h, w = [int(i) for i in raw_input().split()]\nprint('#' * (w + 2))\nfor v in [raw_input() for i in range(h)]:\n    print('#%s#' % v)\nprint('#' * (w + 2))\n"}
{"label": 58, "index": 7533, "code": "def debug_print_joined(l):\n    for col in l:\n        print(\"\".join(col))\n\n\ndef solve(): # Picture Frame\n    H, W = list(map(int, input().split(\" \")))\n    A = []\n    for _ in range(H):\n        A.append(list(input()))\n\n    for i in range(H):\n        A[i].insert(0, \"#\")\n        A[i].append(\"#\")\n\n    A.insert(0, [\"#\" for _ in range(W + 2)])\n    A.append([\"#\" for _ in range(W + 2)])\n\n    debug_print_joined(A)\n\n\nsolve()"}
{"label": 58, "index": 7534, "code": "h,w=map(int,input().split())\nb=''.join(['#']*(w+2))\nprint(b)\nfor i in range(h):print('#'+input()+'#')\nprint(b)"}
{"label": 58, "index": 7535, "code": "#!/usr/bin/env/ python\n\nH,W=map(int,raw_input().split())\narr=[['#']*W]*H\nfor i in range(H):\n    line=map(str,raw_input())\n    line.insert(0,'#')\n    line.append('#')\n    arr[i]=line\n\nprint '#'*(W+2)\nfor i in range(H):\n    print \"\".join(arr[i])\nprint '#'*(W+2)"}
{"label": 58, "index": 7536, "code": "h, w = list(map(int, input().split(\" \")))\n\nprint(\"#\"*(w+2))\nfor i in range(h):\n    print(\"#\", end=\"\")\n    print(input(), end=\"\")\n    print(\"#\")\nprint(\"#\"*(w+2))"}
{"label": 58, "index": 7537, "code": "import sys\n\ndef solve():\n    h, w = map(int, input().split())\n\n    print('#' * (w + 2))\n\n    for i in range(h):\n        s = '#' + input() + '#'\n        print(s)\n\n    print('#' * (w + 2))\n\nif __name__ == '__main__':\n    solve()"}
{"label": 58, "index": 7538, "code": "h,w=map(int,raw_input().split())\nr='#'*(w+2)\ns=[]\ns.append(r)\nfor i in xrange(h):\n t='#'+raw_input()+'#'\n s.append(t)\ns.append(r)\nfor i in xrange(h+2):\n print s[i]\n"}
{"label": 58, "index": 7539, "code": "H, W = map(int, input().split())\nfor i in range(H+2):\n    if i == 0 or i == H + 2 - 1:\n        print('#' * (W + 2))\n    else:\n        a = input()\n        print('#' + a + '#')\n"}
{"label": 59, "index": 7540, "code": "a, b = map(int, input().split())\nif a+b >= 10:\n    print('error')\nelse:\n    print(a+b)\n"}
{"label": 59, "index": 7541, "code": "A ,B = map(int, input().split())\nif (A + B >= 10):\n    print('error')\nelse :\n    print(A+B)"}
{"label": 59, "index": 7542, "code": "a, b = map(int, raw_input().split())\nif a + b < 10:\n    print a + b\nelse:\n    print \"error\"\n"}
{"label": 59, "index": 7543, "code": "A, B = [int(x) for x in input().split(\" \")]\n \nans = A + B\n \nprint(\"error\" if ans >= 10 else ans)"}
{"label": 59, "index": 7544, "code": "A, B = [int(x) for x in input().split(\" \")]\n\nans = A + B\n\nprint(\"error\" if ans >= 10 else ans)"}
{"label": 59, "index": 7545, "code": "a, b = map(int, input().split())\nprint(a + b if a + b < 10 else 'error')"}
{"label": 59, "index": 7546, "code": "ls = map(int,input().split())\nans = sum(ls)\nif (ans >= 10):\n  print(\"error\")\nelse:\n  print(ans)"}
{"label": 59, "index": 7547, "code": "# -*- coding: utf-8 -*-\n\nA, B = map(int, input().split())\n\n[print(A+B) if A+B < 10 else print('error')]"}
{"label": 59, "index": 7548, "code": "A, B = map(int, input().split())\nif A+B >= 10:\n    print(\"error\")\nelse:\n    print(A+B)"}
{"label": 59, "index": 7549, "code": "A, B=list(map(int, input().split()))\n# A= 8\n# B= 1\ns = A + B\nif (s >= 10):\n    print(\"error\")\nelse:\n    print(s)"}
{"label": 59, "index": 7550, "code": "A, B = map(int, input().split())\n \nif (A+B) >= 10:\n    print(\"error\")\nelse:\n    print(A+B)"}
{"label": 59, "index": 7551, "code": "a, b = map(int, input().split())\n\nif a + b >= 10:\n    print(\"error\")\nelse:\n    print(a + b)"}
{"label": 59, "index": 7552, "code": "A, B = map(int, input().split())\n\nif (A+B) >= 10:\n    print(\"error\")\nelse:\n    print(A+B)\n"}
{"label": 59, "index": 7553, "code": "A, B = map(int, input().split())\nif A + B >= 10:\n    print(\"error\")\nelse:\n    print(A + B)\n"}
{"label": 59, "index": 7554, "code": "x = list(map(int, input().split()))\n\nif(x[0]+x[1]>=10):\n    print(\"error\")\n    quit()\nprint(x[0]+x[1])"}
{"label": 59, "index": 7555, "code": "# coding: utf-8\n# Here your code !\nl = list(map(int, input().split()))\na = l[0]\nb = l[1]\nif a+b >= 10:\n    print(\"error\")\nelse:\n    print(a+b)\n"}
{"label": 59, "index": 7556, "code": "a, b = map(int, input().split())\nif(a+b<10):\n    print(a+b)\nelse:\n    print(\"error\")"}
{"label": 59, "index": 7557, "code": "A, B = [int(x) for x in input().split(\" \")]\n\nans = A + B\n\nprint(\"error\" if ans >= 10 else ans)\n"}
{"label": 59, "index": 7558, "code": "a, b = map(int, input().split())\nprint(a + b if a + b < 10 else \"error\")"}
{"label": 59, "index": 7559, "code": "a=sum(map(int,input().split()))\nprint(a if a<10 else\"error\")"}
{"label": 59, "index": 7560, "code": "a, b   = map(int, raw_input().split(' '))\n\nif a+b >=10:\n    print 'error'\nelse:\n    print a+b"}
{"label": 59, "index": 7561, "code": "num = input().split(\" \")\nresult = int(num[0])+int(num[1])\nif result < 10:\n    print(result)\nelse:\n    print(\"error\")"}
{"label": 59, "index": 7562, "code": "A, B = map(int, raw_input().split())\n\nprint 'error' if A + B >= 10 else A + B"}
{"label": 59, "index": 7563, "code": "def main():\n    A, B = map(int, input().split())\n\n    if A + B >= 10:\n        ans = 'error'\n    else:\n        ans = A + B\n\n    print(ans)\n\nmain()\n"}
{"label": 59, "index": 7564, "code": "# -*- coding:utf-8 -*-\na = sum(list(map(int,input().split())))\nif a >= 10:\n    print(\"error\")\nelse:\n    print(a)"}
{"label": 59, "index": 7565, "code": "# coding: utf-8\n# Here your code !\n\na,b = map(int, input().split())\nsum=a+b\nif sum<10:\n    print(sum)\nelse:\n    print(\"error\")"}
{"label": 59, "index": 7566, "code": "# -*- coding: utf-8 -*-\n\nimport sys\nimport os\n\nA, B = map(int, input().split())\n\nif A + B >= 10:\n    print('error')\nelse:\n    print(A + B)"}
{"label": 59, "index": 7567, "code": "A,B=map(int, input().split())\nif A + B >= 10:\n print(\"error\")\nelse:\n print(str(A+B))"}
{"label": 59, "index": 7568, "code": "#!/bin/usr/python\n\nx,y = [int(i) for i in input().split()]\n\nif x+y >= 10:\n    print(\"error\")\nelse:\n  print(x+y)"}
{"label": 59, "index": 7569, "code": "from sys import stdin\n\na, b = map(int, stdin.readline().split())\n\nprint(a + b) if a + b < 10 else print('error')\n"}
{"label": 59, "index": 7570, "code": "A,B = [int(x) for x in input().split()]\nif A+B >= 10:\n   print(\"error\")\nelse:\n   print(A+B)"}
{"label": 59, "index": 7571, "code": "def a():\n    a, b = map(int, input().split())\n    print(a + b if a + b < 10 else 'error')\n\na()\n"}
{"label": 59, "index": 7572, "code": "A, B = map(int, raw_input().split())\n\nresult = A + B\n\nif 10 <= result:\n    print(\"error\")\nelse:\n    print(result)"}
{"label": 59, "index": 7573, "code": "#Python\n\nA = map(int, raw_input().split())\nif A[0]+A[1]>=10:\n\tprint 'error'\nelse:\n\tprint A[0]+A[1]"}
{"label": 59, "index": 7574, "code": "a, b = [int(i) for i in input().split()]\nif a+b >= 10:\n    print(\"error\")\nelse:\n    print(a+b)"}
{"label": 59, "index": 7575, "code": "x = input().split(\" \")\na = int(x[0])\nb = int(x[1])\n\nif (a + b >= 10):\n    print(\"error\")\nelse:\n    print(a + b)\n"}
{"label": 59, "index": 7576, "code": "A, B = map(int, input().split())\n\nif A + B >= 10:\n    print('error')\nelse:\n    print(A + B)\n"}
{"label": 59, "index": 7577, "code": "a, b = map(int,input().split())\ntotale = a + b\nif totale >= 10:\n   print(\"error\")\nelse:\n   print(totale)"}
{"label": 59, "index": 7578, "code": "A , B = list(map(int,input().split()))\n\nif A+B >=10:\n    print(\"error\")\nelse:\n    print(A+B)"}
{"label": 59, "index": 7579, "code": "#!/usr/bin/env python\nfrom __future__ import division, print_function\nimport sys\n\n\ndef main():\n    a, b = map(int, sys.stdin.readline().strip().split(\" \"))\n    print(a + b if a + b < 10 else \"error\")\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 59, "index": 7580, "code": "A, B = map(int, raw_input().split())\nprint A+B if A+B < 10 else 'error'"}
{"label": 59, "index": 7581, "code": "a, b = map(int, input().split())\n\nsum = a + b\n\nif sum < 10:\n    print(sum)\nelse:\n    print(\"error\")"}
{"label": 59, "index": 7582, "code": "ab=input()\nif(int(ab[0])+int(ab[2]) >= 10):\n    print(\"error\")\nelse:print(int(ab[0])+int(ab[2]))"}
{"label": 59, "index": 7583, "code": "#coding: utf-8\n\nline = input().strip()\n\na = int(line[0])\nb = int(line[2])\n\nif a + b >= 10:\n    print('error')\nelse:\n    print(a + b)"}
{"label": 59, "index": 7584, "code": "\na, b = list(map(int, input().split()))\n\nif a + b >= 10:\n    print('error')\nelse:\n    print(a+b)\n"}
{"label": 59, "index": 7585, "code": "a,b = map(int,input().split())\nprint(a + b if a + b < 10 else 'error')"}
{"label": 59, "index": 7586, "code": "# -*- coding: utf-8 -*-\n\na,b = map(int,input().split())\n\nanswer = a + b\n\nif answer > 9:\n    print(\"error\")\nelse:\n    print(answer)"}
{"label": 59, "index": 7587, "code": "\nA, B = [int(_) for _ in input().split()]\ns = A + B\nprint(s if s < 10 else 'error')"}
{"label": 59, "index": 7588, "code": "a,b=map(int,input().split())\nprint(a+b if a+b<10 else 'error')"}
{"label": 59, "index": 7589, "code": "A, B = map(int, input().split())\n\ntotal = A+B\n\nif A >= 1 and B <=9 :\n    if total < 10:\n        print(total)\n    else:\n        print('error')"}
{"label": 59, "index": 7590, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\n\ndef main():\n    a,b = LI()\n    if a+b >= 10:\n        return 'error'\n\n    return a+b\n\n\n\nprint(main())\n"}
{"label": 59, "index": 7591, "code": "A,B = map(int,input().split())\nif(A + B) < 10:\n\tprint(A+B)\nelse:\n\tprint(\"error\")"}
{"label": 59, "index": 7592, "code": "A,B=map(int,input().split())\nif A+B<10:\n    print(A+B)\nelse:\n    print(\"error\")"}
{"label": 59, "index": 7593, "code": "def solve():\n    a,b=map(int,input().split())\n    if a+b>=10:\n        print(\"error\")\n    else:\n        print(a+b)\n\nif __name__ == \"__main__\":\n    solve()"}
{"label": 59, "index": 7594, "code": "A, B = map(int, raw_input().split())\nprint \"error\" if A + B >= 10 else A + B"}
{"label": 59, "index": 7595, "code": "a, b = [int(i) for i in input().split()]\n\nans = a + b\nif ans > 9:\n    print('error')\nelse:\n    print(ans)"}
{"label": 59, "index": 7596, "code": "A, B = map(int, input().split())\n\nif A+B >= 10:\n    print(\"error\")\n    \nelse:\n    print(A+B)"}
{"label": 59, "index": 7597, "code": "#coding:utf-8\n\nl = map(int, raw_input().split())\n\nif l[0] + l[1] >= 10:\n\tprint 'error'\n\nelse:\n\tprint l[0] + l[1]\n"}
{"label": 59, "index": 7598, "code": "A, B = map(int,input().split())\n\nif A+B>=10:\n    print(\"error\")\nelse:\n    print(A+B)"}
{"label": 59, "index": 7599, "code": "a, b = map(int, raw_input().split())\n\n\nif 10 <= a + b:\n    print(\"error\")\nelse:\n    print a + b\n"}
{"label": 59, "index": 7600, "code": "s = sum(map(int, input().split()))\nprint('error' if s >= 10 else s)"}
{"label": 59, "index": 7601, "code": "l = map(int, raw_input().split())\n\nans = l[0] + l[1]\n\nif ans >= 10:\n    print \"error\"\nelse:\n    print ans\n    \n    "}
{"label": 59, "index": 7602, "code": "A,B = [int(i) for i in input().split()]\nif A+B >= 10:\n    print(\"error\")\nelse:\n    print(A+B)\n"}
{"label": 59, "index": 7603, "code": "A, B = list(map(int, input().split()))\nif A + B >= 10:\n\tprint(\"error\")\nelse:\n\tprint(A+B)"}
{"label": 59, "index": 7604, "code": "#!/usr/bin/env python\n# _*_ coding: utf-8 _*_\na = input()\na.split()\na.split()[1]\n\nA = int(a.split()[0])\nB = int(a.split()[1])\n\nsum = A + B\n\nif sum < 10:\n    print(sum)\n\nelif sum >= 10:\n    print(\"error\")\n"}
{"label": 59, "index": 7605, "code": "a,b=map(int, raw_input().split())\nc=a+b\nprint str(c) if c < 10 else \"error\""}
{"label": 59, "index": 7606, "code": "# -*- coding: utf-8 -*-\n\"\"\"\nhttp://abc063.contest.atcoder.jp/tasks/abc063_a\n\n\"\"\"\nimport sys\nfrom sys import stdin\ninput = stdin.readline\n\n\ndef main(args):\n    A, B = map(int, input().split())\n    if A + B >= 10:\n        print('error')\n    else:\n        print(A + B)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"label": 59, "index": 7607, "code": "a,b = map(int,input().split())\nif a+b >= 10:\n  print(\"error\")\nelse:\n  print(a+b)"}
{"label": 59, "index": 7608, "code": "A, B = list(map(int, input().split(\" \")))\n\nif A+B > 9:\n    print(\"error\")\nelse:\n    print(A+B)"}
{"label": 59, "index": 7609, "code": "a, b = map(int, raw_input().split())\n\nif a + b < 10:\n    print a + b\nelse:\n    print \"error\"\n"}
{"label": 59, "index": 7610, "code": "v=sum(map(ord,input()))&31;print([v,'error'][9<v])"}
{"label": 59, "index": 7611, "code": "a,b = map(int,input().split())\n\nif a+b>=10:\n    print(\"error\")\nelse:\n    print(a+b)"}
{"label": 59, "index": 7612, "code": "A, B = map(int, raw_input().split())\nif A + B < 10:\n    print A + B\nelse:\n    print \"error\"\n"}
{"label": 59, "index": 7613, "code": "if __name__ == \"__main__\":\n    A, B = map(int, input().split())\n\n    if A + B >= 10:\n        print(\"error\")\n    else:\n        print(A + B)"}
{"label": 59, "index": 7614, "code": "# -*- coding: utf-8 -*-\n\na,b = map(int, raw_input().split())\n\n\nif(a+b>=10):\n    print('error')\nelse:\n    print(a+b)"}
{"label": 59, "index": 7615, "code": "# -*- coding: utf-8 -*-\n\n#\u5165\u529b\nA, B = map(int, raw_input().split())\n\n#\u51fa\u529b\ninSum = A+B\nif inSum >= 10:\n    print 'error'\nelse:\n    print str(A+B)"}
{"label": 59, "index": 7616, "code": "a,b = map(int,input().split())\ns = a+b\nprint('error') if s>=10 else print(s)\n"}
{"label": 59, "index": 7617, "code": "a, b = map(int, input().split(\" \"))\nprint(a+b if a+b<10 else \"error\")\n"}
{"label": 59, "index": 7618, "code": "# -*- coding: utf-8 -*-\nimport sys\n\nA, B = map(int, input().split())\n\nC = A + B\nif C >= 10:\n print('error')\nelse:\n print(C)"}
{"label": 59, "index": 7619, "code": "a,b=map(int,input().split());print([a+b,'error'][a+b>9])"}
{"label": 59, "index": 7620, "code": "A, B = map(int, input().split())\n\nif A + B >9:\n    print('error')\nelse:\n    print(A+B)\n"}
{"label": 59, "index": 7621, "code": "# -*- coding: utf-8 -*-\na, b = map(int, input().split())\nif 10 <= a + b:\n  print('error')\nelse:\n  print(str(a + b))"}
{"label": 59, "index": 7622, "code": "a, b = input().split()\na = int(a)\nb = int(b)\nsum = a+b\nif(sum >= 10):\n  print(\"error\")\nelse:\n  print(sum)"}
{"label": 59, "index": 7623, "code": "A, B = list(map(int, input().split()))\nif (A+B) >= 10:\n    print('error')\nelse:\n    print(A+B)\n"}
{"label": 59, "index": 7624, "code": "A,B = list(map(int,input().split()))\nprint  (A + B) if (A + B)<10 else print ('error')"}
{"label": 59, "index": 7625, "code": "a,b = map(int,(input().split()))\n\nif a+b>=10:\n    print(\"error\")\nelse:\n    print(a+b)\n"}
{"label": 59, "index": 7626, "code": "AB=input()\nlist=AB.split()\nA=int(list[0])\nB=int(list[1])\nif A+B<10:\n    print(A+B)\nelse:\n    print(\"error\")\n"}
{"label": 59, "index": 7627, "code": "a,b=map(int,input().split())\nprint('error' if a+b>=10 else a+b)"}
{"label": 59, "index": 7628, "code": "A,B=list(map(int,input().split()))\n\n\nif A+B>=10:\n    print(\"error\")\nelse :\n    print(A+B)\n\n"}
{"label": 59, "index": 7629, "code": "A,B = map(int, input().split(\" \"))\nif A+B >= 10:\n    print(\"error\")\nelse:\n    print(A+B)"}
{"label": 59, "index": 7630, "code": "a, b = map(int, raw_input().split())\n\nif a+b > 9:\n    print \"error\"\nelse:\n    print a+b"}
{"label": 59, "index": 7631, "code": "A,B=map(int,input().split())\nif A+B<10:\n    print(A+B) \nelse:\n    print(\"error\")"}
{"label": 59, "index": 7632, "code": "z =list(map(int,input().split(\" \")))\ns=z[0]+z[1]\nif s>=10:\n    print(\"error\")\nelse:\n    print(s)"}
{"label": 59, "index": 7633, "code": "A,B = map(int, raw_input().split())\nif A+B >= 10 : print 'error'\nelse : print A+B"}
{"label": 59, "index": 7634, "code": "A, B = [int(x) for x in input().split(\" \")]\n\nans = A + B\n\nprint(\"error\" if ans >= 10 else ans)\n"}
{"label": 59, "index": 7635, "code": "a,b = map(int , input().split())\nans = a + b\nif ans >= 10:\n    print('error')\nelse:\n    print(ans)"}
{"label": 59, "index": 7636, "code": "a, b = list(map(int, input().split()))\nif(a+b >= 10):\n    print(\"error\")\nelse:\n    print(a+b)"}
{"label": 59, "index": 7637, "code": "a,b =map(int,input().split())\n\nif a+b>=10:\n    print(\"error\")\nelse:\n    print(a+b)"}
{"label": 59, "index": 7638, "code": "a,b = map(int,input().split())\nmsg = a+b if a+b < 10 else \"error\"\nprint(msg)"}
{"label": 59, "index": 7639, "code": "A, B = [int(x) for x in input().split(\" \")]\n\nans = A + B\n\nprint(\"error\" if ans >= 10 else ans)"}
{"label": 59, "index": 7640, "code": "a,b=map(int, input().split())\nprint(\"error\" if a+b>9 else a+b)"}
{"label": 59, "index": 7641, "code": "a=sum(map(int,input().split()))\nprint(a if a < 10 else \"error\")"}
{"label": 59, "index": 7642, "code": "A, B = list(map(int, input().split(\" \")))\nif A+B >= 10:\n    print(\"error\")\nelse:\n    print(A+B)"}
{"label": 59, "index": 7643, "code": "L = list(map(int,input().split()))\n\nif L[0] + L[1] < 10:\n  print(L[0] + L[1])\nelse:\n  print(\"error\")"}
{"label": 59, "index": 7644, "code": "# -*- coding:utf-8 -*-\n\nA, B = map(int, input().split())\nprint((A+B) if (A+B)<10 else 'error')"}
{"label": 59, "index": 7645, "code": "ab = input().split(' ')\ns = int(ab[0]) + int(ab[1])\nif s >= 10:\n    print('error')\nelse:\n    print(s)\n"}
{"label": 59, "index": 7646, "code": "l = raw_input().split(\" \")\n\naplusb=int(l[0])+int(l[1])\n\nif (aplusb > 9):\n    print \"error\"\nelse:\n    print(aplusb)"}
{"label": 59, "index": 7647, "code": "A, B = map(int, input().split())\nC = A + B\n\nif C < 10:\n\tprint(C)\nelse:\n\tprint('error')"}
{"label": 59, "index": 7648, "code": "A, B = list(map(int, input().split()))\nans = A + B\nif ans < 10:\n    print(ans)\nelse:\n    print(\"error\")\n"}
{"label": 59, "index": 7649, "code": "N = input().split()\nif int(N[0]) + int(N[1]) < 10:\n    print(int(N[0]) + int(N[1]))\nelse:\n    print(\"error\")\n"}
{"label": 59, "index": 7650, "code": "a,b = map(int,raw_input().split())\nif a+b >= 10:\n    print 'error'\nelse:\n    print a+b\n"}
{"label": 59, "index": 7651, "code": "x = list(map(int, input().split()))\nif x[0]+x[1]<10:\n    print(x[0]+x[1])\nelse:\n    print('error')"}
{"label": 59, "index": 7652, "code": "A, B = map(int, input().split())\n\nprint(A+B if A+B < 10 else 'error')"}
{"label": 59, "index": 7653, "code": "a,b = list(map(int,input().split()))\n\nif a+b >=10:\n    print(\"error\")\nelse:\n    print(a+b)\n"}
{"label": 59, "index": 7654, "code": "# -*- coding: utf-8 -*-\n\nimport sys\nimport subprocess\nimport json\nimport time\nimport math\nimport re\nimport sqlite3\n\nA, B = map(int, input().split())\nif A + B >= 10: print(\"error\")\nelse: print(A+B)\n"}
{"label": 59, "index": 7655, "code": "a,b = map(int, input().split())\nprint(a+b if a+b<10 else 'error')\n"}
{"label": 59, "index": 7656, "code": "a, b = map(int, input().split())\nans = a + b\nif ans >= 10:\n    print(\"error\")\nelse:\n    print(ans)\n"}
{"label": 59, "index": 7657, "code": "a,b = map(int, input().split())\nif (a+b>=10):\n\tprint(\"error\")\nelse:\n\tprint(a+b)\n"}
{"label": 59, "index": 7658, "code": "A, B = [int(x) for x in input().split(\" \")]\n\nans= A + B\n\nprint(\"error\" if ans >=10 else ans)"}
{"label": 59, "index": 7659, "code": "rawIn= input()\nrawIn= rawIn.split(' ')\na=int(rawIn[0])\nb=int(rawIn[1])\nif a+b >= 10:\n    print('error')\nelse:\n    print(a+b)"}
{"label": 59, "index": 7660, "code": "a,b = map(int, input().split())\ns = a + b\nif s >= 10:\n    print(\"error\")\nelse:\n    print(s)\n"}
{"label": 59, "index": 7661, "code": "A,B = map(int,input().split())\nif A + B >= 10:\n    print(\"error\")\nelse:\n    print(A + B)\n"}
{"label": 59, "index": 7662, "code": "a, b = map(int, input().split())\nans = \"error\" if(a + b >= 10) else a + b\nprint(ans)\n"}
{"label": 59, "index": 7663, "code": "A, B = map(int,input().split())\n\nif A+B>=10:\n    print(\"error\")\nelse:\n    print(A+B)"}
{"label": 59, "index": 7664, "code": "A, B = map(int,input().split())\n\nif A + B >= 10:\n    print(\"error\")\nelse:\n    print(A + B)"}
{"label": 59, "index": 7665, "code": "import sys\n\na,b = [int(x) for x in sys.stdin.readline().split()]\n\nif a+b <= 9:\n\tprint(a+b)\nelse:\n\tprint('error')"}
{"label": 59, "index": 7666, "code": "def main():\n    b, c = map(int, raw_input().split())\n    a = b + c\n    if a >= 10:\n        print 'error'\n    else:\n        print a\n\nmain()\n"}
{"label": 59, "index": 7667, "code": "input_str = input()\ninput = input_str.split(' ')\na = int(input[0])\nb = int(input[1])\nres = a + b\nif res >= 10:\n    print('error')\nelse:\n    print(res)\n"}
{"label": 59, "index": 7668, "code": "A, B = [int(n) for n in input().split()]\nif A+B < 10:\n  print(A+B)\nelse:\n  print(\"error\")"}
{"label": 59, "index": 7669, "code": "A, B = list(map(int, input().split()))\nprint(A + B if A + B < 10 else 'error')"}
{"label": 60, "index": 7670, "code": "letter = input()\nprint('yes' if len(letter)==len(set(letter)) else 'no')"}
{"label": 60, "index": 7671, "code": "import sys\nS = [i for i in input()]\n\nfor i in range(len(S)):\n    if S.count(S[i]) >= 2:\n        print('no')\n        sys.exit()\n\nprint('yes')\n"}
{"label": 60, "index": 7672, "code": "str=input()\nflag=True\nfor i in range(len(str)):\n    if str.count(str[i])!=1:\n        flag=False\n        break\nif flag:\n    print(\"yes\")\nelse:\n    print(\"no\")"}
{"label": 60, "index": 7673, "code": "def b():\n    s = input()\n    l = list(s)\n    print('yes' if len(set(l)) == len(l) else 'no')\n\nb()\n"}
{"label": 60, "index": 7674, "code": "S = list(input())\nno_dup = set(S)\n# print(S)\n# print(no_dup)\n# print(len(no_dup))\n\nif len(S) == len(no_dup):\n    print(\"yes\")\nelse:\n    print(\"no\")\n"}
{"label": 60, "index": 7675, "code": "# coding: utf-8\n# Here your code !\n\nimport sys\ninput_line2 = sys.stdin.readline()\n\nflag = 0\nfor i in range(len(input_line2)):\n    for j in range(len(input_line2)):\n        if i != j:\n            if input_line2[i] == input_line2[j]:\n                flag = 1\n                break;\n\nif flag == 1:\n    print (\"no\")\nelse :\n    print(\"yes\")"}
{"label": 60, "index": 7676, "code": "dp = [False]*26\n\nans = \"yes\"\nfor c in input():\n    tmp = ord(c) - 97\n    if dp[tmp]:\n        ans = \"no\"\n        break\n    else:\n        dp[tmp] = True\nprint(ans)\n"}
{"label": 60, "index": 7677, "code": "if __name__==\"__main__\":\n    S = input()\n    S_uniq = set(list(S))\n    \n    if(len(S) == len(S_uniq)):\n        print(\"yes\")\n    else:\n        print(\"no\")"}
{"label": 60, "index": 7678, "code": "a=raw_input()\nb=len(a)\nc=0\nfor i in range(b):\n    for j in range(i+1,b):\n        if a[i]==a[j]:\n            c+=1\nif c==0:\n    print \"yes\"\nelse:\n    print \"no\"\n"}
{"label": 60, "index": 7679, "code": "s = list(input())\nprint(\"yes\" if len(s) == len(set(s)) else \"no\")\n"}
{"label": 60, "index": 7680, "code": "a = input()\ndif = 0\n\nfor i in range(len(a) - 1) :\n  for j in range(len(a)) :\n    if i + j + 1 == len(a) :\n      break\n    if (a[i] == a[i + j + 1]) :\n      dif = 1\n  \nif dif :\n  print ('no')\nelse :\n  print ('yes')"}
{"label": 60, "index": 7681, "code": "def is_duplicated():\n\tS = list(input())\n\tS_n = list(set(S))\n\tif len(S) != len(S_n):\n\t\tprint('no')\n\t\treturn\n\tprint('yes')\n\nis_duplicated()"}
{"label": 60, "index": 7682, "code": "# -*- coding:utf-8 -*-\n\nsentence = input()\nfor s in sentence:\n    if sentence.count(s) > 1:\n        print('no')\n        break\nelse:\n    print('yes')\n"}
{"label": 60, "index": 7683, "code": "S = input()\nprint('yes' if len(set(list(S))) == len(S) else 'no')"}
{"label": 60, "index": 7684, "code": "word = input().rstrip()\nfor i in range(len(word)):\n    if word[i] in word[i+1:]:\n        print('no')\n        exit()\nprint('yes')"}
{"label": 60, "index": 7685, "code": "S = input()\nprint('yes' if len(S) == len(set(S)) else 'no')"}
{"label": 60, "index": 7686, "code": "# coding: utf-8\nfrom collections import Counter\n\ns = raw_input()\nc = Counter(s)\n\nfor i in c.values():\n    if i > 1:\n        print \"no\"\n        exit()\n\nprint \"yes\"\n"}
{"label": 60, "index": 7687, "code": "s = raw_input()\nf = True\nfor i in xrange(len(s)-1):\n    if s[i] in s[i+1:]:\n        f = False\nif f:\n    print \"yes\"\nelse:\n    print \"no\"\n"}
{"label": 60, "index": 7688, "code": "# -*- coding: utf-8 -*-\n\nS = input()\nlist(S)\nboolean = True\nfor i in range(len(S)):\n    for j in range(i+1, len(S)):\n        if S[i] == S[j]:\n            boolean = False\n\n[print('no') if boolean == False else print('yes')]"}
{"label": 60, "index": 7689, "code": "S = input()\nS=list(S)\nflag = 0\n\nfor i in range(len(S)):\n    for j in range(i+1,len(S)):\n        if S[i] == S[j]:\n            flag = 1\n\nif flag == 0:\n    print(\"yes\")\nelse:\n    print(\"no\")\n"}
{"label": 60, "index": 7690, "code": "a = raw_input()\nd = []\nok = True\n\nfor i in a:\n\tif i in d:\n\t\tok = False\n\t\tbreak\n\telse:\n\t\td.append(i)\n\nif ok:\n\tprint \"yes\"\nelse:\n\tprint \"no\""}
{"label": 60, "index": 7691, "code": "# -*- coding: utf-8 -*-\n\nimport sys\nimport subprocess\nimport json\nimport time\nimport math\nimport re\nimport sqlite3\n\n\nS = input()\ndic = {}\nfor c in S:\n    if c in dic:\n        print(\"no\")\n        exit(0)\n    dic[c] = 1\nprint(\"yes\")\n\n"}
{"label": 60, "index": 7692, "code": "import sys\nS = input()\nsaw = []\n\nfor i in S:\n    if i in saw:\n        print('no')\n        sys.exit()\n    else:\n        saw.append(i)\nprint('yes')"}
{"label": 60, "index": 7693, "code": "l=list(input())\ne=set(l)\nif len(l)-len(e) == 0:\n    print(\"yes\")\nelse:\n    print(\"no\")\n"}
{"label": 60, "index": 7694, "code": "S = input()\nL = list(S)\n\nif L.count('a') >= 2:\n\tprint('no')\n\tquit()\nif L.count('b') >= 2:\n\tprint('no')\n\tquit()\nif L.count('c') >= 2:\n\tprint('no')\n\tquit()\nif L.count('d') >= 2:\n\tprint('no')\n\tquit()\nif L.count('e') >= 2:\n\tprint('no')\n\tquit()\nif L.count('f') >= 2:\n\tprint('no')\n\tquit()\nif L.count('g') >= 2:\n\tprint('no')\n\tquit()\nif L.count('h') >= 2:\n\tprint('no')\n\tquit()\nif L.count('i') >= 2:\n\tprint('no')\n\tquit()\nif L.count('j') >= 2:\n\tprint('no')\n\tquit()\nif L.count('k') >= 2:\n\tprint('no')\n\tquit()\nif L.count('l') >= 2:\n\tprint('no')\n\tquit()\nif L.count('m') >= 2:\n\tprint('no')\n\tquit()\nif L.count('n') >= 2:\n\tprint('no')\n\tquit()\nif L.count('o') >= 2:\n\tprint('no')\n\tquit()\nif L.count('p') >= 2:\n\tprint('no')\n\tquit()\nif L.count('q') >= 2:\n\tprint('no')\n\tquit()\nif L.count('r') >= 2:\n\tprint('no')\n\tquit()\nif L.count('s') >= 2:\n\tprint('no')\n\tquit()\nif L.count('t') >= 2:\n\tprint('no')\n\tquit()\nif L.count('u') >= 2:\n\tprint('no')\n\tquit()\nif L.count('v') >= 2:\n\tprint('no')\n\tquit()\nif L.count('w') >= 2:\n\tprint('no')\n\tquit()\nif L.count('x') >= 2:\n\tprint('no')\n\tquit()\nif L.count('y') >= 2:\n\tprint('no')\n\tquit()\nif L.count('z') >= 2:\n\tprint('no')\n\tquit()\nprint('yes')"}
{"label": 60, "index": 7695, "code": "a = list(input())\n\nif len(a)==len(set(a)):\n    print(\"yes\")\nelse:\n    print(\"no\")\n"}
{"label": 60, "index": 7696, "code": "s=input();print(\"yes\"if len(s)==len(set(s))else\"no\")"}
{"label": 60, "index": 7697, "code": "s = raw_input()\nr = set()\nr.update(s)\n\nif len(s) == len(r):\n    print 'yes'\nelse:\n    print 'no'"}
{"label": 60, "index": 7698, "code": "word = input()\nfor i in range(len(word)):\n    result = word.count(word[i:i+1])\n    if result > 1:\n        break\n    \nif result > 1:\n    print(\"no\")\n    \nelse:\n    print(\"yes\")"}
{"label": 60, "index": 7699, "code": "S = input()\nprint('yes' if len(set(S)) == len(S) else 'no')"}
{"label": 60, "index": 7700, "code": "import sys\nimport scipy as sp\nimport numpy\n\ns = raw_input()\n\nn=len(s)\n\nfor i in range(n):\n    a=s.count(s[i])\n    if(a>1):\n        print \"no\"\n        sys.exit()\n\nprint \"yes\""}
{"label": 60, "index": 7701, "code": "s = list(input())\n\nlis = []\n\nuq = True\n\nfor e in s:\n    if e in lis:\n        print(\"no\")\n        uq = False\n        break\n\n    lis.append(e)\nif uq:\n    print(\"yes\")\n"}
{"label": 60, "index": 7702, "code": "import collections\n\nS = raw_input()\nc = collections.Counter(S)\nprint 'yes' if c.most_common(1)[0][1] == 1 else 'no'\n"}
{"label": 60, "index": 7703, "code": "S=input()\nimport sys\n\nfor i in range(len(S)):\n    if S.count(S[i])>=2:\n        print('no')\n        sys.exit()\n\nprint('yes')"}
{"label": 60, "index": 7704, "code": "S = raw_input()\nif len(S) == len(set(S)):\n    print \"yes\"\nelse:\n    print \"no\"\n"}
{"label": 60, "index": 7705, "code": "from sys import stdin\n\ns = stdin.readline().strip()\n\nprint('yes') if len(s) == len(set(s)) else print('no')\n"}
{"label": 60, "index": 7706, "code": "import sys\n#from sets import Set\nS = str(input())\n\na = set()\nfor k in S:\n  if (k in a):\n    print('no')\n    sys.exit()\n  a.add(k)\n\nprint('yes')\n"}
{"label": 60, "index": 7707, "code": "s = input()\nsl = list(s)\nprint(\"yes\" if len(sl) == len(set(sl)) else \"no\")\n"}
{"label": 60, "index": 7708, "code": "s=input()\nsame=False\nfor i in range(len(s)):\n    if s.find(s[i],i+1)!=-1:\n        same=True\n\nif same:\n    print('no')\nelse:\n    print('yes')\n"}
{"label": 60, "index": 7709, "code": "a = list(input());b = set(a);print(\"yes\") if(len(a)==len(b)) else print(\"no\")"}
{"label": 60, "index": 7710, "code": "S = input()\n\nj = 0\nfor s in S:\n    if S.count(s) >= 2:\n        j += 1\n\nif j == 0:\n    print(\"yes\")\nelse:\n    print(\"no\")\n"}
{"label": 60, "index": 7711, "code": "s = raw_input()\ns_set = set(s)\nif len(s) == len(s_set):\n    print \"yes\"\nelse:\n    print \"no\""}
{"label": 60, "index": 7712, "code": "S = str(input())\n\ndejavu = []\nYes = True\n\nfor s in S:\n    if s in dejavu:\n        Yes = False\n        break\n    else:\n        dejavu.append(s)\n\nif Yes:\n    print(\"yes\")\nelse:\n    print(\"no\")"}
{"label": 60, "index": 7713, "code": "s = input()\nlen_s = len(s)\nduplication = False\n\nfor i in range(len_s - 1):\n    for j in range(i, len_s-1):\n        if s[i] == s[j+1]:\n            print(\"no\")\n            duplication = True\n            break\n    if duplication:\n        break\nif not duplication:\n    print(\"yes\")\n"}
{"label": 60, "index": 7714, "code": "S = input()\nS = list(S)\nA = 0\nfor i in range(len(S)):\n    if S.count(S[i-1]) == 1:\n        A += 1\nif len(S) == A:\n    print(\"yes\")\nelse:\n    print(\"no\")\n"}
{"label": 60, "index": 7715, "code": "s = input()\nc = 0\n\nif len(s) < 2 or len(s) > 26:\n    quit()\nif len(s) >= 2 and len(s) <= 26:\n    s2 = ''.join(sorted(s))\n    for i in s2:\n        if c+1 >= len(s):\n            break\n        elif s2[c] == s2[c+1]:\n             print('no')\n             quit()\n        else:\n            c = c + 1\nprint('yes')"}
{"label": 60, "index": 7716, "code": "a = list(input());print(\"yes\" if(len(a)==len(set(a))) else \"no\")\n"}
{"label": 60, "index": 7717, "code": "def judge(lst):\n\ttmp = lst[0]\n\tfor i in range(1, len(lst)):\n\t\tif tmp == lst[i]:\n\t\t\treturn 'no'\n\t\ttmp = lst[i]\n\treturn 'yes'\n\ns = raw_input()\nslist = []\nfor i in range(0, len(s)):\n\tslist.append(s[i])\nslist.sort()\n\nprint judge(slist)"}
{"label": 60, "index": 7718, "code": "a = input()\nls = {}\nfor i in range(ord('a'), ord('z') + 1):\n    ls[chr(i)] = 0\n\nfor i in a:\n    ls[i]+=1;\n\nf = 1;\nfor i in a:\n    if ls[i] > 1:\n        f = 0\n        break\nif f:\n    print(\"yes\")\nelse:\n    print(\"no\")\n"}
{"label": 60, "index": 7719, "code": "S = raw_input()\na = [0 for i in range(len(S))]\nflag = 0\n\nfor i in range(len(S)):\n\ta[i] = S[i]\n\tfor j in range(i):\n\t\tif a[j] == S[i]:\n\t\t\tprint \"no\"\n\t\t\tflag = 1\n\t\t\tbreak\n\tif flag == 1:\n\t\tbreak\n\nif flag == 0:\n\tprint \"yes\""}
{"label": 60, "index": 7720, "code": "def B():\n    from numpy import zeros\n    s = input()\n    r = zeros((26,), dtype='int32')\n    ord_a = ord('a')\n    for c in s:\n        r[ord(c)-ord_a] += 1\n    for i in r:\n        if i > 1:\n            print('no')\n            exit()\n    print('yes')\n\nB()"}
{"label": 60, "index": 7721, "code": "s = (str(input())).count\nif ((s('a')>1)or(s('b')>1)or(s('c')>1)or(s('d')>1)or(s('e')>1)or(s('f')>1)\n    or(s('g')>1)or(s('h')>1)or(s('i')>1)or(s('j')>1)or(s('k')>1)or(s('l')>1)\n    or(s('m')>1)or(s('n')>1)or(s('o')>1)or(s('p')>1)or(s('q')>1)or(s('r')>1)\n    or(s('s')>1)or(s('t')>1)or(s('u')>1)or(s('v')>1)or(s('w')>1)or(s('x')>1)\n    or(s('y')>1)or(s('z')>1)):\n    print('no')\nelse:\n    print('yes')\n"}
{"label": 60, "index": 7722, "code": "S = input()\naaa = set(S)\nif len(S) == len(aaa):\n    print(\"yes\")\nelse:\n    print(\"no\")"}
{"label": 60, "index": 7723, "code": "S=list(input())\nS.sort()\nnd=0\ni=0\nwhile nd==0 and i<len(S)-1:\n    if S[i]==S[i+1]:\n         nd=1\n    i+=1\nif nd==1:\n    print (\"no\")\nelse:\n    print (\"yes\")"}
{"label": 60, "index": 7724, "code": "def solve():\n    s=input()\n    num = [0 for i in range(26)]\n    for i in range(len(s)):\n        num[ord(s[i])-ord('a')]+=1;\n    for i in range(26):\n        if num[i]>1:\n            print(\"no\")\n            return\n    print(\"yes\")\nif __name__ == \"__main__\":\n    solve()"}
{"label": 60, "index": 7725, "code": "if __name__ == \"__main__\":\n    S = input()\n\n    result = \"yes\"\n    # for each character in S\n    for c in S:\n        # there is a same character in S\n        if S.count(c) > 1:\n            result = \"no\"\n            break\n\n    print(result)"}
{"label": 60, "index": 7726, "code": "s = input()\n\nflag = 0\n\nfor i in range(len(s)):\n    for j in range(i+1, len(s)):\n        if s[i] == s[j]:\n            flag = 1\n\nif flag == 0:\n    print(\"yes\")\nelse:\n    print(\"no\")\n"}
{"label": 60, "index": 7727, "code": "import sys\n\ns = list(input())\n\ncheck_array = [0 for i in range(26)]\n\nfor i in range(len(s)):\n    judge = s[i]\n    \n    for j in range(len(s)):\n        if judge == check_array[j]:\n            print(\"no\")\n            sys.exit()\n    \n    check_array[i] = judge\n\nprint(\"yes\")\n"}
{"label": 60, "index": 7728, "code": "s = input()\nChars = [l for l in s]\nDepre = set(Chars)\n\nif len(Chars) == len(Depre):\n\tprint('yes')\nelse:\n\tprint('no')"}
{"label": 60, "index": 7729, "code": "s = raw_input()\n\ndef a():\n    for i in \"abcdefghijklmnopqrstuvwxyz\":\n        if s.count(i) >= 2:\n            return False\n    return True\n\nprint \"yes\" if a() else \"no\""}
{"label": 60, "index": 7730, "code": "S = raw_input()\nprint \"yes\" if len(S) == len(set(S)) else \"no\""}
{"label": 60, "index": 7731, "code": "s = list(input())\nn = len(s)\nsSet = set(s)\nnSet = len(sSet)\nif n == nSet:\n\tprint(\"yes\")\nelse:\n\tprint(\"no\")"}
{"label": 60, "index": 7732, "code": "S = input()\nif len(S)==len(set(S)):\n    print('yes')\nelse:\n    print('no')"}
{"label": 60, "index": 7733, "code": "S = input()\nN = [i for i in S]\nN2 = set(N)\nif len(N) == len(N2):\n    print('yes')\nelse:\n    print('no')"}
{"label": 60, "index": 7734, "code": "s=input()\nS=list(s)\ncounter=[]\nfor i in range(len(S)):\n    if S[i] not in counter:\n        counter.append(S[i])\n\nif len(S)==len(counter):\n   print('yes')\nelse:\n   print('no')"}
{"label": 60, "index": 7735, "code": "s = list(input())\nans = \"yes\"\nfor i in range(len(s)):\n    if s.count(s[i])!=1:\n        ans = \"no\"\n        break\nprint(ans)"}
{"label": 60, "index": 7736, "code": "str = raw_input()\ncount = [0 for i in range(26)]\n\nfor c in str:\n  i = ord(c) - ord('a')\n  count[i] += 1\n  if count[i] > 1:\n    print 'no'\n    break\nelse:\n  print 'yes'"}
{"label": 60, "index": 7737, "code": "s=list(input())\n\nres='yes'\n\nfor i in range(len(s)):\n    c=s[i]\n    if s.count(c)>1:\n        res='no'\n        \nprint(res)  \n"}
{"label": 60, "index": 7738, "code": "S = input()\ncnt = {}\nres = True\nfor c in S:\n  if c not in cnt:\n    cnt[c] = 1\n  else:\n    res = False\n\nif res:\n  print(\"yes\")\nelse:\n  print(\"no\")"}
{"label": 60, "index": 7739, "code": "from collections import Counter\n\nprint('yes' if all([True if x <= 1 else False for x in list(Counter(input()).values())]) else 'no')"}
{"label": 60, "index": 7740, "code": "z =list(input())\na=[0]*300\ndef f():\n    for c in z:\n        a[ord(c)]+=1\n        if a[ord(c)]>1:\n            print(\"no\")\n            return 0\n    print(\"yes\")\n\nf()"}
{"label": 60, "index": 7741, "code": "test = input()\ntest1 = set(test)\nif len(test) == len(test1):\n    print('yes')\nelse:\n    print('no')"}
{"label": 60, "index": 7742, "code": "s = raw_input()\nl = len(s)\ndif = True\nfor i in range(l):\n    for j in range(i+1,l):\n        if s[i] == s[j]:\n            dif = False\n            break\n    if not dif:\n        break\nif dif:\n    print 'yes'\nelse:\n    print 'no'\n"}
{"label": 60, "index": 7743, "code": "S = input()\nif(len(S) == len(set(S))):\n  print(\"yes\")\nelse:\n  print(\"no\")"}
{"label": 60, "index": 7744, "code": "inp = raw_input()\n\nflag = False\nfor i, a in enumerate(inp):\n    for j, b in enumerate(inp):\n        if i==j:\n            continue\n        if a==b:\n            flag = True\nif flag:\n    print 'no'\nelse:\n    print 'yes'"}
{"label": 60, "index": 7745, "code": "# Varied\n\ns = input()\nss = list(set(s))\n\ns = len(s)\nss = len(ss)\nif ( s==ss ):\n    print(\"yes\")\nelse:\n    print(\"no\")"}
{"label": 60, "index": 7746, "code": "S = input()\n\nN = len(S)\nsetS = set(list(S))\nif N == len(setS):\n    print(\"yes\")\nelse:\n    print(\"no\")\n"}
{"label": 60, "index": 7747, "code": "from collections import defaultdict\n\nS = str(input())\nsentence_dict = defaultdict(int)\n\nfor alpha in S:\n    sentence_dict[alpha] += 1\n\ncount = 0\nfor i in sentence_dict.values():\n    if i == 1:\n        count += 1\n        if count == len(sentence_dict):\n            print(\"yes\")\n    else:\n        print(\"no\")\n        break"}
{"label": 60, "index": 7748, "code": "#coding:utf-8\n\ninput_line1 = raw_input()\nflag = 0\n\nfor i in range(0,len(input_line1)):\n\tfor j in range(i+1,len(input_line1)):\n\t\tif input_line1[i] == input_line1[j]:\n\t\t\tflag = 1\n\nif flag == 1:\n\tprint 'no'\nelse:\n\tprint 'yes'"}
{"label": 60, "index": 7749, "code": "a=input();print(['no','yes'][len(a)==len(set(a))])"}
{"label": 60, "index": 7750, "code": "#!/usr/bin/env python3\n\nS = input()\n\nS_list = [ S[i] for i in range(len(S)) ]\n\nS_uniq = list(set(S_list))\n\nif len(S_uniq) == len(S_list):\n    print(\"yes\")\nelse:\n    print(\"no\")\n"}
{"label": 60, "index": 7751, "code": "from collections import Counter\ns = Counter(input()).most_common(1)\nif s[0][1] > 1:\n    print(\"no\")\nelse:\n    print(\"yes\")"}
{"label": 60, "index": 7752, "code": "s=input()\n\njud=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\nfor i in range(len(s)):\n    for j in range(26):\n\n#        print(s[i]+ \" \"+str(j+ord(\"a\")))\n        if ord(s[i])==j+ord('a'):\n            jud[j]+=1\n\na=False\n\n\n#print(jud)\n\nfor i in range(26):\n    if jud[i]>=2:\n        a=(jud[i]>=2)\n        print(\"no\")\n        break\n\nif a==False:\n    print(\"yes\")"}
{"label": 60, "index": 7753, "code": "import re; print('no' if re.match(r'.*(.).*\\1.*', input()) else 'yes')"}
{"label": 60, "index": 7754, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\nimport re\nimport math\nimport collections\nimport itertools\nimport functools\n\nDEBUG = True\nDEBUG = False\n\ndef dbg(*args):\n    if DEBUG:\n        print(\"DBG: \", file=sys.stderr, end=\"\")\n        print(*args, file=sys.stderr)\n\n\n\ndef main():\n    s = input();\n    yes = len(set(s)) == len(s)\n    print(\"yes\" if yes else \"no\")\n\nif __name__ == \"__main__\": main()\n"}
{"label": 60, "index": 7755, "code": "s = raw_input()\n\nans = \"yes\"\n\nfor i in s:\n    if s.count(i) != 1:\n        ans = \"no\"\n\nprint ans"}
{"label": 60, "index": 7756, "code": "s = input()\nprint('yes' if len(s) == len(set(s)) else 'no')"}
{"label": 60, "index": 7757, "code": "import sys\nS=str(input())\nS_list=list(S)\nS_list.sort()\nl=len(S_list)\n\nfor i in range(l-1):\n  if S_list[i]==S_list[i+1]:\n    print(\"no\")\n    sys.exit()\nprint(\"yes\")"}
{"label": 60, "index": 7758, "code": "s=input()\nif len(s)==len(set(s)):\n    print('yes')\nelse:\n    print('no')\n"}
{"label": 60, "index": 7759, "code": "s = input()\n\nif len(set(s)) == len(list(s)):\n    print('yes')\nelse:\n    print('no')\n"}
{"label": 60, "index": 7760, "code": "S=input()\nprint(\"yes\" if len(S)==len(set(S)) else \"no\")"}
{"label": 60, "index": 7761, "code": "def main():\n    # b, c = map(int, raw_input().split())\n    a = raw_input().strip()\n    print 'yes' if len(set(a)) == len(a) else 'no'\n\nmain()\n"}
{"label": 60, "index": 7762, "code": "data=[c for c in input()]\nd=set(data)\nprint('yes' if len(data)==len(d) else 'no')"}
{"label": 60, "index": 7763, "code": "import collections\n\nS = list(input())\n#print (S)\na = collections.Counter(S).most_common()\n#print (a)\nif a[0][1]==1:\n    print ('yes')\nelse:\n    print ('no')"}
{"label": 60, "index": 7764, "code": "import sys\n\ns = input()\n\nchecked = []\n\nfor c in s:\n    if c in checked:\n        print(\"no\")\n        sys.exit()\n    else:\n        checked.append(c)\nprint(\"yes\")\n\n"}
{"label": 60, "index": 7765, "code": "letter = input()\nprint('yes' if len(set(letter)) == len(letter) else 'no')\n"}
{"label": 60, "index": 7766, "code": "S = input()\n\ns = set(S)\n\nif len(s) == len(S):\n    print(\"yes\")\nelse:\n    print(\"no\")\n"}
{"label": 60, "index": 7767, "code": "s = list(str(input()))\nL1 = len(s)\nL2 = len(set(s))\nif L1 == L2:\n    ans = \"yes\"\nelse:\n    ans = \"no\"\nprint(ans)"}
{"label": 60, "index": 7768, "code": "S=list(input())\n\nif len(S)==len(set(S)):\n    print(\"yes\")\nelse :\n    print(\"no\")"}
{"label": 60, "index": 7769, "code": "S=list(input())\nprint(\"yes\"if len(S)==len(set(S))else\"no\")"}
{"label": 60, "index": 7770, "code": "s=input()\nprint((\"no\",\"yes\")[len(s)==len(set(s))])"}
{"label": 60, "index": 7771, "code": "# -*- coding:utf-8 -*-\nS = list(input())\nS.sort()\nif ''.join(S) == ''.join(sorted(list(set(S)))):\n    print(\"yes\")\nelse:\n    print(\"no\")"}
{"label": 60, "index": 7772, "code": "s=input();print('no'*(len(set(s))<len(s))or'yes')"}
{"label": 60, "index": 7773, "code": "a = list(input())\nb = set(a)\nprint(\"yes\") if(len(a)==len(b)) else print(\"no\")\n"}
{"label": 60, "index": 7774, "code": "S = input()\n\nif len(S) == len(set(S)):\n    print('yes')\nelse:\n    print('no')\n    \n"}
{"label": 60, "index": 7775, "code": "S = input('')\n\nstring = 'abcdefghijklmnopqrstuvwxyz'\nx = 0\n\nfor moji in string:\n\tif S.count(moji) >= 2:\n\t\tx = 1\n\nprint(\"no\" if x == 1 else \"yes\")"}
{"label": 60, "index": 7776, "code": "s = raw_input()\nl = list(s)\n\nans = \"yes\"\n\nl.sort()\n\nfor i in range(len(s)-1):\n    if l[i] == l[i+1]:\n        ans = \"no\"\n        break\n\nprint ans"}
{"label": 60, "index": 7777, "code": "s = input()\nif len(s) <= 1:\n   print(\"yes\")\nelse:\n   for i in range(len(s)):\n      if s[i] in list(s[:i]):\n         print(\"no\")\n         break\n   else:\n      print(\"yes\")"}
{"label": 60, "index": 7778, "code": "ls = input()\nl = []\nflag = True\nfor s in ls:\n  if s in l:\n    flag = False\n    break\n  else:\n    l.append(s)\nif flag:\n  print(\"yes\")\nelse:\n  print(\"no\")\n"}
{"label": 60, "index": 7779, "code": "s = input()\nchars = []\nans = \"yes\"\nfor c in s:\n    if(c not in chars):\n        chars.append(c)\n    else:\n        ans = \"no\"\n        break\n\nprint(ans)\n"}
{"label": 60, "index": 7780, "code": "def ri(): return int(input())\ndef rli(): return list(map(int, input().split()))\ndef rls(): return list(input())\ndef pli(a): return \"\".join(list(map(str, a)))\n\nS = rls()\nprint(\"yes\" if len(S) == len(set(S)) else \"no\")"}
{"label": 60, "index": 7781, "code": "S = input().strip()\nse = set(S)\nif len(S) == len(se):\n    print(\"yes\")\nelse:\n    print(\"no\")"}
{"label": 60, "index": 7782, "code": "s = str(input())\n\nif len(s) == len(set(s)):\n    print(\"yes\")\nelse:\n    print(\"no\")"}
{"label": 60, "index": 7783, "code": "s=input()\na=set(s)\nif len(a)==len(s):\n  print(\"yes\")\nelse:\n  print(\"no\")"}
{"label": 60, "index": 7784, "code": "s=str(input())\nname=\"yes\"\nfor i in range(len(s)):    \n    for j in range(len(s)):\n        if i!=j:\n            if s[i]==s[j]:\n                name=\"no\"\n        elif i==j:\n            pass\n            \nprint(name)            \n    \n"}
{"label": 60, "index": 7785, "code": "arr = []\ns = input()\n\nfor i in s:\n    if i not in arr:\n        arr.append(i)\n    elif i in arr:\n        print(\"no\")\n        break\n\nif len(arr) == len(s):\n    print(\"yes\")\n"}
{"label": 60, "index": 7786, "code": "s = raw_input()\na = ord('a')\ndef check(s):\n    for i in xrange(26):\n        if s.count(chr(a+i)) >1:\n            print \"no\"\n            return 0\n    print \"yes\"\n    return 0\ncheck(s)"}
{"label": 60, "index": 7787, "code": "s = str(input())\nf = \"yes\"\nfor i in range(0,len(s)):\n    if s.count(s[i]) != 1:\n        f = \"no\"\n        break\nprint(f)"}
{"label": 60, "index": 7788, "code": "a = input()\nfor x in a:\n if a.count(x) > 1:\n  msg = \"no\"\n  break\n else:\n  msg = \"yes\"\nprint(msg)"}
{"label": 60, "index": 7789, "code": "import sys\n\nS = input()\n\nsaw = []\n\nfor i in S:\n    if i in saw:\n        print('no')\n        sys.exit()\n    else:\n        saw.append(i)\n\nprint('yes')\n"}
{"label": 60, "index": 7790, "code": "S = input()\n\ns_set = set(S)\n\nif (len(S) == len(s_set)):\n    print('yes')\nelse:\n    print('no')"}
{"label": 60, "index": 7791, "code": "import sys\n\ndef solve():\n    s = input()\n    ss = set(s)\n\n    if len(s) == len(ss):\n        print('yes')\n    else:\n        print('no')\n\nif __name__ == '__main__':\n    solve()"}
{"label": 60, "index": 7792, "code": "S = input('')\nstring = 'abcdefghijklmnopqrstuvwxyz'\nx = 0\n\nfor moji in string:\n\tif S.count(moji) >= 2:\n\t\tx = 1\t\n\nprint(\"no\" if x == 1 else \"yes\")"}
{"label": 60, "index": 7793, "code": "S = list(input())\nS_set = set(S)\n\nprint(\"yes\" if len(S) == len(S_set) else \"no\")"}
{"label": 60, "index": 7794, "code": "words = input()\nanswer = \"yes\"\nfor word in words:\n    if words.count(word) > 1:\n        answer = \"no\"\n        break\nprint(answer)"}
{"label": 60, "index": 7795, "code": "s = input()\ns2 = set(s)\nprint(\"yes\" if len(s) == len(s2) else \"no\")\n"}
{"label": 60, "index": 7796, "code": "#-*- coding: utf-8 -*-\n\ndef main():\n    s = raw_input()\n\n    for i, c in enumerate(list(s)):\n        # loop\u524d\u304b\u3089\u3001\u691c\u7d22\u306f\u5f8c\u308d\u304b\u3089\u306a\u306e\u3067\n        # \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u7570\u306a\u308b\u5834\u5408\u3001\u8907\u6570\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u304c\u5b58\u5728\n        if s.rfind(c)!=i:\n            print 'no'\n            return 0\n            \n    print 'yes'\n\nif __name__ == '__main__':\n    main()"}
{"label": 60, "index": 7797, "code": "S = input()\nsort = sorted(S)\nt = sort[0]\njurge = 'yes'\nfor w in sort[1:]:\n    if t == w:\n        jurge = 'no'\n        break\n    else:\n        t = w\nif jurge == 'yes':\n    print('yes')\nelse:\n    print('no')\n"}
{"label": 60, "index": 7798, "code": "s = str(input())\nif len(set(s)) == len(s):\n    print('yes')\nelse:\n    print('no')"}
{"label": 60, "index": 7799, "code": "from sys import stdin\na = stdin.readline().strip()\nans = 'yes'\nif len(a)!=len(set(a)):\n ans = 'no'\nprint ans"}
{"label": 61, "index": 7800, "code": "def find(scores):\n    for score in scores:\n        if score % 10 != 0: return score\n    return -1\n\ndef solve(scores):\n    x = find(scores)\n    if x == -1: return 0\n\n    total = sum(scores)\n    return total if total % 10 != 0 else total - x\n\nif __name__ == '__main__':\n    n = int(input())\n    scores = list(sorted(int(input()) for _ in range(n)))\n    print(solve(scores))\n"}
{"label": 61, "index": 7801, "code": "data=[]\nfor i in range(int(input())):\n    data.append(int(input()))\nun=[num for num in data if num%10==0]\ndata=[num for num in data if num%10!=0]\nif len(data)==0:\n    print(0)\nelse:\n    if sum(un+data)%10!=0:\n        print(sum(un+data))\n    else:\n        print(sum(un+data)-min(data))"}
{"label": 61, "index": 7802, "code": "n=int(input())\na =[]\nfor i in range(n):\n    a.append(int(input()))\n \na.sort()\ns=sum(a)\nif s%10==0:\n    for i in a:\n        if i%10>0:\n            s-=i\n            break\nif s%10>0:\n    print(s)\nelse:\n    print(0)\n "}
{"label": 61, "index": 7803, "code": "n = int(input())\ns=[]\nfor i in range(n):\n    s.append(int(input()))\n\ns.sort(key=lambda x:x%10)\n\nif sum(s) % 10 != 0:\n    print(sum(s))\nelif s[-1] % 10>0:\n    print(sum(s)-min(filter(lambda x:x%10>0,s)))\nelse:\n    print(0)\n\n"}
{"label": 61, "index": 7804, "code": "n = int(input())\nhaiten = list(map(int, [input() for i in range(n)]))\nhaiten.sort()\nscore = sum(haiten)\nif score%10 == 0:\n    for k, i in enumerate(haiten):\n        if i%10 ==0:\n            pass\n        else:\n            del haiten[k]\n            score = sum(haiten)\n            break\nif score%10 == 0:\n    print(0)\nelse:\n    print(score)        "}
{"label": 61, "index": 7805, "code": "n=int(raw_input())\ns=[int(raw_input()) for _ in xrange(n)]\nc=[]\nfor i in xrange(n):\n    if s[i]%10!=0:\n        c.append(s[i])\nif sum(s)%10!=0:\n    print sum(s)\nelse:\n    if len(c)>0:\n        print sum(s)-min(c)\n    else:\n        print 0\n"}
{"label": 61, "index": 7806, "code": "import sys\n\n# sys.stdin = open(\"c1.in\")\n\n\ndef solve():\n    n = int(input())\n    s = []\n    for i in range(n):\n        y = int(input())\n        s.append(y)\n\n\n    c = 0\n    for x in s:\n        if x % 10 == 0:\n            c += 1\n    if c == n:\n        return 0\n\n    r = 0\n    if sum(s) != 0 and sum(s) % 10 != 0:\n        return sum(s)\n    else:\n        m = 10 ** 20\n        for x in s:\n            if x % 10 != 0:\n                if x < m:\n                    m = x\n        return sum(s) - m\n\n\nres = solve()\nprint(res)\n"}
{"label": 61, "index": 7807, "code": "n = int(raw_input())\ns = []\nfor _ in xrange(n):\n    s.append(int(raw_input()))\nmx = sum(s)\nif mx % 10 != 0:\n    print mx\nelse:\n    s.sort()\n    for idx in xrange(len(s)):\n        if s[idx] % 10 != 0:\n            print mx - s[idx]\n            break\n    else:\n        print \"0\"\n"}
{"label": 61, "index": 7808, "code": "\nN = input()\narr = []\n\nfor i in range(N):\n    arr.append(input())\n\narr.sort()\nm = sum(arr)\nlength = len(arr)\n\nfor i in range(length):\n    if (m % 10) != 0:\n        break\n    elif(arr[i] % 10) != 0:\n        m -= arr[i]\n\nif (m % 10) != 0:\n    print m\nelse:\n    print 0"}
{"label": 61, "index": 7809, "code": "#!/bin/usr/python\n\nn = input()\n\ns = [0 for i in range(100)]\na = 0\n\nfor i in range(n):\n  s[i] = input()\n  a += s[i]\n\nflag = True\nif a % 10 == 0:\n  s = sorted(s)\n  for i in range(n):\n    if s[-1*n + i] % 10 != 0:\n      a -= s[-1*n + i]\n      break\n\nif a % 10 == 0:\n  a = 0\n\nprint(a)"}
{"label": 61, "index": 7810, "code": "n = int(input())\ns = [int(input()) for i in range(n)]\nnotTenTimes = list(filter(lambda x: x % 10 != 0, s))\nans = sum(s)\n\nif sum(s) % 10 == 0:\n    if(len(notTenTimes)):\n        ans -= min(notTenTimes)\n    else:\n        ans = 0\n\nprint(ans)\n\n"}
{"label": 61, "index": 7811, "code": "def mod10(i):\n    if i%10 ==0:\n        return 0\n    else:\n        return 1\n    \n\n\nN = int(raw_input())\n_sum = 0\ndata = []\nfor _ in xrange(N):\n    s = int(raw_input())\n    _sum += s\n    data.append(s)\ndata = sorted(data)\nmods = map(mod10,data)\nif _sum%10 == 0:\n    if mods.count(1)>0:\n        print _sum - data[mods.index(1)]\n    else:\n        print 0\nelse:\n    print _sum\n\n    "}
{"label": 61, "index": 7812, "code": "\ndef f(scores):\n    res = sum(scores)\n    if res % 10 == 0:\n        candidates = list(score for score in scores if score % 10 != 0)\n        if candidates:\n            res -= min(candidates)\n        else:\n            res = 0\n    return res\n \nN = int(input())\nscores = []\nfor _ in range(N):\n    scores.append(int(input()))\nprint(f(scores))"}
{"label": 61, "index": 7813, "code": "\nimport sys\n\nN = int(input())\n\nscores = []\nsum_score = 0\nfor _ in range(N):\n    s = int(input())\n    scores.append(s)\n    sum_score += s\n\nif sum_score % 10 != 0:\n    print(sum_score)\n    sys.exit(0)\n\ntmp_max = 0\nfor s in scores:\n    tmp = sum_score - s\n    if tmp % 10 == 0:\n        tmp = 0\n    if tmp > tmp_max:\n        tmp_max = tmp\n\nprint(tmp_max)"}
{"label": 61, "index": 7814, "code": "N = int(raw_input())\n\ns = []\n\nfor i in range(N):\n    s.append(int(raw_input()))\n\ns.sort()\n\nans = sum(s)\n\nfor i in range(N):\n    if ans % 10 == 0:\n        if s[i] % 10 == 0:\n            pass\n        else:\n            ans -= s[i]\n    else:\n        break\n\nif ans % 10 == 0:\n    print 0\nelse:\n    print ans"}
{"label": 61, "index": 7815, "code": "a = input()\nl = []\n\nfor i in range(a):\n\tl.append(input())\n\nl.sort()\ni = 0\n# l = l[::-1]\ns = sum(l)\nwhile s % 10 == 0 and i < len(l):\n\tif l[i] % 10 != 0:\n\t\ts -= l[i]\n\ti += 1\n\nif s % 10 == 0:\n\ts = 0\nprint s"}
{"label": 61, "index": 7816, "code": "import sys\ni=0\nj=0\nk=0\nt=0\nm=0\ns=0\nlists=[]\nlists2 =[]\n\n#\u6570\u5024\u306e\u6570\u3092\u53d7\u3051\u53d6\u308b\nline = int(input())\n\n#\u6570\u5024\u3092\u53d7\u3051\u53d6\u3063\u3066\u30ea\u30b9\u30c8\u306e\u4f5c\u6210\nwhile i < line:\n\ta = int(input())\n\t#print (a)\n\tlists.insert(i,a)\n\ti +=1\n\n#\u6570\u5024\u306e\u8db3\u3057\u5408\u308f\u305b\nwhile j < line:\n    s += lists[j]\n    j +=1\n\n#\u6b63\u3057\u3051\u308c\u3070\u51fa\u529b\nif s%10 != 0:\n\tprint(s)\nelse:\n    #10\u306e\u500d\u6570\u4ee5\u5916\u306e\u30ea\u30b9\u30c8\u4f5c\u6210\n    while k < line:\n        if lists[k]%10 != 0:\n\t        lists2.insert(m,lists[k])\n\t        m +=1\n        k +=1\n    if lists2 !=[]:\n        t = min(lists2)\n        print(s-t)\n    else:\n    \tprint(0)"}
{"label": 61, "index": 7817, "code": "import itertools\n\nN = int(raw_input())\n\ns =[]\nfor i in range(N):\n    s.append( int(raw_input()) )\n\ns.sort()\ns.reverse()\n\namari = map(lambda x:x%10, s)\nif sum(amari)==0:\n    print 0\nelse:\n    _max = 0\n    for i in reversed(range(N)):\n        cs = list(itertools.combinations(s,i+1))\n        for c in cs:\n            _temp = reduce(lambda x, y:x+y, c)\n            if _temp % 10==0:\n                pass\n            else:\n                _max=_temp\n            if _max>0:\n                break\n        if _max>0:\n            break\n\n    print _max"}
{"label": 61, "index": 7818, "code": "N = int(input())\ns = []\nfor _ in range(N):\n    s.append(int(input()))\n\nif sum(s) % 10 != 0:\n    print(sum(s))\n\nelse:\n    min_s = 0\n    sorted_s = sorted(s, reverse=True)\n    for ss in sorted_s:\n        if ss % 10 != 0:\n            min_s = ss\n\n    if min_s == 0:\n        print(0)\n    else:\n        print(sum(s) - min_s)\n"}
{"label": 61, "index": 7819, "code": "N=int(input())\ns_list=[int(input()) for _ in range(N)]\n# N = 10\n# s_list = [17, 30, 1, 19, 20, 20, 23, 13, 35, 12]\ns_list = sorted(s_list)\ntotal = sum(s_list)\n# print(total)\nif (total %10 !=0):\n    print(total)\nelse:\n    for s in s_list:\n        if ((total-s) %10 !=0):\n            print(total-s)\n            break\n    else:\n        print(0)\n"}
{"label": 61, "index": 7820, "code": "n = int(input())\ns = [int(input()) for i in range(n)]\n\ny = []\nfor i in range(n):\n    if s[i] % 10 != 0:\n        y.append(s[i])\n\nif sum(s) % 10 != 0:\n    print(sum(s))\nelif len(y) > 0:\n    print(sum(s)-min(y))\nelse:\n    print(0)\n"}
{"label": 61, "index": 7821, "code": "def sum(lst):\n\ta = 0\n\tfor i in range(0, len(lst)):\n\t\ta += lst[i]\n\treturn a\n\ndef judge(score):\n\ts = sum(score)\n\tif s % 10 != 0:\n\t\treturn s\n\tfor i in range(0, len(score)):\n\t\tif score[i] % 10 != 0:\n\t\t\treturn s - score[i]\n\treturn 0\n\nn = int(raw_input())\nscore = []\nfor i in range(0, n):\n\tscore.append(int(raw_input()))\nscore.sort()\nprint judge(score)\n"}
{"label": 61, "index": 7822, "code": "import sys\n\nN = int(input())\nscores = []\nbox = []\ncnt = 0\nfor i in range(N):\n    scores.append(int(input()))\n\nscores.sort()\ngokei = sum(scores)\n\nif gokei % 10 == 0:\n    for i in range(N):\n        aaa = gokei - scores[i]\n        if aaa % 10 != 0:\n            box.append(aaa)\n\nelse:\n    print(gokei)\n    sys.exit()\n    \nif box != []:\n    print(max(box))\nelse:\n    print(0)"}
{"label": 61, "index": 7823, "code": "import sys\nN=int(input())\nS=[]\nfor i in range(N):\n  S+=[int(input())] \nS.sort()\n\nans=0\nfor i in range(N):\n  ans+=S[i]\nif ans%10!=0:\n  print(ans)\n  sys.exit\nelse:\n  for i in range(N):\n    if S[i]%10!=0:\n      print(ans-S[i])\n      sys.exit()\n  print(0)\n"}
{"label": 61, "index": 7824, "code": "N = int(input())\n\ns = []\nfor _ in range(N):\n    s.append(int(input()))\n    \ns = sorted(s)\n\nif sum(s) % 10 == 0:\n    for i in range(len(s)):\n        if s[i] % 10 != 0:\n            print(sum(s[:i]) + sum(s[i+1:]))\n            break\n    else:\n        print(0)\n        \nelse:\n    print(sum(s))"}
{"label": 61, "index": 7825, "code": "N = int(input())\n\nnums = []\nmax = 0\n\nfor i in range(0, N):\n    nums.append(int(input()))\n\nmx = sum(nums)\nif mx % 10 != 0:\n    print(str(mx))\n    quit()\n\nchecker = [False for i in range(0, mx+1)]\n\nnow = 0\nres = 0\nfor i in range(0, N):\n    v = nums[i]\n    for j in range(now, -1, -1):\n        if checker[j]:\n            idx = j + v\n            if idx > res and idx % 10 != 0:\n                res = idx\n            checker[idx] = True\n    checker[v] = True\n    now = now + v\n\nprint(str(res))"}
{"label": 61, "index": 7826, "code": "n = int(input())\ns = sorted([int(input()) for i in range(n)])\n\nans = 0\nif sum(s) % 10 != 0:\n    print(sum(s))\nelse:\n    for i in s:\n        if i % 10 != 0:\n            ans = sum(s) - i\n            print(ans)\n            break\n    if ans == 0:\n        print(ans)\n"}
{"label": 61, "index": 7827, "code": "n = int(input())\na = list(int(input()) for i in range(n))\na.sort()\nb = sum(a)\n\nc = b\n\nfor j in range(100) :\n  for i in range(n) :\n    if c % 10 == 0 :\n      c = b - a[i]\n      if c == 0 :\n        break\n    else :\n      break\n  b = b - a[i]\n  n = n - 1\n\nprint (c)"}
{"label": 61, "index": 7828, "code": "N = int(input())\ns = []\nfor i in range(N):\n\ts.append(int(input()))\ns.sort()\nsum = sum(s)\nans = 0\nif sum % 10 != 0:\n\tans = sum\nelse:\n\tfor i in range(N):\n\t\tif s[i] % 10 != 0:\n\t\t\tans = sum - s[i]\n\t\t\tbreak\nprint(ans)\n"}
{"label": 61, "index": 7829, "code": "if __name__ == '__main__':\n    N = int(input())\n    s = []\n    for i in range(N):\n        s.append(int(input()))\n\n    not_10_multi = list(filter(lambda x: (x % 10) != 0, s))\n\n    if sum(s) % 10 != 0:\n        print(sum(s))\n    elif len(not_10_multi) == 0:\n        print(0)\n    else:\n        print(sum(s) - min(not_10_multi))\n"}
{"label": 61, "index": 7830, "code": "n = int(input())\nl = []\nfor i in range(n):\n l.append(int(input()))\nl.sort()\na = sum(l)\nfor i in range(n):\n if a%10 == 0:\n  if l[i]%10 != 0:\n   a -= l[i]\n else:\n  break\na = a if a%10 != 0 else 0\nprint(a)"}
{"label": 61, "index": 7831, "code": "n = int(input())\ns = [int(input()) for _ in range(n)]\nk = []\nk1 = []\n\nfor i in range(n):\n    k.append(s[i])\n    if s[i]%10!=0:\n        k1.append(s[i])\n\nif sum(k)%10!=0:\n    print(sum(k))\nelse:\n    if len(k1)==0:\n        print(0)\n    else:\n        k1.sort()\n        print(sum(k)-k1[0])\n"}
{"label": 61, "index": 7832, "code": "N=int(input())\ns_n=[int(input()) for i in range(N)]\n\nans=sum(s_n)\nwhile ans%10==0:\n    if s_n==[]:\n        ans=0\n        break\n    ans-=min(s_n)\n    if ans%10==0:\n        ans+=min(s_n)\n        s_n.remove(min(s_n))\n\n\nprint(ans)"}
{"label": 61, "index": 7833, "code": "N = int(input())\ns = [int(input()) for i in range(N)]\nS = sum(s)\na = sorted(s)\ni = 0\nflag = 0\n\nif S % 10 != 0:\n\tprint(S)\nelse:\n\twhile i < N:\n\t\tif a[i] % 10 != 0:\n\t\t\tprint(S - a[i])\n\t\t\tflag = 0\n\t\t\tbreak\n\t\telse:\n\t\t\ti += 1\n\t\t\tflag = 1\n\nif flag == 1:\n\tprint(0)\n"}
{"label": 61, "index": 7834, "code": "import numpy as np\nn = int(input())\ns = list()\nfor i in range(n):\n    s.append(int(input()))\n    \na = np.array(s)\ngoukei = a.sum()\n\nif goukei % 10 == 0:\n    if (a % 10 == 0).all():\n        print(0)\n    else:\n        print(goukei - a[a % 10 > 0].min())\nelse:\n    print(goukei)"}
{"label": 61, "index": 7835, "code": "N = int(input())\nS = sorted([int(input()) for i in range(N)])\n\ntot = sum(S)\nif tot % 10 != 0:\n    print(tot)\nelse:\n    p = 0\n    for val in S:\n        if val % 10 != 0:\n            p = val\n            break\n    if p != 0:\n        print(tot - p)\n    else:\n        print(0)\n"}
{"label": 61, "index": 7836, "code": "N = int(input())\ns = []\nc=[]\nfor i in range(N):\n    s.append(int(input()))\nd=sum(s)\nif sum(s)%10!=0:\n    print(sum(s))\nelse:\n    for i in range(len(s)):\n        if s[i]%10>0:\n            c.append(s[i])\n    if c==[]:\n        print(0)\n    else:\n        print(d-min(c))\n"}
{"label": 61, "index": 7837, "code": "#coding: utf-8\n#score\u306e\u4e2d\u304b\u308910\u306e\u500d\u6570\u3067\u306a\u304f\u304b\u3064\u6700\u5c0f\u306e\u3082\u306e\u3092\u8fd4\u3059\ndef search_min(list):\n    l = []\n    for i in list:\n        if i % 10 != 0:\n            l.append(i)\n    if len(l) > 0:\n        return min(l)\n    else:\n        return 0\n\n\n\nN = int(input())\nscore = [int(input()) for i in range(N)]\n\nsum = 0\nfor i in score:\n    sum = sum + i\n\nif sum % 10 != 0:\n    print (sum)\nelse:\n    s = 0\n    while s % 10 == 0:\n        m = search_min(score)\n        if m == 0:#\u914d\u70b9\u304c\u3059\u3079\u306610\u306e\u500d\u6570\u306e\u3068\u304d\n            break\n        else:\n            s = sum - m\n            score.remove(m)\n    print (s)"}
{"label": 61, "index": 7838, "code": "import sys\nN = int(input())\ns = []\n\nfor i in range(N):\n    s.append(int(input()))\n\nans = sum(s)\n\nif ans % 10 != 0:\n    print(ans)\nelse:\n    s.sort()\n    for i in range(N):\n        if (ans - s[i]) % 10 != 0:\n            print(ans-s[i])\n            sys.exit()\n\n    print(0)\n"}
{"label": 61, "index": 7839, "code": "import sys\n\nN = int(input())\ns = []\nfor i in range(N):\n    s.append(int(input()))\n\nif sum(s) % 10 != 0:\n    print(sum(s))\nelse:\n    for i in sorted(s):\n        if i % 10 != 0:\n            print(sum(s) - i)\n            sys.exit()\n    print(0)\n"}
{"label": 61, "index": 7840, "code": "nb = int(input())\ntotale = 0\nt = []\nfor i in range(nb):\n   a = int(input())\n   totale = totale + a\n   t.append(a)\nif totale % 10 == 0:\n   m = 1000000\n   for i in range(nb):\n      if (t[i]) % 10 != 0:\n         m = min(m,t[i])\n   if m%10 != 0:\n      print(totale-m)\n   else:\n      print(0)\nelse:\n   print(totale)\n"}
{"label": 61, "index": 7841, "code": "N = int(input())\n\ns_min = 200\nsum = 0\nfor _ in range(N):\n    s_i = int(input())\n    sum += s_i\n    if s_i % 10 != 0:\n        if s_min > s_i:\n            s_min = s_i\n\n\nif sum % 10 != 0:\n    print(sum)\nelse:\n    if s_min == 200:\n        print(0)\n    else:\n        print(sum - s_min)\n"}
{"label": 61, "index": 7842, "code": "n = int(input())\nnumbers = list(map(int, [input() for _ in range(n)]))\nnumbers.sort()\nscore = sum(numbers)\n\nif score % 10 == 0:\n\tfor i in numbers:\n\t\tif i % 10 == 0:\n\t\t\tpass\n\t\telse:\n\t\t\tscore -= i\n\t\t\tbreak\n\nif score % 10 == 0:\n\tprint(0)\nelse:\n\tprint(score)"}
{"label": 61, "index": 7843, "code": "import heapq\n\ndef solve(scores):\n  sm = sum(scores)\n  if(sm % 10 != 0): return sm\n  heapq.heapify(scores)\n  while scores:\n    mn = heapq.heappop(scores)\n    sm -= mn\n    if(sm % 10 != 0) : return sm\n    sm += mn\n  else:\n    return 0     \n\nN = input()\nS = [input() for i in range(N)]\nheapq.heapify(S)\n\nwhile S:\n  arr = [i for i in S]\n  best = solve(arr)\n  if(best > 0):\n    print best\n    break\n  heapq.heappop(S)\nelse:\n  print 0"}
{"label": 61, "index": 7844, "code": "N = int(input())\n\nS = [int(input()) for _ in range(N)]\n\nS_sum = sum(S)\n\nif S_sum %10 !=0:\n    print(S_sum)\n    exit()\nmax_val = 0\n\nfor val in S:\n    if val %10 !=0:\n        max_val = max(max_val,S_sum-val)\n\nprint(max_val)"}
{"label": 61, "index": 7845, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\nimport re\nimport math\nimport collections\nimport itertools\nimport functools\n\nDEBUG = True\nDEBUG = False\n\ndef dbg(*args):\n    if DEBUG:\n        print(\"DBG: \", file=sys.stderr, end=\"\")\n        print(*args, file=sys.stderr)\n\ndef disp(x):\n    return 0 if x%10==0 else x\n\ndef main():\n    N = int(input())\n    A = []\n    for _ in range(N):\n        A.append(int(input()))\n    A.sort()\n\n    asum = sum(A)\n    vmax = disp(asum)\n    for a in A:\n        v = disp(asum - a)\n        vmax = max(vmax, v)\n\n    print(vmax)\n\nif __name__ == \"__main__\": main()\n"}
{"label": 61, "index": 7846, "code": "n = int(input())\ns = sorted([int(input()) for i in range(n)])\ntotal = sum(s)\nans = 0\nif total % 10 != 0:\n    print(total)\nelse:\n    for i in s:\n        if i % 10 != 0:\n            ans = total - i\n            break\n    print(max(0, ans))\n"}
{"label": 61, "index": 7847, "code": "from collections import defaultdict\n\n\ndef main():\n    N = int(input())\n    s_list = [int(input()) for _ in range(N)]\n\n    dp = [False] * (100 * 100 + 1)\n    dp[0] = True\n    for s in s_list:\n        for i in range(len(dp) - 1, -1, -1):\n            if dp[i]:\n                dp[i + s] = True\n\n    for i in range(len(dp) - 1, -1, -1):\n        if dp[i] and i % 10 != 0:\n            print(i)\n            return\n    print(0)\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 61, "index": 7848, "code": "N=int(input())\ns=[]\nsum=0\nfor i in range(N):\n    s.append(int(input()))\n    sum+=s[i]\n\n#print(\"sum=\"+str(sum))\n\nmin=100000000\n\nif sum%10==0:\n    for i in range(N):\n        if(min>=s[i] and s[i]%10!=0):\n            min=s[i]\n#            print(\"err\")\nif sum%10!=0:\n    print(sum)\nelif min!=100000000:\n    print(sum-min)\nelse:\n    print(0)"}
{"label": 61, "index": 7849, "code": "N = int(input())\ns = []\nfor i in range(N):\n  s.append(int(input()))\n\ns_ = [n for n in s if n% 10 != 0]\n\nif len(s_) == 0:\n  res = 0\nelse:\n  res = sum(s)\n  if res % 10 == 0:\n    res -= min(s_)\n\nprint(res)"}
{"label": 61, "index": 7850, "code": "# Bugged\n\nn = int(input())\ns = []\nfor i in range(n):\n    s.append(int(input()))\n\na = []\nfor ss in s:\n    if ( ss%10!=0 ):\n        a.append(ss)\nssum = sum(s)\nif ( ssum%10!=0 ):\n    print(ssum)\nelse:\n    if ( len(a)==0 ):\n        print(0)\n    else:\n        print(ssum-min(a))"}
{"label": 61, "index": 7851, "code": "n = int(raw_input())\nl = [int(raw_input()) for _ in range(n)]\ns = sum(l)\nif s % 10 != 0:\n    print s\nelse:\n    l.sort()\n    for m in l:\n        if m % 10 != 0:\n            print s - m\n            break\n    else:\n        print 0\n"}
{"label": 61, "index": 7852, "code": "N = int(input())\nS_non10 = []\nS_10 = []\nfor i in range(N):\n    Si = int(input())\n    if Si % 10 == 0:\n        S_10.append(Si)\n    else:\n        S_non10.append(Si)\n\nif S_non10 == []:\n    print(0)\n\nelse:\n    sumS = sum(S_non10)\n    if sumS % 10 == 0:\n        sumS -= min(S_non10)\n\n    if S_10 == []:\n        sumS10 = 0\n    else:\n        sumS10 = sum(S_10)\n    print(sumS + sumS10)\n"}
{"label": 61, "index": 7853, "code": "a=sorted([int(input()) for _ in[0]*int(input())]);b=sum(a)\nfor x in a:\n    if b%10!=0:break\n    elif x%10!=0:b-=x\nprint([0,b][b%10!=0])"}
{"label": 61, "index": 7854, "code": "def main():\n    n = input()\n\n    p1, p2 = set([0]), set()\n\n    for i in range(n):\n        y = input()\n        p2 = set([0])\n        for x in p1:\n            p2.add(x + y)\n            p2.add(x)\n\n        p1, p2 = p2, set()\n\n    ans = 0\n    for x in p1:\n        if x % 10 != 0 and x > ans:\n            ans = x\n    print ans\n\n\nmain()\n"}
{"label": 61, "index": 7855, "code": "N = int(input())\ns = [int(input()) for _ in range(N)]\n\nS = sum(s)\nif S % 10 != 0:\n    print(S)\nelse:\n    num = [n for n in s if n % 10 != 0]\n    if len(num) == 0:\n        print(0)\n    else:\n        print(S - min(num))\n"}
{"label": 61, "index": 7856, "code": "n = int(input())\nnotlist = []\ns = 0\nfor i in range(n):\n    a = int(input())\n    if a%10 != 0:\n        notlist.append(a)\n    s += a\nprint(s if s%10 != 0 else s-min(notlist) if notlist != [] else 0)\n"}
{"label": 61, "index": 7857, "code": "N=int(input())\ns=[]\nfor _ in range(N):\n    s.append(int(input()))\nif sum(s)%10 != 0:\n print (sum(s))\nelse:\n    min_s = 0\n    sorted_s = sorted(s, reverse=True)\n    for ss in sorted_s:\n        if ss % 10 != 0:\n            min_s = ss\n \n    if min_s == 0:\n        print (0)\n    else:\n        print(sum(s) - min_s)"}
{"label": 61, "index": 7858, "code": "N = int(input())\ns = []\nfor i in range(N):\n\ts.append(int(input()))\nSum = sum(s)\ns.sort()\nif(Sum % 10 == 0):\n\tfor i in range(N):\n\t\tif  s[i]  % 10 != 0 and i !=  N-1:\n\t\t\tprint(Sum-s[i])\n\t\t\tbreak\n\t\tif i == N-1:\n\t\t\tprint(0)\nelse:\n\tprint(Sum)"}
{"label": 61, "index": 7859, "code": "def print_max():\n    N = int(input())\n    S = [int(input()) for i in range(N)]\n             \n    if sum(S)%10 != 0:\n             print(sum(S))\n             return\n    S.sort()\n    S_n = S[:]\n    for i in range(len(S)):\n             S_n.pop(i)\n             if sum(S_n)%10 != 0:\n                print(sum(S_n))\n                return\n             S_n = S[:]\n    print(0)\n    return\n\nprint_max()                      "}
{"label": 61, "index": 7860, "code": "N = int(input())\ns = [int(input()) for i in range(N)]\nS = sum(s)\nb = []\nfor j in range(N):\n  if s[j] % 10 !=0:\n     b.append(s[j])\n  else:\n     pass\n\nif S % 10 !=0:\n    print(S)\nelif len(b)==0:\n    print(0)\nelse:\n    print(S-min(b))"}
{"label": 61, "index": 7861, "code": "N = int(raw_input())\ns = sorted([int(raw_input()) for _ in range(N)])\n\nt = sum(s)\nif t % 10 != 0:\n    print t\nelse:\n    m = [v for v in s if v % 10]\n    if len(m):\n        print t - m[0]\n    else:\n        print 0"}
{"label": 61, "index": 7862, "code": "n = int(input())\nls = []\nfor i in range(n):\n  ls.append(int(input()))\ns = sum(ls)\np = s % 10\nif (p == 0):\n  ls.sort()\n  for i in ls:\n    if (i % 10 != 0):\n      s = s - i\n      print(s)\n      break\n  else:\n    print(0)\nelse:\n  print(s)"}
{"label": 61, "index": 7863, "code": "N = int(input())\ns = [int(input()) for i in range(N)]\nsums = sum(s)\nothers = list(filter(lambda x: x % 10, s))\nif sums % 10:\n    print(sums)\nelif others != []:\n    print(sums-min(others))\nelse:\n    print(0)"}
{"label": 61, "index": 7864, "code": "n = int(input())\nl = [int(input()) for x in range(n)]\n\ndp = [[None for x in range(200 * 100)] for x in range(n)]\n\ndef search(i, score):\n    if i >= n:\n        return score\n    \n    if dp[i][score] != None:\n        return dp[i][score]\n\n    d = max(search(i + 1, score), search(i + 1, score + l[i]))\n    dp[i][score] = d\n    return d\n\nsearch(0, 0)\nprint((list(filter(lambda x: x != None and x % 10, dp[-1])) or [0])[-1])\n"}
{"label": 61, "index": 7865, "code": "N = int(input())\n\ns = []\n\nfor _ in range(N):\n    s.append(int(input()))\n    \nans = sum(s)\n\nif ans % 10 == 0:\n    pref = sorted(s)\n    ans_flag = False\n    for i in range(N):\n        if pref[i] % 10 != 0:\n            ans_flag = True\n            ans -= pref[i]\n            break\n    if ans_flag == True:\n        print(ans)\n    else:\n        print(0)\nelse:\n    print(ans)"}
{"label": 61, "index": 7866, "code": "N=int(input())\ns=[int(input()) for i in range(N)]\ns.sort()\nSu=0\nfor i in range (N):\n    Su+=s[i]\nif Su%10==0:\n    m=s[0]\n    i=0\n    while m%10==0 and i<N:\n        if s[i]%10!=0:\n            m=s[i]\n        else:\n            i+=1\n    if i==N and m%10==0:\n        print (0)\n    else:\n        Su-=m\n        print (Su)\nelse:\n    print (Su)\n\n"}
{"label": 61, "index": 7867, "code": "def print_max():\n\tN = int(input())\n\tS = [int(input()) for i in range(N)]\n\t\n\tif sum(S)%10 != 0:\n\t\tprint(sum(S))\n\t\treturn\n\tS.sort()\n\tS_n = S[:]\n\tfor i in range(len(S)):\n\t\tS_n.pop(i)\n\t\tif sum(S_n)%10 != 0:\n\t\t\tprint(sum(S_n))\n\t\t\treturn\n\t\tS_n = S[:]\n\tprint(0)\n\treturn\n\t\nprint_max()"}
{"label": 61, "index": 7868, "code": "n = int(input())\ns = [int(input()) for _ in range(n)]\nt = []\n\nfor i in range(n)[::-1]:\n    if s[i]%10==0:\n        t.append(s.pop(i))\n\ns.sort()\nt.sort()\n\nif sum(s)%10==0:\n    if len(s)!=0:\n        s.pop(0)\n\nnum = sum(s)+sum(t)\n\nif len(s)==0:\n    num = 0\n\n\nprint(num)\n"}
{"label": 61, "index": 7869, "code": "N=int(input())\na=[]\nfor i in range(N):\n    a.append(int(input()))\n\na.sort()\n\nif sum(a)%10 != 0:\n    print(sum(a))\n    \nelse:\n    for i in a:\n        if (sum(a)-i)%10 != 0:\n            print(sum(a)-i)\n            exit()\n    print(0)"}
{"label": 61, "index": 7870, "code": "# -*- coding:utf-8 -*-\nimport sys\nN = int(input())\ns = []\nfor tmp in range(N):\n    s.append(int(input()))\ns.sort()\ntotal = sum(s)\nif total%10 != 0:\n    print(total)\nelse:\n    for tmp in s:\n        total -= tmp\n        if total%10 != 0:\n            print(total)\n            sys.exit()\n        else:\n            total += tmp\n    print(0)"}
{"label": 61, "index": 7871, "code": "n = int(input())\nnumbers = [0 for i in range(n)]\ntotal = 0\ncount = 0\nfor i in range(n):\n    num = int(input())\n    numbers[i] = num\n    total += num\nnumbers = sorted(numbers)\nif total % 10 == 0:\n    for i in numbers:\n        if i % 10 != 0:\n            total = total - i\n            count = 1\n            break\nelse:\n    count = 1\nif count ==0:\n    total = 0\nprint(str(total))\n"}
{"label": 61, "index": 7872, "code": "N = int(raw_input())\ns = [int(raw_input()) for _ in range(N)]\n\nresult = sum(s)\nif (result % 10) != 0:\n    print(result)\nelse:\n    s.sort()\n    for i in range(len(s)):\n        if (s[i] % 10) != 0:\n            result -= s[i]\n            break\n    if (result % 10) != 0:\n        print(result)\n    else:\n        print(0)"}
{"label": 61, "index": 7873, "code": "def c():\n    n = int(input())\n    ss = []\n    s_min = 101\n    for _ in range(n):\n        si = int(input())\n        ss.append(si)\n        if si % 10 != 0:\n            s_min = min(s_min, si)\n\n    m = sum(ss)\n    if m % 10 == 0:\n        if s_min > 100:\n            print(0)\n        else:\n            print(m - s_min)\n    else:\n        print(m)\n\nc()\n"}
{"label": 61, "index": 7874, "code": "# -*- coding: utf-8 -*-\nimport numpy as np\n\nN = input()\ns = np.zeros((N, ), dtype=np.int32)\nfor i in range(N):\n    s[i] = input()\n\n\ns.sort()\nlargest_s = np.sum(s)\n\nif largest_s % 10 != 0:\n    print largest_s\n    exit()\n\nfor i in range(N):\n    if (largest_s - s[i]) % 10 != 0:\n        print largest_s - s[i]\n        exit()\nprint 0\n\n"}
{"label": 61, "index": 7875, "code": "n = int(raw_input())\ns = []\nfor i in xrange(n):\n    s.append(int(raw_input()))\ns.sort()\nssum = sum(s)\nwhile(1):\n    if ssum % 10 != 0:\n        break\n    elif ssum == 0:\n        break\n    for i in xrange(len(s)):\n        if (ssum - s[i]) % 10 != 0:\n            ssum -= s.pop(i)\n            break\n    else:\n        ssum -= s.pop(0)\nprint ssum\n"}
{"label": 61, "index": 7876, "code": "n = input()\nscore = []\ns_not10 = []\n\nfor i in range(int(n)):\n    s = input()\n    score.append(int(s))\n\nscore.sort()\nfor j in range(len(score)):\n    if score[j]%10 != 0:\n        s_not10.append(j)\n\ns_all = int(sum(score))\n\nif s_all%10 != 0:\n    best = s_all\nelif len(s_not10) == 0:\n    best = 0\nelse:\n    best = score[s_not10[-1]]\n    if s_all-s_not10[0] > best:\n        best = s_all-score[s_not10[0]]\n\nprint(best)\n"}
{"label": 61, "index": 7877, "code": "N = int(input())\nans = 0\nminv = 101\nfor _ in range(N):\n  a = int(input())\n  ans += a\n  if a%10 != 0:\n    minv = min(minv,a)\nif ans%10 != 0:\n  print(ans)\nelif minv <= 100:\n  print(ans-minv)\nelse:\n  print(0)"}
{"label": 61, "index": 7878, "code": "def dec(n):\n    return n % 10 != 0\n\nn = int(input())\ns = [int(input()) for _ in range(n)]\ns.sort()\n\nif dec(sum(s)):\n    print(sum(s))\nelse:\n    for i in s:\n        if dec(i):\n            print(sum(s) - i)\n            break\n    else:\n        print(0)"}
{"label": 61, "index": 7879, "code": "#python\n\nN = input()\na = []\nfor i in range(N):\n    a.append(input())\n\nsum=sum(a)\n\nif sum%10!=0:\n\tprint sum\nelse:\n\ta.sort()\n\t#print a\n\tfor num in a:\n\t\tif num%10!=0:\n\t\t\tprint sum-num\n\t\t\tbreak\n\telse:\n\t\tprint 0"}
{"label": 61, "index": 7880, "code": "n = int(input())\nqu = []\nfor _ in range(n):\n        qu.append(int(input()))\nsum = 0\nfor i in range(len(qu)):\n        sum += qu[i]\n\nqu.sort()\n\ndef f2(qu):\n        for i in range(len(qu)):\n                if qu[i] % 10 != 0:\n                        return(i)\n        return(-1) \n\ndef f(qu, sumb):\n        if sumb == 0 or len(qu) == 0:\n                return(0)\n        if sumb % 10 == 0:\n                delnum = f2(qu)\n                if delnum == -1:\n                        return(0)\n                else:\n                        sumb -= qu.pop(delnum)\n        if sumb % 10 == 0:\n                return(f(qu, sumb))\n        else:\n                return(sumb)\n\nprint(f(qu,sum))\n"}
{"label": 61, "index": 7881, "code": "import numpy as np\nN = int(input())\ns = []\nfor i in range(N):\n    s.append(int(input()))\ns = np.sort(s)\nindex_nonten = np.where(s%10!=0)[0]\nsum = np.sum(s)\nif sum%10==0:\n    if len(index_nonten)==0:\n        sum = 0\n    else:\n        sum -=s[index_nonten][0]\nprint (sum)"}
{"label": 61, "index": 7882, "code": "def main():\n    n = int(input())\n    a_list = sorted([int(input()) for _ in range(n)])\n    maxv = sum(a_list)\n\n    if maxv%10 != 0:\n        print(maxv)\n    else:\n        flag = 1\n        for i in range(n):\n            if a_list[i]%10 != 0:\n                ans = maxv - a_list[i]\n                print(ans)\n                flag = 0\n                break\n        if flag: print(0)\n\n\nif __name__ == \"__main__\":\n    main()"}
{"label": 61, "index": 7883, "code": "N = input()\na = []\nfor i in range(N):\n    a.append(input())\n\nmuten=[0]\nnoten=[0]\n\nfor i in range(len(a)):\n    if (a[i]%10==0):\n        muten.append(a[i])\n    else:\n        noten.append(a[i])\n\nmuten.sort()\nnoten.sort()\n\nallmut=sum(muten)\nallnot=sum(noten)\n\nwhile (allnot%10==0):\n    del noten[0]\n    allnot=sum(noten)\n    if (allnot==0):\n        break\n\nif (allnot==0):\n    print 0\nelse:\n    print allmut+allnot"}
{"label": 61, "index": 7884, "code": "maxnum=0\n\nif(__name__==\"__main__\"):\n    N = int(input())\n    a =[int(input()) for i in range(N)]\n    #print(sum(a))\n    \n    if(sum(a) % 10 != 0):\n        print(sum(a))\n    else:\n        a_sort = sorted(a)\n        for i in range(0,N):\n            if(a_sort[i] % 10 != 0):\n                del a_sort[i]\n                maxnum = sum(a_sort)\n                break\n            \n\n        print(maxnum)"}
{"label": 61, "index": 7885, "code": "n = int(input())\ngrad = []\nfor i in range(n):\n    grad.append(int(input()))\n# sorting\ngrad.sort()\n\n\ns = sum(grad)\nwhile s % 10 == 0:\n    if s == 0:\n        break\n    if min(grad)% 10 == 0:\n        \n        for i in grad:\n            if i % 10 != 0 :#and i != max(grad):\n                \n                grad.remove(i)\n                \n                s = sum(grad)\n                break\n            else:\n                s = 0\n    else:\n        s = s - min(grad)\n        \nprint(s)\n"}
{"label": 61, "index": 7886, "code": "n=int(input())\ns=[int(input()) for _ in range(n)]\nm=sum(s)\nprint(max((m-i for i in [0]+s if (m-i)%10!=0),default=0))"}
{"label": 61, "index": 7887, "code": "# -*- coding: utf-8 -*-\n\"\"\"\nhttp://abc063.contest.atcoder.jp/tasks/arc075_a\n\n\"\"\"\nimport sys\nfrom sys import stdin\ninput = stdin.readline\n\n\ndef main(args):\n    N = int(input())\n    scores = [int(input()) for _ in range(N)]\n\n    possible_results = set([0])\n    for s in scores:\n        temp = set()\n        for p in possible_results:\n            temp.add(p + s)\n            temp.add(p)\n        possible_results = temp\n\n    results = [x for x in possible_results if x%10 != 0]\n    results.sort()\n    if len(results) == 0:\n        print(0)\n    else:\n        print(results[-1])\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"label": 61, "index": 7888, "code": "def calc_max_grade(scores):\n    sum_s = sum(s)\n    if sum_s % 10 == 0:\n        for x in sorted(s):\n            if not x % 10 == 0:\n                return sum_s - x\n        return 0\n    else:\n        return sum_s\n\nn = int(input())\ns = []\nfor i in range(n):\n    s.append(int(input()))\n\nprint(calc_max_grade(s))"}
{"label": 61, "index": 7889, "code": "n = int(input())\ntotal=0\nmini=101\nfor _ in range(n):\n    s = int(input())\n    total+=s\n    if s%10 != 0:\n        mini=min(mini,s)\nif total%10==0:\n    if mini==101:\n        print(0)\n    else:\n        print(total-mini)\nelse:\n    print(total)\n    \n"}
{"label": 61, "index": 7890, "code": "N = int(input())\nkireru = []\nmuri = []\nsummrize = 0\nfor i in range(N):\n    inp = int(input())\n    if inp % 10 == 0:\n        kireru.append(inp)\n    else:\n        muri.append(inp)\n    summrize += inp\nk = sorted(muri)\nif summrize % 10 == 0:\n    if(len(k)>0):\n        print(summrize - k[0])\n    else:\n        print(0)\nelse:\n    print(summrize)"}
{"label": 61, "index": 7891, "code": "def main():\n    N = int(input().strip())\n    ss = [\n        int(input().strip())\n        for _ in range(N)\n    ]\n    total = sum(ss)\n    if total % 10 == 0:\n        for s in sorted(ss):\n            if s % 10 == 0:\n                continue\n            total -= s\n            if total % 10 != 0:\n                break\n    if total % 10 == 0:\n        print(0)\n    else:\n        print(total)\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 61, "index": 7892, "code": "N = int(input())\ns = [int(input()) for i in range(N)]\n\nans = sum(s)\n\nif ans % 10 == 0:\n    s.sort()\n    for si in s:\n        if si % 10 != 0:\n            ans -= si\n            break\n    else:\n        ans = 0\n\nprint(ans)\n"}
{"label": 61, "index": 7893, "code": "def f(scores):\n    res = sum(scores)\n    if res % 10 == 0:\n        candidates = list(score for score in scores if score % 10 != 0)\n        if candidates:\n            res -= min(candidates)\n        else:\n            res = 0\n    return res\n \nN = int(input())\nscores = []\nfor _ in range(N):\n    scores.append(int(input()))\nprint(f(scores))"}
{"label": 61, "index": 7894, "code": "N = int(input())\np = [int(input()) for i in range(N)]\nans = sum(p)\ns = list(filter(lambda x: x % 10 != 0, p))\nif ans % 10 == 0:\n    if len(s) == 0:\n        print(int(0))\n    else:\n        ans = ans - min(s)\n        print(ans)\nelse:\n    print(ans)"}
{"label": 61, "index": 7895, "code": "N = int(raw_input())\n\ns = [int(raw_input()) for _ in xrange(N)] \ns.sort()\n\nans = sum(s)\nk = 0\n\nfor i in range(N):\n    if s[i] % 10 != 0:\n        k = s[i]\n        break\n\nif ans % 10 == 0 and k == 0:\n    print 0\nelif ans % 10 != 0:\n    print ans\nelse:\n    print ans-k"}
{"label": 61, "index": 7896, "code": "N = int(input())\nA = []\nfor i in range(N):\n    A.append(int(input()))\n\nA.sort()\nsum = sum(A)\nif sum%10!=0:\n    print(sum)\nelse:\n    for i in range(N):\n        min = A[i]\n        if min%10!=0:\n            print(sum-min)\n            break\n        elif i==N-1:\n            print(0)\n\n"}
{"label": 61, "index": 7897, "code": "a=sorted([int(input()) for _ in [0]*int(input())])\ns1=-1\nif sum(a) % 10 != 0:\n    print(sum(a))\nelse:\n    for i in range(len(a)): #\u30ea\u30b9\u30c8\u4e2d\u306e10\u306e\u500d\u6570\u3067\u306a\u304f\u6700\u5c0f\u306e\u6570\u3092\u63a2\u3059\n        if a[i] % 10 !=0:\n            s1=i\n            break\n    if s1!=-1:\n        a.pop(s1)\n        print(sum(a))\n    else:\n        print(0)"}
{"label": 61, "index": 7898, "code": "\nN=int(input())\n\na=[int(0)]\na+=[int(input()) for i in range(N)]\ns=sum(a)\na.sort()\nfrag=0\n\nfor i in range(N+1) :\n    if a[i]%10!=0 :\n        frag+=1\n\n    \nif frag!=0 :\n    for i in range(N) :\n        if (s-a[i])%10!=0 :\n            s-=a[i]\n            break\n\n\n\nif frag==0 :\n    print(int(0))\nelse :\n    print(s)\n\n"}
{"label": 61, "index": 7899, "code": "n = int(input())\n\nscores = []\nfor i in range(n):\n    scores.append(int(input()))\n\ns = sum(scores)\nif s % 10 != 0:\n    print(s)\nelse:\n    indivisible_by_10 = []\n    for i in scores:\n        if i % 10 != 0:\n            indivisible_by_10.append(i)\n    if len(indivisible_by_10) == 0:\n        print(0)\n    else:\n        indivisible_by_10.sort()\n        print(s - indivisible_by_10[0])"}
{"label": 61, "index": 7900, "code": "N = int(input())\nS = [int(input()) for i in range(N)]\n\ndef maxscore(S):\n Score = sum(S)\n if Score % 10 > 0:\n  return Score\n else:\n  min = 100\n  for i in S:\n   if i % 10 > 0 and i < min:\n    min = i\n  Score -= min\n  return Score\n\njud = 0\nfor i in S:\n if i % 10 == 0:\n  jud += 1\nif jud == N:\n print(0)\nelse:\n print(str(maxscore(S)))"}
{"label": 61, "index": 7901, "code": "import math\n\nlines = int(input())\nscore_list = []\nfor line in range(lines):\n    score_list.append(int(input()))\nanswer = sum(score_list)\nif answer % 10 == 0:\n    score_list.sort()\n    for score in score_list:\n        if score % 10 != 0:\n            answer -= score\n            break\n    if answer % 10 == 0:\n        answer = 0\nprint(answer)"}
{"label": 61, "index": 7902, "code": "#!/usr/bin/env python3\n\ndata = []\nfor i in range(int(input())):\n    data.append(int(input()))\n\nun = [num for num in data if num % 10 == 0]\ndata = [num for num in data if num % 10 != 0]\n\nif len(data) == 0:\n    print(0)\nelse:\n    if sum(un+data) % 10 != 0:\n        print(sum(un+data))\n    else:\n        print(sum(un+data)-min(data))"}
{"label": 61, "index": 7903, "code": "N = int(input())\ns = []\nfor _ in range(N):\n    s.append(int(input()))\n    \nif sum(s)%10 != 0:\n    print(sum(s))\nelse:\n    s = sorted(s)\n    for si in s:\n        if si % 10 != 0:\n            print(sum(s) - si)\n            break\n    else:\n        print(0)"}
{"label": 61, "index": 7904, "code": "N = int(raw_input())\n\ns = []\nfor i in range(N):\n    s.append(int(raw_input()))\n\nscore = sum(s)\n\nif score%10 != 0:\n    print score\nelse:\n    a=sorted(s)\n    exit=False\n    for i in a:\n        if i%10 != 0:\n            print score-i\n            exit=True\n            break\n    if not exit:\n        print 0"}
{"label": 61, "index": 7905, "code": "#!/usr/bin/env python3\n\ndata = [ int(input()) for i in range(int(input())) ]\n\nun = [num for num in data if num % 10 == 0]\ndata = [num for num in data if num % 10 != 0]\n\nif len(data) == 0:\n    print(0)\nelse:\n    if sum(un+data) % 10 != 0:\n        print(sum(un+data))\n    else:\n        print(sum(un+data)-min(data))\n"}
{"label": 61, "index": 7906, "code": "N = int(input())\n\ns_min = 200\nsum = 0\nfor _ in range(N):\n    s_i = int(input())\n    sum += s_i\n    if s_i % 10 != 0:\n        if s_min > s_i:\n            s_min = s_i\n\n\nif sum % 10 != 0:\n    print(sum)\nelse:\n    if s_min == 200:\n        print(0)\n    else:\n        print(sum - s_min)\n"}
{"label": 61, "index": 7907, "code": "import itertools\n\nDIM = int(input())\nargs = [int(input()) for a in range(DIM)]\ntemp = list(map(lambda x:x%10, args))\nif sum(temp) == 0:\n    print(0)\n    exit()\ni = DIM\nwhile(i>0):\n    comb = list(itertools.combinations(args, i))\n    combMax = list(map(sum, comb))\n    for c in sorted(combMax, reverse=True):\n        if c%10==0:\n            continue\n        else:\n            print(c)\n            exit()\n    i = i -1\nprint(0)\nexit()"}
{"label": 61, "index": 7908, "code": "N = int(input())\na = [int(input()) for i in range(N)]\n\na.sort()\nans = sum(a)\n\nS = [ans - i for i in a]\nmaxtenga = 0\n\nfor i in range(len(S)):\n    if S[i] % 10 != 0:\n        maxtenga = S[i]\n        break\n\nflag = False\nfor i in range(len(a)):\n    if a[i] % 10 != 0:\n        flag = True\n\nif ans % 10 != 0:\n    print(ans)\nelif flag is False:\n    print(0)\nelse:\n    print(maxtenga)\n"}
{"label": 61, "index": 7909, "code": "def C():\n    #from numpy import sum, min\n    N = int(input())\n    s = []\n    pos = []\n    neg = []\n    for _ in range(N):\n        s.append(int(input()))\n    for i in s:\n        if i % 10 == 0:\n            pos.append(i)\n        else:\n            neg.append(i)\n    possum = sum(pos)\n    negsum = sum(neg)\n    if negsum % 10 == 0:\n        negsum -= min(neg) if neg else 0\n    print(0 if 0 == negsum else negsum + possum)\n\nif __name__ == '__main__':\n    C()"}
{"label": 61, "index": 7910, "code": "# -*- coding:utf-8 -*-\nimport sys\n\nN = int(input())\nSn = sorted([int(input()) for i in range(N)])\ntotal = sum(Sn)\nif total % 10 != 0:\n    print(total)\n    sys.exit()\nelse:\n    i = 0\n    while True:\n        if (total - Sn[i]) % 10 != 0:\n            print(total - Sn[i])\n            sys.exit()\n        i += 1\n        if i == N:\n            break\nprint(0)\n"}
{"label": 61, "index": 7911, "code": "# -*- coding: utf-8 -*-\nn = input()\n\ns = [input() for i in range(n)]\ns2 = sorted(s)\nans = sum(s2)\nflg = 0\nif(ans%10 == 0):\n    for i in range(n):\n        if(s2[i]%10 != 0):\n            ans -= s2[i]\n            flg = 1\n            break\n    print(ans if flg else 0)\nelse:\n    print(ans)"}
{"label": 61, "index": 7912, "code": "# coding: utf-8\n\nn = input()\ns = map(int, [raw_input() for _ in xrange(n)])\ns.sort(reverse=True)\nt = 0\nwhile True:\n\n    for i in xrange(1, len(s) + 1):\n        total = sum(s) - t\n\n        if total % 10 != 0:\n            print total\n            exit()\n\n        t = s[-i]\n\n    s.pop()\n\n    if not s:\n        print 0\n        break\n"}
{"label": 61, "index": 7913, "code": "N = int(input())\ns = []\n\nfor i in range(N):\n\ts.append(int(input()))\ns.sort()\n\nmax = sum(s)\nfor i in range(N):\n\tif(max % 10 != 0):\n\t\tprint(max)\n\t\texit(0)\n\telif((max-s[i]) % 10 != 0):\n\t\tprint(max-s[i])\n\t\texit(0)\nprint(\"0\")\n"}
{"label": 61, "index": 7914, "code": "N = int(input())\nS = [int(input()) for i in range(N)]\ndp = [[0 for i in range(10101)] for j in range(101) ]\nmax_S = sum(S)\nans =0\n\ndp[0][0] = 1\nfor i in range(N):\n    for j in range(max_S+1):\n        if dp[i][j] == 1:\n            dp[i+1][j] =1\n            dp[i+1][j+S[i]] =1\n\nfor j in range(max_S+1):\n    if (j%10 !=0) & (dp[N][j]) == 1:\n        ans = max(ans,j)\n\nprint(ans)"}
{"label": 61, "index": 7915, "code": "def main():\n    N = int(input())\n    S = [int(input()) for i in range(N)]\n\n    ans = sum(S)\n    if str(ans)[-1] == '0':\n        s = sorted(S)\n        for i in s:\n            if str(i)[-1] != '0':\n                ans -= i\n                break\n        else:\n            ans = 0\n\n    print(ans)\n\nmain()\n"}
{"label": 61, "index": 7916, "code": "N = int(input())\ns = []\nfor _ in range(N):\n    s.append(int(input()))\n\n\nif sum(s) % 10 != 0:\n    print (sum(s))\n    \nelse:\n    min_s = 0\n    sorted_s = sorted(s, reverse=True)\n    for ss in sorted_s:\n        if ss % 10 != 0:\n            min_s = ss\n\n    if min_s == 0:\n        print (0)\n    else:\n        print(sum(s) - min_s)"}
{"label": 61, "index": 7917, "code": "def foo(n):\n    if not n % 10:\n        return float('inf')\n    return n\n\nn = int(input())\ns = []\nfor i in range(n):\n    s.append(int(input()))\ns.sort(reverse=True, key=foo)\nk = sum(s)\np = n - 1\nwhile not k % 10 and s:\n    k -= s[-1]\n    s.pop()\nprint(k)"}
{"label": 61, "index": 7918, "code": "# -*- coding: utf-8 -*-\n\n#-------\n# Initialize\nN = int(input())\nS =[0] * N\nfor i in range(N):\n    S[i] = int(input())\ndp = [[0 for i in range(10101)] for j in range(101)]\n#-------\n# Define\n\n#-------\n# Do\ndp[0][0] = 1;\nfor i in range(N):\n    for j in range(10001):\n        if(dp[i][j] == 1):\n            dp[i+1][j] = 1\n            dp[i+1][j+S[i]] = 1\n\nans = 0\nfor j in range(10001):\n    if (j % 10 > 0) & (dp[N][j] == 1):\n        ans = max(ans, j)\nprint(str(ans))\n\n#-------\n# Output\n"}
{"label": 61, "index": 7919, "code": "N = int(raw_input())\npoints = [int(raw_input()) for i in range(N)]\npoints.sort(reverse=True)\nans = sum(points)\n\nwhile (ans % 10 == 0):\n    min = points.pop()\n    if min % 10 != 0:\n        ans -= min\n    if len(points) == 0:\n        break\n\nprint ans if ans % 10 != 0 else 0\n"}
{"label": 61, "index": 7920, "code": "# -*- coding: utf-8 -*-\n\nimport sys\nimport os\n\nN = int(input())\nA = []\nis_all_ten = True\nfor i in range(N):\n    a = int(input())\n    if a % 10 != 0:\n        is_all_ten = False\n    A.append(a)\nA.sort()\n\nif is_all_ten:\n    print(0)\nelif sum(A) % 10 != 0:\n    print(sum(A))\nelse:\n    not_ten_list = [x for x in A if x % 10 != 0]\n    print(sum(A) - not_ten_list[0])"}
{"label": 61, "index": 7921, "code": "#!/usr/bin/env python\nfrom __future__ import division, print_function\nimport itertools\nimport sys\n\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    scores = []\n    for _ in range(n):\n        scores.append(int(sys.stdin.readline().strip()))\n    s = sum(scores)\n    if s % 10 != 0:\n        print(s)\n        return\n\n    for s in scores:\n        if s % 10 != 0:\n            break\n    else:\n        print(0)\n        return\n\n    scores.sort()\n\n    for s in scores:\n        if s % 10 != 0:\n            print(sum(scores) - s)\n            return\n\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 61, "index": 7922, "code": "# -*coding: utf8 -*-\n\nn = input()\ns = []\nfor i in range(n):\n    s.append(input())\n\nwa = sum(s)\n\nif wa % 10 != 0:\n    print wa\nelse:\n    flag = 0\n    for i in range(1,max(s)+1):\n        if (i in s) and (i%10!=0):\n            print wa - i\n            flag = 1\n            break\n    if flag == 0:\n        print 0"}
{"label": 61, "index": 7923, "code": "import sys\ni=0\nj=0\nk=0\nt=0\nm=0\ns=0\nlists=[]\nlists2 =[]\n\n#\u6570\u5024\u306e\u6570\u3092\u53d7\u3051\u53d6\u308b\nline = int(input())\n\n#\u6570\u5024\u3092\u53d7\u3051\u53d6\u3063\u3066\u30ea\u30b9\u30c8\u306e\u4f5c\u6210\nwhile i < line:\n\ta = int(input())\n\t#print (a)\n\tlists.insert(i,a)\n\ti +=1\n\n#\u6570\u5024\u306e\u8db3\u3057\u5408\u308f\u305b\nwhile j < line:\n    s += lists[j]\n    j +=1\n\n#\u6b63\u3057\u3051\u308c\u3070\u51fa\u529b\nif s%10 != 0:\n\tprint(s)\nelse:\n    #10\u306e\u500d\u6570\u4ee5\u5916\u306e\u30ea\u30b9\u30c8\u4f5c\u6210\n    while k < line:\n        if lists[k]%10 != 0:\n\t        lists2.insert(m,lists[k])\n\t        m +=1\n        k +=1\n    if lists2 !=[]:\n        t = min(lists2)\n        print(s-t)\n    else:\n    \tprint(0)"}
{"label": 61, "index": 7924, "code": "N = int(input())\ns = []\n\nfor i in range(N) :\n    s.append(int(input()))\n\nans = sum(s)\ns.sort()\n\nfor i in range(N) :\n    if ans%10 != 0 :\n        print(ans)\n        break\n    elif s[i]%10 != 0:\n        ans -= s[i]\nelse :\n    print(0)"}
{"label": 61, "index": 7925, "code": "N = int(input())\nnum=[]\nans= 0\nfor i in range(N):\n    num.append(int(input().rstrip()))\nnum.sort()\nans = sum(num)\nif ans%10==0:\n    for i in range(N):\n        if num[i]%10 != 0:\n            ans -= num[i]\n            print(ans)\n            exit()\n    print(0)\nelse:\n    print(ans)"}
{"label": 61, "index": 7926, "code": "n = int(input())\n\ns = [int(input()) for i in range(n)]\n\nsum_s = sum(s)\nnot_list = [num for num in s if num % 10 != 0]\n\n\nif sum_s % 10 == 0:\n    if len(not_list) == 0:\n        sum_s = 0\n    else:\n        sum_s -= sorted(not_list)[0]\n\nprint(sum_s)"}
{"label": 61, "index": 7927, "code": "a=sorted([int(input()) for _ in[0]*int(input())]);b=sum(a)\nfor x in a:\n    if b%10:break\n    elif x%10:b-=x\nprint([0,b][b%10!=0])"}
{"label": 61, "index": 7928, "code": "N = int(input())\ns = [int(input()) for i in range(N)]\ns.sort()\ns_min = 0\n\nif sum(s) % 10 :\n    print(sum(s))\nelse:\n    for i in range(N):\n        if s[i] % 10 != 0:\n            s_min = s[i]\n            break\n    if s_min:\n        print(sum(s) - s_min)\n    else:\n        print(0)"}
{"label": 61, "index": 7929, "code": "n = int(input())\ns=[]\nisten=0\nscore=0\nfor i in range(n):\n    si = int(input())\n    s.append(si)\n    if si%10!=0:\n        isten=1\n\ns.sort()\nif isten==1:\n    score=sum(s)\ni=0\nwhile score%10==0 and isten==1:\n    s_ = list(s)\n    del s_[i]\n    i+=1\n    score=sum(s_)\n\nprint(score)\n"}
{"label": 62, "index": 7930, "code": "r, g, b = map(int,input().split())\n\nans = r * 100 + g * 10 + b\n\nif ans % 4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 62, "index": 7931, "code": "a = ''.join(raw_input().split())\na = int(a)\nif a % 4 == 0:\n    print \"YES\"\nelse:\n    print \"NO\"\n"}
{"label": 62, "index": 7932, "code": "r,g,b=map(int,input().split())\nif (g*10+b)%4 ==0:\n    print('YES')\nelse:\n    print('NO')\n    "}
{"label": 62, "index": 7933, "code": "import sys\nimport numpy as np\nfrom math import *\ndef get_read_func(fileobject):\n    if fileobject == None :\n        return raw_input\n    else:\n        return fileobject.readline\n\ndef main():\n    if len(sys.argv) > 1:\n        f = open(sys.argv[1])\n    else:\n        f = None\n    read_func = get_read_func(f);\n    input_raw = read_func().strip().split()\n    rgb = int(input_raw[0])*100 + int(input_raw[1]) *10 + int(input_raw[2])\n    if rgb % 4 == 0 :\n        print 'YES'\n    else:\n        print 'NO'\n\nif __name__ == '__main__':\n    main()"}
{"label": 62, "index": 7934, "code": "if __name__==\"__main__\":\n    r, g, b = input().split()\n    x = int(r+g+b)\n    if(x % 4 == 0):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"}
{"label": 62, "index": 7935, "code": "#!/usr/bin/env python\n\ndef solve():\n    abc = input().split()\n    s = \"\"\n    for i in abc:\n        s += i\n    n = int(s)\n    if n % 4 == 0:\n        print('YES')\n    else:\n        print('NO')\n    \n        \nif __name__ == '__main__':\n    solve()\n"}
{"label": 62, "index": 7936, "code": "r,g,b = map(int,input().split())\nprint(\"YES\" if (g*10+b)%4==0 else \"NO\")"}
{"label": 62, "index": 7937, "code": "#!/usr/bin/env python3\n\nr, g, b = map(int, input().split())\nnum = (100 * r) + (10 * g) + (1 * b)\n\nif num % 4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 62, "index": 7938, "code": "s=input().split()\nx=int(s[0])\ny=int(s[1])\nz=int(s[2])\nc=100*x+10*y+z\nif(c%4==0):\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 62, "index": 7939, "code": "R,G,B=map(int,input().split())\nans=100*R+10*G+B\nif ans%4==0:\n  print(\"YES\")\nelse:\n  print(\"NO\")"}
{"label": 62, "index": 7940, "code": "r, g, b = map(int, input().split())\nnum = r * 100 + g * 10 + b\nif(num % 4 == 0):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 62, "index": 7941, "code": "a,b,c = list(map(int,input().split()))\nif ((a * 100 + b * 10 + c) % 4 == 0):\n  print(\"YES\")\nelse:\n  print(\"NO\")"}
{"label": 62, "index": 7942, "code": "N = int(\"\".join(input().split()))\nif N % 4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 62, "index": 7943, "code": "a = input()\n\na = a.split()\n\nr = int(a[0])\ng = int(a[1])\nb = int(a[2])\n\nnumber = r * 100 + g * 10 + b\n\n\"\"\"\nprint(a)\nprint(r)\nprint(g)\nprint(b)\nprint(number)\n\"\"\"\n\nif number % 4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 62, "index": 7944, "code": "r, g, b = list(map(int, input().split(\" \")))\n\nif (10*g + b) % 4 == 0:\n    print (\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 62, "index": 7945, "code": "r, g, b = map(int, input().split())\n\nif (r*100+g*10+b)%4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 62, "index": 7946, "code": "a=raw_input()\n\naa=int(a.replace(' ',''))\n\nif aa/4*4==aa:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 62, "index": 7947, "code": "import sys\n\ndef solve():\n    r, g, b = map(int, input().split())\n\n    val = 100*r + 10*g + b\n\n    if val % 4 == 0:\n        print('YES')\n    else:\n        print('NO')\n\nif __name__ == '__main__':\n    solve()"}
{"label": 62, "index": 7948, "code": "def solve():\n    r, g, b = map(int, input().split())\n    if (100 * r + 10 * g + b) % 4 == 0:\n        ans = \"YES\"\n    else:\n        ans = \"NO\"\n    print(ans)\n\nif __name__ == \"__main__\":\n    solve()\n"}
{"label": 62, "index": 7949, "code": "if int(('').join(raw_input().split(' ')))%4==0:\n\tprint('YES')\nelse:\n\tprint('NO')"}
{"label": 62, "index": 7950, "code": "# -*- coding: utf-8 -*-\n\nimport sys\nimport subprocess\nimport json\nimport time\nimport math\nimport re\nimport sqlite3\n\nr, g, b = map(int, input().split())\nif (g*10 + b) % 4 == 0: print(\"YES\")\nelse: print(\"NO\")\n        \n"}
{"label": 62, "index": 7951, "code": "r,g,b=raw_input().split()\nprint \"YES\" if int(r+g+b)%4==0 else \"NO\"\n"}
{"label": 62, "index": 7952, "code": "num = input().split()\na = int(num[0]) * 100 + int(num[1]) * 10 + int(num[2])\nif a % 4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 62, "index": 7953, "code": "l = map(int, raw_input().split())\nv = 100*l[0] + 10*l[1] + l[2]\n\nif v % 4 == 0:\n    print \"YES\"\nelse:\n    print \"NO\""}
{"label": 62, "index": 7954, "code": "# -*- coding: utf-8 -*-\n\nr,g,b = map(int, input().split())\n\nif ((g*10 + b) % 4 == 0):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 62, "index": 7955, "code": "a, b, c = map(int, raw_input().split())\nif (b * 10 + c) % 4 == 0:\n\tprint \"YES\"\nelse:\n\tprint \"NO\""}
{"label": 62, "index": 7956, "code": "r, g, b = map(int, input().split())\nnum = r * 100 + g * 10 + b\nans = \"YES\" if(num % 4 == 0) else \"NO\"\nprint(ans)\n"}
{"label": 62, "index": 7957, "code": "r,g,b = [int(_) for _ in input().split()]\n\nif (100*r+10*g+b)%4==0:\n    print ('YES')\nelse:\n    print ('NO')"}
{"label": 62, "index": 7958, "code": "r, g, b = map(int, raw_input().split())\n\nv = 100*r + 10*g + b\nif v % 4 == 0:\n    print \"YES\"\nelse:\n    print \"NO\"\n"}
{"label": 62, "index": 7959, "code": "r,g,b = map(int, input().split())\nprint('YES' if (r*100 + g * 10 + b)%4 == 0 else 'NO')\n"}
{"label": 62, "index": 7960, "code": "#!/usr/bin/python\n\na = [int(i) for i in input().split()]\n\nn = 100 * a[0] + 10 * a[1] + a[2]\n\nif n % 4 == 0:\n  print(\"YES\")\nelse:\n  print(\"NO\")"}
{"label": 62, "index": 7961, "code": "num = int(input().replace(\" \",\"\"))\nif num % 4 :\n    print(\"NO\")\nelse:\n    print(\"YES\")"}
{"label": 62, "index": 7962, "code": "nums = [int(x) for x in input().split()]\nans = nums[0]*100 + nums[1] * 10 + nums[2]\n\nif ans % 4 == 0:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")"}
{"label": 62, "index": 7963, "code": "r,g,b = map(str,input().split())\nx = int(r+g+b)\nprint('YES' if x % 4 == 0 else 'NO')\n"}
{"label": 62, "index": 7964, "code": "x=input()\ny=int(x.split()[0]+x.split()[1]+x.split()[2])\nif y%4==0:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 62, "index": 7965, "code": "def read(): return list(map(int, input().split()))\n\nc = read()\nprint(\"YES\" if (100*c[0] + 10*c[1] + c[2]) % 4 == 0 else \"NO\")"}
{"label": 62, "index": 7966, "code": "a, b, c = input().split()\nn = int(b+c)\nif n % 4 == 0:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 62, "index": 7967, "code": "r, g, b = map(int, input().split())\n\nif (g * 10 + b) % 4 == 0:\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 62, "index": 7968, "code": "inpt = map(int, raw_input().split())\nn = 100 * inpt[0] + 10 * inpt[1] + inpt[2]\nif n % 4 == 0:\n\tprint 'YES'\nelse:\n\tprint 'NO'\n"}
{"label": 62, "index": 7969, "code": "r, g, b = map(str, input().split())\nans = r + g + b\nans = int(ans)\nif ans % 4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 62, "index": 7970, "code": "a= raw_input().split()\n\nsum = int(a[0])*100 + int(a[1])*10 + int(a[2])\n\nif sum%4 == 0:\n\tprint \"YES\"\nelse:\n\tprint \"NO\""}
{"label": 62, "index": 7971, "code": "#! /usr/bin/env python3\n\nr, g, b = map(int, input().split())\nif (r * 100 + g * 10 + b) % 4 == 0:\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 62, "index": 7972, "code": "N = input().split()\nsum = int(N[0])*100 + int(N[1])*10 + int(N[2])\n\nif sum%4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 62, "index": 7973, "code": "r,g,b = list(map(int,input().split()))\nz=100*r+10*g+b\n\nif z%4==0:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 62, "index": 7974, "code": "r, g, b = map(int, raw_input().split())\nnumber = r*100 + g*10 + b\nif (number%4)==0:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 62, "index": 7975, "code": "r,g,b = map(int, raw_input().split())\nif(r * 100 + g * 10 + b) % 4 == 0:\n    print \"YES\"\nelse:\n    print \"NO\"\n"}
{"label": 62, "index": 7976, "code": "r,g,b=map(int,input().split())\n\ns=r*100+g*10+b\n\nif s%4==0:\n    print(\"YES\")\nelse :\n    print(\"NO\")\n\n"}
{"label": 62, "index": 7977, "code": "r, g, b = map(int, raw_input().split()) \nprint \"YES\" if (100*r + 10*g + b)%4 == 0 else \"NO\"\n"}
{"label": 62, "index": 7978, "code": "import sys\n \nstdin = sys.stdin\n \nni = lambda: int(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nns = lambda: stdin.readline()\n\n\na, b, c = na()\n\nif (a * 100 + b * 10 + c) % 4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 62, "index": 7979, "code": "# -*- coding: utf-8 -*-\n\n#\u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u306e\u6574\u6570\u306e\u5165\u529b\nr, g, b = map(int, raw_input().split())\n#\u5165\u529b\u5024\u306e\u9023\u7d50\nx = str(r)+str(g)+str(b)\n\n#4\u306e\u500d\u6570\u304b\u5426\u304b\u306e\u78ba\u8a8d\nif int(x)%4 == 0:\n    print 'YES'\nelse:\n    print'NO'"}
{"label": 62, "index": 7980, "code": "rgb = [int(i) for i in input().split()]\nnum = 0\nfor i, n in enumerate(reversed(rgb)):\n    num += n * (10 ** i)\nif num % 4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 62, "index": 7981, "code": "r,g,b = map(int,input().split())\n\nn = r*100+g*10+b\n\nif n%4==0:\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 62, "index": 7982, "code": "print('YES' if int(''.join(input().split()))%4==0 else 'NO')\n"}
{"label": 62, "index": 7983, "code": "r, g, b = map(int, input().split(\" \"))\n\nif g % 2 ==0 and b % 4 ==0 or g%2 ==1 and b%4==2:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 62, "index": 7984, "code": "# -*- coding: utf-8 -*-\nr, g, b = [int(n) for n in input().split()]\nnum = 100*r + 10*g +b\nif num%4==0:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 62, "index": 7985, "code": "\nr, g, b = list(map(int, input().split()))\na = r*100+g*10+b\n\nif a % 4 == 0:\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 62, "index": 7986, "code": "r, g, b = input().split()\nr = int(r)\ng = int(g)\nb = int(b)\nx = r*100 + g*10 + b\nif x%4 == 0:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 62, "index": 7987, "code": "input_line_1 = raw_input()\nx, y, z = input_line_1.split(\" \")\nif (int(y) * 10 + int(z)) % 4 == 0:\n\tprint \"YES\"\nelse:\n\tprint \"NO\""}
{"label": 62, "index": 7988, "code": "r, g, b = list(map(int, input().split(\" \")))\n\nif (10*g + b) % 4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 62, "index": 7989, "code": "r,g,b=list(map(int,input().split(\" \")))\n\nx=10*g+b\nif x%4==0:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 62, "index": 7990, "code": "a = input().replace(\" \", \"\")\na = int(a)\n\nif(a % 4):\n\tprint(\"NO\")\nelse:\n\tprint(\"YES\")"}
{"label": 62, "index": 7991, "code": "# coding: utf-8\ndef get_ln_inputs():\n    return input().split()\n\n\ndef get_ln_int_inputs():\n    return list(map(int, get_ln_inputs()))\n\n\ndef main():\n    if int(\"\".join(get_ln_inputs())) % 4 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nmain()"}
{"label": 62, "index": 7992, "code": "_, g, b = map(int, raw_input().split())\n\nif (g*10+b) % 4 == 0:\n    print \"YES\"\nelse:\n    print \"NO\""}
{"label": 62, "index": 7993, "code": "R, G, B = list(map(int, input().split()))\n\nRGB = 100*R + 10*G + B\n\nif(RGB%4==0):\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 62, "index": 7994, "code": "r,g,b = [int(x) for x in input().split()]\n\nif (g*10+b)%4 == 0:\n\tprint('YES')\nelse:\n\tprint('NO')"}
{"label": 62, "index": 7995, "code": "r, g, b = map(int, input().split())\n\nif (100*r + 10*g + b) % 4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 62, "index": 7996, "code": "r, g, b = map(int, input().split())\n\nnum =r*100+g*10+b\n\nprint (\"YES\" if num%4==0 else \"NO\")"}
{"label": 62, "index": 7997, "code": "data = input().split()\nnum = int(\"\".join(data))\nif num % 4==0:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n"}
{"label": 62, "index": 7998, "code": "rgb = input().split()\nans = \"\".join(rgb)\nans = int(ans)\nif ans%4 == 0:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 62, "index": 7999, "code": "import sys\n\ninput_file = 'a1.in'\n# sys.stdin = open(input_file)\n\n\ns = input().split()\nt = int(''.join(s))\n\nif t % 4 == 0:\n    print('YES')\nelse:\n    print('NO')\n\n"}
{"label": 62, "index": 8000, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport array\nfrom bisect import *\nfrom collections import *\nimport fractions\nimport heapq \nfrom itertools import *\nimport math\nimport re\nimport string\n\nR, G, B = input().split()\nif int(R + G + B) % 4 == 0:\n    ans = 'YES'\nelse:\n    ans = 'NO'\nprint(ans)\n\n"}
{"label": 62, "index": 8001, "code": "r,g,b=input().split()\n\ncards = int(r + g + b)\n\nif cards % 4 == 0:\n    print(\"YES\")\n\nelse:\n    print(\"NO\")"}
{"label": 62, "index": 8002, "code": "x,y,z = map(int, input().split())\nS = x * 100 + y * 10 + z\nif S % 4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 62, "index": 8003, "code": "n = input()\ntmp_n = n.split(\" \")\nnum = int(tmp_n[0]+tmp_n[1]+tmp_n[2])\n\nif num%4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 62, "index": 8004, "code": "rgb = input().split()\nr = rgb[0]\ng = rgb[1]\nb = rgb[2]\n\ncheck = int(r + g + b)\n\nif check % 4 == 0:\n\tprint('YES')\nelse:\n\tprint('NO')\n"}
{"label": 62, "index": 8005, "code": "r, g, b = [int(n) for n in input().split()]\n\nif (10*g+b) % 4 == 0:\n    print('YES')\nelse:\n    print('NO')\n\n"}
{"label": 62, "index": 8006, "code": "#coding:utf-8\n\nif __name__ == \"__main__\":\n    num_list = input().split(\" \")\n    num = int(\"\".join(num_list))\n\n    if num % 4 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"}
{"label": 62, "index": 8007, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\n\n\ndef main():\n    r,g,b = LI()\n    t = g*10+b\n    if t % 4 == 0:\n        return 'YES'\n\n    return 'NO'\n\n\nprint(main())\n"}
{"label": 62, "index": 8008, "code": "a, b, c = map(int, input().split())\nif (b * 10 + c) % 4 == 0:\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 62, "index": 8009, "code": "inp = input().split()\nr = int(inp[0] + inp[1] + inp[2])\nif r % 4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 62, "index": 8010, "code": "a, b, c = map(int, input().split())\nprint('YES' if (a * 100 + b * 10 + c) % 4 == 0 else 'NO')\n"}
{"label": 62, "index": 8011, "code": "a,b,c = map(int, input().split())\n\nif (100*a+10*b+c)%4==0:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 62, "index": 8012, "code": "inps = [i for i in input().split()]\nsorted(inps)\ninpsS = \"\".join(inps)\ninpsI = int(inpsS)\nif inpsI % 4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 62, "index": 8013, "code": "# coding: utf-8\n# Here your code !\n\ns = input()\nnum =int(s.replace(\" \",\"\"))\nif num%4==0:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n\n    \n"}
{"label": 62, "index": 8014, "code": "r,g,b = map(int,input().split())\nA = 100*r + 10*g + b\nif A % 4 == 0:\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")\n"}
{"label": 62, "index": 8015, "code": "\nraw = raw_input().split(\" \")\nnum = int(raw[0]) * 100 + int(raw[1]) * 10 + int(raw[2])\nif not (num % 4):\n    print 'YES'\nelse:\n    print 'NO'\n"}
{"label": 62, "index": 8016, "code": "def rgb():\n    r,g,b=map(int,input().split())\n    if(100*r+10*g+b)%4==0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    return\nrgb()"}
{"label": 62, "index": 8017, "code": "a = input()\nnum = a.replace(' ', '')\nc = int(num)%4\nif c == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 62, "index": 8018, "code": "r, g, b = map(int, input().split())\ns = int(100*r + 10*g + b)\nt = s%4\nif t == 0 :\n print('YES')\nelse :\n print('NO')"}
{"label": 62, "index": 8019, "code": "# -*- coding: utf-8 -*-\n\nimport sys\nimport os\n\nA = list(map(int, input().split()))\n\nn = 100 * A[0] + 10 * A[1] + A[2]\nif n % 4 == 0:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 62, "index": 8020, "code": "a,b,c=map(int,input().split())\nif((a*100+b*10+c)%4==0):\n\tprint(\"YES\")\nelse:print(\"NO\")"}
{"label": 62, "index": 8021, "code": "# encoding:utf-8\ndef main():\n\tr, g, b = list(map(int, input().split()))\n\tif (r * 100 + g * 10 + b) % 4 == 0:\n\t\tprint(\"YES\")\n\telse:\n\t\tprint(\"NO\")\n\t\nif __name__ == '__main__':\n\tmain()"}
{"label": 62, "index": 8022, "code": "print(\"NO\" if sum([int(i)*10**(2-t) for t,i in enumerate(input().split())])%4 else \"YES\")"}
{"label": 62, "index": 8023, "code": "print \"YES\"*(int(raw_input().replace(\" \", \"\"))%4==0)or\"NO\"\n"}
{"label": 62, "index": 8024, "code": "num = int(input().replace(' ',''))\nif num%4 == 0:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 62, "index": 8025, "code": "a,b,c=[str(i) for i in input().split()]\n\nn=a+b+c\n\nif (int(n)%4)==0:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 62, "index": 8026, "code": "x, y, z = map(int, input().split())\na = 100*x + 10* y + z\nif a%4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 62, "index": 8027, "code": "rgb = list(map(int,input().split()))\n\nans = rgb[0] * 100 + rgb[1] * 10 + rgb[2]\n\nif ans % 4 == 0:\n    print ('YES')\nelse:\n    print ('NO')"}
{"label": 62, "index": 8028, "code": "rgb = raw_input()\nrgb = rgb.replace(' ', '') \nrgb = int(rgb)\ntest = rgb % 4\nif test == 0 :\n   print 'YES'\nelse :\n   print 'NO'"}
{"label": 62, "index": 8029, "code": "num = input().split() \ntemp = ''\nfor i in range(len(num)):\n    temp = temp + num[i]\nprint( ['NO','YES'][int(temp)%4==0] )"}
{"label": 62, "index": 8030, "code": "def a():\n    r, g, b = map(int, input().split())\n    n = 100*r + 10*g + 1*b\n    print('YES' if n % 4 == 0 else 'NO')\n\na()\n"}
{"label": 62, "index": 8031, "code": "r,g,b = map(int,input().split())\na = r*100+g*10+b\nmsg = \"YES\" if a%4 == 0 else \"NO\"\nprint(msg)"}
{"label": 62, "index": 8032, "code": "Z=[int(x) for x in input().split()]\na=100*Z[0]+10*Z[1]+Z[2]\nif a%4==0:\n    print('YES')\nelse:\n    print('NO')"}
{"label": 62, "index": 8033, "code": "import sys\n\nr, g, b = map(int, input().split())\nif ((r*100+g*10+b)%4==0):\n    print (\"YES\")\nelse:\n    print (\"NO\")\n"}
{"label": 62, "index": 8034, "code": "r, g, b = map(int, input().split())\n\nn = 100 * r + 10 * g + b\nif n % 4 == 0:\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 62, "index": 8035, "code": "r,g,b = input().split(\" \")\n\nif (int(r)*100+int(g)*10+int(b))%4==0 :\n    print(\"YES\")\nelse :\n    print(\"NO\")"}
{"label": 62, "index": 8036, "code": "r, g, b = list(map(int, input().split()))\nif (10 * g + b) % 4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 62, "index": 8037, "code": "def main():\n    r, g, b = list(map(int, input().strip().split()))\n    v = r * 100 + g * 10 + b\n    if v % 4 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 62, "index": 8038, "code": "if __name__ == \"__main__\":\n    r, g, b = map(int, input().split())\n\n    if (r * 100 + g * 10 + b) % 4 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")"}
{"label": 62, "index": 8039, "code": "#! -*- coding:utf-8 -*-\n\nr,g,b = map(int,input().split())\nx = 100*r + 10*g + b\n\nif x % 4 == 0:\n    print('YES')\nelse:\n    print('NO')\n"}
{"label": 62, "index": 8040, "code": "r, g, b = [int(i) for i in input().split()]\nn = r*100 + g*10 + b\nif n % 4:\n    print('NO')\nelse:\n    print('YES')"}
{"label": 62, "index": 8041, "code": "def f(r, g, b):\n    if (100 * r + 10 * g + b) % 4 == 0:\n        return 'YES'\n    else:\n        return 'NO'\n\nr, g, b = map(int, input().split())\nprint(f(r, g, b))"}
{"label": 62, "index": 8042, "code": "x = input().split()\nnum = x[0]+x[1]+x[2]\nprint('YES' if int(num)%4==0 else 'NO')"}
{"label": 62, "index": 8043, "code": "# coding: utf-8\nr, g, b = map(int, input().split())\nnum = 100*r + 10*g + b \nif num % 4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n    \n"}
{"label": 62, "index": 8044, "code": "x = int(\"\".join(input().split()))\nif (x % 4 == 0):\n\tprint(\"YES\")\nelse:\n\tprint(\"NO\")"}
{"label": 62, "index": 8045, "code": "print \"YES\" if int(raw_input().replace(\" \", \"\")) % 4 == 0 else \"NO\""}
{"label": 62, "index": 8046, "code": "r, g, b = map(int, raw_input().split())\n\nif (r*100+10*g+b) % 4 == 0:\n    print \"YES\"\nelse:\n    print \"NO\"\n"}
{"label": 62, "index": 8047, "code": "def main():\n    RGB = input()\n\n    rgb = int(RGB.replace(' ', ''))\n    if rgb % 4 == 0:\n        print('YES')\n    else:\n        print('NO')\n\nmain()\n"}
{"label": 62, "index": 8048, "code": "a,b,c = map(int, input().split())\nif(10*b+c)%4 ==0:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 62, "index": 8049, "code": "r, g, b = input().split(' ',3)\nif (int(r + g + b) % 4== 0) :\n    print('YES')\nelse:\n    print('NO')  "}
{"label": 62, "index": 8050, "code": "r, g, b = [int(i) for i in input().split()]\nsum = 4*100 + g*10 + b\nif sum % 4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 62, "index": 8051, "code": "r,g,b = [int(i) for i in input().split()]\nif (r*100+g*10+b)%4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 62, "index": 8052, "code": "n = [int(i) for i in input().split()]\nif (10*n[1] + n[2]) % 4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n"}
{"label": 62, "index": 8053, "code": "import sys\n\nstdin = sys.stdin\n\nni = lambda: int(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nns = lambda: stdin.readline()\n\na,b,c = na()\nif (a*100+b*10+c) % 4 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 62, "index": 8054, "code": "#coding: utf-8\nr,g,b = map(int, raw_input().split(' '))\nmod = (100 * r + 10 * g + b) % 4\n\nif mod == 0:\n\tprint 'YES'\nelse:\n\tprint 'NO'"}
{"label": 62, "index": 8055, "code": "r,g,b = map(int,input().split())\ns = r * 100 + 10 * g + b\n\nif(s % 4 == 0):\n    print('YES')\n\nelse:\n    print('NO')"}
{"label": 62, "index": 8056, "code": "x,y,z=raw_input().split()\nif int(x+y+z)%4==0:\n    print \"YES\"\nelse:\n    print \"NO\""}
{"label": 62, "index": 8057, "code": "a, b, c = map(int, input().split())\nd = a * 100 + b * 10 + c\nif d % 4 == 0 :\n    print ('YES')\nelse :\n    print ('NO')"}
{"label": 62, "index": 8058, "code": "if __name__ == '__main__':\n    r, g, b = list(input().split())\n\n    target = int(r + g + b)\n\n    # print(target)\n\n    if target % 4 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"}
{"label": 62, "index": 8059, "code": "a,b,c =map(int,input().split())\n\n\nif (a*100+b*10+c)%4==0:\n    print(\"YES\")\nelse:\n    print(\"NO\")"}
{"label": 63, "index": 8060, "code": "N = int(input())\n\na = [int(n) for n in input().split()]\na = sorted(a)\nprint(a[N-1] - a[0])\n"}
{"label": 63, "index": 8061, "code": "if __name__ == '__main__':\n    N = int(input())\n\n    a = list(map(int, input().split()))\n\n    a.sort()\n\n    print(a[-1] - a[0])\n"}
{"label": 63, "index": 8062, "code": "N = int(raw_input())\na = map(int, raw_input().split())\nprint(max(a) - min(a))"}
{"label": 63, "index": 8063, "code": "import numpy as np\n \nn = int(input())\na = list(int(i) for i in input().split()) \na.sort()\nb = a[n - 1] - a[0]\n\nprint (b)"}
{"label": 63, "index": 8064, "code": "if __name__==\"__main__\":\n    N = int(raw_input())\n    a = list(set(map(int, raw_input().split())))\n    a.sort()\n    ans = sum([x[1]-x[0] for x in zip(a, a[1:])])\n    print ans"}
{"label": 63, "index": 8065, "code": "# -*- coding: utf-8 -*-\n\nN = int(input())\n\nM = input().split()\nM.sort()\n\na = int(M[N-1]) - int(M[0])\n\nprint(a)\n"}
{"label": 63, "index": 8066, "code": "n=int(input())\nnums=input().split()\n\nma=max(nums)\nmi=min(nums)\nprint(int(ma)-int(mi))"}
{"label": 63, "index": 8067, "code": "def get_min_root_num(a):\n    max_a = 0\n    min_a = 1000\n    for buf_a in a:\n        if buf_a > max_a:\n            max_a = buf_a\n\n        if buf_a < min_a:\n            min_a = buf_a\n\n    return max_a-min_a\n\nif __name__ == '__main__':\n    N = input()\n    a_list = [int(i) for i in input().split()]\n\n    print(get_min_root_num(a_list))\n"}
{"label": 63, "index": 8068, "code": "# -*- coding:utf-8 -*-\n\nn = int(input())\na = input().split()\n\nfor i in range(n):\n\ta[i] = int(a[i])\n\na.sort()\nprint(a[n-1] - a[0])"}
{"label": 63, "index": 8069, "code": "n=input()\nn=int(n)\nimport numpy as np\na=input().split()\nfor i in range(n):\n a[i]=int(a[i])\ndis=np.max(a)-np.min(a)\nprint(dis)"}
{"label": 63, "index": 8070, "code": "N = int(input())\na = [int(x) for x in input().split(\" \")]\n\nprint(max(a) - min(a))"}
{"label": 63, "index": 8071, "code": "n = int(input())\na = []\ni = input().split()\nfor x in range(n):\n a.append(int(i[x]))\na.sort()\nprint(a[-1]-a[0])"}
{"label": 63, "index": 8072, "code": "N = int(input())\nx = list(map(int, input().split()))\n\nprint('{0}'.format(max(x)-min(x)))\n\n\n\nquit()\n"}
{"label": 63, "index": 8073, "code": "N = int(input())\nhouse = list(map(int , input().split()))\n\nhouse.sort()\n\nprint(house[N - 1] - house[0] )\n"}
{"label": 63, "index": 8074, "code": "N = int(input())\na = list(map(int, input().split()))\na.sort()\n\nans = 0\nfor i in range(1, N):\n    ans += a[i] - a[i - 1]\n\nprint(ans)\n"}
{"label": 63, "index": 8075, "code": "n = input()\na = map(int, raw_input().split())\n\nans = max(a) - min(a)\nprint ans"}
{"label": 63, "index": 8076, "code": "n=input()\na=[int(i) for i in input().split()]\n\nmax=-10\nmin=10000\nfor i in a:\n    if i>max:\n        max=i\n    if i<min:\n        min=i\nprint(max-min)\n\n\n"}
{"label": 63, "index": 8077, "code": "# -*- coding: utf-8 -*-\n\nN = int(input())\na = list(map(int, input().split()))\nprint(max(a)-min(a))"}
{"label": 63, "index": 8078, "code": "N = int(input())\na = list(map(int, input().split(\" \")))\n\nprint(max(a) - min(a))"}
{"label": 63, "index": 8079, "code": "n = int(input())\nA = list(map(int, input().split()))\n\nprint(max(A) - min(A))"}
{"label": 63, "index": 8080, "code": "n = int(input())\na = input().split()\nlist =[]\n\nfor i in range(n):\n    if a[i] not in list:\n        list.append(a[i])\n    else:\n        pass\n    \nlist.sort()\n\nprint(int(list[-1])-int(list[0]))"}
{"label": 63, "index": 8081, "code": "n = int(input())\na = list(map(int, input().split()))\n\na.sort()\nprint(a[-1] - a[0])\n"}
{"label": 63, "index": 8082, "code": "# -*- coding: utf-8 -*-\n\nN = int(raw_input())\na = map(int, raw_input().split()) \n\nprint max(a) - min(a)"}
{"label": 63, "index": 8083, "code": "n = int(input())\nA = list(map(int, input().split()))\nans = max(A) - min(A)\nprint(str(ans))"}
{"label": 63, "index": 8084, "code": "a = input()\nb = input().split()\nb.sort()\nans = int(b[-1]) - int(b[0])\nprint(ans)"}
{"label": 63, "index": 8085, "code": "N = int(input())\na = list(map(int, input().split()))\n\na.sort()\nprint(a[-1] - a[0])\n"}
{"label": 63, "index": 8086, "code": "import sys\n\nN = input()\nA = list(map(int,input().split()))\n\nprint(max(A)-min(A))"}
{"label": 63, "index": 8087, "code": "N=int(input())\n\na=map(int,input().split())\nb=sorted(a)\n\nprint(str(b[N-1]-b[0]))"}
{"label": 63, "index": 8088, "code": "\nN=int(raw_input().strip())\na=map(int,raw_input().split())\nprint max(a)-min(a)"}
{"label": 63, "index": 8089, "code": "n = input()\na = list(map(int, input().split()))\nprint(max(a) - min(a))"}
{"label": 63, "index": 8090, "code": "N = int(input())\nA = [int(i) for i in input().split()]\n\ndist = max(A) - min(A)\nprint(dist)\n"}
{"label": 63, "index": 8091, "code": "\"\"\"\nAtCoder Beginner Contest 064\nB - Traveling AtCoDeer Problem\n@author haru\n\"\"\"\n\narg1 = input()\narg2 = input()\nif not arg2.replace(\" \",\"\").isdigit(): exit(\"Error: Invalid Input\")\nDIMENTION = int(arg1) if arg1.isdigit() else exit(\"Error: Invalid Input\")\nPOSITIONS = [int(a) for a in arg2.split(\" \")]\nif not DIMENTION == len(POSITIONS): exit(\"Error: Invalid Input\")\nprint(max(POSITIONS) - min(POSITIONS))"}
{"label": 63, "index": 8092, "code": "N = input()\nn = [int(i) for i in input().split()]\nprint(max(n) - min(n))"}
{"label": 63, "index": 8093, "code": "N = int(input())\na = list(map(int,input().split()))\nprint(max(a) - min(a))"}
{"label": 63, "index": 8094, "code": "#!/usr/bin/python\n\nN = int(input())\nplaces = sorted(list(map(int, input().split(\" \"))), reverse=True)\n\nprev_position = places[0]\ntotal_distance = 0\nfor curr_position in places[1:]:\n    total_distance += prev_position - curr_position\n    prev_position = curr_position\n\nprint(total_distance)\n"}
{"label": 63, "index": 8095, "code": "N = int(input())\na = [int(num) for num in input().split()]\nprint(str(max(a)-min(a)))"}
{"label": 63, "index": 8096, "code": "\nn = int(input())\na = list(map(int, input().split()))\na.sort()\nans = 0\nprev = a[0]\nfor i in a[1:]:\n    ans += (i - prev)\n    prev = i\nprint(ans)"}
{"label": 63, "index": 8097, "code": "N = int(raw_input())\nA = map(int, raw_input().split())\n\nprint max(A) - min(A)\n"}
{"label": 63, "index": 8098, "code": "input()\nnums = list(map(int, input().split()))\nprint(max(nums)-min(nums))\n"}
{"label": 63, "index": 8099, "code": "n=int(input())\na=list(map(int,input().split()))\na.sort()\nprint(a[n-1]-a[0])"}
{"label": 63, "index": 8100, "code": "N = input()\nL = input().split()\n\nprint(int(max(L))-int(min(L)))"}
{"label": 63, "index": 8101, "code": "n = int(input())\nA = list(map(int,input().split()))\nprint(max(A) - min(A))"}
{"label": 63, "index": 8102, "code": "nums = [0]\nn = int(input())\nnums *= n\nnums = list(map(int,input().split()))\nmax = 0\nmin = 1000\nfor i in range(n):\n    if nums[i]<min:\n        min = nums[i]\n    if max<nums[i]:\n        max = nums[i]\nprint(max-min)\n"}
{"label": 63, "index": 8103, "code": "N = int(input())\n\nAi = list(map(int,input().split()))\n\nprint(max(Ai)-min(Ai))"}
{"label": 63, "index": 8104, "code": "n = int(input())\narr = []\na = input().split()\nfor i in a:\n    arr.append(int(i))\nprint(max(arr)-min(arr))"}
{"label": 63, "index": 8105, "code": "N = int(raw_input())\na = map(int, raw_input().split())\n\nprint max(a) - min(a)"}
{"label": 63, "index": 8106, "code": "\nn = int(input())\na = list(map(int, input().split()))\n\nprint(max(a) - min(a))\n"}
{"label": 63, "index": 8107, "code": "n = int(input())\nl = sorted([int(x) for x in input().split()])\nprint(l[-1] - l[0])"}
{"label": 63, "index": 8108, "code": "\nn = int(input())\na = list(map(int, input().split()))\nprint(max(a)-min(a))"}
{"label": 63, "index": 8109, "code": "#! /usr/bin/env python3\n\ninput()\na = sorted(map(int, input().split()))\nprint(a[-1] - a[0])"}
{"label": 63, "index": 8110, "code": "_ = input()\na = [int(s) for s in input().split()]\n\nprint(max(a)-min(a))"}
{"label": 63, "index": 8111, "code": "input()\ncoordinates = tuple(map(int, input().split()))\nprint(max(coordinates) - min(coordinates))\n"}
{"label": 63, "index": 8112, "code": "input();a=list(map(int,input().split()))\nprint(max(a)-min(a))"}
{"label": 63, "index": 8113, "code": "#coding:utf-8\n\nif __name__ == \"__main__\":\n    N = int(input())\n    num_list = list(map(int, input().split(\" \")))\n\n    print(max(num_list) - min(num_list))\n\n"}
{"label": 63, "index": 8114, "code": "N=int(input())\na=list(map(int,input().split(\" \")))\n\nprint(max(a)-min(a))\n"}
{"label": 63, "index": 8115, "code": "N=int(raw_input())\na=map(int,raw_input().split())\nprint max(a)-min(a)"}
{"label": 63, "index": 8116, "code": "import numpy as np\n\nif __name__==\"__main__\":\n    N = int(input())\n    a = input().split()\n    a = list(map(int, a))\n    a = np.sort(a)\n    s = 0\n    for i in range(len(a) - 1):\n        s += (a[i+1] - a[i])\n\n    print(s)\n"}
{"label": 63, "index": 8117, "code": "# -*- coding: utf-8 -*-\nimport sys\n\nN = input()\nan = input()\ns = sorted(set(map(int, an.split())))\nprint(s[-1] - s[0])\n"}
{"label": 63, "index": 8118, "code": "n = int(input())\na = list(map(int, input().split()))\n\na.sort()\nans = a[n-1] - a[0]\nprint(ans)\n"}
{"label": 63, "index": 8119, "code": "N=int(input())\na=list(map(int,input().split()))\na.sort()\nprint(max(a)-min(a))\n"}
{"label": 63, "index": 8120, "code": "\ndef b():\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(max(a) - min(a))\n\nb()"}
{"label": 63, "index": 8121, "code": "N = int(input())\na = list(map(int, input().split()))\n\nleft = min(a)\nright = max(a)\n\nprint(right - left)\n"}
{"label": 63, "index": 8122, "code": "N=input()\nmax = -1\nmin=1001\nfor num in [int(n) for n in raw_input().split(' ')]:\n\tif max < num:\n\t\tmax=num\n\tif min > num:\n\t\tmin=num\n\nprint(max-min)"}
{"label": 63, "index": 8123, "code": "n=int(input())\na=[int(i)for i in input().split()]\na.sort()\nans=0\nfor i in range(1,n):\n\tans+=a[i]-a[i-1]\nprint(ans)\t\n"}
{"label": 63, "index": 8124, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\nimport re\nimport math\nimport collections\nimport itertools\nimport functools\n\nDEBUG = True\nDEBUG = False\n\ndef dbg(*args):\n    if DEBUG:\n        print(\"DBG: \", file=sys.stderr, end=\"\")\n        print(*args, file=sys.stderr)\n\n\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    A.sort()\n\n    print(A[-1] - A[0])\n\nif __name__ == \"__main__\": main()\n"}
{"label": 63, "index": 8125, "code": "N = int(input())\na = [int(i) for i in input().split()]\nprint(max(a)-min(a))\n"}
{"label": 63, "index": 8126, "code": "def ri(): return int(input())\ndef rli(): return list(map(int, input().split()))\ndef rls(): return list(input())\ndef pli(a): return \"\".join(list(map(str, a)))\n\nN = ri()\ns = rli()\nprint(max(s)-min(s))"}
{"label": 63, "index": 8127, "code": "N=int(input())\na=list(map(int,input().split()))\nprint(max(a)-min(a))\n"}
{"label": 63, "index": 8128, "code": "num = int(raw_input())\nlaw = raw_input().split(\" \")\ntmp = 0\nraw = []\nfor i in law:\n    raw.append(int(i))\nfor i in range(num):\n    for j in range(i, num):\n        div = abs(raw[i] - raw[j])\n        if div >= tmp:\n            tmp = div\nprint tmp\n"}
{"label": 63, "index": 8129, "code": "n=int(input())\narr=list(map(int,input().split()))\nprint(max(arr)-min(arr))\n"}
{"label": 63, "index": 8130, "code": "n = int(input())\narr = []\na = input().split()\nfor i in a:\n    arr.append(int(i))\nprint(max(arr)-min(arr))\n"}
{"label": 63, "index": 8131, "code": "N = int(input())\na = list(map(int,input().split()))\nprint(max(a) - min(a))\n"}
{"label": 63, "index": 8132, "code": "# coding: utf-8\ndef get_ln_inputs():\n    return input().split()\n\n\ndef get_ln_int_inputs():\n    return list(map(int, get_ln_inputs()))\n\n\ndef main():\n    _ = get_ln_int_inputs()\n    a = get_ln_int_inputs()\n    print(max(a) - min(a))\n\n\nmain()"}
{"label": 63, "index": 8133, "code": "#! -*- coding:utf-8 -*-\nn = int(input())\narr = list(map(int,input().split()))\narr.sort()\nprint(arr[-1]-arr[0])\n"}
{"label": 63, "index": 8134, "code": "# -*- coding: utf-8 -*-\n\nimport sys\nimport subprocess\nimport json\nimport time\nimport math\nimport re\nimport sqlite3\n\nN = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\nprint(a[-1] - a[0])\n"}
{"label": 63, "index": 8135, "code": "n = int(input())\na = list(map(int, input().split()))\n\nmax = -1\nmin = 1001\nfor i in a:\n        if i > max:\n                max = i\n        if i < min:\n                min = i\n\nprint(max - min)"}
{"label": 63, "index": 8136, "code": "n=input()\na=list(map(int,input().split()))\na.sort()\nprint(a[-1]-a[0])"}
{"label": 63, "index": 8137, "code": "n = int(raw_input())\nl = map(int, raw_input().split())\nprint max(l) - min(l)\n"}
{"label": 63, "index": 8138, "code": "N = int(input())\na = list(map(int,input().split()))\nprint(max(a)-min(a))"}
{"label": 63, "index": 8139, "code": "n = int(input())\n\na = list(map(int, input().split()))\n\nprint(max(a)-min(a))"}
{"label": 63, "index": 8140, "code": "from collections import defaultdict\n\n\ndef main():\n    N = int(input())\n    a_list = list(map(int, input().split()))\n    print(max(a_list) - min(a_list))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 63, "index": 8141, "code": "N = int(input())\na = [int(i) for i in input().split()]\nprint(max(a)-min(a))"}
{"label": 63, "index": 8142, "code": "\nN = int(input())\nary = [int(e) for e in input().split()]\n\nmax_a = max(ary)\nmin_a = min(ary)\n\nprint(max_a - min_a)"}
{"label": 63, "index": 8143, "code": "n = input()\nA = [int(i) for i in input().split()]\nprint(max(A)-min(A))"}
{"label": 63, "index": 8144, "code": "n = input()\na = map(int, raw_input().split())\nprint max(a) - min(a)"}
{"label": 63, "index": 8145, "code": "N = int(input())\na= [int(n) for n in input().split()]\n\nprint(max(a)- min(a))\n"}
{"label": 63, "index": 8146, "code": "N = int(input())\n\ndata = input().split()\ndata = data[:N]\n\nprint(int(max(data)) - int(min(data)))\n\n"}
{"label": 63, "index": 8147, "code": "N = int(input())\na = list(map(int,input().split()))\na.sort()\nprint(a[-1]-a[0])"}
{"label": 63, "index": 8148, "code": "input(); print((lambda xs: max(xs) - min(xs))([int(x) for x in input().split()]))"}
{"label": 63, "index": 8149, "code": "n = input()\na = list(map(int, input().split(\" \")))\na.sort()\nprint(a[len(a)-1] - a[0])"}
{"label": 63, "index": 8150, "code": "input_line_1 = raw_input()\ninput_line_2 = raw_input()\n#N = int(input_line_1)\narray = [int(i) for i in input_line_2.split(\" \")]\nprint max(array) - min(array)"}
{"label": 63, "index": 8151, "code": "N = int(input())\na = input().split()\nmin = 1000\nmax = 0\nfor jj in range(len(a)):\n    if (int(a[jj]) < min):\n       min = int(a[jj])\n    if (int(a[jj]) > max):\n      max = int(a[jj])\nprint(max - min)"}
{"label": 63, "index": 8152, "code": "N = int(input())\na = [int(_) for _ in input().split()]\n\na = sorted(a)\nprint (a[-1]-a[0])"}
{"label": 63, "index": 8153, "code": "#!/usr/bin/env python3\n \nN = int(input())\na = list(map(int, input().split()))\n \nprint(max(a) - min(a))"}
{"label": 63, "index": 8154, "code": "N = int(input())\nmin = 1001\nmax = 0\n\naddresses = inputs = list(map(int, input().split(\" \")))\nfor address in addresses:\n    if address < min:\n        min = address\n    if address > max:\n        max = address\n\nprint(max - min)"}
{"label": 63, "index": 8155, "code": "# coding: utf-8\nimport array, bisect, collections, copy, heapq, itertools, math, random, re, string, sys, time\nsys.setrecursionlimit(10 ** 7)\nINF = 10 ** 20\nMOD = 10 ** 9 + 7\n\n\ndef II(): return int(input())\ndef ILI(): return list(map(int, input().split()))\ndef IAI(LINE): return [ILI() for __ in range(LINE)]\ndef IDI(): return {key: value for key, value in ILI()}\n\n\ndef read():\n    N = II()\n    a = ILI()\n    return (N, a)\n\n\ndef solve(N, a):\n    num_min = min(a)\n    num_max = max(a)\n    ans = num_max - num_min\n    return ans\n\n\ndef main():\n    params = read()\n    print(solve(*params))\n\n\nif __name__ == \"__main__\":\n    main()\n"}
{"label": 63, "index": 8156, "code": "import copy\nN = int(input())\na = map(int, input().split())\nb = copy.deepcopy(a)\nprint(max(b) - min(a))"}
{"label": 63, "index": 8157, "code": "n=int(input())\na=input().split()\nfor i in range(n):\n   if i==0:\n       max=int(a[i])\n       min=int(a[i])\n   if(max<int(a[i])):\n       max=int(a[i])\n   if (min>int(a[i])):\n       min=int(a[i])\nprint(max-min)\n"}
{"label": 63, "index": 8158, "code": "# coding: utf-8\nN = int(input())\na=input().split()\na.sort()\nresult=int(a[N-1])-int(a[0])\nprint(result)\n"}
{"label": 63, "index": 8159, "code": "#4\n#2 3 7 9\n\ninput()\na = list(sorted(map(int, input().split())))\nprint(abs(a[0] - a[-1]))\n"}
{"label": 63, "index": 8160, "code": "n = int(raw_input())\ninpt = map(int, raw_input().split())\ninpt.sort()\n\nprint inpt[n-1] - inpt[0]\n"}
{"label": 63, "index": 8161, "code": "N = int(input())\nA = [int(_) for _ in input().split()]\nprint(max(A) - min(A))"}
{"label": 63, "index": 8162, "code": "N = int(input())\na = list(map(int, input().split(\" \")))\n\nprint (\"%d\"%(max(a) - min(a)))"}
{"label": 63, "index": 8163, "code": "n=int(raw_input())\na=map(int,raw_input().split())\nprint max(a)-min(a)"}
{"label": 63, "index": 8164, "code": "n = int(raw_input())\n\na = [int(_) for _ in raw_input().split()]\nprint max(a) - min(a)"}
{"label": 63, "index": 8165, "code": "input()\ns = list(map(int, input().split()))\nl = max(s)\nr = min(s)\nprint(l - r)"}
{"label": 63, "index": 8166, "code": "n = int(input())\na = list(map(int,input().split()))\n\na.sort()\n\nprint(a[-1] - a[0])\n"}
{"label": 63, "index": 8167, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\n\n\ndef main():\n    N = I()\n    a = LI()\n    return max(a) - min(a)\n\n\nprint(main())\n"}
{"label": 63, "index": 8168, "code": "n = int(input())\na = list(map(int,input().split(\" \")))\na.sort()\nd = a[-1] - a[0] \nprint(d)"}
{"label": 63, "index": 8169, "code": "input()\na = list(map(int, input().split()))\nprint(max(a) - min(a))\n"}
{"label": 63, "index": 8170, "code": "N = int(input())\na = list(map(int,input().split()))\n\nprint(max(a)-min(a))"}
{"label": 63, "index": 8171, "code": "n=int(input())\nlist=list(map(int,input().split()))\nans=max(list)-min(list)\nprint(ans)"}
{"label": 63, "index": 8172, "code": "import sys\n# sys.stdin=open(\"b1.in\")\n\nn = input()\na = list(map(int, input().split()))\nprint(max(a) - min(a))"}
{"label": 63, "index": 8173, "code": "N=int(input())\na_n=[int(i) for i in input().split()]\n\nprint(max(a_n)-min(a_n))"}
{"label": 63, "index": 8174, "code": "# -*- coding: utf-8 -*-\nN = int(input())\na = [int(n) for n in input().split()]\nprint(max(a) - min(a))"}
{"label": 63, "index": 8175, "code": "#!/usr/bin/env python\ndef solve():\n    N = input()\n    a = input().split()\n    a.sort()\n    n = 0\n    for i in range (0, len(a) - 1):\n        n += int(a[i+1]) - int(a[i])\n    print(n)\n\n\nif __name__ == '__main__':\n    solve()\n"}
{"label": 63, "index": 8176, "code": "N=int(raw_input())\na=map(int,raw_input().split(' '))\n\nprint max(a)-min(a)\n"}
{"label": 63, "index": 8177, "code": "# -*- coding: utf-8 -*-\n\nn = input()\na = map(int, raw_input().split())\n\nprint(max(a)-min(a))\n"}
{"label": 63, "index": 8178, "code": "nb = int(input())\na = list(map(int,input().split()))\nprint(max(a) - min(a))"}
{"label": 63, "index": 8179, "code": "#ABC064B\n\nn=int(raw_input())\nl=map(int,raw_input().split())\nprint max(l)-min(l)\n"}
{"label": 63, "index": 8180, "code": "N = input()\na = sorted(map(int, raw_input().split()))\nprint a[-1] - a[0]"}
{"label": 63, "index": 8181, "code": "N = int(input())\na = map(int, input().split())\n\na = sorted(a,reverse=True)\n\nresult = 0\n\nfor i in range(N-1):\n    result += a[i] - a[i+1]\n\nprint(result)"}
{"label": 63, "index": 8182, "code": "n = int(input())\na = list(map(int, input().split()))\nprint(max(a)-min(a))\n"}
{"label": 63, "index": 8183, "code": "def main():\n    n = input()\n    a_list = [int(i) for i in input().split()]\n\n    print(max(a_list) - min(a_list))\n\n\nif __name__ == \"__main__\":\n    main()"}
{"label": 63, "index": 8184, "code": "n = input()\nA = map(int, raw_input().split())\nA.sort()\nprint A[-1] - A[0]\n"}
{"label": 63, "index": 8185, "code": "# -*- coding: utf-8 -*-\n\"\"\"\nhttp://abc064.contest.atcoder.jp/tasks/abc064_b\n\n\"\"\"\nimport sys\nfrom sys import stdin\n\ninput = stdin.readline\n\n\ndef main(args):\n    N = int(input())\n    positions = [int(x) for x in input().split()]\n    print(max(positions) - min(positions))\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"label": 63, "index": 8186, "code": "N = int(input())\na = set(map(int, input().split()))\nprint(max(a) - min(a))"}
{"label": 63, "index": 8187, "code": "n = int(input())\na = list(int(i) for i in input().split())\n\na.sort\n\nprint(max(a)-min(a))\n"}
{"label": 63, "index": 8188, "code": "import sys\n \nstdin = sys.stdin\n \nni = lambda: int(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nns = lambda: stdin.readline()\n\n\nn = ni()\na = na()\n\na = sorted(a)\n\nprint(a[len(a) - 1] - a[0])"}
{"label": 63, "index": 8189, "code": "N = int(input())\na = [int(i) for i in input().split()]\nprint(max(a) - min(a))\n"}
{"label": 64, "index": 8190, "code": "N = int(input())\na = list(map(int, input().split()))\n \nCOLOR = 8\ncnt, ov = [0] * COLOR, 0\nfor r in a:\n    if r < 3200:\n        cnt[r // 400] = 1\n    else:\n        ov += 1\n\nused = 0\nfor c in cnt:\n    if c > 0:\n        used += 1\n\nprint(max(1, used), used + ov)\n"}
{"label": 64, "index": 8191, "code": "N = int(input())\nR = [1,400,800,1200,1600,2000,2400,2800,3200,4801]\nr = [0] * 10\nA = list(map(int,input().split()))\nfor a in A:\n\tm = 0\n\tM = 9\n\twhile True:\n\t\tn = (m + M) // 2\n\t\tif a < R[n]:\n\t\t\tM = n\n\t\telif a >= R[n + 1]:\n\t\t\tm = n\n\t\telse:\n\t\t\tbreak\n\tr[n] += 1\ncnt = 0\nfor i in r[:-2]:\n\tif i > 0:\n\t\tcnt += 1\nif cnt == 0:\n\tmax_cnt = r[8]\n\tcnt = 1\nelse:\n\tmax_cnt = cnt + r[8]\nprint(cnt,max_cnt)"}
{"label": 64, "index": 8192, "code": "# coding: utf-8\ndef get_ln_int_inputs():\n    return list(map(int, input().split()))\n\n\ndef main():\n    input()\n    rates = get_ln_int_inputs()\n\n    colors = [0] * 8\n    free_colors = 0\n    for rate in rates:\n        if rate >= 3200:\n            free_colors += 1\n        else:\n            colors[rate // 400] = 1\n    fixed_colors = sum(colors)\n\n    print(str(max(fixed_colors, 1)) + \" \" + str(max(fixed_colors + free_colors, 1)))\n\n\nmain()"}
{"label": 64, "index": 8193, "code": "def c():\n    n = int(input())\n    a = list(map(int, input().split()))\n    # x = []\n    def set_col(rate):\n        r = rate // 400\n        r = min(8, r)\n        return r\n\n    l = list(map(set_col, a))\n    over_rate = l.count(8)\n    res = set(l)\n    if 8 in res: res.remove(8)\n\n    mi = max(1, len(res))\n    ma = len(res) + over_rate\n    print(mi, ma)\n\nc()"}
{"label": 64, "index": 8194, "code": "n=int(input())\npr=list(map(int,input().split()))\nrate_color=[]\nsuge=0\nfor i in range(n):\n    if pr[i]>=3200:\n        suge+=1\npr=[x for x in pr if x<=3199]\n\ndef cl(x):\n    if x<=399:\n        return [0]\n    elif 400<=x<=799:\n        return [1]\n    elif 800 <=x<=1199:\n        return [2]\n    elif 1200 <=x<=1599:\n        return [3]\n    elif 1600<=x<= 1999:\n        return [4]\n    elif 2000 <=x<=2399:\n        return [5]\n    elif 2400 <=x<=2799:\n        return [6]\n    elif 2800 <=x<=3199:\n        return [7]\n\nfor i in range(len(pr)):\n    x=pr[i]\n    rate_color+=cl(x)\ncolor=list(set(rate_color))\ncolor_num=len(color)\n\n\nmax_num=color_num+suge\nif color_num==0:\n    mini_num=1\nelse:\n    mini_num=color_num\nprint(mini_num,max_num)"}
{"label": 64, "index": 8195, "code": "\nN=int(input())\n\na=[int(i) for i in input().split()]\n\ncolor=[0,0,0,0,0,0,0,0]\nalles=0\n\nfor i in range(N) :\n    \n    if a[i]<400 :\n        color[0]+=1\n    elif a[i]<800 :\n        color[1]+=1\n    elif a[i]<1200 :\n        color[2]+=1\n    elif a[i]<1600 :\n        color[3]+=1\n    elif a[i]<2000 :\n        color[4]+=1\n    elif a[i]<2400 :\n        color[5]+=1\n    elif a[i]<2800 :\n        color[6]+=1\n    elif a[i]<3200 :\n        color[7]+=1\n    else :\n        alles+=1\n\n        \nwhile 0 in color :color.remove(0)\n\n\nif len(color)==0 :\n    print(int(1),\" \",len(color)+alles)\nelse :\n    print(len(color),\" \",len(color)+alles)\n\n\n\n"}
{"label": 64, "index": 8196, "code": "#! -*- coding:utf-8 -*-\nn = int(input())\na = list(map(int,input().split()))\narr = []\ncount = 0\nfor i in range(len(a)):\n    if a[i] <= 3199:\n        arr.append(a[i] // 400)\n    else:\n        count += 1\nif len(set(arr)) != 0:\n    print(len(set(arr)), len(set(arr)) + count,sep = ' ')\nelse:\n    print(1, count,sep = ' ')\n"}
{"label": 64, "index": 8197, "code": "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sun Aug 28 21:42:33 2016\n\n@author: you\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\ncolornum = 0\ncolorflag = [0,0,0,0,0,0,0,0]\nrainbow = 0\nmaxvalue = 0\nminvalue = 0\nfor i in range(n):\n    if colorflag[0] == 0 and a[i] < 400:\n        colornum = colornum + 1\n        colorflag[0] = 1\n    elif colorflag[1] == 0 and a[i] >= 400 and a[i] < 800:\n        colornum = colornum + 1\n        colorflag[1] = 1\n    elif colorflag[2] == 0 and a[i] >= 800 and a[i] < 1200:\n        colornum = colornum + 1\n        colorflag[2] = 1\n    elif colorflag[3] == 0 and a[i] >= 1200 and a[i] < 1600:\n        colornum = colornum + 1\n        colorflag[3] = 1\n    elif colorflag[4] == 0 and a[i] >= 1600 and a[i] < 2000:\n        colornum = colornum + 1\n        colorflag[4] = 1\n    elif colorflag[5] == 0 and a[i] >= 2000 and a[i] < 2400:\n        colornum = colornum + 1\n        colorflag[5] = 1\n    elif colorflag[6] == 0 and a[i] >= 2400 and a[i] < 2800:\n        colornum = colornum + 1\n        colorflag[6] = 1\n    elif colorflag[7] == 0 and a[i] >= 2800 and a[i] < 3200:\n        colornum = colornum + 1\n        colorflag[7] = 1\n    elif a[i] >= 3200:\n        rainbow = rainbow + 1\nfor j in range(8):\n    if colorflag[j] == 1:\n        minvalue = minvalue + 1\nmaxvalue = minvalue + rainbow\nif minvalue == 0:\n    minvalue = 1\n    maxvalue = rainbow\nprint(minvalue,maxvalue)\n"}
{"label": 64, "index": 8198, "code": "import sys\nfrom collections import defaultdict\n\ndef main():\n    n = int(sys.stdin.readline())\n\n    line = sys.stdin.readline()\n    lst = line.split()\n\n    cnt_dic = defaultdict(int)\n\n    #400\u3067\u5272\u3063\u305f\u3068\u304d\u306e\u5546\u304c0,1,2,3,4,5,6,7\n    #8\u4ee5\u4e0a\u306f\u3001\u81ea\u7531\u306b\u8272\u3092\u6c7a\u3081\u3089\u308c\u308b\n\n    for ch in lst:\n        rating = int(ch)\n        n = rating // 400\n        if n <= 7:\n            cnt_dic[n] += 1\n        else:\n            cnt_dic[8] += 1\n\n    ans_max = 0\n    ans_min = 0\n    for i in range(0,8):\n        if cnt_dic[i] > 0:\n            ans_max += 1\n            ans_min += 1\n\n    if cnt_dic[8] > 0:\n        ans_max += cnt_dic[8]\n        if ans_min == 0:\n            ans_min += 1\n\n    print(\"%d %d\" % (ans_min, ans_max))\n    return 0\n\nif __name__ == '__main__':\n    sys.exit(main())\n"}
{"label": 64, "index": 8199, "code": "def whichcolor(n):\n\tif n < 3200:\n\t\treturn n / 400\n\telse:\n\t\treturn 8\n\ndef countnotzero(lst):\n\tcnt = 0\n\tfor i in range(0, len(lst)):\n\t\tif lst[i] != 0:\n\t\t\tcnt += 1\n\treturn cnt\n\nn = int(raw_input())\ninpt = map(int, raw_input().split())\n\ncolor = [0, 0, 0, 0, 0, 0, 0, 0]\nalmighty = 0\n\nfor i in range(0, n):\n\tc = whichcolor(inpt[i])\n\tif c == 8:\n\t\talmighty += 1\n\telse:\n\t\tcolor[c] += 1\n\nnzro = countnotzero(color)\nmin = nzro\nif min == 0:\n\tmin = 1\nmax = nzro + almighty\nprint str(min) + ' ' + str(max)\n"}
{"label": 64, "index": 8200, "code": "n = input()\na = input()\ntmp_a = a.split()\na_list = []\no_list = []\nflag = 0\n\nfor i in range(int(n)):\n    if int(tmp_a[i]) < 400:\n        a_list.append(\"gray\")\n    elif 400 <= int(tmp_a[i]) and int(tmp_a[i]) < 800:\n        a_list.append(\"brown\")\n    elif 800 <= int(tmp_a[i]) and int(tmp_a[i]) < 1200:\n        a_list.append(\"green\")\n    elif 1200 <= int(tmp_a[i]) and int(tmp_a[i]) < 1600:\n        a_list.append(\"sky\")\n    elif 1600 <= int(tmp_a[i]) and int(tmp_a[i]) < 2000:\n        a_list.append(\"blue\")\n    elif 2000 <= int(tmp_a[i]) and int(tmp_a[i]) < 2400:\n        a_list.append(\"yellow\")\n    elif 2400 <= int(tmp_a[i]) and int(tmp_a[i]) < 2800:\n        a_list.append(\"orange\")\n    elif 2800 <= int(tmp_a[i]) and int(tmp_a[i]) < 3200:\n        a_list.append(\"red\")\n    else:\n        o_list.append(\"other\")\n\nn_other = len(o_list)\n\nif len(set(a_list))==0:\n    min_num = 1\nelse:\n    min_num = len(set(a_list))\n\nmax_num = len(set(a_list))+n_other\n#if max_num > 8:\n#    max_num = 8\n\nprint(min_num, max_num)\n"}
{"label": 64, "index": 8201, "code": "other=[0,0,0,0,0,0,0,0]\nred=0\nn=int(input())\narr=list(map(int,input().split()))\nfor a in arr:\n    if a<400:\n        other[0]=1\n    elif a<800:\n        other[1]=1\n    elif a<1200:\n        other[2]=1\n    elif a<1600:\n        other[3]=1\n    elif a<2000:\n        other[4]=1\n    elif a<2400:\n        other[5]=1\n    elif a<2800:\n        other[6]=1\n    elif a<3200:\n        other[7]=1\n    else:\n        red+=1\nif sum(other)==0:\n    print(1,red)\nelse:\n    print(sum(other),sum(other)+red)\n"}
{"label": 64, "index": 8202, "code": "N = int(input())\ndata = list(map(int,input().split()))\nbox = [0]*8\nnum = 0\nfor i in range(len(data)):\n        x = int(data[i] / 400)\n        if x < 8:\n            box[x] += 1\n        else:\n            num += 1\nanswer = len(box)   - box.count(0)\nif answer == 0:\n    print(1,num)\nelse:\n    print(answer,(answer+num))\n\n"}
{"label": 64, "index": 8203, "code": "N = int(input())\na = list(map(int, input().split(\" \")))\n\nc = [0, 0, 0, 0, 0, 0, 0, 0, 0]\n\nfor rate in a:\n    if (rate >= 1) and (400 > rate):\n        c[0] += 1\n    elif (rate >= 400) and (800 > rate):\n        c[1] += 1\n    elif (rate >= 800) and (1200 > rate):\n        c[2] += 1\n    elif (rate >= 1200) and (1600 > rate):\n        c[3] += 1\n    elif (rate >= 1600) and (2000 > rate):\n        c[4] += 1\n    elif (rate >= 2000) and (2400 > rate):\n        c[5] += 1\n    elif (rate >= 2400) and (2800 > rate):\n        c[6] += 1\n    elif (rate >= 2800) and (3200 > rate):\n        c[7] += 1\n    else:\n        c[8] += 1\n        \ncolor_rigid = len([i for i, e in enumerate(c[:8]) if e != 0])\n\nprint (\"%d %d\"%(max(1, color_rigid), color_rigid + c[8]))"}
{"label": 64, "index": 8204, "code": "N = int(input())\na = list(map(int, input().split()))\n\nrating = [0 for i in range(9)]\nfor aa in a:\n    if aa <= 3199:\n        rating[aa // 400] += 1\n    else:\n        rating[8] += 1\n\nans_min = 0\nfor i in range(8):\n    if rating[i] > 0:\n        ans_min += 1\n\nans_max = ans_min + rating[8]\n\nans_min = max(ans_min, 1)\n\nprint(ans_min, ans_max)\n"}
{"label": 64, "index": 8205, "code": "N = int(input())\n\nexist = [False for i in range(8)]\ncolorful = 0\nmin = 0\n\nrates = list(map(int, input().split(\" \")))\n\nfor rate in rates:\n    if rate >= 3200:\n        colorful += 1\n        continue\n    if not exist[int(rate/400)]:\n        exist[int(rate / 400)] = True\n        min += 1\n\nmax_color = colorful + min\nif min == 0:\n    min = 1\n\nresult = str(min) + \" \" + str(max_color)\nprint(result)\n"}
{"label": 64, "index": 8206, "code": "N =int(input())\nscores = [min(int(i)//400, 8) for i in input().split()]\nd = [0]*9\nfor s in scores:\n    d[s] = d[s] + 1\nlt3200 = [bool(i) for i in d[:8]].count(True)\nm = max(1, lt3200)\nM = lt3200+d[8]\nprint('{} {}'.format(m, M))"}
{"label": 64, "index": 8207, "code": "input()\nrates = sorted([int(x) for x in input().split()])\nleast = 0\nfor boundary in (399, 799, 1199, 1599, 1999, 2399, 2799, 3199):\n    length = len(rates)\n    while rates and (rates[0] <= boundary):\n        rates.pop(0)\n    least += length > len(rates)\nprint(\"{} {}\".format((least == 0)+least, least+len(rates)))"}
{"label": 64, "index": 8208, "code": "# - coding: utf-8 -*-\n\n# \u8272\u3092\u8fd4\u5374\ndef what_color(num):\n    if num < 400: #\u7070\u8272\n        return 0\n    elif num < 800: #\u8336\u8272\n        return 1\n    elif num <1200 : #\u7dd1\n        return 2\n    elif num < 1600: #\u6c34\u8272\n        return 3\n    elif num < 2000: #\u9752\n        return 4\n    elif num < 2400: #\u9ec4\u8272\n        return 5\n    elif num < 2800: #\u6a59\u8272\n        return 6\n    elif num < 3200: #\u8d64\u8272\n        return 7\n    else:\n        return 8\n\nn = raw_input()\na = map(int, raw_input().split())\n\ncolors = [0, 0, 0, 0, 0, 0, 0, 0]\ngod = 0\nfor rate in a:\n    color = what_color(rate)\n    if color == 8:\n        god = god+1\n    else:\n        colors[color] = 1\n\nsum_colors = sum(colors)\n\nsaidai = sum_colors + god\nsaisyo = sum_colors\nif saisyo == 0:\n    saisyo = 1\n\nprint '{0} {1}'.format(saisyo, saidai)\n"}
{"label": 64, "index": 8209, "code": "colors = {\"hai\": False,\n          \"cha\": False,\n          \"midori\": False,\n          \"mizu\": False,\n          \"ao\": False,\n          \"ki\": False,\n          \"daidai\": False,\n          \"aka\": False}\ni2c = [None]*3200\nfor i in range(3200):\n    if i < 400:\n        i2c[i] = \"hai\"\n    elif i < 800:\n        i2c[i] = \"cha\"\n    elif i < 1200:\n        i2c[i] = \"midori\"\n    elif i < 1600:\n        i2c[i] = \"mizu\"\n    elif i < 2000:\n        i2c[i] = \"ao\"\n    elif i < 2400:\n        i2c[i] = \"ki\"\n    elif i < 2800:\n        i2c[i] = \"daidai\"\n    else:\n        i2c[i] = \"aka\"\nn = int(input())\nrates = [int(i) for i in input().split()]\njiyu = 0\nfor x in rates:\n    if x >= 3200:\n        jiyu += 1\n    else:\n        colors[i2c[x]] = True\nsaisho = 0\n# print(jiyu, colors)\nfor x in colors:\n    if(colors[x]):\n        saisho += 1\nif(saisho < 1):\n    saisho = 1\n    jiyu -= 1\nprint(saisho, saisho+jiyu)\n"}
{"label": 64, "index": 8210, "code": "def c():\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = []\n    def set_col(rate):\n        if rate <= 399:\n            return '\u7070\u8272'\n        elif rate <= 799:\n            return '\u8336\u8272'\n        elif rate <= 1199:\n            return '\u7dd1\u8272'\n        elif rate <= 1599:\n            return '\u6c34\u8272'\n        elif rate <= 1999:\n            return '\u9752\u8272'\n        elif rate <= 2399:\n            return '\u9ec4\u8272'\n        elif rate <= 2799:\n            return '\u6a59\u8272'\n        elif rate <= 3199:\n            return '\u8d64\u8272'\n        else:\n            x.append(1)\n            return\n\n    res = set(map(set_col, a))\n    if None in res: res.remove(None)\n    mi = max(1, len(res))\n    ma = len(res) + len(x)\n    print(mi, ma)\n\nc()\n"}
{"label": 64, "index": 8211, "code": "import numpy as np\n \nn = int(input())\na = list(int(i) for i in input().split()) \na.sort()\nminCount = 0\nmaxCount = 0\ncount = np.zeros(9)\n\nfor i in range(n) :\n    if a[i] < 400 :\n        count[0] = count[0] + 1\n    elif a[i] < 800 :\n        count[1] = count[1] + 1\n    elif a[i] < 1200 :\n        count[2] = count[2] + 1\n    elif a[i] < 1600 :\n        count[3] = count[3] + 1\n    elif a[i] < 2000 :\n        count[4] = count[4] + 1\n    elif a[i] < 2400 :\n        count[5] = count[5] + 1\n    elif a[i] < 2800 :\n        count[6] = count[6] + 1\n    elif a[i] < 3200 :\n        count[7] = count[7] + 1\n    elif a[i] < 4801 :\n        count[8] = count[8] + 1\n\nfor i in range(8) :\n    if count[i] > 0 :\n        minCount = minCount + 1\n        maxCount = maxCount + 1\n\nmaxCount = maxCount + count[8]\nif minCount == 0 :\n    minCount = 1\n\n#print (a)\nprint (minCount, end =' ')\nprint (int(maxCount))"}
{"label": 64, "index": 8212, "code": "input();A=map(int,input().split());C=[0]*99;D=0\nfor a in A:a//=400;D+=a>7;C[a]=a<8\nE=sum(C);print(max(E,1),E+D)"}
{"label": 64, "index": 8213, "code": "N = int(input())\na = input().split()\nb = []\nfor ii in range(9):\n    b.append(0)\nfor ii in range(N):\n    if int(a[ii]) < 400:\n        b[0] = b[0] + 1\n    elif int(a[ii]) < 800:\n        b[1] = b[1] + 1\n    elif int(a[ii]) < 1200:\n        b[2] = b[2] + 1\n    elif int(a[ii]) < 1600:\n        b[3] = b[3] + 1\n    elif int(a[ii]) < 2000:\n        b[4] = b[4] + 1\n    elif int(a[ii]) < 2400:\n        b[5] = b[5] + 1\n    elif int(a[ii]) < 2800:\n        b[6] = b[6] + 1\n    elif int(a[ii]) < 3200:\n        b[7] = b[7] + 1\n    else:\n        b[8] = b[8] + 1\nmin = 0\nmax = 0\nfor ii in range(8):\n    if b[ii] > 0:\n        min = min + 1\n        max = max + 1\nmax = max + b[8]\nif min == 0 and b[8] >0:\n    min = 1\nprint(str(min) + ' ' + str(max))"}
{"label": 64, "index": 8214, "code": "N = int(input())\na = list(map(int,input().split()))\n\nGRAY = 400\nBROWN = 800\nGREEN = 1200\nCYAN = 1600\nBLUE = 2000\nYELLOW = 2400\nORANGE = 2800\nRED = 3200\n\ncolors = []\nover3200 = 0\n\nfor i in a:\n    if i < GRAY:\n        colors.append(GRAY)\n    elif i < BROWN:\n        colors.append(BROWN)\n    elif i < GREEN:\n        colors.append(GREEN)\n    elif i < CYAN:\n        colors.append(CYAN)\n    elif i < BLUE:\n        colors.append(BLUE)\n    elif i < YELLOW:\n        colors.append(YELLOW)\n    elif i < ORANGE:\n        colors.append(ORANGE)\n    elif i < RED:\n        colors.append(RED)\n    else:\n        over3200 += 1\n\ncolornum = len(set(colors))\nmincolor = max(colornum, 1)\nmaxcolor = colornum + over3200\n\nprint(' '.join([str(mincolor),str(maxcolor)]))"}
{"label": 64, "index": 8215, "code": "#!/usr/bin/python\n\nn = input()\na = [int(i) for i in input().split()]\ncolor = [0, 0, 0, 0, 0, 0, 0, 0]\ntr = 0\n\nfor i in a:\n  if i < 3200 and color[int(i/400)] == 0:\n    color[int(i / 400)] = 1\n  elif i >= 3200:\n    tr += 1\n\ncolor_kind = 0\nfor i in color:\n  if i == 1:\n    color_kind += 1\n\nif color_kind > 0:\n  print(str(color_kind) + \" \", end = '')\nelse:\n  print(str(1) + \" \", end = '')\n\nprint(str(color_kind + tr))"}
{"label": 64, "index": 8216, "code": "z = input()\ncs = [ int(x) for x in input().split() ]\nar = [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ]\nup = 0\nmn = 0\nmx = 0\n\nfor x in cs :\n  if x < 400 :\n    ar[0] = 1\n  elif x < 800 :\n    ar[1] = 1\n  elif x < 1200 :\n    ar[2] = 1\n  elif x < 1600 :\n    ar[3] = 1\n  elif x < 2000 :\n    ar[4] = 1\n  elif x < 2400 :\n    ar[5] = 1\n  elif x < 2800 :\n    ar[6] = 1\n  elif x < 3200 :\n    ar[7] = 1\n  else :\n    up = up + 1\n\nif sum(ar) == 0 :\n  mn = 1\n  mx = up\nelse :\n  mn = sum(ar)\n  mx = sum(ar) + up\n\nprint(str(mn) + \" \" + str(mx))"}
{"label": 64, "index": 8217, "code": "n = int(input())\na = map(int, input().split())\nl = [0 for i in range(9)]\n\nfor i in a:\n    if i // 400 >= 8:\n        l[8] += 1\n    else:\n        l[i // 400] = 1\nif sum(l[:8]) == 0:\n    print(1, sum(l))\nelse:\n    print(sum(l[:8]), sum(l))\n"}
{"label": 64, "index": 8218, "code": "N = int(input())\na = [int(n) for n in input().split()]\n\ncolors = [0,0,0,0,0,0,0,0]\nfree = 0\n\nfor i in a:\n    if i < 400:\n        colors[0] = 1\n    elif i < 800:\n        colors[1] = 1\n    elif i < 1200:\n        colors[2] = 1\n    elif i < 1600:\n        colors[3] = 1\n    elif i < 2000:\n        colors[4] = 1\n    elif i < 2400:\n        colors[5] = 1\n    elif i < 2800:\n        colors[6] = 1\n    elif i < 3200:\n        colors[7] = 1\n    else:\n        free += 1\n\ns = sum(colors)\n\nprint(str(max(s, 1)) + \" \" + str(s + free))\n"}
{"label": 64, "index": 8219, "code": "N=int(input())\na=list(map(int,input().split()))\nc=[0,0,0,0,0,0,0,0]\nr=0\nans=0\nfor i in a:\n    if i <400:\n        c[0] += 1\n    elif i>=400 and i<800:\n        c[1] += 1\n    elif i>=800 and i<1200:\n        c[2] += 1\n    elif i>=1200 and i<1600:\n        c[3] += 1\n    elif i>=1600 and i<2000:\n        c[4] += 1\n    elif i>=2000 and i<2400:\n        c[5] += 1\n    elif i>=2400 and i<2800:\n        c[6] += 1\n    elif i>=2800 and i<3200:\n        c[7] += 1\n    else:\n        r += 1\nfor i in c:\n    if i>0:\n        ans += 1\n\nif ans==0:\n    print(1,r)\nelse:\n    print(ans,ans+r)"}
{"label": 64, "index": 8220, "code": "N=int(input())\ngray=0\nbrown=0\ngreen=0\ncyan=0\nblue=0\nyellow=0\ndai=0\nred=0\nchan=0\nA=input().split()\nfor i in range(N):\n    a=int(A[i])\n    if a<400:\n        gray=1    \n    elif a<800:\n        brown=1\n    elif a<1200:\n        green=1   \n    elif a<1600:\n        cyan=1\n    elif a<2000:\n        blue=1\n    elif a<2400:\n        yellow=1\n    elif a<2800:\n        dai=1\n    elif a<3200:\n        red=1    \n    else:\n        chan=chan+1\nmin=gray+brown+green+cyan+blue+yellow+dai+red\n \n \nif chan==0:\n   print(str(min)+' '+str(min))\nelse:\n   max=min+chan\n   if min==0:\n      min=1\n   print(str(min)+' '+str(max))"}
{"label": 64, "index": 8221, "code": "# -*- coding: utf-8 -*-\nn = input()\na = map(int, raw_input().split())\na = sorted(a)\n\ncheck = [0]*8\nex = 0\nfor i in range(n):\n    if(a[i]<3200):\n        check[a[i]/400] = 1\n    else:\n        ex += 1\nl = max(sum(check),1)\nh = sum(check)+ex\nprint(str(l)+' '+str(h))"}
{"label": 64, "index": 8222, "code": "# -*- coding: utf-8 -*-\n\nimport sys\nimport os\n\nN = int(input())\nA = list(map(int, input().split()))\n\nB = [0] * 8\nany_color = 0\n\nfor a in A:\n    if a <= 399:\n        B[0] += 1\n    elif a <= 799:\n        B[1] += 1\n    elif a <= 1199:\n        B[2] += 1\n    elif a <= 1599:\n        B[3] += 1\n    elif a <= 1999:\n        B[4] += 1\n    elif a <= 2399:\n        B[5] += 1\n    elif a <= 2799:\n        B[6] += 1\n    elif a <= 3199:\n        B[7] += 1\n    else:\n        any_color += 1\n\nif any_color == N:\n    print(1, any_color)\nelse:\n    colored_num = len([b for b in B if b > 0])\n    zero_num = len([b for b in B if b == 0])\n    max_num = colored_num + any_color\n    print(colored_num, max_num)"}
{"label": 64, "index": 8223, "code": "N = int(input())\na = list(map(int, input().split()))\ns = []\nk = 0\nl = 0\n\nfor i in range(N):\n\tif a[i] <= 399:\n\t\ts.append('a')\n\telif a[i] <= 799:\n\t\ts.append('b')\n\telif a[i] <= 1199:\n\t\ts.append('c')\n\telif a[i] <= 1599:\n\t\ts.append('d')\n\telif a[i] <= 1999:\n\t\ts.append('e')\n\telif a[i] <= 2399:\n\t\ts.append('f')\n\telif a[i] <= 2799:\n\t\ts.append('g')\n\telif a[i] <= 3199:\n\t\ts.append('h')\n\telse:\n\t\tk += 1\n\nif s.count(\"a\") != 0:\n\tl += 1\n\nif s.count(\"b\") != 0:\n\tl += 1\n\t\nif s.count(\"c\") != 0:\n\tl += 1\n\nif s.count(\"d\") != 0:\n\tl += 1\n\nif s.count(\"e\") != 0:\n\tl += 1\n\t\nif s.count(\"f\") != 0:\n\tl += 1\n\nif s.count(\"g\") != 0:\n\tl += 1\n\nif s.count(\"h\") != 0:\n\tl += 1\n\t\nm = k + l\n\nif l == 0:\n\tprint(1,m)\nelse:\n\tprint(l,m)"}
{"label": 64, "index": 8224, "code": "\nborders = [400, 800, 1200, 1600, 2000, 2400, 2800, 3200]\ndef getcolor(rate):\n    i = 0\n    for border in borders:\n        if rate < border:\n            return i\n        i += 1\n    return -1\n\nN = int(input())\nrates = [int(x) for x in input().split(\" \")]\ncolors = [0 for _ in range(len(borders))]\ntopcoders = 0\n\nfor rate in rates:\n    c = getcolor(rate)\n    if c != -1:\n        colors[c] = 1\n    else:\n        topcoders += 1\n\ns_c = sum(colors)\nans = \"{0} {1}\".format(max(s_c, 1), s_c + topcoders)\nprint(ans)"}
{"label": 64, "index": 8225, "code": "#\u5165\u529b\nN = int(input())\na_list = []\na_list = list(map(int,input().split()))\n\n#\u5909\u6570\u3092\u7528\u610f\ng_list = [0]*9\n\n#\u30b0\u30eb\u30fc\u30d71\u306e\u8981\u7d20\u304c\u3042\u308b\u304b\u78ba\u8a8d\nfor i in range(N):\n    if 1 <= a_list[i] <= 399:\n        g_list[0] = 1\n        break\n\n#\u30b0\u30eb\u30fc\u30d72\u304b\u30898\u306e\u8981\u7d20\u304c\u3042\u308b\u304b\u78ba\u8a8d\nfor j in range(1,8):\n    for k in range(N):\n        if 400*j <= a_list[k] <= (400*(j+1)-1):\n            g_list[j] = 1\n            break\n\n#\u30b0\u30eb\u30fc\u30d71\u304b\u30898\u306e\u8981\u7d20\u6570\u3092g\u306b\u4ee3\u5165\ng = 0\nfor m in range(8):\n    g += g_list[m] \n\n#\u30b0\u30eb\u30fc\u30d79\u306e\u8981\u7d20\u304c\u3044\u304f\u3064\u3042\u308b\u304b\u6570\u3048\u308b\ng_list[8] = 0\nfor l in range(N):\n    if a_list[l] >= 3200:\n        g_list[8] += 1\n\n#\u6761\u4ef6\u5206\u5c90\u3057\u3066\u6570\u3048\u308b\nif g_list[8]==0:\n    print(g,g)\n\nelif g==0:\n    print(1,g_list[8])\n\nelse:\n    print(g,g+g_list[8])\n"}
{"label": 64, "index": 8226, "code": "# -*- coding: utf-8 -*-\nfrom collections import Counter\nN = int(input())\na = [int(n)//400 for n in input().split()]\ncounter = Counter(a)\n\ncolors = 0\nfor i in range(8):\n    if counter[i] > 0:\n        colors += 1\n\nrainbow_coder = 0\nfor i in range(8, 13):\n    rainbow_coder += counter[i]\n\nprint(\"{} {}\".format(max(1, colors), colors+rainbow_coder))\n"}
{"label": 64, "index": 8227, "code": "# coding: utf-8\nimport array, bisect, collections, copy, heapq, itertools, math, random, re, string, sys, time\n\nsys.setrecursionlimit(10 ** 7)\nINF = 10 ** 20\nMOD = 10 ** 9 + 7\n\n\ndef II(): return int(input())\ndef ILI(): return list(map(int, input().split()))\ndef IAI(LINE): return [ILI() for __ in range(LINE)]\ndef IDI(): return {key: value for key, value in ILI()}\n\n\ndef read():\n    N = II()\n    a = ILI()\n    return (N, a)\n\n\ndef solve(N, a):\n    count = [0] * 9\n    for ele in a:\n        if 1 <= ele <= 399:\n            count[0] = 1\n        elif 400 <= ele <= 799:\n            count[1] = 1\n        elif 800 <= ele <= 1199:\n            count[2] = 1\n        elif 1200 <= ele <= 1599:\n            count[3] = 1\n        elif 1600 <= ele <= 1999:\n            count[4] = 1\n        elif 2000 <= ele <= 2399:\n            count[5] = 1\n        elif 2400 <= ele <= 2799:\n            count[6] = 1\n        elif 2800 <= ele <= 3199:\n            count[7] = 1\n        elif ele >= 3200:\n            count[8] += 1\n\n    num_else = sum(count[0: 8])\n    ans_max = sum(count)\n    if num_else == 0:\n        ans_min = 1\n    else:\n        ans_min = num_else\n    \n    ans = (ans_min, ans_max)\n    return ans\n\n\ndef main():\n    params = read()\n    ans = solve(*params)\n    print(\"{} {}\".format(ans[0], ans[1]))\n\n\nif __name__ == \"__main__\":\n    main()\n"}
{"label": 64, "index": 8228, "code": "N = int(input())\na = [int(i) for i in input().split()]\n\ncolor = [0] * 8\nover = 0\n\nfor i in a:\n    if 0 <= i <= 399:\n        color[0] = 1\n    elif 400 <= i <= 799:\n        color[1] = 1\n    elif 800 <= i <= 1199:\n        color[2] = 1\n    elif 1200 <= i <= 1599:\n        color[3] = 1\n    elif 1600 <= i <= 1999:\n        color[4] = 1\n    elif 2000 <= i <= 2399:\n        color[5] = 1\n    elif 2400 <= i <= 2799:\n        color[6] = 1\n    elif 2800 <= i <= 3199:\n        color[7] = 1\n    else:\n        over += 1\n\nmini = color.count(1)\nmaxi = color.count(1)\n\nif over >= 1:\n    if mini == 0:\n        mini = 1\n\n    maxi += over\n\nprint(mini, maxi)\n"}
{"label": 64, "index": 8229, "code": "if __name__ == '__main__':\n    N = int(input())\n    a = list(map(int, input().split()))\n\n    # 0:gray 1:brown 2:green ...... 7:red\n    colors_count = [0 for i in range(8)]\n    super_count = 0\n    for score in a:\n        if int(score / 400) == 0:\n            colors_count[0] += 1\n        elif int(score / 400) == 1:\n            colors_count[1] += 1\n        elif int(score / 400) == 2:\n            colors_count[2] += 1\n        elif int(score / 400) == 3:\n            colors_count[3] += 1\n        elif int(score / 400) == 4:\n            colors_count[4] += 1\n        elif int(score / 400) == 5:\n            colors_count[5] += 1\n        elif int(score / 400) == 6:\n            colors_count[6] += 1\n        elif int(score / 400) == 7:\n            colors_count[7] += 1\n        else:\n            super_count += 1\n\n    # print(colors_count)\n\n    # colors_count \u30670\u3067\u306f\u306a\u3044\u3068\u3053\u306e\u6570\n    not_zero_count = 0\n    for num in colors_count:\n        if num != 0:\n            not_zero_count += 1\n\n    if not_zero_count == 0:\n        ans_min = 1\n        # ans_max = super_count if super_count <= 8 else 8\n        ans_max = super_count\n    else:\n        ans_min = not_zero_count\n        # ans_max = not_zero_count + super_count if (not_zero_count + super_count) <= 8 else 8\n        ans_max = not_zero_count + super_count\n\n    print(str(ans_min) + ' ' + str(ans_max))\n"}
{"label": 64, "index": 8230, "code": "n=int(input())\na=list(map(int,input().split()))\nchoice=0\ncolour={}\nfor elements in a:\n\tif elements>=1 and elements<=399:colour[1]=1\n\telif elements>=400 and elements<=799:colour[2]=2\n\telif elements>=800 and elements<=1199:colour[3]=3\n\telif elements>=1200 and elements<=1599:colour[4]=4\n\telif elements>=1600 and elements<=1999:colour[5]=5\n\telif elements>=2000 and elements<=2399:colour[6]=6\n\telif elements>=2400 and elements<=2799:colour[7]=7\n\telif elements>=2800 and elements<=3199:colour[8]=8\n\telse:choice+=1\n\nm=len(colour)\nif m==0 and choice!=0:m=1\nprint(m,len(colour)+choice)\n"}
{"label": 64, "index": 8231, "code": "memTime = int(input())\nmemLate = input().split()\nmemLate = [int(i) for i in memLate]\ncolorList = []\nmemColor = 0\nhighLate = 0\nfor color in range(memTime):\n    member = memLate[color]\n    if member // 400 >= 8:\n        highLate += 1\n    elif ((member // 400) in colorList) == False:\n        colorList.append(member // 400)\nmaxColor = len(colorList) + highLate\nminColor = len(colorList)\nif minColor == 0:\n    minColor = 1\nprint(str(minColor) + \" \" + str(maxColor))"}
{"label": 64, "index": 8232, "code": "n = input()\na = list(map(int, input().split()))\n\nc = [0] * 8\nmax = 0\nfor i in a:\n    if i >= 3200:\n        max += 1\n    else:\n        c[i // 400] = 1\n\nmin = 0\nfor i in range(8):\n    if c[i] != 0:\n        min += 1\n\nmax += min\nif min == 0:\n    print(1, max)\nelse:\n    print(min, max)"}
{"label": 64, "index": 8233, "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\nfrom collections import deque\n\nn = int(sys.stdin.readline())\nai = list(map(int, sys.stdin.readline().split()))\n\no = [0] * 9\n\nfor a in ai:\n\tif a < 400:\n\t\to[0] += 1\n\telif a < 800:\n\t\to[1] += 1\n\telif a < 1200:\n\t\to[2] += 1\n\telif a < 1600:\n\t\to[3] += 1\n\telif a < 2000:\n\t\to[4] += 1\n\telif a < 2400:\n\t\to[5] += 1\n\telif a < 2800:\n\t\to[6] += 1\n\telif a < 3200:\n\t\to[7] += 1\n\telse:\n\t\to[8] += 1\n\non = 0\nfor i in range(0, 8):\n\tif o[i] > 0:\n\t\ton += 1\n\nmin = on\nif min == 0:\n\tmin = 1\n\non += o[8]\n\nmax = on\n\nprint(str(min) + ' ' + str(max))\n"}
{"label": 64, "index": 8234, "code": "def get_color(rating):\n    return rating / 400\n\nN = input()\na = map(int, raw_input().split())\ncolors = [get_color(a[i]) for i in range(N)]\n\nS, cnt = set(), 0\nfor c in colors:\n    if c < 8:\n        S.add(c)\n    else:\n        cnt += 1\nprint max(len(S), 1), (len(S) + cnt)"}
{"label": 64, "index": 8235, "code": "N=int(input())\nnums=input().split()\nr1=0\nr2=0\nr3=0\nr4=0\nr5=0\nr6=0\nr7=0\nr8=0\nr9=0\nfor n in range(0,N):\n    if 1<=int(nums[n])<=399:\n        r1=1\n    if 400<=int(nums[n])<=799:\n        r2=1\n    if 800<=int(nums[n])<=1199:\n        r3=1\n    if 1200<=int(nums[n])<=1599:\n        r4=1\n    if 1600<=int(nums[n])<=1999:\n        r5=1\n    if 2000<=int(nums[n])<=2399:\n        r6=1\n    if 2400<=int(nums[n])<=2799:\n        r7=1\n    if 2800<=int(nums[n])<=3199:\n        r8=1\n    if 3200<=int(nums[n]):\n        r9=r9+1\n\nif r1==r2==r3==r4==r5==r6==r7==r8==0 :\n    if 1<=r9<=8:\n        p1=r9\n        p2=1\n    else:\n        p1=8\n        p2=1\nelse:\n    p1=r1+r2+r3+r4+r5+r6+r7+r8+r9\n    p2=r1+r2+r3+r4+r5+r6+r7+r8\n\nprint(p2,p1)"}
{"label": 64, "index": 8236, "code": "N=int(raw_input())\na=map(int,raw_input().split())\nc=[0,0,0,0,0,0,0,0]\nm=0\nfor i in range(N):\n    b =a[i]/ 400\n    if b < 8:\n        c[b]+=1\n    else:\n        m+=1\n\n\nans=0\nfor i in c:\n    if i > 0:\n        ans+=1\n\nmi=ans\nif mi==0:\n    mi=1\nma=ans+m\nprint mi,ma"}
{"label": 64, "index": 8237, "code": "# -*- coding: utf-8 -*-\n#\u30ec\u30fc\u30c8 1-399\uff1a\u7070\u8272 :gray\n#\u30ec\u30fc\u30c8 400-799\uff1a\u8336\u8272 :brown\n#\u30ec\u30fc\u30c8 800-1199\uff1a\u7dd1\u8272 : green\n#\u30ec\u30fc\u30c8 1200-1599\uff1a\u6c34\u8272 :skyblue\n#\u30ec\u30fc\u30c8 1600-1999\uff1a\u9752\u8272 :blue\n#\u30ec\u30fc\u30c8 2000-2399\uff1a\u9ec4\u8272 :yellow\n#\u30ec\u30fc\u30c8 2400-2799\uff1a\u6a59\u8272 :orange\n#\u30ec\u30fc\u30c8 2800-3199\uff1a\u8d64\u8272 :red\n\nx = int(input())\ny = input().split()\n\ngray = 0\nbrown = 0\ngreen = 0\nskyblue = 0\nblue = 0\nyellow = 0\norange = 0\nred = 0\nother = 0\n\nfor i in range(x):\n    z = int(y[i]) \n    if z < 400:\n       gray = 1 \n    elif z < 800:\n        brown = 1\n    elif z < 1200:\n        green = 1\n    elif z < 1600:\n        skyblue = 1\n    elif z < 2000:\n        blue = 1\n    elif z < 2400:\n        yellow = 1\n    elif z < 2800:\n        orange = 1\n    elif z < 3200:\n        red = 1\n    else:\n        other = other + 1\n\nif other >= 1:\n    ans_max = gray + brown + green + skyblue + blue + yellow + orange + red + other\n    ans_min = gray + brown + green + skyblue + blue + yellow + orange + red + 0\n    \n    if ans_min == 0:\n        ans_min = 1\n    \n    print(str(ans_min) + \" \" + str(ans_max))\n\nelse:\n    ans = gray + brown + green + skyblue + blue + yellow + orange + red + other\n    \n    print(str(ans) + \" \" + str(ans))\n    \n"}
{"label": 64, "index": 8238, "code": "# -*- coding:utf-8 -*-\nN = int(input())\na = list(map(int, input().split()))\nrate = [ 0 for tmp in range(9) ]\nfactor = 0\nempty = 0\nfor tmp in range(N):\n    if 1 <= a[tmp] and  a[tmp] <= 399:\n        rate[0] += 1\n    elif 400 <= a[tmp] and a[tmp] <= 799:\n        rate[1] += 1\n    elif 800 <= a[tmp] and a[tmp] <= 1199:\n        rate[2] += 1\n    elif 1200 <= a[tmp] and a[tmp] <= 1599:\n        rate[3] += 1\n    elif 1600 <= a[tmp] and a[tmp] <= 1999:\n        rate[4] += 1\n    elif 2000 <= a[tmp] and a[tmp]<= 2399:\n        rate[5] += 1\n    elif 2400 <= a[tmp] and a[tmp] <= 2799:\n        rate[6] += 1\n    elif 2800 <= a[tmp] and a[tmp] <= 3199:\n        rate[7] += 1\n    else:\n        rate[8] += 1\nfor tmp in range(len(rate)-1):\n    if rate[tmp] > 0:\n        factor += 1\n    else:\n        empty += 1\nif rate[8] > 0:\n    if factor == 0:\n        print(\"1 \"+str(rate[8]))\n    else:\n        print(str(factor)+' '+str(factor+rate[8]))\nelse:\n    print(str(factor)+' '+str(factor)) "}
{"label": 64, "index": 8239, "code": "def c():\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = list(map(lambda i: min(8, i//400), a))\n    over_rate = l.count(8)\n    res = set(l)\n    if 8 in res: res.remove(8)\n\n    mi = max(1, len(res))\n    ma = len(res) + over_rate\n    print(mi, ma)\n\nc()"}
{"label": 64, "index": 8240, "code": "import math\n\nranks = [False for i in range(8)]\nhighs = 0\nn = int(input())\ninps = [int(i) for i in input().split()]\nhighs = len([i for i in inps if i > 3199])\ninps = [i for i in inps if i <= 3199]\nfor i in inps:\n    if i >= 1 and i <= 399:\n        ranks[0] = True\n    elif i >= 400 and i <= 799:\n        ranks[1] = True\n    elif i >= 800 and i <= 1199:\n        ranks[2] = True\n    elif i >= 1200 and i <= 1599:\n        ranks[3] = True\n    elif i >= 1600 and i <= 1999:\n        ranks[4] = True\n    elif i >= 2000 and i <= 2399:\n        ranks[5] = True\n    elif i >= 2400 and i <= 2799:\n        ranks[6] = True\n    elif i >= 2800 and i <= 3199:\n        ranks[7] = True\nlows = len([i for i in ranks if i == True])\n\nminimum = max(lows, 1)\nmaximum = lows + highs\n\nprint(minimum, maximum)\n"}
{"label": 64, "index": 8241, "code": "N = int(raw_input())\nA = map(int, raw_input().split())\n\nX = [0 for _ in range(13)]\nfor a in A:\n    X[a / 400] += 1\ncnt = 0\nfor x in X[:8]:\n    if x != 0:\n        cnt += 1\ncnt2 = sum(X[8:])\n\nprint max(1, cnt), cnt + cnt2\n"}
{"label": 64, "index": 8242, "code": "from collections import defaultdict\n\n\ndef main():\n    N = int(input())\n    a_list = list(map(int, input().split()))\n    color_set = set()\n    free = 0\n    for a in a_list:\n        for i, (s, e) in enumerate([(1, 399), (400, 799), (800, 1199), (1200, 1599), (1600, 1999), (2000, 2399), (2400, 2799), (2800, 3199)]):\n            if s <= a <= e:\n                color_set.add(i)\n                break\n        else:\n            free += 1\n    print(max(1, len(color_set)), len(color_set) + free)\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 64, "index": 8243, "code": "\n    #\u30ec\u30fc\u30c8 1-399\uff1a\u7070\u8272\n    #\u30ec\u30fc\u30c8 400-799\uff1a\u8336\u8272\n    #\u30ec\u30fc\u30c8 800-1199\uff1a\u7dd1\u8272\n    #\u30ec\u30fc\u30c8 1200-1599\uff1a\u6c34\u8272\n    #\u30ec\u30fc\u30c8 1600-1999\uff1a\u9752\u8272\n    #\u30ec\u30fc\u30c8 2000-2399\uff1a\u9ec4\u8272\n    #\u30ec\u30fc\u30c8 2400-2799\uff1a\u6a59\u8272\n    #\u30ec\u30fc\u30c8 2800-3199\uff1a\u8d64\u8272\n\nfrom collections import Counter\nn = input()\nc = Counter([min(int(i) // 400, 8) for i in input().split()])\nans = 0\nfor i in range(8):\n    ans += (1 if c[i] > 0 else 0)\nprint(max(ans, 1), ans + c[8])"}
{"label": 64, "index": 8244, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport array\nfrom bisect import *\nfrom collections import *\nimport fractions\nimport heapq \nfrom itertools import *\nimport math\nimport re\nimport string\n\n_ = input()\nAs = list(map(int, input().split()))\nbins = [0] * 9\ntable = [400, 800, 1200, 1600, 2000, 2400, 2800, 3200, 10000]\nfor a in As:\n    for i, t in enumerate(table):\n        if a < t:\n            bins[i] += 1\n            break\nmn = sum(1 for x in bins[:-1] if x > 0)\nif mn == 0:\n    mn = 1\n    mx = bins[-1]\nelse:\n    mx = mn + bins[-1]\nprint(mn, mx)\n"}
{"label": 64, "index": 8245, "code": "N = input()\na = []\na.append(map(int, raw_input().split()))\n\na=a[0]\n\nc=[0,0,0,0,0,0,0,0]\n\nfree=0\n\nfor i in a:\n    if 1<=i and i<=399:\n        c[0]=1\n    elif 400<=i and i<=799:\n        c[1]=1\n    elif 800<=i and i<=1199:\n        c[2]=1\n    elif 1200<=i and i<=1599:\n        c[3]=1\n    elif 1600<=i and i<=1999:\n        c[4]=1\n    elif 2000<=i and i<=2399:\n        c[5]=1\n    elif 2400<=i and i<=2799:\n        c[6]=1\n    elif 2800<=i and i<=3199:\n        c[7]=1\n    elif 3200<=i:\n        free+=1\n\nma=sum(c)+free\n\n\n\nmi=sum(c)\nif mi<1:\n    mi=1\n\n\nprint(str(mi) + \" \" + str(ma))"}
{"label": 64, "index": 8246, "code": "import numpy as np\n\nn = int(input())\na_str = input().split()\na_num = [int(a) for a in a_str]\na_array = np.array(a_num)\n\nrate_list = [1,400,800,1200,1600,2000,2400,2800,3200]\n\ncount = 0\n\nfor i in range(8):\n    if len(a_array[np.where((a_array>=rate_list[i])&(a_array<rate_list[i+1]))]):\n        count += 1\n\nif count == 0:\n    min_count = 1\nelse:\n    min_count = count\n\ncount += len(a_array[a_array>=rate_list[8]])\nmax_count = count\n\nprint(str(min_count)+\" \"+str(max_count))"}
{"label": 64, "index": 8247, "code": "import random\nN = int(input())\na = set(n//400+1 if n < 3200 else random.random() for n in (map(int, input().split())),)\nmin_c = len([1 for n in a if n >= 1]) or 1\nmax_c = len(a)\nprint(min_c, max_c)"}
{"label": 64, "index": 8248, "code": "N=int(raw_input())\na=map(int,raw_input().split(' '))\n\ncolor=[0]*8\nfree=0\n\nfor ai in a:\n    if ai<400:\n        color[0]+=1\n    elif ai<800:\n        color[1]+=1\n    elif ai<1200:\n        color[2]+=1\n    elif ai<1600:\n        color[3]+=1\n    elif ai<2000:\n        color[4]+=1\n    elif ai<2400:\n        color[5]+=1\n    elif ai<2800:\n        color[6]+=1\n    elif ai<3200:\n        color[7]+=1\n    else:\n        free+=1\n\nc=len(color)-color.count(0)\n\nm=c+free\n\nif c==0:\n    c=1\n\nprint c,m\n"}
{"label": 64, "index": 8249, "code": "N = int(input())\nA = list(map(int,input().split()))\n\nsep = 400\nflag = [False]*8\nc = 0\nfor a in A:\n    s = a//sep\n    if s >= 8:\n        c += 1\n    else:\n        flag[s] = True\n\nmin = flag.count(True)\nmax = min + c\nif min == 0:\n    min = 1\nprint(\"{0} {1}\".format(min,max))\n\n"}
{"label": 64, "index": 8250, "code": "N=input()\nnlist= [int(l) for l in raw_input().split(' ')]\n\nrate= [0,0,0,0,0,0,0,0]\nup = 0\nfor n in nlist:\n\tif n/400>=8:\n\t\tup += 1\n\telse:\n\t\trate[n/400]=1\n\nprint max(1,sum(rate)),sum(rate)+up"}
{"label": 64, "index": 8251, "code": "n = int(input())\na = list(map(int, input().split()))\na.sort()\ncnt = [0 for i in range(100)]\nfor i in range(n):\n    cnt[a[i]//400] += 1\nmi = max(1, sum([1 if cnt[i]>0 else 0 for i in range(8)]))\nma = sum([1 if cnt[i]>0 else 0 for i in range(8)]) + sum(cnt[8:])\nprint(mi, ma)\n"}
{"label": 64, "index": 8252, "code": "N = int(input())\na = list(map(int, input().split()))\ngray = 0\nbrown = 0\ngreen = 0\nsky = 0\nblue = 0\nyellow = 0\norange = 0\nred = 0\ngod = 0\nfor i in range(N):\n    if a[i] < 400:\n        gray = 1\n    elif a[i] < 800:\n        brown = 1\n    elif a[i] < 1200:\n        green = 1\n    elif a[i] < 1600:\n        sky = 1\n    elif a[i] < 2000:\n        blue = 1\n    elif a[i] < 2400:\n        yellow = 1\n    elif a[i] < 2800:\n        orange = 1\n    elif a[i] < 3200:\n        red = 1\n    else:\n        god+=1\nzako = gray + brown + green + sky + blue + yellow + orange + red\nif god > 0 and zako == 0:\n    color_max = god\n    color_min = 1\nelif god > 0 and zako != 0:\n    color_max = zako + god\n    color_min = zako\nelse:\n    color_max = zako\n    color_min = zako\nprint(color_min, color_max)"}
{"label": 64, "index": 8253, "code": "N = int(input())\nA = [int(_) for _ in input().split()]\n\n\ndef color(n):\n    if 1 <= n <= 399:\n        return 0\n    elif 400 <= n <= 799:\n        return 1\n    elif 800 <= n <= 1199:\n        return 2\n    elif 1200 <= n <= 1599:\n        return 3\n    elif 1600 <= n <= 1999:\n        return 4\n    elif 2000 <= n <= 2399:\n        return 5\n    elif 2400 <= n <= 2799:\n        return 6\n    elif 2800 <= n <= 3199:\n        return 7\n    else:\n        return 8\n\n\nx = [color(a) for a in A]\ndora = x.count(8)\nunique = len(set(x)) if dora == 0 else len(set(x)) - 1\nmin_ = max(1, unique)\nmax_ = unique + dora\nprint(min_, max_)\n"}
{"label": 64, "index": 8254, "code": "import numpy as np\nN = int(input())\na = [int(_) for _ in input().split()]\na = np.array(a)\na = np.sort(a)\nmin = 0\nmax = 100\n\nfor i in range(8):\n    set_1 = set(np.where(i*400<=a)[0])\n    set_2 = set(np.where(a<(i+1)*400)[0])\n    match = list(set_1 & set_2)\n    if len(match)>0:\n        min+=1\nif min==0:\n    min=1\n    max = N\nelse:\n    if len(np.where(a>=3200)[0])==0:\n        max = min\n    else:\n        max = min + len(np.where(a>=3200)[0])\nprint (min, max)"}
{"label": 64, "index": 8255, "code": "\nN = int(input())\na = [int(e) for e in input().split()]\n\ndef colors(score):\n    if score < 400:\n        return 1\n    elif score < 800:\n        return 2\n    elif score < 1200:\n        return 3\n    elif score < 1600:\n        return 4\n    elif score < 2000:\n        return 5\n    elif score < 2400:\n        return 6\n    elif score < 2800:\n        return 7\n    elif score < 3200:\n        return 8\n    elif score >= 3200:\n        return 0\n\nary = [colors(s) for s in a]\nary_n = set(ary)\n\nif not 0 in ary_n:\n    n_min = len(ary_n)\n    n_max = len(ary_n)\nelse:\n    n_zero = sum([e == 0 for e in ary])\n    n_min = len(ary_n) - 1 if len(ary_n) > 1 else 1\n    n_max = len(ary_n) + n_zero - 1\n\nprint(n_min, n_max)\n"}
{"label": 64, "index": 8256, "code": "N = input()\na = map(int, raw_input().split())\n\nkinds = [0 for i in range(8)]\nwild = 0\nfor v in a:\n    if v < 400: kinds[0]= 1\n    elif v < 800: kinds[1]= 1\n    elif v < 1200: kinds[2]= 1\n    elif v < 1600: kinds[3]= 1\n    elif v < 2000: kinds[4]= 1\n    elif v < 2400: kinds[5]= 1\n    elif v < 2800: kinds[6]= 1\n    elif v < 3200: kinds[7]= 1\n    else:\n        wild += 1\n\nmn = sum(kinds)\nif mn == 0:\n    mn = 1\n    mx = wild\nelse:\n    mx = mn + wild\nprint mn,mx"}
{"label": 64, "index": 8257, "code": "N = input()\na = map(int, raw_input().split())\n\nmemo = [0 for i in range(9)]\nfor i in a:\n\tif(i < 3200):\n\t\tmemo[i / 400] = memo[i / 400] + 1\n\telse:\n\t\tmemo[8] = memo[8] + 1;\n\ncnt = 0\nfor i in range(8):\n\tif memo[i] > 0:\n\t\tcnt = cnt + 1;\nfree = memo[8]\n\nif cnt == 0:\n\tprint 1, memo[8]\nelse:\n\tprint cnt, memo[8] + cnt"}
{"label": 64, "index": 8258, "code": "N = int(input())\na = list(map(int,input().split()))\na.sort()\nb  = [[],[],[],[],[],[],[],[],[]]\ndef clsearch():\n    while(len(a)):\n        apop = a.pop(0)\n        if(apop<400):\n            b[0].append(apop)\n        elif(apop<800):\n            b[1].append(apop)\n        elif(apop<1200):\n            b[2].append(apop)\n        elif(apop<1600):\n            b[3].append(apop)\n        elif(apop<2000):\n            b[4].append(apop)\n        elif(apop<2400):\n            b[5].append(apop)\n        elif(apop<2800):\n            b[6].append(apop)     \n        elif(apop<3200):\n            b[7].append(apop)\n        else:\n            b[8].append(apop)\n    return\nclsearch()\nsum = 0\nfor i in range(len(b)-1):\n    if(len(b[i])!=0):\n        sum += 1\nprint((sum if sum != 0 else 1),sum+len(b[8]))\n"}
{"label": 64, "index": 8259, "code": "n = int(input())\na = [int(x)//400 for x in input().split()]\n\nb = 0\nc = set()\nfor i in range(n):\n    if a[i] > 7:\n        b += 1\n    else:\n        c.add(a[i])\n\nprint(max(1, len(c)), len(c)+b)\n"}
{"label": 64, "index": 8260, "code": "def main():\n    N = int(input().strip())\n\n    n_399 = 0\n    n_799 = 0\n    n_1199 = 0\n    n_1599 = 0\n    n_1999 = 0\n    n_2399 = 0\n    n_2799 = 0\n    n_3199 = 0\n    n_free = 0\n    rates = list(map(int, input().strip().split()))\n    for r in rates:\n        if r <= 399:\n            n_399 = 1\n        elif r <= 799:\n            n_799 = 1\n        elif r <= 1199:\n            n_1199 = 1\n        elif r <= 1599:\n            n_1599 = 1\n        elif r <= 1999:\n            n_1999 = 1\n        elif r <= 2399:\n            n_2399 = 1\n        elif r <= 2799:\n            n_2799 = 1\n        elif r <= 3199:\n            n_3199 = 1\n        else:\n            n_free += 1\n\n    n_less_3200 = n_399 + n_799 + n_1199 + \\\n        n_1599 + n_1999 + n_2399 + n_2799 + n_3199\n    n_rest = N - n_less_3200\n\n    n_min = n_less_3200\n    if n_less_3200 == 0 and n_free > 0:\n        n_min = 1\n\n    n_max = n_less_3200 + n_free\n    if n_less_3200 + n_free >= N:\n        n_max = N\n\n    print(n_min, n_max)\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 64, "index": 8261, "code": "n = input()\na = list(map(int, input().split()))\n\nc = [0, 0, 0, 0, 0, 0, 0, 0]\nmax = 0\nfor i in a:\n    if i <= 399:\n        c[0] += 1\n    elif i <= 799:\n        c[1] += 1\n    elif i <= 1199:\n        c[2] += 1\n    elif i <= 1599:\n        c[3] += 1\n    elif i <= 1999:\n        c[4] += 1\n    elif i <= 2399:\n        c[5] += 1\n    elif i <= 2799:\n        c[6] += 1\n    elif i <= 3199:\n        c[7] += 1\n    else:\n        max += 1\n\nmin = 0\nfor i in range(8):\n    if c[i] != 0:\n        min += 1\n\nmax += min\nif min == 0:\n    print(1, max)\nelse:\n    print(min, max)"}
{"label": 64, "index": 8262, "code": "# -* encode: utf-8 *-\n\nN = int(input())\nrates = [int(x) for x in input().split()]\n\nrates.sort()\nuppers = [399, 799, 1199, 1599, 1999, 2399, 2799, 3199, 4800]\naccum = list()\ncounts = list()\n\nfor upper in uppers:\n    accum.append(len([x for x in rates if x <= upper]))\n\ncounts.append(accum[0])\nfor i in range(1, 9):\n    counts.append(accum[i] - accum[i-1])\n\n_least = sum([1 for count in counts[:-1] if count > 0])\nmax_scorerer = counts[-1]\n\nif _least == 0:\n    least = 1\n    most = max_scorerer\nelse:\n    least = _least\n    most = least + max_scorerer\n\nprint(\"{} {}\".format(least, most))"}
{"label": 64, "index": 8263, "code": "N = int(raw_input())\na = map(int, raw_input().split())\na.sort()\n\nrank = [False] * 8\n\ncount = 0\nfor i in range(N):\n  if 3200 <= a[i]:\n    count += 1\n  else:\n    rank[int(a[i]/400)] = True\n\nminimum = rank.count(True)\nmaximum = minimum + count\nif minimum == 0:\n  minimum = 1\nprint minimum, maximum"}
{"label": 64, "index": 8264, "code": "#coding: utf-8\nN = int(raw_input())\nrates = map(int, raw_input().split(' '))\n\ncolors = [0 for _ in range(8)]\ntop = 0\nfor r in rates:\n\tmod = r / 400\n\tif mod < 8:\n\t\tcolors[mod] = 1\n\telse:\n\t\ttop += 1\t\n\nminnum = sum(colors)\nmaxnum = minnum + top\nif minnum == 0:\n\tminnum = 1\nprint '{} {}'.format(minnum, maxnum)"}
{"label": 64, "index": 8265, "code": "N = input()\na = input().split()\nscores = [0,0,0,0,0,0,0,0]\nscore8 = 0\nfor i in a:\n    check = int(int(i) / 400)\n    if check > 7:\n        score8 += 1\n    else:\n        scores[check] = 1\nscore1to7 = sum(scores)\nsaidai = score1to7 + score8\nif score1to7 < 1:\n    saisho = 1\nelse:\n    saisho = score1to7\nprint(str(saisho) + \" \" + str(saidai))"}
{"label": 64, "index": 8266, "code": "n = int(input())\naa = [min(8, int(a) // 400) for a in input().split()]\nover3200 = aa.count(8)\ncolors = len(set(aa))\n_min = colors - 1 if over3200 and n > over3200 else colors\n_max = colors + over3200 - 1 if over3200 else colors\nprint(_min, _max)\n"}
{"label": 64, "index": 8267, "code": "n = int(input())\na = list(map(int, input().split()))\nst = [0] * 10\nextra = 0\nfor x in a:\n    if x >= 3200:\n        extra += 1\n        continue\n    for i in range(0, 2801, 400):\n        if i <= x <= i + 399:\n            st[i // 400] = 1\n            break\nans = sum(st)\nprint(max(ans, 1), ans + extra)\n"}
{"label": 64, "index": 8268, "code": "import numpy as np\nN = int(input())\na = np.array(list(map(int, input().split())))\n\nc = np.array([0] * 8)\n\na //= 400\n\nfor i in range(8):\n    num = np.sum(a == i)\n    c[i] = num\nred = np.sum(a >= 8)\n\n\nmincol = np.sum(c != 0)\nmaxcol = mincol + red\nif mincol == 0:\n    mincol = 1\n\nprint(mincol, maxcol)\n\n\n\n    \n"}
{"label": 64, "index": 8269, "code": "n = input()\na = map(int, raw_input().split())\ncolor = [0 for _ in range(9)]\nfor item in a:\n    i = item / 400\n    i = min(i, 8)\n    color[i] += 1\n\nans = 0\nfor num in color[0:8]:\n    if num != 0:\n        ans += 1\n\nmin_ans = max(ans, 1)\nmax_ans = ans + color[8]\n#max_ans = min(max_ans, 8)\n\nprint min_ans, max_ans\n"}
{"label": 64, "index": 8270, "code": "from sys import stdin\nn = int(stdin.readline())\na  = map(int,stdin.readline().split())\nans = set()\nco = 0\nfor i in a:\n if i < 3200:\n  ans.add(i/400)\n else:\n  co += 1\nprint  max(1,len(ans)),len(ans) + co"}
{"label": 64, "index": 8271, "code": "n = int(input())\na_list = [int(i) for i in input().split()]\n\ncolor_list = [0, 0, 0, 0, 0, 0, 0, 0]\nover_3200 = 0\n\nfor a in a_list:\n    tmp = a // 400\n    if tmp < 8:\n        color_list[tmp] += 1\n    else:\n        over_3200 += 1\n\nnum_colors = 0\nfor c in color_list:\n    if c > 0:\n        num_colors += 1\n\nmin_num = max(1, num_colors)\nmax_num = num_colors + over_3200\nprint(\"{0} {1}\".format(min_num, max_num))"}
{"label": 64, "index": 8272, "code": "N = int(input())\nA = list(map(int, input().split()))\nd = {}\n\nfor a in A:\n    m = a // 400\n    if m >= 8:\n        m = 8\n    d[m] = d.get(m, 0) + 1\n\nminans = 0\nfor i in range(8):\n    if i in d:\n        minans += 1\nif minans == 0:\n    print(\"{} {}\".format(1, N))\n    exit()\nmaxans = minans + d.get(8, 0)\nprint(\"{} {}\".format(minans, maxans))\n"}
{"label": 64, "index": 8273, "code": "N = int(input())\nA = [int(i) for i in input().split()]\n\nflg = [0,0,0,0,0,0,0,0,0]\nfor i in range(N):\n    if   A[i] <  400: flg[0] = 1\n    elif A[i] <  800: flg[1] = 1\n    elif A[i] < 1200: flg[2] = 1\n    elif A[i] < 1600: flg[3] = 1\n    elif A[i] < 2000: flg[4] = 1\n    elif A[i] < 2400: flg[5] = 1\n    elif A[i] < 2800: flg[6] = 1\n    elif A[i] < 3200: flg[7] = 1\n    else:             flg[8] += 1\n\ncolmin = max(sum(flg[0:8]), 1)\ncolmax = sum(flg)\nprint(colmin, colmax)\n"}
{"label": 64, "index": 8274, "code": "#! /usr/bin/env python3\n\nn = int(input())\na = list(map(int, input().split()))\ns = set()\nfor i in a:\n    if 1 <= i <= 399 : s.add(1)\n    if 400 <= i <= 799 : s.add(2)\n    if 800 <= i <= 1199 : s.add(3)\n    if 1200 <= i <= 1599 : s.add(4)\n    if 1600 <= i <= 1999 : s.add(5)\n    if 2000 <= i <= 2399 : s.add(6)\n    if 2400 <= i <= 2799 : s.add(7)\n    if 2800 <= i : s.add(8)\nr = len([1 for x in a if 2800 <= x <= 3199]) < 1\nprint(len(s), len(s) + max((len([1 for x in a if x > 3199]) - r, 0)))"}
{"label": 64, "index": 8275, "code": "N=int(input())\na=[int(i) for i in input().split()]\nb,c,d,e,f,g,h,j,k=0,0,0,0,0,0,0,0,0\nfor i in range(N):\n if (a[i]<400):\n  b=1\n elif (400<=a[i]<800):\n  c=1\n elif (800<=a[i]<1200):\n  d=1\n elif (1200<=a[i]<1600):\n  e=1\n elif (1600<=a[i]<2000):\n  f=1\n elif (2000<=a[i]<2400):\n  g=1\n elif (2400<=a[i]<2800):\n  h=1\n elif (2800<=a[i]<3200):\n  j=1\n else:\n  k += 1\nmin=b+c+d+e+f+g+h+j\nmax=min+k\nif min==0:\n min=1\nprint (min,max)"}
{"label": 64, "index": 8276, "code": "def get_color_index(rate):\n    if 1 <= rate and rate <= 399:\n        return 0\n    elif 400 <= rate and rate <= 799:\n        return 1\n    elif 800 <= rate and rate <= 1199:\n        return 2\n    elif 1200 <= rate and rate <= 1599:\n        return 3\n    elif 1600 <= rate and rate <= 1999:\n        return 4\n    elif 2000 <= rate and rate <= 2399:\n        return 5\n    elif 2400 <= rate and rate <= 2799:\n        return 6\n    elif 2800 <= rate and rate <= 3199:\n        return 7\n    else:\n        return -1\n\nN = int(input())\na = list(map(int, input().split()))\n\ncolors = []\nwildcard_count = 0\n\nfor i in range(N):\n    c = get_color_index(a[i])\n    if c == -1:\n        wildcard_count += 1\n    elif c not in colors:\n        colors.append(c)\n\nc_min = max(len(colors), 1)\nc_max = len(colors) + wildcard_count\n\nprint(str(c_min) + ' ' + str(c_max))"}
{"label": 64, "index": 8277, "code": "n = int(input())\na = [ int(i) for i in input().split() ]\nc = [ 0 for _ in range(8)]\ncou = 0\n\nfor i in range(n):\n    keep=a[i]\n\n    if 1<= keep <=399:\n        c[0]=1\n    elif 400<= keep <=799:\n        c[1]=1\n    elif 800<= keep <=1199:\n        c[2]=1\n    elif 1200<= keep <=1599:\n        c[3]=1\n    elif 1600<= keep <=1999:\n        c[4]=1\n    elif 2000<= keep <=2399:\n        c[5]=1\n    elif 2400<= keep <=2799:\n        c[6]=1\n    elif 2800<= keep <=3199:\n        c[7]=1\n    else:\n        cou += 1\n\nMAX = MIN = c.count(1)\nMAX += cou\nMIN = max(MIN,1)\n\n\nprint(MIN,MAX)"}
{"label": 64, "index": 8278, "code": "# -*- coding:utf-8 -*-\n\nN = int(input())\na = input().split()\n\ngray = 0\nbrown = 0\ngreen = 0\nsky = 0\nblue = 0\nyellow = 0\norange = 0\nred = 0\nother = 0\nfor i in range(N):\n\ta[i] = int(a[i])\n\n\tif 1 <= a[i] and a[i] <= 399:\n\t\tgray = 1\n\telif 400 <= a[i] and a[i] <= 799:\n\t\tbrown = 1\n\telif 800 <= a[i] and a[i] <= 1199:\n\t\tgreen = 1\n\telif 1200 <= a[i] and a[i] <= 1599:\n\t\tsky = 1\n\telif 1600 <= a[i] and a[i] <= 1999:\n\t\tblue = 1\n\telif 2000 <= a[i] and a[i] <= 2399:\n\t\tyellow = 1\n\telif 2400 <= a[i] and a[i] <= 2799:\n\t\torange = 1\n\telif 2800 <= a[i] and a[i] <= 3199:\n\t\tred = 1\n\telif 3200 <= a[i]:\n\t\tother = other + 1\n\nsum = gray + brown + green + sky + blue + yellow + orange + red\n\nif sum > 1:\n\tmin = sum\nelse:\n\tmin = 1\n\nmax = sum + other\n\nprint(str(min) + \" \" + str(max))\n\t\t"}
{"label": 64, "index": 8279, "code": "N = int(input())\na = [int(i) for i in input().split()]\nhai,cha,mid,miz,ao,ki,dai,aka,zen = 0,0,0,0,0,0,0,0,0\nfor i in range(N):\n    if a[i] < 400:\n        hai = 1\n    elif a[i] < 800:\n        cha = 1\n    elif a[i] < 1200:\n        mid = 1\n    elif a[i] < 1600:\n        miz = 1\n    elif a[i] < 2000:\n        ao = 1\n    elif a[i] < 2400:\n        ki = 1\n    elif a[i] < 2800:\n        dai = 1\n    elif a[i] < 3200:\n        aka = 1\n    else:\n        zen += 1\nMin = hai+cha+mid+miz+ao+ki+dai+aka\nMax = Min+zen\nif Min == 0:\n    Min = 1\nprint(Min,Max)\n"}
{"label": 64, "index": 8280, "code": "N = int(input())\na = list(map(int,input().split()))\nR = [0]*9\nfor r in a:\n  rr = r//400\n  if rr < 8:\n    R[rr] = 1\n  else:\n    R[8] += 1\ns2 = sum(R)\ns1 = max(1,s2-R[8])\nprint(s1,s2)"}
{"label": 64, "index": 8281, "code": "N = int(input())\na = list(map(int, input().split()))\nmi = 0\nma = 0\nborder = [1, 400, 800, 1200, 1600, 2000, 2400, 2800, 3200, 4801]\nnum = [0 for i in range(9)]\nfor i in a:\n    for j in range(len(border[0:-1])):\n        if(border[j] <= i and i < border[j+1]):\n            num[j] += 1\n\nfor i in num[0:-1]:\n    if(i > 0):\n        mi += 1\n        ma += 1\n\nmi = max(1, mi)\nma = ma+num[-1]\nprint(mi, ma)\n"}
{"label": 64, "index": 8282, "code": "# -*- coding: utf-8 -*-\n\"\"\"\nhttp://abc064.contest.atcoder.jp/tasks/abc064_c\n\n\"\"\"\nimport sys\nfrom sys import stdin\nfrom collections import defaultdict\ninput = stdin.readline\n\n\ndef get_color(s):\n    ans = 'any'\n    if s < 400:\n        ans = 'gray'\n    elif s < 800:\n        ans = 'brown'\n    elif s < 1200:\n        ans = 'green'\n    elif s < 1600:\n        ans = 'light blue'\n    elif s < 2000:\n        ans = 'blue'\n    elif s < 2400:\n        ans = 'yellow'\n    elif s < 2800:\n        ans = 'orange'\n    elif s < 3200:\n        ans = 'red'\n    return ans\n\n\ndef main(args):\n    N = int(input())\n    scores = [int(x) for x in input().split()]\n\n    colors = defaultdict(int)\n    for s in scores:\n        res = get_color(s)\n        colors[res] += 1\n\n    normal_color = 0\n    for k, v in colors.items():\n        if k != 'any':\n            normal_color += 1\n    any_color = colors['any']\n\n    print(max(1, normal_color), normal_color + any_color)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"label": 64, "index": 8283, "code": "n = int(input())\na = [int(i) for i in input().split()]\ncol = [0 for i in range(n)]\ncnt = 0\nfor i in range(n):\n    if 1 <= a[i] <=399:\n        col[i] = \"b\"\n    elif 400<= a[i]<=799:\n        col[i] = \"c\"\n    elif 800<= a[i]<=1199:\n        col[i] = \"d\"\n    elif 1200<= a[i]<=1599:\n        col[i] = \"e\"\n    elif 1600<= a[i]<=1999:\n        col[i] = \"f\"\n    elif 2000<= a[i]<=2399:\n        col[i] = \"g\"\n    elif 2400<= a[i]<=2799:\n        col[i] = \"h\"\n    elif 2800<= a[i]<=3199:\n        col[i] = \"j\"\n    else:\n        col[i] = \"k\"\n        cnt += 1\ncolv = list(set(col))\nmn =mx = len(colv)\nif \"k\" in colv:\n        mn -=1\n        mx += cnt-1\n        if mn == 0:\n            mn =1\n        \nprint(str(mn)+\" \"+str(mx))"}
{"label": 64, "index": 8284, "code": "N=int(input())\na_n=[]\na2_n=[]\na_n = input().split(\" \")\ncount = 0\n\nfor i in range(N):\n    if int(a_n[i])/400 < 8:\n         a2_n.append(int(a_n[i])//400)\n    else:\n        count += 1\n\nn_min = len(set(a2_n))\nn_max = n_min+count\n\nprint(max(1, n_min),n_max)"}
{"label": 64, "index": 8285, "code": "input()\na = map(int, raw_input().split())\nS = set()\nc = 0\nfor t in a:\n    if t>=3200:\n        c += 1\n    else:\n        S.add(t/400)\nprint max(1, len(S)), len(S)+c\n"}
{"label": 64, "index": 8286, "code": "import sys\n\n\nif __name__ == \"__main__\":\n    N = int(input())\n\n    rates = map(int, raw_input().split())\n    # rates = [map(int, raw_input().split()) for i in range(N)]\n\n    # tasks = np.array(tasks)\n    normal_colors = int(3200/400)\n    colors = [0] * normal_colors\n    aaa = 0\n    for rate in rates:\n        if rate >= 3200:\n            aaa +=1\n        else:\n            colors[rate/400] = 1\n\n    print max(sum(colors),1), sum(colors)+aaa"}
{"label": 64, "index": 8287, "code": "n = int(input())\na = list(map(int, input().split()))\n\na.sort()\ncolor = []\nother = 0\nfor i in a:\n    if i < 400 * 1:\n        color.append('1')\n    elif i < 400 * 2:\n        color.append('2')\n    elif i < 400 * 3:\n        color.append('3')\n    elif i < 400 * 4:\n        color.append('4')\n    elif i < 400 * 5:\n        color.append('5')\n    elif i < 400 * 6:\n        color.append('6')\n    elif i < 400 * 7:\n        color.append('7')\n    elif i < 400 * 8:\n        color.append('8')\n    else:\n        other += 1\nmax_ans = len(set(color)) + other\nmin_ans = len(set(color))\nif min_ans == 0 and other != 0:\n    min_ans = 1\nprint(min_ans, max_ans)\n"}
{"label": 64, "index": 8288, "code": "inf=float('inf')\nN = int(input())\nx = list(map(int, input().split()))\na=[0]*8\nb=0\nfor i in range(0,N):\n    if x[i]>=3200:\n        b +=1\n        x[i]=inf\nfor j in range(0,8):\n    for i in range(0,N):\n        if x[i]<400:\n            a[j] +=1\n            x[i] = inf\n        x[i] -= 400\n \n \nmincolar=0\nfor i in a:\n    if i!=0:\n        mincolar +=1\nif mincolar!=0:\n    print(mincolar,mincolar+b)\nelse:\n    print(1,b)\nquit()\n"}
{"label": 64, "index": 8289, "code": "N = int(input())\na = map(int, input().split())\nrate_under = []\nrate_upper = []\nfor i in a:\n    x = i // 400\n    if(x >= 8):\n        rate_upper.append(x)\n    else:\n        rate_under.append(x)\nmin = len(set(rate_under))\nmax = min + len(rate_upper)\nif(min == 0):\n    min = 1\nprint(str(min) + \" \" + str(max))"}
{"label": 64, "index": 8290, "code": "n = input()\na = map(int, raw_input().split())\n\nb = [0, 0, 0, 0, 0, 0, 0, 0]\nc = 0\n\nfor i in a:\n\tif i < 3200:\n\t\tb[int(i / 400)] = 1\n\telse:\n\t\tc += 1\n\ns = sum(b)\nif s == 0:\n\ts = 1\n\nprint s, sum(b) + c"}
{"label": 64, "index": 8291, "code": "import numpy as np\nn=input()\nn=int(n)\na=input().split()\nb=np.zeros(n)\ndiv=0\nnum_8=0\nfor i in range(n):\n a[i]=int(a[i])\n if a[i]<=399 and a[i]>=1:\n  b[i]=0\n elif a[i]>=400 and a[i]<=799:\n  b[i]=1\n elif a[i]>=800 and a[i]<=1199:\n  b[i]=2\n elif a[i]>=1200 and a[i]<=1599:\n  b[i]=3\n elif a[i]>=1600 and a[i]<=1999:\n  b[i]=4\n elif a[i]>=2000 and a[i]<=2399:\n  b[i]=5\n elif a[i]>=2400 and a[i]<=2799:\n  b[i]=6\n elif a[i]>=2800 and a[i]<=3199:\n  b[i]=7\n else:\n  b[i]=8\n  num_8=num_8+1\nfor i in range(8):\n if i in b:\n  div=div+1\nmin=div\nmax=div+num_8\nif min==0:\n min=1\nprint(min,max)"}
{"label": 64, "index": 8292, "code": "b = {}\nb['gray'] = 0\nb['brown'] = 0\nb['green'] = 0\nb['cyan'] = 0\nb['blue'] = 0\nb['yellow'] = 0\nb['orange'] = 0\nb['red'] = 0\nb['other'] = 0\n\nn = int(input())\na = list(map(int,input().split()))\n\nfor ai in a:\n    if ai < 400:\n        b['gray'] += 1\n    elif ai < 800:\n        b['brown'] += 1\n    elif ai < 1200:\n        b['green'] += 1\n    elif ai < 1600:\n        b['cyan'] += 1\n    elif ai < 2000:\n        b['blue'] += 1\n    elif ai < 2400:\n        b['yellow'] += 1\n    elif ai < 2800:\n        b['orange'] += 1\n    elif ai < 3200:\n        b['red'] += 1\n    else:\n        b['other'] += 1\n\nans = 0\nfor k, v in b.items():\n    if k != 'other' and v > 0:\n        ans += 1\n\nif ans == 0:\n    print(1, b['other'])\nelse:\n    print(ans, ans + b['other'])\n"}
{"label": 64, "index": 8293, "code": "N = int(input())\na = list(map(int, input().split()))\n\nd = [0] * 9\nfor i in a:\n    if i <= 399:\n        d[0] = 1\n    elif i <= 799:\n        d[1] = 1\n    elif i <= 1199:\n        d[2] = 1\n    elif i <= 1599:\n        d[3] = 1\n    elif i <= 1999:\n        d[4] = 1\n    elif i <= 2399:\n        d[5] = 1\n    elif i <= 2799:\n        d[6] = 1\n    elif i <= 3199:\n        d[7] = 1\n    else:\n        d[8] += 1\n\nminimam = max(1, sum(d[:8]))\nmaximam = sum(d)\n\nprint(minimam, maximam)\n"}
{"label": 64, "index": 8294, "code": "#coding:utf-8\n\ndef get_index(rate):\n    if 1 <= rate <= 399:\n        return 0\n    elif 400 <= rate <= 799:\n        return 1\n    elif 800 <= rate <= 1199:\n        return 2\n    elif 1200 <= rate <= 1599:\n        return 3\n    elif 1600 <= rate <= 1999:\n        return 4\n    elif 2000 <= rate <= 2399:\n        return 5\n    elif 2400 <= rate <= 2799:\n        return 6\n    elif 2800 <= rate <= 3199:\n        return 7\n\nif __name__ == \"__main__\":\n    N = int(input())\n    rates = list(map(int, input().split(\" \")))\n    color_list = [0] * 8\n\n    free_num = 0\n    for rate in rates:\n        if rate >= 3200:\n            free_num += 1\n        else:\n            color_list[get_index(rate)] += 1\n\n    color_kind = len(list(filter(lambda x: x > 0, color_list)))\n    if color_kind == 0:\n        print(str(1) + \" \" + str(free_num))\n    else:\n        print(str(color_kind) + \" \" + str(color_kind + free_num))\n"}
{"label": 64, "index": 8295, "code": "N = int(input())\nA = [int(i) for i in input().split()]\n     \nflg = [0,0,0,0,0,0,0,0,0]\nfor i in range(N):\n    if   A[i] <  400: flg[0] = 1\n    elif A[i] <  800: flg[1] = 1\n    elif A[i] < 1200: flg[2] = 1\n    elif A[i] < 1600: flg[3] = 1\n    elif A[i] < 2000: flg[4] = 1\n    elif A[i] < 2400: flg[5] = 1\n    elif A[i] < 2800: flg[6] = 1\n    elif A[i] < 3200: flg[7] = 1\n    else:             flg[8] += 1\n     \ncolmin = max(sum(flg[0:8]), 1)\ncolmax = sum(flg)\nprint(colmin, colmax)"}
{"label": 64, "index": 8296, "code": "def get_color_type_num(a_list):\n\n    c_list = [0 for i in range(9)]\n\n    for a in a_list:\n        if 1 <= a <= 399:\n            c_list[0] += 1\n        elif 400 <= a <= 799:\n            c_list[1] += 1\n        elif 800 <= a <= 1199:\n            c_list[2] += 1\n        elif 1200 <= a <= 1599:\n            c_list[3] += 1\n        elif 1600 <= a <= 1999:\n            c_list[4] += 1\n        elif 2000 <= a <= 2399:\n            c_list[5] += 1\n        elif 2400 <= a <= 2799:\n            c_list[6] += 1\n        elif 2800 <= a <= 3199:\n            c_list[7] += 1\n        else:\n            c_list[8] += 1\n\n    c_num = 0\n    c_free = c_list[8]\n    for i, c in enumerate(c_list):\n        if i == 8:\n            c_free = c\n        elif c:\n            c_num += 1\n\n    min_c = c_num\n    max_c = min_c + c_free\n    # if max_c > 8:\n    #     max_c = 8\n    if min_c == 0:\n        min_c = 1\n\n    return min_c, max_c\n\n\nif __name__ == '__main__':\n    N = input()\n    a_list = [int(i) for i in input().split()]\n\n    min_c, max_c = get_color_type_num(a_list)\n    print(min_c, max_c)\n"}
{"label": 64, "index": 8297, "code": "N = int(input())\nRates = list(map(int, input().split()))\nColors = []\nRainbow = 0\n\nfor Rate in Rates:\n    if Rate < 400:\n        Colors.append(\"\u7070\u8272\")\n    elif Rate < 800:\n        Colors.append(\"\u8336\u8272\")\n    elif Rate < 1200:\n        Colors.append(\"\u7dd1\u8272\")\n    elif Rate < 1600:\n        Colors.append(\"\u6c34\u8272\")\n    elif Rate < 2000:\n        Colors.append(\"\u9752\u8272\")\n    elif Rate < 2400:\n        Colors.append(\"\u9ec4\u8272\")\n    elif Rate < 2800:\n        Colors.append(\"\u6a59\u8272\")\n    elif Rate < 3200:\n        Colors.append(\"\u8d64\u8272\")\n    else:\n        Rainbow += 1\n\nColor = set(Colors)\nif len(Color) != 0:\n    print(len(Color) , len(Color) + Rainbow)\nelse:\n    print(1 , len(Color) + Rainbow)"}
{"label": 64, "index": 8298, "code": "#Colorful Leaderboard\nimport numpy as np\nn = int(input())\na = np.array(list(map(int, input().split())))\nb = sorted (a//400)\ncnt = 0\nfor i in range(len(b)):\n    if b[i]  < 8:\n        None\n    else:\n        b[i]+=i\n        cnt+=1\nc = len(list(set(b)))\n\nprint(str(max([1,c-cnt])) + \" \" + str(c))"}
{"label": 64, "index": 8299, "code": "import bisect\n\nn = int(input())\na = [int(i) for i in input().split()]\n\ntarget = 0\nl = [399, 799, 1199, 1599, 1999, 2399, 2799, 3199]\ncnt = [0 for i in range(len(l))]\n\nfor i in range(n):\n    if a[i] >= 3200:\n        target += 1\n    else:\n        x = bisect.bisect_left(l, a[i])\n        # print (\"value = \" + str(a[i]) + \", x = \" + str(x))\n        cnt[x] += 1\n\nmi = 0\nma = 0\nfor i in range(len(l)):\n    if cnt[i] != 0:\n        mi += 1\n\nma = mi + target\nif mi == 0:\n    mi = 1\n\nprint (str(mi) + \" \" + str(ma))"}
{"label": 64, "index": 8300, "code": "def main():\n    N = int(input())\n    A = tuple(map(int, input().split()))\n\n    color = set()\n    etc = 0\n    for a in A:\n        idx = a // 400\n        if idx >= 8:\n            etc += 1\n        else:\n            color.add(idx)\n\n    min_ = len(color)\n    if min_ == 0:\n        min_ = 1\n    max_ = len(color) + etc\n\n    print(min_, max_)\n\nmain()\n"}
{"label": 64, "index": 8301, "code": "N = int(input())\na = list(map(int, input().split()))\n\nl = [0] * 9\nfor i in a:\n    if i <= 399:\n        l[0]=1\n    elif i<=799:\n        l[1]=1\n    elif i<=1199:\n        l[2]=1\n    elif i<=1599:\n        l[3]=1\n    elif i<=1999:\n        l[4]=1\n    elif i<=2399:\n        l[5]=1\n    elif i<=2799:\n        l[6]=1\n    elif i<=3199:\n        l[7]=1\n    else:\n        l[8] += 1\nif sum(l[:8])==0:\n    print(1, l[8])\nelse:\n    print(sum(l[:8]), sum(l))\n"}
{"label": 64, "index": 8302, "code": "n = input()\na = list(map(int, input().split(\" \")))\n\nCOLOR_LIST = [399, 799, 1199, 1599, 1999, 2399, 2799, 3199]\nfree_color = 0\ncolor_contain = [0, 0, 0, 0, 0, 0, 0, 0]\n\n\n\nfor i in a:\n\tcnt = 0\n\tfor j in COLOR_LIST:\n\t\tif i > j:\n\t\t\tcnt += 1\n\t\n\tif cnt < len(color_contain):\n\t    color_contain[cnt] = 1\n\telse:\n\t    free_color += 1\n\nif free_color == 0:\n\tmin_ans = sum(color_contain)\n\tmax_ans = sum(color_contain)\nelse:\n    min_ans = max(1, sum(color_contain))\n    max_ans = sum(color_contain) + free_color\nprint(min_ans, max_ans)\n\t\t"}
{"label": 64, "index": 8303, "code": "n=input()\na=[int(i) for i in input().split()]\n\ndef cl(n):\n    return n//400\n\nbuff=[0]*9\n\nfor i in a:\n    color=cl(i)\n    if color>8:\n        color=8\n    buff[color]+=1\n\n\nmin=0\nfor i in range(len(buff)-1):\n    if buff[i]>=1:\n        min+=1\n\nmax=min+buff[8]\n\nif min==0:\n    min=1\n\nprint(str(min)+\" \"+str(max))\n\n"}
{"label": 64, "index": 8304, "code": "input()\nrates = sorted([int(x) for x in input().split()])\ncounts = []\nfor boundary in [399, 799, 1199, 1599, 1999, 2399, 2799, 3199]:\n    counts.append(1 if rates and (rates[0] <= boundary) else 0)\n    rates = [rate for rate in rates if rate > boundary]\nhigher = len(rates)\nleast = sum(counts)\nprint(\"{} {}\".format(1 if least == 0 else least, least+higher))"}
{"label": 64, "index": 8305, "code": "N=int(input())\na_n=[int(x) for x in input().split()]\nimport sys\n\nr=[]\nr.append([i for i in a_n if 1<=i<=399])\nr.append([i for i in a_n if 400<=i<=799])\nr.append([i for i in a_n if 800<=i<=1199])\nr.append([i for i in a_n if 1200<=i<=1599])\nr.append([i for i in a_n if 1600<=i<=1999])\nr.append([i for i in a_n if 2000<=i<=2399])\nr.append([i for i in a_n if 2400<=i<=2799])\nr.append([i for i in a_n if 2800<=i<=3199])\nR=[i for i in a_n if 3200<=i]\n\ncount=0\nfor i in range(len(r)):\n    if r[i]:\n        count+=1\nif count==0:\n    count+=1\n    print(str(count), str((count-1) + len(R)))\n    sys.exit()\n\nprint(str(count), str(count+len(R)))"}
{"label": 64, "index": 8306, "code": "n=int(raw_input())\na=map(int,raw_input().split())\nb=[0]*9\nfor i in a:\n\tc=i//400\n\tif c>=8:\n\t\tb[8]+=1\n\telse:\n\t\tb[c]=b[c] or 1\n\nif sum(b[:-1])==0 and b[-1]!=0:\n\td=1\nelse:\n\td=sum(b[:-1])\n\nprint d,sum(b)"}
{"label": 64, "index": 8307, "code": "N=int(input())\na=list(map(int,input().split()))\nb=[0]*9\nfor i in range(N):\n  if a[i]<400:\n    b[0]=1\n  elif a[i]<800:\n    b[1]=1\n  elif a[i]<1200:\n    b[2]=1\n  elif a[i]<1600:\n    b[3]=1\n  elif a[i]<2000:\n    b[4]=1\n  elif a[i]<2400:\n    b[5]=1\n  elif a[i]<2800:\n    b[6]=1\n  elif a[i]<3200:\n    b[7]=1\n  else:\n    b[8]+=1\nif b[8]==N:#\u5168\u54e1\u304c\u3064\u3088\u3044!\n  print(1,min(N,8))\nelse:\n  Min=0\n  Max=0\n  for i in range(8):\n    Min+=b[i]\n  print(Min,min(N,Min+b[8]))"}
{"label": 64, "index": 8308, "code": "n = int(input())\na = list(int(i) for i in input().split())\n\nhai = 0\ntya = 0\nmidori = 0\nmizu = 0\nao = 0\nki = 0\ndaidai = 0\naka = 0\n\nniji = 0\n\nfor i in range(n):\n    if 1 <= a[i] and a[i] <=399:\n        hai = 1\n    elif 400 <= a[i] and a[i] <= 799:\n        tya = 1\n    elif 800 <= a[i] and a[i] <= 1199:\n        midori = 1\n    elif 1200 <= a[i] and a[i] <=1599:\n        mizu = 1\n    elif 1600 <= a[i] and a[i] <= 1999:\n        ao = 1\n    elif 2000 <= a[i] and a[i] <= 2399:\n        ki = 1\n    elif 2400 <= a[i] and a[i] <=2799:\n        daidai = 1\n    elif 2800 <= a[i] and a[i] <= 3199:\n        aka = 1\n    elif 3200 <= a[i]:\n        niji += 1\n\nmincolor = hai + tya + midori + mizu + ao + ki + daidai + aka\n\nif mincolor == 0:\n    mincolor += 1\n    niji -= 1\n\nmaxcolor = mincolor + niji\n\n#if maxcolor >= 9:\n#    maxcolor = 8\n\nprint(mincolor, maxcolor)\n"}
{"label": 64, "index": 8309, "code": "import sys\n \nstdin = sys.stdin\n\nni = lambda: int(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nns = lambda: stdin.readline()\n\nn = ni()\na = na()\n\n\ns = set()\nx = 0\nfor v in a:\n    if v < 3200:\n        s.add(int(v / 400))\n    else:\n        x += 1\n\ny = len(s)\nz = x + y\n\nif x > 0:\n    y = max(1, y)\n\nprint(\"%d %d\" % (y, z))\n"}
{"label": 64, "index": 8310, "code": "input()\nrates = sorted([int(x) for x in input().split()])\nleast = 0\nfor boundary in [399, 799, 1199, 1599, 1999, 2399, 2799, 3199]:\n    least += 1 if rates and (rates[0] <= boundary) else 0\n    rates = [rate for rate in rates if rate > boundary]\nprint(\"{} {}\".format((least == 0)+least, least+len(rates)))"}
{"label": 64, "index": 8311, "code": "N = int(input())\na = list(map(int, input().split()))\n\nres_min = 0\nres_max = 0\n\ng = list(filter(lambda x: x <= 399, a))\nbr = list(filter(lambda x: 400 <= x <= 799, a))\ngr = list(filter(lambda x: 800 <= x <= 1199, a))\ns = list(filter(lambda x: 1200 <= x <= 1599, a))\nbl = list(filter(lambda x: 1600 <= x <= 1999, a))\ny = list(filter(lambda x: 2000 <= x <= 2399, a))\no = list(filter(lambda x: 2400 <= x <= 2799, a))\nr = list(filter(lambda x: 2800 <= x <= 3199, a))\nt = list(filter(lambda x: 3200 <= x, a))\n\nc_list = [g, br, gr, s, bl, y, o, r]\n\nfor c in c_list:\n    if len(c) != 0:\n        res_min += 1\n        res_max += 1\n\nif res_min == 0:\n    res_min += 1\nres_max += len(t)\n\n\nprint(res_min, res_max)"}
{"label": 64, "index": 8312, "code": "N = int(input())\na = list(map(int, input().split()))\nnum = [0] * 9\nfor i in range(N):\n    if 1 <= a[i] <= 399:\n        num[0] = 1\n    elif 400 <= a[i] <= 799:\n        num[1] = 1\n    elif 800 <= a[i] <= 1199:\n        num[2] = 1\n    elif 1200 <= a[i] <= 1599:\n        num[3] = 1\n    elif 1600 <= a[i] <= 1999:\n        num[4] = 1\n    elif 2000 <= a[i] <= 2399:\n        num[5] = 1\n    elif 2400 <= a[i] <= 2799:\n        num[6] = 1\n    elif 2800 <= a[i] <= 3199:\n        num[7] = 1\n    else:\n        num[8] = num[8] + 1\n\nif num[8] == 0:\n    maximum = sum(num[0:8])\n    minimum = sum(num[0:8])\nelse:\n    if num[8] == N:\n        maximum = N\n        minimum = 1\n    else:\n        maximum = sum(num[0:8]) + num[8]\n        minimum = sum(num[0:8])\n\nprint(minimum, maximum)\n"}
{"label": 64, "index": 8313, "code": "n = input()\na = list(map(int, input().split()))\ncount = [0] * 9\nfor i in a:\n    if i < 3200:\n        count[i//400] = 1\n    else:\n        count[8] += 1\nansMax = sum(count)\nansMin = sum(count[:8])\nif ansMin==0 and count[8] > 0:\n    ansMin = 1\nprint(ansMin, ansMax)\n        \n"}
{"label": 64, "index": 8314, "code": "import numpy as np\n\nN=int(input())\narr=[int(i) for i in input().split()]\n\n#calc binCount\nbinCount=np.zeros(9)\nfor rate in arr:\n    rateBin=rate//400\n    binCount[min(rateBin,8)]+=1\n\ncolorCount=int(np.sum(binCount[:-1]>0))\nnc=int(np.sum(binCount[:-1]))\nnf=int(binCount[-1])\nassert N==(nc+nf)\n\nif nc>0:\n    minColor=colorCount\nelif nf>0:\n    minColor=1\nelse:\n    minColor=0\n\nmaxColor=int(colorCount+nf)\nprint(minColor, maxColor)"}
{"label": 64, "index": 8315, "code": "import sys\nimport numpy as np\nfrom math import *\ndef get_read_func(fileobject):\n    if fileobject == None :\n        return raw_input\n    else:\n        return fileobject.readline\n\ndef main():\n    if len(sys.argv) > 1:\n        f = open(sys.argv[1])\n    else:\n        f = None\n    read_func = get_read_func(f);\n    input_raw = read_func().strip().split()\n    [N] = [int(input_raw[0])]\n    input_raw = read_func().strip().split()\n    color_list = [0 for i in range(8)]\n    top_coder_num = 0\n    for i in range(N):\n        rate = int(input_raw[i])\n        if rate>= 1 and rate < 400:\n            color_list[0] = 1\n        elif rate>= 400 and rate < 800:\n            color_list[1] = 1\n        elif rate>= 800 and rate < 1200:\n            color_list[2] = 1\n        elif rate>= 1200 and rate < 1600:\n            color_list[3] = 1\n        elif rate>= 1600 and rate < 2000:\n            color_list[4] = 1\n        elif rate>= 2000 and rate < 2400:\n            color_list[5] = 1\n        elif rate>= 2400 and rate < 2800:\n            color_list[6] = 1\n        elif rate>= 2800 and rate < 3200:\n            color_list[7] = 1\n        elif rate >= 3200:\n            top_coder_num += 1\n\n    min_color = sum(color_list)\n    if min_color == 0 and top_coder_num >= 1:\n        min_color = 1\n    max_color = sum(color_list) + top_coder_num\n\n    print min_color, max_color\n\n\n\n\nif __name__ == '__main__':\n    main()"}
{"label": 64, "index": 8316, "code": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\nimport sys\nimport math\n\nN, = map(int, sys.stdin.readline().rstrip().split())\na_list = list(map(int, sys.stdin.readline().rstrip().split()))\n\ndef score_index(score):\n    if score < 400:\n        return 0\n    if score < 800:\n        return 1\n    if score < 1200:\n        return 2\n    if score < 1600:\n        return 3\n    if score < 2000:\n        return 4\n    if score < 2400:\n        return 5\n    if score < 2800:\n        return 6\n    if score < 3200:\n        return 7\n    else:\n        raise Exception()\n\n\n\nsuperplayers = 0\ncounts = set()\nfor a in a_list:\n    if a < 3200:\n        counts.add(score_index(a))\n    else:\n        superplayers += 1\n\nprint(\"{} {}\".format(\n    max(len(counts), 1),\n    len(counts) + superplayers\n))\n\nexit(0)\n"}
{"label": 64, "index": 8317, "code": "N = int(input())\na = list(map(int,input().split()))\nb = []\nj = 0\nfor i in a:\n\tif i < 3200:\n\t\tb.append(int(i/400))\n\tif i >= 3200:\n\t\tj += 1\nk = len(set(b))\nif k == 0 and j > 0:\n\tk = 1\n\tj = j-1\nprint(k,k+j)"}
{"label": 64, "index": 8318, "code": "n=int(raw_input())\na=map(int,raw_input().split())\nc=[0]*8\nmx=0\nfor i in xrange(n):\n    if 1<=a[i]<400:\n        c[0]=1\n    elif 400<=a[i]<800:\n        c[1]=1\n    elif 800<=a[i]<1200:\n        c[2]=1\n    elif 1200<=a[i]<1600:\n        c[3]=1\n    elif 1600<=a[i]<2000:\n        c[4]=1\n    elif 2000<=a[i]<2400:\n        c[5]=1\n    elif 2400<=a[i]<2800:\n        c[6]=1\n    elif 2800<=a[i]<3200:\n        c[7]=1\n    else:\n        mx+=1\nprint max(1,sum(c)),sum(c)+mx"}
{"label": 64, "index": 8319, "code": "N = int(input())\na = list(map(int,input().split()))\nans = set()\nother = 0\n\nfor i in a:\n    if i <400:\n        ans.add(\"gray\")\n    elif i <800:\n        ans.add(\"green\")\n    elif i < 1200:\n        ans.add(\"brown\")\n    elif i <1600:\n        ans.add(\"light_blue\")\n    elif i<2000:\n        ans.add(\"blue\")\n    elif i<2400:\n        ans.add(\"yellow\")\n    elif i <2800:\n        ans.add(\"orange\")\n    elif i <3200:\n        ans.add(\"red\")\n    else:\n        other += 1\n\ncolor = len(ans)\nif other == N:\n    print(1,\" \",min(other,8))\nelse:\n    print(color, \" \" ,min(N,color +other))"}
{"label": 65, "index": 8320, "code": "import re\n\nN = int(input())\nS = input()\n\nwhile True:\n    pre = S\n    S = re.sub(r'\\(((L|R)*?)\\)', r'L\\1R', S)\n    if pre == S:\n        break\n\nS = '(' * S.count(')') + S + ')' * S.count('(')\nS = S.replace('L', '(')\nS = S.replace('R', ')')\nprint(S)"}
{"label": 65, "index": 8321, "code": "N=int(input())\nr=0\nl=0\nS = input()\nli_S = []\ncount = 0\n\nfor i in range(N):\n    if S[i]==\")\":\n         r += 1\n         li_S.append(\")\")\n    else:\n        l += 1\n        li_S.append(\"(\")\n    if r > l :\n        li_S.insert(0,\"(\")\n        l += 1\n\nfor i in range(l-r):\n    li_S.append(\")\")\nprint(\"\".join(li_S))"}
{"label": 65, "index": 8322, "code": "#coding:utf-8\n\nif __name__ == \"__main__\":\n    N = int(input())\n    string = input()\n\n    right = 0\n    left = 0\n\n    for char in string:\n        if char == '(':\n            right += 1\n        else:\n            right -= 1\n\n        if right == -1:\n            left += 1\n            right = 0\n\n    L = '(' * left\n    R = ')' * right\n\n    print(L + string + R)\n"}
{"label": 65, "index": 8323, "code": "N=raw_input()\nS=raw_input()\n\npre=\"\"\ncnt=0\nfor s in S:\n    if s == \"(\":\n        cnt += 1\n    else:\n        if cnt == 0:\n            pre += \"(\"\n        else:\n            cnt -= 1\n\nsuf=\")\"*cnt\n\nprint pre+S+suf"}
{"label": 65, "index": 8324, "code": "N = int(input())\nS = input()\nbegin = 0\nend = 0\nfor i in range(N):\n    if(S[i] == \"(\" ):\n        begin += 1\n    elif(S[i] == \")\" and begin <= 0):\n        end += 1\n    else:\n        begin -= 1\nS = (\"(\" * end) + S + (\")\" * begin)\nprint(S)\n"}
{"label": 65, "index": 8325, "code": "#!/usr/bin/env python3\n\ninput()\ns = input()\nbalance = 0\nleft = 0\nfor c in s:\n    if c == '(':\n        balance += 1\n    elif balance == 0:\n        left += 1\n    else:\n        balance -= 1\nright = balance\nprint('(' * left + s + ')' * right)\n"}
{"label": 65, "index": 8326, "code": "n = int(input())\ns = input()\ns_original = s\n\nwhile s.count(\"()\") > 0:\n    s = s.replace(\"()\",\"\")\n\nleft_count = s.count(\")\")\nright_count = s.count(\"(\")\n\nfor i in range(left_count):\n    s_original = \"(\" + s_original\n    \nfor i in range(right_count):\n    s_original = s_original + \")\"\n    \nprint(s_original)"}
{"label": 65, "index": 8327, "code": "# -*- coding: utf-8 -*-\n\nfrom copy import deepcopy\nN = int(input())\nS = input()\nrawS = deepcopy(S)\n\nwhile S.count(\"()\"):\n    S = S.replace(\"()\", \"\")\n\nright = S.count(\"(\")\nleft = S.count(\")\")\nprint(\"(\"*left + rawS + \")\"*right)"}
{"label": 65, "index": 8328, "code": "n = int(input())\ns = input()\n\nunpair = 0\nleft = 0\nright = 0\nfor c in s:\n    if(c == \"(\"):\n        unpair += 1\n    else:\n        if(unpair):\n            unpair -= 1\n        else:\n            left += 1\nright = unpair\n\nprint(\"(\" * left + s + \")\" * right)\n"}
{"label": 65, "index": 8329, "code": "n = int(input())\ns = input()\ncopy = s\ns_list = list(s)\nleft_list = []\nright_list = []\n\nn = len(s_list)\nflag = 1\nif len(s_list) > 1:\n    while flag == 1:\n        flag = 0\n\n        if n>=1:\n            for i in range(n-1):\n                if s_list[i] == '(' and s_list[i+1] == ')':\n                    s_list.pop(i)\n                    s_list.pop(i)\n                    n -= 2\n                    flag = 1\n                    break\n\n        else:\n            break\n\n\n\n\nfor word in s_list:\n    if word == ')':\n        left_list.insert(0,'(')\n    else:\n        right_list.insert(len(right_list),')')\n\n\nword = \"\"\n\nfor lef in left_list:\n    word += lef\n\nword += s\n\nfor rig in right_list:\n    word += rig\n\nprint(word)"}
{"label": 65, "index": 8330, "code": "n = int(input())\ns = list(input())\n\n\nv = []\n\n\nstock = 0\n\nfor i in s:\n    if i==\"(\":\n        stock+=1\n        v.append(\"(\")\n    else:\n        if stock ==0:\n            v.insert(0,\"(\")\n            v.append(\")\")\n        else:\n            stock -= 1\n            v.append(\")\")\n\nfor i in range(stock):\n    v.append(\")\")\n\nprint(*v,sep='')\n"}
{"label": 65, "index": 8331, "code": "n=int(input())\ns=input()\na=0\nb=0\np=0\nfor i in range(len(s)):\n  if s[i]==\"(\":\n     a+=1\n  if s[i]==\")\":\n     b+=1\n     a-=1\n     if a<0:\n       p+=1\n       a=0\nprint(\"(\"*p+s+\")\"*a)"}
{"label": 65, "index": 8332, "code": "#coding: utf-8\nN = int(raw_input())\nS = raw_input()\n\nn = 0\nm = 0\nfor s in S:\n\tif s == '(':\n\t\tn += 1\n\telse:\n\t\tn -= 1\n\tm = min(n, m)\n\nl = abs(m)\nr = n + l\n\nS = '(' * l + S + ')' * r\nprint S"}
{"label": 65, "index": 8333, "code": "# -*- coding: utf-8 -*-\n\nimport sys\nimport os\n\nN = int(input())\ns = input().strip()\nt = s\n\nwhile '()' in t:\n    t = t.replace('()', '')\n\nleft = t.count('(')\nright = t.count(')')\n\nanswer = '(' * right + s + ')' * left\n\nprint(answer)"}
{"label": 65, "index": 8334, "code": "N = int(input())\nS = input()\n\noutput = ''\n\nhiraki = 0\ntoji = 0\nfor i in S:\n    if i == '(':\n        if toji > 0:\n            output = '(' * toji + output\n            output += ')' * toji\n            toji = 0\n            hiraki += 1\n            output += i\n        else:\n            hiraki += 1\n            output += i\n    else:\n        if hiraki > 0:\n            hiraki -= 1\n            output += i\n        else:\n            toji += 1\n\nfor i in range(hiraki):\n    output += ')'\n\nfor i in range(toji):\n    output += ')'\n\noutput = '(' * toji + output\n\nprint(output)\n"}
{"label": 65, "index": 8335, "code": "# -*- coding: utf-8 -*-\nimport sys, re\n\nN = input()\nS = input()\n# pattern = re.compile(r'\\)\\(')\nsentence = ''\nleft, right = 0, 0\n# lit = []\nfor s in S:\n    sentence += s\n    if s == '(':\n        left += 1\n    else:\n        right += 1\n    if left - right < 0:\n        sentence = '(' + sentence\n        left += 1\nif left - right > 0:\n    sentence = sentence + ')' * (left - right)\nprint(sentence)"}
{"label": 65, "index": 8336, "code": "n = input()\ns = raw_input()\nright = 0\nfor i in xrange(n):\n    if s[i] == '(':\n        right += 1\n    else:\n        right = max(right-1, 0)\nleft = 0\nfor i in xrange(n-1, -1, -1):\n    if s[i] == ')':\n        left += 1\n    else:\n        left = max(left-1, 0)\nprint '('*left+s+')'*right"}
{"label": 65, "index": 8337, "code": "N = int(input())\nS = input()\n\nacc = 0\nl = 0\nfor i in range(N):\n    if S[i] == '(':\n        acc += 1\n    else:\n        acc -= 1\n\n    if acc == -1:\n        l += 1\n        acc += 1\n\nL = '(' * l\nR = ')' * acc\nprint (L + S + R)"}
{"label": 65, "index": 8338, "code": "n=int(raw_input())\ns=raw_input()\nstack=[]\nstidx=[]\nins=[]\nfor i in xrange(n):\n    if s[i]==\"(\":\n        stack.append(s[i])\n        stidx.append(i)\n    else:\n        if len(stack)==0:\n            ins.append(i)\n        else:\n            stack.pop()\n            stidx.pop()\ntmp=list(s)\nfor i in stidx:\n    tmp[n-1]=tmp[n-1]+\")\"\nfor i in xrange(len(ins)):\n    tmp[0]=\"(\"+tmp[0]\nprint \"\".join(tmp)\n"}
{"label": 65, "index": 8339, "code": "N = int(raw_input())\nS = raw_input()\n\nleftAdd = 0\nleftCount = 0\nfor i in range(N):\n  if S[i]=='(':\n    leftCount += 1\n  elif leftCount == 0:\n    leftAdd += 1\n  else:\n    leftCount -= 1\n\nresult = '(' * leftAdd + S + ')' * leftCount\nprint(result)"}
{"label": 65, "index": 8340, "code": "N = int(input())\nS = input()\n\ndef get_purified(string):\n    replaced = string.replace(\"()\", \"\")\n    if replaced == string:\n        return replaced\n    else:\n        return get_purified(replaced)\n\npurified_str = get_purified(S)\nright_braces = purified_str.count(\"(\")\nleft_braces = purified_str.count(\")\")\nout = \"(\" * left_braces + S + \")\" * right_braces\nprint(out)\n"}
{"label": 65, "index": 8341, "code": "n = int(input())\nN = input()\nL = 0\nR = 0\nnum = 0\nfor c in N:\n    if c == '(':\n        num += 1\n    else:\n        if num:\n            num -= 1\n        else:\n            L += 1\nR = num\n \nprint('('*L+N+')'*R)"}
{"label": 65, "index": 8342, "code": "def main():\n    N = int(input())\n    S = input()\n\n    s = S\n    while s.count('()'):\n        s = s.replace('()', '')\n\n    if len(s) == 0:\n        print(S)\n        return\n\n    left = ''\n    right = ''\n    if s[0] == ')':\n        left = '(' * s.count(')')\n    if s[-1] == '(':\n        right = ')' * s.count('(')\n\n    print('{}{}{}'.format(left, S, right))\n\nmain()\n"}
{"label": 65, "index": 8343, "code": "n = int(input())\nN = input()\nL = 0\nR = 0\nnum = 0\nfor c in N:\n    if c == '(':\n        num += 1\n    else:\n        if num:\n            num -= 1\n        else:\n            L += 1\nR = num\n\nprint('('*L+N+')'*R)"}
{"label": 65, "index": 8344, "code": "n = int(input())\ns = input()\n\nright = 0\nleft = 0\nsum_right = 0\nsum_left = 0\n\nfor c in s:\n    if c == \"(\":\n        right += 1\n    else:\n        left += 1\n        if right > 0:\n            right -= 1\n            left -= 1\n            \n        \nfor i in range(right):\n    s = s + \")\"\nfor i in range(left):\n    s = \"(\" + s\n\nprint(s)\n"}
{"label": 65, "index": 8345, "code": "# -*- coding: utf-8 -*-\nx = int(input())\ny = input()\n\nz = y\n\nwhile z.find(\"()\") != -1:\n    z = z.replace(\"()\",\"\")\n\na = z.count(\"(\")\nb = z.count(\")\")\n\nans = y\n\nfor i in range(a):\n    ans = ans + \")\"\n\nfor i in range(b):\n    ans = \"(\" + ans\n\nprint(ans)\n"}
{"label": 65, "index": 8346, "code": "n = int(input())\ns = input()\nhead = \"\"\ndepth = 0\nfor i in s:\n    if i == \"(\":\n        depth += 1\n    else:\n        if depth == 0:\n            head += \"(\"\n        else:\n            depth -= 1\ntail = \"\".join([\")\" for _ in range(depth)])\nprint(head + s + tail)"}
{"label": 65, "index": 8347, "code": "N = raw_input()\nS = raw_input()\n\ndef insert(string):\n    # str_len = len(string)\n    # print str_len\n    left = 0\n    right = 0\n    i=0\n    while i < len(string):\n        if string[i] == \"(\":\n            left += 1\n            # print \"left is \" + str(left)\n        else:\n            right += 1\n            # print \"right is \" + str(right)\n        if right > left:\n            string = \"(\" + string\n            left += 1\n            # print string\n            i=0\n            left = 0\n            right = 0\n        else:\n            i += 1\n    return string\n\ndef add_ket(string):\n    bra = 0\n    ket = 0\n    for i in range(len(string)):\n        if string[i] == \"(\":\n            bra += 1\n        else:\n            ket += 1\n    add = bra-ket\n    string = string + add * \")\"\n    return string\n\n\ntmp = insert(S)\nprint add_ket(tmp)\n"}
{"label": 65, "index": 8348, "code": "n = raw_input()\ns = raw_input()\nstack = []\nfor l in s:\n    stack.append(l)\n    if stack[-2:] == [\"(\", \")\"]:\n        stack.pop()\n        stack.pop()\nfor l in stack:\n    if l == \")\":\n        s = \"(\" + s\n    if l == \"(\":\n        s += \")\"\n\nprint s\n"}
{"label": 65, "index": 8349, "code": "N = int(input())\nS = input()\nans = []\n\np = 0\nparts = \"\"\nfor c in S:\n    if c == \"(\":\n        p+=1\n    else:\n        if p==0:\n            ans.insert(0, \"(\")\n        else:\n            p-=1\n    ans.append(c)\nif p > 0:\n    ans += [\")\"]*p\nprint(\"\".join(ans))"}
{"label": 65, "index": 8350, "code": "N=int(raw_input())\nS=raw_input()\n\ns=list(S)\n\ni=0\nj=0\nwhile i<N and j<N:\n    #print i,s\n    if s[i]=='(':\n        j=i\n        while j<N:\n            #print i,j\n            if s[j]==')':\n                s[i]='x'\n                s[j]='x'\n                #print (i,j),s\n                i+=1\n                break\n            else:\n                j+=1\n    else:\n        i+=1\n\nop=s.count(')')\ncl=s.count('(')\n\nprint '('*op+S+')'*cl"}
{"label": 65, "index": 8351, "code": "n = int(input())\ns = input()\nhead = \"\"\ndepth = 0\nfor i in s:\n    if i == \"(\":\n        depth += 1\n    else:\n        if depth == 0:\n            head += \"(\"\n        else:\n            depth -= 1\ntail = \")\" * depth\nprint(head + s + tail)"}
{"label": 65, "index": 8352, "code": "def main():\n    N = int(input())\n    S = input()\n\n    s = S\n    while True:\n        s = s.replace('()', '')\n        if s.count('()') == 0:\n            break\n\n    if len(s) == 0:\n        print(S)\n        return\n\n    left = ''\n    right = ''\n    if s[0] == ')':\n        left = '(' * s.count(')')\n    if s[-1] == '(':\n        right = ')' * s.count('(')\n\n    print('{}{}{}'.format(left, S, right))\n\nmain()\n"}
{"label": 65, "index": 8353, "code": "N=int(input())\ns=input()\n\nlc=0\nrc=0\nfor brc in s:\n    if brc=='(':\n        lc+=1\n    elif brc==')':\n        if lc>0:\n            lc-=1\n        else:\n            rc+=1\n            \nretVal=\"\"\nfor i in range(rc):\n    retVal+='('\nretVal+=s\nfor i in range(lc):\n    retVal+=')'\nprint(retVal)"}
{"label": 65, "index": 8354, "code": "# -*- coding: utf-8 -*-\n\"\"\"\nhttp://abc064.contest.atcoder.jp/tasks/abc064_d\n\n\"\"\"\nimport sys\nfrom sys import stdin\ninput = stdin.readline\n\n\ndef check_balance(S):\n    st = 0\n    for pos, c in enumerate(S):\n        if c == '(':\n            st += 1\n        else:                   #  ')'\n            st -= 1\n            if st < 0:\n                break\n    return st\n\n\ndef main(args):\n    N = int(input())\n    S = input().strip()\n    # S = '))))(((('\n\n    result = check_balance(S)\n    while result != 0:\n        if result < 0:\n            S = '(' + S\n        elif result > 0:\n            S = S + ')'\n        result = check_balance(S)\n\n    print(S)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n"}
{"label": 65, "index": 8355, "code": "n = int(input())\ns = input()\nlist_s = list(s)\n\nunclosed_left = 0\nunclosed_right = 0\nfor c in list_s:\n    if c == '(':\n        unclosed_right += 1\n    else:\n        if unclosed_right > 0:\n            unclosed_right -= 1\n        else:\n            unclosed_left += 1\n\nfor i in range(unclosed_left):\n    list_s = ['('] + list_s\n\nfor i in range(unclosed_right):\n    list_s = list_s + [')']\n\nprint(''.join(list_s))"}
{"label": 65, "index": 8356, "code": "import copy\n\n\ndef get_completed(s):\n    ans = copy.deepcopy(s)\n\n    not_close = 0\n    not_open = 0\n\n    for c in s:\n        if c == '(':\n            not_close += 1\n\n        if c == ')':\n            if not_close > 0:\n                not_close -= 1\n            else:\n                not_open += 1\n\n    for i in range(not_open):\n        ans = '(' + ans\n\n    for i in range(not_close):\n        ans = ans + ')'\n\n    return ans\n\n\nif __name__ == '__main__':\n    N = input()\n    S = input()\n\n    print(get_completed(S))\n"}
{"label": 65, "index": 8357, "code": "n = int(input())\nS = input()\ns = S[:]\nwhile '()' in s:\n\ts = s.replace('()','')\n\nprint('('*s.count(')') + S + ')'*s.count('('))\n"}
{"label": 65, "index": 8358, "code": "N = int(input())\nS = input()\n\noutput = ''\n\nhiraki = 0\nfor i in S:\n    if i == '(':\n        hiraki += 1\n        output += i\n    else:\n        if hiraki > 0:\n            hiraki -= 1\n            output += i\n        else:\n            output = '(' + output\n            output += i\n\noutput += ')' * hiraki\n\nprint(output)\n"}
{"label": 65, "index": 8359, "code": "#! /usr/bin/env python3\n\nn = int(input())\ns = input()\nt0 = 0\nt1 = 0\nans = s\nfor i in s:\n    if i == '(' : t0 += 1\n    if i == ')' : t1 += 1\n    if t0 < 1 and t1 > 0:\n        t1 -= 1\n        ans = '(' + ans\n    if t0 > 0 and t1 > 0:\n        t0 -= 1\n        t1 -= 1\nprint(ans + ')' * t0)"}
{"label": 65, "index": 8360, "code": "N = int(input())\nS = input()\ns = S[:]\nwhile '()' in s:\n    s = s.replace('()', '')\nans = '(' * s.count(')') + S + ')' * s.count('(')\nprint(ans)\n"}
{"label": 65, "index": 8361, "code": "N = int(input())\nS = list(input())\nOut =  S[:]\nwhile len(S) > 0:\n\tif S[0] == \")\":\n\t\tOut.insert(0,\"(\")\n\t\tdel S[0]\n\telif S[0] == \"(\":\n\t\tfor j in range(len(S)):\n\t\t\tif S[j] == \")\":\n\t\t\t\tdel S[j]\n\t\t\t\tdel S[0]\n\t\t\t\tbreak\n\t\t\telif j == len(S) - 1 :\n\t\t\t\tOut.append(\")\")\n\t\t\t\tdel S[0]\nprint(''.join(Out))"}
{"label": 65, "index": 8362, "code": "N = int(input())\nS = input()\n\nc,L,R = 0,0,0\nfor i in range(N):\n    if S[i] == \"(\":\n        c += 1\n    else:\n        c -= 1\n    if c < 0:\n        L += 1\n        c = 0\n\nc = 0\nfor i in range(N-1,-1,-1):\n    if S[i] == \")\":\n        c += 1\n    else:\n        c -= 1\n    if c < 0:\n        R += 1\n        c = 0\n\nprint(L*\"(\" + S + R*\")\")\n"}
{"label": 65, "index": 8363, "code": "n = input()\ns = input()\n\ndef count(s, k):\n    c, needs = 0, 0\n    for i in s:\n        if i != k:\n            if c <= 0:\n                needs += 1\n            else:\n                c -= 1\n        else:\n            c += 1\n    return needs\n\nl = count(s, '(')\nr = count(s[::-1], ')')\nprint('('*l + s + ')'*r)\n"}
{"label": 65, "index": 8364, "code": "def main():\n    N = int(input())\n    S = input()\n\n    s = S\n    while True:\n        s = s.replace('()','')\n        if s.count('()') == 0:\n            break\n\n    if len(s) == 0:\n        print(S)\n        return\n\n    left = ''\n    right = ''\n    if s[0] == ')':\n        left = '(' * s.count(')')\n    if s[-1] == '(':\n        right = ')' * s.count('(')\n\n    print('{}{}{}'.format(left, S, right))\n\nmain()"}
{"label": 65, "index": 8365, "code": "N = int(raw_input())\nS = raw_input()\n\nv1 = 0\nv = 0\nfor s in S:\n    if s == \"(\":\n        v -= 1\n    if s == \")\":\n        v += 1\n    v1 = max(v1, v)\n\nv2 = v1 + S.count(\"(\") - S.count(\")\")\n\nprint \"(\" * v1 + S + \")\" * v2\n"}
{"label": 65, "index": 8366, "code": "N = int(input())\nS = list(input())\nOut =  S[:]\nTemp = S[:]\nwhile len(Temp) > 0:\n\tif Temp[0] == \")\":\n\t\tOut.insert(0,\"(\")\n\t\tdel Temp[0]\n\telif Temp[0] == \"(\":\n\t\ti = 0\n\t\tfor j in range(len(Temp)):\n\t\t\tif Temp[j] == \")\":\n\t\t\t\tdel Temp[j]\n\t\t\t\tdel Temp[0]\n\t\t\t\ti += 1\n\t\t\t\tbreak\n\t\tif i == 0:\n\t\t\tOut.append(\")\")\n\t\t\tdel Temp[0]\nprint(''.join(Out))"}
{"label": 65, "index": 8367, "code": "N=int(input())\nbk=list(input())\n\nl=0\nR=0\nfor sbk in bk:\n    if sbk==')':\n        if l==0:\n            R+=1\n        else:\n            l-=1\n    else:\n        l+=1\n\n\n\nr=0\nL=0\nfor sbk in reversed(bk):\n    if sbk=='(':\n        if r==0:\n            L+=1\n        else:\n            r-=1\n\n    else:\n        r+=1\n\n\n\n\nres='('*R+\"\".join(bk)+')'*L\nprint(res)\n"}
{"label": 65, "index": 8368, "code": "N = int(input())\nS = input()\n\nscore = 0\nln = 0\nrn = 0\n\nfor s in S:\n    if s == '(':\n        score += 1\n    elif s == ')':\n        score -= 1\n\n    if score < 0:\n        ln += 1\n        score = 0\n\nif score > 0:\n    rn = score\n    score = 0\n\nS = '('*ln + S + ')'*rn\nprint(S)"}
{"label": 65, "index": 8369, "code": "\n# coding: utf-8\n\n# In[38]:\n\nnumber = int(input())\nstrings = input()\n\n\n# In[39]:\n\nwhile True:\n    counter = 0\n\n    for s in strings:\n        if s == \"(\":\n            counter += 1\n        else:\n            if counter > 0:\n                counter -= 1\n            else:\n                strings = \"(\" + strings\n                counter = -1\n                break\n        \n    if counter > 0:\n        strings = strings + \")\" * counter\n        \n    if counter == 0:\n        break\n\nprint(strings)\n\n\n# In[ ]:\n\n\n\n"}
{"label": 65, "index": 8370, "code": "N = input()\nstring = input()\narrange = string\nwhile True:\n    after_arrange = arrange.replace('()','')\n    if after_arrange == arrange:\n        break\n    arrange = after_arrange\nleft = after_arrange.count(')')\nright = after_arrange.count('(')\nprint('('*left+string+')'*right)\n"}
{"label": 65, "index": 8371, "code": "N = int(input())\ndata = list(input())\napp = [0,0]\nfor i in range(N):\n    if data[i] == \")\":\n        app[0] += 1\n        if app[1] > 0:\n            app[0] -= 1\n            app[1] -= 1\n    elif data[i] == \"(\":\n        app[1] += 1\nprint(\"(\"*app[0] + \"\".join(data) + \")\"*app[1])\n"}
{"label": 65, "index": 8372, "code": "import sys\n\nstdin = sys.stdin\n\nns = lambda: stdin.readline()\nni = lambda: int(ns())\nna = lambda: list(map(int, stdin.readline().split()))\n\nN = ni()\nS = ns().strip()\n\nd = 0\nmind = 0\n\nfor i in range(len(S)):\n    if(S[i] == '('):\n        d += 1\n    else:\n        d -= 1\n    mind = min(mind,d)\nprint ('('*(-mind) + S + ')'*(d-mind))"}
{"label": 65, "index": 8373, "code": "N = int(input())\nx = str(input())\n\ny=[0]*N\nleft=''\nright=''\n\nfor i in range(N):\n    if (x[i]==')'):\n        y[i]=-1\n    else:\n        y[i]= 1\n\nfor i in range(N):\n    if y[i]==1:\n        for j in range(i,N):\n            if y[j]==-1:\n                y[i]=y[j]=0\n                break\n\n\n\nfor i in range(y.count(-1)):\n    left=left+'('\nfor i in range(y.count(1)):\n    right=right+')'\n\nprint(left+x+right)\n        \nquit()"}
{"label": 65, "index": 8374, "code": "input()\nS = raw_input()\nc = 0\np = 0\nfor s in S:\n    if s==\"(\":\n        c += 1\n    else:\n        if c==0:\n            p += 1\n        else:\n            c -= 1\nprint \"(\"*p+S+\")\"*c\n"}
{"label": 65, "index": 8375, "code": "time = int(input())\nkakko = input()\nhidarikakko = 0 #(\nmigikakko = 0 #)\nhidariHuyasu = 0 #\u5de6\u306b\u5897\u3084\u3059(\u306e\u6570\nmigiHuyasu = 0 #\u53f3\u306b\n#\u5de6\u306b\u5897\u3084\u3059\u306e\u3092\u8003\u3048\u308b\nfor i in range(time):\n    if kakko[i] == \"(\":\n        hidarikakko += 1\n    else:\n        if hidarikakko == 0:\n            hidariHuyasu += 1\n        else:\n            hidarikakko -= 1\n#\u53f3\u306b\u5897\u3084\u3059\u306e\u3092\u8003\u3048\u308b\nhidarikakko = 0 #(\nmigikakko = 0 #)\ngyaku = range(time)\n# print(gyaku)\n# gyaku.reverse()\nfor i in reversed(range(time)):\n    if kakko[i] == \")\":\n        migikakko += 1\n    else:\n        if migikakko == 0:\n            migiHuyasu += 1\n        else:\n            migikakko -= 1\nprint(\"(\" * hidariHuyasu + kakko + \")\" * migiHuyasu)"}
{"label": 65, "index": 8376, "code": "n = int(raw_input())\ns = raw_input()\nct = 0\nmn = 0\nfor c in s:\n    if c == '(':\n        ct += 1\n    else:\n        ct -= 1\n    mn = min(mn,ct)\nl = abs(mn)\nr = ct + l\ns = '('*l + s + ')'*r\nprint s\n"}
{"label": 65, "index": 8377, "code": "\nN = int(input())\nS = input()\n\nl = []\nl.append(S)\ni = 0\nwhile True:\n    if i > 1 and l[i] == l[i-1]:\n        break\n    l.append(l[i].replace(\"()\",\"\"))\n    i += 1\n\na = l[i]\nleft = a.count(')')\nright = a.count('(')\nans = '('*left + S + ')'*right\nprint(ans)"}
{"label": 65, "index": 8378, "code": "N = input()\nss = raw_input()\ns=ss.split(\"()\")\n\nwhile len(s)>1:\n    s=\"\".join(s)\n    #print(s)\n    s=s.split(\"()\")\n\na=\"\"\nb=\"\"\n\ns=s[0]\nN=len(s)\n\n\n\nfor i in range(N):\n    if s[i]==\"(\":\n        a+=\")\"\n    if s[i]==\")\":\n        b+=\"(\"\n\nprint(b+ss+a)\n"}
{"label": 65, "index": 8379, "code": "import sys\n\n\nif __name__ == \"__main__\":\n    N = raw_input()\n    S = raw_input()\n\n    bra = 0\n    ket = 0\n    pair = 0\n    # ket = 0\n    for s in S:\n        if s == '(':\n            bra += 1\n        else:\n            if bra > 0:\n                bra -= 1\n                pair +=1\n            else:\n                ket += 1\n    print '(' * ket + S + ')'*bra\n"}
{"label": 65, "index": 8380, "code": "N = int(input())\nS = str(input())\n\ndef count_need(string, from_left=True):\n    savings = 0\n    ng = 0\n    \n    if from_left == False:\n        key = '('\n    else :\n        key = ')'\n\n    for s in string:\n        if (s == key):\n            if savings <= 0: \n                ng += 1\n            else:\n                savings -= 1\n        else:\n            savings += 1\n    return ng\n\nleft_num = count_need(S, from_left=True)\nright_num = count_need(S[::-1], from_left=False)\n\nprint(\"(\"*left_num + S + \")\"*right_num)"}
{"label": 65, "index": 8381, "code": "import numpy as np\n# import random\ndef d2():\n    n = int(input())\n    s = input()\n    l = [ 1 if x=='(' else -1 for x in s[:] ]\n    mt = np.cumsum(l) # mountain\n    mi = min(0, np.amin(mt))\n    left = ''; right = ''\n    if mi < 0:\n        left = '('*(mi*-1)\n    if mt[-1]-mi > 0:\n        right = ')'*(mt[-1]-mi)\n    # print(mt, mi)\n    print(left + s + right)\n\nd2()\n"}
{"label": 65, "index": 8382, "code": "n=int(input())\ndata=list(map(lambda x:[str(x),-1],input()))\nwhile 1:\n    i=0\n    while i<len(data):\n        if data[i][0]==')' and data[i][1] == -1:\n            break\n        i+=1\n    if i==len(data):\n        break\n    j=i-1\n    while j>=0:\n        if data[j][0]=='(' and data[j][1]==-1:\n            data[i][1]=1\n            data[j][1]=1\n            break\n        j-=1\n    if j==-1:\n        data[i][1]=1\n        data.insert(0,['(',1])\nwhile 1:\n    i=len(data)-1\n    while i>=0:\n        if data[i][0]=='(' and data[i][1] == -1:\n            break\n        i-=1\n    if i==-1:\n        break\n    data[i][1]=1\n    data.append([')',1])\nprint(''.join(list(map(lambda x:x[0],data))))"}
{"label": 65, "index": 8383, "code": "n=int(raw_input())\ns=raw_input()\ncnt1=0\ncnt2=0\nfor i in xrange(n):\n    if s[i]==\"(\":\n        cnt1+=1\n    else:\n        if cnt1>0:\n            cnt1-=1\n        else:\n            cnt2+=1\n\nfor i in xrange(cnt1):\n    s+=\")\"\nfor i in xrange(cnt2):\n    s=\"(\"+s\nprint s"}
{"label": 65, "index": 8384, "code": "N = int(raw_input())\na = raw_input()\n\nb = list(a)\ncheck = 0\nj = 0\nk = 0\nfor i in range(N):\n\tif b[i] == \"(\":\n\t\tcheck = check + 1\n\telse:\n\t\tcheck = check - 1\n\t\n\tif check < 0:\n\t\tj += 1\n\t\tcheck = check + 1\nfor i in range(j):\n\tb = [\"(\"] + b\n\nfor i in range(check):\n\tb = b + [\")\"]\n\tk += 1\nimport six\nfor i in range(N+j+k):\n\tsix.print_(b[i],end = \"\")"}
{"label": 65, "index": 8385, "code": "from collections import defaultdict\n\n\ndef main():\n    N = int(input())\n    S = input()\n    t = S[:]\n    while True:\n        change = False\n        for i in range(1, len(t)):\n            if (t[i - 1], t[i]) == (\"(\", \")\"):\n                t = t[:i - 1] + t[i + 1:]\n                change = True\n                break\n        if not change:\n            break\n\n    a = \"(\" * t.count(\")\")\n    b = \")\" * t.count(\"(\")\n    print(a + S + b)\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 65, "index": 8386, "code": "input()\ns = input().strip()\nans = s\ndepth = 0\nfor c in s:\n    if c == '(':\n        depth += 1\n    else:\n        if depth:\n            depth -= 1\n        else:\n            ans = '(' + ans\nans += ')' * depth\nprint(ans)\n"}
{"label": 65, "index": 8387, "code": "N = int(raw_input())\nS = raw_input()\n\nt = S\n\nwhile S.count(\"()\") != 0:\n    S = S.replace(\"()\", \"\")\n\nL = S.count(\"(\")\nR = S.count(\")\")\n\nprint \"(\"*R + t + \")\"*L\n"}
{"label": 65, "index": 8388, "code": "N=int(input())\nS=input()\n\nstack=[]\nstack2=[]\nindex=-1\nindex2=-1\n\n\n#append \")\" at the end of S\nfor i in range(N):\n    stack.append(S[i])\n    index+=1\n\n    if len(stack)==1 and stack[0]==')':\n        del stack[0]\n        index-=1\n\n    elif stack[index-1]=='(' and stack[index]==')':\n        stack.pop(index)\n        stack.pop(index-1)\n        index-=2\n    #print(stack)\n\nlast=len(stack)\nfor i in range(last):\n    S=S+\")\"\n\n#print(\"S\"+S)\n\nT=S[::-1]\n\n\n#print(\"T\"+T)\n\nleng=len(T)\nfor i in range(leng):\n    stack2.append(T[i])\n    index2+=1\n\n    if len(stack2)==1 and stack2[0]=='(':\n        del stack2[0]\n        index2-=1\n\n    elif stack2[index2-1]==')' and stack2[index2]=='(':\n        stack2.pop(index2)\n        stack2.pop(index2-1)\n        index2-=2\n    #print(stack2)\n\nfirst=len(stack2)\nfor i in range(first):\n    T=T+\"(\"\n\n#print(T)\nprint(T[::-1])\n"}
{"label": 65, "index": 8389, "code": "n = int(input())\ns = list(input())\nstack = []\n\n\nfor v in s:\n    if stack and stack[-1] == \"(\" and v == \")\":\n        stack.pop()\n    else:\n        stack.append(v)\n\n\nfor v in stack:\n    if v == \")\":\n        s.insert(0, \"(\")\n    else:\n        s.append(\")\")\n\nprint(\"\".join(s))\n\n"}
{"label": 65, "index": 8390, "code": "N=int(input())\nS=input()\nu=0\nl=0\nr=0\nfor c in S:\n if(c==\"(\"):\n  u+=1\n else:\n   if(u):\n    u-=1\n   else:\n    l+=1\nr=u\nprint(\"(\"*l+S+\")\"*r)\n\n  "}
{"label": 65, "index": 8391, "code": "n = int(input())\ns = input()\na = s\nf = 0\nfor c in a:\n\tif c==\"(\":\n\t\tf+=1\n\telse:\n\t\tif f>0:\n\t\t\tf-=1\n\t\telse:\n\t\t\ts = \"(\" + s\nfor i in range(f):\n\ts = s + \")\"\n\nprint(s)\n"}
{"label": 65, "index": 8392, "code": "N = int(input())\n\nparentheses = list(input())\n\nadd_open = 0\nclose_buff = 0\n\nresult = \"\"\n\nfor elem in parentheses:\n    result += elem\n\n    if elem == \"(\":\n        close_buff += 1\n\n    elif elem == \")\":\n        if close_buff > 0:\n            close_buff -= 1\n        else:\n            add_open += 1\n\nprint(\"(\"*add_open + result + \")\"*close_buff)\n"}
{"label": 65, "index": 8393, "code": "N = int(input())\nS = input()\n \nans = []\nst = 0\nfor c in S:\n    if c == '(':\n        st += 1\n        ans.append('(')\n    else:\n        if st > 0:\n            st -= 1\n        else:\n            ans.insert(0, '(')\n        ans.append(')')\n \nans.extend(')' * st)\n \nprint(*ans, sep='')"}
{"label": 65, "index": 8394, "code": "input();s=input();l=0\nexec(\"r=l\\nfor c in'%s':l=max(l-1+2*(c=='%s'),0)\\n\"*2%(s,'(',s[::-1],')'))\nprint(l*'('+s+')'*r)"}
{"label": 65, "index": 8395, "code": "n = int(input())\nstr = input()\n \nr = 0\nl = 0\ni = 0\n \nwhile i < n:\n    if str[i] == '(':\n        l += 1\n        i += 1\n    elif str[i] == ')' and l == 0:\n        str = '(' + str\n        n += 1\n        i += 2\n    else:\n        l -= 1\n        i += 1\n \nif l > 0:\n    while l > 0:\n        str = str + ')'\n        l -= 1\n \nprint(str)"}
{"label": 65, "index": 8396, "code": "N = int(input())\nS = input()\n\nSold = S\nwhile True:\n    Snew = Sold.replace('()', '')\n    if len(Snew) == len(Sold):\n        break\n    Sold = Snew\n\nnum = Snew.count(')')\nprint('(' * num + S + ')' * (len(Snew) - num))\n"}
{"label": 65, "index": 8397, "code": "#!/usr/bin/python\n# -*- coding: utf-8 -*-\nimport sys\nimport math\n\nN, = map(int, sys.stdin.readline().rstrip().split())\nS = sys.stdin.readline().rstrip()\n\ndef is_fullfilled(in_str):\n    LR = 0\n    for c in in_str:\n        if LR < 0:\n            return False\n        if c == \"(\":\n            LR += 1\n        else:\n            LR -= 1\n    if LR == 0:\n        return True\n    else:\n        return False\n\n\nLR = 0\nfor c in S:\n    if c == \"(\":\n        LR += 1\n    else:\n        LR -= 1\n\nwhile LR < 0:\n    S = \"(\" + S\n    LR += 1\nwhile LR > 0:\n    S = S + \")\"\n    LR -= 1\n\nwhile not is_fullfilled(S):\n    #print(S)\n    S = \"(\" + S + \")\"\n\nprint(S)\n\nexit(0)\n"}
{"label": 65, "index": 8398, "code": "from sys import stdin \nn = int(stdin.readline())\na = stdin.readline().strip()\nx = 0\nfir = 0 \nsec = 0\nfor i in a:\n    if i=='(':\n        fir+=1\n    else:\n        if fir > 0:\n            fir-=1\n        else:\n            sec+=1\n            fir = 0\n\nprint sec*'(' + a + ')'*fir"}
{"label": 65, "index": 8399, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport array\nfrom bisect import *\nfrom collections import *\nimport fractions\nimport heapq \nfrom itertools import *\nimport math\nimport re\nimport string\n\n_ = input()\nS = input()\nstack = 0\nmade = ''\nfor ch in S:\n    # print(\"ch, stack = \", ch, stack)\n    if ch == '(':\n        stack += 1\n        made += '('\n    elif ch == ')':\n        if stack == 0:\n            made = '(' + made + ')'\n        else:\n            made += ')'\n            stack -= 1\nmade += ')' * stack\nprint(made)"}
{"label": 65, "index": 8400, "code": "if __name__ == '__main__':\n    N = int(input())\n    S = input()\n    tmpS = S\n    for i in range(50):\n        tmpS = tmpS.replace(\"()\", \"\")\n\n    # print(tmpS)\n    left_parenthesis_count = 0\n    right_parenthesis_count = 0\n    for moji in tmpS:\n        if moji == \"(\":\n            left_parenthesis_count += 1\n        elif moji == \")\":\n            right_parenthesis_count += 1\n\n    ans = S\n    for i in range(right_parenthesis_count):\n        ans = \"(\" + ans\n\n    for i in range(left_parenthesis_count):\n        ans += \")\"\n\n    print(ans)\n"}
{"label": 65, "index": 8401, "code": "class Parenter:\n    def __init__(self):\n        self.left = 0\n        self.right = 0\n        self.data = \"\"\n\n    def _run(self, letter):\n        if letter == \"(\":\n            self.data += \"(\"\n            self.left += 1\n        if letter == \")\":\n            if self.left > 0:\n                self.left -= 1\n                self.data += \")\"\n            else:\n                self.right += 1\n                self.data += \")\"\n    \n    def run(self, string):\n        for s in string:\n            self._run(s)\n        self.data = \"(\"*self.right + self.data + \")\"*self.left\n    \n\np = Parenter()\nN = input()\ndata = input()\np.run(data)\nprint(p.data)"}
{"label": 65, "index": 8402, "code": "import sys\nimport numpy as np\nfrom math import *\ndef get_read_func(fileobject):\n    if fileobject == None :\n        return raw_input\n    else:\n        return fileobject.readline\n\ndef main():\n    if len(sys.argv) > 1:\n        f = open(sys.argv[1])\n    else:\n        f = None\n    read_func = get_read_func(f);\n    input_raw = read_func().strip().split()\n    [N] = [int(input_raw[0])]\n    input_raw = list((read_func().strip()))\n    S = list(input_raw)\n    left_count = 0\n    for i in range(N):\n        if input_raw[i] == '(':\n            left_count += 1\n\n        if input_raw[i] == ')':\n            if left_count > 0:\n                left_count -= 1\n            else:\n                S.insert(0, '(')\n\n    for i in range(left_count):\n        S.append(')')\n    print \"\".join(S)\n\n\n\nif __name__ == '__main__':\n    main()"}
{"label": 65, "index": 8403, "code": "input()\ns = input()\nstk = list()\nfor c in s:\n    if c == '(':\n        stk.append('(')\n    elif len(stk) != 0 and stk[-1] == '(':\n        stk.pop()\n    else:\n        stk.append(')')\nprint(stk.count(')') * '(' + s + stk.count('(') * ')')\n"}
{"label": 65, "index": 8404, "code": "# coding: utf-8\ndef get_ln_inputs():\n    return input().split()\n\n\ndef main():\n    _ = get_ln_inputs()\n    S = get_ln_inputs()[0]\n\n    level = 0\n    index = 0\n    while index < len(S):\n        if S[index] == \"(\":\n            index += 1\n            level += 1\n            continue\n        if S[index] == \")\":\n            if level > 0:\n                index += 1\n                level -= 1\n                continue\n            S = \"(\" + S\n            index += 2\n    print(S + (\")\" * level))\n\n\nmain()"}
{"label": 65, "index": 8405, "code": "N = input()\nS = raw_input()\n\nl, r = 0, 0\ntmp = 0\nfor i in xrange(N):\n    if S[i] == '(':\n        tmp += 1\n    else:\n        tmp -= 1\n        if tmp < 0:\n            l += 1\n            tmp = 0\n\ntmp = 0\nfor i in xrange(N-1, -1, -1):\n    if S[i] == ')':\n        tmp += 1\n    else:\n        tmp -= 1\n        if tmp < 0:\n            r += 1\n            tmp = 0\nprint '(' * l + S + ')' * r\n"}
{"label": 65, "index": 8406, "code": "a = int(input())\nc = input()\nnl = 0\nnr = 0\nfor i in c :\n    if i == ')' :\n        nr += 1\n        if nl > 0 :\n            nr -= 1\n            nl -= 1\n    elif i == '(' :\n        nl += 1\nc = '('*nr + c + ')'*nl\nprint(c)\n"}
{"label": 65, "index": 8407, "code": "n = input()\nstr = raw_input()\n\nr = 0\nl = 0\ni = 0\n\nwhile i < n:\n    if str[i] == '(':\n        l += 1\n        i += 1\n    elif str[i] == ')' and l == 0:\n        str = '(' + str\n        n += 1\n        i = 0\n    else:\n        l -= 1\n        i += 1\n\nif l > 0:\n    while l > 0:\n        str = str + ')'\n        l -= 1\n\nprint str"}
{"label": 65, "index": 8408, "code": "n = int(input())\ns = input()\ncnt = [0, 0]\nadd = [0, 0]\nans = ''\nfor i in range(n):\n    if s[i] == ')':\n        cnt[0] += 1\n        if cnt[0] > cnt[1]:\n            add[1] += 1\n            cnt[1] += 1\n    else:\n        cnt[1] += 1\n\nprint('(' * add[1] + s + ')'*(cnt[1] -cnt[0]))\n"}
{"label": 65, "index": 8409, "code": "N=int(input())\nstr=input()\n\nstr1=str\nstr2=str\nn=int(N/2)\n\nfor var in range(1,n+1):\n    try:\n        str1=str1.replace(\"()\",\"\")\n    except:\n        break\n\ns1=str1.count(\"(\")\ns2=str1.count(\")\")\n\nprint(\"(\"*s2+str2+\")\"*s1)"}
{"label": 65, "index": 8410, "code": "n = int(input())\ns = input()\nstack_num = 0\nind = 0\nret = \"\"\nnr = 0\nfor c in s:\n    if(c == \"(\"):\n        stack_num += 1\n    else:\n        stack_num -= 1\n    if(stack_num < 0):\n        ret += \"(\"\n        stack_num += 1\nif(stack_num < 0):\n    ret += \"(\" * (-stack_num)\nret += s\nif(stack_num >= 0):\n    ret += \")\" * stack_num\nprint(ret)"}
{"label": 65, "index": 8411, "code": "n = int(input())\ns = input()\nstart = 0\nend = 0\n\nfor i in range(n):\n    if s[i] == \"(\":\n        start += 1\n    elif s[i] == \")\" and start <= 0:\n        end += 1\n    else:\n        start -= 1\n\nprint(\"(\"*end+s+\")\"*start)"}
{"label": 65, "index": 8412, "code": "N = int(input())\nS = list(input())\n\nv = []\ntmp =[]\n\nfor s in S:\n    if s == \"(\":\n        tmp.append(\")\")\n        v.append(\"(\")\n    else:\n        if len(tmp) == 0:\n            v.insert(0, \"(\")\n            v.append(\")\")\n        else:\n            v.append(tmp.pop())\n\nwhile tmp:\n    v.append(tmp.pop())\n\nprint(\"\".join(v))"}
{"label": 65, "index": 8413, "code": "N = input()\nS = raw_input()\nans = \"\"\ncnt = 0\nfor ch in S:\n    if (cnt <= 0) and (ch == \")\"):\n        ans = \"(\" + ans\n    elif (ch == \")\"):\n        cnt -= 1\n    else:\n        cnt += 1\n    ans += ch\nans += \")\" * cnt\nprint ans"}
{"label": 65, "index": 8414, "code": "input()\ns = input().strip()\nstock, depth = 0, 0\nfor c in s:\n    if c == '(':\n        depth += 1\n    else:\n        if depth:\n            depth -= 1\n        else:\n            stock += 1\nprint('(' * stock + s + ')' * depth)\n"}
{"label": 65, "index": 8415, "code": "import sys\n\nn = int(input())\ns = input()\n\ntries = []\n\ndef count(S):\n    cnt = 0\n    for i in S:\n        if i == \"(\":\n            cnt += 1\n        else:\n            cnt -= 1\n    return cnt\n\ndef valid(S):\n    cnt = 0\n    for i in S:\n        if i == \"(\":\n            cnt += 1\n        else:\n            cnt -= 1\n        if cnt < 0:\n            return False\n    return True\n\ndef bt(S):\n    cnt = count(S)\n    if count(S) == 0 and valid(S):\n        tries.append(S)\n        return\n    else:\n        if cnt < 0:\n            return bt(\"(\" + S)\n        else:\n            return bt(S + \")\")\nbt(s)\nprint(min(tries))\n"}
{"label": 65, "index": 8416, "code": "N = int(input())\nS = list(input())\nr = 0\nl = 0\nfor s in S:\n\tif s == \"(\":\n\t\tl += 1\n\telse:\n\t\tif l == 0:\n\t\t\tr += 1\n\t\telse:\n\t\t\tl -= 1\nr2 = 0\nl2 = 0\nfor s in S[::-1]:\n\tif s == \")\":\n\t\tr2 += 1\n\telse:\n\t\tif r2 == 0:\n\t\t\tl2 += 1\n\t\telse:\n\t\t\tr2 -= 1\nS = [\"(\"] * r + S + [\")\"] * l\nprint(\"\".join(S))\n"}
{"label": 65, "index": 8417, "code": "N = int(input())\nS = list(input())\n\ncnt = 0\n\nans = []\n\nfor s in S:\n    if s ==\"(\":\n        if cnt >= 0:\n            cnt += 1\n            ans.append(s)\n        else:\n            ans.append(s)\n            cnt = 0 - cnt\n            for _ in range(cnt):\n                ans.insert(0, s)\n            cnt = 1\n    else:\n        if cnt <= 0:\n            cnt -= 1\n            ans.append(s)\n        else:\n            ans.append(s)\n            cnt -= 1\n\nif cnt > 0:\n    for _ in range(cnt):\n        ans.append(\")\")\nelif cnt < 0:\n    cnt = 0 - cnt\n    for _ in range(cnt):\n        ans.insert(0, \"(\")\n\nprint(''.join(ans))"}
{"label": 65, "index": 8418, "code": "N=int(input())\nS=input()\nopen=0\noutput=S\nfor c in S:\n    if c==\"(\":\n        open=open+1\n\n    else:\n        if open>0:\n            open=open-1\n        else:\n            output=\"(\"+output\n\nfor i in range(open):\n    if open>0:\n        output=output+\")\"\n\nprint(output)"}
{"label": 65, "index": 8419, "code": "n = input()\ns = input()\ncount = 0\ncountl = 0\nfor c in s:\n    if c=='(':\n        count += 1\n    else:\n        count -= 1\n    if count < 0:\n        countl += 1\n        count = 0\ncount = 0\ncountr = 0\nfor c in s[::-1]:\n    if c=='(':\n        count -= 1\n    else:\n        count += 1\n    if count < 0:\n        countr += 1  \n        count = 0\nprint('('*countl + s + ')'*countr)\n\n"}
{"label": 65, "index": 8420, "code": "input();s=input();r=l=0\nfor c in s:r=max(r-1+2*(c=='('),0)\nfor c in s[::-1]:l=max(l-1+2*(c==')'),0)\nprint(l*'('+s+')'*r)"}
{"label": 65, "index": 8421, "code": "# -*- coding: utf-8 -*-\n\nn = input()\ns = raw_input()\ncnt = 0\nflg = 1\nwhile(flg):\n    for i in range(len(s)):\n        if(s[i] == '('):\n            cnt += 1\n        elif(s[i] == ')'):\n            cnt -= 1\n            if(cnt<0):\n                s = '('+s\n                cnt = 0\n                break\n        if(i==len(s)-1):\n            flg = 0\nfor i in range(cnt):\n    s = s+')'\nprint(s)"}
{"label": 65, "index": 8422, "code": "n=int(input())\ns=input()\nstack=[]\nl=0\nr=0\nfor c in s:\n    if len(stack)>0 and stack[-1]=='(' and c==')':\n        stack.pop()\n    else:\n        stack.append(c)\nif len(stack)==0:\n    print(s)\nelse:\n    for c in stack:\n        if c==')':\n            l+=1\n        else:\n            r+=1\n    print('('*l+s+')'*r)\n"}
{"label": 65, "index": 8423, "code": "N = int(input())\nS = input().rstrip()\n\ndef solve(N, S):\n    n_close = 0\n    max_n_close = 0\n    for s in S:\n        if s == ')':\n            n_close += 1\n            max_n_close = max(max_n_close, n_close)\n        if s == '(':\n            n_close -= 1\n    SS = '(' * max_n_close + S\n    n_open = SS.count('(')\n    n_close = SS.count(')')\n    SSS = SS + ')' * (n_open - n_close)\n    return SSS\n\nprint(solve(N, S))"}
{"label": 65, "index": 8424, "code": "N = input()\nstring = [x for x in input()]\nstrings = string[:]  # manipulate\nstack = []\n\nfor i in range(len(strings)):\n    if strings[i] == '(':\n        stack.append(1)\n    elif strings[i] == ')':\n        if not stack:\n            string.insert(0,'(')\n        else:\n            stack.pop()\n\nif stack:\n    for i in range(len(stack)):\n        string.append(')')\n\nprint(''.join(string))\n"}
{"label": 65, "index": 8425, "code": "import sys\n\ndef main():\n    n = int(sys.stdin.readline())\n    s = sys.stdin.readline().rstrip()\n\n    level = 0 #level\u500b\u306e(\u62ec\u5f27\u304c\u958b\u3044\u3066\u3044\u308b\n    left_paren_app_num = 0\n    right_paren_app_num = 0\n\n    #\u30a4\u30ad\u30ca\u30ea)\u62ec\u5f27\u304c\u51fa\u3066\u304f\u308b\u304b\u3001\n    #(\u62ec\u5f27\u3067\u7d42\u308f\u3063\u3066\u3044\u308b\u3068\u30de\u30ba\u3044\n\n    for ch in s:\n        if ch == '(':\n            if level < 0:\n                left_paren_app_num += - level\n                level = 0\n            level += 1\n        elif ch == ')':\n            level -= 1\n\n    if level > 0:\n            right_paren_app_num += level\n            level = 0\n    elif level < 0:\n        left_paren_app_num += - level\n\n\n    l_s = \"\".join(['(' for i in range(left_paren_app_num)])\n    r_s = \"\".join([')' for i in range(right_paren_app_num)])\n    print(\"%s%s%s\" % (l_s, s, r_s))\n    return 0\n\nif __name__ == '__main__':\n    sys.exit(main())\n"}
{"label": 65, "index": 8426, "code": "if __name__ == \"__main__\":\n\tN = int(input())\n\tS = input()\n\tleft = []\n\tright = []\n\tfor i,p in enumerate(S):\n\t\tif p == '(':\n\t\t\tleft.append(i)\n\t\telse:\n\t\t\tif (len(left) > 0):\n\t\t\t\tleft.pop(0)\n\t\t\telse:\n\t\t\t\tright.append(i)\n\tfor x in range(len(right)):\n\t\tS = '(' + S\n\tfor x in range(len(left)):\n\t\tS = S + ')'\n\tprint (S)\n"}
{"label": 65, "index": 8427, "code": "import sys\n\n# sys.stdin = open(\"d1.in\")\n\nn = int(input())\ns = input()\n\nc = 0\nm = 0\nM = 0\n\nfor l in s:\n    if l == '(':\n        c += 1\n    if l == ')':\n        c -= 1\n    if m > c:\n        m = c\n    if M < c:\n        M = c\n\nleft = '(' * (-m)\nc += -m\nright = ')' * c\nres = left + s + right\nprint(res)\n"}
{"label": 65, "index": 8428, "code": "n = int(input())\ns = input()\nbf = []\naf = []\nst = ['*']\n\nfor c in s:\n    pre = st[-1]\n    st.append(c)    \n\n    if c ==  ')':\n        if (pre == '(') :\n            st.pop()\n            st.pop()\n            af.pop()\n            continue\n        bf.append('(')\n    else:\n        af.append(')')\nans = ''.join(bf) + s + ''.join(af)\nprint(ans)\n\n"}
{"label": 65, "index": 8429, "code": "import sys\n \nstdin = sys.stdin\n \nni = lambda: int(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nns = lambda: stdin.readline()\n\n\nn = ni()\ns = ns()\n\nlevel = 0\nleft = 0\n\nfor i in range(0, n):\n    if s[i] == '(':\n        level += 1\n    else:\n        level -= 1\n    \n    if level + left < 0:\n        left += 1\n    \nlevel += left\n\nprint('(' * left + s[0:n] + ')' * level)\n"}
{"label": 65, "index": 8430, "code": "N = int(input())\nS = input()\n\ndef step(queue_l, queue_r, c):\n    if c == '(':\n        queue_l += 1\n    else:\n        if queue_l > 0:\n            queue_l -= 1\n        else:\n            queue_r += 1\n    return (queue_l, queue_r)\n\n\nout = []\nqueue_l = 0\nqueue_r = 0\nfor c in S:\n    queue_l, queue_r = step(queue_l, queue_r, c)\n\nprint('(' * queue_r + S + ')' * queue_l)"}
{"label": 65, "index": 8431, "code": "import copy\n\nif __name__ == \"__main__\":\n\n    N = int(input())\n    s = input().replace(\"\\n\",\"\")\n\n    left = 0\n    cp_s = copy.copy(s)\n    for c in s:\n        if c == \"(\":\n            left += 1\n        else:\n            left -= 1\n        if left < 0:\n            cp_s = \"(\" + cp_s\n            left += 1\n    if left > 0:\n        cp_s = cp_s + \")\"*left\n    print(cp_s)\n"}
{"label": 65, "index": 8432, "code": "N=input()\nbrac = raw_input()\nans = brac\n\nwhile '()' in brac:\n\tbrac=brac.replace('()','')\n\nleft=brac.count('(')\nright=brac.count(')')\n\nprint '('*right +ans +')'*left"}
{"label": 65, "index": 8433, "code": "def makeinsert(s):\n\tleft = 0\n\tinserttop = ''\n\tfor i in range(0, len(s)):\n\t\tif s[i] == '(':\n\t\t\tleft += 1\n\t\telse:\n\t\t\tif left > 0:\n\t\t\t\tleft -= 1\n\t\t\telse:\n\t\t\t\tinserttop = '(' + inserttop\n\tinsertbottom = ''\n\tfor i in range(0, left):\n\t\tinsertbottom = insertbottom + ')'\n\treturn inserttop + s + insertbottom\n\nraw_input()\ns = raw_input()\n\nprint makeinsert(s)\n"}
{"label": 65, "index": 8434, "code": "N = input()\nS = raw_input()\n\nopened = 0\nmin_opened = 0\nfor c in S:\n    if c == '(' :\n        opened += 1\n    else:\n        opened -= 1\n        min_opened = min(opened, min_opened)\n\nclosed = 0\nmin_closed = 0\nfor c in S[::-1]:\n    if c == ')' :\n        closed += 1\n    else:\n        closed -= 1\n        min_closed = min(closed, min_closed)\n\nop = '(' * -min_opened if min_opened < 0 else ''\ncl = ')' * -min_closed if min_closed < 0 else ''\nprint op + S + cl\n"}
{"label": 65, "index": 8435, "code": "import sys\n\nstdin = sys.stdin\n\nni = lambda: int(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nns = lambda: stdin.readline()\n\nn = ni()\ns = ns().strip()\nh = 0\nminh = 0\nfor c in s:\n    if c == \"(\":\n        h += 1\n    else:\n        h -= 1\n    minh = min(minh, h)\nprint(\"(\"*(-minh) + s + \")\"*(h-minh))\n"}
{"label": 65, "index": 8436, "code": "input()\n\ns = raw_input().strip()\n\nl = \"(\"\nr = \")\"\n\nl_c = 0\nr_c = 0\nfor c in s:\n    if c == l:\n        l_c+=1\n    elif c == r:\n        if l_c>0:\n            l_c-=1\n        else:\n            r_c+=1\n            \nprint \"(\" * r_c + s + \")\" * l_c"}
{"label": 65, "index": 8437, "code": "input_line_1 = raw_input()\ninput_line_2 = raw_input()\n#N = int(input_line_1)\ncount_1 = 0\ncount_2 = 0\nfor kigou in input_line_2:\n\tif kigou == \"(\":\n\t\tcount_2 += 1\n\tif kigou == \")\":\n\t\tif count_2 > 0:\n\t\t\tcount_2 -= 1\n\t\telse:\n\t\t\tcount_1 += 1\n\t#print kigou, count_1, count_2\nprint count_1 * \"(\" + input_line_2 + count_2 * \")\"\n"}
{"label": 65, "index": 8438, "code": "n = int(raw_input())\ns = raw_input()\nm = 0\nc = 0\nfor si in s:\n    if si == \"(\":\n        c += 1\n    else:\n        c -= 1\n    m = min(m, c)\n\nans = \"\"\nif m < 0:\n    ans += \"(\" * (-m)\n    c += -m\n\nif c < 0:\n    ans = ans + \"(\" * (-c) + s\nelse:\n    ans = ans + s + \")\" * c\n\nprint ans"}
{"label": 65, "index": 8439, "code": "N = int(input())\nS = input()\n\noutput = ''\n\nhiraki = 0\ntoji = 0\nfor i in S:\n    if i == '(':\n        if toji > 0:\n            output = '(' * toji + output\n            toji = 0\n            hiraki += 1\n            output += i\n        else:\n            hiraki += 1\n            output += i\n    else:\n        if hiraki > 0:\n            hiraki -= 1\n            output += i\n        else:\n            toji += 1\n            output += i\n\noutput += ')' * hiraki\noutput = '(' * toji + output\n\nprint(output)\n"}
{"label": 65, "index": 8440, "code": "N = int(raw_input())\nS = raw_input()\nS_sub = S\nwhile (\"()\" in S):\n    S = S.replace(\"()\",\"\")\na = 0\nb = 0\nfor x in S:\n    if x == ')':\n        a += 1\n    else:\n        break\nfor x in S:\n    if x == '(':\n        b += 1\nprint \"(\" * a + S_sub + \")\" * b\n"}
{"label": 65, "index": 8441, "code": "import copy\n\nn = int(input())\ns = input()\ndeeps = copy.deepcopy(s)\n\nwhile s.count(\"()\") >= 1:\n    s = s.replace(\"()\",\"\")\n\nans = s.count(')')* '(' + deeps + s.count('(')*')'\n\nprint(ans)"}
{"label": 65, "index": 8442, "code": "n = int(input())\na = list(input())\nb = []\ncou1=0\n\nfor i in a:\n    if i==\"(\":\n        cou1 += 1\n        b.append(\"(\")\n    else:\n        b.append(\")\")\n        if cou1==0:\n            b.insert(0,\"(\")\n            continue\n        cou1 -= 1\n\nfor _ in range(cou1):\n    b.append(\")\")\n\nprint(*b,sep='')"}
{"label": 65, "index": 8443, "code": "n = int(input())\ns = input().rstrip()\n\ncur = 0\npre = 0\nfor c in s:\n    if c == '(':\n        cur += 1\n    else:\n        cur -= 1\n\n    if cur < 0:\n        pre += 1\n        cur += 1\n\nprint(\"(\"*pre + s + \")\"*cur)"}
{"label": 65, "index": 8444, "code": "N = int(input())\nS = list(input())\nOut =  S[:]\nwhile len(S) > 0:\n\tif S[0] == \")\":\n\t\tOut.insert(0,\"(\")\n\t\tdel S[0]\n\telif S[0] == \"(\":\n\t\ti = 0\n\t\tfor j in range(len(S)):\n\t\t\tif S[j] == \")\":\n\t\t\t\tdel S[j]\n\t\t\t\tdel S[0]\n\t\t\t\ti += 1\n\t\t\t\tbreak\n\t\t\telif j == len(S) - 1 :\n\t\t\t\tOut.append(\")\")\n\t\t\t\tdel S[0]\nprint(''.join(Out))"}
{"label": 65, "index": 8445, "code": "N = int(input())\nS = input()\n\na = 0\nb = 0\n\nfor s in S:\n    if s == \"(\":\n        a += 1\n    else:\n        if a > 0:\n            a -= 1\n        else:\n            b += 1\n            \nprint(\"(\"*b + S + \")\"*a)"}
{"label": 65, "index": 8446, "code": "# -*- coding: utf-8 -*-\ndef is_correct(s):\n    l = 0\n    for si in s:\n        if si == \"(\": l += 1\n        else: l -= 1\n        if l < 0: return False\n    return l == 0\n\nN = int(raw_input())\nS = raw_input()\n\nflag = False\nfor i in xrange(105):\n    for j in xrange(105):\n        T = \"(\"*i + S + \")\"*j\n        if is_correct(T):\n            print T\n            flag = True\n            break\n    if flag:\n        break\n\n"}
{"label": 65, "index": 8447, "code": "#!/usr/local/bin/python3.5 -tt\n\nimport random\nimport sys\n\nif __name__ == '__main__':\n    def _(f):\n        for l in f:\n            for i in l.split():\n                yield i\n\n    g = _(sys.stdin)\n\n    N, S = (int(next(g)),\n                next(g),\n    )\n\n    SS = S\n\n    while S:\n        while '()' in S:\n            S = S.replace('()', '')\n\n        while S.startswith(')'):\n            S = S[1:]\n            \n            SS = '(' + SS\n\n        while S.endswith('('):\n            S = S[:-1]\n\n            SS += ')'\n\n    print(SS)\n"}
{"label": 65, "index": 8448, "code": "import sys\nn = map(int, sys.stdin.readline().split())\na = sys.stdin.readline().strip()\nres = a\nh = 0\nfor i in range (len(a)):\n  if a[i] == '(':\n    h += 1\n  else:\n    h -= 1\n  if h < 0:\n    res = '(' + res\n    h = 0\n\nprint res + ')' * h\n\n\n\n"}
{"label": 65, "index": 8449, "code": "n = int(input())\ns = input()\nl = 0\nres = 0\nfor i in s:\n    if i == '(':\n        l += 1\n    elif l:\n        l -= 1\n    else:\n        res += 1\nprint(res * '(' + s + l * ')')"}
{"label": 66, "index": 8450, "code": "x,a,b = map(int,input().split())\nif b <= a:\n    print(\"delicious\")\nelif x >= b - a:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")"}
{"label": 66, "index": 8451, "code": "x, a, b = map(int, input().split())\nif b - a <= 0:\n    print(\"delicious\")\nelif 0 < b - a <= x:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")"}
{"label": 66, "index": 8452, "code": "x, a, b = (int(i) for i in input().split())\n\ne = b-a\n\nif e <= 0:\n    print(\"delicious\")\nelif e <= x:\n    print(\"safe\")\nelif e > x:\n    print(\"dangerous\")"}
{"label": 66, "index": 8453, "code": "x,a,b = map(int, input().split())\nif a-b>=0:\n    print(\"delicious\")\nelif x+a-b>=0:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")\n"}
{"label": 66, "index": 8454, "code": "x,a,b = input().split()\nx = int(x)\na=int(a)\nb = int(b)\n\nif a >=b:\n    print(\"delicious\")\nelif a+x >= b:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")"}
{"label": 66, "index": 8455, "code": "X,A,B = list(map(int,input().split()))\nif (B-A)<=X and (B-A)>0:\n    print(\"safe\")\nelif (B-A)<=0:\n    print(\"delicious\")\nelif (B-A)>X:\n    print(\"dangerous\")"}
{"label": 66, "index": 8456, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\nimport re\nimport math\nimport collections\nimport itertools\nimport functools\n\nDEBUG = True\nDEBUG = False\n\ndef dbg(*args):\n    if DEBUG:\n        print(\"DBG: \", file=sys.stderr, end=\"\")\n        print(*args, file=sys.stderr)\n\n\ndef feel(x, a, b):\n    if b <= a:\n        return \"delicious\"\n    elif b - a <= x:\n        return \"safe\"\n    else:\n        return \"dangerous\"\n\ndef main():\n    x, a, b = map(int, input().split())\n\n    print(feel(x, a, b))\n\nif __name__ == \"__main__\": main()\n"}
{"label": 66, "index": 8457, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\n\n\n\ndef main():\n    x,a,b = LI()\n    if a >= b:\n        return 'delicious'\n    if a+x >= b:\n        return 'safe'\n    return 'dangerous'\n\n\nprint(main())\n\n\n\n\n\n\n"}
{"label": 66, "index": 8458, "code": "a = list(map(int, input().split()))\nif a[1]-a[2] >=0:\n    print(\"delicious\")\nelif a[1]-a[2] + a[0] >=0:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")"}
{"label": 66, "index": 8459, "code": "S = input().split()\n \nif int(S[1]) >= int(S[2]):\n    print(\"delicious\")\nelif int(S[0])+int(S[1]) >= int(S[2]):\n    print(\"safe\")\nelse :\n    print(\"dangerous\")\n    "}
{"label": 66, "index": 8460, "code": "X,A,B =map(int,input().split())\n\n\nif B>=A+X+1:\n    print(\"dangerous\")\n\nelif B<=A:\n    print(\"delicious\")\n\nelse:\n    print(\"safe\")\n"}
{"label": 66, "index": 8461, "code": "X, A, B = map(int, input().split())\nif B - A <= 0:\n\tprint('delicious')\nelif B - A <= X:\n\tprint('safe')\nelse:\n\tprint('dangerous')"}
{"label": 66, "index": 8462, "code": "x, a, b = map(int, input().split(\" \"))\n\nif b <= a:\n    print(\"delicious\")\nelse:\n    print(\"safe\" if b-a <= x else \"dangerous\")\n"}
{"label": 66, "index": 8463, "code": "x = list(map(int,input().split()))\ny = x[2]-x[1]\nif y<=0:\n    print('delicious')\nelif y<=x[0]:\n    print('safe')\nelse:\n    print('dangerous')\n"}
{"label": 66, "index": 8464, "code": "# -*- coding: utf-8 -*-\n\"\"\"\nhttp://abc065.contest.atcoder.jp/tasks/abc065_a\n\n\"\"\"\nimport sys\nfrom sys import stdin\ninput = stdin.readline\n\n\ndef main(args):\n    X, A, B = map(int, input().split())\n    if A >= B:\n        print('delicious')\n    elif (A + X) >= B:\n        print('safe')\n    else:\n        print('dangerous')\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"label": 66, "index": 8465, "code": "\nx, a, b = map(int, input().split())\n\nif a >= b:\n    print(\"delicious\")\nelif b - a > x:\n    print(\"dangerous\")\nelse:\n    print(\"safe\")\n"}
{"label": 66, "index": 8466, "code": "XABstr = input().split()\nXAB = []\nfor n in XABstr:\n    XAB.append(int(n))\ndif = XAB[2]-XAB[1]\nif dif <= 0:\n    print('delicious')\nelif dif > 0:\n    if dif <= XAB[0]:\n        print('safe')\n    elif dif > XAB[0]:\n        print('dangerous')"}
{"label": 66, "index": 8467, "code": "x,a,b=map(int,input().split())\nif b<=a:\n    print('delicious')\nelif b<=a+x:\n    print('safe')\nelse:\n    print('dangerous')\n"}
{"label": 66, "index": 8468, "code": "x,a,b = map(int, input().split())\n\nif a >= b:\n    print(\"delicious\")\n\nelif b - a <= x:\n    print(\"safe\")\n\nelse:\n    print(\"dangerous\")\n"}
{"label": 66, "index": 8469, "code": "x,a,b = map(int,input().split())\nd = b-a\nif(d<=0):\n\tprint(\"delicious\")\nelif(d>0):\n\tif(d<=x):\n\t\tprint(\"safe\")\n\telse:\n\t\tprint(\"dangerous\")"}
{"label": 66, "index": 8470, "code": "X,A,B = map(int,input().split())\nif B <= A:\n   print(\"delicious\")\nelif B - A <= X:\n   print(\"safe\")\nelse:\n   print(\"dangerous\")"}
{"label": 66, "index": 8471, "code": "l = map(int, raw_input().split())\n\nX = l[0]\nA = l[1]\nB = l[2]\n\nif B - A > X:\n\tprint 'dangerous'\n\nif B - A <= X:\n\n\tif A >= B:\n\t\tprint 'delicious'\n\n\telse:\t\n\t\tprint 'safe'\n"}
{"label": 66, "index": 8472, "code": "x,a,b = map(int,input().split())\n\ny = a-b\nans = 'delicious'\nif y < 0:\n    if y >= -x:\n        ans = 'safe'\n    else:\n        ans = 'dangerous'\n\nprint(ans)\n"}
{"label": 66, "index": 8473, "code": "x,a,b = map(int, raw_input().split())\nif a >= b:\n    print 'delicious'\nelif b > a + x:\n    print 'dangerous'\nelse:\n    print 'safe'\n"}
{"label": 66, "index": 8474, "code": "ans = ['delicious', 'safe', 'dangerous']\n\ndef judge(x, a, b):\n\tif a >= b:\n\t\treturn 0\n\tif x + a >= b:\n\t\treturn 1\n\treturn 2\n\ninpt = map(int, raw_input().split())\nx = inpt[0]\na = inpt[1]\nb = inpt[2]\n\nprint ans[judge(x, a, b)]\n"}
{"label": 66, "index": 8475, "code": "X,A,B=map(int,raw_input().split(' '))\n\n\nif B-A<=0:\n    print 'delicious'\nelif B-A<=X:\n    print 'safe'\nelse:\n    print 'dangerous'"}
{"label": 66, "index": 8476, "code": "X, A, B = [int(n) for n in input().split()]\nif B <= A:\n  print(\"delicious\")\nelif B<=A+X:\n  print(\"safe\")\nelse:\n  print(\"dangerous\")"}
{"label": 66, "index": 8477, "code": "x,a,b = [int(i) for i in input().split()]\nif (b-a)>x:\n    print(\"dangerous\")\nelif b-a>0:\n    print(\"safe\")\nelse :\n    print(\"delicious\")\n"}
{"label": 66, "index": 8478, "code": "def a():\n    X, A, B = map(int, input().split())\n    print(\n        'delicious' if B-A <= 0 else\n        'safe' if 0 < B-A <= X else\n        'dangerous'\n    )\n\na()"}
{"label": 66, "index": 8479, "code": "X,A,B = map(int,input().split())\n\nif B<=A:\n    print('delicious')\nelif B<=A+X:\n    print('safe')\nelse:\n    print('dangerous')\n"}
{"label": 66, "index": 8480, "code": "x, a, b = (int(i) for i in input().split())\nif b<=a:\n    print('delicious')\nelif b<=a+x:\n    print('safe')\nelse:\n    print('dangerous')\n"}
{"label": 66, "index": 8481, "code": "l = list(map(int, input().split()))\nborder = l[1] - l[2]\nif border < 0:\n    if l[0] >= abs(border):\n        print(\"safe\")\n    else:\n        print(\"dangerous\")\nelse:\n    print(\"delicious\")"}
{"label": 66, "index": 8482, "code": "\nX, A, B = (int(e) for e in input().split())\n\nif B - A <= 0:\n    print('delicious')\nelif B - A > X:\n    print('dangerous')\nelse:\n    print('safe')"}
{"label": 66, "index": 8483, "code": "X,A,B=map(int,input().split())\nif B<=A:\n    print(\"delicious\")\nelif B<=(A+X):\n    print(\"safe\")\nelse:\n    print(\"dangerous\")\n"}
{"label": 66, "index": 8484, "code": "# -*- coding: utf-8 -*-\n\nx, a, b = (int(i) for i in input().split())\nif a - b >= 0:\n    print(\"delicious\")\nelif a + x - b >= 0:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")"}
{"label": 66, "index": 8485, "code": "x, a, b = map(int, input().split())\nif b-a<=0:\n    print('delicious')\nelif b-a>x:\n    print('dangerous')\nelse:\n    print('safe')"}
{"label": 66, "index": 8486, "code": "def ini(): return int(input())\ndef inli(): return list(map(int, input().split()))\ndef inf(): return float(input())\ndef inlf(): return list(map(float, input().split()))\ndef inl(): return list(input())\ndef pli(): return \"\".join(list(map(str, ans)))\n\na=inli()\n\nif a[1]-a[2] >= 0:\n    print(\"delicious\")\nelif (a[0]+a[1])-a[2]>=0:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")\n"}
{"label": 66, "index": 8487, "code": "x, a, b = map(int, input().split())\nif b <= a:\n    print(\"delicious\")\nelse:\n    if (b - a) <= x:\n        print(\"safe\")\n    else:\n        print(\"dangerous\")"}
{"label": 66, "index": 8488, "code": "X,A,B =map(int,input().split())\n\nif B>=A+X+1:\n    print(\"dangerous\")\nelif B<=A:\n    print(\"delicious\")\nelif B>=X-A:\n    print(\"safe\")\n"}
{"label": 66, "index": 8489, "code": "x, a, b = map(int, input().split())\nif b - a <= 0:\n    print(\"delicious\")\nelif b - a <= x:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")"}
{"label": 66, "index": 8490, "code": "x,a,b = list(map(int,input().split()))\n\nif b>a+x:\n    print(\"dangerous\")\nelif b>a:\n    print(\"safe\")\nelse :\n    print(\"delicious\")\n"}
{"label": 66, "index": 8491, "code": "x, a, b = map(int, input().split())\n\nz = a - b\n\nif z >= 0:\n    print(\"delicious\")\nelif z*(-1) <= x:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")\n"}
{"label": 66, "index": 8492, "code": "# -*- coding:utf-8 -*-\nx,a,b = map(int, input().split())\nif a-b >= 0:\n    print(\"delicious\")\nelse:\n    if abs(a-b) <= x:\n        print(\"safe\")\n    else:\n        print(\"dangerous\")"}
{"label": 66, "index": 8493, "code": "x,a,b=map(int,raw_input().split())\nif a>=b:\n print 'delicious'\nelif b<=a+x:\n print 'safe'\nelse:\n print 'dangerous'\n"}
{"label": 66, "index": 8494, "code": "X, A, B = list(map(int, input().split()))\nif B-A <= 0: print(\"delicious\")\nelif B-A > X: print(\"dangerous\")\nelse: print(\"safe\")"}
{"label": 66, "index": 8495, "code": "if __name__==\"__main__\":\n    x, a ,b = map(int, input().split())\n    if b - a <= 0:\n        print(\"delicious\")\n    elif b - a <= x:\n        print(\"safe\")\n    else:\n        print(\"dangerous\")\n"}
{"label": 66, "index": 8496, "code": "X, A, B = map(int, raw_input().split())\nprint \"delicious\" if A >= B else \"safe\" if B - A <= X else \"dangerous\"\n"}
{"label": 66, "index": 8497, "code": "x, a, b = map(int, input().split())\n\nif b <= a:\n    print(\"delicious\")\nelif b <= a + x:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")"}
{"label": 66, "index": 8498, "code": "X,A,B = map(int,raw_input().split())\nif A-B >= 0:\n    print \"delicious\"\nelif B-A < X+1:\n    print \"safe\"\nelse:\n    print \"dangerous\""}
{"label": 66, "index": 8499, "code": "b, c, d = map(int, input().split())\nif d <= c :\n  print ('delicious')\nelif d - c <= b :\n  print ('safe')\nelse :\n  print ('dangerous')"}
{"label": 66, "index": 8500, "code": "[x,a,b] = [int(x) for x in input().split()]\nif -a+b<=0:\n    print('delicious')\nelif -a-x+b<=0:\n    print('safe')\nelse:\n    print('dangerous')\n"}
{"label": 66, "index": 8501, "code": "X, A, B = list(map(int, input().split(\" \")))\n\nif (A - B) >= 0:\n    print (\"delicious\")\nelif X - (B - A) >= 0:\n    print (\"safe\")\nelse :\n    print (\"dangerous\")\n"}
{"label": 66, "index": 8502, "code": "x,a,b=map(int,input().split())\n\nif b<=a:\n    print(\"delicious\")\nelif b<=x+a:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")"}
{"label": 66, "index": 8503, "code": "(x, a, b) = map(int, input().split())\n\nif(b<=a):\n    print(\"delicious\")\nelif(b-a<=x):\n    print(\"safe\")\nelse:\n    print(\"dangerous\")\n"}
{"label": 66, "index": 8504, "code": "x, a, b = (int(i) for i in input().split())\n\nif b-a>x:\n    print('dangerous')\nelif b-a>0:\n    print('safe')\nelse:\n    print('delicious')\n"}
{"label": 66, "index": 8505, "code": "x, a, b = [int(i) for i in input().split()]\nif (b - a) <= 0:\n    print(\"delicious\")\nelif b - a <= x:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")\n"}
{"label": 66, "index": 8506, "code": "[x,a,b] = list(map(int,input().split()))\nn = b - a\nif n > x:\n  print(\"dangerous\")\nelif n > 0:\n  print(\"safe\")\nelse:\n  print(\"delicious\")"}
{"label": 66, "index": 8507, "code": "X, A, B = map((int), input().split() )\nif(A >= B):\n    print(\"delicious\")\nelif(B - A <= X):\n    print(\"safe\")\nelse:\n    print(\"dangerous\")"}
{"label": 66, "index": 8508, "code": "x, a, b = map(int, input().split())\n\nif b-a <= 0:\n    print(\"delicious\")\nelif b-a <= x:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")\n"}
{"label": 66, "index": 8509, "code": "X, A, B = map(int, input().split())\nif   B <= A:\n    print('delicious')\nelif A < B and B <= A + X:\n    print('safe')\nelse:\n    print('dangerous')\n"}
{"label": 66, "index": 8510, "code": "X, A, B = list(map(int, input().split()))\n\nif A >= B:\n  print(\"delicious\")\nelif B - A <= X:\n  print(\"safe\")\nelse:\n  print(\"dangerous\") "}
{"label": 66, "index": 8511, "code": "# coding: utf-8\nx, a, b = map(int, input().split())\nif (b-a)<=0:\n    print(\"delicious\")\nelif x<(b-a):\n    print(\"dangerous\")\nelse:\n    print(\"safe\")"}
{"label": 66, "index": 8512, "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom __future__ import division, print_function\nimport sys\n\n\ndef main():\n    x, a, b = map(int, sys.stdin.readline().strip().split(\" \"))\n    if b - a <= 0:\n        print(\"delicious\")\n    elif b - a <= x:\n        print(\"safe\")\n    else:\n        print(\"dangerous\")\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 66, "index": 8513, "code": "X, A, B = list(map(int, input().split()))\n\nif A - B < -X:\n\tprint('dangerous')\nelif A - B >= 0:\n\tprint('delicious')\nelse:\n\tprint('safe')"}
{"label": 66, "index": 8514, "code": "X, A, B = list(map(int, input().split(\" \")))\n\nif (A - B) >= 0:\n    print(\"delicious\")\nelif (B - A) <= X:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")"}
{"label": 66, "index": 8515, "code": "x,a,b = list(map(int,input().split()))\nif (a - b >= 0):\n    print(\"delicious\")\nelif ((x + a) - b >= 0):\n    print(\"safe\")\nelse:\n    print(\"dangerous\")\n"}
{"label": 66, "index": 8516, "code": "x,a,b=map(int,input().split())\nprint((\"delicious\",\"safe\",\"dangerous\")[(a<b)+(x+a<b)])"}
{"label": 66, "index": 8517, "code": "x, a ,b = map(int, input().split(\" \"))\n\nif a >= b :\n    print(\"delicious\")\nelif x >= b - a :\n    print(\"safe\")\nelse:\n    print(\"dangerous\")\n    \n"}
{"label": 66, "index": 8518, "code": "# -*- coding: utf-8 -*-\nX, A, B = map(int, raw_input().split())\nif A >= B:\n    print 'delicious'\nelif A + X >= B:\n    print 'safe'\nelse:\n    print 'dangerous'"}
{"label": 66, "index": 8519, "code": "x,a,b=map(int,input().split())\nif b-a <= 0:\n    print('delicious')\nelif b-a <= x and b-a >0:\n    print('safe')\nelse:\n    print('dangerous')"}
{"label": 66, "index": 8520, "code": "if __name__ == '__main__':\n    X, A, B = list(map(int, input().split()))\n    if B - A <= 0:\n        print(\"delicious\")\n    elif B - A <= X:\n        print(\"safe\")\n    else:\n        print(\"dangerous\")\n"}
{"label": 66, "index": 8521, "code": "# -*- coding: utf-8 -*-\n\nX, A, B = [int(x) for x in input().split()]\n\nif A >= B:\n    print(\"delicious\")\nelif (A + X) >= B:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")\n"}
{"label": 66, "index": 8522, "code": "X, A, B = map(int, raw_input().split())\n\nif B - A <= 0:\n    print \"delicious\"\nelif B - A > X:\n    print \"dangerous\"\nelse:\n    print \"safe\"\n"}
{"label": 66, "index": 8523, "code": "X,A,B = map(int,input().split())\nif B <= A:\n  print('delicious')\nelif B-A <= X:\n  print('safe')\nelse:\n  print('dangerous')"}
{"label": 66, "index": 8524, "code": "data = input().split()\nX = int(data[0])\nA = int(data[1])\nB = int(data[2])\n\nif((A - B) >= 0):\n\tprint(\"delicious\")\nelse:\n\tif((B - A) <= X):\n\t\tprint(\"safe\")\n\telse:\n\t\tprint(\"dangerous\")\n\n"}
{"label": 66, "index": 8525, "code": "def main():\n    X, A, B = map(int, input().split())\n\n    if A >= B:\n        ans = 'delicious'\n    elif B - A <= X:\n        ans = 'safe'\n    else:\n        ans = 'dangerous'\n\n    print(ans)\n\nmain()\n"}
{"label": 66, "index": 8526, "code": "X,A,B=map(int,input().split())\nif B-A<=0:\n  print(\"delicious\")\nelif B-A<=X:\n  print(\"safe\")\nelse:\n  print(\"dangerous\")"}
{"label": 66, "index": 8527, "code": "# coding: utf-8\nX, A, B = map(int, input().split())\n\nif abs(B) <= abs(A):\n    print('delicious')\n\nelif abs(A) < abs(B) <= abs(A + X):\n    print('safe')\n\nelif abs(X + A) < abs(B):\n    print('dangerous')"}
{"label": 66, "index": 8528, "code": "first = input()\nsplit_first = first.split()\n\nd = int(split_first[0])\na = int(split_first[1])\nb = int(split_first[2])\n\nif a >= b:\n   print ('delicious')\nelif b - a <= d:\n   print ('safe')\nelse:\n   print ('dangerous')"}
{"label": 66, "index": 8529, "code": "X,A,B = [int(i) for i in input().split(\" \")]\nif B-A <= 0 :\n    print('delicious')\nelif B-A <= X :\n    print('safe')\nelse:\n    print('dangerous')"}
{"label": 66, "index": 8530, "code": "# encoding:utf-8\nX, A, B = list(map(int, input().split()))\nif B - A <= 0:\n\tprint(\"delicious\")\nelif B - A <= X:\n\tprint(\"safe\")\nelse:\n\tprint(\"dangerous\")\n"}
{"label": 66, "index": 8531, "code": "if(__name__==\"__main__\"):\n    X, A, B =[int(i) for i in input().split()]\n    #print(sum(a))\n    \n    if(A - B >= 0):\n        print(\"delicious\")\n    elif(abs(A - B) <= X):\n        print(\"safe\")\n    else:\n        print(\"dangerous\")"}
{"label": 66, "index": 8532, "code": "x,a,b = [int(x) for x in input().split()]\n\nif b <= a:\n\tprint('delicious')\nelif a < b <= a+x:\n\tprint('safe')\nelse:\n\tprint('dangerous')"}
{"label": 66, "index": 8533, "code": "X,A,B = map(int, raw_input().split())\n\nif B-A <= 0:\n    print 'delicious'\nelif B-A <= X:\n    print 'safe'\nelse:\n    print 'dangerous'\n"}
{"label": 66, "index": 8534, "code": "x,a,b=[int(i) for i in input().split()]\n\nif b-a<=0:\n print(\"delicious\")\nelif b-a<=x:\n print(\"safe\")\nelse:\n print(\"dangerous\")"}
{"label": 66, "index": 8535, "code": "# coding: utf-8\n\nx, a, b = map(int, raw_input().split())\n\nt = a - b\n\nif t >= 0:\n    print \"delicious\"\n    exit()\n\nif x+1 > -t:\n    print \"safe\"\nelse:\n    print \"dangerous\"\n"}
{"label": 66, "index": 8536, "code": "input_ = input().split(' ')\nX = int(input_[0])\nA = int(input_[1])\nB = int(input_[2])\nif B <= A:\n    print('delicious')\nelif  B <= A+X:\n    print('safe')\nelse:\n    print('dangerous')"}
{"label": 66, "index": 8537, "code": "# -*- coding: utf-8 -*-                                      \n\nimport sys\nimport subprocess\nimport json\nimport time\nimport math\nimport re\nimport sqlite3\n\nX, A, B = map(int, input().split())\n\nif   A >= B:     print(\"delicious\")\nelif A + X >= B: print(\"safe\")\nelse:           print(\"dangerous\")\n\n"}
{"label": 66, "index": 8538, "code": "import sys\n\n# sys.stdin = open('a1.in')\n\n\ndef read_int_list():\n    return list(map(int, input().split()))\n\n\ndef read_str_list():\n    return input().split()\n\n\ndef read_int():\n    return int(input())\n\n\ndef read_str():\n    return input()\n\n\nx, a, b = read_int_list()\nif x >= b:\n    print('delicious')\nelse:\n    if x >= b - a:\n        print('safe')\n    if x < b - a:\n        print('dangerous')\n"}
{"label": 66, "index": 8539, "code": "x,a,b = map(int,input().split())\nif b <= a:\n    print(\"delicious\")\nelif x >= b - a:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")"}
{"label": 66, "index": 8540, "code": "x, a, b =map(int, input().split(\" \"))\nif a >= b:\n    print(\"delicious\")\nelif x + a >= b:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")\n"}
{"label": 66, "index": 8541, "code": "# -*- coding: utf-8 -*-\n\ndigest_limit, days_ago, after_days = map(int, input().rstrip().split())\n\ndays_to_limit = after_days - days_ago\n\nif days_to_limit <= 0:\n    print('delicious')\nelif days_to_limit < digest_limit + 1:\n    print('safe')\nelse:\n    print('dangerous')"}
{"label": 66, "index": 8542, "code": "X,A,B=map(int,input().split())\nif A-B>=0:\n  print(\"delicious\")\nelif B-A<=X:\n  print(\"safe\")\nelse:\n  print(\"dangerous\")"}
{"label": 66, "index": 8543, "code": "# 4 3 6\n\nx, a, b = map(int, input().split())\ny = (-a + b)\n\nif y <= 0:\n print(\"delicious\")\nelif y <= x:\n print(\"safe\")\nelse:\n print(\"dangerous\")"}
{"label": 66, "index": 8544, "code": "z =list(map(int,input().split(\" \")))\nd=z[2]-z[1]\nif d<=0:\n  print(\"delicious\")\nelif d<=z[0]:\n  print(\"safe\")\nelse:\n  print(\"dangerous\")"}
{"label": 66, "index": 8545, "code": "a,b,c=map(int,input().split())\nif b<c:\n    if c-b>a:\n        print(\"dangerous\")\n    else:\n        print(\"safe\")\nelse:\n    print(\"delicious\")"}
{"label": 66, "index": 8546, "code": "X, A, B = map(int, input().split())\nif A + X - B >= 0:\n    if A - B >= 0:\n        print('delicious')\n    else:\n        print('safe')\nelse:\n    print('dangerous')\n"}
{"label": 66, "index": 8547, "code": "x,a,b = map(int,input().split())\nif b-a > 0 and x < b-a:\n    print(\"dangerous\")\nelif b-a > 0 and x >= b-a:\n    print(\"safe\")\nelse:\n    print(\"delicious\")"}
{"label": 66, "index": 8548, "code": "X ,A , B = map(int, input().split())\n\nif A >= B:\n    print(\"delicious\")\nelif (B - A) <= X:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")"}
{"label": 66, "index": 8549, "code": "X, A, B = [int(x) for x in input().split()]\nif A - B >= 0:\n\tprint(\"delicious\")\nelif X + A - B >= 0:\n\tprint(\"safe\")\nelse:\n\tprint(\"dangerous\")\n\n"}
{"label": 66, "index": 8550, "code": "def main():\n    x, a, b = map(int, input().split())\n    if b <= a: print(\"delicious\")\n    elif b <= a+x: print(\"safe\")\n    else: print(\"dangerous\")\n    \n\nif __name__ == \"__main__\":\n    main()"}
{"label": 66, "index": 8551, "code": "x, a, b = [int(i) for i in input().split()]\nif b - a <= 0:\n    print(\"delicious\")\nelif b - a <= x:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")"}
{"label": 66, "index": 8552, "code": "# -*- coding: utf-8 -*-\n#\u98df\u54c1\u3092\u304a\u3044\u3057\u304f\u611f\u3058\u305f\u5834\u5408 delicious\n#\u304a\u3044\u3057\u304f\u306f\u611f\u3058\u306a\u304b\u3063\u305f\u304c\u304a\u8179\u306f\u58ca\u3055\u306a\u304b\u3063\u305f\u5834\u5408 safe\n#\u304a\u8179\u3092\u58ca\u3057\u305f\u5834\u5408 dangerous \u3092\u51fa\u529b\u305b\u3088\u3002\n\n#X\uff1a\u6d88\u8cbb\u671f\u9650\u904e\u304e\u3066\u3082OK\u65e5\u6570\n#A\uff1a\u6d88\u8cbb\u671f\u9650\u524dA\u65e5\u306b\u8cfc\u5165\n#B\uff1aA\u65e5\u306b\u8cfc\u5165\u5f8c\u3001\u98df\u3079\u305f\u65e5\u306fB\u65e5\u5f8c\n\nData = input().split()\n\nX = int(Data[0])\nA = int(Data[1])\nB = int(Data[2])\n\nset1 = A-B\n\nif set1 >= 0:\n    print(\"delicious\")\n\nelif X + set1 >= 0:\n    print(\"safe\")\n\nelse:\n    print(\"dangerous\")\n\n"}
{"label": 66, "index": 8553, "code": "X,A,B=[int(i) for i in input().split()]\nprint(\"delicious\" if B-A<=0 else \"safe\" if B-A<=X else \"dangerous\")"}
{"label": 66, "index": 8554, "code": "x,a,b=map(int,input().split())\n\nif b-a<=0:\n    print(\"delicious\")\nelif b-a<=x:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")\n"}
{"label": 66, "index": 8555, "code": "X, A, B = map(int, input().split())\n\nif B - A <= 0:\n    print('delicious')\nelif B - A <= X:\n    print('safe')\nelse:\n    print('dangerous')\n"}
{"label": 66, "index": 8556, "code": "#!/usr/bin/python\n\nimport sys\n\ndef main(argv):\n    for line in sys.stdin:\n        X, A, B = map(lambda x: int(x), line.split(\" \", 3))\n        if B <= A:\n            print(\"delicious\")\n        elif (B - A) <= X:\n            print(\"safe\")\n        else:\n            print(\"dangerous\")\n\nif __name__ == \"__main__\":\n    main(sys.argv)"}
{"label": 66, "index": 8557, "code": "a = list(map(int, input().split(\" \")))\nx = a[0]\nA = a[1]\nB = a[2]\n\nkigen = A\nsafe = x + A\nif B <= kigen:\n    print(\"delicious\")\nelif B <= safe:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")"}
{"label": 66, "index": 8558, "code": "\nX,A,B = input().split(' ')\nX = int(X)\nA = int(A)\nB = int(B)\nif A + X < B:\n    print('dangerous')\nelif B <= A:\n    print('delicious')\nelse:\n    print('safe')"}
{"label": 66, "index": 8559, "code": "x, a, b = map(int, input().split())\n\nif a >= b:\n    print('delicious')\nelif a + x >= b:\n    print('safe')\nelse:\n    print('dangerous')\n"}
{"label": 66, "index": 8560, "code": "X, A, B = map(int, input().split())\n\nif A >= B:\n    print('delicious')\n\nelif A + X >= B:\n    print('safe')\n\nelse:\n    print('dangerous')"}
{"label": 66, "index": 8561, "code": "X, A, B = map(int, input().split())\nif B <= A:\n    print('delicious')\nelif A + X >= B:\n    print('safe')\nelse:\n    print('dangerous')"}
{"label": 66, "index": 8562, "code": "# coding: utf-8\nx, a, b = map(int, input().split())\nif (b-a) <= 0:\n    print('delicious')\nelif (b-a) > 0 and (b-a) <= x:\n    print('safe')\nelif (b-a) > x:\n    print('dangerous')"}
{"label": 66, "index": 8563, "code": "x,a,b=map(int,input().split())\nif b<=a:print('delicious')\nelif b-a<=x:print('safe')\nelse :print('dangerous')"}
{"label": 66, "index": 8564, "code": "\n\nX, A, B = map(int, input().split())\n\nD = B - A\n\nif D <= 0:\n    print('delicious')\nelif D <= X:\n    print('safe')\nelse:\n    print('dangerous')"}
{"label": 66, "index": 8565, "code": "X, A, B = map(int, input().split())\nif B-A>X:\n    print(\"dangerous\")\nelif A>=B:\n    print(\"delicious\")\nelse:\n    print(\"safe\")"}
{"label": 66, "index": 8566, "code": "x, a, b = map(int, input().split())\n\nif -a + b <= x:\n    if -a + b <= 0:\n        print('delicious')\n    else:\n        print('safe')\nelse:\n    print('dangerous')"}
{"label": 66, "index": 8567, "code": "X, A, B = map(int,input().split())\n\nif B <= A:\n    print(\"delicious\")\nelif B <= (A + X):\n    print(\"safe\")\nelif B >= (A + X):\n    print(\"dangerous\")\n"}
{"label": 66, "index": 8568, "code": "def main():\n    X, A, B = list(map(int, input().strip().split()))\n    answer = \"\"\n    if -A + B <= 0:\n        print(\"delicious\")\n    elif -A + B <= X:\n        print(\"safe\")\n    else:\n        print(\"dangerous\")\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 66, "index": 8569, "code": "num=raw_input('')\nnumberdays=num.split(' ')\nif int(numberdays[2])-int(numberdays[1])>int(numberdays[0]):\n    print 'dangerous'\nif 0<int(numberdays[2])-int(numberdays[1])<=int(numberdays[0]):\n    print 'safe'\nif int(numberdays[2])-int(numberdays[1])<=0:\n    print 'delicious'"}
{"label": 66, "index": 8570, "code": "x, a, b = map(int, raw_input().split())\n\nif b - a <= 0:\n\tprint \"delicious\"\nelif b - a <= x:\n\tprint \"safe\"\nelse:\n\tprint \"dangerous\""}
{"label": 66, "index": 8571, "code": "X, A, B = map(int, raw_input().split())\nif B > A + X:\n    print \"dangerous\"\nelif B > A:\n    print \"safe\"\nelse:\n    print \"delicious\""}
{"label": 66, "index": 8572, "code": "#! /usr/bin/env python3\n\nX, A, B = map(int, input().split())\na = 0\nif B > A : a = 1\nif B > X + A : a = 2\nprint(['delicious', 'safe', 'dangerous'][a])"}
{"label": 66, "index": 8573, "code": "x, a, b = map(int, input().split())\nif a >= b:\n    print(\"delicious\")\nelif b - a <= x:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")\n"}
{"label": 66, "index": 8574, "code": "X, A, B = map(int, input().split())\nif A >= B:\n    print(\"delicious\")\nelif B - A <= X:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")\n"}
{"label": 66, "index": 8575, "code": "x, a, b = map(int, input().split())\n\nif a >= b:\n    print(\"delicious\")\nelif b - a <= x:\n    print(\"safe\")\nelse:\n    print(\"dangerous\")"}
{"label": 66, "index": 8576, "code": "from sys import stdin\nx,a,b = map(int,stdin.readline().split())\nans = 'safe'\nif b-a > x:\n ans = 'dangerous'\nelif b<=a:\n ans = 'delicious'\n\nprint ans"}
{"label": 66, "index": 8577, "code": "def ri(): return int(input())\ndef rli(): return list(map(int, input().split()))\ndef ris(): return list(input())\ndef pli(a): return \"\".join(list(map(str, a)))\n\nx,a,b = rli()\nif(a-b >= 0):\n    print(\"delicious\")\nelif(b-a <= x):\n    print(\"safe\")\nelse:\n    print(\"dangerous\")"}
{"label": 66, "index": 8578, "code": "x, a, b = map(int, input().split())\n \nif b <= a:\n    print('delicious')\nelif (b-a) <= x:\n    print('safe')\nelse:\n    print('dangerous')"}
{"label": 66, "index": 8579, "code": "X,A,B= map(int,input().split())\n\nif B <= A :\n    print(\"delicious\")\nelif X < B - A :\n    print(\"dangerous\")\nelse :\n    print(\"safe\")"}
{"label": 67, "index": 8580, "code": "n=int(input())\narr=[]\nfor _ in range(n):\n    arr.append(int(input())-1)\ncur=0\nfor i in range(n):\n    nxt = arr[cur]\n    if nxt==0:\n        print(-1)\n        break\n    elif nxt==1:\n        print(i+1)\n        break\n    cur=nxt\nelse:\n    print(-1)\n"}
{"label": 67, "index": 8581, "code": "# -*- coding: utf-8 -*-\n\n#\u30dc\u30bf\u30f31\u2192\u3044\u308d\u3044\u308d\u3042\u3063\u3066\u30dc\u30bf\u30f32\u3067\u7d42\u308f\u308b\u306a\u3089\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u56de\u6570\u3001\u7121\u7406\u306a\u3089-1\u3092\u51fa\u529b\n\nN = int(input())\n\nBo = []\n\nfor i in range(N):\n    A = int(input())\n    Bo.append(A)\n\n\nS = Bo[0]\n\nif S == 2:\n    print(1)\n\nelse:\n    \n    ans = []\n    \n    for i in range(N):\n        S = Bo[S - 1]\n        \n        if S == 2:\n            C = i + 2\n            ans.append(C)\n        \n    if len(ans) != 0:\n        print(ans[0])\n    \n    else:\n        print(-1)\n\n  \n    "}
{"label": 67, "index": 8582, "code": "N = int(input())\na = [int(input()) for x in range(N)]\n\ncount = 1\nflag = False\nplace = 1\nfor i in range(N):\n    place = a[place-1]\n    if place == 2:\n        flag = True\n        print(count)\n        break\n    else:\n        count +=1\nif flag == False:\n    print(-1)"}
{"label": 67, "index": 8583, "code": "import sys\n\nN = int(input())\na = [int(i) for i in sys.stdin]\n    \ns = a[0]\ncnt = 1\n\nfor i in range(N):\n    if s == 2:\n        print(cnt)\n        exit()\n    cnt += 1\n    s = a[s-1]\n    \nprint(-1)"}
{"label": 67, "index": 8584, "code": "from collections import defaultdict\n\n\ndef main():\n    N = int(input())\n    a_list = [int(input()) for _ in range(N)]\n    used = set()\n    now = 1\n    ans = 0\n    while True:\n        if now == 2:\n            print(ans)\n            return\n        now = a_list[now - 1]\n        if now in used:\n            print(-1)\n            return\n        used.add(now)\n        ans += 1\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 67, "index": 8585, "code": "def main():\n    N = int(input().strip())\n    a = [int(input().strip())\n         for i in range(N)]\n\n    b = 1\n    pushed = set()\n    push_count = 0\n    while True:\n        push_count += 1\n        pushed.add(b)\n        b = a[b - 1]\n        if b in pushed:\n            print(-1)\n            break\n\n        if b == 2:\n            print(push_count)\n            break\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 67, "index": 8586, "code": "# -*- coding: utf-8 -*-\n\n\nn = int(input())\na = []\nfor i in range(n):\n    a.append(int(input()))\nif 2 not in a:\n    print(-1)\nelse:\n    cnt = 0\n    before_num = 1\n    lighted_bottons = [0 for i in range(n + 1)]\n    while True:\n        cnt += 1\n        if a[before_num - 1] == 2:\n            print(cnt)\n            break\n        else:\n            if lighted_bottons[a[before_num - 1]] == 1:\n                print(-1)\n                break\n            before_num = a[before_num - 1]\n            lighted_bottons[before_num] = 1"}
{"label": 67, "index": 8587, "code": "n = int(input())\na = []\nfor _ in range(n):\n    s = int(input())\n    a.append(s-1)\n\nvis = [False for _ in range(n)]\n\nans = 0\nnow = 0\nwhile True:\n    if vis[now]:\n        ans = -1\n        break\n\n    vis[now] = True\n    ans += 1\n    now = a[now]\n    if now == 1:\n        break\n\nprint(ans)\n"}
{"label": 67, "index": 8588, "code": "# -*- coding: utf-8 -*-\n\nimport sys\nimport subprocess\nimport json\nimport time\nimport math\nimport re\nimport sqlite3\n\nN = int(input())\na = [int(input()) - 1 for i in range(N)]\n\nvisited = [False] * N\ncur = 0\ncnt = 0\nwhile True:\n    if visited[cur]:\n        print(-1)\n        exit(0)    \n    if cur == 1:\n        print(cnt)\n        exit(0)\n\n    visited[cur] = True    \n    cur = a[cur]\n    cnt += 1\n"}
{"label": 67, "index": 8589, "code": "N = int(input())\n\na_n=[int(input()) for i in range(N)]\nimport sys\n\ni=1\ncount=0\nfor k in range(N):\n    if a_n[i-1]==2:\n        count+=1\n        print(count)\n        sys.exit()\n    else:\n        i=a_n[i-1]\n        count+=1\n\nprint(-1)"}
{"label": 67, "index": 8590, "code": "def b():\n    N = int(input())\n    A = {i:int(input()) for i in range(1,N+1)}\n    tmp = 1; times = 0\n    for _ in range(N):\n        tmp = A[tmp]; times += 1\n        if tmp == 2:\n            print(times)\n            break\n        elif tmp == 1:\n            print(-1)\n            break\n    else:\n        print(-1)\n\n\nb()\n"}
{"label": 67, "index": 8591, "code": "N = int(input())\n\na = []\nfor _ in range(N):\n    a.append(int(input()))\n\nans = 1\nbutton = a[0]\nfor i in range(N):\n    if button == 2:\n        break\n    button = a[button-1]\n    ans += 1\n    \nif ans >= N+1:\n    print(-1)\nelse:\n    print(ans)"}
{"label": 67, "index": 8592, "code": "n = int(input())\na = [int(input()) if(i) else 0 for i in range(n+1)]\ndistance = [None] * (n+1)\nqueue = [(1, 0)]\nwhile(len(queue)):\n    p, d = queue.pop()\n    if(p==2):\n        print(d)\n        break\n    if(distance[p]!=None or d==100001):\n        print(-1)\n        break\n    distance[p] == d\n    nextp = a[p]\n    queue.append((nextp, d+1))\n"}
{"label": 67, "index": 8593, "code": "#x,a,b=[int(i) for i in input().split()]\n\nN=int(input())\na=[int(input()) for i in range(N)]\nlight=[0 for i in range(N)]\nlight[0]=1\npush=0\nbotton=0\n\nfor k in range(N):\n\n light[botton]=0\n light[a[botton]-1]=1\n\n botton=a[botton]-1\n push=push+1\n if light[1]==1:\n   print(push)\n   break\n\n\n\n\nif light[1]!=1:\n  print(-1)\n"}
{"label": 67, "index": 8594, "code": "N = int(input())\na = []\nfor _ in range(N):\n    a.append(int(input()))\n    \ns = a[0]\ncnt = 1\n\nfor i in range(N):\n    if s == 2:\n        print(cnt)\n        exit()\n    cnt += 1\n    s = a[s-1]\n    \nprint(-1)"}
{"label": 67, "index": 8595, "code": "import sys\n\n\ndef main():\n    n = int(input())\n    buttons = [int(input()) for _ in range(n)]\n\n    def push(x):\n        return buttons[x - 1]\n\n    seq = [push(1)]\n\n    for _ in range(n):\n        if seq[-1] == 2:\n            print(len(seq))\n            return 0\n        seq += [push(seq[-1])]\n\n    print(-1)\n\n    return 0\n\n\nif __name__ == '__main__':\n    sys.exit(main())\n"}
{"label": 67, "index": 8596, "code": "N = int(input())\na = []\nfor _ in range(N):\n    a.append(int(input()))\n\ncnt = 0\ns = a[0]\n\nif s == 2:\n    print(cnt + 1)\nelse:\n    for i in range(N):\n        s = a[s-1]\n        cnt += 1\n        if s ==  2:\n            print(cnt + 1)\n            break\n        if i == N-1:\n            print('-1')"}
{"label": 67, "index": 8597, "code": "n = int(input())\narr = [int(input()) for i in range(n)]\npush = 1\ncount = 0\nwhile count <= n:\n    push = arr[push - 1]\n    count += 1\n    if push == 2:\n        print(count)\n        break\nelse:\n    print(-1)"}
{"label": 67, "index": 8598, "code": "n = int(input())\na_list = list([0])\nfor _ in range(n):\n    a_list.append(int(input()))\n    \ncount = 0\nbangou = 1\n\nwhile bangou > 0:\n    if a_list[bangou] == 0:\n        print(\"-1\")\n        break\n    bangou_next = a_list[bangou]\n    count += 1\n    if bangou_next == 2:\n        print(count)\n        break\n    \n    a_list[bangou] = 0\n    bangou = bangou_next\n"}
{"label": 67, "index": 8599, "code": "N = int(input())\nA = []\nfor i in range(N):\n\tA.append(int(input()))\ncnt = 0\nlight = 1\nfor i in range(N):\n\tcnt += 1\n\tlight = A[light - 1]\n\tif light == 2:\n\t\tbreak\n\nif cnt == N:\n\tprint(-1)\nelse:\n\tprint(cnt)"}
{"label": 67, "index": 8600, "code": "N = int(input())\na = [int(input()) for i in range(N)]\nc = 1\ntf = False\nfor i in range(N):\n    c = a[c-1]\n    if c == 2:\n        print(i+1)\n        tf = True\n        break\nif not tf:\n    print(-1)"}
{"label": 67, "index": 8601, "code": "N=int(input())\na=[int(input()) for _ in range(N)]\nb=[False]*N\ncount=0\ni=0\nb[i]=True\nflag=True\nwhile b[1]!=True:\n    if(b[a[i]-1]==True):\n        print(-1)\n        flag=False\n        break\n    b[a[i]-1]=True\n    i=a[i]-1\n    count+=1\nif flag:\n    print(count)"}
{"label": 67, "index": 8602, "code": "def solve():\n    n = int(input())\n    l = []\n\n    for i in range(n):\n        l.append(int(input()))\n\n    a = 1\n    hist = set([])\n    while(True):\n        if(a-1 in hist):\n            return -1\n        if(a-1 == 1):\n            return len(hist)\n        hist.add(a-1)\n        a = l[a-1]\n\nif(__name__ == \"__main__\"):\n    print(solve())\n"}
{"label": 67, "index": 8603, "code": "# coding: utf-8\n\nn = input()\na = [input() for _ in xrange(n)]\ni = 1\nc = 0\n\nwhile True:\n    a[i-1], i = 0, a[i-1]\n    c += 1\n\n    if i == 2:\n        print c\n        exit()\n\n    if a[i-1] == 0:\n        print -1\n        exit()\n"}
{"label": 67, "index": 8604, "code": "n = int(input())\na = []\nfor i in range(n):\n    a.append(int(input())-1)\n \nlight=0\n \nfor i in range(1,n+1):\n    light=a[light]\n    if light == 1:\n        print(i)\n        break\nelse:\n    print(-1)"}
{"label": 67, "index": 8605, "code": "N = int(input())\na = []\nfor i in range(N):\n  a.append(int(input())-1)\n\nnow = 0\ncnt = -1\nfor i in range(1, N):\n  now = a[now]\n  if(now == 1):\n    cnt = i\n    break\n\nprint(cnt)"}
{"label": 67, "index": 8606, "code": "n = int(raw_input())\nl = [[0,False]]\nfor _ in range(n):\n    l.append([int(raw_input()), False])\nl[1][1] = True\np = 1\nwhile True:\n    p = l[p][0]\n    if l[p][1] == True:\n        break\n    l[p][1] = True\n    if p == 2:\n        break\nif l[2][1] == True:\n    c = 0\n    for [_,f] in l:\n        if f == True:\n            c += 1\n    print c - 1\nelse:\n    print -1\n"}
{"label": 67, "index": 8607, "code": "n = int(input())\na_list = []\nfor i in range(n):\n    a_list.append(int(input()))\ncnt = 1\ni = 0\nwhile a_list[i] != 2:\n    i = a_list[i] - 1\n    cnt += 1\n    if len(a_list) < cnt:\n        cnt = -1\n        break\n\nprint(cnt)"}
{"label": 67, "index": 8608, "code": "N = int(input())\n\na = []\n\nfor i in range(N):\n    a.append(int(input()) - 1)\n\nc = a[0]\n\nfor i in range(N+1):\n    if c == 1:\n        print(i + 1)\n        break\n    c = a[c]\nelse:\n    print(-1)\n\n\n"}
{"label": 67, "index": 8609, "code": "import sys\n\nn=int(raw_input())\nl=[]\ncnt=0\nfor i in xrange(n):\n l.append(int(raw_input()))\nif l[0]==2:\n print 1\n sys.exit()\ni=0\ncnt=1\nnext=0\nwhile i<n:\n next=l[next]-1\n if l[next]==2:\n  print cnt+1\n  sys.exit()\n cnt+=1\n i+=1\nprint -1\n"}
{"label": 67, "index": 8610, "code": "n = int(input())\nls = []\nfor i in range(n):\n  ls.append([int(input())-1,False])\ncount = 0\nx = 0\nwhile (x != 1):\n  if ls[x][1]:\n    count = -1\n    break\n  else:\n    count += 1\n    ls[x][1] = True\n    x = ls[x][0]\nprint(count)"}
{"label": 67, "index": 8611, "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom __future__ import division, print_function\nimport sys\n\n\ndef main():\n    n = int(sys.stdin.readline().strip())\n    a = []\n    for _ in range(n):\n        a.append(int(sys.stdin.readline().strip()))\n\n    visited = set()\n\n    i = 0\n    counter = 0\n    while True:\n        if i in visited:\n            print(-1)\n            break\n        visited.add(i)\n        i = a[i] - 1\n        counter += 1\n        if i == 1:\n            print(counter)\n            break\n    #     pass\n    # a[0]\n    # if 2 not in a:\n    #     print(-1)\n    #     return\n    # print(n, a)\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 67, "index": 8612, "code": "import sys\n\nN = int(input())\na = []\nfor i in range(N):\n    a.append(int(input()))\n\ncount = 0\nnow = 1\n\nwhile count < N:\n    count += 1\n    now = a[now - 1]\n    if now == 2:\n        print(count)\n        sys.exit()\n\nprint(-1)\n"}
{"label": 67, "index": 8613, "code": "N = int(input())\na = []\n\nfor i in range(N):\n    a.append(int(input()))\n\ni = 0\nnow = 0\nwhile True:\n    if now == 1:\n        print(i)\n        break\n    if i == N:\n        print(\"-1\")\n        break\n    now = a[now] - 1\n    i = i + 1"}
{"label": 67, "index": 8614, "code": "N = int(input())\na = [[int(input()), False] for i in range(N)]\n\n\nnum = 1\nfor i in range(N):\n    if a[num-1][1]:\n        print(-1)\n        break\n    if a[num-1][0] == 2:\n        print(i+1)\n        break\n    a[num-1][1] = True\n    num = a[num-1][0]"}
{"label": 67, "index": 8615, "code": "n = int(input()) \nxs = [int(input())-1 for i in range(n)]\nv = [False] * n\n\ni = 0\nans = 0\nwhile True:\n  if i == 1:\n    break\n  elif v[i]:\n    ans = -1\n    break\n  v[i] = True\n  ans += 1\n  i = xs[i]\n\nprint(ans)\n"}
{"label": 67, "index": 8616, "code": "N = int(input())\na = [input() for i in range(N)]\n\nnow = 1\ncount = 0\n\nfor i in range(N):\n    if now != 2:\n        now = int(a[now-1])\n        count += 1\n    else:\n        print(count)\n        break\n\nif count == N:\n    print(-1)\n"}
{"label": 67, "index": 8617, "code": "N = int(input())\na = [int(input()) - 1 for i in range(N)]\n\nbtn = 0\nhist = set()\nans = 0\nwhile True:\n    if btn == 1:\n        break\n\n    if btn in hist:\n        ans = -1\n        break\n\n    hist.add(btn)\n    btn = a[btn]\n    ans += 1\n\nprint(ans)\n"}
{"label": 67, "index": 8618, "code": "# -*- coding: utf-8 -*-\n\"\"\"\nhttp://abc065.contest.atcoder.jp/tasks/abc065_b\n\n\"\"\"\nimport sys\nfrom sys import stdin\ninput = stdin.readline\n\n\ndef main(args):\n    N = int(input())\n    a = [int(input()) for _ in range(N)]\n    a.insert(0, '@')            #  1\u8d77\u7b97\u306b\u3059\u308b\u305f\u3081\u306e\u30c0\u30df\u30fc\n\n\n    possible = False\n    next_btn = a[1]\n    visited = set([1])\n    while next_btn not in visited:\n        if next_btn == 2:\n            possible = True\n            break\n        visited.add(next_btn)\n        next_btn = a[next_btn]\n    if possible:\n        print(len(visited))\n    else:\n        print(-1)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"label": 67, "index": 8619, "code": "N=int(input())\na=list(int(input()) for i in range(N))\nj=0\ni=1\nwhile j < N:\n    i=a[i-1]\n    j+=1\n    if(i==2):\n        print(j)\n        break\nelse:\n    print(\"-1\")"}
{"label": 67, "index": 8620, "code": "n=int(input())\na=[]\nc=[0]*n\nfor i in range(n):\n    a.append(int(input()))\n\ncount=1\nans=0\n\nwhile c[1]==0:\n\n    if c[count-1] != 0:\n        print(-1)\n        exit()\n    else:\n        c[count-1]=1\n        count=a[count-1]\n        ans += 1\n\n\nprint(ans-1)\n\n\n\n    \n"}
{"label": 67, "index": 8621, "code": "N = int(raw_input())\na = [int(raw_input()) for i in xrange(N)]\ni = 0\nans = 0\nwhile True:\n    if a[i] == -1:\n        break\n    ni = a[i] - 1\n    a[i] = -1\n    i = ni\n    ans += 1\n    if i == 1:\n        break\nprint ans if a[i] != -1 else -1\n\n"}
{"label": 67, "index": 8622, "code": "#python\nimport sys\n\nN = input()\na = []\nfor i in range(N):\n\ta.append(input())\n#print a\n\nif 2 not in a:\n\tprint \"-1\"\n\tsys.exit()\n\ni=1\n\nwhile a[i-1]!=2:\n\n\tif a[i-1]==0:\n\t\tprint \"-1\"\n\t\tsys.exit()\n\n\t#print i,a[i-1]\n\tbefore=i\n\ti=a[i-1]\n\ta[before-1]=0\n\t#print a\n\t\n\nprint a.count(0)+1\n"}
{"label": 67, "index": 8623, "code": "N = int(input())\na = []\nfor _ in range(N):\n    a.append(int(input()))\n\nidx = 0\nsuccess = False\nfor i in range(N):\n    idx = a[idx]-1\n    if idx == 1:\n        print(\"%d\"%(i+1))\n        success = True\n        break\n        \nif success == False:\n    print(\"%d\"%(-1))"}
{"label": 67, "index": 8624, "code": "n = int(input())\nli = []\n\nfor i in range(n):\n    a = int(input())\n    li.append(a)\n\ni = 0\nj = 0\ncount = 0\nans = 0\n\nwhile i >= 0:\n    if i == 1:\n        ans += 1\n        break\n    else:\n        j = i\n        i = li[i] - 1\n        count += 1\n        li[j] = 0\nif ans == 1:\n    print(count)\nelse:\n    print(-1)\n"}
{"label": 67, "index": 8625, "code": "N=int(input())\nA=[ int(input()) - 1 for _ in range(N) ]\nB=[ False ] * N\n\nans = 0\ni=0\nwhile True:\n  if B[i]:\n    ans = -1\n    break\n  if i == 1:\n    break\n  B[i] = True\n  i = A[i]\n  ans += 1\nprint(ans)\n"}
{"label": 67, "index": 8626, "code": "import sys\nN=int(input())\na=[int(input()) for i in range(N)]\ni=1\ns=1\nwhile i<N:\n  if a[s-1]==2:\n    print(i)\n    sys.exit()\n  s=a[s-1]\n  i+=1\n  \nprint(-1)"}
{"label": 67, "index": 8627, "code": "n = int(input())\nbuttons = []\nfor _ in range(n):\n    buttons.append(int(input()))\ndef calc():\n    count = 0\n    now = 1\n    flag = True\n    for i in range(n):\n        if not flag:\n            pass\n        elif now == 2:\n            print(count)\n            flag = False\n        else:\n            now = buttons[now-1]\n        count += 1\n    if flag:\n        print(-1)\n\ncalc()"}
{"label": 67, "index": 8628, "code": "import collections\n\nN = int(input())\na = collections.deque()\nfor i in range(N):\n    a.append(int(input()))\n    \ns = a[0]\ncnt = 1\n\nfor i in range(N):\n    if s == 2:\n        print(cnt)\n        exit()\n    cnt += 1\n    s = a[s-1]\n    \nprint(-1)"}
{"label": 67, "index": 8629, "code": "N = int(raw_input())\nA = [int(raw_input()) - 1 for _ in range(N)]\n\nans = 0\ni = 0\nused = set([0, 1])\nwhile True:\n    if ans != 0 and i in used:\n        break\n    used.add(i)\n    i = A[i]\n    ans += 1\nif i != 1:\n    ans = -1\nprint ans\n"}
{"label": 67, "index": 8630, "code": "if __name__ == \"__main__\":\n    N = int(input())\n    a = [int(input()) for _ in range(N)]\n\n    index = 0\n    count = 0\n    number = 1\n    flags = [0 for _ in range(N)]\n    flags[index] = 1\n    while(number != 2):\n        number = a[index]\n        index = number - 1\n        count += 1\n        if flags[index] == 1:\n            break\n        else:\n            flags[index] = 1\n\n    if number == 2:\n        print(count)\n    else:\n        print(-1)"}
{"label": 67, "index": 8631, "code": "n = int(input())\na = [int(input()) for i in range(n)]\ncounter = 0\ni = 1\nwhile counter <= n:\n    i = a[i - 1]\n    counter += 1\n    if i == 2:\n        print(counter)\n        break\nelse:\n    print(-1)\n"}
{"label": 67, "index": 8632, "code": "if __name__ == \"__main__\":\n    N = int(input())\n    A = []\n    for x in range(N):\n        y = int(input())\n        y -= 1\n        A.append(y)\n    pos = 0\n    cnt = 0\n    visited = set()\n    while (cnt <= N + 1):\n        visited.add(pos)\n        if (pos == 1):\n            print (cnt)\n            exit()\n        pos = A[pos]\n        cnt += 1\n        if pos in visited:\n            break\n\n    print (-1)\n"}
{"label": 67, "index": 8633, "code": "N = int(input())\na = [0]\nfor i in range(N):\n    a.append(int(input()))\nhaspushed = [0]*(N+1)\nreach = 0\nitr = 1\ni = a[1]\nhaspushed[1] = 1\nwhile haspushed[i] == 0:\n    haspushed[i] = 1\n    if i == 2:\n        reach=1\n        break\n    i = a[i]\n    itr += 1\n\nif reach == 1:\n    print(itr)\nelse:\n    print(-1)"}
{"label": 67, "index": 8634, "code": "def solve(nexts):\n    pushed = {0}\n    now_on = 0\n    count = 0\n    while True:\n        now_on = nexts[now_on]\n        count += 1\n        if now_on in pushed:\n            return -1\n        if now_on == 1:\n            return count\n        pushed.add(now_on)\n\n\nn = int(input())\nprint(solve([int(input()) - 1 for _ in range(n)]))\n"}
{"label": 67, "index": 8635, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\n\n\n\ndef main():\n    n = I()\n    a = [I()-1 for _ in range(n)]\n    f = [False] * n\n    t = 0\n    c = 0\n    while True:\n        if t == 1:\n            return c\n        if f[t]:\n            return -1\n        f[t] = True\n        t = a[t]\n        c += 1\n\n\nprint(main())\n\n\n\n\n\n\n"}
{"label": 67, "index": 8636, "code": "# -*- coding: utf-8 -*-\na = {}\nN = int(input())\nfor i in range(N):\n    a[i+1] = (int(input()))\n\nlight = 1\ncount = 0\nwhile count < N:\n    \n    light = a[light]\n    count += 1\n\n    if light == 2:\n        print(count)\n        break\n\n    if count == N-1:\n        print(-1)\n        break\n"}
{"label": 67, "index": 8637, "code": "n = int(input())\na = [int(input()) for i in range(n)]\ncount = 0\nt = 0\nb = 0\n\nfor i in range(n) :\n    a[i] = a[i] - 1\nfor i in range(n) :\n    count = count + 1\n    if a[t] == 1 :\n        print (count)\n        b = 1\n        break\n    else :\n        t = a[t]\nif b == 0 :\n    print (-1)"}
{"label": 67, "index": 8638, "code": "n = int(input())\na = [int(input()) for i in range(n)]\nmemo = [0 for i in range(n+1)]\n\nind = 0\ncnt = 0\nwhile 1:\n    nex = a[ind]\n    cnt += 1\n    if nex == 2:\n        print(cnt)\n        break\n    if memo[nex] == 1:\n        print(-1)\n        break\n    memo[nex] = 1\n    ind = nex-1"}
{"label": 67, "index": 8639, "code": "# -*- coding:utf-8 -*-\nimport sys\nbutton = [int(i) for i in sys.stdin]\nnow = 1\ncount = 0\nfor i in range(button[0]):\n  if now == 2:\n    print(count)\n    exit()\n  now = button[now]\n  count += 1\nprint(-1)"}
{"label": 67, "index": 8640, "code": "n = int(input())\na = [int(input()) for i in range(n)]\n\nx = 1\ni = 0\n\nwhile i < 100000 and x != 2:\n    x = a[x-1]\n    i += 1\n\nif x == 2:\n    print(i)\nelse:\n    print(-1)\n"}
{"label": 67, "index": 8641, "code": "if(__name__==\"__main__\"):\n    N = int(input())\n    a =[int(input()) for i in range(N)]\n        \n    n = -1\n    flash = 0\n    for i in range(N):\n        flash = a[flash] - 1\n        if(flash == 1):\n            n = i + 1\n            break\n    \n    print(n)"}
{"label": 67, "index": 8642, "code": "N = int(raw_input())\na = []\nfor i in range(N):\n\ta.append(raw_input())\n#print a\nfor i in range(N):\n\ta[i] = int(a[i])\ncnt = 0\ntrn = 0\nwhile trn != 1:\n\tif trn == -2:\n\t\tcnt = -1\n\t\tbreak\n\t#print a\n\n\thako = trn\n\ttrn = a[trn] - 1\n\ta[hako] = -1\n\tcnt += 1\n\t\nprint cnt\n"}
{"label": 67, "index": 8643, "code": "N = int(input())\nbuttons = [int(input()) for i in range(N)]\nlight_offset = 0\ncnt = 0\n\nwhile True:\n    \n    if light_offset == 1:\n        print(cnt)\n        break\n    light_offset = buttons[light_offset] - 1\n    cnt += 1\n    \n    if cnt > N:\n        print(-1)\n        break\n    "}
{"label": 67, "index": 8644, "code": "n = int(input())\nlight = 1\ncount = 0\na = []\nfor i in range(n):\n    a.append(int(input()))\nwhile count < n:\n    light = a[light-1]\n    count += 1\n    if light == 2:\n        print(count)\n        quit()\nprint(-1)\n"}
{"label": 67, "index": 8645, "code": "x = input()\na = []\ncheck = []\nfor i in range(int(x)):\n    a.append(int(input()) - 1)\n    check.append(1)\n\nindex = 0\ncount = 0\n\n\nwhile True:\n    count += 1\n    check[index] = 0\n    index = a[index]\n\n    if check[index] == 0:\n        print(-1)\n        break\n    if index == 1:\n        print(count)\n        break\n"}
{"label": 67, "index": 8646, "code": "def solve():\n    n = int(input())\n    lst = [int(input())-1 for _ in[0]*n]\n    visit = set()\n    current = 0\n    while True:\n        visit.add(current)\n        current = lst[current]\n        if current == 1:\n            print(len(visit))\n            break\n        if current in visit:\n            print(-1)\n            break\n\nif __name__==\"__main__\":\n    solve()"}
{"label": 67, "index": 8647, "code": "import sys\n\n# sys.stdin = open('b1.in')\n\n\ndef read_int_list():\n    return list(map(int, input().split()))\n\n\ndef read_str_list():\n    return input().split()\n\n\ndef read_int():\n    return int(input())\n\n\ndef read_str():\n    return input()\n\n\nn = read_int()\na = [read_int() -1 for i in range(n)]\nres = -1\ns = set()\ni = 0\nstep = 1\nwhile a[i] not in s:\n    if a[i] == 1:\n        res = step\n    s.add(a[i])\n    i = a[i]\n    step += 1\nprint(res)\n"}
{"label": 67, "index": 8648, "code": "def main():\n    n = int(input())\n    a_list = [int(input()) for _ in range(n)]\n\n    idx, flag = 1, 1\n    for i in range(1, n+1):\n        idx = a_list[idx-1]\n        if idx == 2:\n            print(i)\n            flag = 0\n            break\n\n    if flag: print(-1)\n    \n\nif __name__ == \"__main__\":\n    main()"}
{"label": 67, "index": 8649, "code": "n = int(input())\nbutton = [int(input()) for i in range(n)]\n\nflag = False\npush = button[0]\nnext_b = button[push-1]\ncnt = 0\nfor i in range(n):\n    cnt += 1\n    if push == 2:\n        flag = True\n        break\n    push = button[push-1]\n    next_b = button[push-1]\n\nif flag:\n    print(cnt)\nelse:\n    print(-1)"}
{"label": 67, "index": 8650, "code": "N=int(input())\na=[int(input()) for i in range(N)]\nb=[]\nj=1\nk=1\nc=1\nif 2 not in a:\n    print(-1)\nelse:\n    while j in range(1,N+1):\n         c += 1\n         if a[k-1]==1:\n                 print(-1)\n                 break\n         elif a[k-1]==2:\n                 print(c-1)\n                 break\n         else:\n            j += 1\n            k = a[k-1]\n    if c>=(N+1):\n        print(-1)"}
{"label": 67, "index": 8651, "code": "if __name__ == '__main__':\n    N = int(input())\n    a = [-1]\n    for i in range(N):\n        a.append(int(input()))\n\n    count_num = 1\n    next_num = a[1]\n    done_num = set([1])\n    while True:\n        if next_num in done_num:\n            print(-1)\n            break\n        elif next_num == 2:\n            print(count_num)\n            break\n\n        count_num += 1\n        done_num.add(next_num)\n        next_num = a[next_num]\n"}
{"label": 67, "index": 8652, "code": "from collections import defaultdict, deque\nimport sys\n\nN = int(input())\nd = defaultdict(int)\nfor i in range(N):\n    d[i+1] = int(input())\n\n#print(d)\n\nq = deque()\nq.append(1)\n\npoint = 1\ncount = 1\n\nwhile N > 0:\n    if d[point] == 2:\n        print(count)\n        sys.exit()\n        \n    q.append(d[point])\n    point = d[point]\n    count += 1\n    N -= 1\n\nprint(-1)"}
{"label": 67, "index": 8653, "code": "def ri(): return int(input())\ndef rli(): return list(map(int, input().split()))\ndef rls(): return list(input())\ndef pli(a): return \"\".join(list(map(str, a)))\n\nn = ri()\ns = [-1]\nans = 0\nlight = 1\nflag = False\nfor i in range(n):\n    s.append(ri())\nfor i in range(n):\n    ans += 1\n    light = s[light]\n    if(light == 2):\n        flag = True\n        break\nprint(ans if(flag) else -1)"}
{"label": 67, "index": 8654, "code": "def main():\n    N = int(input())\n    A = tuple([int(input()) for _ in range(N)])\n\n    a = list(A)\n    ans = 0\n    try:\n        idx = a.index(1)\n    except:\n        idx = 0\n        ans += 1\n\n    while True:\n        btn = a[idx]\n        if btn == 0:\n            ans = -1\n            break\n        elif btn == 2:\n            break\n        a[idx] = 0\n        idx = btn - 1\n        ans += 1\n\n    print(ans)\n\nmain()\n"}
{"label": 67, "index": 8655, "code": "# -*- coding:utf-8 -*-\nimport sys\nN = int(input())\na = [ int(input()) for tmp in range(N) ]\nans = 0\nindex = 0\nwhile ans < len(a):\n    sav = index #last index\n    index = a[sav]-1 #new index\n    ans += 1\n    if index == 1:\n        print(ans)\n        sys.exit()\n    if a[index] == sav+1: #Loop\n        print(\"-1\")\n        sys.exit()\nprint(\"-1\")"}
{"label": 67, "index": 8656, "code": "#coding=UTF-8\n\nN=int(input())\na=[]\n\nfor idx in range(0,N,1):\n    a.append(int(input())-1)\n\n\nlit=0\nlength=0\nans=None\nfor idx in range(0,N,1):\n    lit=a[lit] #press\n    length+=1\n    if lit == 2-1:\n        ans=True\n        break\n        \n\n\n\nif ans:\n    print(length)\nelse:\n    print(-1)\n"}
{"label": 67, "index": 8657, "code": "n = int(input())\na = [0]\nfor i in range(n):\n    a.append(int(input()))\n\ncnt = 1\nidx = 1\nfor i in range(n):\n    if a[idx] == 2:\n        print(cnt)\n        break\n\n    else:\n        idx = a[idx]\n        cnt += 1\nelse:\n    print(-1)"}
{"label": 67, "index": 8658, "code": "N = int(input())\na=[input() for i in range(N)]\na=[int(i) for i in a]\na=[0]+a\n\nflg=[0]*(N+1)\ncount=0\ni=1\n\nwhile count<N:\n    if i==2:\n        print(count)\n        quit()\n    i=a[i]\n    count+=1\n\nprint('-1')\nquit()\n"}
{"label": 67, "index": 8659, "code": "def ini(): return int(input())\ndef inli(): return list(map(int, input().split()))\ndef inf(): return float(input())\ndef inlf(): return list(map(float, input().split()))\ndef inl(): return list(input())\ndef pli(): return \"\".join(list(map(str, ans)))\n\nn =ini()\na=[]\nb = [0 for i in range(n)]\nfor i in range(n):\n    a.append(ini())\n\nj = 1\nans = 0\nwhile j !=2:\n    if b[j-1] !=0:\n        ans = -1\n        break\n    ans +=1\n    b[j-1] +=1\n    j = a[j-1]\n\nprint(ans)"}
{"label": 67, "index": 8660, "code": "N = input()\narr = [input()-1 for i in range(N)]\n\nnow = 0\ncount = 0\nwhile (now != 1):\n    count += 1\n    now = arr[now]\n    if count > 100000:\n        count = -1\n        break\nprint count\n"}
{"label": 67, "index": 8661, "code": "import sys\nN = int(input())\nls = []\nfor i in range(N):\n    ls.append(int(input()))\ni = 0\ncnt = 1\nwhile(cnt <= N):\n    k = ls[i]\n    if (k == 2):\n        print(cnt)\n        sys.exit()\n    cnt += 1\n    i = k-1\nprint(-1)"}
{"label": 67, "index": 8662, "code": "import numpy as np\nN = int(input())\na = np.zeros(N+1)\nfor i in range(N):\n    a[i+1] = int(input())\ni = 1\nn = 0\nfor j in range(N):\n    n = n+1\n    i = a[i]\n    if i == 2:\n        print(n)\n        break\nif i!=2:\n    print(-1)"}
{"label": 67, "index": 8663, "code": "N = int(input())\na = []\nfor _ in range(N):\n    a.append(int(input()))\n    \ns = a[0]\ncnt = 1\n\nfor i in range(N):\n    if s == 2:\n        print(cnt)\n        exit()\n    cnt += 1\n    s = a[s-1]\n    \nprint(-1)"}
{"label": 67, "index": 8664, "code": "import sys\ninput = sys.stdin.readline\ndef main():\n  N = int(input())\n  al = []\n  for _ in range(N):\n    al.append(int(input())-1)\n  bl = [False]*N\n  i = 0\n  nb = 0\n  while bl[i] == False:\n    bl[i] = True\n    i = al[i]\n    nb += 1\n    if i == 1:\n      print(nb)\n      break\n  else:\n    print(-1)\n\nmain()"}
{"label": 67, "index": 8665, "code": "import sys\n\nN = int(input())\na=[]\na.append(0)\n\nfor i in range(N):\n    a.append(int(input()))\n\nb=[]\nfor i in range(N+1):\n    b.append(1)\n\nindex=1\ncounter=1\nif a[1]==2:\n    print(1)\n    sys.exit()\n\nwhile True:\n    counter+=1\n    b[index]=-1\n    index = a[index]\n    if b[index]==-1:\n        print(-1)\n        break\n    if a[index]==2:\n        print(counter)\n        break\n"}
{"label": 67, "index": 8666, "code": "N = int(input())\npushed = {0}\nb = [int(input())-1 for _ in [None]*N]\nc = 0\ncnt = 0\n\nwhile True:\n    c = b[c]\n    cnt += 1\n    if c in pushed:\n        print(-1)\n        exit()\n    if c == 1:\n        print(cnt)\n        exit()\n    pushed.add(c)"}
{"label": 67, "index": 8667, "code": "n = int(input())\ncontroller = [int(input()) for _ in range(n)]\nseq = []\nbutton = controller[0]\nseq.append(1)\n\nfor i in range(n):\n    if button == 2:\n        print(len(seq))\n        exit(0)\n    button = controller[button - 1]\n    seq.append(button)\n\nprint(-1)\n"}
{"label": 67, "index": 8668, "code": "N = int(input())\n\njmps = [int(input()) - 1 for _ in range(N)]\n\nnow = 0\nans = 0\nfor i in range(N):\n    if now == 1:\n        ans = i\n        break\n    now = jmps[now]\n\nans = ans or -1\nprint(ans)\n"}
{"label": 67, "index": 8669, "code": "N = int(input())\na = [int(input()) for i in range(N)]\nch = [0] * (10**5 + 1)\nnumB = 1\nch[1] = numB\nc = 1\nwhile True:\n    numB = a[numB-1]\n    if numB == 2:\n        print(c)\n        break\n    if ch[numB] == 1:\n        print(-1)\n        break\n    c += 1\n    ch[numB] = 1\n"}
{"label": 67, "index": 8670, "code": "n = int(input())\ninp = [int(input()) for i in range(n)]\n\nchecked = [0 for _ in range(n)]\n\ncnt = 0\nlight = 0\n\nwhile(True):\n    if checked[light]:\n        print(-1)\n        break\n    checked[light] = True\n    light = inp[light] - 1\n    cnt += 1\n    if light == 1:\n        print(cnt)\n        break\n"}
{"label": 67, "index": 8671, "code": "n = int(input())\nbtns = [None]*n\nfor i in range(n):\n    btns[i] = int(input())\ncnt = 0\nnb = 1\nwhile nb != 2:\n    cnt += 1\n    nb = btns[nb-1]\n    if cnt > n:\n        break\nif cnt > n:\n    print(-1)\nelse:\n    print(cnt)\n"}
{"label": 67, "index": 8672, "code": "# coding: utf-8\nimport sys\nbot = [ int(i) for i in sys.stdin ]\nnow = bot[1]\ncount = 1\nfor i in range(bot[0]):\n    if now == 2:\n        print(count)\n        exit()\n    count += 1\n    now =  bot[now]\nprint(-1)"}
{"label": 67, "index": 8673, "code": "n = int(input())\na = [int(input()) for i in range(n)]\ni = 1\ncount = 0\n\nwhile True:\n    i = a[i-1]\n    count += 1\n    if i == 1 or count == n+1:\n        print(-1)\n        break\n    elif i == 2:\n        print(count)\n        break"}
{"label": 67, "index": 8674, "code": "n=int(input())\na=[0]*100097\n\nfor i in range(n):\n  a[i+1]=int(input())\n\ncnt=0\nneedle=1\nwhile not(needle==2 or cnt >100097):\n  needle=a[needle]\n  cnt+=1\n\nif cnt>100001:\n  cnt=-1\nprint(cnt)"}
{"label": 67, "index": 8675, "code": "N=int(input())\na= [int(input()) for i in range(N)]\npush=1\ncount=0\nwhile count<=N:\n push=a[push-1]\n count+=1\n if push==2:\n  print (count)\n  break\nelse:\n print (-1)"}
{"label": 67, "index": 8676, "code": "import sys\n\nN = int(input())\na=[0]\nfor i in range(N):\n    a.append(int(input()))\n\nlight = 1\nfor i in range(N):\n    if light == 2:\n        print(i)\n        break\n    light = a[light]\n\nif light != 2:\n    print(-1)"}
{"label": 67, "index": 8677, "code": "n = int(input())\na = []\nfor i in range(n):\n\ta.append(int(input()))\n\npast = [0 for _ in range(n)]\n\ncnt = 0\nnow = 1\n\nwhile(True):\n\tif past[now-1] == 1:\n\t\tprint(-1)\n\t\texit(0)\n\tif now == 2:\n\t\tprint(cnt)\n\t\texit(0)\n\tpast[now-1] = 1\n\tcnt += 1\n\tnow = a[now-1]"}
{"label": 67, "index": 8678, "code": "n = int(input())\nl = []\nfor _ in range(n):\n\tl.append(int(input()))\n\ncount = 0\npoint = 0\n\nwhile True:\n\tnumber = l[point]-1\n\tl[point] = 1\n\tpoint = number\n\tcount += 1\n\tif number == 1:\n\t\tbreak\n\telif number == 0:\n\t\tcount = -1\n\t\tbreak\n\nprint(count)"}
{"label": 67, "index": 8679, "code": "#!/usr/bin/python\n\nimport sys\n\ndef main(argv):\n    N = sys.stdin.readline()\n    while N:\n        A = [int(raw_input()) - 1 for i in xrange(0, int(N))]\n\n        counter = 0\n        visited = set()\n        index = 0\n        while index != 1 and index not in visited:\n            visited.add(index)\n            counter += 1\n            index = A[index]\n\n        if index != 1:\n            counter = -1\n        print(\"{0}\".format(counter))\n\n        N = sys.stdin.readline()\n\nif __name__ == \"__main__\":\n    main(sys.argv)"}
{"label": 67, "index": 8680, "code": "N = int(input())\na = []\nfor i in range(N):\n    a.append(int(input()))\n\nn = 1\nsaw = [0] * N\nnow = 1\n\nwhile True:\n    if a[now-1] == 2:\n        break\n    else:\n        if saw[a[now-1]-1] == 1:\n            n = -1\n            break\n        else:\n            now = a[now-1]\n            saw[now-1] = 1\n            n += 1\n\nprint(n)\n"}
{"label": 67, "index": 8681, "code": "import sys\na = [int(i) for i in sys.stdin]\nnow = a[1]\ncount = 0\nwhile count!=a[0]:\n    count += 1\n    if now == 2:\n        print(count)\n        exit()\n    now = a[now]\nprint(-1)\n"}
{"label": 67, "index": 8682, "code": "N = int(input())\na = []\nfor _ in range(N):\n    a.append(int(input())-1)\n\ntmp = a[0]\nans = 1\nfor i in range(N+1):\n    if tmp == 1:\n        print(ans)\n        break\n    tmp = a[tmp]\n    ans += 1\nelse:\n    print(-1)"}
{"label": 67, "index": 8683, "code": "# coding: utf-8\n\nn = int(input())\nls = []\nfor i in range(n):\n    ls.append(int(input()))\nlighted = [False for i in range(n)]\ninx = 1\nlighted[0] = True\ncnt = 0\nwhile 1:\n    dest = ls[inx - 1]\n    if not lighted[dest - 1]:\n        if dest == 2:\n            cnt += 1\n            break\n        else:\n            lighted[dest - 1] = True\n    else:\n        cnt = -1\n        break\n    inx = dest\n    cnt += 1\n    \nprint(cnt)\n\n"}
{"label": 67, "index": 8684, "code": "n = int(input())\nbuttons = [int(input()) for i in range(n)]\npushing = 1\ncounter = 0\nwhile counter <= n:\n    pushing = buttons[pushing - 1]\n    counter += 1\n    if pushing == 2:\n        print(counter)\n        break\nelse:\n    print(-1)\n"}
{"label": 67, "index": 8685, "code": "N = int(input())\nbota = [int(input()) for i in range(N)]\ncnt = 1\nmov = bota[0]\nwhile(N > 0):\n    if mov == 2:\n        print(cnt)\n        break\n    else:\n        mov = bota[mov-1]\n        cnt +=1\n        N -= 1\nelse:\n    print(-1)"}
{"label": 67, "index": 8686, "code": "N=int(raw_input())\na=[-1]\nfor _ in range(N):\n    a.append(int(raw_input()))\n \n \ni=1\nc=0\nwhile(1):\n    if i==2:\n        print c\n        break\n    elif c>=N:\n        print -1\n        break\n    c+=1\n    i=a[i]\n            "}
{"label": 67, "index": 8687, "code": "n = int(input())\na = [int(input()) for i in range(n)]\n\nx = 1\ny = [0] * n\n\nwhile y[x-1] != 2 and x != 2:\n    y[x-1] += 1\n    x = a[x-1]\n\nif x == 2:\n    print(y.count(1))\nelse:\n    print(-1)\n"}
{"label": 67, "index": 8688, "code": "N = int(input())\na = [int(input())-1 for i in range(N)]\ncnt = 0\ni = 0\nwhile i != 1:\n    i = a[i]\n    cnt += 1\n    if cnt == N:\n        break\nif cnt == N:\n    print(-1)\nelse:\n    print(cnt)"}
{"label": 67, "index": 8689, "code": "#Trained?\nimport numpy as np\nN = int(input())\na = []\nfor i in range(N):\n    a.append(int(input()))\n    \np=1\ncnt=0\nwhile 1:\n    cnt+=1\n    p = a[p-1]\n    if(p==2):\n        print(cnt)\n        break\n    if(cnt>N):\n        print(-1)\n        break"}
{"label": 67, "index": 8690, "code": "N = int(input())\na = []\nfor i in range(N):\n    a.append(int(input()))\n\nused = set()\nnow = 1\nret = 0\nwhile True:\n    if now == 2:\n        print(ret)\n        exit()\n    elif now in used:\n        print(-1)\n        exit()\n    used.add(now)\n    now = a[now - 1]\n    ret += 1\n"}
{"label": 67, "index": 8691, "code": "N = int(raw_input())\na = [int(raw_input()) for _ in range(N)]\n\nflag = [False] * N\n\ncurrent = 1\ncount = 0\n\nfor i in range(N):\n    count += 1\n    current = a[current - 1]\n    if current == 2:\n        break\n    elif i == (N - 1):\n        count = -1\n    elif flag[current - 1]:\n        count = -1\n        break\n    else:\n        flag[current - 1] = True\n\nprint(count)"}
{"label": 67, "index": 8692, "code": "N = int(input())\na = [int(input())-1 for i in range(N)]\n\ncount=0\nnext_push=0\nwhile(next_push != 1 and count < 1e5+1):\n    next_push = a[next_push]\n    count += 1\n\nif count > 1e5:\n    print(-1)\nelse:\n    print(count)"}
{"label": 67, "index": 8693, "code": "N = int(input())\n\njmps = []\nfor _ in range(N):\n    jmps.append(int(input()) - 1)\n\nnow = 0\nans = 0\nfor i in range(N):\n    if now == 1:\n        ans = i\n        break\n    now = jmps[now]\n\nans = ans or -1\nprint(ans)"}
{"label": 67, "index": 8694, "code": "N = int(input())\nA = [int(input()) - 1 for _ in range(N)]\nnow = 0\nse = set([])\nans = 0\n\nwhile True:\n    if now == 1:\n        break\n    now = A[now]\n    if now in se:\n        print(-1)\n        exit()\n    se.add(now)\n    ans += 1\nprint(ans)\n"}
{"label": 67, "index": 8695, "code": "from sys import stdin \na = [0]\nn = int(stdin.readline())\nfor _ in xrange(n):\n a.append(int(stdin.readline()))\nans = -1\ncur = 0\nx = 1\ns = set()\nwhile True:\n if x in s:\n  break\n if x==2:\n  ans = cur\n  break\n s.add(x)\n cur+=1\n x = a[x]\nprint ans"}
{"label": 67, "index": 8696, "code": "n = int(input())\na = [0] + [int(input()) for i in range(n)]\n\nend = {}\n\nend[1] = True\nto = a[1]\n\ncnt = 0\nwhile True:\n    cnt += 1\n    if to == 2:\n        print(cnt)\n        __import__(\"sys\").exit()\n    if end.get(to) == None:\n        end[to] = True\n        to = a[to]\n    else:\n        break\n\nprint(-1)\n"}
{"label": 67, "index": 8697, "code": "# -*- coding: utf-8 -*-\n\nN = input()\na = []\nfor i in range(N):\n    a.append(input())\n\ni=1\nc=0\n\nwhile(1):\n    if i == 2:\n        print c\n        break\n    elif c >= N:\n        print -1\n        break\n    c+=1\n    i=a[i-1]\n"}
{"label": 67, "index": 8698, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\nimport re\nimport math\nimport collections\nimport itertools\nimport functools\n\nDEBUG = True\nDEBUG = False\n\ndef dbg(*args):\n    if DEBUG:\n        print(\"DBG: \", file=sys.stderr, end=\"\")\n        print(*args, file=sys.stderr)\n\n\n\ndef main():\n    N = int(input())\n\n    A = [None]\n    for _ in range(N):\n        A.append(int(input()))\n\n    pressed = [False] * (N+1)\n    button = 1\n    cnt = 0\n    while not pressed[button]:\n        pressed[button] = True\n        cnt += 1\n        button = A[button]\n        if button == 2:\n            print(cnt)\n            return\n\n    print(-1)\n\nif __name__ == \"__main__\": main()\n"}
{"label": 67, "index": 8699, "code": "n = int(input())\narr = [int(input()) for i in range(n)]\npush = 1\ncount = 0\nwhile count <= n:\n    push = arr[push - 1]\n    count += 1\n    if push == 2:\n        print(count)\n        break\nelse:\n    print(-1)"}
{"label": 67, "index": 8700, "code": "N = int(input())\na = []\nfor i in range(N):\n    a.append(int(input()))\nx = [False]*N\nn,i = (0, 0)\nwhile x[n] == False:\n    x[n] = True\n    n = a[n]-1\n    i+=1\n    if n==1:\n        print(i)\n        break\nelse:\n    print(-1)\n"}
{"label": 67, "index": 8701, "code": "def training():\n\tN = int(input())\n\n\tA = [0]\n\n\tfor i in range(N):\n\t\tA.append(int(input()))\n\n\tcounter = 1\n\tindex = 1\n\t#judge = [1]\n\tif A[index] == 2:\n\t\tprint(counter)\n\t\treturn\n\tcounter += 1\n\tindex = A[index]\n\tfor i in range(N):\n\t\t#if A[index] in judge:\n\t\t\t#print(\"-1\")\n\t\t\t#return\n\t\tif A[index] == 2:\n\t\t\tprint(counter)\n\t\t\treturn\n\t\tcounter += 1\n\t\t#judge.append(A[index])\n\t\tindex = A[index]\n\tprint(\"-1\")\n\t\n\ntraining()\n\t"}
{"label": 67, "index": 8702, "code": "#coding: utf-8\nimport sys\nN = int(input())\na = [int(input()) for _ in range(N)]\np = 1\nfor i in range(N):\n    if p == 2:\n        print(i)\n        sys.exit()\n    p = a[p-1]\nprint(-1)\n"}
{"label": 67, "index": 8703, "code": "n = input()\nl = []\n\nfor i in range(n):\n\ta = input()\n\tl.append(a)\n\ncount = 0\nb = 1\nwhile b != 2 and count <= n:\n\tcount += 1\n\tb = l[b - 1]\n\nif count > n:\n\tprint -1\nelse:\n\tprint count"}
{"label": 67, "index": 8704, "code": "n = int(raw_input())\nlst = []\nbtn = []\nfor i in range(0, n):\n\tlst.append(True)\n\tbtn.append(int(raw_input()))\ntmp = 0\ncnt = 0\nwhile lst[tmp]:\n\tlst[tmp] = False\n\tif tmp == 1:\n\t\tbreak\n\telif lst[btn[tmp]-1]:\n\t\tcnt += 1\n\telse:\n\t\tcnt = -1\n\ttmp = btn[tmp]-1\n\nprint cnt\n"}
{"label": 67, "index": 8705, "code": "import sys\n\nn = int(input())\na = [int(x) for x in sys.stdin]\n\nx = 1\ni = 0\n\nwhile i < n and x != 2:\n    x = a[x-1]\n    i += 1\n\nif x == 2:\n    print(i)\nelse:\n    print(-1)\n"}
{"label": 67, "index": 8706, "code": "\nimport sys\n\nN = int(input())\nd = {}\nfor i in range(N):\n    d[i+1] = int(input())\n\nx = 1\nn = 0\nwhile x != 2:\n    x = d[x]\n    n += 1\n    if n > N:\n        x = -1\n        n = -1\n        break\n\nprint(n)"}
{"label": 67, "index": 8707, "code": "N = int(input())\na = []\nfor _ in range(N):\n    a.append(int(input()))\ni = 1\ncnt = 0\nwhile(i != 2):\n    i = a[i - 1]\n    cnt += 1\n    if(cnt > N):\n        cnt = -1\n        break\nprint(cnt)"}
{"label": 67, "index": 8708, "code": "input_count = int(input().rstrip())\nbutton_list = [0,]\n\nfor _ in range(input_count):\n    button_list.append(int(input().rstrip()))    \n\npush_count = 0\nnext_button = 1\nwhile True:\n    next_button = button_list[next_button]\n    push_count += 1\n    \n    if next_button == 2:\n        print(push_count)\n        break\n    \n    if push_count == len(button_list):\n        print(-1)\n        break"}
{"label": 67, "index": 8709, "code": "n = int(input())\na = [int(input()) for i in range(n)]\n\ncount = 0\nnextbottun = 1\n\nwhile(nextbottun != 2 and count <= 100000):\n    nextbottun = a[nextbottun - 1]\n    count += 1\n\nif count <= 100000:\n    print(count)\nelse:\n    print(-1)\n"}
{"label": 68, "index": 8710, "code": "import math\ninf=float('inf')\nx = list(map(int, input().split()))\ny=[x[0]+x[1],x[1]+x[2],x[2]+x[0]]\nprint(min(y[:]))\n\nquit()"}
{"label": 68, "index": 8711, "code": "a = list(map(int, input().split()))\n\na.sort()\n\nprint(a[0]+a[1])\n"}
{"label": 68, "index": 8712, "code": "a = list(map(int, input().split()))\na.sort()\nprint(a[0] + a[1])"}
{"label": 68, "index": 8713, "code": "A = input().split()\n\na = int(A[0])\nb = int(A[1])\nc = int(A[2])\n\nminsum=a+b\n\nif a+c < minsum:\n    minsum = a+c\nif b+c < minsum:\n    minsum = b+c\n\nprint(minsum)\n"}
{"label": 68, "index": 8714, "code": "def main():\n    print(sum(sorted([int(i) for i in input().split()])[:2]))\n\n\nif __name__ == \"__main__\":\n    main()"}
{"label": 68, "index": 8715, "code": "a,b,c = map(int, input().split())\nprint(a+b+c-max(a,b,c))"}
{"label": 68, "index": 8716, "code": "print(sum(sorted(map(int,input().split()))[:2]))"}
{"label": 68, "index": 8717, "code": "a, b, c = map(int, input().split())\n\nprice = [a + b, b + c, a + c]\n\nprint(min(price))"}
{"label": 68, "index": 8718, "code": "a, b, c = list(map(int, input().split(\" \")))\nprint(min(a+b, b+c, c+a))"}
{"label": 68, "index": 8719, "code": "# encoding:utf-8\na, b, c = list(map(int, input().split()))\nprint(min(a + b, b+ c, c + a))"}
{"label": 68, "index": 8720, "code": "a, b, c = map(int, raw_input().split())\nprint a + b + c - max(a, b, c)\n"}
{"label": 68, "index": 8721, "code": "data=list(map(int,input().split()))\ndata.sort()\nprint(data[1]+data[0])                 "}
{"label": 68, "index": 8722, "code": "a,b,c=map(int,input().split())\nmin = a+b\nif min>a+c:\n    min=a+c\nif min>b+c:\n    min=b+c\nprint(min)"}
{"label": 68, "index": 8723, "code": "a,b,c = map(int,input().split())\nl = [a,b,c]\nimport math\nprint(sum(l) - max(l))"}
{"label": 68, "index": 8724, "code": "if __name__ == \"__main__\":\n    a, b, c = list(map(int, input().split()))\n    result = []\n    result.append(a + b)\n    result.append(a + c)\n    result.append(b + c)\n    \n    print(min(result))\n"}
{"label": 68, "index": 8725, "code": "# -*- coding: utf-8 -*-\n\na = map(int, raw_input().split())\na = sorted(a)\nprint(a[0]+a[1])\n"}
{"label": 68, "index": 8726, "code": "a,b,c =map(int,input().split())\n\nprint(min(a+b, a+c, b+c))"}
{"label": 68, "index": 8727, "code": "l = [int(n) for n in input().split()]\nprint(sum(sorted(l)[:2]))"}
{"label": 68, "index": 8728, "code": "import math\nbell = [int(i) for i in input().split()]\nprint(bell[0]+bell[1]+bell[2]-max(bell))"}
{"label": 68, "index": 8729, "code": "a,b,c = map(int,input().split())\nprint(sum(sorted([a,b,c])[0:2]))"}
{"label": 68, "index": 8730, "code": "a = map(int, raw_input().split())\nprint(sum(a) - max(a))"}
{"label": 68, "index": 8731, "code": "a = map(int, raw_input().split())\n\na.sort()\n\nprint a[0] + a[1]"}
{"label": 68, "index": 8732, "code": "\na=[]\na+=map(int,input().split())\n\na.sort()\n\nprint(a[0]+a[1])\n"}
{"label": 68, "index": 8733, "code": "import sys\n\na, b, c = map(int, input().split())\n\nsum_1 = a + b\nsum_2 = b + c\nsum_3 = c + a\n\nif sum_1 >= sum_2:\n    min_1 = sum_2\nelse: \n    min_1 = sum_1\n\nif min_1 >= sum_3:\n    ans = sum_3\nelse:\n    ans = min_1\n\nprint(ans)"}
{"label": 68, "index": 8734, "code": "#! -*- coding:utf-8 -*-\narr = input().split()\nfor i in range(len(arr)):\n    arr[i] = int(arr[i])\narr.sort()\n\ns = 0\nfor i in range(2):\n    s += arr[i]\n\nprint(s)\n"}
{"label": 68, "index": 8735, "code": "a,b,c = map(int,input().split())\nprint(a+b+c-max(a,b,c))"}
{"label": 68, "index": 8736, "code": "a,b,c=map(int,raw_input().split())\nprint min(a+b,b+c,c+a)"}
{"label": 68, "index": 8737, "code": "def ri(): return int(input())\ndef rli(): return list(map(int, input().split()))\ndef ris(): return list(input())\ndef pli(a): return \"\".join(list(map(str, a)))\n\na = rli()\na.remove(max(a))\nprint(sum(a))"}
{"label": 68, "index": 8738, "code": "a, b, c = map(int,input().split())\nA = a + b\nB = a + c\nC = b + c\nans = min(A, B, C)\nprint(ans)"}
{"label": 68, "index": 8739, "code": "price = list(map(int, input().split(\" \")))\n\nprint(sum(price)-max(price))"}
{"label": 68, "index": 8740, "code": "a, b, c = input().split()\na = int(a)\nb = int(b)\nc = int(c)\nabc = [a, b, c]\nabc.sort()\nprint(abc[0]+abc[1])"}
{"label": 68, "index": 8741, "code": "l = map(int, raw_input().split())\nprint sum(l) - max(l)\n"}
{"label": 68, "index": 8742, "code": "a, b, c = map(int, raw_input().split())\nab = a + b\nbc = b + c\nca = c + a\n\nif ab <= bc and ab <= ca:\n    print ab\nelif bc <= ab and bc <= ca:\n    print bc\nelse:\n    print ca"}
{"label": 68, "index": 8743, "code": "abc = input().split(' ')\nmax_ = max(abc)\nabc =[ int(x) for x in abc]\ns=  0\nmin_ = min(abc) \nif abc[0] == abc[1] == abc[2] :\n    print(abc[0] + abc[1])\n\nelif abc.count(max(abc)) == 2:\n    print(max(abc) + min(abc))\n\n    \nelse:    \n    for i in abc:\n        if i != max(abc):\n            s += i\n    print(s)\n"}
{"label": 68, "index": 8744, "code": "l = list(map(int, input().split(' ')))\nl.sort()\nprint(l[0] + l[1])\n"}
{"label": 68, "index": 8745, "code": "price = input().split(\" \")\nprice.sort(key=int)\ntotal = int(price[0])+int(price[1])\nprint(total)"}
{"label": 68, "index": 8746, "code": "from sys import stdin\na = map(int,stdin.readline().split())\na.sort()\nprint a[0] + a[1]"}
{"label": 68, "index": 8747, "code": "st = input().split()\na = int(st[0])\nb = int(st[1])\nc = int(st[2])\n\nl = [a,b,c]\nl.sort()\nprint(l[0]+l[1])"}
{"label": 68, "index": 8748, "code": "nums = [int(x) for x in input().split()]\nnums.sort()\n\nans = nums[0] + nums[1]\nprint(ans)"}
{"label": 68, "index": 8749, "code": "a = [0 for i in range(3)]\nl = list(map(int, input().split()))\na[0] = l[0] + l[1]\na[1] = l[1] + l[2]\na[2] = l[2] + l[0]\na.sort()\nprint(a[0])\n"}
{"label": 68, "index": 8750, "code": "# -*- coding: utf-8 -*-\n\n#\u304a\u5e97\u306b\u3042\u308b\u30d9\u30eb\u306f 3 \u7a2e\u985e\u3067\u3001\u305d\u308c\u305e\u308c a\u5186\u3001 b\u5186\u3001 c\u5186\u3067\u3059\u3002\n#\u3053\u306e 3 \u3064\u306e\u3046\u3061\u3001\u7570\u306a\u308b 2 \u3064\u306e\u30d9\u30eb\u3092\u9078\u3093\u3067\u8cb7\u3046\u3068\u304d\u306e\u3001\u5024\u6bb5\u306e\u5408\u8a08\u306e\u6700\u5c0f\u5024\u3092\u6c42\u3081\u3066\u4e0b\u3055\u3044\u3002\n\nx = input().split()\n#x = [700, 600, 780]\n\ny =[int(x[0]), int(x[1]), int(x[2])]\n\nz = sorted(y)\n\nans = z[0] + z[1]\n\nprint(ans)\n"}
{"label": 68, "index": 8751, "code": "a, b, c = map(int, input().split(\" \"))\n\nif a <= c and b <= c:\n    print(a + b)\nelif a <= b and c <= b:\n    print(a + c)\nelif b <= a and c <= a:\n    print(b + c)\n"}
{"label": 68, "index": 8752, "code": "a, b, c = map(int, input().split())\nli = [a,b,c]\nli.sort()\nprint(li[0] + li[1])\n"}
{"label": 68, "index": 8753, "code": "\ndef main():\n    arg = input()\n    arg = arg.split()\n    a = int(arg[0])\n    b = int(arg[1])\n    c = int(arg[2])\n    bells = [a, b, c]\n    bells.sort()\n    print(bells[0] + bells[1])\n\n\nif __name__ == '__main__':\n    main()"}
{"label": 68, "index": 8754, "code": "(a, b, c) = map(int, input().split())\nprint(a + b if a + b < (a + c if a + c < b + c else b + c) else (a + c if a + c < b + c else b + c))\n"}
{"label": 68, "index": 8755, "code": "a=map(int,raw_input().split())\na.sort()\nprint a[0] + a[1]"}
{"label": 68, "index": 8756, "code": "# -*- coding: utf-8 -*-\n\n#-------\n# Initialize\ncost = list(map(int, input().split()))\ncost.sort()\nprint(cost[0] + cost[1])\n"}
{"label": 68, "index": 8757, "code": "# -*- coding: utf-8 -*-\n\n#\u304a\u5e97\u306b\u3042\u308b\u30d9\u30eb\u306f 3 \u7a2e\u985e\u3067\u3001\u305d\u308c\u305e\u308c a\u5186\u3001 b\u5186\u3001 c\u5186\u3067\u3059\u3002\n#\u3053\u306e 3 \u3064\u306e\u3046\u3061\u3001\u7570\u306a\u308b 2 \u3064\u306e\u30d9\u30eb\u3092\u9078\u3093\u3067\u8cb7\u3046\u3068\u304d\u306e\u3001\u5024\u6bb5\u306e\u5408\u8a08\u306e\u6700\u5c0f\u5024\u3092\u6c42\u3081\u3066\u4e0b\u3055\u3044\u3002\n\nx = input().split()\n#x = [700, 600, 780]\n\ny =[int(x[0]), int(x[1]), int(x[2])]\n\nz = sorted(y)\n\nans = z[0] + z[1]\n\nprint(ans)\n\n\n"}
{"label": 68, "index": 8758, "code": "abc = input().split(' ')\nmax_ = max(abc)\nabc =[ int(x) for x in abc]\ns=  0\nmin_ = min(abc) \nif abc[0] == abc[1] == abc[2] :\n    print(abc[0] + abc[1])\n\nelif abc.count(max(abc)) == 2:\n    print(max(abc) + min(abc))\n\n    \nelse:    \n    for i in abc:\n        if i != max(abc):\n            s += i\n    print(s)\n"}
{"label": 68, "index": 8759, "code": "a,b,c=list(map(int,input().split()))\nma=max(a,b,c)\nprint(a+b+c-ma)"}
{"label": 68, "index": 8760, "code": "cost = list(map(int, input().split()))\ncost = sorted(cost)\nprint(sum(cost[:-1]))"}
{"label": 68, "index": 8761, "code": "src = map(int, raw_input().split())\nprint sum(src) - max(src)\n"}
{"label": 68, "index": 8762, "code": "# coding: utf-8\n# Here your code !\n\na = [int(i) for i in input().split()]\nans = sum(a)-max(a)\nprint(ans)"}
{"label": 68, "index": 8763, "code": "A, B, C = map(int, raw_input().split())\nmax_num = max([A,B,C])\nresult = A+B+C - max_num\nprint result"}
{"label": 68, "index": 8764, "code": "a, b, c = map(int, input().split())\n\nprint(min(a + b, b + c, c + a))"}
{"label": 68, "index": 8765, "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\nprices = list(map(int, sys.stdin.readline().split(' ')))\n\nprices.sort()\n\nprint (str(prices[0] + prices[1]))\n"}
{"label": 68, "index": 8766, "code": "a=list(map(int,input().split()))\na.sort()\nprint(a[0]+a[1])"}
{"label": 68, "index": 8767, "code": "print sum(sorted(map(int, raw_input().split()))[:2])"}
{"label": 68, "index": 8768, "code": "a,b,c = map(int,input().split())\nprint(min(a+b,a+c,b+c))\n"}
{"label": 68, "index": 8769, "code": "if __name__ == '__main__':\n\tprint (sum(sorted(list(map( int, input().split())))[0:2]))"}
{"label": 68, "index": 8770, "code": "A, B, C = map(int, input().split())\nprint(A+B+C-max(A,B,C))"}
{"label": 68, "index": 8771, "code": "n = map(int, raw_input().split())\nn.sort()\nprint n[0] + n[1]\n"}
{"label": 68, "index": 8772, "code": "a = [int(x) for x in input().split()]\ns = 0\nif a[0] <= a[1]:\n    s = a[0]\n    if a[1] <= a[2]:\n        s += a[1]\n    else:\n        s += a[2]\nelse:\n    s = a[1]\n    if a[0] <= a[2]:\n        s += a[0]\n    else:\n        s += a[2]\nprint(s)\n"}
{"label": 68, "index": 8773, "code": "abc = map(int, raw_input().rstrip().split(' '))\nlargest = max(abc)\nprint sum(abc) - largest\n"}
{"label": 68, "index": 8774, "code": "S = [int(i) for i in input().split(\" \")]\nprint(sum(S) - max(S))"}
{"label": 68, "index": 8775, "code": "a,b,c=map(int,input().split())\nprint(min(a+b,b+c,c+a))\n"}
{"label": 68, "index": 8776, "code": "(a, b, c) = map(int, input().split())\n\nans = a+b+c - max(a,b,c)\nprint(ans)"}
{"label": 68, "index": 8777, "code": "# coding: utf-8\n\nimport numpy as np\n\nif __name__==\"__main__\":\n    a,b,c = map(int,input().split())\n    bells = np.array([a,b,c])\n    bells.sort()\n    print(np.sum(bells[0:2]))\n"}
{"label": 68, "index": 8778, "code": "import sys\nimport scipy as sp\nimport numpy\n\nl = map(int, raw_input().split())\na=l[0]\nb=l[1]\nc=l[2]\n\nab=a+b\nbc=b+c\nca=c+a\n\nl.sort()\n\ngh=l[0]+l[1]\n\nprint gh"}
{"label": 68, "index": 8779, "code": "a,b,c = map(int,input().split())\narr = []\narr.append(a)\narr.append(b)\narr.append(c)\narr.sort()\nprint(arr[0] + arr[1])"}
{"label": 68, "index": 8780, "code": "# -*- coding: utf-8 -*-\n\na, b, c = map(int,raw_input().split())\n\nprint a + b + c - max(a, b, c)\n"}
{"label": 68, "index": 8781, "code": "\nn = input()\ns = n.split(\" \")\nfor i in range(3):\n    s[i] = int(s[i])\n\n\nprint(sum(s)-max(s))"}
{"label": 68, "index": 8782, "code": "a, b, c = [int(x) for x in input().split()]\nif a >= b and a >= c:\n\tprint(b + c)\nelif b >= a and b >= c:\n\tprint(a + c)\nelse:\n\tprint(a + b)\n"}
{"label": 68, "index": 8783, "code": "from collections import defaultdict\nfrom itertools import product, groupby\nfrom math import pi\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right\nINF = 10 ** 10\n\n\ndef main():\n    a = list(map(int, input().split()))\n    print(sum(a) - max(a))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 68, "index": 8784, "code": "x,y,z = map(int, input().split())\na = []\na.append(x)\na.append(y)\na.append(z)\na.sort()\nprint((a[0]+a[1]))"}
{"label": 68, "index": 8785, "code": "l = list(map(int, input().split()))\nl.sort()\n\nA=l[0]+l[1]\nprint(A)"}
{"label": 68, "index": 8786, "code": "a, b, c = map(int, input().split())\nprint((a+b+c)-max(a, b, c))\n"}
{"label": 68, "index": 8787, "code": "import sys\n\nitems = [int(x) for x in sys.stdin.readline().rstrip().split()]\nitems.sort()\nprint items[0] + items[1]"}
{"label": 68, "index": 8788, "code": "_item = [int(e) for e in input().split(' ')]\n_sum = []\nfor i in range(3):\n\tfor j in range(i, 3):\n\t\tif i != j:\n\t\t\t_sum.append(_item[i] + _item[j])\nindex = 0\nfor i in range(len(_sum)):\n\tif i == 0 or _sum[index] > _sum[i]:\n\t\tindex = i\nprint(_sum[index])\n"}
{"label": 68, "index": 8789, "code": "a, b, c = map(int, input().split())\nsums = [a+b,b+c,c+a]\nprint(min(sums))\n"}
{"label": 68, "index": 8790, "code": "import sys\n\n# sys.stdin = open('a1.in')\n\n\ndef read_int_list():\n    return list(map(int, input().split()))\n\n\ndef read_str_list():\n    return input().split()\n\n\ndef read_int():\n    return int(input())\n\n\ndef read_str():\n    return input()\n\n\ndef main():\n    a, b, c = read_int_list()\n    p = sorted([a, b, c])\n    res = p[0] + p[1]\n    print(res)\n\n\nmain()\n"}
{"label": 68, "index": 8791, "code": "x=list(map(int,input().split()))\nprint(sum(x)-max(x))"}
{"label": 68, "index": 8792, "code": "import sys\nimport math\n\nl = raw_input().split()\nl[0] = int(l[0])\nl[1] = int(l[1])\nl[2] = int(l[2])\n\nsum = l[0]+l[1]+l[2]\nmin = sum\n\nfor i in range(3):\n    s = sum - l[i]\n    if s < min:\n        min = s\n\nprint min\n"}
{"label": 68, "index": 8793, "code": "a, b, c = map(int,input().split())\n\nprint((a+b+c) - max(a,b,c))\n"}
{"label": 68, "index": 8794, "code": "import numpy as np\n\na,b,c = map(int,input().split())\nans = np.sum(np.sort([a,b,c])[0:2])\nprint(ans)"}
{"label": 68, "index": 8795, "code": "a=list(map(int,input().split()))\na.sort()\nprint(a[0]+a[1])"}
{"label": 68, "index": 8796, "code": "a = list(map(int,input().split()))\na.sort()\nprint(a[0] + a[1])"}
{"label": 68, "index": 8797, "code": "a,b,c = map(int,input().split())\nprint(min(a+b,b+c,a+c))"}
{"label": 68, "index": 8798, "code": "l = list(map(int, input().split()))\n\ntmp = 0\nbuy_rings = []\nfor e in l:\n    if tmp == 0:\n        tmp = e\n        continue\n    if tmp <= e:\n        buy_rings.append(tmp)\n        tmp = e\n    else:\n        buy_rings.append(e)\n\nprint(sum(buy_rings))"}
{"label": 68, "index": 8799, "code": "a, b, c = [int(i) for i in input().split()]\n\nif a > b:\n  a, b = b, a\n\nif b > c:\n  b, c = c, b\n\nif a > b:\n  a, b = b, a\n\nprint(a+b)\n"}
{"label": 68, "index": 8800, "code": "\na,b,c=map(int,input().split())\n\na,b,c=a+b,b+c,c+a\n\nans=min(a,b,c)\n\nprint(ans)"}
{"label": 68, "index": 8801, "code": "inpt = map(int, raw_input().split())\ninpt.sort()\n\nprint inpt[0] + inpt[1]\n"}
{"label": 68, "index": 8802, "code": "bells = [int(x) for x in input().split()]\n\nbells = sorted(bells)\n\nans = bells[0]+bells[1]\n\nprint(ans)"}
{"label": 68, "index": 8803, "code": "abc = list(map(int, input().split()))\nabc.pop(abc.index(max(abc)))\nprint(sum(abc))"}
{"label": 68, "index": 8804, "code": "a = map(int, raw_input().split(\" \"))\na.sort()\nprint a[0] + a[1]"}
{"label": 68, "index": 8805, "code": "a = [int(i) for i in input().split()]\na = sorted(a)\nprint(a[0]+a[1])\n"}
{"label": 68, "index": 8806, "code": "import sys\na=0\nb=0\nc=0\nx=3\n\n\nv,y,z =[int(x) for x in input().split(\" \")]\n\na = v+y\nb = y+z\nc = z+v\n\nif a<b and a<c:\n\tprint (a)\n\nif b<c and b<a:\n\tprint (b)\n\nif c<b and c<a:\n\tprint (c)\n\nif a == b and b == c:\n\tprint (a)\n\nif a == b and b<c:\n\tprint (a)\n\nif a ==c and a<b:\n\tprint (a)\n\nif c==b and b<a:\n\tprint (c)"}
{"label": 68, "index": 8807, "code": "def ringring(x):\n    x.sort()\n    return x[0] + x[1]\n\nl = [int(i) for i in input().split()]\nprint(ringring(l))"}
{"label": 68, "index": 8808, "code": "A, B, C = raw_input().split()\n\na = int(A)\nb = int(B)\nc = int(C)\n\narr = []\narr.append(a + b)\narr.append(a + c)\narr.append(b + c)\n\nprint min(arr)"}
{"label": 68, "index": 8809, "code": "print(sum(sorted(map(int, input().split()))[:2]))\n"}
{"label": 68, "index": 8810, "code": "a = [int(i) for i in input().split()]\na.sort()\nprint(a[0] + a[1])"}
{"label": 68, "index": 8811, "code": "def min(a, b, c):\n    list = [a,b,c]\n    list.sort()\n    return list[0] + list[1]\n\nif(__name__ == \"__main__\"):\n    a, b, c = (int(i) for i in input().split())\n    print(min(a, b, c))\n"}
{"label": 68, "index": 8812, "code": "#! /usr/bin/env python3\n\nprint(sum(sorted(map(int,input().split()))[:2]))"}
{"label": 68, "index": 8813, "code": "a,b,c = map(int,input().split())\nlist = []\nlist.append(a)\nlist.append(b)\nlist.append(c)\nlist.sort()\nprint(list[0]+list[1])\n"}
{"label": 68, "index": 8814, "code": "a = list(map(int, input().split()))\na.remove(max(a))\nprint(sum(a))"}
{"label": 68, "index": 8815, "code": "tmp = [int(i) for i in input().split(' ')]\na = tmp[0]\nb = tmp[1]\nc = tmp[2]\nprint(min(a+b, b+c, c+a))"}
{"label": 68, "index": 8816, "code": "a, b, c = list(map(int, input().split()))\nprint(min([a + b, b + c, c + a]))"}
{"label": 68, "index": 8817, "code": "a=sorted(list(map(int,input().split())))\nprint(a[0]+a[1])"}
{"label": 68, "index": 8818, "code": "numsstr = input().split()\nnums = []\nfor n in numsstr:\n    nums.append(int(n))\nans = sum(nums)-max(nums)\nprint(ans)"}
{"label": 68, "index": 8819, "code": "a = [int(i) for i in input().split()]\nprint(sum(a)-max(a))\n"}
{"label": 68, "index": 8820, "code": "a,b,c=map(int,input().split())\nprint(a+b+c-max([a,b,c]))\n"}
{"label": 68, "index": 8821, "code": "a, b, c = map(int, input().split())\n\nans = min(a+b,b+c,c+a)\n\nprint(ans)\n\n"}
{"label": 68, "index": 8822, "code": "x = [int(i) for i in input().split(\" \")]\nx.sort()\nprint(x[0] + x[1])\n"}
{"label": 68, "index": 8823, "code": "a,b,c=map(int,input().split())\nd=[a,b,c]\nd.sort(reverse=True)\nsum = 0\n\nfor i in range(2):\n    sum += d.pop()\nprint(sum)"}
{"label": 68, "index": 8824, "code": "*X,=map(int,input().split());print(sum(X)-max(X))"}
{"label": 68, "index": 8825, "code": "a,b,c = map(int,input().split())\nl = [a,b,c]\nl.sort()\nprint(l[0]+l[1])"}
{"label": 68, "index": 8826, "code": "a,b,c = map(int,input().split())\nprint(a+b+c-max(a,b,c))"}
{"label": 68, "index": 8827, "code": "a = [int(i) for i in input().split()]\na = sorted(a)\nprint(a[0] + a[1])\n"}
{"label": 68, "index": 8828, "code": "#a, b, c = map(int, input().split())\nabc = list(int(i) for i in input().split())\n\nabc.sort()\nz = abc[0] + abc[1]\nprint(z)\n"}
{"label": 68, "index": 8829, "code": "# coding: utf-8\na,b,c = map(int, input().split())\nprint(min(a+b,b+c,c+a))"}
{"label": 68, "index": 8830, "code": "a=list(sorted(map(int,input().split())))\nprint(a[0]+a[1])"}
{"label": 68, "index": 8831, "code": "a , b, c = map(int , input().split())\nprint(min(a+b, b+c , c+a))"}
{"label": 68, "index": 8832, "code": "X = list(map(int, input().split()))\nprint(sum(X)-max(X))"}
{"label": 68, "index": 8833, "code": "a, b, c = map(int, input().split())\nprint(min(a+b, b+c, a+c))"}
{"label": 68, "index": 8834, "code": "a = sorted(map(int, input().split()))\nprint(a[0]+a[1])\n"}
{"label": 68, "index": 8835, "code": "a,b,c = map(int, input().split())\n\nprint(min(a+b,b+c,a+c))\n"}
{"label": 68, "index": 8836, "code": "abc = map(int, raw_input().split())\nabc = sorted(abc)\nprint abc[0] + abc[1]"}
{"label": 68, "index": 8837, "code": "a, b, c = list(map(int, input().split(\" \")))\nprint(\"%d\"%(a+b+c - max(max(a, b), c)))"}
{"label": 68, "index": 8838, "code": "def read_int_list():\n    return list(map(int, input().split()))\n\nn = read_int_list()\nn.sort()\nprint(n[0]+n[1])"}
{"label": 68, "index": 8839, "code": "def main():\n    abc = list(map(int, input().strip().split()))\n    print(sum(sorted(abc)[:2]))\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 69, "index": 8840, "code": "def ss(st):\n    flag = True\n    \n    if len(st) % 2 != 0:\n        flag = False\n    else:\n        n = len(st) // 2\n        for i in range(n):\n            if st[i] != st[i+n]:\n                flag = False\n                break\n    return flag\n\nS = input()\nfor i in range(len(S)-1, 0, -1):\n    temp = S[0:i]\n    if ss(temp):\n        print(len(temp))\n        break"}
{"label": 69, "index": 8841, "code": "\n\na=input()\nnum=len(a)\n\nnum=num-2\n\n\nfor i in range(num,0,-1):\n    a=a[:i]\n    nums=int(i/2)\n    s=a[:nums]\n    if str(s)*2==str(a):\n        print(len(a))\n        break\n\n\n"}
{"label": 69, "index": 8842, "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom __future__ import division, print_function\nimport sys\n\n\ndef main():\n    s = sys.stdin.readline().strip()\n    while True:\n        s = s[:-2]\n        i = len(s) // 2\n        a = s[:i]\n        b = s[i:]\n        if a == b:\n            print(len(s))\n            return\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 69, "index": 8843, "code": "def main():\n    S = input().strip()\n    for i in range(2, len(S), 2):\n        part = S[:-i]\n        p = len(part) // 2\n        if part[:p] == part[p:]:\n            print(p * 2)\n            break\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 69, "index": 8844, "code": "S = input()\nwhile True:\n    S = S[:-1]\n    if len(S)%2==0:\n        if S[0:int(len(S)/2)] == S[int((len(S)/2)):]:\n            print(len(S))\n            break"}
{"label": 69, "index": 8845, "code": "# -*- coding:utf-8 -*-\ns = input()[:-1]\n\nwhile True:\n    l = len(s)\n    if s[:l//2] == s[l//2:]:\n        break\n    s = s[:-1]\n\nprint(len(s))\n"}
{"label": 69, "index": 8846, "code": "# coding: utf-8\n\ndef is_even(s):\n    return s[:int(len(s)/2)] == s[int(len(s)/2):]\n\nss = input()\ndiff = 2\nwhile True:\n    if is_even(ss[:len(ss) - diff]):\n        break\n    else:\n        diff += 2\n\nprint(len(ss) - diff)\n"}
{"label": 69, "index": 8847, "code": "S = input()\nN = len(S) - 2\nif N % 2 == 1:\n    N += 1\nM = N // 2\nwhile 1:\n    if S[:M] == S[M:N]:\n        print(N)\n        exit()\n    N -= 2\n    M -= 1\n"}
{"label": 69, "index": 8848, "code": "S = input()\nT = list(S)\nflag = 0\n\nwhile flag == 0:\n\tdel T[len(T)-1]\n\tdel T[len(T)-1]\n\tif T[0:len(T)//2] == T[len(T)//2:len(T)]:\n\t\tflag = 1\n\t\tprint(len(T))\n"}
{"label": 69, "index": 8849, "code": "# coding: utf-8\ndef get_ln_inputs():\n    return input().split()\n\n\ndef get_ln_int_inputs():\n    return list(map(int, get_ln_inputs()))\n\n\ndef is_ev_st(s):\n    l = len(s)\n    if l % 2 == 1:\n        return False\n    l2 = int(l / 2)\n    return s[:l2] == s[l2:]\n\n\ndef main():\n    S = get_ln_inputs()[0][:-1]\n    while not is_ev_st(S):\n        S = S[:-1]\n    print(len(S))\n\n\nmain()"}
{"label": 69, "index": 8850, "code": "def isEvenstring(s):\n\tl = len(s)\n\tcenter = int(l/2)\n\tif l%2 == 0:\n\t\treturn s[:center]==s[center:]\n\n\telse:\n\t\treturn False\n\n\n\n\nif __name__ == '__main__':\n\tstring = input()\n\tl = len(string)\n\tfor i in range(1, l):\n\t\tif isEvenstring(string[:-i]):\n\t\t\tprint (l - i)\n\t\t\tbreak\n"}
{"label": 69, "index": 8851, "code": "s = input()\nn = len(s)\ndef iseven(str, n):\n    for i in range(0, n//2):\n        if str[i] != str[i+n//2]:\n            return False\n    else:\n        return True\n\n\nfor i in range(2, n, 2):\n    if iseven(s, n-i):\n        print(n-i)\n        break\n"}
{"label": 69, "index": 8852, "code": "def check_gu(s):\n    n = len(s)\n    if n%2!=0:\n        return False\n    return s[:n//2] == s[n//2:]\n\nif __name__ == '__main__':\n    s=input()\n\n    for i in range(1,len(s)):\n        ss = s[:len(s)-i]\n        if(check_gu(ss)):\n            print(len(ss))\n            break\n"}
{"label": 69, "index": 8853, "code": "s = raw_input()\ni = len(s) - 2\nwhile(len(s)):\n    if i % 2 == 0 and s[0:i/2] == s[i/2:i]:\n        print i\n        break\n    i-=1"}
{"label": 69, "index": 8854, "code": "s = input()\ns= s[:-2]\n \nwhile(True):\n    s1, s2 = s[0:len(s)//2], s[len(s)//2:len(s)+1]\n    if s1 == s2:\n        print(len(s1)*2)\n        break\n \n    s = s[:-2]"}
{"label": 69, "index": 8855, "code": "import sys\n\nS = input()\nn = len(S) // 2\n\nfor i in range(1, n):\n    if S[0:n - i] == S[n - i: 2 * n - 2 * i]:\n        print((n - i) * 2)\n        sys.exit()\n"}
{"label": 69, "index": 8856, "code": "s = raw_input()\n\ndef is_rep(s0):\n    l = len(s0)/2\n    s1 = s0[:l]\n    s2 = s0[l:]\n    return s1 == s2\n\nl = len(s)\nwhile True:\n    l -= 2\n    if is_rep(s[:l]):\n        break\nprint l\n"}
{"label": 69, "index": 8857, "code": "S = raw_input()\nn = len(S)\n\nans = 0\nfor k in range((n+1)/2):\n    if S[:k] == S[k:2*k]:\n        ans = k * 2\nprint ans\n"}
{"label": 69, "index": 8858, "code": "# -*- coding: utf-8 -*-\n\ns = raw_input()\nflg = 1\nslen = len(s)\nwhile(flg):\n    s = s[:slen-2]\n    slen = len(s)\n    m = slen/2\n    if(s[:m]==s[m:]):\n        print(2*m)\n        flg = 0"}
{"label": 69, "index": 8859, "code": "s=raw_input()\nfor j in range(len(s)-1,-1,-1):\n    p=s[:j]\n    if len(p)%2==0:\n        s1=p[:len(p)/2]\n        s2=p[len(p)/2:]\n        if s1==s2:\n            print j\n            exit()"}
{"label": 69, "index": 8860, "code": "S = input()\nS = S[:int(len(S)-1)]\nwhile True:\n\t\n\tif S[:int(len(S)/2)] == S[int(len(S)/2):]:\n\t\tprint(int(len(S)))\n\t\tbreak\n\telse:\n\t\tS = S[:int(len(S)-1)]"}
{"label": 69, "index": 8861, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\n\n\ndef main():\n    s = S()\n    e = set()\n    r = len(s)\n    for i in range(r-2,-1,-2):\n        if s[:i//2] == s[i//2:i]:\n            return i\n    return -1\n\n\nprint(main())\n\n\n\n"}
{"label": 69, "index": 8862, "code": "s = input()\nrm=0\nfor i in range(len(s)):\n    if len(s)%2 !=0:\n        s = s[:-1]\n        rm += 1\n        continue\n    if s[0:len(s)//2] == s[len(s)//2:len(s)] and rm > 0:\n        break\n    else:\n        s = s[:-1]\n        rm += 1\nprint(len(s))"}
{"label": 69, "index": 8863, "code": "def main():\n    S = input()\n\n    s = S\n    while True:\n        s = s[:-2]\n        l = len(s) // 2\n        if s[:l] == s[l:]:\n            ans = len(s)\n            break\n\n    print(ans)\n\nmain()\n"}
{"label": 69, "index": 8864, "code": "string = input()\n\nif len(string)%2==0 :\n    string = string[:-2]\nelse :\n    string = string[:-3]\nlength = len(string)\n\nwhile length>0 :\n    if string[:length//2]==string[length//2:] :\n        print(length)\n        break\n    length -= 2\n    string = string[:-2]"}
{"label": 69, "index": 8865, "code": "S=str(input())\ns=len(S)\nfor i in range(1,s):\n  if (s-i)%2==0 and S[0:int((s-i)/2)]==S[int((s-i)/2):s-i]:\n    print(int((s-i)))\n    break"}
{"label": 69, "index": 8866, "code": "s = input()\n\nif len(s) % 2 != 0:\n    s = s[:len(s)-1]\nelse:\n    s = s[:len(s)-2]\n\nfor i in range(len(s)//2):\n    if s[:len(s)//2-i] == s[len(s)//2-i:len(s)-2*i]:\n        print(len(s)-2*i)\n        exit()\n"}
{"label": 69, "index": 8867, "code": "s = input()\nfor i in range(1, len(s)):\n    if((len(s)-i) % 2 == 0):\n        ans = len(s) - i\n        if(s[0:ans//2] == s[ans//2:ans]):\n            print(ans)\n            break\n"}
{"label": 69, "index": 8868, "code": "S = input()\nS = S[:-1]\nwhile True:\n\tif len(S) % 2 == 0:\n\t\thalflen = int(len(S) / 2)\n\t\tif S[:halflen] == S[halflen:]:\n\t\t\tprint(len(S))\n\t\t\tbreak\n\tS = S[:-1]"}
{"label": 69, "index": 8869, "code": "S=input()\ns=S[0:-1]\n\ni=0\nL=[]\n\nfor i in range(len(s)):\n    \n    \n    if s[0:i]==s[i:(2*i)]:\n        L.append(2*i)\n    \nprint(max(L))\n"}
{"label": 69, "index": 8870, "code": "s = list(str(input()))\ns = s[:-2]\nwhile s[:(len(s)//2)]!=s[(len(s)//2):]:\n    s = s[:-2]\nprint(len(s))"}
{"label": 69, "index": 8871, "code": "char = input()\nchar = char[0:-1]\nwhile(1):\n    if char[:(len(char)//2)] == char[len(char)//2:]:\n        break\n    else :\n        char = char[0:-1]\nprint(len(char))"}
{"label": 69, "index": 8872, "code": "s = input()\n\nwhile True:\n    s = s[:-2]\n    n = len(s)\n    w1 = s[:int(n / 2)]\n    w2 = s[int(n / 2):]\n    if w1 == w2:\n        print(n)\n        break"}
{"label": 69, "index": 8873, "code": "moji = input()\ndef isEvenStr(moji):\n\tlength = len(moji)\n\tif length % 2 == 1:\n\t\treturn None\n\telse:\n\t\tfirsthalf = moji[0:int(length/2)]\n\t\tlatterhalf = moji[int(length/2):int(length)]\n\t\treturn firsthalf == latterhalf\n\nfor i in range(len(moji)-1,0,-1):\n\ttrimmed = moji[0:i]\n\tisEven = isEvenStr(trimmed)\n\tif isEven:\n\t\tprint(i)\n\t\tbreak\n"}
{"label": 69, "index": 8874, "code": "S = input()\n\nfor i in range(1, len(S)):\n    if len(S[:-i]) % 2 == 1:\n        continue\n    if S[:int(len(S[:-i])/2)] == S[int(len(S[:-i])/2):-i]:\n        ans = len(S[:int(len(S[:-i]))])\n        break\nprint(ans)"}
{"label": 69, "index": 8875, "code": "s = raw_input()\nfor i in range(len(s)-2, 0, -2):\n    t = s[0:i/2]\n    u = s[i/2:i]\n    if t == u:\n        print i\n        break\n"}
{"label": 69, "index": 8876, "code": "if(__name__ ==\"__main__\"):\n    S = input()\n    for i in range(1,len(S)):\n        tmp = S[:-i]\n        tmplen = len(tmp)\n        #print(tmplen)\n        if(tmplen % 2 == 0):\n            #print(tmp[:int(tmplen/2)])\n            if(tmp[:int(tmplen/2)] == tmp[int(tmplen/2):]):\n                print(tmplen)\n                break"}
{"label": 69, "index": 8877, "code": "S = input()\n\nans = len(S) - 2\nwhile ans:\n    if S[0:(ans // 2)] == S[(ans // 2):ans]:\n        break\n\n    ans -= 2\n\nprint(ans)\n"}
{"label": 69, "index": 8878, "code": "S = input()\n\nif len(S) % 2 == 1:\n    S = S[:-1]\n\nflag = 0\nwhile flag == 0:\n    S = S[:-2]\n    ans = int(len(S) / 2)\n    same_char = 0\n    i = 0\n    while i < ans:\n        if S[i] == S[ans + i]:\n            same_char += 1\n        else:\n            break\n        i += 1\n    if ans == same_char:\n        flag = 1\n\nprint(len(S))"}
{"label": 69, "index": 8879, "code": "S = input()\nfor i in range(len(S)-1, 0, -1):\n    str = S[0:i]\n    if str[0:int(len(str)/2)] == str[int(len(str)/2):]:\n        print(len(str))\n        break\n"}
{"label": 69, "index": 8880, "code": "S = raw_input()\n\nS=S[:-2]\nmid=len(S)/2\nSf=S[:mid]\nSl=S[mid:]\n\nwhile Sf!=Sl:\n  S=S[:-2]\n  mid=len(S)/2\n  Sf=S[:mid]\n  Sl=S[mid:]\n\nprint(len(S))\n"}
{"label": 69, "index": 8881, "code": "# -*- coding:utf-8 -*-\ns = input()\nsub = 0\nfor tmp in reversed(range(1,len(s)-2,2)):\n    factor = s[0:tmp+1]\n    sub += 2\n    if factor[0:int(len(factor)/2)] == factor[int(len(factor)/2):len(factor)]:\n        break\n    else:\n        pass\nprint(len(s)-sub)"}
{"label": 69, "index": 8882, "code": "def check(s):\n    if len(s)%2 !=0:\n        return False\n    i=int(len(s)/2)\n    s1=s[:i]\n    s2=s[i:]\n    return s1==s2\n\ns = input()\nwhile True:\n    s = s[:len(s)-1]\n    if check(s):\n        print(len(s))\n        break\n"}
{"label": 69, "index": 8883, "code": "S = raw_input()\nflag = 0\nS = S[:-1]\nwhile(len(S) > 0):\n  if len(S) % 2 == 1:\n     S = S[:-1]\n  else:\n     a = S[:len(S)/2]\n     b = S[len(S)/2:]\n     if a == b:\n        ans = S\n        break\n     S = S[:-1]\nprint len(S)"}
{"label": 69, "index": 8884, "code": "S = str(input())\nS = S[:-1]\n \nhantei = False\nwhile hantei == False:\n    if len(S) % 2 == 1:\n        S = S[:-1]\n    else:\n        half = int(len(S)/2)\n        last = int(len(S))\n        if S[0:half] == S[half:last]:\n            print(last)\n            hantei = True\n        else:\n            S = S[0:-1]\n"}
{"label": 69, "index": 8885, "code": "def check(s):\n    l = len(s)\n    return True if s[:l / 2] == s[l / 2:] else False\n\n\nS = raw_input()[:-1]\nif len(S) % 2 != 0:\n    S = S[:-1]\nL = len(S)\nfor i in range(L):\n    if check(S):\n        break\n    else:\n        S = S[:-2]\n\nprint len(S)\n"}
{"label": 69, "index": 8886, "code": "a = input().strip()\nfor i in range((len(a))//2-1,0,-1):\n   if a[:i] == a[i:2*i]:\n      print(2 * i)\n      break"}
{"label": 69, "index": 8887, "code": "# -*- coding: utf-8 -*-\ndef check_word(word):\n    return word[:int(len(word)/2)] == word[int(len(word)/2):len(word)]\n\na = input()\ncount = 0\nfor i in range(1, len(a)):\n    b = a[:-i]\n    if check_word(b):\n        count = len(b)\n        break\nprint(count)"}
{"label": 69, "index": 8888, "code": "#s = list(input())\ns = input()\nn = len(s)\ncount = 1   #\u6d88\u3057\u305f\u6570\n \nif n % 2 == 1 - count:\n    count += 1\n \nwhile s[0 : int((n-count)/2)] != s[int((n-count)/2) : n-count]:\n    count += 2\n \nprint(n-count)"}
{"label": 69, "index": 8889, "code": "from collections import deque\ndef main():\n    s=deque(input())\n    for i in range(0,len(s)):\n        s.pop()\n        if len(s)%2==1:\n            continue\n        else:\n            if \"\".join(s)[0:len(s)//2]==\"\".join(s)[len(s)//2:len(s)]:\n                print(len(s))\n                break;\nif __name__=='__main__':\n    main()\n"}
{"label": 69, "index": 8890, "code": "def f(x):\n    return len(x) % 2 == 0 and x[:len(x)//2] == x[len(x)//2:]\n \nx=input()[:-1]\nwhile not f(x):\n    x=x[:-1]\n \nprint(len(x))"}
{"label": 69, "index": 8891, "code": "S = input()\nl = len(S)\n\nfor i in range(1, l//2):\n  if S[:l//2-i] == S[l//2-i:l-2*i]:\n    print(l-2*i)\n    break"}
{"label": 69, "index": 8892, "code": "#! /usr/bin/env python3\n\ns = input()[::-1]\ns = s[1:]\ns = s[len(s) % 2:]\nfor i in range(0, len(s), 2):\n    t = s[:len(s) // 2]\n    if s == t * 2:\n        print(len(s))\n        break\n    s = s[2:]\n"}
{"label": 69, "index": 8893, "code": "S=str(input())\ns=len(S)\nfor i in range(1,s):\n if (s-i)%2==0 and S[0:int((s-i)/2)]==S[int((s-i)/2):s-i]:\n  print (int(s-i))\n  break"}
{"label": 69, "index": 8894, "code": "#ss\ns = input() \nif ( len(s)%2 ==1 ):\n    s = s[:-1]\nelse:\n    s = s[:-2]\n\nwhile 1:\n    l = int(len(s)/2)\n    if (s[:l]==s[l:] ):\n        print(l*2)\n        break\n    else:\n        s = s[:-2]\n    if ( len(s)==0 ):\n        break"}
{"label": 69, "index": 8895, "code": "s=input()\nwhile True:\n    s=s[:-1]\n    l=len(s)\n    if(l%2==1):\n        continue\n    else:\n        if(s[:int(l/2)]==s[int(l/2):]):\n            print(l)\n            break"}
{"label": 69, "index": 8896, "code": "\ndef main():\n    msg = input()\n    msg = msg[:-1]\n    if len(msg) % 2 != 0:\n        msg = msg[:-1]\n    while len(msg) >= 2:\n        before = msg[:int(len(msg) / 2)]\n        after = msg[int(len(msg) / 2):]\n        if before == after:\n            print(len(msg))\n            break\n        msg = msg[:-2]\n\n\nif __name__ == '__main__':\n    main()"}
{"label": 69, "index": 8897, "code": "str=input()\nk=len(str)\nstr=str[0:k-2]\nwhile True:\n    n=int(len(str)/2)\n    a=str[:n]\n    b=str[n:]\n    if a==b:\n        print(len(a)*2)\n        break\n    k=len(str)\n    str=str[0:k-2]\n"}
{"label": 69, "index": 8898, "code": "s=input()\nfor i in range(len(s)):\n\tif s[0:i//2]==s[i//2:i]:\n\t\tans=i\nprint(ans)"}
{"label": 69, "index": 8899, "code": "letters = input()\nwhile True:\n    not_equal = 0\n    length = len(letters)\n    letters = letters[:length-1]\n    if len(letters) % 2 != 0:\n        continue\n\n    if int(len(letters)) % 2 == 0:\n        half = int(len(letters)/2 -1)\n    else:\n        half = int((len(letters)-1)/2)\n    i = 0\n    while i <= half:\n        if letters[i] != letters[i + half + 1]:\n            not_equal = 1\n            break\n        i += 1\n\n    if not_equal == 0:\n        print(len(letters))\n        break\n"}
{"label": 69, "index": 8900, "code": "import sys\ndef judge(s):\n    if len(s)%2 == 1:\n        return False\n    half = len(s)//2\n    for i in range(half):\n        if s[i] != s[i+half]:\n            return False\n    return True\n\nS = input()\nfor i in range(1,len(S)):\n    if judge(S[:-i]):\n        print(len(S[:-i]))\n        sys.exit()\nprint(0)\n"}
{"label": 69, "index": 8901, "code": "# coding: utf-8\n\nimport numpy as np\n\nif __name__==\"__main__\":\n    s = input().replace(\"\\n\", \"\")\n    n = len(s)\n    ss = \"\"\n    if n%2 == 1:\n        s = s[0:n-1]\n        n = len(s)\n    elif n%2 == 0:\n        s = s[0:n-2]\n        n = len(s)\n\n    for i in list(range(0,n,2)):\n        ss = s[0:n-i]\n        m = len(ss)\n        if ss[0:int(m/2)] == ss[int(m/2):m]:\n            print(len(ss))\n            break\n\n"}
{"label": 69, "index": 8902, "code": "def even(s):\n    if len(s) % 2 != 0: return False\n    a = s[:len(s)//2]\n    return 2*a == s\n\ns = list(input())\ns.pop()\nwhile not even(s): s.pop()\nprint(len(s))"}
{"label": 69, "index": 8903, "code": "import sys\nS = list(input())\n\nans = len(S)\nif len(S)%2 == 1 :\n    S = S[0:-1]\n    ans -= 1\n    if S[0:ans//2] == S[ans//2:] :\n        print(ans)\n        sys.exit()\n\nwhile len(S) > 0 :\n    S = S[0:-2]\n    ans -= 2\n    if S[0:ans//2] == S[ans//2:] :\n        print(ans)\n        sys.exit()\nelse :\n    print(ans)"}
{"label": 69, "index": 8904, "code": "S = list(input())[:-1]\n\nwhile True:\n  S.pop()\n\n  if len(S) % 2 != 0:\n    continue\n\n  if S[:len(S) // 2] * 2 == S:\n    break\n\nprint(len(S))\n"}
{"label": 69, "index": 8905, "code": "import math\n\n\ndef f():\n    a  = input()\n    for i in range(1,len(a)):\n        l = len(a) - i\n        if l%2==1:\n            continue\n        d = l//2\n        \n        if a[:d] == a[d:-i]:\n            print(d*2)\n            return \n        \nf()\n"}
{"label": 69, "index": 8906, "code": "s = input()\n\nfor i in range(len(s)):\n    s = s[:-1]\n    if len(s) % 2 == 1:\n        continue\n    ss = s[len(s)//2:]\n    flag = True\n    for j in range(len(ss)):\n        if ss[j] != s[j]:\n            flag = False\n            break\n    if flag:\n        print(len(s))\n        break\n    s = s[:-1]"}
{"label": 69, "index": 8907, "code": "# -*- coding: utf-8 -*-\ns = input()\nN = len(s)\n\nfor i in range(1, N):\n    if i % 2 == 1:\n        continue\n    a = s[:((N-i)//2)]\n    b = s[((N-i)//2):(N-i)]\n    if a == b:\n        print(N-i)\n        break\n"}
{"label": 69, "index": 8908, "code": "# -*- coding: utf-8 -*-\n\n#-------\n# Initialize\nS = str(input())[:-1]\n\n#-------\n# Define\ndef check(s):\n    if len(s) % 2 == 1:\n        return False\n    if (s[:int(len(s)/2)] == s[int(len(s)/2):]):\n        return True\n    else:\n        return False\n\n#-------\n# Do\nwhile (len(S) > 0):\n    if check(S):\n        print(len(S))\n        break\n    else:\n        S = S[:-1]\n\n\n#-------\n# Output\n"}
{"label": 69, "index": 8909, "code": "def main():\n    s = input()\n\n    length = None\n    for i in range(1, len(s)-1):\n        tmp = s[:len(s)-i]\n        if len(tmp)%2 != 0:\n            continue\n        elif tmp[:len(tmp)//2] == tmp[len(tmp)//2:]:\n            length = len(tmp)\n            break\n    print(length)\n    \n\nif __name__ == \"__main__\":\n    main()"}
{"label": 69, "index": 8910, "code": "s = raw_input()\np = len(s) - 2\nwhile(p>0):\n    if s[0:p/2] == s[p/2:p]:\n        break\n    p -= 2\nprint p\n"}
{"label": 69, "index": 8911, "code": "S = input()\nret = 0\nfor i in range(1, len(S) // 2):\n    if S[:i] * 2 == S[:i * 2]:\n        ret = i * 2\nprint(ret)\n"}
{"label": 69, "index": 8912, "code": "s = input()\n\ndef r(s):\n    l = len(s)\n    if(l%2 == 1):\n        return r(s[:-1])\n    elif(s[:int(l/2)] == s[int(l/2):]):\n        return len(s)\n    else:\n        return r(s[:-1])\nprint(r(s[:-1]))"}
{"label": 69, "index": 8913, "code": "str = input()\nwhile True:\n    str = str[:-2]\n    n = len(str)\n    if str[:int(n/2)] == str[int(n/2):]:\n        print(n)\n        break"}
{"label": 69, "index": 8914, "code": "s = input()\n\ns = s[:-1]\n\nif len(s) % 2 != 0:\n    s = s[:-1]\n\nwhile True:\n    if s[:len(s) // 2] == s[len(s) // 2:]:\n        print(len(s))\n        break\n    else:\n        s = s[:-2]\n"}
{"label": 69, "index": 8915, "code": "c=0\ni=0\nlist1=[]\nlist2=[]\n\n\nS = input('')\nchar_list = list(S)\nc = len (char_list)\nc= c-1\n#print(c)\n\nwhile c>1:\n\tif c % 2 == 0:\n\t\td=int(c/2)\n\t\t#print (d)\n\t\tfor i in range(d):\n\t\t\tlist1.append(char_list[i]) \n\t\t\tlist2.append(char_list[i+d])\n\t\t#print (list1)\n\t\t#print(list2)\n\n\t\tif list1 == list2:\n\t\t\tprint (len (list1)*2)\n\t\t\tbreak\n\n\t\tlist1=[]\n\t\tlist2=[]\n\tc=c-1"}
{"label": 69, "index": 8916, "code": "s = list(input())\nfor i in range(int(len(s)/2)-1):\n    s = s[:-2]\n    sep = int(len(s)/ 2)\n    a = s[:sep]\n    b = s[sep:]\n    if a == b:\n        print(int(len(a)*2))\n        break\n"}
{"label": 69, "index": 8917, "code": "N = input()\nfor i in range(1,len(N)):\n    num = (len(N)-i)//2\n    if N[:num] == N[num:len(N)-i]:\n        print(len(N[:num])*2)\n        break\n"}
{"label": 69, "index": 8918, "code": "import sys, math, itertools, collections, heapq\nsys.setrecursionlimit(10 ** 7)\npinf = float(\"inf\")\nninf = -float(\"inf\")\n\nslist = list(input())\n\ndef f(s):\n        l = len(s)\n        l2 = l // 2\n        if l % 2 != 0:\n                return 0\n        s1 = s[0:l2]\n        s2 = s[l2:]\n        if s1 == s2:\n                return l\n        else:\n                return 0\n\nif len(slist) == 2:\n        ans = f(slist)\n        if ans != 0:\n                print(1)\nelse:\n        while len(slist) >= 3:\n                slist.pop()\n                slist.pop()\n                ans = f(slist)\n                if ans != 0:\n                        print(ans)\n                        break"}
{"label": 69, "index": 8919, "code": "print(len(__import__(\"re\").search(r\"(.+)\\1\", input()[:-1]).group(0)))"}
{"label": 69, "index": 8920, "code": "data=list(map(str,input()))\ndel data[-1]\nwhile len(data):\n    m = len(data)//2\n    if data[:m]==data[m:]:\n        print(len(data))\n        break\n    del data[-1]\nelse:\n    print(0)"}
{"label": 69, "index": 8921, "code": "s = input()\nfor i in range(len(s)):\n    s = s[:-1]\n    h = int(len(s)/2)\n    if len(s) % 2 == 0:\n        if s[:h] == s[h:]:\n            print(len(s))\n            break\n"}
{"label": 69, "index": 8922, "code": "s=list(raw_input())\nwhile len(s) > 1:\n    s.pop()\n    left=\"\".join(s[:len(s)/2])\n    right=\"\".join(s[len(s)/2:])\n    if left == right:\n        print len(left+right)\n        exit()\nprint 0"}
{"label": 69, "index": 8923, "code": "doc = input()\nfor i in range(1,len(doc)):\n    tmp_doc = doc[:-i]\n    length = len(tmp_doc)\n    if length%2==0 and tmp_doc[:length//2] == tmp_doc[length//2:]:\n        print(length)\n        break"}
{"label": 69, "index": 8924, "code": "s = input()[:-2]\nl = len(s) // 2\ns1 = s[:l]\ns2 = s[l:]\nwhile s1 != s2:\n   s = s[:-2]\n   l = len(s) // 2\n   s1 = s[:l]\n   s2 = s[l:]  \nprint(len(s1 + s2))"}
{"label": 69, "index": 8925, "code": "s = input()\n\nwhile True:\n    s = s[:-1]\n    L = len(s)\n    if L%2 != 0:\n        continue\n\n    ok = True\n    for i in range(L//2):\n        if s[i] != s[L//2+i]:\n            ok = False\n    if ok:\n        break\n\nprint(len(s))\n"}
{"label": 69, "index": 8926, "code": "s = input()\ns= s[:-2]\n \nwhile(True):\n    s1, s2 = s[0:len(s)//2], s[len(s)//2:len(s)]\n    if s1 == s2:\n        print(len(s1)*2)\n        break\n \n    s = s[:-2]"}
{"label": 69, "index": 8927, "code": "s = input()\ns = s[:len(s) - 1]\nif len(s) % 2 != 0:\n\ts = s[:len(s) - 1]\n\nwhile True:\n\tmid = int(len(s) / 2)\n\tif s[:mid] == s[mid:]:\n\t\tprint(len(s))\n\t\tbreak\n\telse:\n\t\ts = s[:len(s) - 1]"}
{"label": 69, "index": 8928, "code": "s = input()[:-2]\nhalf = len(s)//2\n\nfor i in range(half):\n    t_h = len(s)//2\n    if s[:t_h] == s[t_h:]:\n        print(len(s))\n        break\n    else:\n        s = s[:-2]"}
{"label": 69, "index": 8929, "code": "s = input()\n\nlength = len(s) - 2\n\ndef guumoji(s):\n    length = len(s)\n\n    if s[:length//2] == s[length//2:]:\n        return True\n\n    return False\n\nwhile length > 0:\n    if guumoji(s[:length]):\n        break\n\n    length -= 2\n\nprint(length)"}
{"label": 69, "index": 8930, "code": "# -*- coding: utf-8 -*-\n\nS = raw_input()\n\nfor i in range(len(S)-2,0,-2):\n    if S[0:i/2] == S[i/2:i]:\n        print i\n        exit()\n"}
{"label": 69, "index": 8931, "code": "#Python\nimport sys\n\nS = raw_input()\n\nif len(S)%2==1:\n\tS=S[0:len(S)-1]\n\nif S[0:len(S)/2]==S[len(S)/2:]:\n\tS=S[0:len(S)-2]\n\n#print S\ncnt=len(S)\nwhile cnt>1:\n\t#print \"cnt:::\"+str(cnt)\n\tS1=S[0:len(S)/2]\n\tS2=S[len(S)/2:]\n\t#print S1\n\t#print S2\n\tif S1==S2:\n\t\tprint len(S)\n\t\tsys.exit()\n\n\tS=S[0:len(S)-2]\n\tcnt-=2\n"}
{"label": 69, "index": 8932, "code": "def solve(s):\n    L = len(s)\n    L -= 1\n    if L % 2 == 1:\n        L -= 1\n    while L >= 2:\n        if s[:L/2] == s[L/2:L]:\n            return L\n        L -= 2\n    return 0\n\n\ndef main():\n    s = raw_input().rstrip()\n    print solve(s)\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 69, "index": 8933, "code": "S=raw_input()\n\ni=2\nwhile(i<=len(S)-2):\n    s=S[0:-1*i]\n    if s[0:len(s)/2]==s[len(s)/2:]:\n        print len(s)\n        break\n    i+=2\n\nif len(S)==2:\n    print 1"}
{"label": 69, "index": 8934, "code": "def ri(): return int(input())\ndef rli(): return list(map(int, input().split()))\ndef rls(): return list(input())\ndef pli(a): return \"\".join(list(map(str, a)))\n\ns = rls()\nif(len(s) % 2 == 1):\n    s.remove(s[-1])\nelse:\n    s = s[:-2]\nfor i in range(len(s) // 2):\n    if(s[:len(s)//2] == s[len(s)//2:]):\n        print(len(s))\n        break\n    s = s[:-2]"}
{"label": 69, "index": 8935, "code": "#!/usr/bin/python\n\nss = raw_input()\n\nwhile(True):\n  ss = ss[:-1]\n  leng = len(ss)\n  former = ss[:leng/2]\n  later  = ss[leng/2:]\n\n  if former == later:\n    leng = len(former) + len(later)\n    break\n\nprint(leng)"}
{"label": 69, "index": 8936, "code": "string = list(input())\nstring.pop()\nstring.pop()\nwhile \"\".join(string[:len(string) // 2]) != \"\".join(string[len(string) // 2:]):\n\t#print(\"\".join(string[:len(string) // 2]), \"\".join(string[len(string) // 2:]))\n\tstring.pop()\n\tstring.pop()\n# print(\"\".join(string[:len(string) // 2]), \"\".join(string[len(string) // 2:]))\nprint(len(string))"}
{"label": 69, "index": 8937, "code": "s = input()\ns_length = len(s)\n\nfor i in range(1, s_length):\n    if (s_length - i) % 2 != 0:\n        continue\n    mid = (s_length - i) // 2\n    if s[:mid] == s[mid:s_length-i]:\n        print(s_length - i)\n        break\nif s_length == 2:\n    print(2)"}
{"label": 69, "index": 8938, "code": "s = input()\nfor n in reversed(range(len(s)-1)):\n    if s[0:n//2] == s[n//2+1:n]:\n        print(n+1)\n        break"}
{"label": 69, "index": 8939, "code": "S = input()\nfor i in range(len(S) - 1, 0, -1):\n    if(S[0:i//2] == S[i//2:i]):\n        print(i)\n        break\n"}
{"label": 69, "index": 8940, "code": "S = input()\nL = len(S)\nif(L%2!=0):\n    L-=1\nelse:\n    L-=2\nfor i in range(L,0,-2):\n    if(S[0:(i//2)]==S[(i//2):i]):\n        print(i)\n        break\nelse:\n    print(\"0\")"}
{"label": 69, "index": 8941, "code": "S = input()\nwhile len(S) != 0:\n    S = S[:len(S)-1]\n    if len(S)%2 != 0:\n        continue\n    th = len(S)//2\n    if S[:th] == S[th:]:\n        print(2*len(S[:th]))\n        break"}
{"label": 69, "index": 8942, "code": "S=input()\ns=S[0:-1]\n\nfor i in range(len(s)-1,-1,-1):\n    if s[0:i]==s[i:(2*i)]:\n        print(2*i)\n        break\n        \n"}
{"label": 69, "index": 8943, "code": "#! -*- coding:utf-8 -*-\ns = str(input())\ns = list(s)\n#print(s)\na = 'x'\nb = 'x'\n\nfor i in range(len(s)):\n    s.pop()\n    if len(s) % 2 == 0:\n        a = s[:len(s)//2]\n        b = s[len(s)//2:]\n        if a == b:\n            print(len(s))\n            break\n"}
{"label": 69, "index": 8944, "code": "s=input()\n\nn=len(s)\n\ndef isok(s):\n    n=len(s)\n    if n%2==0:\n        m=int(n/2)\n        if s[0:m]==s[m:n]: return True\n    return False\n\nfor i in range(n-1,0,-1):\n    s=s[0:i]\n    if isok(s): print(i) ; break"}
{"label": 69, "index": 8945, "code": "S = input()\nn = len(S)\nfor i in range(n):\n\tX = S[0:-2 * (i + 1)]\n\tx = S[0:int(n / 2) - i - 1]\n\tif X == x + x:\n\t\tcount = i + 1\n\t\tbreak\n\nprint(n - count * 2)"}
{"label": 69, "index": 8946, "code": "S = list(input())\nn = len(S)\n\nfor i in range(n, 0, -1):\n    del S[len(S)-1]\n    if len(S)%2 == 0:\n        str1=\"\"\n        str2=\"\"\n        for j in range(int(len(S)/2)):\n            str1 = str1 + S[j]\n        for j in range(int(len(S)/2), len(S)):\n            str2 = str2 + S[j]\n        if str1 == str2:\n            print(len(S))\n            break\n"}
{"label": 69, "index": 8947, "code": "s = list(str(input()))\ns.pop(-1)\nif len(s) % 2 != 0:\n    s.pop(-1)\nwhile True:\n    if s[:len(s)//2] == s[len(s)//2:]:\n        print(len(s))\n        break\n    s.pop(-1)"}
{"label": 69, "index": 8948, "code": "ss = input()\nm = 0\nfor start in range(len(ss)//2):\n    for end in range(start, len(ss) - 1):\n        if len(ss[start:end]) > 0:\n            if ss[start:end] == ss[end:2*end - start]:\n                if (2*end - start) < len(ss):\n                    m = max(m, 2*len(ss[start:end]))\nprint(m)"}
{"label": 69, "index": 8949, "code": "S=str(input())\nL=len(S)\nfor i in range(1,L//2):\n    Strimed=S[:L-2*i]\n    Ltrimed=L-2*i\n    if Strimed[:Ltrimed//2]==Strimed[Ltrimed//2:]:\n        print(Ltrimed)\n        exit()\n"}
{"label": 69, "index": 8950, "code": "S = raw_input()\n\nfor i in range(len(S) - 1):\n    S = S[:-1]\n    if len(S) % 2 == 0:\n        if S[:len(S)/2] == S[len(S)/2:]:\n            break\n\nprint(len(S))"}
{"label": 69, "index": 8951, "code": "st=input()\nnum=len(st)\nfor x in range(1,num+1):\n    st = list(st)\n    del st[-1:]\n    st = \"\".join(st)\n    n=len(st)\n    if n%2==0:\n        p=int(n/2)\n        st1=st[:p]\n        st2=st[-p:]\n        if st1==st2:\n            print(len(st))\n            break\n        else:\n            continue\n    else:\n        continue\n"}
{"label": 69, "index": 8952, "code": "#!/usr/bin\n# -*- coding=\"utf-8\" -*-\n \ns = input()[:-1]\nsn = len(s)\n\nif sn % 2 == 1:\n  sn = sn -1\nfor i in range(sn, 0, -2):\n  if s[:i//2] == s[i//2:i]:\n    break\nprint(len(s[:i]))"}
{"label": 69, "index": 8953, "code": "s = input()\nfor i in range(len(s)-1, 0, -1):\n\tif i % 2 != 0:\n\t\tcontinue\n\t_i = int(i/2)\n\t_s1 = s[:_i]\n\t_s2 = s[_i:i]\n\tif _s1 == _s2:\n\t\tprint(i)\n\t\tbreak\n"}
{"label": 69, "index": 8954, "code": "import math\ninf=float('inf')\ns = input()\ns=s[:-1]\n\nif (len(s)%2==1):\n    s=s[:-1]\n\nN=len(s)\n\nfor i in range(N):\n    h=int(len(s)/2)\n    if (s[0:h-1]==s[h:-1]):\n\n        print(len(s))\n        quit()\n    s=s[:-2]\n\n\nquit()"}
{"label": 69, "index": 8955, "code": "from collections import defaultdict\nfrom itertools import product, groupby\nfrom math import pi\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right\nINF = 10 ** 10\n\n\ndef main():\n    S = input()\n    for i in range(len(S)):\n        T = S[:-i - 1]\n        if len(T) % 2 == 0 and T[len(T) // 2:] == T[:len(T) // 2]:\n            print(len(T))\n            break\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 69, "index": 8956, "code": "# -*- coding: utf-8 -*-\n\"\"\"\nhttp://abc066.contest.atcoder.jp/tasks/abc066_b\n\n\"\"\"\nimport sys\nfrom sys import stdin\ninput = stdin.readline\n\n\ndef main(args):\n    txt = input().strip()\n    txt = txt[:-1]\n    # print(txt)\n    result = 0\n    if len(txt) % 2 == 1:\n        txt = txt[:-1]\n    while txt:\n        l = len(txt)\n        a_part = txt[:l//2]\n        b_part = txt[l//2:]\n        if a_part == b_part:\n            result = l\n            break\n        txt = txt[:-2]\n    print(result)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])"}
{"label": 69, "index": 8957, "code": "S = list(input())\n\n\ndef check(i):\n    if i % 2 == 0:\n        return False\n\n    first = S[:i // 2 + 1]\n    tail = S[i // 2 + 1:i + 1]\n    return \"\".join(first) == \"\".join(tail)\n\n\nN = len(S) - 2\nans = -1\nfor i in range(N):\n    if check(i):\n        ans = i + 1\nprint(ans)\n"}
{"label": 69, "index": 8958, "code": "#coding=UTF-8\n\nS=input()\nSlen=len(S)\n\nfor idx in range(Slen-2,0-1,-2):\n    T=S[0:idx]\n\n    Tlen=len(T)\n    #hantei\n    for idy in range(0,Tlen//2,1):\n        if T[idy] !=T[Tlen//2+idy]:\n            break\n    else:\n        ans=idx\n        break\n\nprint(ans)\n"}
{"label": 69, "index": 8959, "code": "def find_even(text):\n    chars = list(text)\n    tail_index = (len(chars) + 1) // 2\n    pre = 0\n    while tail_index > 0:\n        tail_index -= 1\n        pre = 0\n        post = tail_index\n        while chars[pre] == chars[post]:\n            pre += 1\n            post += 1\n            if pre == tail_index:\n                return 2 * tail_index\n    raise(\"Error\")\n\nif __name__ == \"__main__\":\n    # run_test(find_even, test_pair)\n    print(find_even(raw_input()))"}
{"label": 69, "index": 8960, "code": "S = raw_input()\nfor i in range(1, len(S)):\n    s = S[:-i]\n    n = len(s)\n    if (n % 2 == 0) and (s[:n/2] == s[n/2:]):\n        print n\n        break"}
{"label": 69, "index": 8961, "code": "s = input()\n\nl = len(s)\n\nfor _ in range(200):\n\ts = s[:l-2]\n\tl = l - 2\n\tif s[:l//2] == s[l//2:]:\n\t\tprint(l)\n\t\tbreak\n\telse:\n\t\tpass\nelse:\n\tprint('no match')"}
{"label": 69, "index": 8962, "code": "if __name__ == \"__main__\":\n    s = input()\n    data = list(s)\n    while len(data):\n        data.pop()\n        if len(data) % 2 == 0:\n            half = int(len(data) / 2)\n            if data[:half] == data[half:]:\n                print(len(data))\n                break"}
{"label": 69, "index": 8963, "code": "S = raw_input()\nn = len(S)\nfor i in xrange(1, n):\n    if (n - i)%2 > 0: continue\n    T = S[:-i]\n    if T[:len(T)/2] == T[len(T)/2:]:\n        print n - i\n        break\n\n"}
{"label": 69, "index": 8964, "code": "S = input()[:-2]\n\n\nlength = len(S)\n\n\nwhile S[:int(length / 2)] != S[int(length / 2):]:\n      S = S[:-2]\n      length = len(S)\n\n      if length == 0:\n          breaek\n\nprint(length)"}
{"label": 69, "index": 8965, "code": "s = input()\nl = len(s)\ns = s[:l-1]\nh = int(l / 2)\n\nfor i in range(len(s)):\n    if l % 2 == 0:\n        h = int(l / 2)\n        a = s[:h]\n        b = s[h:l]\n        if a == b:\n            print(l)\n            break\n    l -= 1\n"}
{"label": 69, "index": 8966, "code": "S = input()\n\n\ndef is_mirror_string(str):\n    if len(str) % 2 != 0:\n        return False\n    else:\n        i = int(len(str)/2)\n        if str[0:i] == str[i:]:\n            return True\n        else:\n            return False\n\n\ndef mirror_string_length(str):\n    s = str[0:-1]\n    while len(s):\n        if is_mirror_string(s):\n            return len(s)\n        else:\n            s = s[0:-1]\n    return 0\n\n\nprint(mirror_string_length(S))\n"}
{"label": 69, "index": 8967, "code": "s = input()\nss = s[0:len(s)-1]\n\n#print (ss)\nfor i in range(len(ss)):\n    chrnum = int(len(ss))- i\n    #print (chrnum)\n    if chrnum % 2 == 0:\n        #print (ss[0:int(chrnum/2)], end=' ')\n        #print (ss[int(chrnum/2) : chrnum])\n        if ss[0:int(chrnum/2)] == ss[int(chrnum/2) : chrnum]:\n            print (chrnum)\n            exit()"}
{"label": 69, "index": 8968, "code": "s = raw_input()\n\nlength = len(s)\n\nfor i in reversed(range(length)):\n    s = s[:-1]\n    l = len(s)\n    tempa = l / 2\n    temp = s\n    s1 = temp[:tempa]\n    s2 = temp[tempa:]\n    \n    if s1 == s2:\n        print l\n        break"}
{"label": 69, "index": 8969, "code": "a = raw_input()\n\nwhile 1:\n\ta = a[:-1]\n\tif len(a) % 2 == 0:\n\t\tif a[:len(a) / 2] == a[len(a) / 2:]:\n\t\t\tprint len(a)\n\t\t\tbreak"}
{"label": 70, "index": 8970, "code": "#!/usr/bin/env python\n\nA,B=map(int,raw_input().split())\nans='Impossible'\nif A%3==0:\n    ans='Possible'\nif B%3==0:\n    ans='Possible'\nif (A+B)%3==0:\n    ans='Possible'\n\nprint ans"}
{"label": 70, "index": 8971, "code": "A, B = list(map(int, input().split(\" \")))\n\nif A % 3 == 0 or B % 3 == 0 or (A+B) % 3 == 0:\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")"}
{"label": 70, "index": 8972, "code": "A,B=map(int,input().split())\nprint(\"Possible\" if A%3==0 or B%3==0 or (A+B)%3==0 else \"Impossible\")"}
{"label": 70, "index": 8973, "code": "a, b = map(int, input().split())\nc = a + b\nif a % 3 == 0 or b % 3 == 0 or c % 3 == 0:\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")\n"}
{"label": 70, "index": 8974, "code": "# coding: utf-8\n\nA, B = tuple(map(int, input().split()))\n\nprint(\"Possible\" if A % 3 == 0 or B % 3 == 0 or (A + B) % 3 == 0 else \"Impossible\")\n"}
{"label": 70, "index": 8975, "code": "A, B = map(int, input().split())\n\nif (A+B) % 3 == 0 or A % 3 == 0 or B % 3 == 0:\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")\n"}
{"label": 70, "index": 8976, "code": "A, B = map(int, input().split())\n \nif (A % 3 == 0) or (B % 3 == 0) or ((A+B) % 3 == 0):\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")"}
{"label": 70, "index": 8977, "code": "cookies = input().split(' ')\na, b = (int(cookies[0]), int(cookies[1]))\n\nif a % 3 == 0 or b % 3 == 0 or (a + b) % 3 == 0: print('Possible')\nelse: print('Impossible')\n"}
{"label": 70, "index": 8978, "code": "list = input().rstrip().split()\nA = int(list[0])\nB = int(list[1])\nif A%3 != 0:\n    if B%3 != 0:\n        if (A+B)%3 != 0:\n            print(\"Impossible\")\n        else: print(\"Possible\")\n    else: print(\"Possible\")\nelse: print(\"Possible\")"}
{"label": 70, "index": 8979, "code": "sh = 3\na, b = map(int, input().split())\nab = a+b\nif a % sh == 0 or b % sh == 0 or ab % sh == 0:\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")\n"}
{"label": 70, "index": 8980, "code": "# Sharing Cokkies\n\nA,B = list(map(int, input().split()))\n\nif ( A%3==0 or B%3==0 or (A+B)%3==0 ):\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")"}
{"label": 70, "index": 8981, "code": "A, B = map(int, input().split())\nprint (\"Possible\" if A %3 == 0 or B % 3 == 0 or (A+B) %3 == 0 else \"Impossible\")\n"}
{"label": 70, "index": 8982, "code": "m, n = map(int, input().split())\nans = (m + n) % 3\nans2 = m % 3\nans3 = n % 3\nif ans == 0 or ans2 == 0 or ans3 == 0:\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")\n"}
{"label": 70, "index": 8983, "code": "a,b = map(int, raw_input().split())\nif a % 3 == 0 or b % 3 == 0 or (a+b) % 3 == 0:\n    print 'Possible'\nelse:\n    print 'Impossible'\n"}
{"label": 70, "index": 8984, "code": "A,B = map(int, input().split())\nif A%3 == 0 or B%3==0 or (A+B)%3 ==0:\n    print('Possible')\nelse:\n    print('Impossible')\n"}
{"label": 70, "index": 8985, "code": "b, c = map(int, raw_input().split())\n\nif b%3==0 or c%3==0 or (b+c)%3==0:\n  print 'Possible'\nelse:\n  print 'Impossible'"}
{"label": 70, "index": 8986, "code": "a, b = map(int, input().split())\nprint(\"Possible\" if (a+b)%3==0 or a%3==0 or b%3==0 else \"Impossible\")\n"}
{"label": 70, "index": 8987, "code": "from sys import stdin\na,b = map(int,stdin.readline().split())\nans = 'Impossible'\nc = a+b\nx = [a,b,c]\ndef ch(n):\n if n==0:\n  return 0\n if n%3:\n  return 0\n return 1\nfor i in x:\n if ch(i):\n  ans = 'Possible'\nprint ans"}
{"label": 70, "index": 8988, "code": "a, b = list(map(int, input().split()))\nif a % 3 == 0 or b % 3 == 0 or (a + b) % 3 == 0:\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")\n"}
{"label": 70, "index": 8989, "code": "a,b =(int (i) for i in input().split())\nif a%3==0:\n    print('Possible')\nelif b%3==0:\n    print('Possible')\nelif (a+b)%3==0:\n    print('Possible')\nelse:\n    print('Impossible')\n"}
{"label": 70, "index": 8990, "code": "a, b = [int(x) for x in input().split()]\nprint('Possible' if a % 3 == 0 or b % 3 == 0 or (a + b) % 3 == 0 else 'Impossible')\n"}
{"label": 70, "index": 8991, "code": "A, B = map(int, input().split())\nif A % 3 ==0 or B % 3 == 0 or (A+B) % 3 == 0:\n    print('Possible')\nelse:\n    print('Impossible')"}
{"label": 70, "index": 8992, "code": "A, B = [int(x) for x in input().split(\" \")]\nif A % 3 == 0 or B % 3 == 0 or (A + B) % 3 == 0:\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")\n"}
{"label": 70, "index": 8993, "code": "A, B = list(map(int, input().split(\" \")))\n\nif (A % 3 != 0) and (B % 3 != 0) and ((A+B) % 3 != 0):\n    print(\"Impossible\")\nelse:\n    print(\"Possible\")"}
{"label": 70, "index": 8994, "code": "x = input().split(\" \")\na = int(x[0])\nb = int(x[1])\n\nif ((a % 3 == 0) or (b % 3 == 0) or ((a+b) % 3 == 0) ):\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")\n"}
{"label": 70, "index": 8995, "code": "x,y = map(int,input().split())\nz = x+y\nprint('Possible' if x%3==0 or y%3==0 or z%3==0 else 'Impossible')"}
{"label": 70, "index": 8996, "code": "A, B = list(map(int, input().split()))\n\nif A % 3 == 0 or B % 3 == 0 or (A + B) % 3 == 0:\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")\n"}
{"label": 70, "index": 8997, "code": "input_line1 = map(int,raw_input().split(\" \"))\n#input_line2 = map(int,raw_input().split(\" \"))\na = input_line1[0]\nb = input_line1[1]\nif a % 3 == 0 or b % 3 == 0 or (a + b) % 3 == 0:\n\tprint \"Possible\"\nelse:\n\tprint \"Impossible\""}
{"label": 70, "index": 8998, "code": "a,b = list(map(int,input().split()))\n\nif a%3==0 or b%3==0 or (a+b)%3==0:\n    print(\"Possible\")\nelse :\n    print(\"Impossible\")"}
{"label": 70, "index": 8999, "code": "cookie = [int(x) for x in input().split()]\nif cookie[0] % 3 == 0 or cookie[1] % 3 == 0 or (cookie[0] + cookie[1]) % 3 == 0:\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")"}
{"label": 70, "index": 9000, "code": "a,b=map(int,input().split())\nprint(\"Possible\"if (a%3)*(b%3)*((a+b)%3)==0 else \"Impossible\")\n"}
{"label": 70, "index": 9001, "code": "ans = ['Possible', 'Impossible']\n\ndef judge(a, b):\n\tif a % 3 == 0:\n\t\treturn 0\n\telif b % 3 == 0:\n\t\treturn 0\n\telif (a + b) % 3 == 0:\n\t\treturn 0\n\treturn 1\n\ninpt = map(int, raw_input().split())\nprint ans[judge(inpt[0], inpt[1])]\n"}
{"label": 70, "index": 9002, "code": "a,b=map(int,input().split())\nif a%3==0 or b%3==0 or (a+b)%3==0:\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")"}
{"label": 70, "index": 9003, "code": "#!/usr/bin/env python\n#-*- coding: utf-8 -*-\n\nfrom collections import defaultdict\nfrom math import factorial as f\nfrom fractions import gcd as g\n\na, b = [int (i) % 3 for i in raw_input ().split ()]\nif a: a = (a + b) % 3\nif a: a = b\nprint [\"Possible\", \"Impossible\"][a != 0]\n"}
{"label": 70, "index": 9004, "code": "# coding: utf-8\n# Here your code !\n \nx=input()\na=int(x.split(\" \")[0])\nb=int(x.split(\" \")[1])\nif (a%3==0 or b%3==0 or (a+b)%3==0):\n    print (\"Possible\")\nelse:\n    print (\"Impossible\")"}
{"label": 70, "index": 9005, "code": "a, b = map(int, input().split(\" \"))\n\nif a % 3 == 0 or b % 3 == 0 or (a + b) % 3 == 0:\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")\n"}
{"label": 70, "index": 9006, "code": "a,b=map(int,input().split())\nif a%3==0 or b%3==0 or (a+b)%3==0:\n  print(\"Possible\")\nelse:\n  print(\"Impossible\")"}
{"label": 70, "index": 9007, "code": "A, B = map(int, input().split())\n\nif A % 3 == 0:\n    print('Possible')\nelif B % 3 == 0:\n    print('Possible')\nelif (A + B) % 3 == 0:\n    print('Possible')\nelse:\n    print('Impossible')\n"}
{"label": 70, "index": 9008, "code": "a, b = map(int, raw_input().split())\nif a%3 == 0 or b%3 == 0 or (a+b)%3 == 0:\n    print \"Possible\"\nelse:\n    print \"Impossible\""}
{"label": 70, "index": 9009, "code": "A, B = map(int, input().split())\n\nif A%3==0 or B%3==0 or (A+B)%3==0:\n    print(\"Possible\")\nelse: print(\"Impossible\")"}
{"label": 70, "index": 9010, "code": "a, b = map(int,input().split())\nprint(\"Possible\" if(a+b)%3==0 or a%3==0 or b%3==0 else \"Impossible\")"}
{"label": 70, "index": 9011, "code": "def read(): return list(map(int, input().split()))\n\n\na, b = read()\nprint(\"Impossible\" if a % 3 and b % 3 and (a + b) % 3 else \"Possible\")"}
{"label": 70, "index": 9012, "code": "# -*- coding: utf-8 -*-\n\na, b = map(int, input().split())\n\nif (a % 3 == 0 or b % 3 == 0 or (a + b) % 3 == 0) and (a+b) > 0:\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")\n"}
{"label": 70, "index": 9013, "code": "a,b=map(int,input().split())\nif a%3==0 or b%3==0 or (a+b)%3==0:\n    print('Possible')\nelse:\n    print('Impossible')"}
{"label": 70, "index": 9014, "code": "def solution(a, b):\n    total = a + b\n    if total % 3 == 0:\n        print('Possible')\n    elif a % 3 == 0:\n        print('Possible')\n    elif b % 3 == 0:\n        print('Possible')\n    else:\n        print('Impossible')\n\nA, B = input().split(' ')\nA, B = int(A), int(B)\n\nsolution(A, B)"}
{"label": 70, "index": 9015, "code": "x, y = map(int, input().strip().split())\ne = x%3==0 or y%3==0 or (x+y)%3==0\nprint(\"Possible\" if e else \"Impossible\")"}
{"label": 70, "index": 9016, "code": "l = list(map(int, input().split()))\na = l[0]+l[1]\n\nif l[0] % 3 == 0:\n    print(\"Possible\")\nelif l[1] % 3 == 0:\n    print(\"Possible\")\nelif a % 3 == 0:\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")\n"}
{"label": 70, "index": 9017, "code": "a, b = map(int, input().split())\nif a % 3 == 0 or b % 3 == 0 or (a + b) % 3 == 0:\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")"}
{"label": 70, "index": 9018, "code": "A, B = map(int, input().split())\nif(A%3==0):\n    print(\"Possible\")\nelif(B%3==0):\n    print(\"Possible\")\nelif((A+B)%3==0):\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")"}
{"label": 70, "index": 9019, "code": "def ri(): return int(input())\ndef rli(): return list(map(int, input().split()))\ndef ris(): return list(input())\ndef pli(a): return \"\".join(list(map(str, a)))\n \na,b = rli()\nif(a % 3 == 0 or b % 3 == 0 or (a+b)%3 == 0):\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")"}
{"label": 70, "index": 9020, "code": "# -*- coding: utf-8 -*-\n\n\nl = map(int, raw_input().split())\nA = l[0]\nB = l[1]\n\nif A%3 == 0 or B%3 == 0 or (A+B)%3 == 0:\n    print('Possible')\nelse:\n  print('Impossible')"}
{"label": 70, "index": 9021, "code": "# -*- coding: utf-8 -*-\n\nA, B = [int(x) for x in input().split()]\n\nif A % 3 == 0:\n    print (\"Possible\")\nelif B % 3 == 0:\n    print(\"Possible\")\nelif (A + B) % 3 == 0:\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")\n"}
{"label": 70, "index": 9022, "code": "def sharing_cookies():\n\tA, B = map(int, raw_input().split(\" \"))\n\tif A%3==0 or B%3==0 or (A+B)%3==0:\n\t\tprint \"Possible\"\n\telse:\n\t\tprint \"Impossible\"\n\n\nif __name__ == \"__main__\":\n\tsharing_cookies()"}
{"label": 70, "index": 9023, "code": "str_cookies_num = input()\ncookies_num = str_cookies_num.split()\ncookies_A = int(cookies_num[0])\ncookies_B = int(cookies_num[1])\n\nif (cookies_A + cookies_B) % 3 == 0:\n    print(\"Possible\")\nelif cookies_A % 3 == 0:\n    print(\"Possible\")\nelif cookies_B % 3 == 0:\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")"}
{"label": 70, "index": 9024, "code": "A, B = [int(i) for i in input().split()]\n\nif A % 3 == 0 or B % 3 == 0 or (A + B) % 3 == 0:\n    print('Possible')\nelse:\n    print('Impossible')\n    "}
{"label": 70, "index": 9025, "code": "a, b = map(int, input().split(\" \"))\n\nif (a+b)%3 == 0:\n    print(\"Possible\")\nelif a%3 == 0:\n    print(\"Possible\")\nelif b%3 == 0:\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")\n"}
{"label": 70, "index": 9026, "code": "# -*- coding: utf-8 -*-\na, b = map(int, raw_input().split())\nif a % 3 == 0:\n    print 'Possible'\nelif b % 3 == 0:\n    print 'Possible'\nelif (a + b) % 3 == 0:\n    print 'Possible'\nelse:\n    print 'Impossible'"}
{"label": 70, "index": 9027, "code": "def mainA():\n    A, B = map(int, input().split())\n    print('Possible' if A%3==0 or B%3==0 or (A+B)%3==0 else 'Impossible')\n\nmainA()"}
{"label": 70, "index": 9028, "code": "A,B = map(int,input().split())\n\nif (A+B)%3==0 or A%3==0 or B%3==0:\n    print(\"Possible\")\n\nelse:\n    print(\"Impossible\")"}
{"label": 70, "index": 9029, "code": "a,b=map(int,input().split())\nif a%3==0:\n  print(\"Possible\")\nelif b%3==0:\n  print(\"Possible\")\nelif (a+b)%3==0:\n  print(\"Possible\")\nelse:\n  print(\"Impossible\")"}
{"label": 70, "index": 9030, "code": "a, b = map(int, input().split())\nif (a%3 == 0) or (b%3 == 0) or ((a+b)%3 == 0):\n    print('Possible')\nelse:\n    print('Impossible')\n"}
{"label": 70, "index": 9031, "code": "A= (input().split())\nif int(A[0]) % 3 == 0 or int(A[1]) % 3 == 0 or (int(A[0]) + int(A[1])) % 3 == 0:\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")"}
{"label": 70, "index": 9032, "code": "# -*- coding: utf-8 -*-\n\nimport re\n\na, b = map(int, re.split('\\s', raw_input()))\n\nif (a % 3 == 0) or (b % 3 == 0) or ((a+b) % 3 == 0):\n        print \"Possible\"\nelse:\n        print \"Impossible\"\n"}
{"label": 70, "index": 9033, "code": "A, B = map(int, raw_input().split())\n\nif A % 3 == 0 or B % 3 == 0 or (A + B) % 3 == 0:\n    print \"Possible\"\nelse:\n    print \"Impossible\"\n"}
{"label": 70, "index": 9034, "code": "def main():\n    A, B = list(map(int, input().strip().split()))\n    if A % 3 == 0 or B % 3 == 0 or (A + B) % 3 == 0:\n        print(\"Possible\")\n    else:\n        print(\"Impossible\")\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 70, "index": 9035, "code": "A,B = map(int, input().split())\nif A%3==0 or B%3==0 or (A+B)%3==0:\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")"}
{"label": 70, "index": 9036, "code": "A, B = map(int, input().split())\nC = A + B\n\nif A % 3 == 0 or B % 3 == 0 or C % 3 == 0:\n\tprint('Possible')\nelse:\n\tprint('Impossible')"}
{"label": 70, "index": 9037, "code": "a,b = list(map(int,input().split()))\nc = a + b\nif (a % 3 == 0):\n    print(\"Possible\")\nelif (b % 3 == 0):\n    print(\"Possible\")\nelif (c % 3 == 0):\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")\n"}
{"label": 70, "index": 9038, "code": "def ri(): return int(input())\ndef rli(): return list(map(int, input().split()))\ndef ris(): return list(input())\ndef pli(a): return \"\".join(list(map(str, a)))\n\na,b = rli()\nif(a % 3 == 0 or b % 3 == 0 or (a+b)%3 == 0):\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")"}
{"label": 70, "index": 9039, "code": "a, b = map(int, input().split())\nif a % 3 == 0 or b % 3 ==0 or (a + b) % 3 == 0:\n    print('Possible')\nelse:\n    print('Impossible')"}
{"label": 70, "index": 9040, "code": "#Python\n\nl = map(int, raw_input().split())\n\nA=l[0]\nB=l[1]\n#print A\n#print B\n\nif A%3==0 or B%3==0 or (A+B)%3==0:\n\tprint 'Possible'\nelse:\n\tprint 'Impossible'\n"}
{"label": 70, "index": 9041, "code": "print((lambda a, b: (not a%3 or not b%3 or not (a + b) % 3) and \"Possible\" or \"Impossible\")(*map(int, input().split())))"}
{"label": 70, "index": 9042, "code": "a,b=[int(i) for i in input().split()]\nif (a%3==0 or b%3==0 or (a+b)%3==0):\n    print (\"Possible\")\nelse : print (\"Impossible\")\n"}
{"label": 70, "index": 9043, "code": "a,b = map(int,(input().split()))\n\nif a%3==0 or b%3==0 or (a+b)%3==0:\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")\n"}
{"label": 70, "index": 9044, "code": "# -*- coding:utf-8 -*-\nA, B = map(int, input().split())\nif A%3 == 0 or B%3 == 0 or (A+B)%3 == 0:\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")"}
{"label": 70, "index": 9045, "code": "a,b = map(int, input().split())\nprint('Possible' if a%3==0 or b%3==0 or (a+b)%3==0 else 'Impossible')"}
{"label": 70, "index": 9046, "code": "a, b = map(int, input().split())\nif (a + b) % 3 == 0:\n    print(\"Possible\")\n    exit()\nelif a % 3 == 0 or b % 3 == 0:\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")"}
{"label": 70, "index": 9047, "code": "A, B = list(map(int ,input().split()))\nif(A%3 !=0 and B%3 != 0 and (A+B) %3 != 0):\n    print(\"Impossible\")\nelse:\n    print(\"Possible\")"}
{"label": 70, "index": 9048, "code": "N = input().split()\n\nA = int(N[0])\nB = int(N[1])\n\nif A%3 == 0:\n    print(\"Possible\")\nelif B%3 == 0:\n    print(\"Possible\")\nelif (A+B)%3 == 0:\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")\n"}
{"label": 70, "index": 9049, "code": "if __name__ == \"__main__\":\n    a,b = map(int, input().split())\n    if a >= 3 and a % 3 == 0:\n        print (\"Possible\")\n        exit()\n    if b >= 3 and b % 3 == 0:\n        print (\"Possible\")\n        exit()\n    if (a + b) >= 3 and (a + b) % 3 == 0:\n        print (\"Possible\")\n        exit()\n    print (\"Impossible\")\n"}
{"label": 70, "index": 9050, "code": "a,b = map(int,input().split())\nif (a + b) % 3 == 0 or a % 3 == 0 or b % 3 == 0:\n   print(\"Possible\")\nelse:\n   print(\"Impossible\")"}
{"label": 70, "index": 9051, "code": "# -*- coding: utf-8 -*-\n\n#\u3059\u306c\u3051\u304f\u3093\u306f 3 \u5339\u306e\u30e4\u30ae\u306b\u30af\u30c3\u30ad\u30fc\u3092\u6e21\u3057\u305f\u3044\u3067\u3059\u3002\n#\u3059\u306c\u3051\u304f\u3093\u306f A \u679a\u306e\u30af\u30c3\u30ad\u30fc\u304c\u5165\u3063\u305f\u7f36\u3068\u3001B \u679a\u306e\u30af\u30c3\u30ad\u30fc\u304c\u5165\u3063\u305f\u7f36\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\n#\u3059\u306c\u3051\u304f\u3093\u306f A,B,A+B \u306e\u3044\u305a\u308c\u304b\u306e\u679a\u6570\u306e\u30af\u30c3\u30ad\u30fc\u3092\u30e4\u30ae\u305f\u3061\u306b\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n#3 \u5339\u306e\u30e4\u30ae\u304c\u540c\u3058\u679a\u6570\u305a\u3064\u98df\u3079\u3089\u308c\u308b\u3088\u3046\u306b\u30af\u30c3\u30ad\u30fc\u3092\u6e21\u3059\u3053\u3068\u304c\u53ef\u80fd\u304b\u3069\u3046\u304b\u5224\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n#3 \u5339\u306e\u30e4\u30ae\u304c\u540c\u3058\u679a\u6570\u305a\u3064\u98df\u3079\u3089\u308c\u308b\u3088\u3046\u306b\u30af\u30c3\u30ad\u30fc\u3092\u6e21\u3059\u3053\u3068\u304c\u53ef\u80fd\u306a\u3089\u3070 Possible \u3068\u3001\n#\u305d\u3046\u3067\u306a\u3051\u308c\u3070 Impossible \u3068\u51fa\u529b\u305b\u3088\u3002\n\nA = input().split()\n#A = [3, 3]\nx = int(A[0])\ny = int(A[1])\n\nif x % 3 ==0:\n    print(\"Possible\")\n\nelif y % 3 ==0:\n    print(\"Possible\")\n    \nelif (x + y) % 3 ==0:\n    print(\"Possible\")\n\n    \nelse:\n    print(\"Impossible\")\n    \n\n"}
{"label": 70, "index": 9052, "code": "a,b = map(int,input().split())\nmsg = \"\"\nif a%3 == 0 or b%3 == 0 or (a+b)%3 == 0:\n msg = 'Possible'\nelse :\n msg  = 'Impossible'\nprint(msg)"}
{"label": 70, "index": 9053, "code": "A, B = list(map(int, input().split()))\n\nif A == 0 and B == 0:\n    print(\"Impossible\")\nelif A % 3 == 0 or B % 3 == 0 or (A+B) % 3 == 0:\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")\n"}
{"label": 70, "index": 9054, "code": "a, b = map(int, input().split())\n\nif a % 3 == 0 or b % 3 == 0 or (a + b) % 3 == 0:\n    print('Possible')\nelse:\n    print('Impossible')"}
{"label": 70, "index": 9055, "code": "a,b=map(int,input().split())\n\njud=False\n\nif a%3==0:\n    jud=True\nelif b%3==0:\n    jud=True\nelif (a+b)%3==0:\n    jud=True\nelse:\n    jud=False\n\nif jud==True:\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")"}
{"label": 70, "index": 9056, "code": "# coding: utf-8\n# Here your code !\na=input()\nb=a.split(\" \")\nA=int(b[0])\nB=int(b[1])\n\nC=A+B\nif C%3==0 or A%3==0 or B%3==0:\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")"}
{"label": 70, "index": 9057, "code": "a, b = map(int, raw_input().split())\nprint \"Possible\" if (a % 3 == 0 or b % 3 == 0 or (a + b) % 3 == 0) else \"Impossible\"\n    \n"}
{"label": 70, "index": 9058, "code": "import sys\na, b = map(int, sys.stdin.readline().split())\nprint [\"Impossible\", \"Possible\"][a % 3 == 0 or b % 3 == 0 or (a + b) % 3 == 0]\n"}
{"label": 70, "index": 9059, "code": "a, b = map(int,input().split())\n\nif a % 3 == 0 or b % 3 == 0 or (a + b) % 3 == 0:\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")\n"}
{"label": 70, "index": 9060, "code": "ab = input().split(' ')\n#print(ab)\nif int(ab[0])  % 3 == 0 or int(ab[1]) % 3 ==0   or (int(ab[1])+ int(ab[0])) % 3 == 0:\n    ans  = 'Possible'\n\nelse:\n    ans ='Impossible'\n    \nif (int(ab[0]) + int(ab[1])) <= 3:\n    ans= 'Impossible'\nprint (ans) "}
{"label": 70, "index": 9061, "code": "n,m=map(int,raw_input().split())\nprint \"Possible\" if n%3==0 or m %3==0 or (n+m)%3==0 else \"Impossible\""}
{"label": 70, "index": 9062, "code": "a,b=map(int,input().split())\nc=a+b\n\nif a%3==0 or b%3==0 or c%3==0: print(\"Possible\")\nelse: print(\"Impossible\")"}
{"label": 70, "index": 9063, "code": "a, b = map(int, input().split())\nprint('Impossible' if a % 3 and b % 3 and (a + b) % 3 else 'Possible')\n"}
{"label": 70, "index": 9064, "code": "#!/usr/bin/env python\n# -*- conding: utf-8 -*-\n\nraw = raw_input()\nA = int(raw.split()[0])\nB = int(raw.split()[1])\n\nif(A%3==0 or B%3==0 or (A+B)%3==0):\n    print \"Possible\"\nelse:\n    print \"Impossible\"\n"}
{"label": 70, "index": 9065, "code": "A , B = map(int, input().split())\nif A + B <  3:\n    print(\"Impossible\")\n    \nelif A%3 == 0 or B%3 == 0 or (A+B)%3 ==0 :\n    print(\"Possible\")\n\nelse:\n    print(\"Impossible\")"}
{"label": 70, "index": 9066, "code": "m, n = map(int, input().split())\nans = (m + n) % 3\nans2 = m % 3\nans3 = n % 3\nif ans == 0 or ans2 == 0 or ans3 == 0:\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")"}
{"label": 70, "index": 9067, "code": "Imp = list(map(int, input().split()))\nA = Imp[0]\nB = Imp[1]\nre = 0\nif A % 3 == 0:    \n    re = 1\nif B % 3 == 0:\n    re = 1\nif (A+B) % 3 == 0:\n        re = 1\n        \nif re ==1:\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")"}
{"label": 70, "index": 9068, "code": "A, B = list(map(int, input().split()))\nif A % 3 == 0 or B % 3 == 0 or (A+B) % 3 == 0:\n\tprint(\"Possible\")\nelse:\n\tprint(\"Impossible\")"}
{"label": 70, "index": 9069, "code": "a,b=map(int,input().split())\nc=a + b\n \nif  a%3==0 or b%3==0 or c%3==0: print(\"Possible\")\nelse: print(\"Impossible\")"}
{"label": 70, "index": 9070, "code": "a, b = map(int, input().split())\n\ndef check(a, b):\n    if a % 3 == 0:\n        return 1\n    elif b % 3 == 0:\n        return 1\n    elif (a + b) % 3 == 0:\n        return 1\n    else:\n        return 0\n\ndef main():\n    if check(a, b) == 1:\n        print(\"Possible\")\n    else:\n        print(\"Impossible\")\n\nmain()"}
{"label": 70, "index": 9071, "code": "A , B = map(int, input().split())\n#print(A, B)\nif (A%3==0 or B%3 == 0 or (A+B) % 3 == 0):\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")\n"}
{"label": 70, "index": 9072, "code": "a=list(map(int,input().split()))\nif a[0]%3==0 or a[1]%3==0 or (a[0]+a[1])%3==0:\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")\n"}
{"label": 70, "index": 9073, "code": "a,b=map(int,input().split())\nc = a+b\nif a%3==0 or b%3==0 or c%3==0:\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")"}
{"label": 70, "index": 9074, "code": "a, b = map(int, input().split())\n\nif a % 3 == 0 or b % 3 == 0 or (a + b) % 3 == 0:\n    print('Possible')\nelse:\n    print('Impossible')"}
{"label": 70, "index": 9075, "code": "a, b = [int(i) for i in input().split()]\nif a % 3 == 0 or b % 3 == 0 or (a+b) % 3 == 0:\n    print('Possible')\nelse:\n    print('Impossible')\n"}
{"label": 70, "index": 9076, "code": "if __name__ == '__main__':\n    lis = list(map(int, input().split()))\n    A = lis[0]\n    B = lis[1]\n    \n    if (A % 3 == 0 or B % 3 == 0 or (A + B) % 3 == 0):\n        print(\"Possible\")\n    else:\n        print(\"Impossible\")"}
{"label": 70, "index": 9077, "code": "# -*- coding: utf-8 -*-\n\"\"\"\nhttp://abc067.contest.atcoder.jp/tasks/abc067_a\n\n\"\"\"\nimport sys\nfrom sys import stdin\ninput = stdin.readline\n\n\ndef main(args):\n    A, B = map(int, input().split())\n    if (A+B) % 3 == 0 or A % 3 == 0 or B % 3 == 0:\n        print('Possible')\n    else:\n        print('Impossible')\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n    \n"}
{"label": 70, "index": 9078, "code": "t = raw_input().split()\na = int(t[0])\nb = int(t[1])\nif a%3 == 0 or b%3 == 0 or (a+b)%3 == 0:\n\tprint('Possible')\nelse:\n\tprint(\"Impossible\")"}
{"label": 70, "index": 9079, "code": "# coding=utf-8\na,b = map(int, raw_input().split())\n\nif (a + b) %3 == 0:\n    print(\"Possible\")\nelif a % 3 == 0:\n    print(\"Possible\")\nelif b % 3 == 0:\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")"}
{"label": 70, "index": 9080, "code": "A, B = map(int, input().split())\n\nif A % 3 == 0 or B % 3 == 0 or (A + B) % 3 == 0:\n    print('Possible')\nelse:\n    print('Impossible')"}
{"label": 70, "index": 9081, "code": "A, B = [int(n) for n in input().split()]\nif A%3==0 or B%3==0 or (A+B)%3==0:\n  print(\"Possible\")\nelse:\n  print(\"Impossible\")"}
{"label": 70, "index": 9082, "code": "a,b = map(int,input().split())\nif a % 3 == 0:\n\tprint('Possible')\nelif b % 3 == 0:\n\tprint('Possible')\nelif (a + b) % 3 == 0:\n\tprint('Possible')\nelse:\n\tprint('Impossible')"}
{"label": 70, "index": 9083, "code": "A, B = map((int), input().split())\n\nif(A % 3 == 0 or B % 3 == 0 or (A + B) % 3 == 0 ):\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")"}
{"label": 70, "index": 9084, "code": "A, B = map(int, raw_input().split())\n\nC = A + B\n\nif A % 3 == 0:\n    print \"Possible\"\nelif B % 3 == 0:\n    print \"Possible\"\nelif C % 3 == 0:\n    print \"Possible\"\nelse:\n    print \"Impossible\"\n"}
{"label": 70, "index": 9085, "code": "a, b = map(int, input().split(\" \"))\nif a % 3 == 0 or b % 3 == 0 or (a + b) % 3 == 0:\n  print(\"Possible\")\nelse:\n  print(\"Impossible\")"}
{"label": 70, "index": 9086, "code": "a,b=map(int,input().split())\nif a%3==0 or b%3==0 or (a+b)%3==0:\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")"}
{"label": 70, "index": 9087, "code": "c= [int (i) for i in input().split()]\nif sum(c)%3==0 or c[0]%3==0 or c[1]%3 ==0:\n\tprint('Possible')\nelse: print('Impossible')"}
{"label": 70, "index": 9088, "code": "A,B=map(int,input().split())\nif (A%3==0 or B%3==0 or (A+B)%3==0):\n print ('Possible')\nelse:\n print('Impossible')"}
{"label": 70, "index": 9089, "code": "c, d = map(int, input().split())\nans = 0\n\nif(c % 3 == 0) :\n    ans = 1\nelif(d % 3 == 0) :\n    ans = 1\nelif((c + d) % 3 == 0) :\n    ans = 1\n\nif (ans == 1) :\n    print ('Possible')\nelse :\n    print ('Impossible')"}
{"label": 70, "index": 9090, "code": "import sys\n\ndef main():\n    line = sys.stdin.readline()\n    lst = line.split()\n    a = int(lst[0])\n    b = int(lst[1])\n\n    if (a % 3 == 0) or (b % 3 == 0) or ((a+ b) % 3 == 0 ):\n        print(\"Possible\")\n    else:\n        print(\"Impossible\")\n\n    return 0\n\nif __name__ == '__main__':\n    sys.exit(main())\n"}
{"label": 70, "index": 9091, "code": "s = input().split()\ns = [int(i) for i in s]\na = s[0]\nb = s[1]\n\nif a % 3 == 0 : print(\"Possible\")\nelif b % 3 == 0 : print(\"Possible\")\nelif (a + b) % 3 == 0 : print(\"Possible\")\nelse : print(\"Impossible\")"}
{"label": 70, "index": 9092, "code": "A, B = list(map(int, input().split()))\n\nif A % 3 == 0 or B % 3 == 0 or (A + B) % 3 == 0:\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")\n\n"}
{"label": 70, "index": 9093, "code": "a, b = map(int, raw_input().split())\n\n\nif a % 3 == 0 or b % 3 == 0 or (a+b)%3==0:\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")\n\n"}
{"label": 70, "index": 9094, "code": "# -*- coding: utf-8 -*-\nimport sys\n\nA, B = map(int, input().split())\n\nC = A + B\n\nif A%3 == 0:\n    print('Possible')\nelif B%3 == 0:\n    print('Possible')\nelif C%3 == 0:\n    print('Possible')\nelse:\n    print('Impossible')"}
{"label": 70, "index": 9095, "code": "a,b=map(int,input().split());print([\"P\",\"Imp\"][a%3==b%3>0]+\"ossible\")"}
{"label": 70, "index": 9096, "code": "#!/usr/bin/python\n\nimport sys\n\ndef main(argv):\n    for line in sys.stdin:\n        A, B = map(lambda x: int(x), line.split(\" \", 2))\n        if (A % 3) == 0 or (B % 3) == 0 or ((A+B) % 3) == 0:\n            print(\"Possible\")\n        else:\n            print(\"Impossible\")\n\nif __name__ == \"__main__\":\n    main(sys.argv)"}
{"label": 70, "index": 9097, "code": "#!usr/bim/python\n#! -*- coding: utf-8 -*-\n\n\na_b = raw_input()\na_b = a_b.split()\na = a_b[0]\nb = a_b[1]\na = int(a)\nb = int(b)\n\nstatus = 0\n\nif a % 3 == 0:\n    status = 1\nelif b % 3 == 0:\n    status = 1\nelif (a + b) % 3 == 0:\n    status = 1\n\nif status == 0:\n    print \"Impossible\"\nelse:\n    print \"Possible\"\n"}
{"label": 70, "index": 9098, "code": "a,b = map(int,input().split())\n#print(a,b)\n#c = 0\nif a%3 == 0 or b%3 == 0 or (a+b)%3 ==0:\n    print('Possible')\nelse:\n    print('Impossible')\n"}
{"label": 70, "index": 9099, "code": "a, b = map(int, input().split())\nif a % 3 == 0 or b % 3 == 0 or (a + b )%3 == 0:\n    print('Possible')\nelse:\n    print('Impossible')\n"}
{"label": 71, "index": 9100, "code": "n,k = [int(i) for i in input().split()]\nprint(-sum(sorted([-int(i) for i in input().split()])[:k]))\n"}
{"label": 71, "index": 9101, "code": "N,K = map(int,input().split())\nH=list(map(int,input().split()))\n\nH.sort(reverse=True)\n\nA=H[0:K]\nB=sum(A)\n\nprint(B)\n"}
{"label": 71, "index": 9102, "code": "N , K = map(int, input().split())\nlenghths = list(map(int , input().split()))\n\nlenghths.sort(reverse=True)\nanswer = sum(lenghths[0:K])\nprint(answer)"}
{"label": 71, "index": 9103, "code": "N,K = list(map(int,input().split()))\nL =list(map(int,input().split()))\n\nL.sort()\n\nprint(sum(L[-K:]))"}
{"label": 71, "index": 9104, "code": "N, K = map(int, input().split())\nl = list(map(int, input().split()))\nL = sorted(l, reverse = True)\nans = 0\nfor i in range(K):\n\tans += L[i]\n\t\nprint(ans)"}
{"label": 71, "index": 9105, "code": "n,k = list(map(int,input().split()))\na = list(map(int,input().split()))\na.sort()\na.reverse()\nprint(sum(a[:k]))\n"}
{"label": 71, "index": 9106, "code": "n,k=map(int,input().split())\nl=[int(x) for x in input().split()]\nprint(sum(sorted(l)[n-k:]))"}
{"label": 71, "index": 9107, "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\ninput_line = sys.stdin.readline().split(' ')\nn = int(input_line[0])\nk = int(input_line[1])\n\ninput_line = sys.stdin.readline().split(' ')\nl_list = list(map(int, input_line))\n\nl_list.sort(reverse=True)\n\nl = 0\nfor i in range(0, k):\n\tl += l_list[i]\n\nprint(l)\n"}
{"label": 71, "index": 9108, "code": "import sys\nn, k = map(int, sys.stdin.readline().split())\na = sorted(map(int, sys.stdin.readline().split()))\n\n\nprint sum (a[n - k:])\n"}
{"label": 71, "index": 9109, "code": "def main():\n    N, K = list(map(int, input().strip().split()))\n    ls = list(map(int, input().strip().split()))\n    k_total = sum(sorted(ls, reverse=True)[:K])\n    print(k_total)\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 71, "index": 9110, "code": "N, K = map(int, input().split())\nL = list(map(int, input().split()))\nL.sort(reverse=True)\n\nans = sum(L[:K])\nprint(ans)\n"}
{"label": 71, "index": 9111, "code": "# -*- coding:utf-8 -*-\nimport itertools\nimport numpy as np\n\nN,K = map(int,input().split())\nl = np.array(list(map(int,input().split())))\n\nans = 0\nfor i in range(K):\n    max_i = np.argmax(l)\n    ans += l[max_i]\n    l = np.delete(l,max_i)\n\nprint(ans)\n"}
{"label": 71, "index": 9112, "code": "def solution(n, k, l_list):\n    l_list.sort(reverse=True)\n    result = sum(l_list[:k])\n    return result\n\n\nN, K = [int(value) for value in input().split(' ')]\nl_list = [int(value) for value in input().split(' ')]\nprint(solution(N, K, l_list))"}
{"label": 71, "index": 9113, "code": "def solve():  # 068B - Snake Toy\n    N, K = [int(x) for x in input().split(\" \")]\n    l = [int(x) for x in input().split(\" \")]\n    l.sort(reverse=True)\n    print(sum(l[:K]))\n\n\nsolve()"}
{"label": 71, "index": 9114, "code": "# -*- coding: utf-8 -*-\n\"\"\"\nhttp://abc067.contest.atcoder.jp/tasks/abc067_b\n\n\"\"\"\nimport sys\nfrom sys import stdin\n\ninput = stdin.readline\n\n\ndef main(args):\n    N, K = map(int, input().split())\n    rods = [int(x) for x in input().split()]\n    rods.sort()\n    snake = rods[-K:]\n    print(sum(snake))\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n    \n"}
{"label": 71, "index": 9115, "code": "from sys import stdin\nn,k = map(int,stdin.readline().split())\na = map(int,stdin.readline().split())\na.sort()\na.reverse()\nprint sum(a[:k])"}
{"label": 71, "index": 9116, "code": "n,k=[int(i) for i in input().split()]\nl=[int(i) for i in input().split()]\nl.sort()\na=0\nfor i in range(k):\n  a+=l[n-1-i]\nprint(a)"}
{"label": 71, "index": 9117, "code": "N, K = list(map(int, input().split()))\nl = list(map(int, input().split()))\nl.sort(reverse=True)\nans = 0\nfor i in range(K):\n    ans += l[i]\nprint(ans)\n"}
{"label": 71, "index": 9118, "code": "n, k = map(int, input().split())\n\nl = list(map(int, input().split()))\n\nl.sort()\nl.reverse()\n\nprint(sum(l[0:k]))"}
{"label": 71, "index": 9119, "code": "N_K = map(int, raw_input().split())\n\nl = map(int, raw_input().split())\nl.sort()\nl.reverse()\n\nans = 0\n\nfor i in range(N_K[1]):\n    ans += int(l[i])\n\nprint ans\n"}
{"label": 71, "index": 9120, "code": "N, K = list(map(int, input().split()))\nl_list = list(map(int, input().split()))\n\nl_list.sort(reverse=True)\nprint(sum(l_list[:K]))\n\n"}
{"label": 71, "index": 9121, "code": "N, K = input().split()\nl = input().split()\nl = list(map(int, l))\nl.sort(reverse=True)\n\nsum = 0\nfor i in range(int(K)):\n  sum += l[i]\n\nprint(sum)"}
{"label": 71, "index": 9122, "code": "N ,K=list(map(int,input().split()))\nl=list(map(int,input().split()))\n\nl.sort(reverse=True)\n\nA=0\n\nfor i in range(K):\n    A+=l[i]\n\nprint(A)"}
{"label": 71, "index": 9123, "code": "def read(): return list(map(int, input().split()))\n\nn, k = read()\nl = read()\nprint(sum(sorted(l)[::-1][:k]))"}
{"label": 71, "index": 9124, "code": "# coding: utf-8\n\nn, k = map(int, raw_input().split())\nl = map(int, raw_input().split())\n\nl.sort()\nprint sum(l[-k:])\n"}
{"label": 71, "index": 9125, "code": "# -*- coding: utf-8 -*-\n\nimport re\n\nn, k = map(int, re.split('\\s', raw_input()))\nl = map(int, re.split('\\s', raw_input()))\nans = 0\n\nl.sort()\nl.reverse()\nfor i in range(0,k):\n        ans += l[i]\n\nprint ans\n"}
{"label": 71, "index": 9126, "code": "N,K=map(int,input().split())\nl=sorted(map(int,input().split()),reverse=True)\nprint (sum(l[:K]))"}
{"label": 71, "index": 9127, "code": "N, K = list(map(int, input().split(\" \")))\n\nl = list(map(int, input().split(\" \")))\n\nsorted_l = sorted(l)[::-1]\n\nprint(sum(sorted_l[:K]))"}
{"label": 71, "index": 9128, "code": "n,k = map(int, input().split())\nlong = [int(i) for i in input().split()]\nlong = sorted(long, reverse = True)\nprint(sum(long[0:k]))"}
{"label": 71, "index": 9129, "code": "\na = list(map((int),input().split(' ')))\n\nN = a[0]\nK = a[1]\nsub = N - K\n\nb = list(map((int),input().split(' ')))\n\n\nfor i in range(sub):\n    b.pop(b.index(min(b)))\n    \nprint(sum(b))"}
{"label": 71, "index": 9130, "code": "n,k,*L=map(int,open(0).read().split());print(sum(sorted(L)[-k:]))"}
{"label": 71, "index": 9131, "code": "N, K = (int(i) for i in input().split())  \nl = [int(i) for i in input().split()]\nans = 0\n\nfor i in range(K):\n\tans += max(l)\n\tl.pop(l.index(max(l)))\n\nprint(ans)\n"}
{"label": 71, "index": 9132, "code": "n, k = map(int, input().split())\nprint(sum((sorted(map(int, input().split())))[n-k:n]))\n"}
{"label": 71, "index": 9133, "code": "N, K = [int(i) for i in input().split()]\n\nl = [int(j) for j in input().split()]\n\nl = sorted(l)\n\nans = 0\nfor k in range(N-K, N, 1):\n    ans += l[k]\n\nprint(ans)\n"}
{"label": 71, "index": 9134, "code": "n, k = map(int,input().split())\nl = list(map(int,input().split()))\n\nl.sort()\nans = 0\nfor i in range(k):\n    ans += l[-i - 1]\n\nprint(ans)"}
{"label": 71, "index": 9135, "code": "N,K = map(int, input().split())\n\nL = list(map(int, input().split()))\n\nL.sort(reverse=True)\nans = 0\nfor i in range(K):\n    ans += L[i]\nprint(ans)\n"}
{"label": 71, "index": 9136, "code": "#!/usr/bin/env python\n\nN,K=map(int,raw_input().split())\nl=map(int,raw_input().split())\nl.sort()\nprint sum(l[len(l)-K:len(l)])"}
{"label": 71, "index": 9137, "code": "n, k =(int (i) for i in input().split())\nl=[int(i) for i in input().split()]\nl.sort()\nsum=0\nfor i in range(0,k):\n    sum += l.pop()\n \nprint(sum)"}
{"label": 71, "index": 9138, "code": "N, K = list(map(int, input().split()))\nL = list(map(int, input().split()))\nL.sort()\nprint(sum(L[-1:-K-1:-1]))"}
{"label": 71, "index": 9139, "code": "N, K = map(int,input().split())\nL = list(map(int, input().split()))\nL.sort()\nprint(sum(L[N-K:]))"}
{"label": 71, "index": 9140, "code": "N, K = map(int, raw_input().split())\nl = list(map(int, raw_input().split()))\n\nl.sort(reverse=True)\n\nprint sum(l[:K])\n\n"}
{"label": 71, "index": 9141, "code": "N, K = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\na.sort()\na.reverse()\nsum = 0\nfor i in range(K):\n    sum += a[i]\nprint(sum)"}
{"label": 71, "index": 9142, "code": "#!usr/bim/python\n#! -*- coding: utf-8 -*-\n\nn_k = raw_input()\nn_k = n_k.split()\nn_k = map(int,n_k)\nn = n_k[0]\nk = n_k[1]\n\nl = raw_input()\nl = l.split()\nl = map(int,l)\n\nans = 0\ni = 0\nwhile i < k:\n    max_len = max(l)\n    ans += max_len\n    l[l.index(max_len)] = 0\n    i += 1\n\nprint ans\n"}
{"label": 71, "index": 9143, "code": "n, k = map(int, raw_input().split())\na = map(int, raw_input().split())\na.sort(reverse = True)\nans = 0\nfor i in xrange(k):\n    ans += a[i]\nprint ans\n"}
{"label": 71, "index": 9144, "code": "N, K = [int(x) for x in input().split()]\nl = [int(x) for x in input().split()]\nans = 0\n\nl.sort(reverse=True)\nfor i in range(K):\n\tans += l[i]\n\nprint(ans)\n"}
{"label": 71, "index": 9145, "code": "import sys\n\n# sys.stdin = open('b1.in')\n\n\ndef read_int_list():\n    return list(map(int, input().split()))\n\n\ndef read_str_list():\n    return input().split()\n\n\ndef read_int():\n    return int(input())\n\n\ndef read_str():\n    return input()\n\n\ndef main():\n    n, k = read_int_list()\n    l = read_int_list()\n    l.sort()\n    res = sum([i for i in l[-k:]])\n    print(res)\n\n\nmain()\n"}
{"label": 71, "index": 9146, "code": "\nN, K = map(int, input().split())\nlens = [int(e) for e in input().split()]\nlens.sort()\nlens.reverse()\n\nprint(sum(lens[:K]))\n\n"}
{"label": 71, "index": 9147, "code": "n,m=map(int,raw_input().split())\ns=raw_input().split()\na=[]\nt=[0 for i in range(n)]\nfor i in range(n):\n    a.append(int(s[i]))\nsum=0\na=sorted(a)\nfor j in range(n-1,n-m-1,-1):\n    sum=sum+a[j]\nprint sum"}
{"label": 71, "index": 9148, "code": "N, K = map(int, input().split())\nl = list(map(int, input().split()))\n\nl.sort()\nl.reverse()\n\nsum = 0\nfor i in range(K):\n\tsum += l[i]\nprint(sum)\n"}
{"label": 71, "index": 9149, "code": "N, K = map(int, raw_input().split())    \nl = sorted(map(int, raw_input().split()))\nprint sum(l[-K:])\n\n"}
{"label": 71, "index": 9150, "code": "inpt = map(int, raw_input().split())\nn = inpt[0]\nk = inpt[1]\nlst = map(int, raw_input().split())\nlst.sort()\nans = 0\nfor i in range(0, k):\n\tans += lst[-1-i]\nprint ans"}
{"label": 71, "index": 9151, "code": "n, k = map(int, input().split())\nl = list(map(int, input().split()))\n\nlsort = sorted(l, reverse=True)\n\nlsum = 0\nfor i in range(k):\n    lsum = lsum + lsort[i]\nprint(lsum)"}
{"label": 71, "index": 9152, "code": "sum = 0\nN, K = map(int, input().split())\nl = map(int, input().split())\n#print(l)\nsort_l = sorted(l, reverse = True)\n#print(sort_l)\nfor i in range(0,K):\n    sum += sort_l[i]\n\nprint(sum)\n"}
{"label": 71, "index": 9153, "code": "N, K = map(int, input().split())\n\nL = list(map(int, input().split()))\n\ndef main(K):\n    ans = 0\n    L.sort()\n    L.reverse()\n    i = 0\n    while i < K:\n        ans += L[i]\n        i += 1\n    return ans\n\nprint(main(K))"}
{"label": 71, "index": 9154, "code": "N, K = map(int, input().split())\nl = map(int, input().split())\nprint(sum(sorted(l, reverse=True)[:K]))\n"}
{"label": 71, "index": 9155, "code": "import numpy as np\n\nnk = input().split(' ')\nn, k = (int(nk[0]), int(nk[1]))\nl = [int(num) for num in input().split(' ')]\nmax = 0\nfor _ in range(k):\n    m = np.array(l).max()\n    max += m\n    l.remove(m)\nprint(max)\n"}
{"label": 71, "index": 9156, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\n\n\ndef main():\n    n,k = LI()\n    a = sorted(LI(),reverse=True)\n\n    return sum(a[:k])\n\n\nprint(main())\n\n\n\n"}
{"label": 71, "index": 9157, "code": "N, K = map(int, input().split())\nl = list(map(int, input().split()))\nl.sort(key=lambda x: -x)\nans = 0\nfor i in range(K):\n    ans += l[i]\nprint(ans)\n"}
{"label": 71, "index": 9158, "code": "N , K = map(int, input().split())\nlenghths = list(map(int , input().split()))\n\nlenghths.sort(reverse=True)\nanswer = sum(lenghths[0:K])\nprint(answer)"}
{"label": 71, "index": 9159, "code": "# encoding:utf-8\n\ndef main():\n\tN, K = list(map(int, input().split()))\n\tlen_bar = list(map(int, input().split()))\n\tlen_bar.sort()\n\tadapt_bar = len_bar[N-K:]\n\tprint(sum(adapt_bar))\n\nif __name__ == '__main__':\n\tmain()"}
{"label": 71, "index": 9160, "code": "N, K = map(int, input().split())\nL = [int(n) for n in input().split()]\nsort = sorted(L, reverse=True)\nlength = 0\nfor i in range(K):\n    length += sort[i]\nprint(length)\n"}
{"label": 71, "index": 9161, "code": "a,b = map(int,input().split())\nc = list(map(int,input().split()))\nd = 0\nfor x in range(b):\n    cc = max(c)\n    d += cc\n    c.remove(cc)\nprint(d)\n"}
{"label": 71, "index": 9162, "code": "def mainB():\n    N, K = map(int, input().split())\n    l =  list(map(int, input().split()))\n    l = sorted(l)[::-1]\n    ans = 0\n    for i in range(K):\n        ans += l[i]\n    print(ans)\n\nmainB()"}
{"label": 71, "index": 9163, "code": "N, K = list(map(int, input().split()))\nl = list(map(int, input().split()))\nres = 0\n\nl.sort(reverse=True)\nfor num in range(K):\n    res = res + l[num]\nprint(str(res))\n"}
{"label": 71, "index": 9164, "code": "sticks_canJoinNum = input()\nstr_stickLength = input()\n\nsticks_num = int(sticks_canJoinNum.split()[0])\nnum_canJoin = int(sticks_canJoinNum.split()[1])\nstick_list = [int(i) for i in str_stickLength.split()]\n\nstick_list.sort(reverse=True)\nmax_length = sum(stick_list[:num_canJoin])\nprint(max_length)"}
{"label": 71, "index": 9165, "code": "Imp = list(map(int, input().split()))\nBlist = list(map(int, input().split()))\nBlist.sort()\n\nout = 0\nfor i in range(Imp[1]):\n    out += Blist[-(i+1)]\n    \nprint(out)"}
{"label": 71, "index": 9166, "code": "n,k = map(int,input().split())\nl = list(map(int,input().split()))\nl.sort()\nlength = 0\nfor i in range(k):\n\tlength += l[n-1-i]\nprint(length)"}
{"label": 71, "index": 9167, "code": "m, n = map(int, input().split())\nM = list(map(int, input().split()))\nM.sort()\nM.reverse()\nA = []\nfor i in range(n):\n    A.append(M[i])\nprint(sum(A))\n"}
{"label": 71, "index": 9168, "code": "n, k = map(int, input().split())\nlen_list = list(map(int, input().split()))\n\nlen_list.sort(reverse=True)\n\nprint(sum(len_list[:k]))\n"}
{"label": 71, "index": 9169, "code": "N,K  = map(int, raw_input().split())\nl =  map(int, raw_input().split())\nl.sort(reverse=True)\nsum = 0\nfor i in range(K):\n    sum += l[i]\nprint(sum)"}
{"label": 71, "index": 9170, "code": "N, K = map(int, input().split())\nl = list(map(int, input().split()))\nl.sort(reverse=True)\nprint(sum(l[:K]))\n"}
{"label": 71, "index": 9171, "code": "N,K = map(int, input().split())\nL = list(map(int, input().split()))\nL = sorted(L)[::-1]\nprint(sum(L[:K]))"}
{"label": 71, "index": 9172, "code": "# -*- coding:utf-8 -*-\nN, K = map(int, input().split())\nl = sorted(list(map(int, input().split())), reverse = True)\nans = 0\nfor tmp in range(K):\n    ans += l[tmp]\nprint(ans)"}
{"label": 71, "index": 9173, "code": "N,K = [int(i) for i in input().split(\" \")]\nl = [int(i) for i in input().split(\" \")]\nl.sort()\nprint(sum(l[N-K:N]))\n"}
{"label": 71, "index": 9174, "code": "n, k = map(int, input().split())\nprint(sum(list(sorted(map(int, input().split()), reverse=True))[:k]))\n"}
{"label": 71, "index": 9175, "code": "N, K = [int(n) for n in input().split()]\nl = [int(n) for n in input().split()]\n\nl.sort(reverse = True)\n\nprint(sum(l[:K]))"}
{"label": 71, "index": 9176, "code": "m, n = map(int, input().split())\nM = list(map(int, input().split()))\nM.sort()\nM.reverse()\nA = []\nfor i in range(n):\n    A.append(M[i])\nprint(sum(A))\n"}
{"label": 71, "index": 9177, "code": "a,b = map(int,input().split())\nn = list(map(int,input().split()))\nn.sort()\nprint(sum(n[-b:]))\n"}
{"label": 71, "index": 9178, "code": "n,k = map(int, raw_input().split())\nl = map(int, raw_input().split())\nl.sort()\ns = 0\nfor i in range(n-k, n):\n    s += l[i]\nprint s\n"}
{"label": 71, "index": 9179, "code": "A = input().split()\n\nN = int(A[0])\nK = int(A[1])\n\nA = input().split()\nl = []\n\nfor n in range(N):\n    l.append(int(A[n]))\n\nl.sort(reverse=True)\nsum=0\nfor i in range(K):\n    sum = sum + l[i]\nprint(sum)\n"}
{"label": 71, "index": 9180, "code": "#ABC067B\n\nn,k=map(int,raw_input().split())\nl=map(int,raw_input().split())\nl=sorted(l,reverse=True)\nres=0\nfor i in xrange(k):\n res+=l[i]\nprint res\n"}
{"label": 71, "index": 9181, "code": "m, n = map(int, input().split())\nM = list(map(int, input().split()))\nM.sort()\nM.reverse()\nA = []\nfor i in range(n):\n    A.append(M[i])\nprint(sum(A))\n"}
{"label": 71, "index": 9182, "code": "if __name__ == \"__main__\":\n    N, K = list(map(int, input().split()))\n    data = list(map(int, input().split()))\n    data.sort(reverse = True)\n    result = sum(data[:K])\n    print(result)"}
{"label": 71, "index": 9183, "code": "N, K =list(map(int, input().split()))\n# N, K = 15, 14\nl = list(map(int, input().split()))\n# l = [50, 26, 27, 21, 41, 7, 42, 35, 7, 5, 5, 36, 39, 1, 45]\nsorted_l = sorted(l, reverse=True)\nprint(sum(sorted_l[:K]))\n"}
{"label": 71, "index": 9184, "code": "N,K = [int(i) for i in input().split()]\nl = [int(i) for i in input().split()]\nl.sort()\nl1 = 0\nfor i in range(K):\n    l1 = l1+l[-1-i]\nprint(l1)\n"}
{"label": 71, "index": 9185, "code": "n, k = map(int, input().split(\" \"))\n\nl = list(map(int, input().split(\" \")))\nl.sort()\n\nsum = 0\nfor i in range(n-k, n):\n    sum = sum + l[i]\n\nprint(sum)\n"}
{"label": 71, "index": 9186, "code": "from collections import defaultdict\nfrom itertools import product, groupby\nfrom math import pi\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right\nINF = 10 ** 10\n\n\ndef main():\n    N, K = map(int, input().split())\n    l_list = list(sorted(list(map(int, input().split()))))\n    print(sum(l_list[-K:]))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 71, "index": 9187, "code": "def Q2(x):\n    N, K = x[0][0], x[0][1]\n    lst = x[1][:]\n    lst = sorted(lst)[::-1]\n    return sum(lst[:K])\n\nl = [int(i) for i in input().split()]\nm = [int(i) for i in input().split()]\nn = [l,m]\nprint(Q2(n))"}
{"label": 71, "index": 9188, "code": "# -*- coding: utf-8 -*-\nimport sys\n\nN, K = map(int, input().split())\nl = list(map(int, input().split()))\n\nl.sort()\ns = 0\nfor i in range(K):\n    s += l[N-K+i]\n\nprint(s)"}
{"label": 71, "index": 9189, "code": "n, k = list(map(int, input().split()))\nl = list(map(int, input().split()))\ncnt = 0\nans = 0\nl.sort()\nfor i in reversed(l):\n    if cnt < k:\n        ans += i\n        cnt += 1\n    else:\n        break\nprint(ans)\n"}
{"label": 71, "index": 9190, "code": "# coding: utf-8\n# Here your code !\na=input()\nb=a.split(\" \")\nN=int(b[0])\nK=int(b[1])\nans=[]\nc=input()\nl=c.split(\" \")\nl1=map(int,l)\nl2=list(l1)\nfor w in range(K):\n    ans.append(max(l2))\n    max_idx = l2.index(max(l2))\n    del l2[max_idx]\nprint(sum(ans))"}
{"label": 71, "index": 9191, "code": "c, d = map(int, input().split())\nans = 0\n \na = [int(i) for i in input().split()]\na.sort()\n \nfor i in range(d) :\n    ans = ans + a[c-1-i]\n \nprint (ans)"}
{"label": 71, "index": 9192, "code": "N,K=[int(i) for i in input().split()]\nL=[int(i) for i in input().split()]\nL.sort()\nL.reverse()\nhebi=0\nfor i in range(K):\n hebi=hebi+L[i]\nprint(hebi)"}
{"label": 71, "index": 9193, "code": "n, k =(int (i) for i in input().split())\nl=[int(i) for i in input().split()]\nl.sort()\nsum=0\nfor i in range(0,k):\n    sum += l.pop()\n\nprint(sum)\n"}
{"label": 71, "index": 9194, "code": "def main():\n    N, K = map(int, input().split())\n    L = list(map(int, input().split()))\n    L.sort(reverse=True)\n\n    print(sum(L[:K]))\n\nif __name__ == \"__main__\":\n    # global stime\n    # stime = time.clock()\n    main()\n"}
{"label": 71, "index": 9195, "code": "n, k = map(int, raw_input().split())\n\nl = map(int, raw_input().split())\n\nl.sort()\nl.reverse()\n\nans = 0\n\nfor i in range(k):\n    ans += l[i]\n\nprint ans"}
{"label": 71, "index": 9196, "code": "ans = 0\nn, k = map(int, input().split())\nlst = list(map(int, input().split()))\nlst.sort()\nlst.reverse()\nfor i in range(k):\n    ans += lst[i]\nprint(ans)"}
{"label": 71, "index": 9197, "code": "n, k = map(int, input().split())\n\nl = list(map(int, input().split()))\n\nl.sort()\nl.reverse()\nans = 0\nfor i in range(k):\n    ans += l[i]\n\nprint(ans)"}
{"label": 71, "index": 9198, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\nimport re\nimport math\nimport collections\nimport itertools\nimport functools\n\nDEBUG = True\nDEBUG = False\n\ndef dbg(*args):\n    if DEBUG:\n        print(\"DBG: \", file=sys.stderr, end=\"\")\n        print(*args, file=sys.stderr)\n\n\n\ndef main():\n    n, k = map(int, input().split())\n    ls = list(map(int, input().split()))\n\n    ls.sort(reverse=True)\n    ans = sum(ls[:k])\n    print(ans)\n\nif __name__ == \"__main__\": main()\n"}
{"label": 71, "index": 9199, "code": "N,K=map(int,input().split())\na=list(map(int,input().split()))\n\n\na.sort(reverse=True)\nans=sum(a[:K])\nprint(ans)\n"}
{"label": 71, "index": 9200, "code": "# coding: utf-8\n\nN, K = tuple(map(int, input().split()))\n\nl = list(map(int, input().split()))\n\nprint(sum(sorted(l, reverse = True)[0:K]))\n"}
{"label": 71, "index": 9201, "code": "# -*- coding: utf-8 -*-\nn, k = map(int, raw_input().split())\nl = map(int, raw_input().split())\nl.sort(reverse=True)\n\na = 0\nfor i in range(k):\n    a = a + l[i]\n\nprint a"}
{"label": 71, "index": 9202, "code": "N, K = list(map(int, input().split()))\nl = [int(0)] * N\nl = list(map(int, input().split()))\nl.sort()\nsum=0\nfor i in range(K):\n    sum+=l[N-1-i]\nprint(sum)\n"}
{"label": 71, "index": 9203, "code": "n, k = map(int, input().split())\nl = list(map(int, input().split()))\nl.sort(reverse=True)\nans = 0\nfor i in range(k):\n    ans += l[i]\nprint(ans)"}
{"label": 71, "index": 9204, "code": "N,K=map(int,input().split())\nl=list(map(int,input().split()))\nS=0\nfor i in range(K):\n    S+=max(l)\n    l.remove(max(l))\nprint(S)"}
{"label": 71, "index": 9205, "code": "N,K=map(int,input().split())\nL=list(map(int,input().split()))\nL.sort(reverse=1)\nans=0\nfor i in range(K):\n  ans+=L[i]\nprint(ans)"}
{"label": 71, "index": 9206, "code": "m, n = map(int, input().split())\nM = list(map(int, input().split()))\nM.sort()\nM.reverse()\nA = []\nfor i in range(n):\n    A.append(M[i])\nprint(sum(A))"}
{"label": 71, "index": 9207, "code": "n, k = map(int, input().split())\nls = sorted(list(map(int, input().split())))\nprint(sum(ls[-k:]))"}
{"label": 71, "index": 9208, "code": "N,K = map(int, input().split())\nsrc = list(map(int, input().split()))\nsrc.sort()\nprint(sum(src[-K:]))\n"}
{"label": 71, "index": 9209, "code": "N,K = map(int,input().split())\nlengths = map(int,input().split())\n\nlengths = sorted(lengths)\nresult = 0\nfor i in range(len(lengths)-1,len(lengths)-1-K,-1):\n    result += lengths[i]\nprint(result)\n"}
{"label": 71, "index": 9210, "code": "N, K = map(int, input().split())\nl = list(map(int, input().split()))\n\nl.sort(reverse=True)\nprint(sum(l[0:K]))\n"}
{"label": 71, "index": 9211, "code": "\n\nn, k = map(int, input().split())\nl = list(map(int, input().split()))\nprint(sum(sorted(l, reverse=True)[:k]))\n"}
{"label": 71, "index": 9212, "code": "i = input().split()\nl = list(map(int, input().split()))\nn = int(i[0])\nk = int(i[1])\n\nl.sort(reverse = True)\nans = 0\n\nfor i in range(k):\n    ans += l[i]\nprint(ans)\n"}
{"label": 71, "index": 9213, "code": "import sys\n\ndef main():\n    line = sys.stdin.readline()\n    lst = line.split()\n    n = int(lst[0])\n    k = int(lst[1])\n\n    line = sys.stdin.readline()\n    lst = line.split()\n    l_lst = sorted([int(l) for l in lst], reverse=True)\n\n    print(sum(l_lst[:k]))\n\n\n    return 0\n\nif __name__ == '__main__':\n    sys.exit(main())\n"}
{"label": 71, "index": 9214, "code": "n, k = (int(i) for i in input().split())\nl = [int(i) for i in input().split()]\nl.sort()\nl.reverse()\nsum = 0\nfor m in range(k):\n    sum += l[m]\nprint(sum)\n"}
{"label": 71, "index": 9215, "code": "list = input().rstrip().split()\nN = int(list[0])\nK = int(list[1])\nlist2 = input().rstrip().split()\na = []\nfor i in range(N):\n    a = a + [int(list2[i])]\na.sort()\nsum = 0\nfor i in range(K):\n    sum = sum + a[N-1-i]\nprint(sum)"}
{"label": 71, "index": 9216, "code": "n, k = map(int, raw_input().split())\na = map(int, raw_input().split())\na.sort(reverse = True)\nprint sum(a[0:k])\n"}
{"label": 71, "index": 9217, "code": "n, k = map(int, input().strip().split(' '))\narr = sorted(list(map(int, input().strip().split(' '))))\nprint(sum(arr[-k:]))"}
{"label": 71, "index": 9218, "code": "N, K = map((int), input().split())\nl = [int(item) for item in input().split()]\n\nl.sort(reverse = True)\n\ns = 0\nfor i in range(K):\n    s += int(l[i])\n\nprint(s)"}
{"label": 71, "index": 9219, "code": "#!/usr/bin/python\n\nimport sys\n\ndef main(argv):\n    N, K = map(lambda x: int(x), sys.stdin.readline().split(\" \", 2))\n    while N and K:\n        L = map(lambda x: int(x), raw_input().split(\" \", N))\n        print(sum(sorted(L)[-K:]))\n\n        line = sys.stdin.readline()\n        if line:\n            N, K = map(lambda x: int(x), line.split(\" \", 2))\n        else:\n            N = None\n            K = None\n\nif __name__ == \"__main__\":\n    main(sys.argv)"}
{"label": 71, "index": 9220, "code": "(N, K) = map(int, input().split(\" \"))\na = map(int, input().split())\nsa = sorted(a)\nleng = sum(sa[:-(K+1):-1])\nprint(leng)"}
{"label": 71, "index": 9221, "code": "#!/usr/bin/env python\n# -*- coding: utf8 -*-\n\nN, K=map(int, raw_input().split())\nl = map(int, raw_input().split())\n\nl.sort(reverse=True)\nSUM = 0\nfor i in range(K):\n    SUM += l[i]\n\nprint SUM"}
{"label": 71, "index": 9222, "code": "n, k = [int(x) for x in input().split()]\nl = [int(y) for y in input().split()]\n\nl.sort()\n\nprint(sum(l[-k:]))\n"}
{"label": 71, "index": 9223, "code": "# \u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u306e\u6574\u6570\u306e\u5165\u529b\nN, K = map(int, input().split())\n\nl = [int(i) for i in input().split()]\nl.sort(reverse=True)\n\nans = 0\nfor i in range(K):\n\tans += l[i]\n\nprint(ans)\n"}
{"label": 71, "index": 9224, "code": "n,k=map(int,input().split())\nl = list(map(int,input().split()))\nl.sort(reverse=True)\n\nprint(sum(l[:k]))"}
{"label": 71, "index": 9225, "code": "n, k = map(int, input().split(\" \"))\nl = map(int, input().split(\" \"))\n\nprint(sum(sorted(l)[-k:]))\n\n"}
{"label": 71, "index": 9226, "code": "# -*- coding: utf-8 -*-\n\n#\u3059\u306c\u3051\u304f\u3093\u306f N \u672c\u306e\u68d2\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002 i \u756a\u76ee\u306e\u68d2\u306e\u9577\u3055\u306f li \u3067\u3059\u3002\n#\u3059\u306c\u3051\u304f\u3093\u306f K \u672c\u306e\u68d2\u3092\u9078\u3093\u3067\u3064\u306a\u3052\u3066\u3001\u30d8\u30d3\u306e\u304a\u3082\u3061\u3083\u3092\u4f5c\u308a\u305f\u3044\u3067\u3059\u3002\n#\u30d8\u30d3\u306e\u304a\u3082\u3061\u3083\u306e\u9577\u3055\u306f\u9078\u3093\u3060\u68d2\u305f\u3061\u306e\u9577\u3055\u306e\u7dcf\u548c\u3067\u8868\u3055\u308c\u307e\u3059\u3002 \n#\u30d8\u30d3\u306e\u304a\u3082\u3061\u3083\u306e\u9577\u3055\u3068\u3057\u3066\u3042\u308a\u3046\u308b\u9577\u3055\u306e\u3046\u3061\u3001\u6700\u5927\u5024\u3092\u6c42\u3081\u306a\u3055\u3044\u3002\n\nA = input().split()\nB = input().split()\n#A = [5, 3]\n#B = [1, 2, 3, 4, 5]\n#A = [15, 14]\n#B = [50, 26, 27, 21, 41, 7, 42, 35, 7, 5, 5, 36, 39, 1, 45]\n\nN = int(A[0])\nK = int(A[1])\n\nC = []\n\nfor i in range(N):\n    C.append(int(B[i]))\n\nD = sorted(C)\n\nans = 0\n\nfor i in range(K):\n    x = N - i -1\n    ans = ans + D[x]\n\nprint(ans)\n"}
{"label": 71, "index": 9227, "code": "if(__name__ == \"__main__\"):\n    N, K =[int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    #print(a,b)\n    \n    maxlist = a[:K]\n    #print(maxlist)\n    for i in range(K,N):\n        if(min(maxlist) < a[i]):\n            maxlist.remove(min(maxlist))\n            maxlist.append(a[i])\n            #print(maxlist)\n        \n    print(sum(maxlist))"}
{"label": 71, "index": 9228, "code": "n, k = list(map(int, input().split()))\nl = list(map(int, input().split()))\nprint(sum(sorted(l, reverse=True)[:k]))\n"}
{"label": 71, "index": 9229, "code": "t = raw_input().split()\na = int(t[0])\nb = int(t[1])\nl = map(int, raw_input().strip().split())\nl.sort()\nl = l[::-1]\nans = 0\nfor x in range(b):\n\tans += l[x]\nprint(ans)"}
{"label": 72, "index": 9230, "code": "print(\"ABC{0}\".format(input()))\n"}
{"label": 72, "index": 9231, "code": "# coding: utf-8\n\nn = input()\nprint \"ABC\" + str(n)\n"}
{"label": 72, "index": 9232, "code": "print \"ABC\" + raw_input()"}
{"label": 72, "index": 9233, "code": "# -*- coding:utf-8 -*-\nN = int(input())\nprint(\"ABC\"+str(N))"}
{"label": 72, "index": 9234, "code": "n=input()\nprint('ABC'+n)"}
{"label": 72, "index": 9235, "code": "num = input()\nprint(\"ABC\" + num)"}
{"label": 72, "index": 9236, "code": "print(\"{}{}\".format(\"ABC\",input())  )"}
{"label": 72, "index": 9237, "code": "a = input()\nprint('ABC'+ a)"}
{"label": 72, "index": 9238, "code": "N=input()\nprint('ABC'+N)"}
{"label": 72, "index": 9239, "code": "#ABC068A\n\nn=raw_input()\nprint 'ABC'+n\n"}
{"label": 72, "index": 9240, "code": "num = int(input())\nprint (\"ABC{}\".format(num))\n"}
{"label": 72, "index": 9241, "code": "N = input()\n\nprint(\"ABC\"+N)"}
{"label": 72, "index": 9242, "code": "#!usr/bim/python\n#! -*- coding: utf-8 -*-\n\n\nnum = raw_input()\n\nprint \"ABC\"+num\n"}
{"label": 72, "index": 9243, "code": "print \"ABC%d\" % input()"}
{"label": 72, "index": 9244, "code": "N = input()\nprint(\"ABC\"+N)"}
{"label": 72, "index": 9245, "code": "a = input()\nprint(\"ABC\" + a)\n"}
{"label": 72, "index": 9246, "code": "print(\"ABC\"+input())\n"}
{"label": 72, "index": 9247, "code": "# -*- coding: utf-8 -*-\nn = int(raw_input())\nif n >= 100 and n <= 999:\n    print \"ABC\" + str(n)\nelse:\n    exit"}
{"label": 72, "index": 9248, "code": "s=input()\nprint(\"ABC%s\"%(s))"}
{"label": 72, "index": 9249, "code": "a = input()\n\nprint('ABC'+a)"}
{"label": 72, "index": 9250, "code": "print(\"ABC\"+ input())"}
{"label": 72, "index": 9251, "code": "N = int(input())\nprint(\"ABC{0:03d}\".format(N))"}
{"label": 72, "index": 9252, "code": "x = int(input())\nprint('ABC', x, sep='')"}
{"label": 72, "index": 9253, "code": "print('ABC'+input())\n"}
{"label": 72, "index": 9254, "code": "print 'ABC'+raw_input()"}
{"label": 72, "index": 9255, "code": "n = input()\nprint('ABC' + n)"}
{"label": 72, "index": 9256, "code": "a = int(input())\nb = \"ABC\" + str(a)\n\nprint(b)"}
{"label": 72, "index": 9257, "code": "print str(\"ABC\") + raw_input()"}
{"label": 72, "index": 9258, "code": "print('ABC' + input())"}
{"label": 72, "index": 9259, "code": "S = input()\nprint(\"ABC\"+S)"}
{"label": 72, "index": 9260, "code": "n = input()\nprint(\"ABC\" + n)"}
{"label": 72, "index": 9261, "code": "n=input()\nans='ABC'+str(n)\nprint(ans)\n"}
{"label": 72, "index": 9262, "code": "#!/usr/bin/python\n\nimport sys\n\ndef main(argv):\n    for line in sys.stdin:\n        print(\"ABC{0}\".format(int(line)))\n\nif __name__ == \"__main__\":\n    main(sys.argv)"}
{"label": 72, "index": 9263, "code": "a=input()\nprint('ABC'+a)"}
{"label": 72, "index": 9264, "code": "print(\"ABC\"+str(input()))\n"}
{"label": 72, "index": 9265, "code": "N = int(input())\nprint(\"ABC\" + str(N))"}
{"label": 72, "index": 9266, "code": "a = input()\nprint(\"ABC\" + str(a))"}
{"label": 72, "index": 9267, "code": "print(\"ABC\" + input())"}
{"label": 72, "index": 9268, "code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nprint('ABC'+input())"}
{"label": 72, "index": 9269, "code": "print(\"ABC\"+input())"}
{"label": 72, "index": 9270, "code": "nb = int(input())\nprint(\"ABC\",end = \"\")\nprint(nb)"}
{"label": 72, "index": 9271, "code": "n = input()\n\nprint(\"ABC\" + n)\n"}
{"label": 72, "index": 9272, "code": "print(\"ABC\" + input())"}
{"label": 72, "index": 9273, "code": "from sys import stdin\nprint 'ABC'+stdin.readline()"}
{"label": 72, "index": 9274, "code": "print('ABC'+input())"}
{"label": 72, "index": 9275, "code": "N = str(input())\nprint('ABC' + N)"}
{"label": 72, "index": 9276, "code": "def main():\n    print(\"ABC\" + input())\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 72, "index": 9277, "code": "print('ABC'+input())"}
{"label": 72, "index": 9278, "code": "a = input()\nprint(\"ABC\" + a )"}
{"label": 72, "index": 9279, "code": "# coding: utf-8\n# Here your code !\nN = input()\nprint(\"ABC\" + N)"}
{"label": 72, "index": 9280, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\nimport re\nimport math\nimport collections\nimport itertools\nimport functools\n\nDEBUG = True\nDEBUG = False\n\ndef dbg(*args):\n    if DEBUG:\n        print(\"DBG: \", file=sys.stderr, end=\"\")\n        print(*args, file=sys.stderr)\n\n\n\ndef main():\n    N = int(input())\n    print(\"ABC{:03d}\".format(N))\n\nif __name__ == \"__main__\": main()\n"}
{"label": 72, "index": 9281, "code": "N = input()\nprint(\"ABC\" + N.zfill(3))"}
{"label": 72, "index": 9282, "code": "N = int(raw_input())\nprint \"ABC{}\".format(N)"}
{"label": 72, "index": 9283, "code": "x = input()\nprint('ABC'+x)"}
{"label": 72, "index": 9284, "code": "n = str(input())\nprint(\"ABC\"+n)"}
{"label": 72, "index": 9285, "code": "a=input()\nprint(\"ABC\" + a)"}
{"label": 72, "index": 9286, "code": "n=input()\nprint(\"ABC\"+n)"}
{"label": 72, "index": 9287, "code": "n=input()\nprint(\"ABC\"+n)"}
{"label": 72, "index": 9288, "code": "N = raw_input()\nprint('ABC{0}'.format(N))"}
{"label": 72, "index": 9289, "code": "n = int(input())\nprint(\"ABC\"+str(n))"}
{"label": 72, "index": 9290, "code": "import sys\n\n\ndef main():\n    args = sys.stdin.readline().split()\n    N = int(args[0])\n\n    print('ABC' + str(N))\n\nmain()"}
{"label": 72, "index": 9291, "code": "x=input()\nprint(\"ABC\"+x)"}
{"label": 72, "index": 9292, "code": "N = int(input())\n\nprint(\"ABC\" + str(N))\n"}
{"label": 72, "index": 9293, "code": "n = input()\nprint('ABC' + str(n).zfill(3))"}
{"label": 72, "index": 9294, "code": "n=input()\nprint('ABC'+n)"}
{"label": 72, "index": 9295, "code": "a=input()\nb='ABC'\nprint(b + a)\n"}
{"label": 72, "index": 9296, "code": "# a = list(map(int, input().split()))\n# print(a)\n\nn = int(input())\n\nprint(\"ABC\" + str(n))\n"}
{"label": 72, "index": 9297, "code": "a = input()\nprint('ABC' + a)"}
{"label": 72, "index": 9298, "code": "N=input()\nprint('ABC'+N)"}
{"label": 72, "index": 9299, "code": "n = int(input())\nprint(\"ABC\" + str(n))"}
{"label": 72, "index": 9300, "code": "x=int(input())\nprint(\"ABC\"+str(x))"}
{"label": 72, "index": 9301, "code": "#! /usr/bin/env python3\n\nprint('ABC' + input())"}
{"label": 72, "index": 9302, "code": "print(\"ABC\" + input())"}
{"label": 72, "index": 9303, "code": "print(\"ABC\" + input())"}
{"label": 72, "index": 9304, "code": "N = input()\nprint(\"ABC{0}\" .format(N))"}
{"label": 72, "index": 9305, "code": "n=int(raw_input())\nprint \"ABC\"+str(n)"}
{"label": 72, "index": 9306, "code": "num = input()\nprint(\"ABC\"+num)"}
{"label": 72, "index": 9307, "code": "print \"ABC%03d\" % int(raw_input())\n"}
{"label": 72, "index": 9308, "code": "print(\"ABC\"+input())"}
{"label": 72, "index": 9309, "code": "i=input()\nprint('ABC'+i)\n\n"}
{"label": 72, "index": 9310, "code": "import sys\n\n# sys.stdin = open('a1.in')\n\n\ndef read_int_list():\n    return list(map(int, input().split()))\n\n\ndef read_str_list():\n    return input().split()\n\n\ndef read_int():\n    return int(input())\n\n\ndef read_str():\n    return input()\n\n\nn = read_int()\nprint('ABC' + str(n))\n"}
{"label": 72, "index": 9311, "code": "a = str(input())\nprint(\"ABC\" + a)\n"}
{"label": 72, "index": 9312, "code": "n = input()\nprint('ABC' + n)\n"}
{"label": 72, "index": 9313, "code": "print('ABC' + input())"}
{"label": 72, "index": 9314, "code": "a = input();\nprint (\"ABC\" + a)"}
{"label": 72, "index": 9315, "code": "n = input()\nprint(\"ABC\" +n)"}
{"label": 72, "index": 9316, "code": "a=input()\nprint(\"ABC\"+a) "}
{"label": 72, "index": 9317, "code": "def a():\n    n = int(input())\n    print('ABC'+str(n))\n\na()\n"}
{"label": 72, "index": 9318, "code": "print('ABC'+input())"}
{"label": 72, "index": 9319, "code": "# coding: utf-8\n\nprint(\"ABC\" + input())\n"}
{"label": 72, "index": 9320, "code": "print(\"ABC\"+str(input()))"}
{"label": 72, "index": 9321, "code": "N = int(input())\n\nprint(\"ABC\" + str(N))"}
{"label": 72, "index": 9322, "code": "N = int(input())\n\nprint(\"ABC\" + str(N))"}
{"label": 72, "index": 9323, "code": "s = raw_input()\nprint 'ABC' + s\n"}
{"label": 72, "index": 9324, "code": "# -*- coding: utf-8 -*-\n\nimport math\n\nn = input()\nprint(\"ABC\" + n)\n"}
{"label": 72, "index": 9325, "code": "print(\"ABC\"+input())"}
{"label": 72, "index": 9326, "code": "N=str(input())\nprint('ABC'+N)\n"}
{"label": 72, "index": 9327, "code": "print(\"ABC\"+input())"}
{"label": 72, "index": 9328, "code": "n = input()\nprint('ABC' + n)"}
{"label": 72, "index": 9329, "code": "n = int(input())\nprint(\"ABC\" + str(n))"}
{"label": 72, "index": 9330, "code": "a = raw_input()\nprint('ABC'+a)"}
{"label": 72, "index": 9331, "code": "print(\"ABC\"+input())"}
{"label": 72, "index": 9332, "code": "a=input()\nprint('ABC'+a)"}
{"label": 72, "index": 9333, "code": "n = int(input())\nprint(\"ABC\",n,sep = '')\n"}
{"label": 72, "index": 9334, "code": "x=input()\nprint(\"ABC\"+str(x))\n\n"}
{"label": 72, "index": 9335, "code": "print(\"ABC\" + input())"}
{"label": 72, "index": 9336, "code": "s = input()\n\nprint(\"ABC\" + s)"}
{"label": 72, "index": 9337, "code": "n = input()\nprint(\"ABC\" + n)"}
{"label": 72, "index": 9338, "code": "n=input()\n\nans=\"ABC\"+n\n\nprint(ans)"}
{"label": 72, "index": 9339, "code": "print(\"ABC\"+input())"}
{"label": 72, "index": 9340, "code": "N = str(input())\n\nprint(\"ABC\" + N)"}
{"label": 72, "index": 9341, "code": "def main():\n    print(\"ABC{}\".format(input()))\n    \n\nif __name__ == \"__main__\":\n    main()"}
{"label": 72, "index": 9342, "code": "N = input()\nprint(\"ABC\"+N)"}
{"label": 72, "index": 9343, "code": "#Python\n\nN = input()\nprint \"ABC\"+str(N)"}
{"label": 72, "index": 9344, "code": "print(\"ABC\" + input())"}
{"label": 72, "index": 9345, "code": "S = input()\nprint('ABC' + S)"}
{"label": 72, "index": 9346, "code": "# -*- coding: utf-8 -*-\n\ncount = input()\n\nprint(\"ABC\" + str(count))\n"}
{"label": 72, "index": 9347, "code": "N=input ()\nprint (\"ABC\"+N)"}
{"label": 72, "index": 9348, "code": "s = input()\ns = int(s)\nprint(\"ABC{0}\".format(s))\n"}
{"label": 72, "index": 9349, "code": "N = raw_input()\nprint('ABC' + N)"}
{"label": 72, "index": 9350, "code": "N = input()\nprint('ABC' + N)"}
{"label": 72, "index": 9351, "code": "A = str(input())\nprint(\"ABC\"+ A)"}
{"label": 72, "index": 9352, "code": "#!/usr/bin/env python\n\nnum = input()\n\nprint(\"ABC\" + num)\n"}
{"label": 72, "index": 9353, "code": "N = input()\n\nprint(\"ABC\" + N, sep=\" \")\n"}
{"label": 72, "index": 9354, "code": "print('ABC' + input())"}
{"label": 72, "index": 9355, "code": "number = input()\nTournament = \"ABC\"\nTournament += number\nprint(Tournament)"}
{"label": 72, "index": 9356, "code": "N = input()\n\nprint('ABC' + N)"}
{"label": 72, "index": 9357, "code": "print(\"ABC\" + input())"}
{"label": 72, "index": 9358, "code": "def main():\n\tn = input()\n\tprint(\"ABC\" + n)\n \nif __name__ == '__main__':\n\tmain()"}
{"label": 72, "index": 9359, "code": "print(\"ABC\" + input())"}
{"label": 73, "index": 9360, "code": "N = int(raw_input())\ndata = [1, 2, 4, 8, 16, 32, 64]\nprint max([d for d in data if d <= N])\n"}
{"label": 73, "index": 9361, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\ngosa = 1.0 / 10**9\nmod = 10**9 + 7\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\n\n\ndef main():\n    N = I()\n    r = 0\n    while N>=2:\n        N //= 2\n        r += 1\n\n    return 2**r\n\n\n\nprint(main())\n\n"}
{"label": 73, "index": 9362, "code": "# -*- coding: utf-8 -*-\n\nN = int(raw_input())\n\nif N >= 64:\n    print '64'\nelif N >= 32:\n    print '32'\nelif N >= 16:\n    print '16'\nelif N >= 8:\n    print '8'\nelif N >= 4:\n    print '4'\nelif N >= 2:\n    print '2'\nelse:\n    print '1'\n"}
{"label": 73, "index": 9363, "code": "Nmax = int(input())\nans = 1\nmaxnum = 0\nfor N in range(1, Nmax+1):\n    cnt=0\n    N_before = N\n    while 1:\n        if int(N/2) == int((N+1)/2):\n            N = N/2\n            cnt +=1\n        else:\n            break\n    if cnt > maxnum:\n        maxnum = cnt\n        ans = N_before\nprint (ans)\n"}
{"label": 73, "index": 9364, "code": "n = int(input())\nfor i in range(7):\n    if 2 ** i <= n < 2 ** (i+1):\n        print(2 ** i)\n        break\n"}
{"label": 73, "index": 9365, "code": "#!/usr/bin\n# -*- coding=\"utf-8\" -*-\n \nn = int(input())\nif n >= 64:\n  a = 64\nelif n >= 32:\n  a = 32\nelif n >= 16:\n  a = 16\nelif n >= 8:\n  a= 8\nelif n >= 4:\n  a = 4\nelif n >= 2:\n  a = 2\nelse:\n  a = 1\nprint(a)"}
{"label": 73, "index": 9366, "code": "n = int(input())\ni=1\nwhile ( i * 2 <= n):\n    i *= 2\nprint(i)"}
{"label": 73, "index": 9367, "code": "N = int(input())\n\ntmp = 1\nwhile(1):\n    if tmp*2 > N:\n        break\n    else:\n        tmp *= 2\n        \nprint(tmp)"}
{"label": 73, "index": 9368, "code": "def countdiv(n):\n\tm = n\n\tcnt = 0\n\twhile m % 2 == 0:\n\t\tcnt += 1\n\t\tm = m / 2\n\treturn cnt\n\nn = int(raw_input())\nmax = 0\nnmb = 1\n\nfor i in range(1, n+1):\n\ttmp = countdiv(i)\n\tif tmp > max:\n\t\tmax = tmp\n\t\tnmb = i\n\nprint nmb"}
{"label": 73, "index": 9369, "code": "x = input()\nx = int(x)\ny = 1\nwhile x>=y:\n    y = y*2\nelse:\n    print(int(y/2))"}
{"label": 73, "index": 9370, "code": "n = int(input())\ni = 0\nwhile 2 ** i <= n:\n    i += 1\nprint(2 ** (i - 1))\n"}
{"label": 73, "index": 9371, "code": "a=[0,1,2,2,4,4,4,4,8,8,8,8,8,8,8,8,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64]\nprint(a[(int(input()))])\n"}
{"label": 73, "index": 9372, "code": "n = int(input())\nans = 1\nwhile n >= ans*2:\n    ans *= 2\nprint(ans)"}
{"label": 73, "index": 9373, "code": "N = int(raw_input())\n\nS = range(N)\nfor i in S:\n    S[i] = i + 1\n\nres = []\n\nfor i in S:\n    num = i\n    count = 0\n\n    while i%2 == 0:\n\n        i = i/2\n        count += 1\n\n    res.append((count,num))\n\n\nres.sort()\n\nAnser = res[-1][1]\n\nprint Anser\n"}
{"label": 73, "index": 9374, "code": "N = int(input())\n\nli = [2**i for i in range(7)]\n\nfor i, x in enumerate(li, 1):\n    if N >= li[len(li)-i]:\n        print(li[len(li)-i])\n        break\n    else:\n        continue\n"}
{"label": 73, "index": 9375, "code": "n = int(input())\nfor i in range(8):\n    if 2 ** i <= n < 2 ** (i+1):\n        print(2 ** i)\n        break"}
{"label": 73, "index": 9376, "code": "n = int(input())\n\nif n >= 64:\n    print(64)\nelif n >= 32:\n    print(32)\nelif n >= 16:\n    print(16)\nelif n >= 8:\n    print(8)\nelif n >= 4:\n    print(4)\nelif n >= 2:\n    print(2)\nelse:\n    print(1)\n"}
{"label": 73, "index": 9377, "code": "N = int(input())\ns = 7\ni = 0\n\nfor i in range(s):\n    t = 64 >> i\n    if (0 != (N & int(t))):\n        print(t)\n        break"}
{"label": 73, "index": 9378, "code": "n = map(int, raw_input().split())[0]\n\ni = 1\n\nwhile i * 2 <= n:\n    i *= 2\n\nprint i\n"}
{"label": 73, "index": 9379, "code": "n=int(input())\na=[2**x for x in range(7)]\na=a[::-1]\nfor x in a:\n    if n>=x:\n        ans=x\n        break\nprint(ans)"}
{"label": 73, "index": 9380, "code": "n = int(input())\nbi = [2 ** i for i in range(8)]\nfor i in range(8):\n    if n < bi[i]:\n        print(bi[i - 1])\n        break\n"}
{"label": 73, "index": 9381, "code": "n = int(input())\n\nimport math as m\nprint(2** m.floor(m.log(n, 2)))"}
{"label": 73, "index": 9382, "code": "n=int(input())\na=1\nwhile a*2<=n:\n a*=2\nprint(a)"}
{"label": 73, "index": 9383, "code": "N = int(input())\nif N < 2:\n    print('1')\nelif N < 4:\n    print('2')\nelif N < 8:\n    print('4')\nelif N < 16:\n    print('8')\nelif N < 32:\n    print('16')\nelif N < 64:\n    print('32')\nelse:\n    print('64')"}
{"label": 73, "index": 9384, "code": "n=int(input())\nl = [2,4,8,16,32,64]\nif n==1:\n    print(1)\nelse:\n    while True:\n        a=l.pop()\n        if n>=a:\n            print(a)\n            break\n"}
{"label": 73, "index": 9385, "code": "n = int(input())\n\nbreakNum = 1\n\nwhile breakNum*2 <= n:\n\tbreakNum *= 2\n\nprint(breakNum)"}
{"label": 73, "index": 9386, "code": "N = int(input())\ni = 1\nwhile i <= N:\n    i *= 2\nprint(i//2)\n"}
{"label": 73, "index": 9387, "code": "n = int(input())\nnum = 1\nwhile True:\n    if num*2 > n:\n        print(num)\n        break\n    elif num*2 == n:\n        print(num*2)\n        break\n    else:\n        num *= 2"}
{"label": 73, "index": 9388, "code": "N = int(input())\n\nfor i in range(10):\n    if 2 ** i <= N < 2 ** (i+1):\n        print(2**i)\n        break"}
{"label": 73, "index": 9389, "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\n\nn = int(sys.stdin.readline())\n\nx = 2\nwhile x <= n:\n\tx *= 2\n\nif n < 2:\n\tprint (str(n))\nelse:\n\tprint (str(int(x/2)))"}
{"label": 73, "index": 9390, "code": "# coding: utf-8\n# Here your code !\nn = int(input())\ni = 1\nwhile i <8:\n    if n < 2**i:\n        print (2**(i-1))\n        break\n    else:\n        i += 1"}
{"label": 73, "index": 9391, "code": "n = int(input())\na = [1,2,4,8,16,32,64]\nb = 0\nfor x in a:\n if n < x:\n  break\n b = x\nprint(b) "}
{"label": 73, "index": 9392, "code": "N = int(input())\n\nif N == 1:\n\tprint(1)\nelif N < 4:\n\tprint(2)\nelif N < 8:\n\tprint(4)\nelif N < 16:\n\tprint(8)\nelif N < 32:\n\tprint(16)\t\nelif N < 64:\n\tprint(32)\nelse:\n\tprint(64)"}
{"label": 73, "index": 9393, "code": "# coding: utf-8\n\nn = int(input())\nfor i in range(7, -1, -1):\n    a = 2**i\n    if n >= a:\n        print(a)\n        exit()"}
{"label": 73, "index": 9394, "code": "# coding: utf-8\n\nif __name__ == \"__main__\":\n    n = int(input())\n    r = 0\n    while 2**r <= n:\n        r += 1\n\n    r -= 1\n\n    print(2**r)\n"}
{"label": 73, "index": 9395, "code": "N = int(input())\ncnt_max = 0\nans = 1\nfor n in range(1 , N+1):\n    cnt = 0\n    z = n\n    while True:\n        if z%2 == 0:\n            cnt += 1\n            z = z / 2\n        else:\n            break\n    if cnt > cnt_max:\n        cnt_max = cnt\n        ans = n\n\nprint(ans)"}
{"label": 73, "index": 9396, "code": "import math\nimport numpy as np\nprint(int(2**math.floor(np.log2(int(raw_input())))))"}
{"label": 73, "index": 9397, "code": "#!usr/bim/python\n#! -*- coding: utf-8 -*-\n\nnum = raw_input()\nnum = int(num)\n\ni = 0\nwhile 1:\n    if 2**i <= num:\n        i += 1\n    else:\n        break\n\nans = 2**(i - 1)\n\nprint ans\n"}
{"label": 73, "index": 9398, "code": "num = int(input())\ncnt =0\nwhile num>1:\n    num = int(num/2)\n    cnt +=1\nprint(2**cnt)"}
{"label": 73, "index": 9399, "code": "N = int(input())\nsecound = [64,32,16,8,4,2,1]\nfor i in secound:\n    if N >= i:\n        print(i)\n        break"}
{"label": 73, "index": 9400, "code": "input_number = int(input())                                                                 \ncount = 0 \nbuff_rank = []\n\nfor i in range(1,input_number+1):\n    num = i \n    while num % 2 == 0:\n        num = num // 2\n        count = count + 1 \n    buff_rank.append(count)\n    count = 0 \n\nprint(buff_rank.index(max(buff_rank))+1)"}
{"label": 73, "index": 9401, "code": "n = int(raw_input())\na = 1\nwhile a*2 <= n:\n    a *= 2\nprint a\n"}
{"label": 73, "index": 9402, "code": "N = int(input())\n\ni = 1\nwhile(1):\n    if i*2 > N:\n        break\n    i = i*2\nprint(i)    "}
{"label": 73, "index": 9403, "code": "a = int(input())\ncnt = 0\nwhile a:\n    cnt += 1\n    a >>= 1\nprint(1 << (cnt - 1))\n"}
{"label": 73, "index": 9404, "code": "from math import log\nprint (max(1, 2**int(log(int(input()), 2))))"}
{"label": 73, "index": 9405, "code": "n=int(input())\n\nans=1\nwhile True:\n    if n>ans: ans*=2\n    elif n==ans: break\n    else: ans/=2; break\n\nprint(int(ans))"}
{"label": 73, "index": 9406, "code": "N = int(input())\n\nc_max = 0\ni_max = 1\nfor i in range(1, N+1):\n    c = 0\n    num = i\n    while True:\n        if num % 2 != 0:\n            break\n        num = num // 2\n        c += 1\n    if c > c_max:\n        c_max = c\n        i_max = i\n        \nprint(i_max)\n"}
{"label": 73, "index": 9407, "code": "arr=[64,32,16,8,4,2,1]\nn=int(input())\nfor i in arr:\n    if n>=i:\n        print(i)\n        break\n"}
{"label": 73, "index": 9408, "code": "n = int(input())\nnums = [2**x for x in range(10)]\nwhile True:\n\tif n in nums:\n\t\tprint(n)\n\t\tbreak\n\telse:\n\t\tn -= 1"}
{"label": 73, "index": 9409, "code": "N = input()\n\ni = 1\n\nwhile i <= N:\n    i *= 2\n\nprint i / 2"}
{"label": 73, "index": 9410, "code": "N = int(input())\nans = 64\nwhile ans >= 1:\n    if N >= ans: break\n    ans //= 2\nprint(ans)\n"}
{"label": 73, "index": 9411, "code": "import math\nn=int(input())\n\nif n==1:\n    print(1)\nelse:\n    m=math.log2(n)\n    ans=math.pow(2,math.floor(m))\n    print(int(ans))\n\n\n\n"}
{"label": 73, "index": 9412, "code": "# -*- coding: utf-8 -*-\n\nimport math\n\ndef check(n, i):\n    if (2 ** i > n):\n        return 2 ** (i-1)\n    else:\n        return check(n, i+1)\n\nn = int(input())\nprint(check(n, 0))\n"}
{"label": 73, "index": 9413, "code": "a = 100\nl = [0]*a\nt = 1\nfor x in xrange(a):\n\twhile t%2 == 0:\n\t\tt = t/2\n\t\tl[x] += 1\n\tt = x+2\na = int(raw_input())\nma = 0\nmi = 1\nfor x in range(a):\n\tif l[x] > ma:\n\t\tma = l[x]\n\t\tmi = x\nif a == 1:\n\tprint(1)\nelse:\n\tprint(mi+1)"}
{"label": 73, "index": 9414, "code": "N=int(input())\nans=0\nwhile 2**ans <= N:\n    ans += 1\n\nprint(2**(ans-1))\n"}
{"label": 73, "index": 9415, "code": "N = int(input())\n\nif N == 1:\n    print(N)\nelse:\n    for i in range(N):\n        if 2**i > N:\n            print(2**(i-1))\n            break\n        "}
{"label": 73, "index": 9416, "code": "n = int(input())\ni = 1\nwhile i <= n:\n    i *= 2\nprint(int(i/2))"}
{"label": 73, "index": 9417, "code": "N = int(input())\ni = 0\nwhile 2**i <= N:\n    i = i + 1\nprint(2**(i-1))"}
{"label": 73, "index": 9418, "code": "import sys\n\n# sys.stdin = open('b1.in')\n\n\ndef read_int_list():\n    return list(map(int, input().split()))\n\n\ndef read_str_list():\n    return input().split()\n\n\ndef read_int():\n    return int(input())\n\n\ndef read_str():\n    return input()\n\n\nn = read_int()\nres = 0\nfor i in range(100):\n    r = 2 ** i\n    if r <= n:\n        res = r\n    else:\n        break\nprint(res)\n"}
{"label": 73, "index": 9419, "code": "N=int(raw_input())\n\ni=1\nwhile 2**i <= N:\n    i+=1\n\nprint 2**(i-1)"}
{"label": 73, "index": 9420, "code": "print(2**(len(str(bin(int(input()))))-3))"}
{"label": 73, "index": 9421, "code": "from math import log2\nfrom math import floor\nN=int(input())\nprint(2**floor(log2(N)))"}
{"label": 73, "index": 9422, "code": "n = int(input())\npow2 = [2 ** item for item in range(10)]\nfor item in pow2[::-1]:\n    if(item <= n):\n        print(item)\n        break\n"}
{"label": 73, "index": 9423, "code": "N=int(input())\nx=[]\nfor i in range(200):\n    x.append(0)\nfor i in range(200):\n    ori=i\n    while ori!=0:\n        if ori%2==0:\n            ori=ori/2\n            x[i]+=1\n        else:\n            break\nmaxi=1\nmaxv=0\nfor i in range(200):\n    if maxv<x[i] and i<N+1:\n        maxv=x[i]\n        maxi=i\nprint(maxi)\n"}
{"label": 73, "index": 9424, "code": "m = int(input())\na = 1\nfor c in range(7):\n  if (2 ** c) > m:\n    break\n  a = (2 ** c)\n\nprint(a)\n"}
{"label": 73, "index": 9425, "code": "n = int(input())\nif n == 1:\n    print(1)\n    exit()\n\nans = [0] * 2\nfor i in range(1, n + 1):\n    num = i\n    cnt = 0\n    while num % 2 == 0:\n        num //= 2\n        cnt += 1\n\n    if cnt > ans[1]:\n        ans[0] = i\n        ans[1] = cnt\n\nprint(ans[0])\n"}
{"label": 73, "index": 9426, "code": "# -*- coding: utf-8 -*-\n\nN = int(input())\n\ncnt = 0\nwhile True:\n    if N >= 2:\n        N = N // 2\n        cnt += 1\n    else:\n        break\n\nprint(2**cnt)"}
{"label": 73, "index": 9427, "code": "N=int(input())\nN|=N>>1\nN|=N>>2\nN|=N>>4\nN|=N>>8\nprint((N+1)>>1)"}
{"label": 73, "index": 9428, "code": "# coding: utf-8\n\nn = input()\nm = 0\nrank = 1\nfor i in range(1, n+1):\n    j = i\n    c = 0\n    while True:\n        if j % 2 == 0:\n            j /= 2\n            c += 1\n\n        else:\n            if m < c:\n                m = c\n                rank = i\n            break\n\nprint rank\n"}
{"label": 73, "index": 9429, "code": "import math\nN=int(input())\nL=int(math.log(N,2))\nprint(2**L)"}
{"label": 73, "index": 9430, "code": "N = int(input())\np = 0\nwhile True:\n    if N < 2**p:\n        print(2**(p-1))\n        break\n    else:\n        p=p+1\n    "}
{"label": 73, "index": 9431, "code": "N = int(input())\nA = 1\nwhile A <= N:\n    A *= 2\nA /= 2\nprint(int(A))\n"}
{"label": 73, "index": 9432, "code": "N = int(input())\nn = 0\nwhile N>=2**n:\n    n += 1\nprint(2**(n-1))"}
{"label": 73, "index": 9433, "code": "import sys\nimport math\n\n\ndef main():\n    args = sys.stdin.readline().split()\n    N = int(args[0])\n\n    X = 0\n    while True:\n        X += 1\n        temp = math.pow(2, X)\n        if temp > N:\n            temp = math.pow(2, X-1)\n            break\n\n    print(int(temp))\n\nmain()"}
{"label": 73, "index": 9434, "code": "N = int(raw_input())\nn = 1\nwhile n * 2 <= N:\n  n *= 2\nprint n"}
{"label": 73, "index": 9435, "code": "from sys import stdin\nma = -1\nans = -1\nn = int(stdin.readline())\nfor i in xrange(1,n+1):\n x = i\n cn = 0\n while x%2==0:\n  x/=2;cn+=1\n if cn > ma:\n  ma = cn;ans = i\nprint ans"}
{"label": 73, "index": 9436, "code": "N = int(input())\nans = 1\nif (N >= 64):\n    ans = 64\nelif (N >= 32):\n    ans = 32\nelif (N >= 16):\n    ans = 16\nelif (N >= 8):\n    ans = 8\nelif (N >= 4):\n    ans = 4\nelif (N >= 2):\n    ans = 2\nprint(ans)\n"}
{"label": 73, "index": 9437, "code": "\ndef b():\n    n = int(input())\n    two_l = [ 2**x for x in range(7) ]\n    res = 1\n    for i in two_l:\n        if i <= n:\n            res = i\n        else:\n            break\n    print(res)\n\nb()\n"}
{"label": 73, "index": 9438, "code": "n = int(input())\n\nx = 1\nwhile(x*2 <= n):\n    x *= 2\n\nprint(x)"}
{"label": 73, "index": 9439, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\nimport re\nimport math\nimport collections\nimport itertools\nimport functools\n\nDEBUG = True\nDEBUG = False\n\ndef dbg(*args):\n    if DEBUG:\n        print(\"DBG: \", file=sys.stderr, end=\"\")\n        print(*args, file=sys.stderr)\n\n\n\ndef main():\n    N = int(input())\n\n    k = math.floor(math.log(N, 2))\n    print(2**k)\n\nif __name__ == \"__main__\": main()\n"}
{"label": 73, "index": 9440, "code": "N = int(input())\nans = 1\nfor i in range(N):\n    t = 2 * ans\n    if t > N:\n        print(ans)\n        break\n    ans = t"}
{"label": 73, "index": 9441, "code": "#coding: utf-8\nN = int(input())\n\nbase = 2\nmul = 0\nwhile True:\n    mul += 1\n    if base ** mul > N:\n        break\n\nprint(base ** (mul - 1))\n"}
{"label": 73, "index": 9442, "code": "N = int(input())\n\nk = [2 ** i for i in range(1, 8)]\n\nM = 1\n\nfor i in k:\n    if i <= N:\n        M = i\n\nprint(M)\n"}
{"label": 73, "index": 9443, "code": "# cook your dish here\nfrom math import * \nn=int(input())\nprint(2**floor(log2(n) ))"}
{"label": 73, "index": 9444, "code": "import logging\nlogging.basicConfig(level=logging.CRITICAL,format=' %(asctime)s - %(levelname)s - %(message)s')\n\ndef power(n):\n    i = 1\n    logging.info('func start')\n    while n > 0:\n        i *= 2\n        n -= 1\n        logging.debug('i = {}, n = {}'.format(i,n))\n    logging.info('func end')\n    return i\n\ni = 0\nn = int(input())\nlogging.info('in loop')\nwhile not (power(i + 1) > n):\n    i = i + 1\n    logging.debug('i = {}, pow(i) = {}'.format(i,power(i)))\n\nlogging.info('out loop')\nprint(power(i ))\n"}
{"label": 73, "index": 9445, "code": "n=int(input())\nt=[2,4,8,16,32,64]\nc=0\nif n==0:print(\"0\")\nelif n==1:print(\"1\")\nelif n>=64:print(\"64\")\nelse:\n    for i in t:\n        if n < i:\n            print(t[c-1])\n            break\n        c=c+1\n"}
{"label": 73, "index": 9446, "code": "# coding: utf-8\n\nN = int(input())\n\nma = -1\nres = 1\nfor i in range(1, N+1):\n    num = i\n    tmp = num\n    count = 0\n    while num % 2 == 0:\n        count += 1\n        num = num / 2\n\n    if count > ma:\n        res = tmp\n        ma = count\n\nprint(res)\n"}
{"label": 73, "index": 9447, "code": "N = int(input())\nif N >= 64:\n    print(64)\nelif N >= 32:\n    print(32)\nelif N >= 16:\n    print(16)\nelif N >= 8:\n    print(8)\nelif N >= 4:\n    print(4)\nelif N >= 2:\n    print(2)\nelse:\n    print(1)"}
{"label": 73, "index": 9448, "code": "def main(N):\n    n_div_max = 0\n    answer = 1\n    for n in range(1, N + 1):\n        _n = n\n        tmp_n_div = 0\n        while True:\n            _n, m = divmod(_n, 2)\n            if m > 0:\n                break\n            tmp_n_div += 1\n\n        if tmp_n_div >= n_div_max:\n            n_div_max = tmp_n_div\n            answer = max(answer, n)\n\n    print(answer)\n\n\ndef main2(N):\n    # 128 = 2 ** 7\n    for i in reversed(range(7)):\n        n = 2 ** i\n        if N >= n:\n            print(n)\n            return\n\nif __name__ == '__main__':\n    N = int(input())\n    main2(N)\n"}
{"label": 73, "index": 9449, "code": "N=int(input())\nfor i in range(8):\n    if 2**i <= N < 2**(i+1):\n        print(2**i)\n        break"}
{"label": 73, "index": 9450, "code": "N = int(input())\n\nres_list = []\ntmp = 1\nwhile True:\n    if tmp > N:\n        break\n    res_list.append(tmp)\n    tmp *= 2\n\n\nprint(max(res_list))"}
{"label": 73, "index": 9451, "code": "import math\nt=int(input())\nx=0\ni=0\nwhile x<=t:\n  x=math.pow(2,i)\n  i+=1\nprint(int(pow(2,i-2)))"}
{"label": 73, "index": 9452, "code": "N = int(input())\n\nindex = -1\nfor i in range(7):\n    if 2 ** i <= N:\n        index += 1\n    else:\n        pass\n\nprint(2 ** index)\n"}
{"label": 73, "index": 9453, "code": "N = int(raw_input())\nans = 64\nwhile ans > N: ans /= 2\nprint ans\n"}
{"label": 73, "index": 9454, "code": "N=int(input())\nx = 1\nwhile x <=N:\n\tif x*2 >N:\n\t\tprint(x)\n\t\tbreak\n\tx = x*2"}
{"label": 73, "index": 9455, "code": "def main():\n    N = int(input())\n\n    if N == 1:\n        print(1)\n        return\n\n    x = (64, 32, 16, 8, 4, 2)\n    for i in x:\n        if i <= N:\n            print(i)\n            break\n\nmain()\n"}
{"label": 73, "index": 9456, "code": "# -*- coding:utf-8 -*-\nN = int(input())\na = [tmp for tmp in reversed(range(1,N+1)) if tmp%2 == 0]\nans = 0\nfor tmp in range(7):\n    if N == 1:\n        ans = 1\n        break\n    b = [tmp2//2 for tmp2 in a if tmp2%2 == 0]\n    if len(b) != 0:\n        ans += 1\n    else:\n        ans = (2**ans)*a.pop()\n        break\n    a = [tmp2 for tmp2 in b]\nprint(ans)"}
{"label": 73, "index": 9457, "code": "N = int(input())\n\nans = 64\nwhile N < ans:\n    ans //= 2\n\nprint(ans)\n"}
{"label": 73, "index": 9458, "code": "# coding: utf-8\n# Here your code !\nn=input()\nN=int(n)\na=0\nans=[]\nfor i in range(N):\n    I=i+1\n    a=0\n    if I%2==0:\n        a=a+1\n        P=I/2\n        for w in range(100):\n            if P%2==0:\n                a=a+1\n                P=P/2\n            else:\n                ans.append(a)\n                break\n    else:\n        ans.append(0)\nmax_idx = ans.index(max(ans))\nprint(max_idx+1)"}
{"label": 73, "index": 9459, "code": "maxNum = int(input())\nfavNum = 1\nmax2 = 0\n\nfor i in range(1,maxNum+1):\n    currNum = i\n    j = 0\n    while(1):\n        if currNum % 2 == 1:\n            break\n        else:\n            currNum = currNum/2\n            j += 1\n    if max2 < j:\n        max2 = j \n        favNum = i\n\nprint(favNum)"}
{"label": 73, "index": 9460, "code": "N = int(input())\n\nmaxcount = -1\nmaxi = 0\nfor i in range(1, N+1):\n  count = 0\n  cur_i = i\n  while True:\n    if i % 2 == 0:\n      i = i // 2\n      count += 1\n    else:\n      break\n  if count > maxcount:\n    maxcount = count\n    maxi = cur_i\nprint(maxi)"}
{"label": 73, "index": 9461, "code": "a=int(input())\nb=int(2)\nc=int\nif 1==a:\n    print(a)\nelse:\n    while b<100:\n        c=b\n        b=b*2\n        \n        if(a<b)and(a>=c):\n            print (c)\n"}
{"label": 73, "index": 9462, "code": "print(2**(len(str(bin(int(input())))[2:])-1))"}
{"label": 73, "index": 9463, "code": "n = int(input())\ncount = 0\nfor i in range(1, n):\n    if n >= pow(2, i):\n        count = count + 1\n    else:\n        break\nprint(pow(2,count))"}
{"label": 73, "index": 9464, "code": "a = int(input())\ni = 1\nwhile(i<=a):\n\ti *= 2\nprint(int(i/2))\n"}
{"label": 73, "index": 9465, "code": "n = int(input())\ntwo = 1\nwhile True:\n    if two * 2 > n:\n        break\n    two *= 2\nprint(two)"}
{"label": 73, "index": 9466, "code": "N = int(input())\n\nif N == 1:\n    print(\"1\")\nelse:\n    l = [2**x for x in list(range(1, 8))]\n    a = [ x for x in l if x <= N]\n    print(max(a))\n"}
{"label": 73, "index": 9467, "code": "from math import floor, log2\nn = int(input())\nprint(2 ** floor(log2(n)))"}
{"label": 73, "index": 9468, "code": "c = [1,2,4,8,16,32,64]\nN = int(input())\n\nif 1 <= N < 2:\n\tprint(c[0])\nelif 2 <= N < 4:\n\tprint(c[1])\nelif 4 <= N < 8:\n\tprint(c[2])\nelif 8 <= N < 16:\n\tprint(c[3])\nelif 16 <= N < 32:\n\tprint(c[4])\nelif 32 <= N < 64:\n\tprint(c[5])\nelif 64 <= N:\n\tprint(c[6])"}
{"label": 73, "index": 9469, "code": "# encoding:utf-8\n\ndef main():\n\tn = int(input())\n\tpowers = [2 ** i for i in range(7)]\n\tout = max([x for x in powers if x <= n])\n\tprint(out)\n\nif __name__ == '__main__':\n\tmain()"}
{"label": 73, "index": 9470, "code": "N=int(input())\n\nC=0\nL=[]\n\nif N==1:\n    print(1)\n\nelse:\n    for i in range(8):\n        C=2**i\n        L.append(C)\n        if C>N:\n            print(L[-2]) \n            break"}
{"label": 73, "index": 9471, "code": "N = int(input())\n\nresult = 0\nwhile N / 2 >= 1.0:\n    N /= 2\n    result += 1\nprint(2**result)\n"}
{"label": 73, "index": 9472, "code": "n = int(input())\nret = 1\nwhile 2*ret <= n:\n  ret *= 2\nprint(ret)"}
{"label": 73, "index": 9473, "code": "inp = int(input())\ncount = 0\nserch = 1\n\n\nfor i in range(1,inp + 1):\n\ta = i\n\tj = 1\n\twhile j <= i:\n\t\tif a % 2 != 0:\n\t\t\tif j - 1 > count:\n\t\t\t\tcount = j - 1\n\t\t\t\tserch = i\n\t\t\tbreak\n\t\ta = a / 2\n\t\tj += 1\n\n\nprint(serch)"}
{"label": 73, "index": 9474, "code": "from collections import defaultdict\nfrom itertools import product, groupby\nfrom math import pi\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right\nINF = 10 ** 10\n\n\ndef count(n):\n    ans = 0\n    while n % 2 == 0:\n        n //= 2\n        ans += 1\n    return ans\n\n\ndef main():\n    N = int(input())\n    ans, num = 0, 0\n    for i in range(1, N + 1):\n        if count(i) >= num:\n            num = count(i)\n            ans = i\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 73, "index": 9475, "code": "n = int(input())\ni=1\nt=1\nwhile(i <= n):\n    t = i\n    i *= 2\nprint(t)"}
{"label": 73, "index": 9476, "code": "import math as m\ns=int(input())\nprint(2**int(m.log2(s)))"}
{"label": 73, "index": 9477, "code": "N = int(input())\n\nfor i in range(10):\n    if N > 2**i:\n        continue\n    elif N < 2**i:\n        break\n\nprint(2**(i-1))\n"}
{"label": 73, "index": 9478, "code": "N = int(input())\n\nsig = [2,4,8,16,32,64,128]\nsig.reverse()\n\nif N == 1:\n    print('1')\n    exit()\n\nfor i in sig:\n    if i <= N:\n        print(i)\n        exit()"}
{"label": 73, "index": 9479, "code": "a=int(input())\nb=1\nwhile (b<<1)<=a:\n    b=b<<1\nprint(b)\n"}
{"label": 73, "index": 9480, "code": "n = int(input())\nif n < 2:\n    print(1)\nelif n < 4:\n    print(2)\nelif n < 8:\n    print(4)\nelif n < 16:\n    print(8)\nelif n < 32:\n    print(16)\nelif n < 64:\n    print(32)\nelse:\n    print(64)\n"}
{"label": 73, "index": 9481, "code": "a = int(input())\nfor i in range(a):\n  if 2 ** i > a:\n    break\n  elif 2 ** i <= a:\n    count = 2 ** i\n\nprint(count)"}
{"label": 73, "index": 9482, "code": "N = int(input())\nl = [2**n for n in range(10) if 2**n <= N]\nprint(max(l))"}
{"label": 73, "index": 9483, "code": "#!/usr/bin/python\n\nimport math\nimport sys\n\ndef main(argv):\n    for line in sys.stdin:\n        N = int(line)\n        index = int(math.log(N, 2))\n        print(int(math.pow(2, index)))\n\nif __name__ == \"__main__\":\n    main(sys.argv)"}
{"label": 73, "index": 9484, "code": "import sys\n\nN = int(input())\t\t\t\t\t\t# 5\n\ni = 1\nwhile (i*2) <= N:\n\ti *= 2\n\nprint(i)\n"}
{"label": 73, "index": 9485, "code": "N = int(input())\nans = 1\nwhile ans * 2 <= N:\n    ans *= 2\nprint(ans)\n"}
{"label": 73, "index": 9486, "code": "# -*- coding: utf-8 -*-\n\nnum = int(input())\n\nif num >= 64:\n    print(str(64))\nelif num >= 32:\n    print(str(32))\nelif num >= 16:\n    print(str(16))\nelif num >= 8:\n    print(str(8))\nelif num >= 4:\n    print(str(4))\nelif num >= 2:\n    print(str(2))\nelse:\n    print(str(1))\n"}
{"label": 73, "index": 9487, "code": "n = int(input().strip())\nwhile True:\n if n & (n-1) == 0:\n  print(n)\n  break\n n -= 1"}
{"label": 73, "index": 9488, "code": "N = int(input())\nans = 0\nfor i in range(7):\n\tif N >= 2 ** i:\n\t\tans = 2 ** i\n\telse:\n\t\tbreak\nprint(ans)"}
{"label": 73, "index": 9489, "code": "print(2**(len(bin(int(input())))-3))"}
{"label": 74, "index": 9490, "code": "a, b = map(int, raw_input().strip().split())\nprint (a - 1) * (b - 1)"}
{"label": 74, "index": 9491, "code": "n, m = map(int, input().split())\nprint((n - 1) * (m - 1))\n"}
{"label": 74, "index": 9492, "code": "def main():\n    N, M = map(int, input().split())\n\n    ans = (N - 1) * (M - 1)\n    print(ans)\n\nmain()\n"}
{"label": 74, "index": 9493, "code": "n, m = map(int,input().split(\" \"))\n\nresult = (n-1) * (m-1)\n\nprint(result)"}
{"label": 74, "index": 9494, "code": "n,m=map(int,input().split())\nprint((n-1)*(m-1))"}
{"label": 74, "index": 9495, "code": "def a():\n    n, m = map(int, input().split())\n    print((n-1) * (m-1))\n\na()"}
{"label": 74, "index": 9496, "code": "a,b=map(int,input().split())\nprint((a-1)*(b-1))"}
{"label": 74, "index": 9497, "code": "# encoding:utf-8\n \ndef main():\n\tn, m = list(map(int, input().split()))\n\tprint((n - 1) * (m - 1))\n\t\t\nif __name__ == '__main__':\n\tmain()"}
{"label": 74, "index": 9498, "code": "n,m = input().split()\nn = int(n)\nm = int(m)\n\nprint((n-1)*(m-1))"}
{"label": 74, "index": 9499, "code": "\n\ndef main():\n    n, m = (int(x) for x in input().split())\n    n += 1\n    m += 1\n\n    print(n * m - 2 * (n + m) + 4)\n\n\nif __name__ == \"__main__\":\n    main()"}
{"label": 74, "index": 9500, "code": "'''input\n3 4\n'''\nn , m = map(int ,raw_input().split())\nprint (n-1)*(m-1)\n"}
{"label": 74, "index": 9501, "code": "a = input().split()\nprint((int(a[0])-1)*(int(a[1])-1))"}
{"label": 74, "index": 9502, "code": "n,m=map(int,input().split())\nprint((n-1)*(m-1))\n"}
{"label": 74, "index": 9503, "code": "#!/usr/bin/python\n\nn, m = map(int, input().split(\" \"))\n\nans = (n-1) * (m-1)\nprint(ans)\n"}
{"label": 74, "index": 9504, "code": "n,m = list(map(int,input().split()))\nprint((n-1)*(m-1))"}
{"label": 74, "index": 9505, "code": "a,b = map(int,input().split())\nprint((a-1) * (b-1))\n"}
{"label": 74, "index": 9506, "code": "n, m = input().split()\nn = int(n)\nm = int(m)\noutput = (n-1)*(m-1)\n\nprint(output)\n"}
{"label": 74, "index": 9507, "code": "n, m = map(int, input().split())\nprint((n-1)*(m-1))"}
{"label": 74, "index": 9508, "code": "a,b=list(map(int, input().split()))\nprint ((a-1)*(b-1))"}
{"label": 74, "index": 9509, "code": "n, m = map(int, input().split())\nprint((n-1)*(m-1))"}
{"label": 74, "index": 9510, "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nn, m = map(int, raw_input().split())\narea = (n-1) * (m-1)\nprint area\n"}
{"label": 74, "index": 9511, "code": "n , m = map(int , input().split())\nprint((n-1) * (m-1))"}
{"label": 74, "index": 9512, "code": "n,m = list(map(int, input().split()))\n \nprint ((n-1)*(m-1))"}
{"label": 74, "index": 9513, "code": "n,m=map(int,input().split())\nprint((n-1)*(m-1))"}
{"label": 74, "index": 9514, "code": "n,m = map(int,raw_input().split())\nprint((n-1)*(m-1))"}
{"label": 74, "index": 9515, "code": "a, b = map(int, input().split())\nprint((a - 1) * (b - 1))\n"}
{"label": 74, "index": 9516, "code": "n, m = map(int, input().split())\nprint((n-1)*(m-1))\n"}
{"label": 74, "index": 9517, "code": "# import numpy as np\nn, m = map(int, input().split())\n\nprint((n-1) * (m-1))"}
{"label": 74, "index": 9518, "code": "n,m = map(int, raw_input().split())\nprint (n-1)*(m-1)\n"}
{"label": 74, "index": 9519, "code": "import sys\n\n# sys.stdin = open('a1.in')\n\n\ndef read_int_list():\n    return list(map(int, input().split()))\n\n\ndef read_str_list():\n    return input().split()\n\n\ndef read_int():\n    return int(input())\n\n\ndef read_str():\n    return input()\n\n\ndef main():\n    n, m = read_int_list()\n    res = (n - 1) * (m - 1)\n    print(res)\n\nmain()\n"}
{"label": 74, "index": 9520, "code": "n, m = map(int, raw_input().split())\nprint (n - 1)*(m - 1)\n"}
{"label": 74, "index": 9521, "code": "temp = input()\nn, m = temp.split()\ncity = (int(n)-1)*(int(m)-1)\nprint(city)\n"}
{"label": 74, "index": 9522, "code": "n,m = map(int, raw_input().split())\nprint((n-1)*(m-1))"}
{"label": 74, "index": 9523, "code": "n,m = map(int, input().split())\nprint((n-1)*(m-1))\n"}
{"label": 74, "index": 9524, "code": "def main():\n    n, m = [int(i) for i in input().split()]\n    #print(n, m)\n    print((n-1) * (m-1))\n\nif __name__==\"__main__\":\n    main()"}
{"label": 74, "index": 9525, "code": "n, m = map(int, input().split())\nprint((n-1)*(m-1))"}
{"label": 74, "index": 9526, "code": "n,m = map(int,input().split())\n\nA=(n-1)*(m-1)\nprint(A)"}
{"label": 74, "index": 9527, "code": "# -*- coding: utf-8 -*-\n\"\"\"\nhttp://abc069.contest.atcoder.jp/tasks/abc069_a\n\"\"\"\n\n\ndef main():\n    n, m = map(int, input().split())\n    print((n-1)*(m-1))\n\n\nif __name__ == '__main__':\n    main()"}
{"label": 74, "index": 9528, "code": "# coding: utf-8\n# Here your code !\na=input()\nb=a.split()\nn=int(b[0])\nm=int(b[1])\n\nprint((n-1)*(m-1))"}
{"label": 74, "index": 9529, "code": "n, m = map(int, input().split(\" \"))\n\n\nprint((n-1)*(m-1))"}
{"label": 74, "index": 9530, "code": "n, m = list(map(int, input().split()))\nprint((n-1) *(m-1))\n"}
{"label": 74, "index": 9531, "code": "n, m = list(map(int, input().split()))\nprint((n-1)*(m-1))\n"}
{"label": 74, "index": 9532, "code": "n,m = map(lambda i:int(i)-1,input().split(' '))\nprint(n*m)"}
{"label": 74, "index": 9533, "code": "n, m = map(int, input().split())\nprint((m - 1) * (n - 1))"}
{"label": 74, "index": 9534, "code": "a,b=map(int,raw_input().split())\nprint (a-1)*(b-1)"}
{"label": 74, "index": 9535, "code": "n, m = map(int, input().split())\nblock = (n - 1) * (m - 1)\nprint(block)\n"}
{"label": 74, "index": 9536, "code": "n, m = list(map(int, input().split()))\nprint((n-1)*(m-1))"}
{"label": 74, "index": 9537, "code": "n, m = map(int, raw_input().split())\nprint (n-1) * (m-1)"}
{"label": 74, "index": 9538, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\nimport re\nimport math\nimport collections\nimport itertools\nimport functools\n\nDEBUG = True\nDEBUG = False\n\ndef dbg(*args):\n    if DEBUG:\n        print(\"DBG: \", file=sys.stderr, end=\"\")\n        print(*args, file=sys.stderr)\n\n\n\ndef main():\n    N, M = map(int, input().split())\n\n    print((N-1)*(M-1))\n\nif __name__ == \"__main__\": main()\n"}
{"label": 74, "index": 9539, "code": "n, m = map(int, raw_input().split())\nprint (n - 1) * (m - 1)\n"}
{"label": 74, "index": 9540, "code": "A, B=list(map(int, input().split()))\nprint((A-1)*(B-1))\n"}
{"label": 74, "index": 9541, "code": "a = input().split()\nb = int(a[0])\nc = int(a[1])\nb = b-1\nc = c-1\nprint(b*c)"}
{"label": 74, "index": 9542, "code": "(n, m) = tuple(map(int, input().split(\" \")))\nprint((n-1) * (m-1))"}
{"label": 74, "index": 9543, "code": "n, m = map(int, input().split())\n\nprint((n-1)*(m-1))"}
{"label": 74, "index": 9544, "code": "n,m=map(int,input().split())\n\nans=(n-1)*(m-1)\n\nprint(ans)"}
{"label": 74, "index": 9545, "code": "def main():\n    n, m = map(int, input().split())\n    print((n - 1) * (m - 1))\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 74, "index": 9546, "code": "# your code goes here\nn,m = map(int,input().split())\nprint ((n-1)*(m-1))"}
{"label": 74, "index": 9547, "code": "n, m = map(int,input().split())\n\nprint((n-1)*(m-1))"}
{"label": 74, "index": 9548, "code": "n, m = map(int, input().split())\nprint((n - 1) * (m - 1))"}
{"label": 74, "index": 9549, "code": "n, m = map(int, input().split())\n\nh = n - 1\nw = m - 1\nans = h * w\nprint(ans)\n"}
{"label": 74, "index": 9550, "code": "n, m = map(int, input().split())\nprint((n-1) * (m-1))"}
{"label": 74, "index": 9551, "code": "x,y = map(int,raw_input().split())\nprint (x-1)*(y-1)"}
{"label": 74, "index": 9552, "code": "n, m = map(int,raw_input().split(' '))\nprint (n-1)*(m-1)"}
{"label": 74, "index": 9553, "code": "n, m = [int(e) for e in input().split()]\nprint((n - 1) * (m - 1))"}
{"label": 74, "index": 9554, "code": "n,m =map(int,input().split())\nprint((n-1)*(m-1))"}
{"label": 74, "index": 9555, "code": "n,m = map(int,input().split())\nprint((n-1) * (m-1))\n"}
{"label": 74, "index": 9556, "code": "n, m=map(int, input().split())\nprint( (n-1)*(m-1))\n"}
{"label": 74, "index": 9557, "code": "\ndef Solution(a,b):\n    return (a-1)*(b-1)\n\nif __name__==\"__main__\":\n    input = raw_input().split(\" \")\n    print Solution((int)(input[0]), (int)(input[1]))"}
{"label": 74, "index": 9558, "code": "# coding: utf-8\n\nn, m = map(int, raw_input().split())\nprint ((n+1)*(m+1))-(n*2+m*2)"}
{"label": 74, "index": 9559, "code": "n ,m = [int(i) for i in input().split()]\nprint((n - 1) * (m - 1))\n"}
{"label": 74, "index": 9560, "code": "x, y = list(map(int, input().split()))\n\nprint((x - 1) * (y - 1))"}
{"label": 74, "index": 9561, "code": "# -*- coding: utf-8 -*-\ninput_cl = input().split()\ninput_cl = [int(i) for i in input_cl]\nn = input_cl[0]\nm = input_cl[1]\nsector = (n-1) * (m-1)\nprint(sector)\n"}
{"label": 74, "index": 9562, "code": "m, n = (int(i) for i in input().split())\nprint((m-1)*(n-1))"}
{"label": 74, "index": 9563, "code": "s = raw_input()\ns = s.split(' ')\ns = [int(x) for x in s]\nn, m = s\n\nprint((n-1)*(m-1))"}
{"label": 74, "index": 9564, "code": "l = map(int, input().split())\nl = list(l)\nprint(str((l[0]-1)*(l[1]-1)))"}
{"label": 74, "index": 9565, "code": "n, m = map(int, input().split())\nprint( (n-1)*(m-1) )\n"}
{"label": 74, "index": 9566, "code": "a,b=map(int,input().split())\nprint((a-1)*(b-1))"}
{"label": 74, "index": 9567, "code": "m,n = map(int, input().split())\nprint((m-1)*(n-1))"}
{"label": 74, "index": 9568, "code": "#!usr/bim/python\n#! -*- coding: utf-8 -*-\n\nnm = raw_input()\nnm = nm.split()\nnm = map(int, nm)\n\n\n\nif nm[0] < 2 or nm[1] < 2:\n    ans = 0\nelse:\n    ans = (nm[0]-1)*(nm[1]-1)\n\nprint ans\n"}
{"label": 74, "index": 9569, "code": "N,M=(int(i) for i in input(). split ())\nN-=1\nM-=1\nprint (N*M)"}
{"label": 74, "index": 9570, "code": "n,m=map(int,input().split())\nprint((n-1)*(m-1))"}
{"label": 74, "index": 9571, "code": "astr = input().split()\nanum = []\nfor i in astr:\n    anum.append(int(i))\nprint((anum[0]-1)*(anum[1]-1))"}
{"label": 74, "index": 9572, "code": "\n\n\n\na,b=map(int,input().split())\nprint((a-1)*(b-1))"}
{"label": 74, "index": 9573, "code": "input_line = map(int,raw_input().split(\" \"))\nn = input_line[0]\nm = input_line[1]\n\nprint (n-1) * (m-1)"}
{"label": 74, "index": 9574, "code": "n, m = map(int, raw_input().split())\n\nprint (n-1) * (m-1)\n"}
{"label": 74, "index": 9575, "code": "n,m = map(int,input().split())\n\nprint(\"%d\" % ((n-1) * (m-1)))\n"}
{"label": 74, "index": 9576, "code": "nm = input().split(' ')\nprint((int(nm[0])-1) * (int(nm[1])-1))"}
{"label": 74, "index": 9577, "code": "n, m = (int(i) for i in input().split())\nprint((n-1)*(m-1))"}
{"label": 74, "index": 9578, "code": "l = list(map(int, input().split()))\nprint((l[0]-1)*(l[1]-1))\n"}
{"label": 74, "index": 9579, "code": "l = input().split()\nn = int(l[0])\nm = int(l[1])\nprint((n-1) * (m-1))\n"}
{"label": 74, "index": 9580, "code": "n, m = [int(x) for x in input().split()]\nprint((n - 1) * (m - 1))\n"}
{"label": 74, "index": 9581, "code": "n, m = map(int, input().split())\nprint((n-1)*(m-1))\n"}
{"label": 74, "index": 9582, "code": "n,m=map(int,input().split())\nans=(n-1)*(m-1)\nprint(ans)"}
{"label": 74, "index": 9583, "code": "if __name__ == '__main__':\n    N = list(map(int, input().split()))\n    print((N[0] - 1) * (N[1] - 1))\n"}
{"label": 74, "index": 9584, "code": "a,b=map(int,input().split())\nprint((a-1)*(b-1))"}
{"label": 74, "index": 9585, "code": "def read(): return list(map(int, input().split()))\n\nn, m = read()\nprint((n - 1) * (m - 1))"}
{"label": 74, "index": 9586, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\ngosa = 1.0 / 10**9\nmod = 10**9 + 7\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\n\n\ndef main():\n    n,m = LI()\n\n    return (n-1)*(m-1)\n\n\n\nprint(main())\n\n"}
{"label": 74, "index": 9587, "code": "n, m = map(int, raw_input().split())\nprint (n-1) * (m-1)"}
{"label": 74, "index": 9588, "code": "n, m = map(int, input().split())\nprint((n - 1) * (m - 1))\n"}
{"label": 74, "index": 9589, "code": "n,m=map(int,input().split())\nk=(n-1)*(m-1)\nprint(k)"}
{"label": 74, "index": 9590, "code": "temp_arr = input().split(' ')\nn = int(temp_arr[0])\nm = int(temp_arr[1])\n\nprint(str((n-1) * (m-1)))"}
{"label": 74, "index": 9591, "code": "n, m = list(map(int, input().split()))\nprint((n-1)*(m-1))"}
{"label": 74, "index": 9592, "code": "n, m = map(int, input().split())\nprint((n-1)*(m-1))\n"}
{"label": 74, "index": 9593, "code": "a = list(map(int,input().split()))\nprint((a[0] - 1) * (a[1] -1))"}
{"label": 74, "index": 9594, "code": "a = list(map((int),input().split(' ')))\nn = a[0]\nm = a[1]\n\nprint((n-1)*(m-1))\n"}
{"label": 74, "index": 9595, "code": "n=list(map(int,input().split()))\nprint((n[0]-1)*(n[1]-1))"}
{"label": 74, "index": 9596, "code": "nm=(input()).split(' ')\nprint(((int)(nm[0])-1)*((int)(nm[1])-1))"}
{"label": 74, "index": 9597, "code": "n, m = input().split()\nn = int(n)\nm = int(m)\nprint((n-1)*(m-1))"}
{"label": 74, "index": 9598, "code": "# -*- coding: utf-8 -*-\n\nn, m = [int(x) for x in input().split()]\ncities = (n-1) * (m-1)\nprint(cities)"}
{"label": 74, "index": 9599, "code": "n,m=map(int,input().split())\nprint((n-1)*(m-1))"}
{"label": 74, "index": 9600, "code": "#! /usr/bin/env python3\n\nN, M = map(int, input().split())\nprint((N-1) * (M-1))\n"}
{"label": 74, "index": 9601, "code": "#! -*- coding:utf-8 -*-\nn,m = map(int,input().split())\nprint((m-1)*(n-1))\n"}
{"label": 74, "index": 9602, "code": "def main():\n    n, m = map(int, input().split())\n    print((n-1)*(m-1))\n    \n\nif __name__ == \"__main__\":\n    main()"}
{"label": 74, "index": 9603, "code": "n,m = map(int,input().split())\nprint((n-1)*(m-1))"}
{"label": 74, "index": 9604, "code": "n = input().split()\nprint((int(n[0])-1 )* ( int(n[1])-1))"}
{"label": 74, "index": 9605, "code": "def read_int_list():\n    return (int(i) for i in input().split())\n\nn, m = read_int_list()\nprint((n-1)*(m-1))"}
{"label": 74, "index": 9606, "code": "n, m = list(map(int, input().split()))\nprint (str((n-1)*(m-1)))"}
{"label": 74, "index": 9607, "code": "n, m = map(int, input().split())\nprint((n - 1) * (m - 1))\n"}
{"label": 74, "index": 9608, "code": "n, m = map(int, input().split())\nprint((n-1)*(m-1))\n"}
{"label": 74, "index": 9609, "code": "n, m = list(map(int, input().split()))\nprint((n - 1) * (m - 1))\n"}
{"label": 74, "index": 9610, "code": "n, m =map(int, input().split())\nprint((n-1) * (m-1))"}
{"label": 74, "index": 9611, "code": "import sys\n\n\ndef main():\n    args = sys.stdin.readline().split()\n    n = int(args[0])\n    m = int(args[1])\n\n    print((n - 1) * (m - 1))\n\nmain()"}
{"label": 74, "index": 9612, "code": "from collections import defaultdict\nfrom itertools import product, groupby\nfrom math import pi\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right\nINF = 10 ** 10\n\n\ndef main():\n    n, m = map(int, input().split())\n    print((n - 1) * (m - 1))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 74, "index": 9613, "code": "n,m=map(int,input().split())\nprint((n-1)*(m-1))"}
{"label": 74, "index": 9614, "code": "n,m = map(int,input().split())\n\nprint((n-1)*(m-1))"}
{"label": 74, "index": 9615, "code": "#coding:utf-8\n\nn, m = map(int, input().split())\n#print('\\n')\n\nresult = (n - 1) * (m - 1)\n\nprint(\"{0}\".format(result))"}
{"label": 74, "index": 9616, "code": "# -*- coding: utf-8 -*-\n\nn,m = map(int, input().split())\nprint((n-1)*(m-1))\n\n    "}
{"label": 74, "index": 9617, "code": "a=map(int,raw_input('').split())\nprint (a[0]-1)*(a[1]-1)"}
{"label": 74, "index": 9618, "code": "n, m = map(int, input().split())\nprint((n - 1) * (m - 1))\n"}
{"label": 74, "index": 9619, "code": "a,b=map(int,input().split())\nprint((a-1)*(b-1))\n"}
{"label": 75, "index": 9620, "code": "# -*- coding:utf-8 -*-\ns = list(input())\na = s.pop(0)\nb = s.pop()\nprint(a+str(len(s))+b)"}
{"label": 75, "index": 9621, "code": "s = input()\nprint(s[0] + str(len(s)-2) + s[-1])"}
{"label": 75, "index": 9622, "code": "'''input\nxyz\n'''\ns = raw_input()\nprint s[0]+str(len(s[1:-1]))+s[-1]"}
{"label": 75, "index": 9623, "code": "# -*- coding: utf-8 -*-\n\ns = input()\n\nprint(s[0]+str(len(s)-2)+s[-1])\n"}
{"label": 75, "index": 9624, "code": "S = input()\nprint(S[0]+str(len(S)-2)+S[-1])\n"}
{"label": 75, "index": 9625, "code": "s = input()\nprint(s[0] + str(len(s)-2) + s[-1])"}
{"label": 75, "index": 9626, "code": "s = input()\nprint(s[0] + str(len(s)-2) + s[-1])"}
{"label": 75, "index": 9627, "code": "import sys\n\n\ndef main():\n    word = sys.stdin.readline().strip()\n    print(word[0] + str(len(word) - 2) + word[len(word) - 1])\n\nmain()"}
{"label": 75, "index": 9628, "code": "s = raw_input()\nprint(s[0] + str(len(s)-2) + s[len(s)-1])"}
{"label": 75, "index": 9629, "code": "s = input()\nprint(s[0] + str(len(s) - 2) + s[-1])"}
{"label": 75, "index": 9630, "code": "#!usr/bim/python\n#! -*- coding: utf-8 -*-\n\ns = raw_input()\n\nn = len(s)\n\nans = s[0] + str(n-2) + s[n-1]\n\nprint ans\n"}
{"label": 75, "index": 9631, "code": "s = input()\nprint(s[0] + str(len(s) - 2) + s[-1])\n"}
{"label": 75, "index": 9632, "code": "s = input()\nprint(s[0] + str(len(s)-2) + s[-1])"}
{"label": 75, "index": 9633, "code": "S = input()\n\nres = S[0] + str(len(S) - 2) + S[-1]\n\nprint(res)\n"}
{"label": 75, "index": 9634, "code": "s=str(input())\nprint(s[0]+str((len(s)-2))+s[len(s)-1])"}
{"label": 75, "index": 9635, "code": "s = input()\n\nn=len(s) - 2\nprint(s[0], end=\"\")\nprint(n, end=\"\")\nprint(s[-1])\n"}
{"label": 75, "index": 9636, "code": "def main():\n    S = input()\n    #print(S)\n    len_S = len(S)\n    print(S[0] + str(len_S - 2) + S[len_S - 1])\n     \nif __name__==\"__main__\":\n    main()"}
{"label": 75, "index": 9637, "code": "s = input()\nprint(s[0] + str(len(s)-2) + s[-1])"}
{"label": 75, "index": 9638, "code": "#! -*- coding:utf-8 -*-\ns = str(input())\nx = list(s)\n\ne = x.pop()\na = x.pop(0)\n\nprint(a,len(x),e,sep='')\n"}
{"label": 75, "index": 9639, "code": "s = input()\nN = len(s)\nprint(s[0] + str(N - 2) + s[N - 1])\n"}
{"label": 75, "index": 9640, "code": "S = input()\nprint(S[:1] + str(len(S) -2) + S[-1:])"}
{"label": 75, "index": 9641, "code": "s = str(input())\nprint(s[0]+str(len(s)-2)+s[len(s)-1])\n"}
{"label": 75, "index": 9642, "code": "s = input()\nprint(s[0] + str(len(s) - 2) + s[-1])\n"}
{"label": 75, "index": 9643, "code": "s=input()\nprint(s[0]+str(len(s)-2)+s[len(s)-1])"}
{"label": 75, "index": 9644, "code": "s = input()\n\nprint(s[0] + str(len(s) - 2) + s[-1])\n"}
{"label": 75, "index": 9645, "code": "s = input()\ns_s = s[0]\ns_e = s[-1]\ns = s[1:-1]\n\nnw = s_s + str(len(s)) + s_e\nprint(nw)"}
{"label": 75, "index": 9646, "code": "s = input()\n\nans = s[0]\nans += str(len(s) - 2)\nans += s[len(s) - 1]\n\nprint(ans)\n"}
{"label": 75, "index": 9647, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\ngosa = 1.0 / 10**9\nmod = 10**9 + 7\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\n\n\ndef main():\n    s = S()\n\n    return s[0] + str(len(s)-2) + s[-1]\n\n\n\nprint(main())\n\n"}
{"label": 75, "index": 9648, "code": "# -*- coding: utf-8 -*-\n\nword = input()\n\nprint(word[0] + str(len(word)-2) + word[-1])"}
{"label": 75, "index": 9649, "code": "def main():\n    S = input()\n\n    num = len(S) - 2\n    ans = S[0] + str(num) + S[-1]\n    print(ans)\n\nmain()\n"}
{"label": 75, "index": 9650, "code": "s = input()\n\nprint(s[0] + str(len(s[1:-1])) + s[-1])"}
{"label": 75, "index": 9651, "code": "\n\ns=input()\nl=len(s)-2\nprint(s[0] + str(l) + s[-1])\n\n"}
{"label": 75, "index": 9652, "code": "S = input()\nprint(S[0] + str(len(S[1:-1])) + S[-1:])\n"}
{"label": 75, "index": 9653, "code": "s = input()\na = len(s)\nprint('{0}{1}{2}'.format(s[0],a-2,s[-1]))"}
{"label": 75, "index": 9654, "code": "s = input()\n\nprint (s[0] + str(len(s) - 2) + s[len(s)-1])"}
{"label": 75, "index": 9655, "code": "s = input()\n\ninit = s[0]\nlast = s[-1]\nl = len(s) - 2\n\nprint(init + str(l) + last)"}
{"label": 75, "index": 9656, "code": "nm = input()\nl = len(nm)\nprint(nm[0] + str(l - 2) +nm[-1])"}
{"label": 75, "index": 9657, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\nimport re\nimport math\nimport collections\nimport itertools\nimport functools\n\nDEBUG = True\nDEBUG = False\n\ndef dbg(*args):\n    if DEBUG:\n        print(\"DBG: \", file=sys.stderr, end=\"\")\n        print(*args, file=sys.stderr)\n\n\n\ndef main():\n    s = input()\n    print(s[0] + str(len(s)-2) + s[-1])\n\nif __name__ == \"__main__\": main()\n"}
{"label": 75, "index": 9658, "code": "s=input()\ns=s[0]+str(len(s[1:-1]))+s[-1]\nprint(s)"}
{"label": 75, "index": 9659, "code": "S=list(input())\nprint(S[0]+str(len(S)-2)+S[-1])"}
{"label": 75, "index": 9660, "code": "sen = raw_input()\nlength = len(sen)\nprint(sen[0:1] + str(length - 2) + sen[length-1:length])"}
{"label": 75, "index": 9661, "code": "n = input()\nreturnStr = n[0] + str(len(n)-2) + n[-1]\nprint(returnStr)"}
{"label": 75, "index": 9662, "code": "s = input()\nprint(s[0] + str(len(s[1:len(s) - 1])) + s[len(s) - 1])"}
{"label": 75, "index": 9663, "code": "s = input()\nl = len(s)\n\nhead = s[0]\ntail = s[len(s)-1]\nan = l - 2\nprint(head + str(an) + tail)\n"}
{"label": 75, "index": 9664, "code": "import sys\n\n# sys.stdin = open('b1.in')\n\n\ndef read_int_list():\n    return list(map(int, input().split()))\n\n\ndef read_str_list():\n    return input().split()\n\n\ndef read_int():\n    return int(input())\n\n\ndef read_str():\n    return input()\n\n\ndef main():\n    s = read_str()\n    l = len(s)\n    res = s[0] + str(l - 2) + s[-1]\n    print(res)\n\n\nmain()\n"}
{"label": 75, "index": 9665, "code": "s = input()\nprint(s[:1] + str(len(s) - 2) + s[-1:])"}
{"label": 75, "index": 9666, "code": "ls = list(input())\nprint(ls[0] + str(len(ls)-2) + ls[-1])"}
{"label": 75, "index": 9667, "code": "s = raw_input()\n\nst = s[0]\nen = s[len(s) - 1]\n\nans = \"\"\nans += st\nans += str(len(s) - 2)\nans += en\nprint ans"}
{"label": 75, "index": 9668, "code": "chars=input()\n\nf=chars[0]\nl=chars[len(chars)-1]\n\nn=str(len(chars)-2)\n\nprint(f+n+l)"}
{"label": 75, "index": 9669, "code": "st = input()\nlength = len(st[1:-1])\nprint(st[0] + str(length) + st[-1])"}
{"label": 75, "index": 9670, "code": "s = input()\nprint(s[0]+str(len(s)-2)+s[-1])\n"}
{"label": 75, "index": 9671, "code": "s = input()\nprint(s[0] + str(len(s) - 2) + s[-1])\n"}
{"label": 75, "index": 9672, "code": "s = input()\nprint(s[0], end=\"\")\nprint(len(s)-2, end=\"\")\nprint(s[-1])"}
{"label": 75, "index": 9673, "code": "S = input()\n\nprint(S[0],len(S)-2,S[len(S)-1], sep='')"}
{"label": 75, "index": 9674, "code": "s = input()\nstrlen = len(s)\nprint(s[0:1] + str(strlen-2) + s[-1])"}
{"label": 75, "index": 9675, "code": "S = list(input())\nN = len(S)\nans = S[0] + str(N - 2) + S[-1]\nprint(ans)\n"}
{"label": 75, "index": 9676, "code": "s = input()\n\nprint (s[0] + str(len(s) - 2) + s[len(s) - 1])"}
{"label": 75, "index": 9677, "code": "x = input()\ny = x[1:-1]\nz = x[0]+str(len(y))+x[-1]\nprint(z)"}
{"label": 75, "index": 9678, "code": "#!/usr/bin/python\n\nimport sys\n\ndef main(argv):\n    for line in sys.stdin:\n        s = line.rstrip(\"\\n\")\n        print(\"{0}{1}{2}\".format(s[0], len(s) - 2, s[-1]))\n\nif __name__ == \"__main__\":\n    main(sys.argv)"}
{"label": 75, "index": 9679, "code": "s = input()\nprint(s[0] + str(len(s) - 2) + s[-1])"}
{"label": 75, "index": 9680, "code": "#ABc069B\n\ns=raw_input()\nprint s[0]+str(len(s)-2)+s[-1]\n"}
{"label": 75, "index": 9681, "code": "# -*- coding: utf-8 -*-\n\"\"\"\nhttp://abc069.contest.atcoder.jp/tasks/abc069_b\n\n\"\"\"\n\ndef solve(text):\n    text_length = len(text)\n    return text[0] + str(text_length-2) + text[-1]\n\ndef main():\n    S = input()\n    result = solve(S)\n    print(result)\n\n\nif __name__ == '__main__':\n    main()"}
{"label": 75, "index": 9682, "code": "s=input()\nprint(s[0]+str(len(s)-2)+s[-1])"}
{"label": 75, "index": 9683, "code": "a = input()\nprint(a[0] + str(len(a) - 2) + a[-1])"}
{"label": 75, "index": 9684, "code": "s = input()\n\nlength = len(s)\nans = s[0] + str(length - 2) + s[-1]\nprint(ans)"}
{"label": 75, "index": 9685, "code": "s = raw_input()\nprint s[0] + str(len(s)-2) + s[-1]\n"}
{"label": 75, "index": 9686, "code": "st=input()\nx=st[0]\ny=st[len(st)-1]\nn=str(len(st)-2)\nans=x+n+y\nprint(ans)\n"}
{"label": 75, "index": 9687, "code": "a = input()\n\na_len = len(a)\nf = a[0]\ne = a[-1]\n\nprint(f+str(a_len-2)+e)\n\n\n\n"}
{"label": 75, "index": 9688, "code": "l=raw_input()\nn=len(l)-2\nprint l[0]+str(n)+l[-1]\n"}
{"label": 75, "index": 9689, "code": "# encoding:utf-8\n \ndef main():\n\ts = input()\n\tout = s[0] + str(len(s) - 2) + s[-1]\n\tprint(out)\n\t\t\nif __name__ == '__main__':\n\tmain()\n"}
{"label": 75, "index": 9690, "code": "s=input()\n\nL=len(s)-2\nM=str(L)\n\nA=s[0]+M+s[-1]\nprint(A)"}
{"label": 75, "index": 9691, "code": "s = input()\nprint(s[0] + str(len(s[1:-1])) + s[-1])"}
{"label": 75, "index": 9692, "code": "def main():\n    s = input()\n    print(\"{}{}{}\".format(s[0], len(s[1:-1]), s[-1]))\n    \n\nif __name__ == \"__main__\":\n    main()"}
{"label": 75, "index": 9693, "code": "S=input()\nprint(S[0]+str(len(S)-2)+S[-1])"}
{"label": 75, "index": 9694, "code": "s=input()\nprint(s[0]+str(len(s)-2)+s[-1])"}
{"label": 75, "index": 9695, "code": "s = input()\nprint (s[0] + str(len(s) - 2) + s[-1])\n"}
{"label": 75, "index": 9696, "code": "temp = input()\nl = len(temp)\nprint(temp[0]+str(l-2)+temp[l-1])"}
{"label": 75, "index": 9697, "code": "a = raw_input()\nprint a[0] + str(len(a)-2) + a[-1]\n"}
{"label": 75, "index": 9698, "code": "def omit(s):\n    \"\"\"\n    @param: \u5143\u306e\u6587\u5b57\u5217\n    @return: \u6700\u521d\u306e\u6587\u5b57 + \u6700\u521d\u306e\u6587\u5b57\u3068\u6700\u5f8c\u306e\u6587\u5b57\u306b\u306f\u3055\u307e\u308c\u305f\u6587\u5b57\u5217\u306e\u6d41\u3055\n    + \u6700\u5f8c\u306e\u6587\u5b57\n\n    >>> omit(\"internationalization\")\n    'i18n'\n\n    >>> omit(\"smiles\")\n    's4s'\n\n    >>> omit(\"xyz\")\n    'x1z'\n    \"\"\"\n\n    s2 = list(s)\n\n    (first,last) = (s2.pop(0), s2.pop(-1))\n    return first + str(len(s2)) + last\n\nprint(omit(input()))\n"}
{"label": 75, "index": 9699, "code": "s=input()\nprint(s[0]+str(len(s)-2)+s[-1])\n"}
{"label": 75, "index": 9700, "code": "word = input()\nlists = list(word)\na = int(len(lists) -1)\nprint(lists[0]+str((int(len(lists))-2))+lists[a])"}
{"label": 75, "index": 9701, "code": "# -*- coding: utf-8 -*-\nS = input()\nlength = len(S)\nst = length - 2\nprint(S[0:1] + str(st) + S[-1])"}
{"label": 75, "index": 9702, "code": "s=input()\nn=len(s)\nans=s[0]+str(n-2)+s[n-1]\nprint(ans)"}
{"label": 75, "index": 9703, "code": "s = list(raw_input())\nprint s[0] + str(len(s) - 2) + s[len(s) - 1]"}
{"label": 75, "index": 9704, "code": "S=input ()\np=S[0]\np+=str(len(S)-2)\np+=S[-1]\nprint (p)"}
{"label": 75, "index": 9705, "code": "x = input()\nb = len(x) - 2\nn =x[0] + str(b) + x[b+1]\nprint (n)\n"}
{"label": 75, "index": 9706, "code": "s=str(input())\nprint(str(s[0])+str(len(s)-2)+str(s[-1]))"}
{"label": 75, "index": 9707, "code": "s = input()\nprint(s[0] + str(len(s)-2) + s[-1])"}
{"label": 75, "index": 9708, "code": "s = input()\nprint( s[0]+ str(len(s)-2) + s[-1])\n"}
{"label": 75, "index": 9709, "code": "chr = input()\nchr_list = list(chr)\nlength = len(chr_list)\n\na, z =  chr_list[0], chr_list[length - 1]\n\nprint(a, length - 2, z, sep = '')"}
{"label": 75, "index": 9710, "code": "s = str(input())\nprint(s[0] + str(len(s) - 2) + str(s[len(s) - 1]))\n"}
{"label": 75, "index": 9711, "code": "s = input()\nprint(s[0]+str(len(s)-2)+s[-1])"}
{"label": 75, "index": 9712, "code": "S = input()\nmemo = S[1:-1]\nprint(S[0],end = \"\")\nprint(len(memo),end = \"\")\nprint(S[-1])"}
{"label": 75, "index": 9713, "code": "s = input()\nprint(\"{0}{1}{2}\".format(s[0],len(s) - 2,s[-1]))"}
{"label": 75, "index": 9714, "code": "if __name__ == '__main__':\n    s = input()\n    print(s[0] + str(len(s)-2) + s[-1])\n"}
{"label": 75, "index": 9715, "code": "from collections import defaultdict\nfrom itertools import product, groupby\nfrom math import pi\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right\nINF = 10 ** 10\n\n\ndef main():\n    s = input()\n    print(s[0] + str(len(s) - 2) + s[-1])\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 75, "index": 9716, "code": "s = raw_input().rstrip()\nprint s[0] + str(len(s)-2)+s[-1]"}
{"label": 75, "index": 9717, "code": "a=input()\nprint('%s%d%s'%(a[0],len(a)-2,a[-1]))"}
{"label": 75, "index": 9718, "code": "# i18n\ns = input()\n\nprint(s[0]+ str(len(s)-2) +s[-1] )"}
{"label": 75, "index": 9719, "code": "a=input()\nb=str(len(a[1:-1]))\nc=str(a[:1])\nd=str(a[-1])\nprint(c+b+d)"}
{"label": 75, "index": 9720, "code": "s = raw_input()\nprint \"%s%d%s\" % (s[0], (len(s)-2), s[-1])"}
{"label": 75, "index": 9721, "code": "S = input()\nprint(S[0]+str(len(S[1:-1]))+S[-1])"}
{"label": 75, "index": 9722, "code": "s=input()\nl=len(s)\nanser=s[0]+str(l-2)+s[l-1]\nprint(anser)"}
{"label": 75, "index": 9723, "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ns = raw_input()\nans = s[0] + str(len(s)-2) + s[-1]\nprint ans\n"}
{"label": 75, "index": 9724, "code": "words = input()\nl = len(words)\noutput = words[0] + str(l-2) + words[l-1]\nprint(output)\n"}
{"label": 75, "index": 9725, "code": "s = input()\nans = s[0] + str(len(s)-2) + s[-1]\nprint(ans)"}
{"label": 75, "index": 9726, "code": "s = raw_input()\n\nprint s[0]+str(len(s)-2)+s[-1]"}
{"label": 75, "index": 9727, "code": "s = input()\n\nout = s[0]\nout += str(s.__len__()-2)\nout += s[s.__len__()-1]\n\nprint(out)\n"}
{"label": 75, "index": 9728, "code": "s = input()\nw = s[0]+str(len(s[:-2]))+s[-1]\nprint(w)"}
{"label": 75, "index": 9729, "code": "a=input().split()\nb=list(a[0])\nc=b[0]\nd=b[-1]\nl=len(b)-2\nl=str(l)\nprint(c+l+d)"}
{"label": 75, "index": 9730, "code": "def b():\n    s = input()\n    print(s[0] + str(len(s) - 2) + s[-1])\n\nb()\n"}
{"label": 75, "index": 9731, "code": "word = raw_input().strip()\nprint word[0] + str(len(word)-2) + word[-1]"}
{"label": 75, "index": 9732, "code": "# coding: utf-8\n\ns = input()\nprint(s[0] + str(len(s) - 2) + s[-1])\n"}
{"label": 75, "index": 9733, "code": "#! /usr/bin/env python3\n\nS = input()\nprint(S[0] + str(len(S)-2) + S[-1])\n"}
{"label": 75, "index": 9734, "code": "s = raw_input()\ns = s[0] + str(len(s)-2) + s[-1]\nprint(s)"}
{"label": 75, "index": 9735, "code": "s=input()\nprint(s[0]+str(len(s)-2)+s[-1])"}
{"label": 75, "index": 9736, "code": "def main():\n    s = input()\n    print(s[0] + str(len(s) - 2) + s[-1])\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 75, "index": 9737, "code": "S = raw_input()\n\nprint \"{}{}{}\".format(S[0], len(S)-2, S[-1])\n"}
{"label": 75, "index": 9738, "code": "s = str(input())\n\nprint( s[0] + str(len(s)-2) + s[-1] )\n"}
{"label": 75, "index": 9739, "code": "S = input()\n\nS_list = list(S)\nLen= len(S)\nqueue = []\n\nqueue.append(S_list[0])\nqueue.append(str(Len-2))\nqueue.append(S_list[Len-1])\n\nprint(\"\".join(queue))\n"}
{"label": 75, "index": 9740, "code": "s = input()\nprint(s[0] + str(len(s)-2) + s[-1])"}
{"label": 75, "index": 9741, "code": "a = input()\nprint (a[0] + str((len(a) - 2)) + a[len(a) - 1])\n"}
{"label": 75, "index": 9742, "code": "#!/usr/bin/py\n\ns = input()\nfirst = s[0]\nlast = s[-1]\nnum = str(len(s[1:-1]))\n\nprint(first+num+last)\n"}
{"label": 75, "index": 9743, "code": "s = input()\nprint(s[0] + str(len(s) - 2) + s[-1])"}
{"label": 75, "index": 9744, "code": "temp= input()\nl = len(temp)\nsrted = temp[0] + str(len(temp)-2) +temp[-1]\nprint(srted)\n"}
{"label": 75, "index": 9745, "code": "S = input()\nans = \"\"\nans += S[0]\nans += str(len(S[1:-1]))\nans += S[-1]\nprint(ans)"}
{"label": 75, "index": 9746, "code": "string=input('')\nfirst=string[0]\nlast=string[len(string)-1]\nmid=str(len(string[1:len(string)-1]))\nprint(first+mid+last)"}
{"label": 75, "index": 9747, "code": "s = input().rstrip()\nprint(s[0] + str(len(s) - 2) + s[-1])"}
{"label": 75, "index": 9748, "code": "s = input()\n\nprint( s[0] + str(len(s[1:-1])) + s[-1] )\n"}
{"label": 75, "index": 9749, "code": "# coding: utf-8\n\ns = raw_input()\nprint s[0] + str(len(s[1:-1])) + s[-1]"}
{"label": 76, "index": 9750, "code": "N = input()\nif N == N[-1::-1]:\n    print('Yes')\nelse:\n    print('No')\n    "}
{"label": 76, "index": 9751, "code": "N = input()\nif N[0] == N[2]:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 76, "index": 9752, "code": "num = input()\nif num[0] == num[2]:\n    print('Yes')\nelse:\n    print('No')"}
{"label": 76, "index": 9753, "code": "N = int(input())\nn100 = int(N/100)\nn1 = N - int(N/10) * 10\nif n100 == n1:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 76, "index": 9754, "code": "n = input()\nif(n[0]==n[2]):\n    print(\"Yes\")\nelse :\n    print(\"No\")"}
{"label": 76, "index": 9755, "code": "N = input()\nif N == N[::-1]:\n    print('Yes')\nelse:\n    print('No')\n"}
{"label": 76, "index": 9756, "code": "n = input()\n\nif n == n[::-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 76, "index": 9757, "code": "N=input()\na=list(N)\nb=[]\nn=len(a)\nfor i in range(n):\n b.append(0)\ncount=0\n\nfor i in range(n):\n  b[i]=a[n-1-i]\n\nfor i in range(n):\n  if(a[i]==b[i]):\n    count +=1\n\nif(count==n):\n  print(\"Yes\")\nelse:\n  print(\"No\")\n  "}
{"label": 76, "index": 9758, "code": "n = list(input())\nr = n[::-1]\n\nif(n==r):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 76, "index": 9759, "code": "a = raw_input()\nprint \"Yes\" if a == a[-1:-1-len(a):-1] else \"No\""}
{"label": 76, "index": 9760, "code": "def getInput():\n    separator = ' '\n    ret_array = []\n    while True:\n        try:\n            row = input().split(sep=separator)\n            ret_array.append(row)\n        except EOFError:\n            break\n    return ret_array\n\n\ninp = getInput()\ni = inp[0][0]\n\nif i[0] == i[2]:\n    print('Yes')\nelse:\n    print('No')\n"}
{"label": 76, "index": 9761, "code": "n=list(input())\nif n[::-1]==n:\n print(\"Yes\")\nelse:\n print(\"No\")"}
{"label": 76, "index": 9762, "code": "n = input()\ns = []\nfor i in range(len(n)):\n    s.append(n[len(n)-1-i])\nif(n==\"\".join(s)):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 76, "index": 9763, "code": "N=input()\nif N[0]==N[2]:print('Yes')\nelse:\n  print('No')"}
{"label": 76, "index": 9764, "code": "N = raw_input()\n\nif N == N[::-1]:\n    print \"Yes\"\nelse:\n    print \"No\""}
{"label": 76, "index": 9765, "code": "n = input()\nif n == n[::-1]:\n    print('Yes')\nelse:\n    print('No')\n"}
{"label": 76, "index": 9766, "code": "n = input().rstrip()\nif n[0]==n[2]:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")"}
{"label": 76, "index": 9767, "code": "s = input()\nif(s == s[::-1]) :\n\tprint('Yes')\nelse:\n\tprint('No')\n"}
{"label": 76, "index": 9768, "code": "l = list(map(int, input().split()))\n\nif l[0]//100 == l[0]%10:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 76, "index": 9769, "code": "kaibun = input()\nif \"\".join(reversed(kaibun)) == kaibun:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 76, "index": 9770, "code": "S = input()\nprint('Yes' if S == S[::-1] else 'No')"}
{"label": 76, "index": 9771, "code": "S=input()\nprint('Yes' if S[0]==S[2] else 'No')"}
{"label": 76, "index": 9772, "code": "if __name__ == '__main__':\n    STR = input()\n    if STR[0:1] == STR[2:3]:\n        print('Yes')\n    else:\n        print('No')\n"}
{"label": 76, "index": 9773, "code": "def kaibun(s):\n    for i in range((len(s)+1)//2):\n        if s[i] != s[-(i+1)]:\n            return \"No\"\n    return \"Yes\"\n\n\ns = input()\nprint(kaibun(s))\n"}
{"label": 76, "index": 9774, "code": "N = input()\n\nif N[0] == N[2]:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 76, "index": 9775, "code": "a=input()\nif a[:1]==a[-1]:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")"}
{"label": 76, "index": 9776, "code": "N = input()\nif N[0] == N[2]:\n    print ('Yes')\nelse:\n    print ('No')"}
{"label": 76, "index": 9777, "code": "N = input()\nif N[0] == N[-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 76, "index": 9778, "code": "N = str(input())\n\nif N == N[::-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 76, "index": 9779, "code": "\n\ndef isPal(n):\n    sum = 0\n    while(n>0):\n        rem = n % 10\n        sum = (sum * 10) + rem\n        n = n//10\n\n    return sum\n\nn = int(input().strip())\n\nif(n == isPal(n)):print('Yes')\nelse:print('No')\n    \n"}
{"label": 76, "index": 9780, "code": "x=str(int(input()))\nif x[0]==x[-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n\n    \n"}
{"label": 76, "index": 9781, "code": "s = raw_input()\nif s[0] == s[2]:\n  print 'Yes'\nelse:\n  print 'No'"}
{"label": 76, "index": 9782, "code": "#ABC070A\n\nn=raw_input()\nif n[0]==n[-1]:\n print 'Yes'\nelse:\n print 'No'\n"}
{"label": 76, "index": 9783, "code": "N = input()\n\nfor i in range(int(len(N) / 2 + 1)):\n    if N[i] != N[len(N) - 1 - i]:\n        print('No')\n        exit()\n\nprint('Yes')\n"}
{"label": 76, "index": 9784, "code": "\na=input()\nif a[0]==a[2]:\n    print(\"Yes\")\nelse:print(\"No\")\n"}
{"label": 76, "index": 9785, "code": "def Q1(x):\n    value_reverse = int(str(x)[::-1])\n    if x == value_reverse:\n        return 'Yes'\n    else:\n        return 'No'\n      \nx=int(input())\nprint(Q1(x))"}
{"label": 76, "index": 9786, "code": "n = input()\nmsg = \"Yes\" if n == n[::-1] else \"No\"\nprint(msg)\n"}
{"label": 76, "index": 9787, "code": "a = list(input())\nrev_a = list(a)\nrev_a.reverse()\n\nif a == rev_a:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 76, "index": 9788, "code": "N = input()\nif N == N[::-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 76, "index": 9789, "code": "n = input()\nif n == n[::-1]:\n    print('Yes')\nelse:\n    print('No')\n"}
{"label": 76, "index": 9790, "code": "N = input()\nn=int(N)\nn2=(n%10)*100\nn2+=(n%100)-n%10\nn2+=(n-n%100)/100\nif n==n2 :\n\tprint('Yes\\n')\nelse:\n\tprint('No\\n')\nquit()\n"}
{"label": 76, "index": 9791, "code": "if __name__ == '__main__':\n    N = int(input())\n    if N % 10 == int((N - (N % 100))/100):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n"}
{"label": 76, "index": 9792, "code": "# -*- coding:utf-8 -*-\n\nA = int(input())\n\nif(int(A/100) == int(A%10)):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 76, "index": 9793, "code": "n = input()\nprint(\"Yes\" if n[0] == n[2] else \"No\")"}
{"label": 76, "index": 9794, "code": "n = []\nmsg = \"Yes\"\nn += input()\nfor i in range(len(n)//2):\n  if n[i] != n[-(i+1)]:\n    msg = \"No\"\n    break\nprint(msg)"}
{"label": 76, "index": 9795, "code": "n = input()\nif n == n[::-1]:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n\t"}
{"label": 76, "index": 9796, "code": "N = input()\nrev_N = list(N)[::-1]\nif N == \"\".join(rev_N):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 76, "index": 9797, "code": "#!usr/bim/python\n#! -*- coding: utf-8 -*-\n\nn = raw_input()\n\nlength = len(n)\n\nstatus = 0\n\nfor i in range(length/2):\n    if n[i] == n[length-1-i]:\n        pass\n    else:\n        status = 1\n        break\n\nif status == 0:\n    print 'Yes'\nelse:\n    print 'No'\n    \n"}
{"label": 76, "index": 9798, "code": "n = str(int(input()))\n\nprint(\"Yes\" if n == n[::-1] else \"No\")"}
{"label": 76, "index": 9799, "code": "def main():\n\tn = int(input())\n\ta = n // 100\n\tb = n - (n // 10) * 10\n\tif a == b:\n\t\tprint(\"Yes\")\n\telse:\n\t\tprint(\"No\")\n \nif __name__ == '__main__':\n\tmain()"}
{"label": 76, "index": 9800, "code": "def ri(): return int(input())\ndef rli(): return list(map(int, input().split()))\ndef rls(): return list(input())\ndef pli(a): return \"\".join(list(map(str, a)))\ndef plis(a): return \" \".join(list(map(str, a)))\n\nN = input()\nif(N[0] == N[2]):\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 76, "index": 9801, "code": "num=list(raw_input())\n#print num\n#print num[::-1]\nif num==num[::-1]:\n    print \"Yes\"\nelse:\n    print \"No\"\n"}
{"label": 76, "index": 9802, "code": "n = int(input())\nif (n//10//10) == (n%10%10):\n    print('Yes')\nelse:\n    print('No')\n"}
{"label": 76, "index": 9803, "code": "n = str(input())\nprint(\"Yes\" if n == n[::-1] else \"No\")\n"}
{"label": 76, "index": 9804, "code": "n = input()\nm = int(str(n)[::-1])\nif(n == m):\n  print 'Yes'\nelse:\n  print 'No'"}
{"label": 76, "index": 9805, "code": "N = input()\nif N[0] == N[2]:\n    print('Yes')\nelse:\n    print('No')"}
{"label": 76, "index": 9806, "code": "n = input()\nprint(\"Yes\" if n[0] == n[2] else \"No\")"}
{"label": 76, "index": 9807, "code": "s = str(input())\nif s == s[::-1]:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")"}
{"label": 76, "index": 9808, "code": "s = str(input())\nif s == s[::-1]:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")"}
{"label": 76, "index": 9809, "code": "s = input()\nprint((\"No\", \"Yes\")[s[0]==s[2]])"}
{"label": 76, "index": 9810, "code": "def main():\n    N_str = input().strip()\n    if N_str == N_str[::-1]:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 76, "index": 9811, "code": "\ns=raw_input()\nprint 'Yes' if s==s[::-1] else 'No'"}
{"label": 76, "index": 9812, "code": "N = input()\nif N[0] == N[2]:\n    print('Yes')\nelse:\n    print('No')\n"}
{"label": 76, "index": 9813, "code": "a = input()\nprint('Yes' if a[0]==a[2] else 'No')"}
{"label": 76, "index": 9814, "code": "n = input()\nprint(\"Yes\" if n[0] == n[2] else \"No\")"}
{"label": 76, "index": 9815, "code": "d = input()\nprint('Yes' if d == d[::-1] else 'No')"}
{"label": 76, "index": 9816, "code": "N = input()\nif N[0] == N[-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 76, "index": 9817, "code": "import sys\n\n# sys.stdin = open('a1.in')\n\n\ndef read_int_list():\n    return list(map(int, input().split()))\n\n\ndef read_str_list():\n    return input().split()\n\n\ndef read_int():\n    return int(input())\n\n\ndef read_str():\n    return input()\n\n\ndef main():\n    n = read_int()\n    if str(n)[0] == str(n)[-1]:\n        res = 'Yes'\n    else:\n        res = 'No'\n    print(res)\n\n\nmain()\n"}
{"label": 76, "index": 9818, "code": "str=input()\nif str[0]==str[2]:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 76, "index": 9819, "code": "\n\ndef main():\n    n = int(input())\n\n    if n // 100 == n % 10:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif __name__ == \"__main__\":\n    main()"}
{"label": 76, "index": 9820, "code": "n = input()\n\na = [i for i in n]\nb = [i for i in reversed(n)]\n\nif a == b:\n    print('Yes')\nelse:\n    print('No')\n\n"}
{"label": 76, "index": 9821, "code": "n = input()\nif n[0] == n[-1]:\n    print('Yes')\nelse:\n    print('No')\n"}
{"label": 76, "index": 9822, "code": "import sys\nimport scipy as sp\nimport numpy\n\nN = input()\n\na=N/100\na1=N%100\nb=a1/10\nc=a1%10\n\nif(a==c):\n    print \"Yes\"\nelse:\n    print \"No\"\n"}
{"label": 76, "index": 9823, "code": "# -*- coding: utf-8 -*-\ns = input()\n\nprint(\"Yes\" if s[0] == s[2] else \"No\")\n"}
{"label": 76, "index": 9824, "code": "S=list(map(int, input()))\n\nif S[0]==S[2]:\n    print('Yes')\nelse:\n    print('No')"}
{"label": 76, "index": 9825, "code": "import sys\n\nN = int(sys.stdin.readline())\n\nfirstD = N / 100\nlastD = N % 10\nif firstD == lastD:\n\tprint 'Yes'\nelse:\n\tprint 'No'"}
{"label": 76, "index": 9826, "code": "N = input()\n\nif N[0] == N[2]:\n    print('Yes')\nelse:\n    print('No')"}
{"label": 76, "index": 9827, "code": "N = int(input())\na=N//100\nb=(N-a*100)//10\nc=N-a*100-b*10\nif a == c:\n    print(\"Yes\\n\")\nelse:\n    print(\"No\\n\")"}
{"label": 76, "index": 9828, "code": "num = input()\nif num == num[::-1]:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")"}
{"label": 76, "index": 9829, "code": "N = input()\nif N[:1] == N[-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 76, "index": 9830, "code": "s = input()\nif s[0] == s[2]:\n    print('Yes')\nelse:\n    print('No')\n"}
{"label": 76, "index": 9831, "code": "N = input()\n\nif N[0] == N[-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 76, "index": 9832, "code": "N = input()\nrevN = N[::-1]\n\nif int(N) == int(revN):\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 76, "index": 9833, "code": "N=input()\nprint('Yes' if N==N[::-1] else 'No')\n\n"}
{"label": 76, "index": 9834, "code": "N = input()\nif N == N[::-1]:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")"}
{"label": 76, "index": 9835, "code": "n = str(input())\nprint(\"Yes\" if n == n[::-1] else \"No\")\n"}
{"label": 76, "index": 9836, "code": "n = input()\nprint(\"Yes\" if n[0] == n[2] else \"No\")"}
{"label": 76, "index": 9837, "code": "n = str(input())\nif n[0] == n[2]:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 76, "index": 9838, "code": "N = input()\nif N[0] == N[-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 76, "index": 9839, "code": "N =input('')\n\nif (N % 10) == (N / 100):\n\tprint 'Yes'\nelse:\n\tprint 'No'"}
{"label": 76, "index": 9840, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\nimport re\nimport math\nimport collections\nimport itertools\nimport functools\n\nDEBUG = True\nDEBUG = False\n\ndef dbg(*args):\n    if DEBUG:\n        print(\"DBG: \", file=sys.stderr, end=\"\")\n        print(*args, file=sys.stderr)\n\n\n\ndef main():\n    N = int(input())\n    s = str(N)\n    print(\"Yes\" if s == \"\".join(reversed(s)) else \"No\")\n\nif __name__ == \"__main__\": main()\n"}
{"label": 76, "index": 9841, "code": "\ns=raw_input()\nfor i in range(len(s)/2):\n    if s[i]!=s[len(s)-i-1]:\n        print \"No\"\n        exit()\nprint \"Yes\"\n\nprint"}
{"label": 76, "index": 9842, "code": "import sys\n\nfor inp in map(str, [line.strip() for line in sys.stdin]):\n\tlenip = len(inp)\n\tif lenip%2==0:\n\t\tprint \"Yes\" if inp[:lenip/2] == inp[lenip/2:][::-1] else \"No\"\n\telse:\n\t\tprint \"Yes\" if inp[:lenip/2] == inp[(lenip+1)/2:][::-1] else \"No\""}
{"label": 76, "index": 9843, "code": "import sys\n\n# sys.stdin = open('a1.in')\n\n\ndef read_int_list():\n    return list(map(int, input().split()))\n\n\ndef read_str_list():\n    return input().split()\n\n\ndef read_int():\n    return int(input())\n\n\ndef read_str():\n    return input()\n\n\ndef main():\n    n = read_str()\n    if n == ''.join(list(reversed(n))):\n        res = 'Yes'\n    else:\n        res = 'No'\n    print(res)\n\n\nmain()\n"}
{"label": 76, "index": 9844, "code": "N = input()\nA = int(N[0])\nB = int(N[1])\nC = int(N[2])\nif A==C:\n print(\"Yes\")\nelse:\n print(\"No\")"}
{"label": 76, "index": 9845, "code": "s=input()\nif s==s[::-1]:\n  print(\"Yes\")\nelse:\n  print(\"No\")"}
{"label": 76, "index": 9846, "code": "a=input()\nb=''.join(reversed(a))\nif(a==b):\n  print('Yes')\nelse:\n  print('No')\n"}
{"label": 76, "index": 9847, "code": "n = int(input())\nif n//100 == n%10:\n    print('Yes')\nelse:\n    print('No')"}
{"label": 76, "index": 9848, "code": "N=raw_input()\nif N[0]==N[-1] :\n    print 'Yes'\nelse :\n    print 'No'"}
{"label": 76, "index": 9849, "code": "n = list(input())\n\nif n==n[::-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 76, "index": 9850, "code": "def f():\n    n=(input())\n    if (n[0]==n[2]):    \n        print(\"Yes\")\n    else:\n        print('No')\nf()"}
{"label": 76, "index": 9851, "code": "s = input()\nif s[0:1] == s[2:3]:\n    print('Yes')\nelse:\n    print('No')\n"}
{"label": 76, "index": 9852, "code": "import sys\n\nN = input()\n\nfor i in range(len(N)):\n  if N[i] != N[len(N)-1-i]:\n    print(\"No\")\n    sys.exit()\n\nprint(\"Yes\")"}
{"label": 76, "index": 9853, "code": "N = str(input())\nM = N[::-1]\n\nif N == M:\n    print('Yes')\nelse:\n    print('No')\n"}
{"label": 76, "index": 9854, "code": "# coding: utf-8\ndef II(): return int(input())\ndef ILI(): return list(map(int, input().split()))\n\n\ndef read():\n    N = input()\n    return (N, )\n\n\ndef solve(N):\n    rev = str(int(\"\".join(reversed(N))))\n    if N == rev:\n        ans = \"Yes\"\n    else:\n        ans = \"No\"\n    return ans\n\n\ndef main():\n    params = read()\n    print(solve(*params))\n\n\nif __name__ == \"__main__\":\n    main()\n"}
{"label": 76, "index": 9855, "code": "N = raw_input()\nprint \"Yes\" if N==N[::-1] else \"No\"\n"}
{"label": 76, "index": 9856, "code": "n = input()\nr = n[::-1]\nif n == r:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 76, "index": 9857, "code": "nm = int(input())\nif str(nm) == str(nm)[::-1]:\n    print('Yes')\nelse:\n    print('No')\n"}
{"label": 76, "index": 9858, "code": "n = list(input())\nif n[0]==n[2]:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 76, "index": 9859, "code": "N = input()\n\nn = len(N)\nresult=\"Yes\"\n\nfor i in range(n//2):\n    if N[i] != N[n-i-1]:\n        result=\"No\"\n        break\n\nprint(result)\n"}
{"label": 76, "index": 9860, "code": "k = int(input())\nif int(k / 100) == k % 10:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n"}
{"label": 76, "index": 9861, "code": "n = int(raw_input())\nif n / 100 == n % 10:\n    print 'Yes'\nelse:\n    print 'No'\n"}
{"label": 76, "index": 9862, "code": "a = raw_input()\nif a[0] == a[2]:\n\tprint('Yes')\nelse:\n\tprint(\"No\")"}
{"label": 76, "index": 9863, "code": "a = input()\nb = a[::-1]\n\nif a == b:\n\tprint(\"Yes\")\nelse :\n\tprint(\"No\")"}
{"label": 76, "index": 9864, "code": "num = input()\n\nprint ('Yes' if num[0:1]==num[2:3] else 'No')"}
{"label": 76, "index": 9865, "code": "#Palindromic Number\n\nN = int(input())\n\nif ( N == int(str(N)[::-1]) ):\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 76, "index": 9866, "code": "n = raw_input()\nif n[0] == n[2]: print \"Yes\"\nelse: print \"No\""}
{"label": 76, "index": 9867, "code": "n = input()\nif n[0] == n[2]:\n    print('Yes')\nelse:\n    print('No')"}
{"label": 76, "index": 9868, "code": "# -*- coding:utf-8 -*-\nN = list(input())\nif ''.join(N) == ''.join(reversed(N)):\n    print('Yes')\nelse:\n    print('No')"}
{"label": 76, "index": 9869, "code": "def main():\n    a = input()\n\n    for i in range(len(a)//2):\n        if a[i] != a[-i-1]:\n            print('No')\n            return\n    print('Yes')\n    return\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 76, "index": 9870, "code": "# coding: utf-8\n# Here your code !\nimport sys\na=input()\nif a==a[::-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 76, "index": 9871, "code": "n = int(input())\na = 0\nfor i in range(1,10):\n\tif 100 * i <= n:\n\t\ta += 1\nif a == n % 10:\n\tprint('Yes')\nelse:\n\tprint('No')"}
{"label": 76, "index": 9872, "code": "na = list(input())\nnb = na[:]\nnb.reverse()\nif na == nb:\n    print('Yes')\nelse:\n    print('No')\n"}
{"label": 76, "index": 9873, "code": "# coding: utf-8\n\nn = raw_input()\n\nif n[0] == n[-1]:\n    print \"Yes\"\nelse:\n    print \"No\"\n"}
{"label": 76, "index": 9874, "code": "s = raw_input()\nprint \"Yes\" if s == s[::-1] else \"No\"\n"}
{"label": 76, "index": 9875, "code": "def main():\n    N = input()\n\n    if N == N[::-1]:\n        ans = 'Yes'\n    else:\n        ans = 'No'\n\n    print(ans)\n\nmain()\n"}
{"label": 76, "index": 9876, "code": "n = input()\nif n == n[::-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 76, "index": 9877, "code": "N=str(input())\nif N[0]==N[2]:\n  print(\"Yes\")\nelse:\n  print(\"No\")"}
{"label": 76, "index": 9878, "code": "def main():\n    n = input()\n\n    flag = True\n    s, e = 0, len(n)\n    while (s < e//2):\n        if n[s] != n[e-s-1]:\n            flag=False\n            break\n        s += 1\n    if flag:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n        \n\nif __name__ == \"__main__\":\n    main()"}
{"label": 76, "index": 9879, "code": "N=input()\nif N==N[::-1]:\n print('Yes')\nelse:\n print('No')"}
{"label": 77, "index": 9880, "code": "a = map(int,raw_input().split())\ncount = 0\nfor i in range(0,101):\n if a[0] <= i and i < a[1] and a[2] <= i and i < a[3]:\n  count += 1\nprint count\n"}
{"label": 77, "index": 9881, "code": "# Two Switches\n\nA,B,C,D = list(map(int, input().split()))\n\nif (A>C):\n    A,B,C,D = C,D,A,B\n\nif ( C<B ):\n    print( min(B-C, D-C) )\nelse:\n    print(0)"}
{"label": 77, "index": 9882, "code": "A, B, C, D = map(int, input().split())\nans = min(B,D) - max(A,C)\n \nif ans > 0:\n    print(ans)\nelse:\n    print(0)"}
{"label": 77, "index": 9883, "code": "a, b, c, d = map(int, input().split())\nif b <= c or d <= a:\n\tprint(0)\nelif b <= d:\n\tif a <= c:\n\t\tprint(b - c)\n\telse:\n\t\tprint(b - a)\n\t\nelse:\n\tif a <= c:\n\t\tprint(d - c)\n\telse:\n\t\tprint(d - a)\n"}
{"label": 77, "index": 9884, "code": "a, b, c, d = map(int, input().split())\nif a>=c:\n    if b>=d:\n        if d<=a:\n            print(0)\n        else:\n            print(d-a)\n    else:\n        print(b-a)\nelif a<c:\n    if b>=d:\n        print(d-c)\n    elif b<=c:\n        print(0)\n    else:\n        print(b-c)"}
{"label": 77, "index": 9885, "code": "a, b, c, d = map(int, input().split())\nr = min(b, d) - max(a, c)\nif r < 0:\n    print(0)\nelse:\n    print(r)\n"}
{"label": 77, "index": 9886, "code": "a, b, c, d = map(int, raw_input().split())\nprint max(0, min(b, d) - max(a, c))   \n"}
{"label": 77, "index": 9887, "code": "def solve():\n    a, b, c, d = map(int, input().split())\n    ans = [0] * 101\n    for i in range(a, b):\n        ans[i] += 1\n    for i in range(c, d):\n        ans[i] += 1\n    print(ans.count(2))\n\nif __name__==\"__main__\":\n    solve()"}
{"label": 77, "index": 9888, "code": "a,b,c,d = map(int,input().split())\nans =min(b,d)-max(a,c)\nprint(0 if ans<0 else ans)\n"}
{"label": 77, "index": 9889, "code": "timestr = input().split()\ntime = []\nfor x in timestr:\n    time.append(int(x))\nl = min([time[1], time[3]])\ns = max([time[0], time[2]])\nd = l - s\nif d < 0:\n    print(0)\nelse:\n    print(d)"}
{"label": 77, "index": 9890, "code": "a, b, c, d = map(int, input().split())\nprint(max(0, min(b, d) - max(a, c)))\n"}
{"label": 77, "index": 9891, "code": "a = map(int, raw_input().strip().split())\nb = max(a[0],a[2])\nc = min(a[1],a[3])\nif c > b:\n\tans = c-b\nelse:\n\tans = 0\nprint(ans)"}
{"label": 77, "index": 9892, "code": "A, B, C, D = map(int, input().split())\nt = 0\nif A > C:\n    A, B, C, D = C, D, A, B\nif B <= C:\n    print(t)\nelse:\n    t = min(B, D) - C\n    print(t)\n"}
{"label": 77, "index": 9893, "code": "A, B, C, D = input().split()\nA = int(A)\nB = int(B)\nC = int(C)\nD = int(D)\n\n\ndef solve(A, B, C, D):\n    if A < C:\n        if B < C:\n            return 0\n        elif A <= C and D <= B:\n            return (D - C)\n        else:\n            return (B - C)\n    else:\n        if D < A:\n            return 0\n        elif C <= A and B <= D:\n            return (B - A)\n        else:\n            return (D - A)\n\nprint(solve(A, B, C, D))\n"}
{"label": 77, "index": 9894, "code": "a,b,c,d=map(int,input().split())\n\nif c>b  or a>d:\n    print(\"0\")\nelse:\n    print(b+d-a-c-(max(a,b,c,d)-min(a,b,c,d)))\n"}
{"label": 77, "index": 9895, "code": "a, b, c, d= [int(i) for i in input().strip().split(' ')]\nif c>=b or d<=a:\n  print(0)\nelif c>=a and c<=b:\n  if d<=b:\n    print(d-c)\n  else:\n    print(b-c)\nelif d>=a:\n  if d<=b:\n    print(d-a)\n  else:\n      print(b-a)"}
{"label": 77, "index": 9896, "code": "A, B, C, D = list(map(int, input().split()))\n\nf = set([i for i in range(A, B)])\ng = set([i for i in range(C, D)])\nprint(len(list(f.intersection(g))))\n"}
{"label": 77, "index": 9897, "code": "a, b, c, d = map(int, raw_input().split())\n\ns = 0\non_a = 0\non_b = 0\nfor i in range(101):\n    if i == a:\n        on_a = 1\n    if i == b:\n        on_a = 0\n    if i == c:\n        on_b = 1\n    if i == d:\n        on_b = 0\n#    print(i, on_a, on_b)\n    if on_a and on_b:\n        s += 1\n\nprint(s)\n"}
{"label": 77, "index": 9898, "code": "a,b,c,d=map(int,input().split());print(max(0,min(b,d)-max(a,c)))"}
{"label": 77, "index": 9899, "code": "a, b, c, d = map(int, input().split())\nt = min(b, d) - max(a, c)\nprint(t if t > 0 else 0)\n"}
{"label": 77, "index": 9900, "code": "a_s, a_f, b_s, b_f = [int(x) for x in input().rstrip().split()]\nresult = min(a_f, b_f) - max(a_s, b_s)\nif result > 0:\n\tprint(result)\nelse:\n\tprint(\"0\")"}
{"label": 77, "index": 9901, "code": "a = input().split()\nast = int(a[0])\naen = int(a[1])\nbst = int(a[2])\nben = int(a[3])\nif ast > ben or bst > aen:\n    print(\"0\")\nelif ast < bst and aen < ben:\n    print(aen - bst)\nelif ast < bst and aen > ben:\n    print(ben - bst)\nelif bst < ast and ben < aen:\n    print(ben - ast)\nelif bst < ast and ben > aen:\n    print(aen - ast)\nelif ast == bst and aen < ben:\n    print(aen - ast)\nelif ast == bst and aen > ben:\n    print(ben - ast)\nelif ast < bst and aen == ben:\n    print(ben - bst)\nelif ast > bst and aen == ben:\n    print(aen - ast)\nelif ast == bst and aen == ben:\n    print(aen - ast)\nelse:\n    print(\"0\")\n"}
{"label": 77, "index": 9902, "code": "\n\ndef main():\n    a, b, c, d = [int(x) for x in input().split()]\n\n    xs = [0] * 101\n    xs[a] += 1\n    xs[b] -= 1\n    xs[c] += 1\n    xs[d] -= 1\n\n    cursum = 0\n    t = 0\n    for x in xs:\n        cursum += x\n        if cursum == 2:\n            t += 1\n\n    print(t)\n\n\nif __name__ == \"__main__\":\n    main()"}
{"label": 77, "index": 9903, "code": "[A, B, C, D] = map(int, input().split())\nX = max(A, C)\nY = min(B, D)\nif Y-X >= 0:\n    print(Y-X)\nelse:\n    print(0)"}
{"label": 77, "index": 9904, "code": "sp=list(map(int,input().split()))\ntime=min(sp[1],sp[3])-max(sp[0],sp[2])\nif time >= 0:\n\tprint(time)\nelse:\n\tprint(0)"}
{"label": 77, "index": 9905, "code": "\nA, B, C, D = map(int, input().split())\nans = min(B,D) - max(A,C)\n\nif ans > 0:\n    print(ans)\nelse:\n    print(0)\n"}
{"label": 77, "index": 9906, "code": "a, b, c, d = map(int, input().split())\nprint(max(0, min(b, d) - max(a, c)))\n"}
{"label": 77, "index": 9907, "code": "line = raw_input()\nA, B, C, D = line.split()\nA = int(A)\nB = int(B)\nC = int(C)\nD = int(D)\n\n\nif C > B:\n    print 0\nelif A > D:\n    print 0\nelif A > C:\n    if B > D:\n        print D - A\n    else:\n        print B - A\nelse:\n    if B > D:\n        print D - C\n    else:\n        print B - C \n"}
{"label": 77, "index": 9908, "code": "import sys\n\nN = sys.stdin.readline()\n\nN = N.split()\nN = map(int, N)\n\nif N[2] > N[1] or N[0] > N[3]:\n\tprint 0\n\nelse:\n\tleast = max(N[0], N[2])\n\tmost = min(N[1], N[3])\n\t\n\tprint abs(most- least)"}
{"label": 77, "index": 9909, "code": "A, B, C, D = map(int, input().split())\nif A > C:\n    tmpA = A\n    tmpB = B\n    A = C\n    B = D\n    C = tmpA\n    D = tmpB\nif D > B:\n    if C > B:\n        print(0)\n    else:\n        print(B-C)\nelse:\n    print(D-C)\n"}
{"label": 77, "index": 9910, "code": "A, B, C, D = map(int, input().split())\n\nprint(max(0, min(B, D) - max(A, C)))"}
{"label": 77, "index": 9911, "code": "def f(a, b, c, d):\n    if a <= c:\n        if b <= c:\n            return 0\n        if b <= d:\n            return b - c\n        else:\n            return d - c\n    else:\n        return f(c, d, a, b)\n\na, b, c, d = [int(x) for x in input().strip().split()]\nprint(f(a, b, c, d))\n"}
{"label": 77, "index": 9912, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**1\ngosa = 1.0 / 10**9\nmod = 10**9 + 7\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\n\n\ndef main():\n    a,b,c,d = LI()\n    t = min(b,d) - max(a,c)\n    if t > 0:\n        return t\n\n    return 0\n\n\n\nprint(main())\n\n"}
{"label": 77, "index": 9913, "code": "# coding: utf-8\na, b, c, d = list(map(int, input().split()))\ns1 = set([x for x in range(a, b + 1)])\ns2 = set([x for x in range(c, d + 1)])\nprint(max(len(s1 & s2) - 1, 0))"}
{"label": 77, "index": 9914, "code": "a, b, c, d = map(int, input().split())\nans = 0\nfor i in range(101):\n    if a <= i < b and c <= i < d:\n        ans += 1\nprint(ans)\n"}
{"label": 77, "index": 9915, "code": "A,B,C,D = map(int, input().split())\nif B <= C:\n    print(\"0\")\nelse:\n    print(max(0, min(B,D) - max(A,C)))\n"}
{"label": 77, "index": 9916, "code": "A, B, C, D = map(int, raw_input().split())\n\nprint max(min(B, D) - max(A, C), 0)\n"}
{"label": 77, "index": 9917, "code": "A, B, C, D = [int(n) for n in input().split()]\n\nend = min(B, D)\nstart = max(A, C)\nprint (max(0,end-start))"}
{"label": 77, "index": 9918, "code": "a,b,c,d=map(int,input().split())\ns=max(a,c)\nf=min(b,d)\nif f-s<=0:\n    print(0)\nelse:\n    print(f-s)"}
{"label": 77, "index": 9919, "code": "A, B, C, D = list(map(int, input().split(\" \")))\n\nprint(max(min(B, D) - max(A, C), 0))\n"}
{"label": 77, "index": 9920, "code": "A, B, C, D = map(int, input().split())\n\nst = max(A, C)\ned = min(B, D)\n\nprint(max(ed - st, 0)) "}
{"label": 77, "index": 9921, "code": "\n\n\na,b,c,d = map(int,input().split())\n\nif(b<c or d<a):print(0)\n##elif(b==c or d==a):\n##    if(b == 0 or d==0):print(0)\n##    else:print(1)\nelse:\n    start = a if a>c else c\n    end = b if b<d else d\n    print(end - start)\n\n"}
{"label": 77, "index": 9922, "code": "a,b,c,d=map(int,input().split())\ncount=0\nfor i in range(101):\n    if i>=a and i<=b and i>= c and i<=d:\n        count +=1\n\n\nprint(max(0,count-1))"}
{"label": 77, "index": 9923, "code": "(a, b, c, d) = tuple(map(int, input().split(\" \")))\n\nmm = max(a, c)\nnn = min(b, d)\n\nprint(max(0, nn - mm))"}
{"label": 77, "index": 9924, "code": "def compute(a, b, c, d):\n    return max(0, min(b, d) - max(c, a))\n\n\ndef main():\n    a, b, c, d = (int(x) for x in input().split())\n    print(compute(a, b, c, d))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 77, "index": 9925, "code": "a,b,c,d = map(int,raw_input().split())\nt = [0 for _ in xrange(101)]\nt[a] += 1\nt[b] -= 1\nt[c] += 1\nt[d] -= 1\nfor i in xrange(len(t)):\n  if(i > 0): t[i] += t[i-1]\ncount = 0\nfor i in xrange(len(t)):\n  if(t[i] == 2): count += 1\nprint count"}
{"label": 77, "index": 9926, "code": "\n\na,b,c,d=[int(i) for i in input().strip().split(' ')]\n\n'''\n\u5165\u529b\u306f\u4ed6\u306e\u4eba\u306e\u3092\u898b\u305f\n'''\n\nmax=0\nmin=0\n\nif a < c :\n    max=c\nelse :\n    max=a\n    \nif b > d :\n    min=d\nelse :\n    min=b\nif ( min - max ) > 0 :\n    print( min - max )\nelse :\n    print(0)\n\n"}
{"label": 77, "index": 9927, "code": "A, B, C, D = map(int, input().split(' '))\ni = (B - A + D - C - abs(D-A))\nif A<C and D<B:\n    print(abs(D-C))\nelif C<A and B<D:\n    print(abs(B-A))\nelif A<=C and C <=B:\n    print(B-C)\nelif C <= A and A<=D:\n    print(D-A)    \nelse:\n    print(0)\n"}
{"label": 77, "index": 9928, "code": "a, b, c, d = map(int, input().split())\nif b <= c or d <= a:\n    print('0')\nelse:\n    if a < c:\n            print(min(b-c, d-c))\n    else:\n        print(min(d-a, b-a))"}
{"label": 77, "index": 9929, "code": "A,B,C,D = map(int,input().split())\nlower = max(A,C)\nupper = min(B,D)\n\nprint(max(0,upper-lower))"}
{"label": 77, "index": 9930, "code": "a, b, c, d = map(int, input().split())\nprint(max(0, min(b, d) - max(a, c)))\n"}
{"label": 77, "index": 9931, "code": "A, B, C, D = map(int, raw_input().split(\" \"))\n\nanswer = 0\nfor i in xrange(101):\n  if A <= i < B and C <= i < D:\n    answer += 1\n\nprint answer"}
{"label": 77, "index": 9932, "code": "arr=[int(x) for x in input().split()]\nif(arr[0]< arr[2]):\n    if(arr[2]<=arr[1]<=arr[3]):\n        print(arr[1]-arr[2])\n    elif(arr[1]<arr[2]):\n        print('0')\n    else:\n        print(arr[3]-arr[2])\nelse:\n    if(arr[0]<=arr[3]<=arr[1] ):\n        print(arr[3]-arr[0])\n    elif(arr[3]<arr[0]):\n        print('0')\n    else:\n        print(arr[1]-arr[0])\n"}
{"label": 77, "index": 9933, "code": "A,B,C,D = map(int,input().split())\nprint(max(0,min(D,B)-max(C,A)))"}
{"label": 77, "index": 9934, "code": "A,B,C,D = map(int, raw_input().split())\n\nstart=max(A,C)\nend=min(B,D)\n\nsec=end-start\n\nif sec<0:\n  print 0\nelse:\n  print sec"}
{"label": 77, "index": 9935, "code": "a,b,c,d = map(int,input().split())\nif a <= c <= b <= d:\n    print(b - c)\nelif c <= a <= d <= b:\n    print(d - a)\nelif a <= c <= d <= b:\n    print(d - c)\nelif c <= a <= b <= d:\n    print(b - a)\nelse:\n#elif b <= c or d <= a:\n    print(0)"}
{"label": 77, "index": 9936, "code": "A,B,C,D = list(map(int,input().split()))\n\n\nif A < C:\n  a = C\nelse:\n  a = A\n\nif B < D:\n  b = B\nelse:\n  b = D\n  \nif B <= C or D <= A:\n  res = 0\nelse:\n  res = (b-a)\n  \nprint(res)\n\n"}
{"label": 77, "index": 9937, "code": "\n\ndef main():\n    lst = list(map(int, input().split(' ')))\n    left = max(lst[0], lst[2])\n    right = min(lst[1], lst[3])\n    print(max(right-left, 0))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 77, "index": 9938, "code": "def main():\n    A, B, C, D = map(int, input().split())\n\n    sw = [0] * 101\n    sw[A] = 1\n    sw[B] = -1\n    sw[C] += 1\n    sw[D] += -1\n    for i in range(1, 101):\n        sw[i] = sw[i-1] + sw[i]\n\n    ans = sw.count(2)\n    print(ans)\n\nmain()\n"}
{"label": 77, "index": 9939, "code": "[a,b,c,d]=[int(i) for i in input().split()]\nif a<c:\n  x1=a\n  x2=c\n  y1=b\n  y2=d\nelse:\n  x1=c\n  x2=a\n  y1=d\n  y2=b\nif y1<x2:\n   c=0\nelif x2<=y1<=y2:\n   c=y1-x2\nelse:\n   c=y2-x2\nprint(c)"}
{"label": 77, "index": 9940, "code": "# -*- coding:utf-8 -*-\na,b,c,d = map(int, input().split())\nif min(b,d) >= max(a,c):\n    print(min(b,d)-max(a,c))\nelse:\n    print(0)"}
{"label": 77, "index": 9941, "code": "a, b, c, d = map(int,input().split())\nprint(max(0, min(b, d)-max(a, c)))"}
{"label": 77, "index": 9942, "code": "#ABC070B\n\na,b,c,d=map(int,raw_input().split())\nif a<=c<=b<=d:\n print b-c\nelif c<=a<=d<=b:\n print d-a\nelif a<=c<=d<=b:\n print d-c\nelif c<=a<=b<=d:\n print b-a\nelse:\n print 0\n"}
{"label": 77, "index": 9943, "code": "n = [0] * 100\na, b, c, d = map(int, input().split())\nwhile a < b:\n    n[a] += 1\n    a += 1\nwhile c < d:\n    n[c] += 1\n    c += 1\nprint(n.count(2))\n"}
{"label": 77, "index": 9944, "code": "if __name__ == '__main__':\n    A, B, C, D = map(int, input().split())\n\n    if B <= C or D <= A:\n        print(0)\n    else:\n        if A < C:\n            if B < D:\n                print(B-C)\n            else:\n                print(D-C)\n        elif A > C:\n            if B < D:\n                print(B-A)\n            else:\n                print(D-A)\n        else:\n            if B < D:\n                print(B-A)\n            else:\n                print(D-A)"}
{"label": 77, "index": 9945, "code": "A,B,C,D = map(int,input().split())\n\nif A > C:\n    A,B,C,D = C,D,A,B\n\nif C >= B:\n    print(\"0\")\nelif C < B and D > B:\n    print(B - C)\nelse:\n    print(D - C)\n"}
{"label": 77, "index": 9946, "code": "xa, ya, xb, yb = map(int, input().split())\n\nif xa > xb:\n    x = xa\nelse:\n    x = xb\nif ya > yb:\n    y = yb\nelse:\n    y = ya\nans = y - x\nif ans <= 0:\n    print(0)\nelse:\n    print(ans)\n"}
{"label": 77, "index": 9947, "code": "A,B,C,D = [int(i) for i in input().split()]\nprint(max(0,min(B,D) - max(A,C)))"}
{"label": 77, "index": 9948, "code": "A, B, C, D = input().split(' ')\nA = int(A)\nB = int(B)\nC = int(C)\nD = int(D)\nab = set([ x for x in range(A, B)])\ncd = set([ x for x in range(C, D)])\n#print(ab, cd)\nprint(len(ab & cd))\n#print(A,B,C,D)\n#print(abs((B-A) - C + ( D-C )))\n"}
{"label": 77, "index": 9949, "code": "# -*- coding:utf-8 -*-\n\nA,B,C,D = map(int,input().split())\n\nif(B<C or D<A):\n    print(\"0\")\nelse:\n    if(A>=C):\n        begin = A\n    else:\n        begin = C\n    if(D<=B):\n        end = D\n    else:\n        end = B\n    print(end-begin)\n"}
{"label": 77, "index": 9950, "code": "A,B,C,D = list(map(int, input().split()))\n\nif A > D or C > B:\n    print(0)\nelse:\n    print(min(B,D)-max(A,C))\n\n"}
{"label": 77, "index": 9951, "code": "A,B,C,D = map(int,input().split())\ntmp_A = [i for i in range(A,B)]\ntmp_B = [j for j in range(C,D)]\nprint(len(set(tmp_A)&set(tmp_B)))\n\n"}
{"label": 77, "index": 9952, "code": "def create_set(a, b, out):\n    for i in range(a, b):\n        out.add(i)\n\nparam = input()\na, b, c, d = param.split(' ')\na = int(a)\nb = int(b)\nc = int(c)\nd = int(d)\n\nalice = set()\nbob = set()\ncreate_set(a, b, alice)\ncreate_set(c, d, bob)\n\ntotal = alice & bob\n\ntime_total = 0\nfor i in total:\n    time_total += 1\n\nprint(time_total)\n"}
{"label": 77, "index": 9953, "code": "cnt=0\na,b,c,d=map(int,raw_input().split())\nt=[0 for i in range(101)]\nfor i in range(a,b+1):\n    t[i]=1\nfor j in range(c,d+1):\n    t[j]=t[j]+1\nfor i in range(101):\n    if t[i]==2: cnt=cnt+1\nif cnt==0:\n    print 0\nelse:\n    print cnt-1"}
{"label": 77, "index": 9954, "code": "a,b,c,d=map(int,input().split())\nprint(max(0,min(b,d)-max(a,c)))"}
{"label": 77, "index": 9955, "code": "a, b, c, d = map(int, raw_input().split())\n\nif a >= c:\n    tmpa = a\nelse:\n    tmpa = c\n\nif b >= d:\n    tmpb = d\nelse:\n    tmpb = b\n\nans = tmpb - tmpa\n\nif ans < 0:\n    print 0\nelse:\n    print ans\n\n"}
{"label": 77, "index": 9956, "code": "press = 0\na, b, c, d = map(int,input().split())\nfor i in range(101):\n    if a<=i<b and c<=i<d: press+= 1\nprint(press)"}
{"label": 77, "index": 9957, "code": "import sys\na, b, c, d = (int(i) for i in input().split())\nif b-c<=0 or d-a<=0 or b-a<=0 or d-c<=0:\n    print(0)\n    sys.exit()\nelse:\n    an = min(b-a,d-c,b-c,d-a)\n    print(an)\n"}
{"label": 77, "index": 9958, "code": "a,b,c,d=map(int,input().split())\nprint(max(0,-max(a,c)+min(b,d)))"}
{"label": 77, "index": 9959, "code": "s = raw_input()\nabcd = map(int, s.split())\nif abcd[0] > abcd[2]:\n\tbegin = abcd[0]\nelse:\n\tbegin = abcd[2]\nif abcd[1] > abcd[3]:\n\tend = abcd[3]\nelse:\n\tend = abcd[1]\n\nif (end - begin) >= 0:\n\tprint(end - begin)\nelse:\n\tprint(0)\n"}
{"label": 77, "index": 9960, "code": "a = list(map(int,input().split()))\ncounter = 0\nfor i in range (101):\n  if a[0] <= i <= a[1] and a[2] <= i <= a[3]:\n    counter += 1\nif counter > 0:\n  print ('{0}'.format(counter - 1))\nelse:\n  print ('{0}'.format(0))"}
{"label": 77, "index": 9961, "code": "a,b,c,d = map(int,input().split())\n\ns = max(a,c)\nt = min(b,d)\nd = t-s\nprint(d if d > 0 else 0)"}
{"label": 77, "index": 9962, "code": "a,b,c,d = map(int, input().split())\nif a==c and b==d:\n    print(abs(a-b))\nelif a==d or c==b:\n    print(0)\nelif a==c:\n    print(abs(b-a) if b<d else abs(d-c))\nelif b==d:\n    print(abs(b-a) if a>c else abs(d-c))\nelif a>c:\n    if a>d:\n        print(0)\n    elif a<d<b:\n        print(abs(a-d))\n    else:\n        print(abs(a-b))\nelse:\n    if c>b:\n        print(0)\n    elif c<b<d:\n        print(abs(c-b))\n    else:\n        print(abs(c-d))\n"}
{"label": 77, "index": 9963, "code": "alice = [False for _ in range(100)]\nbob = [False for _ in range(100)]\n\na,b,c,d = map(int,input().split(\" \"))\nfor i in range(a,b):\n    alice[i] = True\n\nfor i in range(c,d):\n    bob[i] = True\n\ncount = 0\nfor i in range(100):\n    if alice[i] and bob[i]:\n        count += 1\n\nprint(count)\n"}
{"label": 77, "index": 9964, "code": "a,b,c,d = map(int, input().split())\nif a < c:\n    start = c\nelse:\n    start = a\nif b < d:\n    end = b\nelse:\n    end = d\nif start >= end:\n    print(0)\nelse:\n    print(end - start)\n\n"}
{"label": 77, "index": 9965, "code": "A,B,C,D = map(int, raw_input().split())\nprint max(0, min(B,D)-max(A,C))\n"}
{"label": 77, "index": 9966, "code": "A, B, C, D = map(int, input().split())\nX = set(range(A, B))\nY = set(range(C, D))\nprint(len(X.intersection(Y)))\n"}
{"label": 77, "index": 9967, "code": "def Q2(x):\n    A, B, C, D = x[0], x[1], x[2], x[3]\n    if B <= C or D <= A:\n        return 0\n    else:\n        if A <= C:\n            return min(B, D) - C\n        else:\n            return min(B, D) - A\n          \nl = [int(i) for i in input().split()]\nprint(Q2(l))"}
{"label": 77, "index": 9968, "code": "A, B, C, D = map(int, raw_input().split())\nprint max(0, min(B,D)-max(A,C))"}
{"label": 77, "index": 9969, "code": "abcd = [int(i) for i in input().split()]\n\ntotal = (abcd[1] - abcd[0]) + (abcd[3] - abcd[2])\ngap = max(abcd) - min(abcd)\n\nif gap>=total:\n\tprint(0)\nelse:\n\tprint(total-gap)\n"}
{"label": 77, "index": 9970, "code": "a, b, c, d = map(int, input().split())\ns = max(a, c)\ne = min(b, d)\nprint(max(e-s, 0))"}
{"label": 77, "index": 9971, "code": "N=input().split()\nA=int(N[0])\nB=int(N[1])\nC=int(N[2])\nD=int(N[3])\n\nt=0\nif(C<A):\n if(D<=A):\n  t=0\n if(A<D<=B):\n  t=D-A\n if(B<D):\n  t=B-A\n\nif(A<C):\n if(B<=C):\n  t=0\n if(C<B<=D):\n  t=B-C\n if(D<B):\n  t=D-C\n\nif(A==C):\n if(B<=D):\n  t=B-A\n else:\n  t=D-A\n  \nprint(t)\n"}
{"label": 77, "index": 9972, "code": "a,b,c,d = map(int,input().split())\ns=0\nfor i in range(a,b):\n    for j in range(c,d):\n        if i == j:\n            s+=1\nprint(s)"}
{"label": 77, "index": 9973, "code": "# your code goes here\nA,B,C,D=(int(i) for i in input().split())\nif A<C:\n    A=C\nif B>D:\n    B=D\nB-=A\nif B<0:\n  print(0)\nelse:\n  print(B)"}
{"label": 77, "index": 9974, "code": "import sys\n\nstdin = sys.stdin\n\nni = lambda: int(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nns = lambda: stdin.readline()\n\na,b,c,d = na()\nprint(max(0,min(b,d)-max(a,c)))\n"}
{"label": 77, "index": 9975, "code": "a, b, c, d = [int(x) for x in input().split()]\n\nres = 0\n\nfor i in range(101) :\n    if (a <= i and i < b) and (c <= i and i < d):\n        res += 1\n\nprint(res)\n    \n\n"}
{"label": 77, "index": 9976, "code": "a,b,c,d = map(int, raw_input().split())\ninit = max(a,c)\nterm = min(b,d)\nif term-init <= 0:\n  print \"0\"\nelse:\n  print (term-init)"}
{"label": 77, "index": 9977, "code": "A, B, C, D = list(map(int, input().split()))\nif A < C:\n    if B < D:\n        if B < C:\n            ans = 0\n        else:\n            ans = B-C\n    else:\n        ans = D-C\nelse:\n    if B < D:\n        ans = B-A\n    else:\n        if A < D:\n            ans = D-A\n        else:\n            ans = 0\nprint(ans)\n"}
{"label": 77, "index": 9978, "code": "a,b,c,d=map(int,input().split())\nif a>=c and b>=d and d>a:\n    print(d-a)\nelif a<=c and b<=d and b>c:\n    print(b-c)\nelif a<c and d<b:\n    print(d-c)\nelif c<a and b<d:\n    print(b-a)\nelse:\n    print(0)"}
{"label": 77, "index": 9979, "code": "a,b,c,d = map(int,input().split())\nif b<=c or d<=a:\n    print(0)\nelse:\n    print(min(b,d)-max(a,c))\n"}
{"label": 77, "index": 9980, "code": "a,b,c,d = map(int, input().split())\nAlice = set(range(a,b))\nBob = set (range(c,d))\nprint(len(Alice & Bob))\n"}
{"label": 77, "index": 9981, "code": "A, B, C, D = [int(i) for i in input().split()]\nprint(max(0, min(B,D) - max(A, C)))"}
{"label": 77, "index": 9982, "code": "a,b,c,d = map(int, input().split())\nAl = list(range(a,b))\nBo = list(range(c,d))\nprint(len(set(Al) & set(Bo)))"}
{"label": 77, "index": 9983, "code": "A,B,C,D=map(int,input().split())\na=[0]*101\nfor i in range(A,B):\n  a[i]+=1\nfor i in range(C,D):\n  a[i]+=1\nprint( sum([ 1 for x in a if x >= 2]) )"}
{"label": 77, "index": 9984, "code": "a, b, c, d = map(int, input().split())\n\nm = [0 for i in range(101)]\nn = [0 for i in range(101)]\n\ni = a\nwhile(True):\n    m[i] = 1\n    if(i == b):\n        break\n    i+=1\ni = c\nwhile(True):\n    n[i] = 1\n    if(i == d):\n        break\n    i+=1\n\nans = 0\nfor i in range(101):\n    if(m[i] * n[i] == 1):\n        ans+=1\n\nif(ans!=0):\n    ans-=1\n\nprint(ans)\n"}
{"label": 77, "index": 9985, "code": "A,B,C,D = map(int,input().split())\nprint(max(0,min(B,D)-max(A,C)))"}
{"label": 77, "index": 9986, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\n\ndef main():\n    A, B, C, D = map(int, input().split())\n\n    if A <= D and B >= C:\n        print(min(B,D) - max(A,C))\n    else:\n        print(0)\n\nif __name__ == \"__main__\": main()\n"}
{"label": 77, "index": 9987, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\nimport re\nimport math\nimport collections\nimport itertools\nimport functools\n\nDEBUG = True\nDEBUG = False\n\ndef dbg(*args):\n    if DEBUG:\n        print(\"DBG: \", file=sys.stderr, end=\"\")\n        print(*args, file=sys.stderr)\n\n\n\ndef main():\n    A, B, C, D = map(int, input().split())\n\n    alice = [A <= t < B for t in range(100)]\n    bob   = [C <= t < D for t in range(100)]\n\n    cnt = 0\n    for t in range(100):\n        if alice[t] and bob[t]:\n            cnt += 1\n\n    print(cnt)\n\nif __name__ == \"__main__\": main()\n"}
{"label": 77, "index": 9988, "code": "A, B, C, D = map(int, input().split())\nif A > C:\n    start = A\nelse:\n    start = C\nif B < D:\n    end = B\nelse:\n    end = D\nif end - start >= 0:\n    print(end - start)\nelse:\n    print(0)"}
{"label": 77, "index": 9989, "code": "a,b,c,d=map(int, input().split())\nprint(max(0,min(b,d)-max(a,c)))\n"}
{"label": 77, "index": 9990, "code": "A,B,C,D = map(int,input().split())\nprint(max(0, min(B,D) - max(A,C)))\n"}
{"label": 77, "index": 9991, "code": "a,b,c,d=map(int,input().split())\nprint(max(min(b,d)-max(a,c),0))"}
{"label": 77, "index": 9992, "code": "a,b,c,d=map(int,raw_input().split())\na=max(a,c)\nb=min(b,d)\nprint max(0,b-a)"}
{"label": 77, "index": 9993, "code": "#! -*- coding:utf-8 -*-\na,b,c,d = map(int,input().split())\nif d <= a or b <= c:\n    print(0)\nelif c <= a and (a <= d and d <= b):\n    print(d-a)\nelif (a <= c and c <= b) and (a <= d and d <= b):\n    print(d-c)\nelif (a <= c and c <= b) and b <= d:\n    print(b-c)\nelse:\n    print(b-a)\n"}
{"label": 77, "index": 9994, "code": "a,b,c,d = [int(i) for i in input().split()]\n\nans = 0\nfor i in range(101):\n    if i in range(a,b) and i in range(c,d):\n        ans += 1\n\nprint(ans)\n"}
{"label": 77, "index": 9995, "code": "A, B, C, D = map(int,input().split())\n\nif(B < C or D < A):\n\tprint(0)\n\nelse:\n\tif(A > C):\n\t\tE = A\n\telse:\n\t\tE = C\n\n\tif(B > D):\n\t\tF = D\n\telse:\n\t\tF = B\n\n\tprint(F - E)\n"}
{"label": 77, "index": 9996, "code": "nums = [int(x) for x in input().split()]\nnums = [ [nums[0],nums[1]] ,\n         [nums[2],nums[3]] ]\nN = 100\nimos = [0 for i in range(N+2)]\n\nfor num in nums:\n    a,b = num[0],num[1]-1\n    imos[a] += 1\n    imos[b+1] -= 1\n \nans = []\nj = 0\nfor i in imos:\n    ans.append(j+i)\n    j += i\n\nprint(ans.count(2))"}
{"label": 77, "index": 9997, "code": "a, b, c, d = map(int, input().split())\ne = max(a, c)\nf = min(b, d)\nprint(max(f-e,0))"}
{"label": 77, "index": 9998, "code": "a,b,c,d = map(int, raw_input().split())\ns = max(a,c)\ne = min(b,d)\nif s < e:\n    print e-s\nelse:\n    print 0\n"}
{"label": 77, "index": 9999, "code": "a,b,c,d = map(int,input().split())\nans = min(b,d) - max(a,c)\nif ans > 0:\n    print(ans)\nelse:\n    print(\"0\")"}
{"label": 77, "index": 10000, "code": "def ri(): return int(input())\ndef rli(): return list(map(int, input().split()))\ndef rls(): return list(input())\ndef pli(a): return \"\".join(list(map(str, a)))\ndef plis(a): return \" \".join(list(map(str, a)))\n\na, b, c, d = rli()\nprint(max(0, b-c-max(0, a-c) - max(0, b-d)))"}
{"label": 77, "index": 10001, "code": "a,b,c,d = list(map(int, input().split()))\n\nif a < c:\n    if d <= b:\n        print(d - c)\n    elif c <= b:\n        print(b - c)\n    else:\n        print(0)\nelse:\n    if b <= d:\n        print(b - a)\n    elif a <= d:\n        print(d - a)\n    else:\n        print(0)\n"}
{"label": 77, "index": 10002, "code": "a,b,c,d = map(int,input().split())\n\nif a<c:\n    if b>c:\n        if b>d:\n            print(d-c)\n        else:\n            print(b-c)\n    else:\n        print(0)\nelse:\n    if d>a:\n        if d>b:\n            print(b-a)\n        else:\n            print(d-a)\n    else:\n        print(0)\n"}
{"label": 77, "index": 10003, "code": "def Q2(x):\n    A, B, C, D = x[0], x[1], x[2], x[3]\n    time_lower = max(A, C)\n    time_upper = min(B, D)\n    return max(0, time_upper - time_lower)\n\nl = [int(i) for i in input().split()]\nprint(Q2(l))"}
{"label": 77, "index": 10004, "code": "# -*- coding: utf-8 -*-\n\"\"\"\nhttp://abc070.contest.atcoder.jp/tasks/abc070_b\n\"\"\"\n\n\ndef solve(A, B, C, D):\n    start = max(A, C)\n    end = min(B, D)\n    duration = end - start\n    if duration < 0:\n        return 0\n    else:\n        return duration\n\n\ndef main():\n    A, B, C, D = [int(x) for x in input().strip().split(' ')]\n    result = solve(A, B, C, D)\n    print(result)\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 77, "index": 10005, "code": "a, b, c, d = map(int,input().split())\nprint(max(0, min(b, d)-max(a, c)))"}
{"label": 77, "index": 10006, "code": "a = list(map(int,input().split()))\nif a[2] < a[0]: a = [a[2], a[3], a[0],a[1]]\n\nif a[2] < a[1]:\n\tif a[3] < a[1]:\n\t\tprint(a[3]-a[2])\n\telse:\n\t\tprint(a[1]-a[2])\nelse:\n\tprint(0)"}
{"label": 77, "index": 10007, "code": "A, B, C, D = map(int, input().split())\nS1 = set()\nS2 = set()\nfor i in range(A, B):\n  S1.add(i)\nfor i in range(C, D):\n  S2.add(i)\nprint(len(S1.intersection(S2)))"}
{"label": 77, "index": 10008, "code": "# encoding:utf-8\n \ndef main():\n\ta, b, c, d = list(map(int, input().split()))\n\tst = max(a, c)\n\ten = min(b, d)\n\tdr = max(en - st, 0) \n\tprint(dr)\n\nif __name__ == '__main__':\n\tmain()\n"}
{"label": 77, "index": 10009, "code": "l=list(map(int,input().strip().split(' ')))\na=l[0]\nb=l[1]\nc=l[2]\nd=l[3]\nl1=[x for x in range(a,b+1)]\nl2=[x for x in range(c,d+1)]\nl3=[]\nans=0\nfor i in l2:\n    if i in l1:\n        ans+=1\nprint(max(0,ans-1))"}
{"label": 78, "index": 10010, "code": "def gcd(a, b):\n    if a < b:\n        a,b = b,a\n    while b > 0:\n        r = a % b\n        a,b = b,r\n    return a\n\ndef lcm(a, b):\n    if a == 0 or b == 0:\n        print(\"Error\")\n        return 0\n    return int(a * b // gcd(a, b))\n\ndef arrlcm(a):\n    alen = len(a)\n    if alen == 3:\n        return lcm(a[0], lcm(a[1], a[2]))\n    elif alen == 2:\n        return lcm(a[0], a[1])\n    elif alen == 1:\n        return a[0] # \u6700\u521d\u304b\u30891\u3064\n    elif alen == 0:\n        return 0\n    else:\n        return lcm(arrlcm(a[:alen//2]), arrlcm(a[alen//2:]))\n\ndef solve():\n    n = int(input())\n    print(arrlcm([int(input()) for _ in range(n)]))\n\n\nif __name__==\"__main__\":\n    solve()"}
{"label": 78, "index": 10011, "code": "N = input();\n\nfrom fractions import gcd\n\nans = 1\nfor i in range(N):\n    t = input()\n    g = gcd(ans, t)\n    ans = (t * ans) / g\n\nprint ans\n"}
{"label": 78, "index": 10012, "code": "import sys\nimport scipy as sp\nimport numpy\nimport math\nfrom fractions import Fraction\nfrom fractions import gcd\n\nN = input()\nt = []\nfor i in range(N):\n    t.append(input())\n\ndef lcm(a, b):\n  return a*b/gcd(a, b)\n\na=1\nfor j in range(N):\n    b=t[j]\n    c=lcm(a,b)\n    a=lcm(c,b)\n\nprint c"}
{"label": 78, "index": 10013, "code": "def gcd(a, b):\n  if b == 0:\n    return a\n  return gcd(b, a % b)   \n\nn=int(input())\np=1\nfor i in range(n):\n  m=int(input())\n  p=p*m//gcd(p,m)\nprint(int(p))"}
{"label": 78, "index": 10014, "code": "def lcm(a, b):\n    ax = a\n    bx = b\n    if a<b:\n        ax, bx = (bx, ax)\n    while True:\n        if ax%bx == 0:\n            gcd = bx\n            break\n        else:\n            c = bx\n            bx = ax%bx\n            ax = c\n    return a*b // gcd\n\nn = int(input())\nlst = []\nlst2 = []\nfor i in range(n):\n    a = int(input())\n    lst.append(a)\n\nwhile True:    \n    if n==1:\n        print(lst[0])\n        break\n    lst2.append(lcm(lst[0], lst[1]))\n    lst.pop(0)\n    lst.pop(0)\n    lst2.extend(lst)\n    if len(lst2)==1:\n        print(lst2[0])\n        break\n    lst.clear()\n        \n    lst.append(lcm(lst2[0], lst2[1]))\n    lst2.pop(0)\n    lst2.pop(0)\n    lst.extend(lst2)\n    if len(lst)==1:\n        print(lst[0])\n        break\n    lst2.clear()"}
{"label": 78, "index": 10015, "code": "#!usr/bim/python\n#! -*- coding: utf-8 -*-\n\nn = raw_input()\nn = int(n)\n\nt = []\n\nfor i in range(n):\n    temp = raw_input()\n    temp = int(temp)\n    t.append(temp)\n\ndef gcd(a,b):\n    r = a % b\n    while not r == 0:\n        a = b\n        b = r\n        r = a % b\n    return(b)\n\nx = 1\nfor i in range(n):\n    y = t[i]\n    gcdxy = gcd(x,y)\n    lcm = x*y/gcdxy\n    x = lcm\n\nprint x\n"}
{"label": 78, "index": 10016, "code": "\ndef gcd(a, b):\n  if b == 0:\n    return a\n  else:\n    return gcd(b, a % b)\n\nN=int(input())\nA = [ int(input()) for _ in range(N) ]\nans = A[0]\nfor x in A[1:]:\n  ans = ans * x // gcd(ans, x)\nprint(ans)\n"}
{"label": 78, "index": 10017, "code": "def HCF(a,b):\n    if a==0:\n        return b\n    return HCF(b%a,a)\nN = long(raw_input())\nx = long(raw_input())\nfor i in range(1,N):\n    y = long(raw_input())\n    x = (x*y)/HCF(x,y)\nprint x\n"}
{"label": 78, "index": 10018, "code": "def gcd(a,b):\n    if a > b:\n        t = a\n        a = b\n        b = t\n    if b % a == 0:\n        return a\n    else:\n        return gcd(b % a, a)\n\ndef lcm(a,b):\n    return a*b/gcd(a,b)\n\nn = int(raw_input())\nl = [int(raw_input()) for _ in range(n)]\nprint reduce(lcm, l)\n"}
{"label": 78, "index": 10019, "code": "def gcd(a,b):\n   while b:\n      a,b = b,a%b\n   return a\n\nr = 1\nnbClock = int(input())\nfor i in range(nbClock):\n   c = int(input())\n   g = gcd(r,c)\n   r = r * (c//g)\nprint(r)"}
{"label": 78, "index": 10020, "code": "def ri(): return int(input())\ndef rli(): return list(map(int, input().split()))\ndef rls(): return list(input())\ndef pli(a): return \"\".join(list(map(str, a)))\ndef plis(a): return \" \".join(list(map(str, a)))\n\nimport fractions\n\n\ndef lcm(a, b):\n  return (a * b) // fractions.gcd(a, b)\n\nN = ri()\nt = ri()\nfor i in range(N-1):\n  t = lcm(t, ri())\nprint(t)\n"}
{"label": 78, "index": 10021, "code": "def gcd(a, b):\n  if b == 0:\n    return a\n  else:\n    return gcd(b, a % b)\n \nN=int(input())\nA = [ int(input()) for _ in range(N) ]\nans = A[0]\nfor x in A[1:]:\n  ans = ans * x // gcd(ans, x)\nprint(ans)"}
{"label": 78, "index": 10022, "code": "N = input()\nT = [input() for _ in range(N)]\n\ndef gcd(a, b):\n    if b==0:\n        return a\n    else:\n        return gcd(b, a%b)\n\ndef lcm(a, b):\n    return a*b/gcd(a,b)\n\nans = 1\nfor t in T:\n    ans = lcm(ans, t)\nprint ans\n"}
{"label": 78, "index": 10023, "code": "def gcd(a,b):\n    #a=min(a,b)\n    #b=max(a,b)\n    while b:\n        a,b= b, a%b\n    return a\n\ndef lcm(a,b):\n    return a*b//gcd(a,b)\nT=[]\nN=int(input())\nfor i in range(N):\n    T.append(int(input()))\n\nans=1\nfor t in T:\n    ans=lcm(ans, t)\n\nprint(int(ans))"}
{"label": 78, "index": 10024, "code": "# encoding:utf-8\nfrom functools import reduce\n\ndef gcd(a, b):\n\twhile b:\n\t\ta, b = b, a % b\n\treturn a\n\ndef lcm(a, b):\n\treturn a * b // gcd(a, b)\n\ndef main():\n\tn = int(input())\n\tnums = [int(input()) for _ in range(n)]\n\n\tout = reduce(lcm, nums)\n\tprint(out)\n\nif __name__ == '__main__':\n\tmain()"}
{"label": 78, "index": 10025, "code": "def gcd(a,b):\n    while True:\n        r=a%b\n        if r==0:\n            return b\n        a, b = b, r\n\ndef gcf(a,b):\n    return a*b//gcd(a,b)\n\nN=int(input())\nans=1\nfor _ in range(N):\n    t=int(input())\n    ans=gcf(ans,t)\nprint(ans)\n\n"}
{"label": 78, "index": 10026, "code": "N = int(input())\n \na_list = []\nfor _ in range(N):\n    a_list.append(int(input()))\n \ndef gcd(a, b):\n    if a < b:\n        a, b = b, a\n    if b == 0:\n        return a\n    c = a % b\n    return gcd(b, c)\n \nres = 1\nfor i in range(N):\n    d = gcd(res, a_list[i])\n    res = res // d\n    res = res * a_list[i]\n \nprint(res) "}
{"label": 78, "index": 10027, "code": "def gcd(a, b):\n\twhile b:\n\t\ta, b = b, a % b\n\treturn a\n\ndef lcm(a, b):\n\treturn a * b // gcd (a, b)\n\n\nN = int(input())\t\t\t\t\t\t# 5\n\na = int(input())\nfor _ in range(N-1):\n\ta = lcm(a, int(input()))\n\n\nprint(a)\n"}
{"label": 78, "index": 10028, "code": "import sys\n\ndef gcd(a,b):\n    while b:\n        a,b=b,a%b\n    return a\n\ndef lcm(a,b):\n    return a*b // gcd(a,b)\n\nN = int(input())\nif(N==1):\n    print(int(input()))\n    sys.exit()\n\nT=[]\nT.append(int(input()))\n\nfor i in range(N-1):\n    T.append(int(input()))\n    T[i+1]=lcm(T[i+1],T[i])\nprint(T[N-1])\n\n"}
{"label": 78, "index": 10029, "code": "from fractions import gcd\ndef lcm(a, b):\n    return a * b // gcd (a, b)\ndef f():\n    n = int(input())\n    a=[]\n    l=1\n    for i in range(n):\n        s=(int(input()))\n        l=lcm(l,s)\n    print(l)\nf()"}
{"label": 78, "index": 10030, "code": "def gcd(a,b):\n    if b==0:\n        return a\n    return gcd(b,a%b)\n\ndef getlcm(a,b):\n    return (a*b)/gcd(a,b)\n    \nn=int(raw_input(''))\nx=int(raw_input(''))\nlcm=x\n\nfor i in range(1,n,1):\n    x=int(raw_input(''))\n    lcm=getlcm(lcm,x)\nprint lcm"}
{"label": 78, "index": 10031, "code": "N = int(input())\nt_list = [int(input()) for i in range(N)]\n\ndef gcd(a,b):\n\twhile b:\n\t\ta,b = b, a%b\n\treturn a\n\na = t_list[0]\nfor c in range(N-1):\n\tb = t_list[c+1]\n\ta =a*b//gcd(a,b)\n\nprint(a)"}
{"label": 78, "index": 10032, "code": "def GCD(a, b):\n    if a > b:\n        A = a\n        B = b\n    elif b > a:\n        A = b\n        B = a\n    else:\n        return a\n\n    r = A % B\n    while r != 0:\n        A = B\n        B = r\n        r = A % B\n\n    return B\n\n\ndef LCM(a, b):\n    g = GCD(a, b)\n    return a*b // g\n\n\ndef solve(): # ABC070C- Multiple Clocks\n    while 1:\n        try:\n            n = int(input())\n            T = []\n            for _ in range(n):\n                T.append(int(input()))\n\n            l = T[0]\n            for i in range(1, n):\n                l = LCM(l, T[i])\n\n            print(l)\n        except:\n            break\n            \n            \nsolve()"}
{"label": 78, "index": 10033, "code": "import fractions\nn = int(input())\nt = [int(input()) for i in range(n)]\n\nfor i in range(n - 1):\n    t[i + 1] = t[i] * t[i + 1] // fractions.gcd(t[i], t[i + 1])\n\nprint(t[n - 1])\n"}
{"label": 78, "index": 10034, "code": "n = int(input())\nT = []\nfor i in range(n):\n    T.append(int(input()))\n\nT = sorted(T)\ndef gcd(a, b):\n    while b > 0:\n        t = a\n        a = b\n        b = t%b\n    return(a)\n\ndef lcm(a, b):\n    return(int(a / int(gcd(a, b))) * b)\n\nLCM = T[0]\nfor i in range(n-1):\n    LCM = lcm(LCM, T[i+1])\n\nprint(LCM)\n"}
{"label": 78, "index": 10035, "code": "n=int(raw_input())\ndef gcd(a,b):\n  if b==0 :\n    return a\n  return gcd(b,a%b)\ny=1\nfor i in range(n) :\n  x=int(raw_input())\n  z=gcd(x,y)\n  y=x*y/z\nprint y"}
{"label": 78, "index": 10036, "code": "def gcd(a, b):\n    if a < b: b, a = a, b\n    if b == 0: return a\n    return gcd(b, a % b)\n\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\nN = int(input())\n\nret = 1\n\nfor _ in range(N):\n    ret = lcm(ret, int(input()))\n\nprint(ret)\n"}
{"label": 78, "index": 10037, "code": "def gcd(x, y):\n    y, x = sorted([x, y])\n    while y > 0:\n        t = y\n        y = x % y\n        x = t\n    return x\n\nn = int(input())\nt = [int(input()) for i in range(n)]\n\nlcm = 1\nfor i in range(n):\n    lcm = lcm * t[i] // gcd(lcm, t[i])\n\nprint(lcm)\n"}
{"label": 78, "index": 10038, "code": "import fractions\nimport functools\n\ndef lcm(a,b):\n\treturn a*b//fractions.gcd(a,b)\n\nn=int(input())\nt=[]\nfor i in range(n):\n\tt.append(int(input()))\nans=functools.reduce(lcm,t)\nprint(ans)"}
{"label": 78, "index": 10039, "code": "def gcd(a, b):\n    \"\"\"Return greatest common divisor using Euclid's Algorithm.\"\"\"\n    while b:      \n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    \"\"\"Return lowest common multiple.\"\"\"\n    return a * b // gcd(a, b)\n\nN = int(input())\nT = int(input())\nfor i in range(1, N):\n    T = lcm(int(input()), T)\nprint(T)"}
{"label": 78, "index": 10040, "code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n    \ndef lcm(a, b):\n    return a * b // gcd(a, b)\n    \ndef main():\n    N = int(input())\n    T = []\n\n    for i in range(N):\n        T.append(int(input()))\n    \n    while len(T) > 1:\n        T_tmp = []\n        for i in range(1, len(T)):\n            tmp = lcm(T[i-1], T[i])\n            T_tmp.append(tmp)\n        T = T_tmp\n    \n    print(T[0])\n    \nif __name__==\"__main__\":\n    main()"}
{"label": 78, "index": 10041, "code": "N = int(input())\nTs = [int(input()) for i in range(N)]\n \n# \u6700\u5927\u516c\u7d04\u6570\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n \n# \u6700\u5927\u516c\u500d\u6570\ndef lcm(a, b):\n    return a * b // gcd (a, b)\n \ndef solve(Ts):\n    if len(Ts) == 1:\n        print(Ts[0])\n    \n    else:\n        Ts_temp = []\n        for i in range(len(Ts)-1):\n            Ts_temp.append(lcm(Ts[i], Ts[i+1]))\n        solve(Ts_temp)\n \nsolve(Ts)"}
{"label": 78, "index": 10042, "code": "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\nn = int(input())\n\nres = 1\nfor i in range(n):\n    a = int(input())\n    g = gcd(res, a)\n    res = (res // g) * a\n\nprint(res)\n"}
{"label": 78, "index": 10043, "code": "import fractions;n=int(input());g=int(input())\nfor i in range(n-1):t=int(input());g=g*t//fractions.gcd(g,t)\nprint(g)"}
{"label": 78, "index": 10044, "code": "def gcd(a,b) :\n\tif a % b == 0 :\n\t\treturn b\n\treturn gcd(b,a%b)\n\ndef lcm(a,b) :\n\treturn a // gcd(a,b) * b\n\nN = int(input())\nres = 1\nfor i in range(N) :\n\tres = lcm(res, int(input()))\nprint(res)\n"}
{"label": 78, "index": 10045, "code": "import fractions\n\nN = int(raw_input())\nT = [int(raw_input()) for _ in xrange(N)]\n\nans = 1\n\nfor i in T:\n    ans = ans / fractions.gcd(ans, i) * i\n\nprint ans"}
{"label": 78, "index": 10046, "code": "from collections import defaultdict\nfrom itertools import product, groupby\nfrom math import pi\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right\nINF = 10 ** 10\n\n\n# a\u3068b\u306e\u6700\u5927\u516c\u7d04\u6570\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\n# a\u3068b\u306e\u6700\u5c0f\u516c\u500d\u6570\ndef lcm(a, b):\n    g = gcd(a, b)\n    return a // g * b\n\n\ndef main():\n    N = int(input())\n    t_list = list(sorted([int(input()) for _ in range(N)]))\n    ans = 1\n    for t in t_list:\n        ans = lcm(ans, t)\n\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 78, "index": 10047, "code": "#! /usr/bin/env python3\n\n\ndef gcd(a, b):\n    if a < b : return gcd(b, a)\n    while b != 0:\n        t = a % b\n        a = b\n        b = t\n    return a\n\nN = int(input())\nT = sorted(set([int(input()) for x in range(N)]))\na = T[-1]\nfor i in T[:-1]:\n    a = (a * i) // gcd(a, i)\n\nprint(a)"}
{"label": 78, "index": 10048, "code": "N = int(input())\nresult = 1\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef lcm(a, b):\n    return (a * b) // gcd(a, b)\n\n\nfor i in range(0, N):\n    num = int(input())\n    result = lcm(result, num)\nprint(int(result))\n"}
{"label": 78, "index": 10049, "code": "from fractions import gcd\nn = int(raw_input())\na = []\nfor i in range(n):\n    a.append(int(raw_input()))\nresult = a[0]\nfor i in range(1, n):\n    result = result * a[i] / gcd(result, a[i])\nprint result\n"}
{"label": 78, "index": 10050, "code": "n = int(input().strip())\nts = []\nfor _ in range(n):\n    ts.append(int(input().strip()))\n\ndef gcd(m, n):\n    while 1:\n        mod = m % n\n        if mod == 0:\n            return n\n        m, n = n, mod\n\ndef lcm(m, n):\n    return m * n // gcd(m, n)\n\nfrom functools import reduce\n\nprint(reduce(lcm, ts))\n\n"}
{"label": 78, "index": 10051, "code": "def gcd(a, b):\n\tif b == 0:\n\t\treturn a\n\treturn gcd(b, a % b)\nn = int(input())\na = [int(input()) for i in range(n)]\nans = 1\nfor i in a:\n\tans = ans * i // gcd(ans, i)\nprint(ans)\n\n"}
{"label": 78, "index": 10052, "code": "def gcd(a, b):\n    \"\"\"\u6700\u5927\u516c\u7d04\u6570(Greatest Common divisor)\u3092\u6c42\u3081\u308b.\n\n    \u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u306e\u4e92\u9664\u6cd5\u306e\u5b9f\u88c5.\n    \u3042\u3042\u3042\u3042\n\n    Parameters\n    ----------\n    a : int\n        \u81ea\u7136\u6570.\n    b : int\n        \u81ea\u7136\u6570.\n\n    Returns\n    -------\n    int\n        \u6700\u5927\u516c\u7d04\u6570\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    \"\"\"\u6700\u5c0f\u516c\u7d04\u6570(least common multiple)\u3092\u6c42\u3081\u308b.\n\n    Parameters\n    ----------\n    a : int\n        \u81ea\u7136\u6570.\n    b : int\n        \u81ea\u7136\u6570.\n\n    Returns\n    -------\n    int\n        \u6700\u5c0f\u516c\u500d\u6570\n    \"\"\"\n    return a * b // gcd(a, b)\n\nN = int(input())\nT = []\nfor i in range(N):\n    T.append(int(input()))\nans = 1\nfor t in T:\n    ans = lcm(ans, t)\nprint(ans)"}
{"label": 78, "index": 10053, "code": "# -*- coding: utf-8 -*-\n\"\"\"\n\"\"\"\n# \n\ndef gcd(x, y):\n    if x < y:\n        temp = x\n        x = y\n        y = temp\n    while y > 0:\n        r = x % y\n        x = y\n        y = r\n    return x\n\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\n\ndef solve(clocks):\n    temp_lcm = clocks[0]\n    for n in clocks[1:]:\n        temp_lcm = lcm(temp_lcm, n)\n    return temp_lcm\n\n\ndef main():\n    N = int(input())\n    clocks = [int(input()) for _ in range(N)]\n    result = solve(clocks)\n    print(result)\n\n\nif __name__ == '__main__':\n    main()\n    \n"}
{"label": 78, "index": 10054, "code": "from fractions import gcd\n\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\nn = int(input())\nts = {int(input()) for _ in range(n)}\na = ts.pop()\nfor b in ts:\n    a = lcm(a, b)\nprint(a)\n"}
{"label": 78, "index": 10055, "code": "# -*- coding: utf-8 -*-\n\n\ndef gcd(m, n):\n    return m if n == 0 else gcd(n, m % n)\n\n\ndef lcm(m, n):\n    return m * n // gcd(m,n)\n\n\ndef main():\n    n = int(input())\n    t = []\n    for i in range(n):\n        tmp = int(input())\n        t.append(tmp)\n    ans = t[0]\n    for i in t:\n        ans = lcm(ans, i)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n"}
{"label": 78, "index": 10056, "code": "def lcm(a, b):\n    import fractions\n    return a * b // fractions.gcd(a, b)\n\ntotal = int(input())\nparam_list = [int(input()) for i in range(total)]\n\nresult = param_list[0]\nfor i in range(1, total):\n    result = lcm(result, param_list[i])\n\nprint(result)"}
{"label": 78, "index": 10057, "code": "#! -*- coding:utf-8 -*-\ndef gcd(a, b):\n    while b > 0:\n        a, b = b, a % b\n    return a\n \ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\nn = int(input())\nk = []\nfor i in range(n):\n    k.append(int(input()))\n\nif n == 1:\n    print(k[0])\nelse:\n    p = lcm(k[0],k[1])\n    for i in range(n):\n        p = lcm(p,k[i])\n    print(int(p))\n"}
{"label": 78, "index": 10058, "code": "def func(a,b):\n    return a if b==0 else func(b,a%b)\nn = int(input())\nnum = int(input())\nfor i in range(n-1):\n    d = int(input())\n    num = num*d//func(num,d)\nprint(num)"}
{"label": 78, "index": 10059, "code": "N=input()\nT = [input() for i in range(N)]\n#print T\n\ndef gcd(a, b):\n\twhile b:\n\t\ta, b = b, a % b\n\treturn a\n\n\ndef lcm(a, b):\n\treturn a * b // gcd (a, b)\n\n\nans=1\nfor i in range(len(T)):\n\tans=lcm(ans,T[i])\n\t#print \"ans::\"+str(ans)\n\nprint ans"}
{"label": 78, "index": 10060, "code": "n = int(input())\n\nlcm = 0\ngcd = 0\n\nfor i in range(n):\n    t = int(input())\n    if(i == 0):\n        lcm, gcd = t, t\n        continue\n    lcm = t\n    r = gcd % t\n    while(r!=0):\n        lcm = r\n        r = t % r\n    gcd *= t\n    gcd //= lcm\nprint(gcd)\n"}
{"label": 78, "index": 10061, "code": "n = int(input())\n\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\na, b = 1, 1\nfor i in range(n):\n    a = b\n    b = lcm(a, int(input()))\nprint(b)\n"}
{"label": 78, "index": 10062, "code": "import fractions\nN = int(input())\nlcm = 1\nfor i in range(N):\n    t = int(input())\n    lcm = lcm * t // fractions.gcd(lcm,t)\nprint(lcm)\n"}
{"label": 78, "index": 10063, "code": "from fractions import gcd\nfrom functools import reduce\n\ndef lcm(a, b):\n    return a*b // gcd(a, b)\n\nN = int(input())\nT = []\nfor _ in range(N):\n    T.append(int(input()))\nprint(reduce(lcm, T))"}
{"label": 78, "index": 10064, "code": "\nn = int(input())\nt = [ int(input()) for i in range(n)]\ndef gcd(a,b):\n    if a<b:a,b = b,a \n    if b==0:return a\n    else : return gcd(b,a%b)    \n\ndef lc(a,b):\n    return a //gcd(a,b) * b\n\ndef lcm(b):\n    ans = b[0]\n    for i in b:\n        ans = lc(ans,i)\n    return ans\nprint(lcm(t))\n\n"}
{"label": 78, "index": 10065, "code": "def gcd(a, b):\n\twhile b:\n\t\ta, b = b, a % b\n\treturn a\n\ndef lcm(a, b):\n\treturn a * b // gcd (a, b)\n\nnow = 0\ntime = int(input())\nfi = 1\nans = 1\nwhile now < time:\n    thi = int(input())\n    ans = lcm(ans, thi)\n    now += 1\nprint(ans)"}
{"label": 78, "index": 10066, "code": "def gcd(x, y):\n    if y==0:\n        return x\n    else:\n        return gcd(y, x%y)\n\ndef lcm(x, y):\n    return (x * y) // gcd(x, y)\n\nn = int(input())\na = [int(input()) for i in range(n)]\nr = 1\nfor i in a:\n    r = lcm(r, i)\nprint(r)\n"}
{"label": 78, "index": 10067, "code": "from sys import stdin\n\ndef gcd(a, b):\n  return a if b == 0 else gcd(b, a % b)\n  \ndef lcm(a, b):\n  return a * b // gcd(a,b)\n  \nN = int(input())\nT = [int(t) for t in stdin]\n\nanswer = 1\nfor t in T:\n  answer = lcm(answer, t)\n  \nprint(answer)"}
{"label": 78, "index": 10068, "code": "#coding=UTF-8\n#import math\nimport fractions\n\nN=int(input())\nans=1\nfor idx in range(0,N,1):\n    T=int(input())\n    ans=ans*T// fractions.gcd(ans,T)\n\nprint(ans)\n"}
{"label": 78, "index": 10069, "code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef lcm(a, b):\n    return a * b // gcd (a, b)\n\n\nif __name__ == '__main__':\n    N = int(input())\n    T = []\n    for i in range(N):\n        T.append(int(input()))\n    tmp = T[0]\n    for j in range(N - 1):\n        tmp = lcm(tmp, T[j+1])\n    print(tmp)\n"}
{"label": 78, "index": 10070, "code": "def gcd(x,y):\n    a=max(x,y)\n    b=min(x,y)\n    return b if a%b==0 else gcd(b,a%b)\ndef lcm(x,y):\n    return x*y//gcd(x,y)\n\nN=int(input())\nans=1\nfor _ in range(N):\n    ans=lcm(ans,int(input()))\nprint (ans)"}
{"label": 78, "index": 10071, "code": "def gcd(x,y):\n    if y==0:\n        return x\n    return gcd(y, x % y)\ng = 1\nfor i in xrange(int(raw_input())):\n    w = int(raw_input())\n    g = g * w / gcd(g, w)\nprint g\n"}
{"label": 78, "index": 10072, "code": "def euclid(a,b):\n\tif b == 0:\n\t\treturn a\n\telse:\n\t\treturn euclid(b,a % b)\n\t\t\nn = int(input())\nt = []\nfor i in range(n):\n\tx = int(input())\n\tt.append(x)\n\nfor i in range(0,n-1):\n\tt[i+1] = t[i] * t[i+1] // euclid(t[i],t[i+1])\n\nprint(int(t[n-1]))"}
{"label": 78, "index": 10073, "code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\nN = int(input())\n\nans = 1\nfor i in range(N):\n    ans = lcm(ans, int(input()))\n\nprint(ans)\n"}
{"label": 78, "index": 10074, "code": "n=input()\n\na=[0 for i in range(n)]\ndef gcd(num1,num2):\n    if num2 == 0:\n        return num1\n    else:\n        return gcd(num2,num1%num2)\n\ndef lcm(num1,num2):\n    tmp = gcd(num1,num2)\n    return num1*num2/tmp\n\nfor i in range(n):\n    a[i]=input()\nans=a[0]\nfor i in range(1,n):\n    ans=lcm(ans,a[i])\nprint ans"}
{"label": 78, "index": 10075, "code": "import math as m\nfrom functools import reduce\nn,T= int(input()),[]\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\nfor i in range(n):\n    T.append(int(input()))\ntmp = max(T)\nfor i in range(n):\n    if tmp % T[i] != 0:\n        tmp = T[i]//gcd(tmp, T[i])*tmp\n\nprint(tmp)\n\n"}
{"label": 78, "index": 10076, "code": "n = int(input())\nli = []\n\nfor i in range(n):\n    a = int(input())\n    li.append(a)\n    \ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nwhile len(li) > 1:\n    a = li[0]\n    b = li[1]\n    li.pop(1)\n    li.pop(0)\n    ans = a * b // gcd(a, b)\n    li.append(ans)\n\nprint(li[0])\n"}
{"label": 78, "index": 10077, "code": "#!/usr/local/bin/python3.5 -tt\n\nimport fractions\nimport random\nimport sys\n\nif __name__ == '__main__':\n    def _(f):\n        for l in f:\n            for i in l.split():\n                yield int(i)\n\n    g = _(sys.stdin)\n\n    N = next(g)\n\n    lcm = 1\n\n    for i in range(N):\n        T = next(g)\n\n        lcm = lcm * T // fractions.gcd(lcm, T)\n\n    print(lcm)\n"}
{"label": 78, "index": 10078, "code": "def gcd(a,b):\n\tif b==0:return a\n\treturn gcd(b,a%b)\nans=1\t\nfor i in range(int(input())):\n\th=int(input())\n\tans = ans*h // gcd(ans,h)\t\nprint(ans)\t"}
{"label": 78, "index": 10079, "code": "def __gcd(x,y):\n    while(y!=0):\n        x,y=y,x%y\n    return x\n\ndef __lcm(x,y):\n    g = __gcd(x,y)\n    return (x//g)*y\n\n\nn = int(input())\nL = []\nfor i in range(n):\n    L.append(int(input()))\n\n#print(L)\na = L[0]\nfor i in range(1,n):\n    a = __lcm(a,L[i])\n\nprint(a)\n"}
{"label": 78, "index": 10080, "code": "def gcd(a,b):\n    if(a == 0):\n        return b\n    else:\n        return gcd(b % a, a)\n    \ndef lcmm(l,m):\n\n    prod = l * m\n\n    gcD = gcd(l,m)\n\n    return (prod // gcD)\n\nn = int(input().strip())\n\nlcm = 1\nfor i in range(n):\n    num = int(input().strip())\n    lcm = lcmm(lcm,num)\n    #print(lcm)\n\nprint(lcm)\n    \n"}
{"label": 78, "index": 10081, "code": "def gcd(a, b):\n    return b if a % b == 0 else gcd(b, a % b)\n\nN = input()\nT = [input() for i in range(N)]\nans = 1\nfor i in range(N):\n    v = gcd(max(ans, T[i]), min(ans, T[i]))\n    ans = ans * (T[i] / v)\nprint ans"}
{"label": 78, "index": 10082, "code": "def gcd(a, b):\n  while b:\n    a, b = b, a % b\n  return a\ndef lcm(a,b):\n  return a*b//gcd(a,b)\n\nN=int(input())\nT=[int(input()) for i in range(N)]\nT.sort()\nG=T[0]\nfor i in range(N):\n  G=lcm(G,T[i])\nprint(G)"}
{"label": 78, "index": 10083, "code": "# -*- coding: utf-8 -*-       \n\nn = int(input())\nt = [int(input()) for i in range(n)]\n\n\ndef gcd(a, b):\n\twhile b:\n\t\ta, b = b, a % b\n\treturn a\n\ndef lcm(a, b):\n\treturn a * b // gcd (a, b)\n\ntmplcm = t[0]\nfor i in range(1,n):\n    tmplcm = lcm(tmplcm,t[i])\nprint(tmplcm)"}
{"label": 78, "index": 10084, "code": "def gcd(a, b):\n    while b > 0:\n        a, b = b, a % b\n    return a\n\n\ndef lcm(a, b):\n    return a*b//gcd(a, b)\n\n\nN = int(input())\nT = [int(input()) for i in range(N)]\n\nT.sort(reverse=True)\nans = 1\nfor i in T:\n    ans = lcm(ans, i)\nprint(ans)\n"}
{"label": 78, "index": 10085, "code": "from fractions import gcd\n\nN = int(input())\nT = []\nfor i in range(N):\n  T.append(int(input()))\n\nres = 1\nfor t in T:\n  res = res // gcd(res, t) * t\nprint(res)"}
{"label": 78, "index": 10086, "code": "def gcd(a,b):\n    if b==0:return a\n    return gcd(b,a%b)\ndef lcm(a,b):\n    return a*b/gcd(a,b)\nn=int(raw_input())\nans=-1\nwhile n>0:\n    n-=1\n    if ans==-1:\n        ans=int(raw_input())\n    else:\n        x=int(raw_input())\n        ans=lcm(ans,x)\nprint ans\n"}
{"label": 78, "index": 10087, "code": "from functools import reduce\n\n#def gcd(a, b):\n#    while b:\n#        a, b = b, a % b\n#    return a\n\ndef gcd(m, n):\n    r = m % n\n    return gcd(n, r) if r else n\n\ndef lcm(a, b):\n    return a * b // gcd(a,b)\n\nN = int(input())\nTs = []\nc = 1\nfor i in range(N):\n    c = lcm(c, int(input()))\n\nprint(int(c))\n"}
{"label": 78, "index": 10088, "code": "def main():\n    N = int(input())\n    T = tuple(int(input()) for _ in range(N))\n\n    lcm_ = T[0]\n    for i in T:\n        lcm_ = lcm(i, lcm_)\n\n    print(lcm_)\n\ndef gcd(a, b):\n    if a < b:\n        a, b = b, a\n    r = a % b\n    if r == 0:\n        return b\n    else:\n        a = b\n        b = r\n        return gcd(a, b)\n\ndef lcm(a, b):\n    c = gcd(a, b)\n    return a * b // c\n\nmain()\n"}
{"label": 78, "index": 10089, "code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n#def gcd(m, n):\n#    r = m % n\n#    return gcd(n, r) if r else n\n\ndef lcm(a, b):\n    return a * b // gcd(a,b)\n\nN = int(input())\nTs = []\nc = 1\nfor i in range(N):\n    c = lcm(c, int(input()))\n\nprint(int(c))\n"}
{"label": 78, "index": 10090, "code": "def gcd(m,n):\n  if n == 0:\n    return m\n  else:\n    r = m % n\n    return gcd(n,r)\n  \ndef LCM(num1,num2):\n  return (num1/gcd(num2,num1))*num2\n\nN = input()\nl = []\nfor i in range(N):\n  l.append(input())\nl.sort()\nlcm = l[N-1]\nfor i in range(N-1):\n  lcm = LCM(l[N-2-i],lcm)\nprint lcm"}
{"label": 78, "index": 10091, "code": "def gcd(a, b):\n\twhile b:\n\t\ta, b = b, a%b\n\treturn a\ndef lcm(a, b):\n\treturn a*b // gcd(a, b)\nn = int(input())\nls = []\nfor i in range(n):\n    ls.append(int(input()))\nresult = ls[0]\nfor i in ls[1:]:\n    result = lcm(i,result)\nprint(result)\n\n"}
{"label": 78, "index": 10092, "code": "def Q3(x):\n    def gcd(a, b):\n        if b > a:\n            a, b = b, a\n        while b > 0:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return (a * b) // gcd(a, b)\n\n    N = x[0]\n    lst = x[1:]\n    if N == 1:\n        return lst[0]\n    else:\n        l = lcm(lst[0], lst[1])\n        for x in lst:\n            l = lcm(l, x)\n        return l\n\nn = int(input())\nt = [int(input()) for i in range(n)]\nt.insert(0,n)\nprint(Q3(t))"}
{"label": 78, "index": 10093, "code": "from fractions import gcd\n\nN = int(input())\nT = []\nfor i in range(N):\n    T.append(int(input()))\n# \u6700\u5c0f\u516c\u500d\u6570\u304c\u6b32\u3057\u3044\nans = 1\nfor i in T:\n    ans = int(ans * i //gcd(ans, i))\nprint(ans)\n"}
{"label": 78, "index": 10094, "code": "import fractions\n\ndef lcm(x,y):\n    return x*y//fractions.gcd(x,y);\n\nn = int(input())\nans = 1\nfor _ in range(n):\n    t = int(input())\n    ans = lcm(ans,t)\n\nprint(ans)\n"}
{"label": 78, "index": 10095, "code": "N=int(input())\nT=[]\nfor i in range(N):\n    T.append(int(input()))\ndef gcd(a,b):\n    if b>a:\n        a,b=b,a\n    while b>0:\n        a,b=b,a%b\n    return a\ndef lcm(a,b):\n    return a*b//gcd(a,b)\nif N==1:\n    print(T[0])\nelif N==2:\n    print(lcm(T[0],T[1]))\nelse:\n    l=[T[0]]\n    for i in range(N-1):\n      l.append(lcm(l[i],T[i+1]))\n    print(l[-1])"}
{"label": 78, "index": 10096, "code": "\ndef gcd(a, b):\n    if a < b:\n        c = a\n        a = b\n        b = c\n\n    r = a % b\n\n    while r > 0:\n        a = b\n        b = r\n        r = a % b\n\n    return b\n\n    # ll gcd(ll a, ll b) {\n    #   if (a < b)\n    #     swap(a, b);\n    #   ll r = a % b;\n    #\n    #   while (r) {\n    #     a = b;\n    #     b = r;\n    #     r = a % b;\n    #   }\n    #\n    #   return b;\n    # }\n\n\nN = int(input())\na = []\nfor i in range(N):\n    a.append(int(input()))\n# a = list(map(int, input().split()))\n\nans = a[0]\n\nfor i in range(N):\n    if i == 0:\n        continue\n\n    g = gcd(ans, a[i])\n    ans = ans * a[i] // g\n\nprint(ans)\n"}
{"label": 78, "index": 10097, "code": "\nfrom functools import reduce\n\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n\n    return a\n\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\ndef main():\n    n = int(input())\n\n    ts = []\n    for _ in range(n):\n        ts.append(int(input()))\n\n    print(reduce(lcm, ts))\n\n\nif __name__ == \"__main__\":\n    main()\n"}
{"label": 78, "index": 10098, "code": "# -*- coding: utf-8 -*-\nfrom functools import reduce\nN = int(input())\nary = []\nfor i in range(N):\n    tmp = input()\n    ary.append(int(tmp))\n\n\ndef GCD(a, b):\n    if a < b:\n        a, b = b, a\n\n    while b > 0:\n        a, b = b, a % b\n    return a\n\n\ndef LCM(a, b):\n    return a * b // GCD(a, b)\n\n\nprint(reduce(LCM, ary))\n"}
{"label": 78, "index": 10099, "code": "def gcd(a, b):\n\twhile b:\n\t\ta, b = b, a % b\n\treturn a\n\ndef lcm(a, b):\n\treturn a * b // gcd (a, b)\n\nn = int(input())\nl = int(input())\n\ni = 1\n\nwhile i < n:\n    l = lcm(l, int(input()))\n    i = i + 1\n\nprint(l)\n"}
{"label": 78, "index": 10100, "code": "from functools import reduce\n\ndef gcd(a, b):\n  if b == 0:\n    return a\n  return gcd(b, a%b)\n\ndef lcm(a, b):\n  return a * b // gcd(a, b)\n\nn = int(input())\nt = [int(input()) for i in range(n)]\n\nans = reduce(lcm, t)\nprint(ans)"}
{"label": 78, "index": 10101, "code": "def calc(A,B):\n    C = A * B\n    while B != 0:\n        A,B = B, A % B\n    return C // A\n    \nN = int(input())\nans = 1\nfor i in range(N):\n    ans = calc(ans, int(input()))\nprint(ans)\n\n"}
{"label": 78, "index": 10102, "code": "def pgcd(a,b):\n  while b:\n    a,b = b,a%b\n  return a\n\nret = 1\nN = int(input())\nfor _ in range(N):\n  T = int(input())\n  p = pgcd(ret,T)\n  ret *= (T//p)\n\nprint(ret)"}
{"label": 78, "index": 10103, "code": "import sys\n\nstdin = sys.stdin\n\nni = lambda: int(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nns = lambda: stdin.readline()\n\ndef gcd(a, b):\n    while(b > 0):\n        c = a % b\n        a = b; b = c\n    return a\n\nn = ni()\ng = 0\nfor i in range(n):\n    v = ni()\n    if g == 0:\n        g = v\n    else:\n        g = g//gcd(g,v)*v\nprint(g)"}
{"label": 78, "index": 10104, "code": "n = int(input())\n\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a%b\n    return a\n\ndef lcm(a, b):\n    return a*b // gcd(a, b)\n\nans = 1\n\nfor _ in range(n):\n    ans = lcm(ans, int(input()))\n\nprint(ans)\n"}
{"label": 78, "index": 10105, "code": "def gcd(*numbers):\n    \"\"\"Return the greatest common divisor of the given integers\"\"\"\n    from fractions import gcd\n    return reduce(gcd, numbers)\n\n# Least common multiple is not in standard libraries? It's in gmpy, but this is simple enough:\n\ndef lcm(*numbers):\n    \"\"\"Return lowest common multiple.\"\"\"    \n    def lcm(a, b):\n        return (a * b) // gcd(a, b)\n    return reduce(lcm, numbers, 1)\nl = []\nfor x in range(int(raw_input())):\n\tl.append(int(raw_input()))\nans = 1\nfor x in l:\n\tans = lcm(ans,x)\nprint(ans)"}
{"label": 78, "index": 10106, "code": "import sys\nfrom collections import deque\nimport copy\n\nfrom math import *\ndef get_read_func(fileobject):\n    if fileobject == None :\n        return raw_input\n    else:\n        return fileobject.readline\n\ndef gcd(a, b):\n    if a < b:\n        z = a\n        a = b\n        b = z\n    while b:\n\t\ta, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd (a, b)\n\ndef main():\n    if len(sys.argv) > 1:\n        f = open(sys.argv[1])\n    else:\n        f = None\n    read_func = get_read_func(f);\n    input_raw = read_func().strip().split()\n    [N] = [int(input_raw[0])]\n    T = []\n    for i in range(N):\n        input_raw = read_func().strip().split()\n        T.append(int(input_raw[0]))\n\n    T.sort()\n\n    lcm_data = T[0]\n    for i in range(1, N):\n        lcm_data = lcm(lcm_data, T[i])\n    print lcm_data\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 78, "index": 10107, "code": "N = int(input())\n\ndef lcm(x, y):\n    M = x * y\n    if x < y:\n        x, y = y, x\n    while y > 0:\n        x, y = y, x % y\n    return M // x\nnum = []\nfor _ in range(N):\n    num.append(int(input()))\nM = num[0]\nfor i in range(N):\n    M = lcm(M, num[i])\nprint(M)\n"}
{"label": 78, "index": 10108, "code": "def gcd(a,b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n    \nN = int(input())\n \na = int(input())\nb = 0\nfor i in range(N-1):\n    b = int(input())\n    a = (a*b) // gcd(a,b)\n    \nprint(a)"}
{"label": 78, "index": 10109, "code": "N = int(input())\nfrom fractions import gcd\nfrom functools import reduce\n\ndef lcm(a, b): \n    return abs(a * b) // gcd(a,b)\nI = [int(input()) for n in range(N)]\nprint(int(reduce(lcm, I, 1)))"}
{"label": 78, "index": 10110, "code": "def gcd(m, n):\n    r = m % n\n    return gcd(n, r) if r else n\ndef lcm(m, n):\n    return m*n//gcd(m, n)\nn = int(input())\nans = 1\nfor i in range(n):\n    ans = lcm(ans, int(input()))\nprint(\"%d\" % ans)\n"}
{"label": 78, "index": 10111, "code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\n\nn = int(input())\nn_set = set([])\n\nfor i in range(n):\n    tmp = int(input())\n    n_set.add(tmp)\n\nans = 1\nfor i in range(len(list(n_set))):\n    ans = lcm(ans, list(n_set)[i])\n\nprint(ans)\n"}
{"label": 78, "index": 10112, "code": "def gcd(a,b):\n    if b==0:\n        return(a)\n    else:\n        return(gcd(b,a%b)) \ndef lcm(a,b):\n    return a*b//gcd(a,b)\n\nn=int(input())\ncur=0\nif n==1:\n    cur=int(input())\nelse:\n    cur=lcm(int(input()),int(input()))\n    for _ in range(n-2):\n        cur = lcm(int(input()),cur)\nprint(cur)\n"}
{"label": 78, "index": 10113, "code": "\ndef gcd(x, y):\n    while y != 0:\n        x, y = y, x % y\n    return x\n\nN = int(input())\nT = []\nfor i in range(N):\n    T.append(int(input()))\n\nS = set(T)\nres = 1\nfor j in S:\n    res = res * j // gcd(res, j)\n    \nprint(int(res))\n"}
{"label": 78, "index": 10114, "code": "#Multiple Clocks\nN = int(input())\n\nT = []\nfor i in range(N):\n    T.append(int(input()))\n\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a    \n\ndef lcm(a, b):\n    return a * b // gcd (a, b)\n\na = T[0]\n\nfor Ti in T[1:]:\n    a = lcm(a, Ti)\n\nprint(a)\n    "}
{"label": 78, "index": 10115, "code": "#ABC070C\n\ndef gcd(a, b):\n while b:\n  a, b = b, a % b\n return a\n\ndef lcm(a, b):\n return a * b // gcd (a, b)\n\nn=int(raw_input())\nres=1\nfor i in xrange(n):\n temp=int(raw_input())\n res=lcm(res,temp)\nprint res\n"}
{"label": 78, "index": 10116, "code": "import decimal\n\n\ndef euclid(a, b):\n    if b == 0:\n        return a\n    else:\n        return euclid(b, a % b)\n\n\ndef lcm(a, b):\n    g = euclid(a, b)\n    # print(g)\n    # print(a * b)\n\n    return a * b // g\n\n\nif __name__ == '__main__':\n    N = int(input())\n    ans = 1\n    for i in range(N):\n        T = int(input())\n        ans = lcm(ans, T)\n\n    print(ans)\n"}
{"label": 78, "index": 10117, "code": "from fractions import gcd\ndef lcm(a,b): return a*b//gcd(a,b)\n\nn = int(input())\nres = 1\nfor i in range(n):\n    t = int(input())\n    res = lcm(res, t)\nprint(res)"}
{"label": 78, "index": 10118, "code": "def gcd(x, y):\n    while y != 0:\n        x, y = y, x%y\n    return x\n    \ndef lcm(x, y):\n    return x * y // gcd(x, y)\n    \nN = int(input())\nT = []\nfor i in range(N):\n    T.append(int(input()))\ntemp = T[0]\nfor i in range(N-1):\n    temp = lcm(temp, T[i+1])\nprint(temp)"}
{"label": 78, "index": 10119, "code": "n = int(input())\nli = []\n \nfor i in range(n):\n    a = int(input())\n    li.append(a)\n    \ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n \nwhile len(li) > 1:\n    a = li[0]\n    b = li[1]\n    li.pop(1)\n    li.pop(0)\n    ans = a * b // gcd(a, b)\n    li.append(ans)\n \nprint(li[0])"}
{"label": 78, "index": 10120, "code": "def gcd(a,b):\n    while b > 0:\n        r = a % b\n        a = b\n        b = r\n    return a\n\nn = int(input())\nx = int(input())\nfor _ in range(n-1):\n    i = int(input())\n    x = (x * i) // gcd(x,i)\n\nprint(x)\n"}
{"label": 78, "index": 10121, "code": "N = int(raw_input())\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\nT = int(raw_input())\nif N == 1:\n    print T\nelse:\n    f = T\n    for i in xrange(1, N):\n        T = int(raw_input())\n        g = gcd(f, T)\n        f = f / g * T\n    print f"}
{"label": 78, "index": 10122, "code": "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\nn = int(input())\nt = [int(input()) for i in range(n)]\n\n\nfor i in range(n - 1):\n    t[i + 1] = t[i] * t[i + 1] // gcd(t[i], t[i + 1])\n\nprint(t[n - 1])\n"}
{"label": 78, "index": 10123, "code": "N=int(input())\narr=[]\nfor a in range(N):\n    a=int(input())\n    if a in arr:\n        continue\n    arr.append(a)\n\ndef gcf(a,b):\n    if b==0:return a\n    return gcf(b,a%b)\ndef lcm(a,b):\n    return a*b//gcf(a,b)\n\ntemp=1\nfor i in range(len(arr)):\n    temp=lcm(temp,arr[i])\nprint(temp)"}
{"label": 78, "index": 10124, "code": "\ndef ggt(a, b):\n    if b == 0:\n        return a\n\n    return ggt(b, a % b)\n\nN = int(input())\n\nerg = int(input())\n\nfor i in range(N-1):\n    t = int(input())\n\n    g = ggt(erg, t)\n    erg = (erg // g) * t\n\nprint(erg)"}
{"label": 78, "index": 10125, "code": "def gcd(a,b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b,a%b)\n\ndef lcm(a,b):\n    g = gcd(a,b)\n    return (a * b) // g\n\nN = int(input())\n\nresult = 1\nfor i in range(N):\n    result = lcm(result,int(input()))\n\nprint(result)\n"}
{"label": 78, "index": 10126, "code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n \ndef lcm(a, b):\n    return a * b // gcd(a,b)\nN=int(input())\nTs=[]\nc=1\nfor i in range(N):\n c=lcm(c,int(input()))\nprint(int(c))"}
{"label": 78, "index": 10127, "code": "N = int(input())\nT = []\nfor _ in range(N):\n    T.append(int(input()))\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a%b\n    return a\n\ntmp = max(T)\nfor i in range(N):\n    if tmp % T[i] != 0:\n        tmp = T[i]//gcd(tmp, T[i])*tmp\n\nprint(int(tmp))"}
{"label": 78, "index": 10128, "code": "import fractions\n\ndef lcm(a,b):\n    g = fractions.gcd(a,b)\n    return (a * b)//g\n\nn = int(input())\n\nans = 1\nfor i in range(n):\n    t = int(input())\n    ans = lcm(ans,t)\n\nprint(ans)"}
{"label": 78, "index": 10129, "code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n \ndef lcm(a, b):\n    return a * b // gcd(a,b)\n \nN = int(input())\nTs = []\nc = 1\nfor i in range(N):\n    c = lcm(c, int(input()))\n \nprint(int(c))\n"}
{"label": 78, "index": 10130, "code": "def gcd(a, b):\n    while b:\n        a, b = b, a%b\n    return a\n\ndef lcm(a, b):\n    return a*b/gcd(a, b)\n\nN = int(raw_input())\nT = [int(raw_input()) for i in xrange(N)]\n\nprint reduce(lcm, T)\n"}
{"label": 78, "index": 10131, "code": "import fractions\n        \ndef lcm(a, b):\n    return a * b // fractions.gcd(a, b)\n\nn = int(input())\n\nans = 1\nfor i in range(n):\n    ans = lcm(ans, int(input()))\n\nprint(ans)"}
{"label": 78, "index": 10132, "code": "N = int(input())\nT = [int(input()) for _ in range(N)]\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\nl = 1\n\nfor i in T:\n    l = lcm(l, i)\n\nprint(l)"}
{"label": 78, "index": 10133, "code": "\nN = int(input())\nTs = [int(input()) for i in range(N)]\n\n# \u6700\u5927\u516c\u7d04\u6570\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n# \u6700\u5927\u516c\u500d\u6570\ndef lcm(a, b):\n    return a * b // gcd (a, b)\n\ndef solve(Ts):\n    if len(Ts) == 1:\n        print(Ts[0])\n    \n    else:\n        Ts_temp = []\n        for i in range(len(Ts)-1):\n            Ts_temp.append(lcm(Ts[i], Ts[i+1]))\n        solve(Ts_temp)\n\nsolve(Ts)"}
{"label": 78, "index": 10134, "code": "from fractions import gcd\n \ndef lcm(a, b):\n    return a * b // gcd (a, b)\n\ndef nlcm(nums):\n    d = 1\n    for num in nums:\n        d = lcm(d,num)\n    return d\n \nif __name__ == '__main__':\n    N = int(input())\n    nums = []\n    for i in range(N):\n        nums.append(int(input()))\n \n    print(nlcm(nums))"}
{"label": 78, "index": 10135, "code": "import sys\n\ndef scp(a, b):\n    if b > a:\n        tmp_a = a\n        a = b\n        b = tmp_a\n    while b:\n        r = a % b\n        a = b\n        b = r\n    return a\n    #for i in xrange(100000, 2, -1):\n    #    if a % i == b % i == 0:\n    #        return a * b / i\n    #return a * b\n\nN = int(raw_input())\narray = []\nfor i in range(N):\n    array.append(int(raw_input()))\n\narray.sort()\n\n#if array[-1] > pow(10, 9):\n#    print array[-1]\n#    sys.exit(0)\n\nresult = array[0]\nfor i in array[1:]:\n    result = result / scp(result, i) * i\nprint result"}
{"label": 78, "index": 10136, "code": "# -*- coding:utf-8 -*-\ndef euc(a,b):\n    if b == 0:\n        return a\n    else:\n        return euc(b, a%b)\n\nN = int(input())\nT = [ int(input()) for tmp in range(N) ]\nif len(T) > 1:\n    a = T.pop()\n    b = T.pop()\n    lcm = a*b//euc(a,b)\n    for tmp in T:\n        lcm = tmp*lcm//euc(tmp,lcm)\n    print(lcm)\nelse:\n    print(T.pop())"}
{"label": 78, "index": 10137, "code": "n = int(input())\nres = 1\ndef gcd(x, y):\n    if x % y == 0:\n        return y\n    return gcd(y, x %y)\nfor i in range(n):\n    x = int(input())\n    res = res * x // gcd(res, x)\nprint(res)\n"}
{"label": 78, "index": 10138, "code": "from fractions import gcd\nn = int(input())\nx = 1\n\nfor i in range(n):\n  t = int(input())\n  g = gcd(t,x)\n  t //= g\n  x *= t\n\nprint(x)"}
{"label": 78, "index": 10139, "code": "import fractions\nn = int(raw_input())\nt = list()\nfor _ in range(n):\n    t.append(int(raw_input()))\nresult = t[0]\nfor i in range(1, n):\n    result = ((t[i] * result) / fractions.gcd(t[i], result))\nprint(result)\n"}
{"label": 79, "index": 10140, "code": "import math\nx,a,b = map(int,input().split())\nif (abs(x-a)>abs(x-b)):\n    print(\"B\")\nelse:\n    print(\"A\")\n\n"}
{"label": 79, "index": 10141, "code": "x, a, b = [int(x) for x in input().split()]\n\nif abs(x-a) < abs(x-b):\n    print('A')\nelse:\n    print('B')\n"}
{"label": 79, "index": 10142, "code": "x,a,b = map(int, raw_input().split())\nif abs(x-a) < abs(x-b):\n    print 'A'\nelse:\n    print 'B'\n"}
{"label": 79, "index": 10143, "code": "location_list = list(map(int, input().split()))\n\nax_length = abs(location_list[0] - location_list[1])\nbx_length = abs(location_list[0] - location_list[2])\n\nif ax_length < bx_length:\n    print('A')\nelse:\n    print('B')\n"}
{"label": 79, "index": 10144, "code": "import math\n\n\nx = list(map(int, input().split()))\n\nif(math.fabs(x[1]-x[0])-math.fabs(x[2]-x[0]) > 0):\n    print('B')\n    quit()\nelse:\n    print('A')\n    quit()\n\n\nquit()"}
{"label": 79, "index": 10145, "code": "\nx,a,b = list(map(int,input().strip().split()))\n\n\ndisA = abs(x-a)\ndisB = abs(x-b)\n\nres = 'A' if disA<disB else 'B'\nprint(res)\n"}
{"label": 79, "index": 10146, "code": "import numpy as np\n\nl = map(int, raw_input().split())\nx=l[0]\na=l[1]\nb=l[2]\n\np=abs(x-a)\nq=abs(x-b)\n\nif(p<=q):\n    print \"A\"\nelse:\n    print \"B\"\n\n"}
{"label": 79, "index": 10147, "code": "x, a, b = (int(i) for i in input().split())\nif abs(x-a) < abs(x-b):\n    print('A')\nelse:\n    print('B')"}
{"label": 79, "index": 10148, "code": "x,a,b=map(int,input().split())\nA=abs(x-a)\nB=abs(x-b)\nif A<B: print(\"A\")\nelse: print(\"B\")"}
{"label": 79, "index": 10149, "code": "x, a, b = map(int, input().split())\nprint('A' if abs(x-a)<abs(x-b) else 'B')"}
{"label": 79, "index": 10150, "code": "x, a, b = map(int, input().split())\nif abs(a-x) < abs(x-b):\n\tprint(\"A\")\nelse:\n\tprint(\"B\")\n"}
{"label": 79, "index": 10151, "code": "x, a, b = map(int, input().split())\nprint('A' if abs(x-a)<abs(x-b) else 'B')\n"}
{"label": 79, "index": 10152, "code": "x, a, b = map(int, input().split(' '))\n\nprint(\"A\" if abs(a-x) < abs(b-x) else \"B\")\n"}
{"label": 79, "index": 10153, "code": "x, a, b = map(int, input().split())\nprint(\"A\" if abs(x-a) < abs(x-b) else \"B\")\n"}
{"label": 79, "index": 10154, "code": "x, a, b = map(int, input().split())\nif (abs(a - x) < abs(b - x)):\n    print(\"A\")\nelse:\n    print(\"B\")\n"}
{"label": 79, "index": 10155, "code": "# -*- coding:utf-8 -*-\n\nx,a,b = map(float,input().split())\n\nif(abs(x-a)<abs(x-b)):\n    print(\"A\")\nelse:\n    print(\"B\")\n\n"}
{"label": 79, "index": 10156, "code": "x, a, b = [int(x) for x in input().strip().split()]\n\nif abs(x-a) < abs(x-b):\n    print(\"A\")\nelse:\n    print(\"B\")"}
{"label": 79, "index": 10157, "code": "def main():\n    x, a, b = map(int, input().split())\n    if abs(x - a) < abs(x - b):\n        print(\"A\")\n    else:\n        print(\"B\")\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 79, "index": 10158, "code": "\nx,a,b = map(float, input().split())\n\nprint(\"AB\"[abs(x-a) > abs(x-b)])\n"}
{"label": 79, "index": 10159, "code": "x, a, b = map(int, input().split())\nif abs(x - a) < abs(x - b):\n    print (\"A\")\nelse:\n    print (\"B\")\n"}
{"label": 79, "index": 10160, "code": "x,a,b = map(int, input().split())\na=abs(x-a)\nb=abs(b-x)\nprint(\"A\" if a < b else \"B\")"}
{"label": 79, "index": 10161, "code": "# -*- coding: utf-8 -*-\n\"\"\"\n\"\"\"\n# \n\n\ndef main():\n    x, a, b = [int(x) for x in input().split(' ')]\n    dist_A = abs(x - a)\n    dist_B = abs(x - b)\n    if dist_A > dist_B:\n        print('B')\n    else:\n        print('A')\n\n\nif __name__ == '__main__':\n    main()\n    "}
{"label": 79, "index": 10162, "code": "X,A,B = [int(i) for i in input().split()]\nif abs(A-X) <= abs(B-X):\n    print(\"A\")\nelse:\n    print(\"B\")\n"}
{"label": 79, "index": 10163, "code": "import math\n\nx,a,b=list(map(int,input().split()))\nif(math.fabs(x-a)>math.fabs(x-b)):\n    print(\"B\")\nelse:\n    print(\"A\")"}
{"label": 79, "index": 10164, "code": "print((lambda x:\"A\" if abs(x[0]-x[2]) > abs(x[0]-x[1]) else \"B\")([int(i) for i in input().split()]))"}
{"label": 79, "index": 10165, "code": "x,a,b = map(int,input().split())\nif abs(x - a) < abs(x - b):\n    print(\"A\")\nelse:\n    print(\"B\")"}
{"label": 79, "index": 10166, "code": "x,a,b=map(int,input().split())\na=abs(x-a)\nb=abs(x-b)\nif a>b: print(\"B\")\nelse: print(\"A\")"}
{"label": 79, "index": 10167, "code": "x, a, b = map(int, input().split())\nif (x-a)**2 > (x-b)**2:\n  print(\"B\")\nelse:\n  print(\"A\")"}
{"label": 79, "index": 10168, "code": "x, a, b = map(int, input().split())\nif abs(x - a) < abs(x - b):\n    print(\"A\")\nelif abs(x - a) > abs(x - b):\n    print(\"B\")\n"}
{"label": 79, "index": 10169, "code": "xab=(input()).split(' ')\nprint('A' if abs((int)(xab[0])-(int)(xab[1]))< abs((int)(xab[0])-(int)(xab[2]))else 'B')"}
{"label": 79, "index": 10170, "code": "x,a,b=map(int,input().split());print('AB'[(2*x>a+b)^(a>b)])"}
{"label": 79, "index": 10171, "code": "x, a, b = map(int, input().split())\t\t# 5 7 2\n\n\nif abs(a-x) < abs(b-x):\n\tprint(\"A\")\nelse:\n\tprint(\"B\")\n"}
{"label": 79, "index": 10172, "code": "def read_line(*types): return [f(a) for a, f in zip(input().split(), types)]\n\nx, a, b = read_line(int, int, int)\n\nprint('A' if abs(x - a) < abs(x - b) else 'B')\n"}
{"label": 79, "index": 10173, "code": "a = list(map(int, input().split()))\nif abs(a[0] - a[1]) > abs(a[0] - a[2]):\n    print(\"B\")\nelse:\n  \tprint(\"A\")"}
{"label": 79, "index": 10174, "code": "x,a,b=[int(x) for x in input().split()]\nif abs(a-x) > abs(b-x):\n\tprint(\"B\")\nelse:\n\tprint('A')"}
{"label": 79, "index": 10175, "code": "x,a,b=map(int,input().split())\nprint('AB'[abs(x-a)>abs(x-b)])"}
{"label": 79, "index": 10176, "code": "x,a,b = map(int,input().split())\n\nif abs(x-a) > abs(x-b):\n    print(\"B\")\nelse:\n    print(\"A\")\n"}
{"label": 79, "index": 10177, "code": "x,a,b= map(int, input().split())\nif abs(x-a) < abs(x-b):\n    print(\"A\")\nelse:\n    print(\"B\")"}
{"label": 79, "index": 10178, "code": "# -*- coding: utf-8 -*-\nx, a, b = map(int, input().split(' '))\n\nif abs(x - a) < abs(x - b):\n    print(\"A\")\nelse:\n    print(\"B\")"}
{"label": 79, "index": 10179, "code": "# Meal Delivery\nx,a,b, = list(map(int, input().split()))\n\nif ( abs(a-x) < abs(b-x) ):\n    print(\"A\")\nelse:\n    print(\"B\")"}
{"label": 79, "index": 10180, "code": "x, a, b = map(int, input().split())\nif abs(x - a) < abs(x - b):\n    print('A')\nelse:print('B')\n"}
{"label": 79, "index": 10181, "code": "import math\n#x a b\u3092\u8a2d\u5b9a\u3059\u308b\nx,a,b = map(int,input().split())\n#x \u304b\u3089a\u307e\u3067\u306e\u8ddd\u96e2\u3068x\u304b\u3089b\u307e\u3067\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\u3059\u308b\n\na_distant = a - x\nb_distant = b - x\nif a_distant < 0:\n    a_distant = a_distant*(-1)\nif b_distant < 0:\n    b_distant = b_distant*(-1)\n#a\u307e\u3067\u3068b\u307e\u3067\u3092\u6bd4\u8f03\u3057\u3066\u77ed\u3044\u65b9\u3092\u51fa\u529b\u3059\u308b\nif a_distant > b_distant:\n    print(\"B\")\nelse:\n    print(\"A\")"}
{"label": 79, "index": 10182, "code": "x, a, b = [int(i) for i in input().split()]\nif abs(a-x) < abs(b-x):\n  print(\"A\")\nelse:\n  print(\"B\")"}
{"label": 79, "index": 10183, "code": "x,a,b=list(map(int,input().split()))\nif abs(x-a) > abs(x-b):\n    print(\"B\")\nelse:\n    print(\"A\")"}
{"label": 79, "index": 10184, "code": "x,a,b = map(int,input().split(' '))\n\nif abs(x-a) > abs(x-b):\n    print('B')\nelse:\n    print('A')"}
{"label": 79, "index": 10185, "code": "def solve(): # 071A - Meal Delivery\n    x, A, B = list(map(int, input().split(\" \")))\n    da = abs(x - A)\n    db = abs(x - B)\n    if da > db:\n        print(\"B\")\n    else:\n        print(\"A\")\n\n\nsolve()"}
{"label": 79, "index": 10186, "code": "x,a,b = list(map(int, input().split()))\nif abs(x - a) > abs(x - b):\n    print (\"B\")\nelse:\n    print (\"A\")\n"}
{"label": 79, "index": 10187, "code": "x, a, b = map(int, input().split())\nif x < a and x < b:\n    if a < b:\n        print(\"A\")\n    else:\n        print(\"B\")\nelif x > a and x > b:\n    if a > b:\n        print(\"A\")\n    else:\n        print(\"B\")\nelse:\n    if abs(x - a) < abs(x - b):\n        print(\"A\")\n    else:\n        print(\"B\")"}
{"label": 79, "index": 10188, "code": "x, a, b = list(map(int, input().split()))\nif abs(x-a) < abs(x-b):\n    print('A')\nelse:\n    print('B')"}
{"label": 79, "index": 10189, "code": "import sys\ninp = lambda t: t(sys.stdin.readline().strip())\ninpm = lambda t: map(t, sys.stdin.readline().split())\ninpl = lambda t: list(map(t, sys.stdin.readline().split()))\nprint = lambda x, end='\\n': sys.stdout.write(str(x) + end)\n\nx, a, b = inpm(int)\nif abs(a - x) < abs(b - x):\n\tprint('A')\nelse:\n\tprint('B')"}
{"label": 79, "index": 10190, "code": "x,a,b = map(int,input().split())\nansa = (abs(x-a)< abs(x-b))\nprint(\"A\" if ansa  else \"B\")"}
{"label": 79, "index": 10191, "code": "if __name__ == '__main__':\n    x, a, b = map(int, input().split())\n    if abs(x-a) < abs(x-b):\n        print('A')\n    else:\n        print('B')"}
{"label": 79, "index": 10192, "code": "x,a,b = map(int, input().split())\nans = 'A' if abs(a-x) < abs(b-x) else 'B'\nprint(ans)\n"}
{"label": 79, "index": 10193, "code": "x,a,b = [int(i) for i in input().split()]\nif (x-a)**2 < (x-b)**2:\n\tprint(\"A\")\nelse:\n\tprint(\"B\")\n"}
{"label": 79, "index": 10194, "code": "x,a,b = (int(i) for i in input().split())\n\na = a-x if a>x else x-a\nb = b-x if b>x else x-b\n\nans = \"A\" if a<b else \"B\"\n\nprint(ans)"}
{"label": 79, "index": 10195, "code": "l = input().split()\nx = float(l[0])\na = float(l[1])\nb = float(l[2])\n\n\nif abs(x-a) < abs(x-b):\n\tprint(\"A\")\nelse:\n\tprint(\"B\")"}
{"label": 79, "index": 10196, "code": "l = list(map(int, input().split()))\na = abs(l[0] - l[1])\nb = abs(l[0] - l[2])\n\nif a<b:\n    print('A')\nelse:\n    print('B')\n"}
{"label": 79, "index": 10197, "code": "#! -*- coding:utf-8 -*-\nx,a,b = map(int,input().split())\nimport math\n\nif(math.copysign(x-a,0) < math.copysign(x-b,0)):\n    print('A')\nelse:\n    print('B')\n"}
{"label": 79, "index": 10198, "code": "x, a, b = map(int, raw_input().split())\n\nif abs(x - a) < abs (x - b):\n    print \"A\"\nelse:\n    print \"B\""}
{"label": 79, "index": 10199, "code": "lst = list(map(int, input().split()))\n\nx = lst[0]\na = lst[1]\nb = lst[2]\n\nif abs(b-x) > abs(a-x):\n    print(\"A\")\nelse:\n    print(\"B\")"}
{"label": 79, "index": 10200, "code": "a = input().split()\nif (max(int(a[0]), int(a[1])) - min(int(a[0]), int(a[1]))) > (max(int(a[0]), int(a[2])) - min(int(a[0]), int(a[2]))):\n    print(\"B\")\nelif (max(int(a[0]), int(a[1])) - min(int(a[0]), int(a[1]))) < (max(int(a[0]), int(a[2])) - min(int(a[0]), int(a[2]))):\n    print(\"A\")\n"}
{"label": 79, "index": 10201, "code": "from collections import defaultdict\nfrom itertools import product, groupby\nfrom math import pi\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right\nINF = 10 ** 10\n\n\ndef main():\n    x, a, b = map(int, input().split())\n    print(\"A\" if abs(x - a) < abs(x - b) else \"B\")\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 79, "index": 10202, "code": "def A_MealDelivery(lst):\n    x, a, b = lst[0], lst[1], lst[2]\n    if abs(x - a) < abs(x - b):\n        return 'A'\n    else:\n        return 'B'\n\nl = [int(i) for i in input().split()]\nprint(A_MealDelivery(l))"}
{"label": 79, "index": 10203, "code": "import math\nx,a,b = map(int,input().split())\nif abs(x-a)<abs(x-b):\n    print(\"A\")\nelse:\n    print(\"B\")\n\n"}
{"label": 79, "index": 10204, "code": "x,a,b = [int(i) for i in input().split()]\nif abs(x-a) < abs(x-b):\n\tprint(\"A\")\nelse:\n\tprint(\"B\")"}
{"label": 79, "index": 10205, "code": "x,a,b = [int(x) for x in input().split()]\nif abs(x-a)<abs(x-b):\n    print(\"A\")\nelse:\n    print(\"B\")\n"}
{"label": 79, "index": 10206, "code": "x, a, b = map(int,input().split())\nif abs(x - a) < abs(x - b):\n    print('A')\nelse:\n    print('B')"}
{"label": 79, "index": 10207, "code": "x, a, b = map(int, input().split())\n \nif abs(x-a) > abs(x-b):\n  print(\"B\")\nelse:\n  print(\"A\")"}
{"label": 79, "index": 10208, "code": "x,a,b=map(int, input().split())\nif abs(a-x)>abs(b-x):\n print('B')\nelse:\n print('A')\n"}
{"label": 79, "index": 10209, "code": "def main():\n    x, a, b = [int(i) for i in input().split()]\n\n    if(abs(x-a) < abs(x-b)):\n        print(\"A\")\n    else:\n        print(\"B\")\n        \nif __name__==\"__main__\":\n    main()"}
{"label": 79, "index": 10210, "code": "a,b,c=map(int,raw_input().split())\nprint \"A\" if abs(b-a)<=abs(c-a) else \"B\""}
{"label": 79, "index": 10211, "code": "a = map(int, raw_input().strip().split())\nda = max(a[1],a[0])-min(a[1],a[0])\ndb = max(a[0],a[2])-min(a[0],a[2])\nif da > db:\n\tprint('B')\nelse:\n\tprint('A')"}
{"label": 79, "index": 10212, "code": "line = raw_input()\nx, a, b = line.split()\nx = int(x)\na = int(a)\nb = int(b)\n\nif abs(x-a) < abs(x-b):\n    print 'A'\nelse:\n    print 'B'"}
{"label": 79, "index": 10213, "code": "x,a,b=map(float,raw_input().split())\nAX=abs(a-x)\nBX=abs(b-x)\nif AX>BX:\n    print \"B\"\nelse:\n    print \"A\""}
{"label": 79, "index": 10214, "code": "x, a, b = map(int, input().split())\n\nif abs(a-x) > abs(b-x):\n    print(\"B\")\nelse:\n    print(\"A\")"}
{"label": 79, "index": 10215, "code": "x,a,b = map(int, input().split())\na=abs(x-a)\nb=abs(b-x)\nprint(\"A\" if a < b else \"B\")"}
{"label": 79, "index": 10216, "code": "x, a, b = list(map(int, input().split()))\n\nif abs(x - a) < abs(x - b):\n    print(\"A\")\nelse:\n    print(\"B\")\n"}
{"label": 79, "index": 10217, "code": "#from time import time\n#t = time()\nnvm = input().split(' ')\nif abs(int(nvm[0]) - int(nvm[1])) < abs(int(nvm[0]) - int(nvm[2])):\n    print('A')\nelse:\n    print('B')\n\n#print(mn[0] * mm[1])\n#tt= time()\n#print(tt-t)\n    "}
{"label": 79, "index": 10218, "code": "x, a, b = map(int, input().split())\n\nif abs(x-a) <= abs(x-b):\n    print(\"A\")\nelse:\n    print(\"B\")\n"}
{"label": 79, "index": 10219, "code": "from collections import defaultdict\nfrom itertools import product, groupby\nfrom math import pi\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right\nINF = 10 ** 10\n \n \ndef main():\n    x, a, b = map(int, input().split())\n    print(\"A\" if abs(x - a) < abs(x - b) else \"B\")\n \n \nif __name__ == '__main__':\n    main()"}
{"label": 79, "index": 10220, "code": "x, a, b = [int(i) for  i in input().split()]\nif abs(x-a) < abs(x-b):\n    print('A')\nelse:\n    print('B')"}
{"label": 79, "index": 10221, "code": "#!usr/bim/python\n#! -*- coding: utf-8 -*-\n\nnab = raw_input()\nnab = nab.split()\nn,a,b = map(int,nab)\n\nif abs(n-a) < abs(n-b):\n    print 'A'\nelse:\n    print 'B'\n"}
{"label": 79, "index": 10222, "code": "\nl = list(map(int, input().split()))\n\na = l[1] - l[0]\nb = l[2] - l[0]\nlist = []\nlist.append(abs(a))\nlist.append(abs(b))\nif list[0] > list[1]:\n    print(\"B\")\nelse:\n    print(\"A\")"}
{"label": 79, "index": 10223, "code": "x, a, b = map(int, input().split())\nif abs(x-a) > abs(x-b):\n    print(\"B\")\nelse:\n    print(\"A\")"}
{"label": 79, "index": 10224, "code": "n = input().split()\nxab = []\nfor i in n:\n    xab.append(int(i))\nxa = abs(xab[0] - xab[1])\nxb = abs(xab[0] - xab[2])\nif xa < xb:\n    print('A')\nelif xa > xb:\n    print('B')"}
{"label": 79, "index": 10225, "code": "x, a, b = [int(n) for n in input().split()]\nif abs(x-a) < abs(x-b):\n  print (\"A\")\nelse:\n  print(\"B\")\n\n   "}
{"label": 79, "index": 10226, "code": "x, a, b = map(int, input().split())\nif abs(x-a) < abs(x-b):\n  print(\"A\")\nelse:\n  print(\"B\")\n"}
{"label": 79, "index": 10227, "code": "x,a,b = input().split()\nx = int(x)\na = int(a)\nb = int(b)\n\nif (x-a)**2 >(x-b)**2:\n    print(\"B\")\nelse:\n    print(\"A\")\n    "}
{"label": 79, "index": 10228, "code": "def abs(x):\n\tif x >= 0:\n\t\treturn x\n\telse:\n\t\treturn -1 * x\n\t\t\nls = list(map(int,input().split()))\nif abs(ls[0] - ls[1]) < abs(ls[0] - ls[2]):\n\tprint ('A')\nelse:\n\tprint ('B')"}
{"label": 79, "index": 10229, "code": "x,a,b = map(int,input().split())\nprint('A' if abs(x-a)<abs(x-b) else 'B')\n"}
{"label": 79, "index": 10230, "code": "x, a, b = map(int, input().split(\" \"))\n\nif abs(x - a) < abs(x - b):\n    print(\"A\")\nelse:\n    print(\"B\")"}
{"label": 79, "index": 10231, "code": "x, a, b = map(int, input().split())\nif abs(a-x) < abs(b-x):\n    print(\"A\")\nelse:\n    print(\"B\")"}
{"label": 79, "index": 10232, "code": "x,a,b = map(int,input().split(' '))\nc = a-x\nd = b-x\n\nif c<0:\n\te = -c\nelse:\n\te = c\n\nif d<0:\n\tf = -d\nelse:\n\tf = d\n\n\nif e<f:\n\tprint('A')\nelse:\n\tprint('B')\n"}
{"label": 79, "index": 10233, "code": "import math\nx,a,b = input().split()\nx = int(x,10)\na = int(a,10)\nb = int(b,10)\n\nalpha = math.fabs(x-a)\nbeta = math.fabs(x-b)\n\nif alpha>beta:\n\tprint('B')\nelse:\n\tprint('A')\n"}
{"label": 79, "index": 10234, "code": "x, a, b = map(int, raw_input().split()) \nprint \"A\" if abs(a - x) < abs(b - x) else \"B\"\n"}
{"label": 79, "index": 10235, "code": "#ABC071A\n\nx,a,b=map(int,raw_input().split())\nif abs(a-x)>=abs(b-x):\n print 'B'\nelse:\n print 'A'\n"}
{"label": 79, "index": 10236, "code": "x, a, b = map(int,raw_input().split())\nif abs(x-a)>abs(x-b):\n    print \"B\"\nif abs(x-a)<abs(x-b):\n    print \"A\""}
{"label": 79, "index": 10237, "code": "x, a, b = map(int, input().split())\ndisA = abs(x-a)\ndisB = abs(x-b)\nif disA < disB:\n    print(\"A\")\nelse:\n    print(\"B\")\n"}
{"label": 79, "index": 10238, "code": "x, a, b = map(int, input().split())\nif abs(x-a)<abs(x-b): print(\"A\")\nelse: print(\"B\")\n"}
{"label": 79, "index": 10239, "code": "n,a,b = map(int,input().split())\na=abs(n-a)\nb=abs(n-b)\nprint(\"A\" if a<b else \"B\")"}
{"label": 79, "index": 10240, "code": "L=list(map(int, input().split()))\na=abs(L[1]-L[0])\nb=abs(L[2]-L[0])\nif a>b:\n    print(\"B\")\nelse:\n    print(\"A\")"}
{"label": 79, "index": 10241, "code": "import math\n\nx, a, b = map(int, input().split())\n\nif math.fabs(x-a) < math.fabs(x-b):\n    print('A')\nelse:\n    print('B')"}
{"label": 79, "index": 10242, "code": "x, a, b = map(int, input().split())\n\nif abs(x - a) < abs(x - b):\n    print('A')\nelse:\n    print('B')\n"}
{"label": 79, "index": 10243, "code": "x, a, b=map(int,input().split())\n\nif abs(a-x)  > abs(b-x):\n    print('B')\nelse:\n    print('A')\n"}
{"label": 79, "index": 10244, "code": "x,a,b=map(int, input().split())\nif abs(x-b) > abs(x-a):\n  print('A')\nelse:\n  print('B')"}
{"label": 79, "index": 10245, "code": "x, A, B = map(int, input().split())\nif abs(x - A) < abs(x - B):\n    print('A')\nelse:\n    print('B')"}
{"label": 79, "index": 10246, "code": "def read_int_list():\n    return (int(i) for i in input().split())\nx,a,b = read_int_list()\nif abs(x-a) < abs(x-b):\n    print(\"A\")\nelse:\n    print(\"B\")"}
{"label": 79, "index": 10247, "code": "if __name__ == '__main__':\n    X, A, B = [int(i) for i in input().split()]\n    if abs(X - A) < abs(X - B):\n        print('A')\n    else:\n        print('B')\n"}
{"label": 79, "index": 10248, "code": "x, a, b = map(int, input().split())\n\nif abs(x - a) < abs(x - b):\n    print(\"A\")\nelse:\n    print(\"B\")\n"}
{"label": 79, "index": 10249, "code": "import sys\n\n# sys.stdin = open('a1.in')\n\n\ndef read_int_list():\n    return list(map(int, input().split()))\n\n\ndef read_str_list():\n    return input().split()\n\n\ndef read_int():\n    return int(input())\n\n\ndef read_str():\n    return input()\n\n\ndef main():\n    x, a, b = read_int_list()\n    if abs(a - x) < abs(b - x):\n        print('A')\n    else:\n        print('B')\n\n\nmain()\n"}
{"label": 79, "index": 10250, "code": "import math\nx,a,b = list(map(int, input().split()))\nprint('A' if math.fabs(x-a) < math.fabs(x-b) else 'B')"}
{"label": 79, "index": 10251, "code": "#! /bin/python\n# coding:utf-8\n\n(x, a, b) = map(int, raw_input().split())\n\nif (abs(x - a) < abs(x - b)):\n\tprint \"A\"\nelse:\n\tprint \"B\""}
{"label": 79, "index": 10252, "code": "\nx, a, b = list(map(int, input().split()))\n\nif abs(x-a) > abs(x-b):\n    print('B')\nelse:\n    print('A')\n"}
{"label": 79, "index": 10253, "code": "x, a, b = map(int, input().split())\n\nif abs(x-a) > abs(x-b):\n    print('B')\nelse:\n    print('A')"}
{"label": 79, "index": 10254, "code": "# -*- coding: utf-8 -*-\n\ntmp = input()\nx, a, b = [int(a) for a in tmp.split()]\n\nd1 = abs(x - a)\nd2 = abs(x - b)\n\nprint(\"A\" if d1 < d2 else \"B\")\n"}
{"label": 79, "index": 10255, "code": "place = map(int, input().split())\n\nX, A, B = [i for i in place]\n\nX_A = abs(X - A)\nX_B = abs(X - B)\n\nif X_A <= X_B:\n  print('A')\nelse:\n  print('B')"}
{"label": 79, "index": 10256, "code": "import sys\n\nx, a, b = map(int, sys.stdin.readline().strip().split(\" \"))\n\nif abs(x-a) < abs(x-b):\n    print(\"A\")\nelse:\n    print(\"B\")"}
{"label": 79, "index": 10257, "code": "# coding: utf-8\nx,a,b=map(int,input().split())\nprint('A' if abs(x-a)<abs(x-b) else 'B')"}
{"label": 79, "index": 10258, "code": "x, a, b = map(int, raw_input().split())\nprint \"A\" if abs(x-a) < abs(x-b) else \"B\""}
{"label": 79, "index": 10259, "code": "x, a, b = [int(i) for i in input().split(' ')]\nprint('A' if abs(x-a) < abs(x-b) else 'B')"}
{"label": 79, "index": 10260, "code": "x, a, b = map(int, input().split())\nprint(\"A\" if abs(x - a) < abs(x - b) else \"B\")\n"}
{"label": 79, "index": 10261, "code": "x,a,b=map(int,raw_input().split())\na=abs(x-a)\nb=abs(x-b)\nif a<b :\n    print 'A'\nelse :\n    print 'B'"}
{"label": 79, "index": 10262, "code": "x, a, b = map(int, input().split())\n\nA = abs(x-a)\nB = abs(x-b)\nif A < B:\n    print(\"A\")\nelse:\n    print(\"B\")\n"}
{"label": 79, "index": 10263, "code": "x,a,b = map(int,input().split())\n\nif abs(a-x) < abs(b-x):\n    print(\"A\")\nelse:\n    print(\"B\")"}
{"label": 79, "index": 10264, "code": "x, a, b = input().split()\nx, a, b = int(x), int(a), int(b)\n\ndis_a = abs(x - a)\ndis_b = abs(x - b)\n\nif dis_a < dis_b:\n    print(\"A\")\nelse:\n    print(\"B\")"}
{"label": 79, "index": 10265, "code": "x, a, b = list(map(int, input().split()))\n\nif abs(x-a) < abs(x-b):\n    print('A')\nelse:\n    print('B')\n"}
{"label": 79, "index": 10266, "code": "x,a,b = [int(i) for i in input().split()]\nif abs(x-a) < abs(x-b):\n    print(\"A\")\nelse:\n    print(\"B\")"}
{"label": 79, "index": 10267, "code": "input_value = input().split()\nx = int(input_value[0])\na = int(input_value[1])\nb = int(input_value[2])\n\ndistance_from_x_to_a = abs(x-a)\ndistance_from_x_to_b = abs(x-b)\n\nif distance_from_x_to_a < distance_from_x_to_b:\n\tprint(\"A\")\nelse:\n\tprint(\"B\")\n"}
{"label": 79, "index": 10268, "code": "x,a,b = map(int, input().split())\nif abs(x-a) < abs(x-b):\n    print('A')\nelse :\n    print('B')"}
{"label": 79, "index": 10269, "code": "x, a, b = map(int, input().split())\nif abs(x-a) > abs(x-b):\n    print('B')\nelse:\n    print('A')\n"}
{"label": 80, "index": 10270, "code": "#Not Found\ns = list(input())\n\nc = [chr(i) for i in range(97, 97+26)]\nans = \"None\"\nfor ci in c:\n    if( ci not in list(s) ):\n        ans = ci\n        break\nprint(ans)"}
{"label": 80, "index": 10271, "code": "import string\ns = list(input())\nflag = 0\n\nfor a in string.ascii_lowercase:\n    if a not in s:\n        print(a)\n        flag = 1\n        break\n\nif flag == 0:\n    print(\"None\")\n"}
{"label": 80, "index": 10272, "code": "S = str(input())\nalpha = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\nn = 0\n\nfor i in range(26):\n\n\tif alpha[n] not in S:\n\t\tprint(alpha[n])\n\t\tbreak\n\tif n == 25:\n\t\tprint(\"None\")\n\t\tbreak\n\t\t\n\tn += 1\n"}
{"label": 80, "index": 10273, "code": "S = input()\n\nX = 'abcdefghijklmnopqrstuvwxyz'\n\nfor x in X:\n    if x not in S:\n        print(x)\n        exit()\n\nprint('None')\n"}
{"label": 80, "index": 10274, "code": "S = list(input())\n\nalphabets = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\",\n\"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\",\"q\", \"r\", \"s\",\n\"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n\ni = 0\nwhile i in range(len(alphabets)):\n    if alphabets[i] in S:\n        i += 1\n    else:\n        print(alphabets[i])\n        break\nelse:\n    print (\"None\")\n"}
{"label": 80, "index": 10275, "code": "alphabet_list = [0 for x in range(ord('a'),ord('z')+1)]\n\nS = list(raw_input())\n\nfor x in S:\n    alphabet_list[ord(x) - ord('a')] += 1\n\nprint_flag = False\nfor index in range(0,ord('z')-ord('a')+1):\n    if alphabet_list[index] == 0:\n        print(chr(index+ord('a')))\n        print_flag = True\n        break\n\nif not(print_flag):\n    print('None')\n"}
{"label": 80, "index": 10276, "code": "S = input()\nalf = \"abcdefghijklmnopqrstuvwxyz\"\nli = []\n\nfor x in alf:\n    if (x in S) == False:\n      li.append(x)\n      break\n\nif len(li) != 0:\n    print(li[0])\nelse:\n    print(\"None\")"}
{"label": 80, "index": 10277, "code": "S = input()\nL = [chr(i) for i in range(97,97+26)]\n\nfor c in L:\n    if c in S:\n        if c == 'z':\n            print('None')\n        continue\n    else:\n        print(c)\n        break"}
{"label": 80, "index": 10278, "code": "import sys\nline = raw_input()\nres = dict()\nfor i in line:\n    res[i] = 1\n    if len(res) == 26:\n        print 'None'\n        sys.exit(0)\nfor i in 'abcdefghijklmnopqrstuvwxyz':\n    if res.get(i, None) is None:\n        print i\n        sys.exit(0)\n"}
{"label": 80, "index": 10279, "code": "all_char = map(chr,range(97,123))\nall_set = set(all_char)\ninput_set = set(input())\nprint(min(all_set-input_set or{\"None\"}))"}
{"label": 80, "index": 10280, "code": "S = input()\nx = [chr(i) for i in range(ord(\"a\"),ord(\"z\")+1)]\nfor i in x:\n  if i not in S:\n    print(i)\n    break\n  if i == x[-1]:\n    print(\"None\")\n    break"}
{"label": 80, "index": 10281, "code": "S = list(input())\n\nT = list('abcdefghijklmnopqrstuvwxyz')\n\nsub = [c for c in T if c not in S]\nif len(sub) != 0:\n    print(sub[0])\nelse:\n    print('None')\n    \n"}
{"label": 80, "index": 10282, "code": "s=raw_input()\na=[0 for i in range(26)]\np=-1\nfor i in range(len(s)):\n    a[ord(s[i])-97]=1\nfor i in range(26):\n    if a[i]==0:\n        print chr(i+97)\n        exit()\nprint \"None\"\n"}
{"label": 80, "index": 10283, "code": "import string\nimport sys\nfrom collections import Counter\n\n# sys.stdin = open('b1.in')\n\n\ndef read_int_list():\n    return list(map(int, input().split()))\n\n\ndef read_str_list():\n    return input().split()\n\n\ndef read_int():\n    return int(input())\n\n\ndef read_str():\n    return input()\n\n\ndef main():\n    a = list(string.ascii_lowercase)\n    res = None\n    s = read_str_list()\n    l = list(s)\n    l.sort()\n    s = ''.join(l)\n\n    c = Counter(s)\n    for i in a:\n        if c[i] == 0:\n            res = i\n            break\n\n    print(res)\n\n\nmain()\n"}
{"label": 80, "index": 10284, "code": "S = input()\nl = 'abcdefghijklmnopqrstuvwxyz'\n\nfor x in l:\n    if not x in S:\n        print(x)\n        exit()\n        \nprint('None')"}
{"label": 80, "index": 10285, "code": "n = input()\nfor i in range(26):\n    c = chr(i+ord(\"a\"))\n    if not c in n: print(c); break\nelse: print(\"None\")"}
{"label": 80, "index": 10286, "code": "S = input()\na = [chr(i) for i in range(97, 97+26)]\nfor s in S:\n    if s in a:\n        a.remove(s)\nif len(a) == 0:\n    print('None')\nelse:\n    print(a[0])\n"}
{"label": 80, "index": 10287, "code": "S = str(input())\nlist_S = []\n\nfor i in range(len(S)):\n\n    list_S.append(S[i:i+1])\n\n\n\nalf = 'abcdefghijklmnopqrstuvwxyz'\nlist_alf = []\nfor i in range(len(alf)):\n    list_alf.append(alf[i:i+1])\n\ncount = 0\nconti = 0\n\nfor i in range(len(alf)):\n    count = list_S.count(list_alf[i])\n    if count == 0:\n        print (list_alf[i])\n        break\n    conti += 1\n\n\nif conti >= 26:\n    print ('None')"}
{"label": 80, "index": 10288, "code": "#coding=UTF-8\n\nS=input()\nans='None'\nfor chr_num in range(ord('a'),ord('z')+1,1):\n    mozi=chr(chr_num)\n    if not(mozi in S):\n        ans=mozi\n        break\n\nprint(ans)\n"}
{"label": 80, "index": 10289, "code": "import string\nS = input()\nfor a in string.ascii_lowercase:\n    if a not in S:\n        print(a)\n        exit(0)\nprint('None')\n"}
{"label": 80, "index": 10290, "code": "print((lambda x:\"None\" if not x else x[0])(sorted(set(chr(97+i) for i in range(26))-set(list(input())))))"}
{"label": 80, "index": 10291, "code": "# coding: utf-8\n# Here your code !\ns = set(input())\nab = {chr(i) for i in range(97,97+26)}\nab -= s\nif len(ab) == 0:\n    print(\"None\")\nelse:\n    print(min(ab))"}
{"label": 80, "index": 10292, "code": "s=set(input())\nfor c in range(ord('a'),ord('z')+1):\n    c=chr(c)\n    if c not in s:\n        print(c)\n        break\nelse:\n    print(None)"}
{"label": 80, "index": 10293, "code": "import string\n\nS = input()\n\nX = set(string.ascii_lowercase) - set(S)\nif X:\n    print(sorted(list(X))[0])\nelse:\n    print(None)\n"}
{"label": 80, "index": 10294, "code": "print((lambda s:next((chr(i)for i in range(97,123)if chr(i)not in s),\"None\"))(input()))"}
{"label": 80, "index": 10295, "code": "hoge = [0] * 26\na = ord('a')\nstring = input()\nfor i in range(len(string)):\n    hoge[ord(string[i])-a] = 1\n\nfor i in range(26):\n    if hoge[i] == 0:\n        print(chr(i+a))\n        break\n    if i == 25:\n        print('None')"}
{"label": 80, "index": 10296, "code": "s = input()\narr = \"abcdefghijklmnopqrstuvwxyz\"\nans = []\nfor word in arr:\n    if word in s:\n        pass\n    else:\n        ans.append(word)\nif len(ans) == 0:\n    print(\"None\")\nelse:\n    print(ans[0])"}
{"label": 80, "index": 10297, "code": "def main():\n    S = input()\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    #print(alphabet)\n    #com = S + alphabet\n    #print(sorted(set(com), key=com.index))\n    dic = str.maketrans(\"\", \"\", S)\n    ans = alphabet.translate(dic)\n    if(len(ans) > 0):\n        print(ans[0])\n    else:\n        print(\"None\")\n    \n    \nif __name__==\"__main__\":\n    main()"}
{"label": 80, "index": 10298, "code": "#from time import time\n#t = time()\nn = input()\nd=[]\nabc =[chr(x) for x in range(97, 123)]\nfor i in abc:\n    if i not in  n:\n        d.append(i)\nif d != []:\n    print(sorted(d)[0])\nelse:\n    print('None')\n\n#print(mn[0] * mm[1])\n#tt= time()\n#print(tt-t)\n    \n                \n"}
{"label": 80, "index": 10299, "code": "S = raw_input()\nfor c in [chr(ord(\"a\") + i) for i in xrange(26)]:\n    if c in S:\n        continue\n    else:\n        print c\n        break\nelse:\n    print \"None\"\n"}
{"label": 80, "index": 10300, "code": "x=sorted(set(chr(97+i) for i in range(26))-set(input()))\nprint(\"None\" if not x else x[0])"}
{"label": 80, "index": 10301, "code": "import string\nS = input()\ndiff = set(string.ascii_lowercase) - set(S)\ndiff = sorted(list(diff))\nif len(diff) == 0:\n    print('None')\nelse:\n    print(diff[0])\n"}
{"label": 80, "index": 10302, "code": "S = input()\n\nfor i in \"abcdefghijklmnopqrstuvwxyz\":\n    if S.replace(i,\"\") == S:\n        print(i)\n        break\nelse:\n    print(\"None\")\n"}
{"label": 80, "index": 10303, "code": "def search(code):\n    for i in range(len(code)):\n        if code[i] == 0:\n            return i\n    else:\n        return -1\n\ns = raw_input()\n\ncode = [0 for i in range(26)]\n\nfor i in range(len(s)):\n    key = ord(s[i]) - 97\n    code[key] += 1\n\nrt = search(code)\n\nif rt >= 0:\n    print chr(rt + 97)\nelse:\n    print \"None\""}
{"label": 80, "index": 10304, "code": "x = str(input())\n\nfor i in range(97,123):\n    if(x.find(chr(i))==-1):\n        print(chr(i))\n        quit()\n\nprint('None')\n\n\nquit()"}
{"label": 80, "index": 10305, "code": "s = input()\nab_list = [True]*26\nfor i in s:\n  ab_list[ord(i)-97] = False\nfor i in range(len(ab_list)):\n  if ab_list[i]:\n    print(chr(i+97))\n    exit()\nprint(\"None\")\n    "}
{"label": 80, "index": 10306, "code": "a_list=(\"abcdefghijklmnopqrstuvwxyz\")\nword=(raw_input())\nflag=0\nout=\"None\"\nfor i in a_list:\n    for n,k in enumerate(word):\n        if i==k:\n            break\n        if n==len(word)-1:\n            out=i\n            flag=1\n    if flag==1:\n        break\nprint(out)"}
{"label": 80, "index": 10307, "code": "S = input()\n\na = 0\nfor i in range(97, 97 + 26):\n    if chr(i) not in S:\n        print(chr(i))\n        a = 1\n        break\n\nif a == 0:\n    print('None')\n"}
{"label": 80, "index": 10308, "code": "from collections import defaultdict\nfrom itertools import product, groupby\nfrom math import pi\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right\nfrom string import ascii_lowercase\nINF = 10 ** 10\n\n\ndef main():\n    S = input()\n    for c in ascii_lowercase:\n        if c not in S:\n            print(c)\n            return\n    else:\n        print(\"None\")\n\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 80, "index": 10309, "code": "s=list(input())\nL=[]\nfor t in range(0,26):\n    if chr(97+t) not in s:\n        a=chr(97+t)\n        L.append(a)\n        \nif not L:\n    print(\"None\")\nelse:\n    print(L[0])\n            "}
{"label": 80, "index": 10310, "code": "a = raw_input().strip()\nal = 'abcdefghijklmnopqrstuvwxyz'\nfor x in al:\n\ttry:\n\t\ti = a.index(x)\n\texcept :\n\t\tprint(x)\n\t\texit()\nprint('None')"}
{"label": 80, "index": 10311, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\ngosa = 1.0 / 10**10\nmod = 10**9 + 7\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\n\n\ndef main():\n    c = collections.Counter(S())\n    for k in string.ascii_lowercase:\n        if c[k] == 0:\n            return k\n    return 'None'\n\nprint(main())\n\n"}
{"label": 80, "index": 10312, "code": "S=input()\n\nsorted(S)\n\nif 'a' not in S:\n    print('a')\nelif 'b' not in S:\n    print('b')\nelif 'c' not in S:\n    print('c')\nelif 'd' not in S:\n    print('d')\nelif 'e' not in S:\n    print('e')\nelif 'f' not in S:\n    print('f')\nelif 'g' not in S:\n    print('g')\nelif 'h' not in S:\n    print('h')\nelif 'i' not in S:\n    print('i')\nelif 'j' not in S:\n    print('j')\nelif 'k' not in S:\n    print('k')\nelif 'l' not in S:\n    print('l')\nelif 'm' not in S:\n    print('m')\nelif 'n' not in S:\n    print('n')\nelif 'o' not in S:\n    print('o')\nelif 'p' not in S:\n    print('p')\nelif 'q' not in S:\n    print('q')\nelif 'r' not in S:\n    print('r')\nelif 's' not in S:\n    print('s')\nelif 't' not in S:\n    print('t')\nelif 'u' not in S:\n    print('u')\nelif 'v' not in S:\n    print('v')\nelif 'w' not in S:\n    print('w')\nelif 'x' not in S:\n    print('x')\nelif 'y' not in S:\n    print('y')\nelif 'z' not in S:\n    print('z')\nelse:\n    print('None')"}
{"label": 80, "index": 10313, "code": "string = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\ns =[d for d in input()]\nfind = 0\ni=0\nfound = False\nwhile i<26 and not found:\n    if string[i] in s :\n        found= False\n    else:\n        find =string[i]\n        found=True\n    i +=1\n\nif found:\n    print(find)\nelse:\n    print('None')\n    \n        "}
{"label": 80, "index": 10314, "code": "s=set(input())\neng = [chr(i) for i in range(97,123)]\nfor i in eng:\n    if i not in s:\n        print(i)\n        break\nelse:\n    print(\"None\")"}
{"label": 80, "index": 10315, "code": "S = input()\nalphabet = \"abcdefghijklmnopqrstuvwxyz\"\nfound = [i for i in alphabet if i not in S]\nfound.sort()\nif len(found) == 0:\n  print('None')\nelse:\n  print(found[0])"}
{"label": 80, "index": 10316, "code": "S=list(str(input()))\n\na=list('abcdefghijklmnopqrstuvwxyz')\n\nfor i in a:\n    if i not in S:\n        print(i)\n        exit()\nelse:\n    print('None')"}
{"label": 80, "index": 10317, "code": "abc='abcdefghijklmnopqrstuvwxyz'\ns=raw_input().strip()\nisi=set()\nfor l in s:\n    if l not in isi:\n        isi.add(l)\nfor l in abc:\n    if l not in isi:\n        print l\n        break\nelse:\n    print 'None'"}
{"label": 80, "index": 10318, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport string\n\ndef main():\n    S = set(input())\n    T = set(string.ascii_lowercase)\n\n    T -= S\n    if not T:\n        print(\"None\")\n    else:\n        print(sorted(T)[0])\n\nif __name__ == \"__main__\": main()\n"}
{"label": 80, "index": 10319, "code": "s = list(input().strip())\ns.sort()\ni = 0\nfor c in \"abcdefghijklmnopqrstuvwxyz!\":\n    if i < len(s) and s[i] == c:\n        while i < len(s) and s[i] == c:\n            i += 1\n    else:\n        if c != \"!\":\n            print(c)\n        else:\n            print(\"None\")\n        raise SystemExit"}
{"label": 80, "index": 10320, "code": "\ns=input()\ns=list(s)\nnums=[]\nfor i in s: nums.append(ord(i))\n\nflag=True\nfor i in range(97,123):\n    if i in nums: pass\n    else: print(chr(i));flag=False; break\nif flag: print(\"None\")"}
{"label": 80, "index": 10321, "code": "s = list(set(input()))\nabc = \"abcdefghijklmnopqrstuvwxyz\"\ns.sort()\nif len(s)==26: print(\"None\")\nelse:\n  for a in abc:\n    if not(a in s):\n      print(a)\n      break\n"}
{"label": 80, "index": 10322, "code": "import sys\n\nalphabet = \"abcdefghijklmnopqrstuvwxyz\"\nword = raw_input()\nfound = 0\n\nfor letter in alphabet:\n    if letter not in word:\n        print letter\n        found = 1\n        break\n\nif found == 0:\n    print \"None\""}
{"label": 80, "index": 10323, "code": "s = input()\n\nalp = [chr(i) for i in range(97, 97+26)]\n\nflag = [False for i in range(26)]\n\nfor c in s:\n    flag[ord(c) - ord(\"a\")] = True\n\n\ndef pr():\n    for i in range(26):\n        if not flag[i]:\n            print(alp[i])\n            return\n\n    print('None')\n    return\n\npr()\n"}
{"label": 80, "index": 10324, "code": "import string\n\nstandard_let = string.ascii_lowercase\n\ns = input()\nfor i in standard_let:\n    if i not in s:\n        print(i)\n        break\nelse:\n    print('None')"}
{"label": 80, "index": 10325, "code": "# coding: utf-8\ntxt = input()\nfor c in 'abcdefghijklmnopqrstuvwxyz':\n    if c not in txt:\n        print(c)\n        break\nelse:\n    print('None')"}
{"label": 80, "index": 10326, "code": "d = raw_input()\n\nd_list = []\nfor i in range(len(d)):\n    d_list.append(ord(d[i]))\n\nans = ord('a')\nwhile True:\n    if ans not in d_list:\n        break\n    if ans > ord('a')+122:\n        break\n    ans += 1\n\nif ans > 122:\n    print 'None'\nelse:\n    print chr(ans)\n"}
{"label": 80, "index": 10327, "code": "S = set(map(ord,input()))\nalphabet = set(map(ord,'abcdefghijklmnopqrstuvwxyz'))\n\nx = alphabet - S\ntry:\n    print(chr(min(x)))\nexcept:\n    print('None')"}
{"label": 80, "index": 10328, "code": "s2 = \"abcdefghijklmnopqrstuvwxyz\"\ns2 = set(s2)\ns = set(raw_input())\nif len(s) == 26:\n    print \"None\"\na = list(s2 -s)\nif len(a) >0:\n  a.sort()\n  print a[0]"}
{"label": 80, "index": 10329, "code": "print((lambda x:\"None\" if not x else x[0])(sorted(list(set(chr(i) for i in range(97,97+26))-set(input())))))"}
{"label": 80, "index": 10330, "code": "S = input()\nd = {}\n\nfor i in range(ord(\"a\"), ord(\"z\") + 1):\n    d[chr(i)] = False\n\nfor c in S:\n    d[c] = True\n\nans = \"None\"\nfor i in range(ord(\"a\"), ord(\"z\") + 1):\n    if not d[chr(i)]:\n        ans = chr(i)\n        break\nprint(ans)\n"}
{"label": 80, "index": 10331, "code": "S = input()\ncharset = list(set(S))\ndic = [chr(i) for i in range(97, 97+26)]\n\n[dic.remove(c) for c in charset]\nif dic == []:\n    print(\"None\")\nelse:\n    print(dic[0])\n"}
{"label": 80, "index": 10332, "code": "import string\ns = list(input())\na = list(string.ascii_lowercase)\nl = []\nfor index, i in enumerate(a):\n    if i not in s:\n        print(i)\n        break\nelse:\n    print(None)"}
{"label": 80, "index": 10333, "code": "S = str(input())\nalphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\nflag = [0] * 26\nfor i in range(26):\n    if alphabet[i] in S:\n        flag[i] = 1\n\nfor i in range(26):\n    if flag[i] == 0:\n        print(alphabet[i])\n        break\n\nif flag == [1] * 26:\n    print(\"None\")\n"}
{"label": 80, "index": 10334, "code": "print([sorted(set(chr(97+i)for i in range(26))-set(input()))or[\"None\"]][0][0])"}
{"label": 80, "index": 10335, "code": "S = input()\n\nalpha = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\",\n        \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\",\n        \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\",\n        \"v\", \"w\", \"x\", \"y\", \"z\"]\nS = list(set(S))\nS.sort()\n#print(len(S))\nfor i in range(len(S)):\n    if S[i] != alpha[i]:\n        print(alpha[i])\n        break\n    elif i == 25:\n        print(\"None\")\n    elif i == len(S) - 1:\n        print(alpha[i+1])\n"}
{"label": 80, "index": 10336, "code": "#! /bin/python\n# coding:utf-8\n\nimport sys\n\ndef strchr(string, char):\n\tfor token in string:\n\t\tif (token == char):\n\t\t\treturn 1\n\treturn 0\n\nS = raw_input()\n\ntmp = chr(ord('a'))\nfor i in range(0, 26):\n\tif (strchr(S, tmp) == 0):\n\t\tprint tmp\n\t\tsys.exit()\n\ttmp = chr(ord(tmp) + 1)\n\nprint \"None\""}
{"label": 80, "index": 10337, "code": "def B_NotFound(lst):\n    comparison = 'abcdefghijklmnopqrstuvwxyz'\n    lst = sorted(set(lst))  # \u6587\u5b57\u5217\u3092\u30bd\u30fc\u30c8(\u91cd\u8907\u306f\u3044\u3089\u306a\u3044\u306e\u3067\u9664\u304f)\n\n    string = [''] * len(comparison)\n    for i in range(len(lst)):\n        string[i] = lst[i]\n\n    for i in range(len(string)):\n        if string[i] != comparison[i]:\n            return comparison[i]\n    return 'None'\n\ns = input()\nprint(B_NotFound(s))"}
{"label": 80, "index": 10338, "code": "print(min([set(chr(97+i)for i in range(26))-set(input())or[\"None\"]][0]))"}
{"label": 80, "index": 10339, "code": "myinput=input()\nfor c in 'abcdefghijklmnopqrstuvwxyz':\n    if c not in myinput:\n        print(c)\n        break\nelse:\n    print('None')"}
{"label": 80, "index": 10340, "code": "import sys\n\nDICT = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n\nd = set(DICT)\ns = set(list(sys.stdin.readline().strip()))\n\nz = sorted(list(d-s))\n\nif len(z) >= 1:\n    print(z[0])\nelse:\n    print('None')"}
{"label": 80, "index": 10341, "code": "import string\n\nS = set(list(input()))\nans = set(list(string.ascii_lowercase)) - S\nif len(ans) == 0:\n    print(\"None\")\n    exit()\nans = sorted(list(ans))[0]\nprint(ans)\n"}
{"label": 80, "index": 10342, "code": "word_list = list(input().lower())\nalphabet_uniq = list(set(word_list))\nalphabet_uniq.sort()\n\nalphabet_uniq.append('END')\nif len(alphabet_uniq) != 27:\n    for i in range(0, len(alphabet_uniq)):\n        if chr(i + 97) != alphabet_uniq[i]:\n            print(chr(i + 97))\n            break\nelse:\n    print(None)\n"}
{"label": 80, "index": 10343, "code": "s = input()\n\nl = list(s)\n#l=list(set(l))\n#l.sort()\n#print(l)\n\nl_abc = list(\"abcdefghijklmnopqrstuvwxyz\")\n\nl = list(set(l_abc) - set(l))\nl.sort()\n\n#print(l)\n#print(len(l))\n\nif len(l) == 0:\n\tprint(\"None\")\nelse:\n\tprint(l[0])\n"}
{"label": 80, "index": 10344, "code": "import collections\ns = collections.Counter('abcdefghijklmnopqrstuvwxyz')\nl = collections.Counter(input())\nret = 'None'\nfor el in sorted((s+l).items()):\n  if el[1] == 1:\n    ret = el[0]\n    break\nprint(ret)"}
{"label": 80, "index": 10345, "code": "def solve(): # 071B - Not Found\n    alphabet = []\n    for i in range(26):\n        alphabet.append(chr(97 + i))\n    s = list(input())\n\n    for j in s:\n        if j in alphabet:\n            alphabet.remove(j)\n        else:\n            pass\n\n    if len(alphabet) == 0:\n        print(\"None\")\n    else:\n        print(alphabet[0])\n\n\nsolve()"}
{"label": 80, "index": 10346, "code": "x=set(chr(97+i) for i in range(26))-set(input())\nprint(\"None\" if not x else min(x))"}
{"label": 80, "index": 10347, "code": "s = input().strip()\n\nalphabets = 'abcdefghijklmnopqrstuvwxyz'\n\ns_set = set(s)\n\nfor c in alphabets:\n    if c not in s_set:\n        print(c)\n        exit()\nprint('None')\n"}
{"label": 80, "index": 10348, "code": "x=set([chr(i) for i in range(97,97+26)])-set(list(input()))\nprint(\"None\" if not x else sorted(list(x))[0])"}
{"label": 80, "index": 10349, "code": "\nS=map(str,raw_input())\nS.sort()\nflag=1\nSS=[]\nfor i in S:\n    SS.append(ord(i))\nfor i in range(ord(\"a\"),ord(\"z\")+1):\n    if not i in SS:\n        ans=chr(i)\n        print ans\n        flag=0\n        break\nif flag==1:\n    print \"None\""}
{"label": 80, "index": 10350, "code": "S=input()\ncheck=True\n \nfor i in range(0,26):\n    if S.find(chr(i+97))==-1:\n        print(chr(i+97))\n        check=False\n        break\n\n\nprint(\"None\" if check else \"\")\n"}
{"label": 80, "index": 10351, "code": "import sys\ns=str(input())\nfor i in range(97,97+26):\n  if not chr(i) in s:\n    print(chr(i))\n    sys.exit()\nprint(\"None\")"}
{"label": 80, "index": 10352, "code": "import string\nimport sys\n\nS = input()\nl = string.ascii_lowercase\n\nfor c in l:\n  there = False\n  for cs in S:\n    if c == cs:\n      there = True\n  if there == False:\n    print(c)\n    sys.exit()\n\nprint(\"None\")\nsys.exit()\n"}
{"label": 80, "index": 10353, "code": "import string\n\ns = input()\nalp = string.ascii_lowercase\n\ndef search(s, c):\n    for i in s:\n        if i == c:\n            return 1\n    return 0\n\nf = 0\nfor i in alp:\n    if not search(s, i):\n        print (i)\n        f = 1\n        break;\nif not f:\n    print (\"None\")\n"}
{"label": 80, "index": 10354, "code": "S = set(input())          \n\nX = set('abcdefghijklmnopqrstuvwxyz')               \n\nS=X-S                     \n\nprint(\"None\" if S==set() else min(S))               \n"}
{"label": 80, "index": 10355, "code": "import sys\ninp = lambda t: t(sys.stdin.readline().strip())\ninpm = lambda t: map(t, sys.stdin.readline().split())\ninpl = lambda t: list(map(t, sys.stdin.readline().split()))\n\ns = inp(str)\n\np = set()\nfor i in s:\n\tif i not in p:\n\t\tp.add(i)\n\nfor i in range(ord('a'), ord('z') + 1):\n\tif chr(i) not in p:\n\t\tprint(chr(i))\n\t\tbreak\nelse:\n\tprint('None')"}
{"label": 80, "index": 10356, "code": "S = input()\n\nfor i in range(ord('a'), ord('z') + 1):\n    if chr(i) not in S:\n        print(chr(i))\n        break\nelse:\n    print('None')\n"}
{"label": 80, "index": 10357, "code": "s = input()\ns_list = list(s)\ns_set = set(s_list)\nabc_list = [chr(i) for i in range(97, 97+26)]\nif len(s_set) == 26:\n    print(\"None\")\nelse:\n    for a in abc_list:\n        if a in s_set:\n            pass\n        else:\n            print(a)\n            break\n"}
{"label": 80, "index": 10358, "code": "import string\n\n\ndef main():\n    cs = set(input())\n    print(solve(cs))\n\n\ndef solve(cs):\n    for c in string.ascii_lowercase:\n        if c not in cs:\n            return c\n    return 'None'\n\n\nif __name__ == '__main__':\n    main()"}
{"label": 80, "index": 10359, "code": "# -*- encoding: utf-8 -*-\ns = list(input().rstrip())\nalpha = list(map(chr, range(ord('a'), ord('z') + 1)))\n\nfor a in alpha:\n    if a not in s:\n        print(a)\n        break\nelse:\n    print(\"None\")"}
{"label": 80, "index": 10360, "code": "s = input()\ncount =[0 for i in range(26)]\n\nfor i in s:\n    count[ord(i)-ord(\"a\")]+=1\n\n\nfor i in range(len(count)):\n    if count[i] == 0:\n        print(chr(i+ord(\"a\")))\n        break\nelse:\n    print(\"None\")"}
{"label": 80, "index": 10361, "code": "s=input()\nchar=['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\ncheck=False\nfor c in char:\n    if not c in s:\n        print(c,end='')\n        check=True\n        break\nif  check==False:\n    print('None',end='')"}
{"label": 80, "index": 10362, "code": "# -*- coding: utf-8 -*-\n\"\"\"\n\"\"\"\n# \n\ndef main():\n    alphabets = 'abcdefghijklmnopqrstuvwxyz'\n    text = input().strip()\n\n    result = 'None'\n    for c in alphabets:\n        if c not in text:\n            result = c\n            break\n    print(result)\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 80, "index": 10363, "code": "S = input()\nans = None\nfor letter in \"abcdefghijklmnopqrstuvwxyz\":\n    if letter not in S:\n        ans = letter\n        break\nprint(ans)\n"}
{"label": 80, "index": 10364, "code": "abc = 'abcdefghijklmnopqrstuvwxyz'\nS = input()\nfor x in abc:\n    if not x in S:\n        print(x)\n        break\nelse:\n    print('None')"}
{"label": 80, "index": 10365, "code": "from collections import Counter\nS = input()\n\ncounter = dict(Counter(S))\ncounter = sorted(counter) \nalphabets = \"abcdefghijklmnopqrstuvwxyz\"\n\nfound = False\nfor letter in alphabets:\n    if letter in counter:\n        continue\n    else:\n        found = True\n        print(letter)\n        break\n\nif found is not True:\n    print(\"None\")\n"}
{"label": 80, "index": 10366, "code": "import sys\n\nS=[]\n\nS = raw_input()\n\ncheck=[chr(i) for i in range(97, 97+26)]\nn=len(check)\n\nfor i in range (n):\n    o=0\n    if(S.count(check[i])<=0):\n        print check[i]\n        o=1\n        break\n\n\nif(o==0):\n    print \"None\""}
{"label": 80, "index": 10367, "code": "import math\ndef search(x,n):\n\tcurPos=0\n\tlog2=int(math.log(n,2))\n\tnewPos=0\n\tif s[curPos]==x:\n\t\treturn True\n\twhile log2 >=0:\n\t\tnewPos=curPos + (1 << log2)\n\t\tif newPos < n and s[newPos]<=x:\n\t\t\tcurPos=newPos\n\t\tif s[curPos]==x:\n\t\t\treturn True\n\t\tlog2-=1\n\treturn False\n\ns=input()\ns=list(s)\ns.sort()\nn=len(s)\ns_str=[chr(x) for x in range(97,123)]\nFound=False\nfor i in s_str:\n\tres=search(i,n)\n\tif not res:\n\t\tprint(i)\n\t\tFound=True\n\t\tbreak\nif not Found:\n\tprint('None')"}
{"label": 80, "index": 10368, "code": "S = input()\nfor i in range(26):\n    a = chr(ord('a') + i)\n    if not a in S:\n        print(a)\n        break\nelse:\n    print('None')\n"}
{"label": 80, "index": 10369, "code": "\nS = input()\nres = \"None\"\n\nfor c in range(26):\n    if chr(ord('a') + c) not in S:\n        res = chr(ord('a') + c)\n        break\nprint(res)"}
{"label": 80, "index": 10370, "code": "# coding=utf-8\nS = list(raw_input())\n\nalpha = 'abcdefghijklmnopqrstuvwxyz'\nt = True\nfor a in alpha:\n    if a not in S:\n        print a\n        t = False\n        break\nif t:\n    print None"}
{"label": 80, "index": 10371, "code": "S = input()\nalphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\nfor alp in alphabet:\n    if alp not in S:\n        print(alp)\n        break\nelse:\n    print(\"None\")"}
{"label": 80, "index": 10372, "code": "S = input()\nl = 'abcdefghijklmnopqrstuvwxyz'\n\nfor x in l:\n    if not x in S:\n        print(x)\n        break\n    else:\n        if x == 'z':\n            print('None')"}
{"label": 80, "index": 10373, "code": "print(min(set(chr(97+i)for i in range(26))-set(input())or[\"None\"]))"}
{"label": 80, "index": 10374, "code": "s = set(input())\nalp = set('abcdefghijiklmnopqrstuvwxyz')\ntry:\n\tprint(sorted(list(alp - s))[0])\nexcept:\n\tprint('None')"}
{"label": 80, "index": 10375, "code": "string=input()\nl=\"abcdefghijklmnopqrstuvwxyz\"\nfor i in l:\n    if i not in string:\n        print(i)\n        break\nelse:\n    print(\"None\")"}
{"label": 80, "index": 10376, "code": "print((lambda s:next((c for c in map(chr,range(97,123))if c not in s),\"None\"))(input()))"}
{"label": 80, "index": 10377, "code": "\n\ns = input()\ns = set(list(s))\n\nans = 'None'\n\nfor alpha in list('abcdefghijklmnopqrstuvwxyz'):\n    if alpha not in s:\n        ans = alpha\n        break\n\nprint(ans)\n"}
{"label": 80, "index": 10378, "code": "def main():\n    s = input()\n    flag = True\n    for i in range(ord('a'), ord('z')+1):\n        if chr(i) not in s:\n            print(chr(i))\n            flag = None\n            break\n    if flag:\n        print(\"None\")\n        \n\nif __name__ == \"__main__\":\n    main()"}
{"label": 80, "index": 10379, "code": "s = input()\ndata = list(set(s))\nalp = list(\"abcdefghijklmnopqrstuvwxyz\")\ndata.sort()\nfor i in alp:\n    if len(data) == 0:\n        print(i)\n        break\n    else:\n        if i != data[0]:\n            print(i)\n            break\n        else:\n            if i == \"z\":\n                print(\"None\")\n            del data[0]\n"}
{"label": 80, "index": 10380, "code": "S = input()\nls = [chr(i) for i in range(ord(\"a\"),ord(\"z\")+1)]\nfor c in S:\n    if c in ls:\n        ls.remove(c)\nif ls==[]:\n    print(\"None\")\nelse:\n    print(ls[0])"}
{"label": 80, "index": 10381, "code": "st = list(input())\nls = list(set(st))\nabc = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\nset_ab = set(abc) - set(ls)\nans = list(set_ab)\nans.sort()\nif ans:\n    print(ans[0])\nelse:\n    print(\"None\")\n"}
{"label": 80, "index": 10382, "code": "# -*- coding:utf-8 -*-\n\nS = input()\nCHR = [chr(i) for i in range(97, 97+26)]\n\njudge = 1\ni = 0\n\nwhile(judge > 0 and i <= 25):\n    judge = S.count(CHR[i])\n    i = i+1\n\nif(judge==0):\n    print(CHR[i-1])\nelse:\n    print(\"None\")\n\n\n"}
{"label": 80, "index": 10383, "code": "S=set(input())\nk=0\nfor i in range(97, 97+26):\n    s0=set(chr(i))\n    if(not(s0.issubset(S)) and k==0):\n        k=chr(i)\n        break\n    \nif(k!=0):\n    print(k)\nelse:\n    print(\"None\")"}
{"label": 80, "index": 10384, "code": "print((lambda x:\"None\" if not x else min(x))(set(chr(97+i) for i in range(26))-set(input())))"}
{"label": 80, "index": 10385, "code": "S = raw_input()\nss = set(S)\nans = set(\"abcdefghijklmnopqrstuvwxyz\").difference(ss)\n\nif len(ans): print(min(ans))\nelse: print(\"None\")"}
{"label": 80, "index": 10386, "code": "S = input()\nflag = False\nfor i in range(26):\n    c = chr(ord('a')+i)\n    if c not in S:\n        print(c)\n        flag = True\n        break\nif flag == False:\n    print('None')"}
{"label": 80, "index": 10387, "code": "print((lambda x:\"None\" if not x else x[0])(sorted(set(chr(97+i) for i in range(26))-set(input()))))"}
{"label": 80, "index": 10388, "code": "import sys\nS = input()\na = 'abcdefghijklmnopqrstuvwxyz'\na = 'abcdefghijklmnopqrstuvwxyz'\nfor aa in a:\n    if aa in S:\n        pass\n    else:\n        print(aa)\n        sys.exit()\nprint('None')"}
{"label": 80, "index": 10389, "code": "string=raw_input()\nallist=['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\nans='None'\nfor i in range(len(allist)):\n    if allist[i] not in string:\n        ans=allist[i]\n        break\nprint ans\n           "}
{"label": 80, "index": 10390, "code": "a = input()\n\nalpha = [chr(i) for i in range(97, 97+26)]\n\nflag = True;\nfor c in alpha:\n    if c not in a:\n        print(c)\n        flag = False\n        break\n\nif flag:\n    print(\"None\")\n"}
{"label": 80, "index": 10391, "code": "S = input()\n\nfor i in range(97, 97 + 26):\n    if chr(i) not in S:\n        print(chr(i))\n        exit()\n\nprint('None')\n"}
{"label": 80, "index": 10392, "code": "S = input()\ncheck = list(\"abcdefghijklmnopqrstuvwxyz\")\n\nfor c in check:\n    if not c in S:\n        print(c)\n        break\nelse:\n    print(\"None\")"}
{"label": 80, "index": 10393, "code": "s = input()\nswi = 0\nlst = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \\\n       \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \\\n       \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n\nfor i in range(26):\n    if (lst[i] in s) == False:\n        print(lst[i])\n        swi = 1\n        break\nif swi == 0:\n    print(\"None\")"}
{"label": 80, "index": 10394, "code": "bun=input()\nmm=\"abcdefghijklmnopqrstuvwxyz\"\nfor x in range(len(mm)):\n    if mm[x] not in bun:\n        print(mm[x])\n        break\nelse:\n    print(\"None\")\n"}
{"label": 80, "index": 10395, "code": "S=input()\nans='None'\nfor c in range(26):\n  if chr(97+c) not in S:\n    ans = chr(97+c)\n    break\nprint(ans)"}
{"label": 80, "index": 10396, "code": "s = raw_input()\nfor i in range(26):\n    c = chr(ord('a')+i)\n    if c in s:\n        continue\n    else:\n        print c\n        break\nelse:\n    print 'None'\n"}
{"label": 80, "index": 10397, "code": "if __name__ == '__main__':\n    S = input()\n    dic = [chr(i) for i in range(97, 123)]\n    j=0\n    for i in range(len(dic)):\n        if dic[i] not in S:\n            j = 1\n            print(dic[i])\n            break\n    if j == 0:\n        print('None')"}
{"label": 80, "index": 10398, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n \nsys.setrecursionlimit(10**7)\ninf = 10**20\ngosa = 1.0 / 10**10\nmod = 10**9 + 7\n \ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\n \n \ndef main():\n    c = collections.Counter(S())\n    for k in string.ascii_lowercase:\n        if c[k] == 0:\n            return k\n    return 'None'\n \nprint(main())"}
{"label": 80, "index": 10399, "code": "def main():\n    S = input()\n\n    for i in range(97, 123):\n        if not chr(i) in S:\n            ans = chr(i)\n            break\n    else:\n        ans = 'None'\n\n    print(ans)\n\nmain()\n"}
{"label": 81, "index": 10400, "code": "a,b=map(int,input().split())\nprint(a-b if a-b>0 else 0)"}
{"label": 81, "index": 10401, "code": "#ABC072A\n\nx,t=map(int,raw_input().split())\nif x>=t:\n print x-t\nelse:\n print 0\n"}
{"label": 81, "index": 10402, "code": "tmp = input()\nX = int(tmp.split()[0])\nt = int(tmp.split()[1])\nif X - t >= 0:\n    print(X - t)\nelse:\n    print(0)"}
{"label": 81, "index": 10403, "code": "# -*- coding:utf-8 -*-\nX, t = map(int, input().split())\nif X-t >= 0:\n    print(X-t)\nelse:\n    print(0)"}
{"label": 81, "index": 10404, "code": "X, t=[int(i) for i in input().split()]\nif(X-t < 0):\n    print(0)\nelse:\n    print(X-t)"}
{"label": 81, "index": 10405, "code": "nm = input().strip().split(' ')\nn = int(nm[0])\nm = int(nm[1])\n        \nr = n- m\n        \nif r < 0:\n    r =0\nprint(r)"}
{"label": 81, "index": 10406, "code": "X,t=map(int,input().split())\nif (X>t):\n print(X-t)\nelse:\n print(0)\n\n"}
{"label": 81, "index": 10407, "code": "# coding: utf-8\ndef get_ln_inputs():\n    return input().split()\n\n\ndef get_ln_int_inputs():\n    return list(map(int, get_ln_inputs()))\n\n\ndef main():\n    X, t = get_ln_int_inputs()\n    print(max(0, X - t))\n    return\n\n\nmain()"}
{"label": 81, "index": 10408, "code": "x, t = map(int, input().split(\" \"))\n\nprint(max(x-t, 0))\n"}
{"label": 81, "index": 10409, "code": "x,t=map(int, input().split())\nprint(max(0, x-t))\n"}
{"label": 81, "index": 10410, "code": "X, t = [int(x) for x in input().split()]\n\nRest = X - t\nif Rest < 0:\n  Rest = 0\n\nprint(Rest)"}
{"label": 81, "index": 10411, "code": "i = list(map(int, input().split()))\nif i[0] > i[1]:\n    print(i[0]-i[1])\nelse:\n    print(0)\n"}
{"label": 81, "index": 10412, "code": "X, t = map(int, input().split())\nif X <= t:\n    print(0)\nelse:\n    print(str(X - t))"}
{"label": 81, "index": 10413, "code": "Xt = list(map(int,input().split()))\nprint(max(Xt[0]-Xt[1],0))"}
{"label": 81, "index": 10414, "code": "x,t = map(int, input().split())\nm = max(x-t,0)\nprint(m)"}
{"label": 81, "index": 10415, "code": "X, t = input().split()\nX, t = int(X),int(t)\n\nres = X -t\n\nif res >= 0:\n    print(res)\nelse:\n    print(0)"}
{"label": 81, "index": 10416, "code": "X, t = [int(x) for x in input().split()]\n\nprint(X - t if X >= t else 0)"}
{"label": 81, "index": 10417, "code": "X, t = map(int, input().split())\nif X > t:\n    print(X - t)\nelse:\n    print(0)"}
{"label": 81, "index": 10418, "code": "X, t = map(int, input().split(' '))\nans = X - t\nif ans < 0:\n    ans = 0\nprint(ans)"}
{"label": 81, "index": 10419, "code": "x , t = map(int ,input().split() )\n\n\nif t < x:\n  print( x - t )\nelse:\n  print( 0 )"}
{"label": 81, "index": 10420, "code": "X, t = list(map(int, input().split()))\n\ndif = X - t\nif dif < 0:\n    print(0)\nelse:\n    print(dif)"}
{"label": 81, "index": 10421, "code": "x, t = map(int, input().split())\nif t > x:\n  print(0)\nelse:\n  print(x - t)"}
{"label": 81, "index": 10422, "code": "x, y = list(map(int, input().split()))\nprint(x-y if x-y > 0 else 0)"}
{"label": 81, "index": 10423, "code": "temp = input().split(\" \")\nsuna = int(temp[0])\ntime = int(temp[1])\nans = suna - time\nif ans <= 0:\n    ans = 0\nprint(ans)\n "}
{"label": 81, "index": 10424, "code": "x, t = map(int, input().split())\nprint(x-t if x > t else 0)"}
{"label": 81, "index": 10425, "code": "def a():\n    x, t = map(int, input().split())\n    print(max(0, x - t))\n\na()\n"}
{"label": 81, "index": 10426, "code": "# -*- coding: utf-8 -*-\n\nx, t = list(map(int, input().split()))\nprint(x - t) if x - t >= 0 else print(0)\n"}
{"label": 81, "index": 10427, "code": "def read(): return list(map(int, input().split()))\n\nx, t = read()\nprint(max(0, x - t))"}
{"label": 81, "index": 10428, "code": "a,b=map(int,input().split())\nprint(max(0,a-b))"}
{"label": 81, "index": 10429, "code": "X, t = map(int, input().split())\nprint(max(0, X-t))"}
{"label": 81, "index": 10430, "code": "X,t = map(int, input().split())\nif X-t<0:\n    print(str(0))\nelse:\n    print(str(X-t))"}
{"label": 81, "index": 10431, "code": "a, b = map(int, input().split())\nprint(max(0, a-b))"}
{"label": 81, "index": 10432, "code": "X, t = map(int, input().split())\nif X >= t:\n    print(X - t)\nelse:\n    print(0)\n"}
{"label": 81, "index": 10433, "code": "import numpy as np\nx, t = map(int, input().split())\nprint(max(x-t, 0))"}
{"label": 81, "index": 10434, "code": "X,t = map(int, input().split())\n\nans = X-t\nif ans < 0:\n    ans = 0\n\nprint(str(ans))"}
{"label": 81, "index": 10435, "code": "a, b = map(int, input().split())\nprint(max(0, a-b))"}
{"label": 81, "index": 10436, "code": "def hourglass():\n    X, t = list(map(int, input().split(\" \")))\n    if X - t <= 0:\n        print(0)\n    else:\n        print(X - t)\n        \n \nhourglass()"}
{"label": 81, "index": 10437, "code": "X, t = map(int, input().split())\t\t# 5 7\n\nprint( max(0, X-t) )\n"}
{"label": 81, "index": 10438, "code": "def main():\n    X, t = map(int, input().split())\n    print(max(X - t, 0))\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 81, "index": 10439, "code": "X, t = map(int, input().split())\nprint(max(0, X - t))\n"}
{"label": 81, "index": 10440, "code": "X,t=list(map(int,raw_input().split()))\n\nif X-t>=0:\n\tprint X-t\nelif X-t<0:\n\tprint 0"}
{"label": 81, "index": 10441, "code": "X, t = map(int,input().split())\nprint(max(0, X-t))"}
{"label": 81, "index": 10442, "code": "X,t = [int(i) for i in input().split()]\nprint(max(X-t,0))"}
{"label": 81, "index": 10443, "code": "#!usr/bim/python\n#! -*- coding: utf-8 -*-\n\nxg = raw_input()\nxg = xg.split()\nx,g = map(int,xg)\n\nans = x-g\n\nif ans < 0:\n    ans = 0\n\nprint ans\n"}
{"label": 81, "index": 10444, "code": "if __name__ == '__main__':\n    x, t = list(map(int, input().split(\" \")))\n    print(max(0, x - t))\n"}
{"label": 81, "index": 10445, "code": "X,t = map(int,input().split(\" \"))\n\nif X-t>0:\n    print(X-t)\nelse:\n    print(0)\n"}
{"label": 81, "index": 10446, "code": "# -*- coding: utf-8 -*-\n\"\"\"\n\n\"\"\"\n\n\n\nif __name__ == '__main__':\n    start, elapse = [int(x) for x in input().split(' ')]\n    if elapse > start:\n        print('0')\n    else:\n        print('{}'.format(start - elapse))\n\n"}
{"label": 81, "index": 10447, "code": "x,t=map(int,input().split())\nprint(max(x-t,0))"}
{"label": 81, "index": 10448, "code": "X, t = list(map(int, input().split()))\nprint(max(0, X - t))\n"}
{"label": 81, "index": 10449, "code": "x,t=map(int,input().split())\nif x>= t:\n    print(x-t)\nelse:\n    print(0)"}
{"label": 81, "index": 10450, "code": "if __name__ == '__main__':\n    X, t = [int(i) for i in input().split()]\n    if X - t < 0:\n        print(0)\n    else:\n        print(X - t)\n"}
{"label": 81, "index": 10451, "code": "import sys\n\ndef main():\n    X, t = list(map(int, input().split()))\n    if X - t >= 0:\n        print(X - t)\n    else:\n        print(0)\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 81, "index": 10452, "code": "xt = list(map(int,input().split()))\nif xt[0] > xt[1]:\n    print(xt[0]-xt[1])\nelse:\n    print(0)"}
{"label": 81, "index": 10453, "code": "a, b = map(int, input().split())\nprint(max(0, a - b))"}
{"label": 81, "index": 10454, "code": "i, j = map(int, input().split(\" \"))\nprint(i-j if i >= j else 0)\n"}
{"label": 81, "index": 10455, "code": "x,t = map(int, raw_input().split())\nprint max(0, x-t)\n"}
{"label": 81, "index": 10456, "code": "X, t = map(int, input().split())\nif X > t:\n    print(X - t)\nelse:\n    print(0)"}
{"label": 81, "index": 10457, "code": "from sys import stdin\nn,x = map(int,stdin.readline().split())\nprint max(0,n-x)"}
{"label": 81, "index": 10458, "code": "X,t =map(int,input().split())\nif X >= t:\n    print(X-t)\nelse:\n    print(0)"}
{"label": 81, "index": 10459, "code": "X,t=map(int,raw_input().split(' '))\n\nr=X-t\n\nif r<0:\n    print 0\nelse:\n    print r"}
{"label": 81, "index": 10460, "code": "def solve():\n    X, t = list(map(int, input().split(\" \")))\n    if X - t <= 0:\n        print(0)\n    else:\n        print(X - t)\n        \n\nsolve()"}
{"label": 81, "index": 10461, "code": "X,t=map(int,input().split())\nprint(X-t) if X-t>0 else print(0)"}
{"label": 81, "index": 10462, "code": "x,t = map(int,input().split())\nans = x - t\nif ans > 0:\n    print(ans)\nelse:\n    print(\"0\")"}
{"label": 81, "index": 10463, "code": "if __name__ == '__main__':\n    X, t = map(int, input().split())\n    re = X-t\n    if re>0:\n        print(re)\n    else:\n        print(0)"}
{"label": 81, "index": 10464, "code": "x, t = map(int, input().split())\n\nprint(max(x - t, 0))"}
{"label": 81, "index": 10465, "code": "x,t = map(int,raw_input().split())\nif x < t:\n    print 0\nelse:\n    print x - t"}
{"label": 81, "index": 10466, "code": "X, t = map(int, input().split())\nprint(max(0, X-t))"}
{"label": 81, "index": 10467, "code": "x,y=map(int, input().split())\nprint(x-y if x-y>=0 else 0)\n"}
{"label": 81, "index": 10468, "code": "x,t=map(int,input().split())\nprint(max(x-t,0))"}
{"label": 81, "index": 10469, "code": "X, t = [int(x) for x in input().split()]\nif X<=t :\n    print(0)\nelse :\n    print(X-t)\n"}
{"label": 81, "index": 10470, "code": "l = list(map(int, input().split()))\na1=l[0]-l[1]\nif a1>0:\n    print(a1)\nelse:\n    print(0)"}
{"label": 81, "index": 10471, "code": "a, b = map(int,input().split())\nif a >= b : print (a-b)\nelse : print (0)"}
{"label": 81, "index": 10472, "code": "a, t = map(int, raw_input().split())\nif t >= a:\n    print(0)\nelse:\n    print(a-t)"}
{"label": 81, "index": 10473, "code": "xt=input().split()\nx=int(xt[0])\nt=int(xt[1])\nans=x-t\nif ans<0:\n    ans=0\nprint(ans)\n"}
{"label": 81, "index": 10474, "code": "import numpy as np\nx, t = map(int, input().split())\nprint(np.max(np.array([x-t, 0])))"}
{"label": 81, "index": 10475, "code": "XT=(input()).split(' ')\nprint(((int)(XT[0])-(int)(XT[1]) )if (int)(XT[0])>(int)(XT[1]) else 0)"}
{"label": 81, "index": 10476, "code": "x,t=map(int, input().split())\nprint(max(x-t, 0))"}
{"label": 81, "index": 10477, "code": "X, t = list(map(int, input().split(' ')))\nprint(X - t if (X - t) >= 0 else 0)\n"}
{"label": 81, "index": 10478, "code": "# problem A\nX, t = map(int, input().split())\nif X-t > 0:\n    print(X-t)\nelse:\n    print(0)"}
{"label": 81, "index": 10479, "code": "X, t = list(map(int, input().split()))\nprint(max(0, X-t))\n"}
{"label": 81, "index": 10480, "code": "import os \na,b = os.read(0,100).split(b' ')\na = int(a.decode())\nb = int(b.decode())\nprint(max(a-b,0))"}
{"label": 81, "index": 10481, "code": "x, t = list(map(int, input().split()))\nprint(max((x - t), 0))"}
{"label": 81, "index": 10482, "code": "x = input().split()\na = int(x[0])\nb = int(x[1])\nc = a-b\nif a <= b:\n print(\"0\")\nelse:\n print(c)"}
{"label": 81, "index": 10483, "code": "x, t = (int(i) for i in input().split())\nans = x-t\nif ans < 0:\n    ans = 0\nprint(ans)"}
{"label": 81, "index": 10484, "code": "X, t = list(map(int, input().split()))\nprint(max(0, X-t))"}
{"label": 81, "index": 10485, "code": "a =  map(int, raw_input().strip().split())\nans = a[0] - a[1]\nif ans > 0:\n\tprint(ans)\nelse:\n\tprint('0')"}
{"label": 81, "index": 10486, "code": "myinput=input()\nX,t=map(int,myinput.split())\nif X<t:\n    print(0)\nelse:\n    print(X-t)"}
{"label": 81, "index": 10487, "code": "# encoding: \"utf-8\"\n\nclass Stdin:\n    @staticmethod\n    def read_line(converter=str):\n        return [converter(x) for x in input().split()]\n    \n    @staticmethod\n    def read_lines(n, converter=str):\n        result = list()\n        for _ in range(n):\n            result.append(Stdin.read_line(converter))\n        return result\n    \n    @staticmethod\n    def convert(data, converter):\n        assert(len(data) == len(converter))\n        return tuple(map(lambda x, f: f(x), data, converter))\n\n    @staticmethod\n    def convert_lines(datas, n, converter):\n        return [converter(data, n, converter) for data in datas]\n\n\ndef main():\n    x, t = Stdin.read_line(converter=int)\n    r = x - t\n    if r < 0:\n        r = 0\n    print(r)\n\nif __name__ == \"__main__\":\n    main()"}
{"label": 81, "index": 10488, "code": "xtstr = input().split()\nx, t = int(xtstr[0]),  int(xtstr[1])\nif x >= t:\n    print(x-t)\nelse:\n    print('0')"}
{"label": 81, "index": 10489, "code": "X, t = map(int, input().split())\ndiff = X-t\nif diff > 0:\n  print (diff)\nelse:\n  print (0)"}
{"label": 81, "index": 10490, "code": "a = map( int, raw_input().split(' '))\nif (a[0] - a[1] >= 0):\n\tprint a[0] - a[1]\nelse:\n\tprint 0"}
{"label": 81, "index": 10491, "code": "x, t = (int(i) for i in input().split())\nif x-t<0:\n    print(0)\nelse:\n    print(x-t)"}
{"label": 81, "index": 10492, "code": "X, t = map(int, input().split())\n \nif X-t>=0:\n    print(X-t)\nelse:\n    print(\"0\")"}
{"label": 81, "index": 10493, "code": "def solve():\n    X, t = map(int, input().split())\n    if (X-t) < 0:\n        print(0)\n    else:\n        print(X-t)\n\nif __name__ == '__main__':\n    solve()\n"}
{"label": 81, "index": 10494, "code": "X, t = map(int, input().split())\n\nres = max(0, X-t)\nprint(res)"}
{"label": 81, "index": 10495, "code": "X, t = map(int, input().split())\nif X <= t:\n\tprint('0')\nelse:\n\tprint(X-t)"}
{"label": 81, "index": 10496, "code": "X, t = map(int, input().split())\n\ng = X - t\n\nif g >= 0:\n    print(g)\nelse:\n    print(0)\n \n"}
{"label": 81, "index": 10497, "code": "X, t = map(int, input().split())\nif X>t:\n    print(X - t)\nelse:\n    print(0)"}
{"label": 81, "index": 10498, "code": "x,t = map(int,input().split())\nprint(max(0,x-t))"}
{"label": 81, "index": 10499, "code": "#ABC072A\n\nx,t=map(int,raw_input().split())\nif x-t>0:\n print x-t\nelse:\n print 0\n"}
{"label": 81, "index": 10500, "code": "a,b = map(int, input().split())\nc=a-b\nif c>=0:\n    print(c)\nelse:\n    print(0)"}
{"label": 81, "index": 10501, "code": "X, t = map(int, input().split())\nprint(X - t if X - t > 0 else 0)"}
{"label": 81, "index": 10502, "code": "a, b = map(int, input().split())\nprint(max(0, a - b))"}
{"label": 81, "index": 10503, "code": "from collections import defaultdict\nfrom itertools import product, groupby\nfrom math import pi\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right\nINF = 10 ** 10\n\n\ndef main():\n    X, t = map(int, input().split())\n    print(max(0, X - t))\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 81, "index": 10504, "code": "x,t = map(int, input().split())\nif x -t > 0:\n    print(x-t)\nelse:\n    print(0)"}
{"label": 81, "index": 10505, "code": "\n\nX, t = map(int, input().split())\nY = max(0, X - t)\nprint(Y)"}
{"label": 81, "index": 10506, "code": "# -*- encoding: utf-8 -*-\nx, t = map(int, input().rstrip().split(' '))\n\nprint(max(0, x - 1 * t))"}
{"label": 81, "index": 10507, "code": "def main():\n    x, t = map(int, input().split())\n\n    if t < x: print(x-t)\n    else: print(0)\n\n\nif __name__ == \"__main__\":\n    main()"}
{"label": 81, "index": 10508, "code": "i, j = [int(i) for i in input().split()]\nprint(i-j) if j < i else print(0)"}
{"label": 81, "index": 10509, "code": "a,b=map(int,input().split())\nprint(max(a-b,0))"}
{"label": 81, "index": 10510, "code": "#\u7802\u6642\u8a08\u306e\u7802X(\u79d2)\u3092\u30bb\u30c3\u30c8 #\u6e2c\u3063\u305f\u6642\u9593t\u3092\u30bb\u30c3\u30c8\nX , t = map(int,input().split())\n#\u6b8b\u308a\u6642\u9593\u3092\u8868\u793a (X - t)\n#X > t\u306e\u3068\u304d\nif X > t:\n    time = X - t\n#X <= t\u306e\u3068\u304d\nelse:\n    time = 0\nprint(time)\n"}
{"label": 81, "index": 10511, "code": "X, t = map(int, input().split())\nprint(max(0, X - t))\n"}
{"label": 81, "index": 10512, "code": "X, t = list(map(int, input().split()))\n\nprint(max(X - t, 0))\n"}
{"label": 81, "index": 10513, "code": "def main():\n    X, t = [int(i) for i in input().split()]\n    #print(X)\n    #print(t)\n    \n    ans = X - t\n    \n    if(ans < 0):\n        ans = 0\n        \n    print(ans)\n    \nif __name__==\"__main__\":\n    main()"}
{"label": 81, "index": 10514, "code": "X, t = map(int, raw_input().split())    \nprint max(X - t, 0)\n"}
{"label": 81, "index": 10515, "code": "X, t = map(int, input().split())\n\nif t <= X:\n    print(X - t)\nelse:\n    print(0)\n"}
{"label": 81, "index": 10516, "code": "#!/usr/bin/env python\n\nX,t=map(int,input().split())\nif t>X:\n    ans=0\nelse:\n    ans=X-t\n\nprint(ans)"}
{"label": 81, "index": 10517, "code": "n, m = map(int, input().split())\nx = n - m\nif x <= 0:\n    x = 0\nprint(x)"}
{"label": 81, "index": 10518, "code": "l = input().split()\nx = int(l[0])\nt = int(l[1])\ny = x - t\nif y > 0:\n\tprint('{0}'.format(y))\nelse:\n\tprint('0')"}
{"label": 81, "index": 10519, "code": "import sys\n\na = map(int,raw_input().strip().split(\" \"))\n\nresult = a[0] - a[1]\n\nif result >= 0:\n    print result\nelse:\n    print 0"}
{"label": 81, "index": 10520, "code": "a,b=map(int,raw_input().split())\nprint a-b if a>b else 0"}
{"label": 81, "index": 10521, "code": "x,y=map(int,input().split())\nprint(max(0,x-y))"}
{"label": 81, "index": 10522, "code": "def main():\n    X, t = [int(i) for i in input().split()]\n    #print(X)\n    #print(t)\n    \n    ans = X - t\n    \n    if(ans < 0):\n        ans = 0\n        \n    print(ans)\n    \nif __name__==\"__main__\":\n    main()"}
{"label": 81, "index": 10523, "code": "print(max(0, (lambda x:x[0]-x[1])([int(i) for i\n             in input().split()])))"}
{"label": 81, "index": 10524, "code": "X ,t=map(int,input().split())\n\nif X-t>0:\n    print(X-t)\nelse:\n    print(0)\n"}
{"label": 81, "index": 10525, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\neps = 1.0 / 10**10\nmod = 10**9+7\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\n\n\ndef main():\n    x,t = LI()\n\n    return max(x-t,0)\n\n\nprint(main())\n\n\n\n\n"}
{"label": 81, "index": 10526, "code": "import os \na,b = os.read(0,100).split(b' ')\na = int(a.decode())\nb = int(b.decode())\nos.write(1,str(max(a-b,0)).encode())"}
{"label": 81, "index": 10527, "code": "def A_Sandglass2(X, t):\n    return max(X - t, 0)\n\nX,t = [int(i) for i in input().split()]\nprint(A_Sandglass2(X, t))"}
{"label": 81, "index": 10528, "code": "X, t = map(int, raw_input().split())\nprint max(X-t, 0)"}
{"label": 81, "index": 10529, "code": "tmp=map(int, raw_input().split(\" \"))\nif tmp[0]<tmp[1]:\n    print 0\nelse:\n    print tmp[0]-tmp[1]\n"}
{"label": 82, "index": 10530, "code": "print(input()[::2])\n"}
{"label": 82, "index": 10531, "code": "s = input()\ns2 = ''\nfor i in range(len(s)):\n    if (i % 2 == 0):\n        s2 += s[i]\n\nprint(s2) "}
{"label": 82, "index": 10532, "code": "s = input()\nt = len(s)\nfor i in range(0,t,2) :\n    print (s[i] , end='')"}
{"label": 82, "index": 10533, "code": "s=input()\nl=[x for x in s[::2]]\nprint(\"\".join(l))"}
{"label": 82, "index": 10534, "code": "s = input()\no = \"\"\nfor i, ss in enumerate(s):\n    if i % 2 == 0:\n        o = o + ss\nprint(o)"}
{"label": 82, "index": 10535, "code": "s = input()\n\nprint(s[::2])\n"}
{"label": 82, "index": 10536, "code": "s = input()\nfor i in range(len(s)):\n    if i % 2 == 0:\n        print(s[i], end=\"\")\nprint(\"\")"}
{"label": 82, "index": 10537, "code": "print(input()[::2])"}
{"label": 82, "index": 10538, "code": "def main():\n    S =  input()\n    #print(S)\n    #print(S[1])\n    #print(t)\n    \n    string = \"\".join( [S[i] for i in range(0, len(S), 2)] )\n    print(string)\n    \n    \nif __name__==\"__main__\":\n    main()"}
{"label": 82, "index": 10539, "code": "s = raw_input()\nprint \"\".join(s[i] for i in xrange(len(s)) if i%2 == 0)"}
{"label": 82, "index": 10540, "code": "print(\"\".join([j for i,j in enumerate(input()) if i%2==0]))\n"}
{"label": 82, "index": 10541, "code": "#coding:utf-8\n\nstring = input()\n\nres = \"\"\nfor i, char in enumerate(string):\n    if i % 2 == 0:\n        res += char\nprint (res)\n"}
{"label": 82, "index": 10542, "code": "s = input()\nt = len(s)\nfor i in range(0,t,2) :\n    print (s[i] , end='')\n    \nprint()"}
{"label": 82, "index": 10543, "code": "s = input()\nline = s[::2]\nprint(line)"}
{"label": 82, "index": 10544, "code": "def main():\n    print(input()[::2])\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 82, "index": 10545, "code": "s = input()\nfor i, e in enumerate(s):\n    if i % 2 == 0:\n        print(e, end=\"\")\nprint(\"\")\n"}
{"label": 82, "index": 10546, "code": "import sys\n\n# sys.stdin = open('b1.in')\n\n\ndef read_int_list():\n    return list(map(int, input().split()))\n\n\ndef read_str_list():\n    return input().split()\n\n\ndef read_int():\n    return int(input())\n\n\ndef read_str():\n    return input()\n\n\ndef main():\n    s = read_str()\n    res = s[0::2]\n    print(res)\n\n\nmain()\n"}
{"label": 82, "index": 10547, "code": "s = input()\nfor i in range(0, len(s), 2):\n    print(s[i], end='')\nprint()"}
{"label": 82, "index": 10548, "code": "import sys\n\n\nS = raw_input()\n\nS_len=len(S)\n\nif(S_len%2==0):\n    S_len=S_len/2\nelif(S_len%2>0):\n    S_len=S_len/2+1\n\nlist=''\nfor i in range(S_len):\n    i=i*2\n    list+=S[i]\n\nprint list"}
{"label": 82, "index": 10549, "code": "print(str(input())[::2])"}
{"label": 82, "index": 10550, "code": "def B_OddString(s):\n    ans = ''\n    for i in range(len(s)):\n        if i % 2 == 0:\n            ans += s[i]\n    return ans\n\ns = input()\nprint(B_OddString(s))"}
{"label": 82, "index": 10551, "code": "def oddOut():\n    s = str(input())\n    print(s[::2])\noddOut()"}
{"label": 82, "index": 10552, "code": "def b():\n    s = input()\n    print(s[::2])\n\nb()\n"}
{"label": 82, "index": 10553, "code": "s = input()\na = \"\"\n\nfor i in range(0,len(s),2):\n    a = a+s[i]\n    \nprint(a)\n"}
{"label": 82, "index": 10554, "code": "s = input()\nss = [s_ for idx, s_ in enumerate(list(s)) if idx % 2 == 0]\nprint(''.join(ss))\n"}
{"label": 82, "index": 10555, "code": "s = input()\n\nfor i , t in enumerate(s):\n  if i%2 == 0:\n    print(t,end = \"\")\nprint()"}
{"label": 82, "index": 10556, "code": "s=input()\nprint(s[::2])"}
{"label": 82, "index": 10557, "code": "print(input()[::2])"}
{"label": 82, "index": 10558, "code": "print(input()[::2])\n"}
{"label": 82, "index": 10559, "code": "print(input()[::2])"}
{"label": 82, "index": 10560, "code": "print(input()[::2])"}
{"label": 82, "index": 10561, "code": "s = str(input())\nprint(s[::2])\n"}
{"label": 82, "index": 10562, "code": "from sys import stdin\na = stdin.readline().strip()\nans = \"\"\nl = len(a)\nfor i in xrange(l):\n if i%2==0:\n  ans += a[i]\nprint ans"}
{"label": 82, "index": 10563, "code": "print(\"\".join(input()[0::2]))\n"}
{"label": 82, "index": 10564, "code": "n = list(input())\nfor i in range(len(n)):\n    if i%2 == 0: print(n[i],end=\"\")\nprint()"}
{"label": 82, "index": 10565, "code": "s = input()\nprint(''.join([c for i, c in enumerate(s) if i % 2 == 0]))"}
{"label": 82, "index": 10566, "code": "tmp=map(str, raw_input())\n\narr=[]\nfor n,i in enumerate(tmp):\n    if n%2==0:\n        arr.append(i)\n\nprint \"\".join(arr)\n"}
{"label": 82, "index": 10567, "code": "print(input()[0::2])"}
{"label": 82, "index": 10568, "code": "nm = input().strip()\n\nprint(nm[::2])"}
{"label": 82, "index": 10569, "code": "S = input()\nans = \"\"\n\nfor i in range(0, len(S), 2):\n    ans += S[i]\n\nprint(ans)"}
{"label": 82, "index": 10570, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\n\ndef main():\n    S = input()\n    print(S[::2])\n\nif __name__ == \"__main__\": main()\n"}
{"label": 82, "index": 10571, "code": "s=input()\nans=''\nfor i in range(0, len(s), 2) :\n    ans+=s[i]\nprint(ans)"}
{"label": 82, "index": 10572, "code": "s = input()\nans = ''\ncount = 0\nwhile True:\n    ans += s[count]\n    count += 1\n    if len(s) == count:\n        break\n    count += 1\n    if len(s) == count:\n        break\n\nprint(ans)"}
{"label": 82, "index": 10573, "code": "print(input()[::2])"}
{"label": 82, "index": 10574, "code": "s = raw_input()\n\nans = \"\"\n\nfor i in range(len(s)):\n    if ((i + 1) % 2) != 0:\n        ans += s[i]\n\nprint ans"}
{"label": 82, "index": 10575, "code": "print(input()[::2])"}
{"label": 82, "index": 10576, "code": "# coding: utf-8\n# Here your code !\nstr =\"\"\ni =1\nfor j in input():\n    if i%2==1:\n        str+=j\n    i+=1\nprint(str)"}
{"label": 82, "index": 10577, "code": "# problem B\ns = input()\nn = len(s)\n\nout = \"\"\nfor i in range(0, n, 2):\n    out += s[i]\nprint(out)"}
{"label": 82, "index": 10578, "code": "import sys\na = sys.stdin.readline().strip()\nprint (a[::2])\n"}
{"label": 82, "index": 10579, "code": "a=raw_input()\nb=list(a)\nc=1\nans=\"\"\nfor i in b:\n  if c%2==1:\n    ans+=i\n  c+=1\nprint ans"}
{"label": 82, "index": 10580, "code": "S = input()\n\nres = \"\"\n\nfor i, v in enumerate(S):\n    if i % 2 == 0:\n        res += v\n\nprint(res)\n"}
{"label": 82, "index": 10581, "code": "s = input()\nans = \"\"\nn = len(s)\nfor i in range(len(s)):\n    if i % 2 == 0:\n        ans = ans + s[i]\nprint(ans)"}
{"label": 82, "index": 10582, "code": "a = raw_input()\ns = \"\"\nfor i in range(0, len(a), 2 ):\n\ts = s + a[i]\nprint s"}
{"label": 82, "index": 10583, "code": "s = input()\nprint(s[::2])"}
{"label": 82, "index": 10584, "code": "s = input()\nl = []\nfor i in range(len(s)):\n    if i % 2 == 0:\n        l.append(s[i])\n\nprint(''.join(l))\n"}
{"label": 82, "index": 10585, "code": "temp = input().split(\" \")\nmojis = list(temp[0])\nans = \"\"\nfor a in range(len(mojis)):\n    if a % 2 == 0:\n        ans = ans + mojis[a]\nprint(ans)\n "}
{"label": 82, "index": 10586, "code": "print raw_input()[::2]"}
{"label": 82, "index": 10587, "code": "S = input()\nt = \"\"\nfor i in range(0, len(S), 2):\n  t = t + S[i]\n\nprint(t)"}
{"label": 82, "index": 10588, "code": "# coding: utf-8\ndef get_ln_inputs():\n    return input().split()\n\n\ndef get_ln_int_inputs():\n    return list(map(int, get_ln_inputs()))\n\n\ndef main():\n    print(get_ln_inputs()[0][::2])\n\n\nmain()"}
{"label": 82, "index": 10589, "code": "st=input()\ns=\"\"\nfor i in range(0,len(st)):\n    if i % 2 ==0:\n        s+=str(st[i])\n    else:\n        pass\nprint(s)\n"}
{"label": 82, "index": 10590, "code": "if __name__ == '__main__':\n    STR = input()\n    ans = ''\n    for i in range(0, STR.__len__(), 2):\n        ans += STR[i:i+1]\n    print(ans)\n"}
{"label": 82, "index": 10591, "code": "def main():\n    S = input()\n    print(S[::2])\n\nmain()\n"}
{"label": 82, "index": 10592, "code": "myinput=input()\nprint(myinput[::2])"}
{"label": 82, "index": 10593, "code": "def main():\n    print(''.join([c for c in input()[::2]]))\n\n\nif __name__ == \"__main__\":\n    main()"}
{"label": 82, "index": 10594, "code": "word = input()\n\nanswer = ''\n\nfor i in range(0, len(word), 2):\n    answer += word[i]\n\nprint(answer)\n\n"}
{"label": 82, "index": 10595, "code": "s=input()\nprint(s[::2])"}
{"label": 82, "index": 10596, "code": "s = input()\n\nprint(s[::2])\n"}
{"label": 82, "index": 10597, "code": "s=input()\nr=\"\"\nfor i in range(len(s)):\n    if i%2==0:\n        r+=s[i]\nprint(r)"}
{"label": 82, "index": 10598, "code": "s=input()\n\nprint(s[0::2])"}
{"label": 82, "index": 10599, "code": "s = input()\nfor i in range(0, len(s), 2):\n\tprint(s[i], end = '')"}
{"label": 82, "index": 10600, "code": "S = input()\nd = \"\"\n\nfor i, s in enumerate(S):\n    if i%2 == 0:\n        d += s\n\nprint(d)\n"}
{"label": 82, "index": 10601, "code": "s = input()\nans = ''\nfor i in range(len(s)):\n    if i % 2 == 0:\n        ans += s[i] \nprint(ans)\n"}
{"label": 82, "index": 10602, "code": "print \"\".join(map(str, [c for i,c in enumerate(raw_input()) if i % 2 == 0]))\n"}
{"label": 82, "index": 10603, "code": "print(str(input())[::2])"}
{"label": 82, "index": 10604, "code": "s = input()\nl = len(s)\nfor i in range(l):\n  if i % 2 == 0:\n    print(s[i], end='')"}
{"label": 82, "index": 10605, "code": "import sys\n\ndef main():\n    S = sys.stdin.readline()[:-1]\n    print(S[::2])\n\nif __name__ == '__main__':\n    main()"}
{"label": 82, "index": 10606, "code": "print(input()[::2])"}
{"label": 82, "index": 10607, "code": "def read_line(*types): return [f(a) for a, f in zip(input().split(), types)]\n\ns, = read_line(str)\n\nfor i in range(len(s)):\n    if i % 2 == 0:\n        print(s[i], end='')\n"}
{"label": 82, "index": 10608, "code": "s = str(input())\nprint(s[0::2])"}
{"label": 82, "index": 10609, "code": "s = input()\nresult = \"\" \nfor i in range(0, len(s), 2):\n    result += s[i]\n    \nprint(result)"}
{"label": 82, "index": 10610, "code": "# -*- coding: utf-8 -*-\n\"\"\"\n\n\"\"\"\n\n\n\nif __name__ == '__main__':\n    txt = input()\n    result = txt[::2]\n    print(result)\n"}
{"label": 82, "index": 10611, "code": "print(input()[0::2])"}
{"label": 82, "index": 10612, "code": "s = input()\nl = len(s)\nans = []\nfor i in range(l):\n    if i % 2 == 0:\n        ans.append(s[i])\ns = \"\".join(ans)\nprint(s)"}
{"label": 82, "index": 10613, "code": "s = input()\nans = \"\"\nfor i in range(len(s)):\n  if(i % 2 == 0):\n    ans = ans + s[i]\n    \nprint(ans)"}
{"label": 82, "index": 10614, "code": "S = input()\n\nresult = \"\"\n\nfor i in range(len(S)):\n    if i % 2 == 0:\n        result += S[i]\n\nprint(result)\n"}
{"label": 82, "index": 10615, "code": "s=input()\nfor i in range(len(s)):\n    if i%2==0:print(s[i],end=\"\")"}
{"label": 82, "index": 10616, "code": "print(\"\".join(list(input())[::2]))"}
{"label": 82, "index": 10617, "code": "print(input()[::2])"}
{"label": 82, "index": 10618, "code": "input_line1 = raw_input()\nextract1 = input_line1[::2]\nprint(extract1)"}
{"label": 82, "index": 10619, "code": "S = input()\narr = []\nfor i in range(len(S)):\n    if i%2 == 0:\n        arr.append(S[i])\nprint(''.join(arr))\n"}
{"label": 82, "index": 10620, "code": "# coding: utf-8\ns = raw_input()\nprint s[0::2]"}
{"label": 82, "index": 10621, "code": "# -*- coding:utf-8 -*-\ns = list(input())\na = [ s[tmp] for tmp in range(len(s)) if tmp%2 == 0 ]\nprint(''.join(a))"}
{"label": 82, "index": 10622, "code": "s = input()\nans = \"\"\nfor i in range(0, len(s), 2):\n    ans += s[i]\nprint(ans)"}
{"label": 82, "index": 10623, "code": "s = list(input())\nn = len(s)\nans = \"\"\nfor i in range(0, n, 2):\n    ans += s[i]\nprint(ans)\n"}
{"label": 82, "index": 10624, "code": "s = input()\nans = \"\"\nfor i in range(0,len(s),2):\n    ans += s[i]\nprint(ans)\n"}
{"label": 82, "index": 10625, "code": "s = input();print(s[::2]);"}
{"label": 82, "index": 10626, "code": "s = input()\nfor i in range(0, len(s), 2):\n    print(s[i], end='')\nprint()\n"}
{"label": 82, "index": 10627, "code": "import sys\n\nword = raw_input()\nodd = ''\nindex = 1\n\nfor letter in word:\n    if (index % 2) != 0:\n        odd += letter\n    index += 1\n\nprint odd"}
{"label": 82, "index": 10628, "code": "print(str(input())[::2])"}
{"label": 82, "index": 10629, "code": "#\u6587\u5b57\u5217\u3092\u8aad\u307f\u8fbc\u3080\nstr = input()\n#\u6587\u5b57\u5217\u304b\u3089\u5947\u6570\u6587\u5b57\u3092\u53d6\u308a\u51fa\u3059\nkisuu_str = \"\"\nfor i in range(0,len(str),2):\n    kisuu_str += str[i]\n#\u5947\u6570\u6587\u5b57\u306e\u307f\u3092\u8868\u793a\u3059\u308b\nprint(kisuu_str)\n"}
{"label": 82, "index": 10630, "code": "s = input()\nt = 0\nfor i,j in enumerate(s):\n   if i % 2 == 0:\n      print(s[i],end=\"\")"}
{"label": 82, "index": 10631, "code": "def main():\n    print(''.join([c for c in input()[::2]]))\n\n\nif __name__ == \"__main__\":\n    main()"}
{"label": 82, "index": 10632, "code": "print(input()[::2])"}
{"label": 82, "index": 10633, "code": "s=raw_input()\n\nprint s[0::2]"}
{"label": 82, "index": 10634, "code": "s = input()\nt = [s[i] for i in range(0, len(s), 2)]\nprint(''.join(t))"}
{"label": 82, "index": 10635, "code": "S = input()\nprint(S[0:len(S):2])"}
{"label": 82, "index": 10636, "code": "str = input()\nprint (str[::2])"}
{"label": 82, "index": 10637, "code": "print(input()[::2])"}
{"label": 82, "index": 10638, "code": "s = input()\nfor i in range(len(s)):\n    if (i % 2) == 0:\n        print(s[i], end=\"\")\nprint()\n"}
{"label": 82, "index": 10639, "code": "s = input()\nhoge =list(s)\n\nmoji = ''\n\nfor num in range(len(s)):\n    if num%2 == 0:\n        moji += hoge[num]\n    continue\n\nprint(moji)"}
{"label": 82, "index": 10640, "code": "# -*- coding: utf-8 -*-\n\nprint(input()[::2])"}
{"label": 82, "index": 10641, "code": "s=list(raw_input())\n\nA=''\nfor i in range(len(s)):\n\tif i%2==0:\n\t\tA+=s[i]\n\nprint A\n\n"}
{"label": 82, "index": 10642, "code": "# -*- encoding: utf-8 -*-\ns = input().rstrip()\n\nprint(s[::2])"}
{"label": 82, "index": 10643, "code": "s = input()\nprint(''.join(s[0::2]))"}
{"label": 82, "index": 10644, "code": "a=input()\ncount = 1\nli=[]\nfor char in list(a):\n    if count % 2 != 0:\n        li.append(char)\n        count+=1\n    else:\n        count+=1\nb=\"\".join(li)\nprint(b)\n\n\n"}
{"label": 82, "index": 10645, "code": "def solve():\n    s = input()\n    S = s[::2]\n    print(S)\n\nif __name__ == '__main__':\n    solve()\n"}
{"label": 82, "index": 10646, "code": "s = list(input())\n\n\nfor i in range(len(s)):\n    if i%2==0:\n        print(s[i],end='')\n\nprint()"}
{"label": 82, "index": 10647, "code": "st = str(input())\nresult = [st[i] for i in range(len(st)) if i%2 == 0]\nprint(\"\".join(result))"}
{"label": 82, "index": 10648, "code": "s=input()\nfor i in range(len(s)):\n    if i%2==0:\n        print(s[i],end=\"\")\nprint()"}
{"label": 82, "index": 10649, "code": "from collections import defaultdict\nfrom itertools import product, groupby\nfrom math import pi\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right\nINF = 10 ** 10\n\n\ndef main():\n    s = input()\n    print(s[::2])\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 82, "index": 10650, "code": "#!/usr/bin/python\n\nimport sys\n\ndef main(argv):\n    for line in sys.stdin:\n        output = []\n        for i, c in enumerate(line.rstrip(\"\\n\")):\n            if i % 2 == 0:\n                output.append(c)\n        print(\"\".join(output))\n\nif __name__ == \"__main__\":\n    main(sys.argv)"}
{"label": 82, "index": 10651, "code": "s = input()\n\nfor i,c in enumerate(s):\n  if i % 2 == 0:\n    print(c, end=\"\")\n\n    \n    "}
{"label": 82, "index": 10652, "code": "s = input().strip()\nfor i, c in enumerate(s):\n  if i%2 == 0:\n    print(c,end='')\nprint()"}
{"label": 82, "index": 10653, "code": "#!usr/bim/python\n#! -*- coding: utf-8 -*-\n\ns = raw_input()\n\nans = \"\"\n\ni = 0\nfor i in range(len(s)):\n    if i % 2 == 1:\n        pass\n    else:\n        ans += s[i]\n\n\nprint ans\n"}
{"label": 82, "index": 10654, "code": "# encoding: \"utf-8\"\n\nclass Stdin:\n    @staticmethod\n    def read_line(converter=str):\n        return [converter(x) for x in input().split()]\n    \n    @staticmethod\n    def read_lines(n, converter=str):\n        result = list()\n        for _ in range(n):\n            result.append(Stdin.read_line(converter))\n        return result\n    \n    @staticmethod\n    def convert(data, converter):\n        assert(len(data) == len(converter))\n        return tuple(map(lambda x, f: f(x), data, converter))\n\n    @staticmethod\n    def convert_lines(datas, n, converter):\n        return [converter(data, n, converter) for data in datas]\n\n\ndef main():\n    s = input()\n    r = \"\".join([c for (i,c) in enumerate(s) if i % 2 == 0])\n    print(r)\n\nif __name__ == \"__main__\":\n    main()"}
{"label": 82, "index": 10655, "code": "print(input()[::2])"}
{"label": 82, "index": 10656, "code": "#ABC072B\n\ns=raw_input()\nres=''\nfor i in xrange(len(s)):\n if i%2==0:\n  res+=s[i]\nprint res\n"}
{"label": 82, "index": 10657, "code": "print(input()[::2])"}
{"label": 82, "index": 10658, "code": "k = input()\nprint(k[::2])\n"}
{"label": 82, "index": 10659, "code": "def solve():\n    s = list(input())\n    s_odd = s[::2]\n    print(\"\".join(s_odd))\n\n   \nsolve()"}
{"label": 83, "index": 10660, "code": "a = input()\nif a[0] == '9'or a[1] == '9':\n\tprint(\"Yes\")\nelse: print(\"No\")"}
{"label": 83, "index": 10661, "code": "\ndef main():\n    n = input()\n    if '9' in n:\n        print('Yes')\n    else:\n        print('No')\n\nif __name__ == '__main__':\n    main()"}
{"label": 83, "index": 10662, "code": "print((\"No\",\"Yes\")[\"9\"in input()])"}
{"label": 83, "index": 10663, "code": "s=input()\nprint(\"Yes\" if s/10==9 or s%10==9 else \"No\")"}
{"label": 83, "index": 10664, "code": "def main():\n    N = int(input())\n\n    N_10 = N//10\n    N_1 = N - N_10*10\n\n    if N_10==9:\n        print('Yes')\n    elif N_1==9:\n        print('Yes')\n    else:\n        print('No')\n\n\nif __name__=='__main__':\n    main()\n"}
{"label": 83, "index": 10665, "code": "s=list(input())\nfor c in s:\n    if c=='9':\n        print('Yes')\n        break\nelse:\n    print('No')\n"}
{"label": 83, "index": 10666, "code": "n = input()\nif '9' in n:\n  print('Yes')\nelse:\n  print('No')"}
{"label": 83, "index": 10667, "code": "N = int(input())\nn10 = N//10\nn1 = N%10\nif n10 == 9 or n1 == 9:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 83, "index": 10668, "code": "s = input()\t\t\t\t\t\t# 5\n\nif '9' in s:\n\tprint('Yes')\nelse:\n\tprint('No')\n"}
{"label": 83, "index": 10669, "code": "N = input()\nprint('Yes' if '9' in N else 'No')\n"}
{"label": 83, "index": 10670, "code": "n = raw_input()\n\nl = [int(x) for x in list(str(n))]\nif l[0] == 9:\n\tprint(\"Yes\")\nelif l[1] == 9:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")\n"}
{"label": 83, "index": 10671, "code": "s = input()\nif '9' in s:\n    print('Yes')\nelse:\n    print('No')\n"}
{"label": 83, "index": 10672, "code": "# coding: utf-8\n\n\ndef main():\n    n = raw_input()\n    for i in n:\n        if i == \"9\":\n            print \"Yes\"\n            return\n    print \"No\"\n\nmain()\n"}
{"label": 83, "index": 10673, "code": "N= int(input())\nn=[]\nj=9\nc=0\nwhile N!=0:\n    n.append(N%10)\n    N//=10\nn.reverse()\n\nfor i in range(len(n)):\n    if n[i-1]==j:\n        c+=1\n\nif c > 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 83, "index": 10674, "code": "print \"Yes\" if \"9\" in raw_input() else \"No\""}
{"label": 83, "index": 10675, "code": "import numpy as np\nhoge = input()\nhoge = int(hoge)\nif hoge//10 == 9 or hoge%10 == 9: \n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 83, "index": 10676, "code": "temp = input()\ntemp = list(temp)\nif(temp[0] == \"9\" or temp[1] == \"9\"):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n    "}
{"label": 83, "index": 10677, "code": "N=input()\nif '9' in (N):\n print('Yes')\nelse:\n print('No')"}
{"label": 83, "index": 10678, "code": "N = input()\nif N[0] == '9' or N[1] =='9':\n    print('Yes')\nelse:\n    print('No')"}
{"label": 83, "index": 10679, "code": "# coding: utf-8\n\nprint(\"Yes\" if '9' in input() else \"No\")\n"}
{"label": 83, "index": 10680, "code": "n = input()\nprint(\"Yes\") if n.count('9') else print(\"No\")"}
{"label": 83, "index": 10681, "code": "print 'Yes' if '9' in raw_input() else 'No'\n"}
{"label": 83, "index": 10682, "code": "n = list(input())\nif '9' in n:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 83, "index": 10683, "code": "N = list(input())\n\nflag = False\nif N[0] == \"9\":\n    flag = True\nif N[1] == \"9\":\n    flag = True\n\nif flag:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 83, "index": 10684, "code": "n = str(input())\n\nif \"9\" in n:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 83, "index": 10685, "code": "print('Yes' if '9' in input() else 'No')"}
{"label": 83, "index": 10686, "code": "N = int(input())\nif N % 10==9 or N >=90 :\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 83, "index": 10687, "code": "n = input()\nprint(\"Yes\" if n[0]=='9' or n[1]=='9' else \"No\")"}
{"label": 83, "index": 10688, "code": "# coding: utf-8\n# Here your code !\nn = input()\nif n.find('9') >= 0:\n    print('Yes')\nelse:\n    print('No')"}
{"label": 83, "index": 10689, "code": "if \"9\" in input():\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 83, "index": 10690, "code": "if input().find('9')!=-1:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 83, "index": 10691, "code": "N = input()\n\nif N.find(\"9\") != -1:\n  print(\"Yes\")\nelse:\n  print(\"No\")\n  "}
{"label": 83, "index": 10692, "code": "def main():\n    N = input()\n\n    if '9' in N:\n        print('Yes')\n    else:\n        print('No')\n\nmain()\n"}
{"label": 83, "index": 10693, "code": "print(\"Yes\" if \"9\" in input() else \"No\")"}
{"label": 83, "index": 10694, "code": "#!/usr/bin/python\n\nimport sys\n\ndef main(argv):\n    for line in sys.stdin:\n        if \"9\" in line:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\nif __name__ == \"__main__\":\n    main(sys.argv)\n"}
{"label": 83, "index": 10695, "code": "N = int(input())\nif N%10 == 9 or N // 10 == 9:\n  print(\"Yes\")\nelse:\n  print(\"No\")"}
{"label": 83, "index": 10696, "code": "import numpy as np\n\n\ndef getInput():\n    \"\"\"\n\n    :return: list of list of str. 1st dim: row, 2nd dim: column.\n    \"\"\"\n    separator = ' '\n    ret_array = []\n    while True:\n        try:\n            row = input().split(sep=separator)\n            ret_array.append(row)\n        except EOFError:\n            break\n    return ret_array\n\n\ng = getInput()\n\n# number\np = np.array(list(map(int, g[0])), dtype=np.int32)\nh, f = divmod(p, 10)\nif h == 9 or f == 9:\n    print('Yes')\nelse:\n    print('No')"}
{"label": 83, "index": 10697, "code": "N = input()\nif \"9\" in N:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 83, "index": 10698, "code": "# -*- coding:utf-8 -*-\nimport sys\nN = list(input())\nfor tmp in N:\n    if tmp == '9':\n        print(\"Yes\")\n        sys.exit()\n    else:\n        pass\nprint(\"No\")"}
{"label": 83, "index": 10699, "code": "print('Yes') if '9' in input() else print('No')"}
{"label": 83, "index": 10700, "code": "n = input()\n\nif '9' in n:\n    print('Yes')\nelse:\n    print('No')"}
{"label": 83, "index": 10701, "code": "if \"9\" in input():\n  print(\"Yes\")\nelse:\n  print(\"No\")"}
{"label": 83, "index": 10702, "code": "print(\"Yes\" if '9' in input() else \"No\")"}
{"label": 83, "index": 10703, "code": "N = int(input())\n\nif N%10 == 9:\n    print('Yes')\nelif N >= 90:\n    print('Yes')\nelse:\n    print('No')"}
{"label": 83, "index": 10704, "code": "z=input()\nif z[0]=='9' or z[1]=='9':\n    print(\"Yes\")\nelse:print(\"No\")"}
{"label": 83, "index": 10705, "code": "N = input()\nresult = \"No\"\nfor i in N:\n    if i == '9':\n        result = \"Yes\"\nprint(result)"}
{"label": 83, "index": 10706, "code": "N = str(input())\n\nif '9' in N:\n    flag = 'Yes'\nelse:\n    flag = 'No'\n    \nprint(flag)\n"}
{"label": 83, "index": 10707, "code": "n=str(input())\nif '9' in n:\n    print('Yes')\nelse:\n    print('No')"}
{"label": 83, "index": 10708, "code": "n = raw_input()\n\nindex = n.find(\"9\")\n\nif index >= 0:\n    print \"Yes\"\nelse:\n    print \"No\""}
{"label": 83, "index": 10709, "code": "num = input()\nnum = str(num)\nisthere = False\nfor i in range(0, 2):\n\tif num[i] == '9':\n\t\tisthere = True\n\nif isthere:\n\tprint('Yes')\nelse:\n\tprint('No')"}
{"label": 83, "index": 10710, "code": "N=input()\nif N[0]==\"9\" or N[1]==\"9\":\n    p=\"Yes\"\nelse:\n    p=\"No\"\nprint(p)"}
{"label": 83, "index": 10711, "code": "number = int(raw_input())\n\nif number < 10 and number == 9:\n    print 'Yes'\nelif (number % 10) == 9:\n    print 'Yes'\nelif (number / 10) == 9:\n    print 'Yes'\nelse:\n    print 'No'"}
{"label": 83, "index": 10712, "code": "print('Yes' if '9' in input() else 'No')"}
{"label": 83, "index": 10713, "code": "N = input()\n\nif N%10 == 9:\n\tprint('Yes')\nelif N/10 == 9:\n\tprint('Yes')\nelse :\n\tprint('No')"}
{"label": 83, "index": 10714, "code": "s = input().strip()\nif s[0] == '9' or s[1] == '9':\n  print('Yes')\nelse:\n  print('No')"}
{"label": 83, "index": 10715, "code": "from collections import defaultdict\nfrom itertools import product, groupby\nfrom math import pi\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right\nINF = 10 ** 10\n\n\ndef main():\n    N = input()\n    print(\"Yes\" if \"9\" in N else \"No\")\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 83, "index": 10716, "code": "N = input()\n\nprint(\"Yes\" if \"9\" in N else \"No\")"}
{"label": 83, "index": 10717, "code": "s = input()\nprint(\"Yes\" if '9' in s else \"No\")\n"}
{"label": 83, "index": 10718, "code": "n=int(input())\n\nif  (n>89) or (n%10==9):\n    print('Yes')\nelse:\n    print('No')"}
{"label": 83, "index": 10719, "code": "a = list(input())\nif \"9\" in a:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 83, "index": 10720, "code": "import sys\n\nN = int(sys.stdin.readline())\nn1 = N % 10\nn2 = int((N - n1) / 10)\n\nif n1 == 9 or n2 == 9:\n    print('Yes')\nelse:\n    print('No')\n"}
{"label": 83, "index": 10721, "code": "if '9' in input():\n print('Yes')\nelse:\n  print('No')"}
{"label": 83, "index": 10722, "code": "a = input()\nif '9' in a:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n\n"}
{"label": 83, "index": 10723, "code": "inp = input()\n\nif '9' in inp:\n  print('Yes')\nelse:\n  print('No')"}
{"label": 83, "index": 10724, "code": "# -*- coding: utf-8 -*-\nimport heapq\nimport math\n\na = input()\nb = False\nfor aa in a:\n    if aa == '9':\n        b = True\nprint('Yes' if b else 'No')\n"}
{"label": 83, "index": 10725, "code": "N = input()\n\nif \"9\" in N:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 83, "index": 10726, "code": "n=list(str(input()))\nfor x in n:\n    if x==\"9\":\n        print(\"Yes\")\n        break\nelse:\n    print(\"No\")"}
{"label": 83, "index": 10727, "code": "N = input()\nif \"9\" in N:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 83, "index": 10728, "code": "n = input()\nif n[0]=='9' or n[1]=='9':\n    print('Yes')\nelse:\n    print('No')"}
{"label": 83, "index": 10729, "code": "n=input()\ns=\"No\"\nfor i in range(len(n)):\n    if n[i]==\"9\":\n        s=\"Yes\"\nprint(s)"}
{"label": 83, "index": 10730, "code": "num = int(input())\nif num % 10 == 9 or num // 10 == 9:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 83, "index": 10731, "code": "N = input()\n\nfor i in range(len(N)):\n    if N[i] == \"9\":\n        print(\"Yes\")\n        exit()\n\nprint(\"No\")"}
{"label": 83, "index": 10732, "code": "N = input()\nprint('Yes' if '9' in N else 'No')"}
{"label": 83, "index": 10733, "code": "n = int(input())\nif n%10==9 or n//10==9:\n    print('Yes')\nelse :\n    print('No')"}
{"label": 83, "index": 10734, "code": "print(\"Yes\" if (\"9\" in list(input())) else \"No\")"}
{"label": 83, "index": 10735, "code": "s=input()\nprint('Yes' if '9' in s else 'No')"}
{"label": 83, "index": 10736, "code": "print('Yes' if '9' in input() else 'No')\n"}
{"label": 83, "index": 10737, "code": "N = int(input())\n\nif N // 10 == 9 or N % 10 == 9:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 83, "index": 10738, "code": "def A_September(N):\n    if '9' in N:\n        return 'Yes'\n    else:\n        return 'No'\n      \nN = input()\nprint(A_September(N))"}
{"label": 83, "index": 10739, "code": "if '9' in input():\n    print('Yes')\nelse:\n    print('No')\n"}
{"label": 83, "index": 10740, "code": "n = input()\nif \"9\" in n:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 83, "index": 10741, "code": "N = input()\n\nif \"9\"in N:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 83, "index": 10742, "code": "n = input()\nif '9' in n:\n  print('Yes')\nelse:\n  print('No')"}
{"label": 83, "index": 10743, "code": "a=raw_input()\n\na = int (a)\n\nif a%10==9:\n    print \"Yes\"\nelif (a/10)%10==9:\n    print \"Yes\"\nelse :\n    print \"No\"\n"}
{"label": 83, "index": 10744, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\n\ndef main():\n    s = input()\n    print(\"Yes\" if \"9\" in s else \"No\")\n\nif __name__ == \"__main__\": main()\n"}
{"label": 83, "index": 10745, "code": "number = input()\nif '9' in number:\n    print('Yes')\nelse:\n    print('No')"}
{"label": 83, "index": 10746, "code": "N = input()\ntry:\n  N.index('9')\n  print('Yes')\nexcept:\n  print('No')"}
{"label": 83, "index": 10747, "code": "input = int(input())\n\nfirst_digit = input % 10\nsecond_digit = int((input - first_digit) / 10)\n\nif first_digit == 9 or second_digit == 9:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 83, "index": 10748, "code": "a=list(str(input()))\nch=0\nfor i in a:\n    if i==\"9\":\n        ch=1\nif ch==1:\n    print \"Yes\"\nelse:\n    print \"No\""}
{"label": 83, "index": 10749, "code": "N = input()\nif \"9\" in N:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n            \n"}
{"label": 83, "index": 10750, "code": "a = input()\nb = int(a[0])\nc = int(a[1])\nif b==9 or c==9:\n print(\"Yes\")\nelse:\n print(\"No\")"}
{"label": 83, "index": 10751, "code": "N = int(raw_input())\nprint 'Yes' if '9' in str(N) else 'No'"}
{"label": 83, "index": 10752, "code": "import sys\n\n# sys.stdin = open('a1.in')\n\n\ndef read_int_list():\n    return list(map(int, input().split()))\n\n\ndef read_str_list():\n    return input().split()\n\n\ndef read_int():\n    return int(input())\n\n\ndef read_str():\n    return input()\n\n\ndef main():\n    n = read_int()\n    l = [9, 19, 29, 39, 49, 59, 69, 79, 89, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90]\n    if n in l:\n        print('Yes')\n    else:\n        print('No')\n\n\nmain()\n"}
{"label": 83, "index": 10753, "code": "N=input()\nprint \"Yes\" if N%10==9 or N/10==9 else \"No\"\n"}
{"label": 83, "index": 10754, "code": "n = input()\n\n\nif n[0] == '9' or n[1] == '9':\n        print(\"Yes\")\nelse:\n        print(\"No\")\n"}
{"label": 83, "index": 10755, "code": "n = input()\n\ncheck = 0\nfor i in n:\n    if i == \"9\":\n        check = 1\n        break\n\nif check == 1:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 83, "index": 10756, "code": "s = input()\nif '9' in s:\n    print('Yes')\nelse:\n    print('No')"}
{"label": 83, "index": 10757, "code": "#! /bin/python\n# coding:utf-8\n\nimport itertools\n\nN = raw_input()\n\nif (N.find('9') == -1):\n    print \"No\"\nelse:\n    print \"Yes\""}
{"label": 83, "index": 10758, "code": "s = input()\nprint('Yes') if '9' in s else print('No')"}
{"label": 83, "index": 10759, "code": "import collections\n\n# \u30c7\u30d0\u30c3\u30b0\u7528\nDEBUG = False\n# DEBUG = True\n\n# \u5ba3\u8a00\nresult = 'No'\n\n# \u5165\u529b\u90e8\nif DEBUG:\n    N = '99'\nelse:\n    N = input()\n\n# \u51e6\u7406\u90e8\nif N.find('9') >= 0:\n    result = 'Yes'\nelse:\n    result = 'No'\n\n# \u51fa\u529b\u90e8\nprint(result)"}
{"label": 83, "index": 10760, "code": "N = input()\n\nif N[0] == '9' or N[1] == '9':\n    print('Yes')\nelse:\n    print('No')"}
{"label": 83, "index": 10761, "code": "n = input()\n\nif n.count('9') > 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 83, "index": 10762, "code": "n = int(input())\nprint(\"Yes\" if n%10==9 or n//10 == 9 else \"No\")"}
{"label": 83, "index": 10763, "code": "N = input()\nresult = \"No\"\nif N[0] == \"9\":\n    result =\"Yes\"\nif N[1] == \"9\":\n    result = \"Yes\"\nprint (result)\n"}
{"label": 83, "index": 10764, "code": "print (\"Yes\" if '9' in input() else \"No\")"}
{"label": 83, "index": 10765, "code": "x=input()\na=\"No\"\nif \"9\" in x:\n  a=\"Yes\"\nprint(a)"}
{"label": 83, "index": 10766, "code": "def solution():\n\tn = int(input())\n\tprint('Yes' if '9' in list(str(n)) else 'No')\n\nsolution()"}
{"label": 83, "index": 10767, "code": "#a = map(int,raw_input().strip().split())\na = raw_input()\np = False\nfor x in a:\n\tif x == '9':\n\t\tp = True\nif p:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")"}
{"label": 83, "index": 10768, "code": "s = input()\n\nflag = 0\nfor i in s:\n    if i == \"9\":\n        flag = 1\n\nif flag == 1:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 83, "index": 10769, "code": "# A\n\nS = list(input())\nif '9' in S:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 83, "index": 10770, "code": "# -*- coding: utf-8 -*-\nimport math\na = int(input())\nif a%10==9 or math.floor(a/10)==9:\n    print (\"Yes\")\nelse:\n    print (\"No\")\n"}
{"label": 83, "index": 10771, "code": "N = input()\n\nif '9' in str(N):\n    x = 'Yes'\nelse:\n    x = 'No'\n\nprint(x)"}
{"label": 83, "index": 10772, "code": "x = str(input())\n \nif x[0]=='9' or x[1]=='9':\n    print('Yes')\nelse:\n    print('No')\n"}
{"label": 83, "index": 10773, "code": "N=str(input())\nif N[0]==\"9\" or N[1]==\"9\":\n  print(\"Yes\")\nelse:\n  print(\"No\")"}
{"label": 83, "index": 10774, "code": "import math\nN=int(input())\nif N%10==9 or math.floor(N/10)==9:\n  print(\"Yes\")\nelse:\n  print(\"No\")"}
{"label": 83, "index": 10775, "code": "# -*- coding: utf-8 -*-\n\nimport sys\n\n\ndef main():\n    for line in sys.stdin:\n        if \"9\" in line.rstrip():\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\n\nif __name__ == \"__main__\":\n    main()\n"}
{"label": 83, "index": 10776, "code": "inn = input()\nans = \"No\"\nif inn[0] == \"9\":\n    ans = \"Yes\"\nif inn[1] == \"9\":\n    ans = \"Yes\"\nprint(ans)\n"}
{"label": 83, "index": 10777, "code": "s=int(input())\nprint(\"Yes\" if s//10==9 or s%10==9 else \"No\")"}
{"label": 83, "index": 10778, "code": "#coding:utf-8\n\nnum = int(input())\n\nif num // 10 == 9 or num % 10 == 9:\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 83, "index": 10779, "code": "x = input()\nif '9' in x:\n    print(\"Yes\")\nelse :\n    print(\"No\")\n"}
{"label": 83, "index": 10780, "code": "def solve(s):\n    if \"9\" in s:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif __name__ == '__main__':\n    s = input()\n    solve(s)"}
{"label": 83, "index": 10781, "code": "s = input()\npos = s.find('9')\nif pos != -1:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n"}
{"label": 83, "index": 10782, "code": "def solve(): # 073A- September 9\n    n = int(input())\n    n_10 = n // 10\n    n_1 = n - n_10 * 10\n\n    if n_10 == 9 or n_1 == 9:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n        \n\nsolve()"}
{"label": 83, "index": 10783, "code": "n = int(input())\n\nif(n / 90 >= 1 or n % 10 == 9):\n    print(\"Yes\")\nelse:\n    print(\"No\")"}
{"label": 83, "index": 10784, "code": "a = input()\nfor i in range(len(a)):\n   if a[i] == \"9\":\n      print(\"Yes\")\n      break\nelse:\n   print(\"No\")"}
{"label": 83, "index": 10785, "code": "a = input()\nif a%10==9 or a/10 ==9:\n    print \"Yes\"\nelse:\n    print \"No\"\n"}
{"label": 83, "index": 10786, "code": "print(\"Yes\" if \"9\" in input() else \"No\")\n"}
{"label": 83, "index": 10787, "code": "import sys\nfor i in input():\n    if i =='9':\n        print(\"Yes\")\n        sys.exit()\nprint(\"No\")\n"}
{"label": 83, "index": 10788, "code": "\ns = input()\n\nif '9' in s:\n    print('Yes')\nelse:\n    print('No')\n\n\n"}
{"label": 83, "index": 10789, "code": "print(\"Yes\" if \"9\" in input() else \"No\")"}
{"label": 84, "index": 10790, "code": "N = int(input())\ntotal = 0\nfor i in range(N):\n    l,r = map(int, input().split())\n    total += (r - l + 1)\nprint(total)\n"}
{"label": 84, "index": 10791, "code": "#Theater\nN = int(input())\ncnt = 0\nfor i in range(N):\n    r,l = list(map(int, input().split()))\n    cnt += l-r+1\nprint(cnt)"}
{"label": 84, "index": 10792, "code": "\ndef main():\n    n = int(input())\n    ans = 0\n    for _ in range(n):\n        a, b = map(int, input().strip().split())\n        ans += b - a + 1\n    print(ans)\n\nif __name__ == '__main__':\n    main()"}
{"label": 84, "index": 10793, "code": "N = int(input())\nSum = 0\nfor i in range(N):\n    sheet = list(map(int,input().split()))\n    Sum += sheet[1] - sheet[0] + 1\nprint(Sum)"}
{"label": 84, "index": 10794, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\ngosa = 1.0 / 10**10\nmod = 10**9+7\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\n\n\ndef main():\n    n = I()\n    r = 0\n    for _ in range(n):\n        a,b = LI()\n        r += b-a+1\n\n    return r\n\nprint(main())\n\n\n\n"}
{"label": 84, "index": 10795, "code": "n = int(input())\np = 0\nfor _ in range(n):\n    l, r = map(int, input().split())\n    p += r - l + 1\n\nprint(p)"}
{"label": 84, "index": 10796, "code": "# coding: utf-8\n# Here your code !\nn = int(input())\nans = 0\nfor i in range(n):\n    l, r = list(map(int, input().split()))\n    ans += r - l + 1\nprint(ans)\n\n"}
{"label": 84, "index": 10797, "code": "N = int(input())\nseat = 0\nfor _ in range(N):\n    l,r = map(int,input().split())\n    seat += r - l + 1\nprint(seat)"}
{"label": 84, "index": 10798, "code": "n = int(input())\na = 0\nfor _ in range(n):\n    l,r = map(int,input().split())\n    a += r-l+1\nprint(a)\n"}
{"label": 84, "index": 10799, "code": "time = int(input())\nans = 0\nfor i in range(time):\n    now = input().split()\n    ans += int(now[1]) + 1 - int(now[0])\nprint(ans)\n"}
{"label": 84, "index": 10800, "code": "a = int(input())\nb = [map(int, input().split()) for x in range(a)]\n\nprint(sum(B - A + 1 for A, B in b))\n"}
{"label": 84, "index": 10801, "code": "inp = int(input())\n\nsum = 0\nfor i in range(inp):\n\ta, b = map(int, input().split())\n\tsum += b - a + 1\nprint(sum)"}
{"label": 84, "index": 10802, "code": "N = int(input())\n\ns = 0\n\nfor i in range(N):\n    l, r = list(map(int, input().split(\" \")))\n    s += r - l + 1\n\nprint(s)\n"}
{"label": 84, "index": 10803, "code": "n = int(input())\nans = 0\nfor i in range(n):\n    x = input()\n    a , b = map(int,x.split())\n    ans += b - a + 1\nprint(ans)"}
{"label": 84, "index": 10804, "code": "a=input()\nans=0\nfor i in range(a):\n    b=map(int,raw_input().split())\n    ans+=b[1]-b[0]+1\nprint ans"}
{"label": 84, "index": 10805, "code": "N = int(input())\nans = set([])\nfor i in range(N):\n    strs = [int(s) for s in input().split(' ')]\n    for j in range(strs[0],strs[1]+1):\n        ans.add(j)\n\nprint(len(ans))"}
{"label": 84, "index": 10806, "code": "N = int(input())\nseats = []\nsum = N\nfor i in range(N):\n    j = list(map(int, input().split()))\n    seats.append(j)\n\nfor seat in seats:\n    sum += seat[1] - seat[0]\n\nprint(sum)"}
{"label": 84, "index": 10807, "code": "def main():\n    N = int(input())\n    LR = tuple(tuple(map(int, input().split())) for _ in range(N))\n\n    people = 0\n    for l, r in LR:\n        people += r - l + 1\n\n    print(people)\n\nmain()\n"}
{"label": 84, "index": 10808, "code": "n = input()\n\nans = 0\nfor i in range(n):\n    a, b = map(int, raw_input().split())\n    ans += b - a + 1\n\nprint ans\n"}
{"label": 84, "index": 10809, "code": "def solve(): # 073B- Theater\n    N = int(input())\n    sum_seat = 0\n\n    for _ in range(N):\n        l, r = [int(x) for x in input().split(\" \")]\n        sum_seat += r + 1 - l\n\n    print(sum_seat)\n    \n    \nsolve()"}
{"label": 84, "index": 10810, "code": "n = int(input())\nans = 0\nfor i in range(n):\n    l, r = map(int, input().split())\n    ans += r - l + 1\nprint(ans)"}
{"label": 84, "index": 10811, "code": "N = int(input())\nlist_seki = []\nfor i in range(N):\n    list_seki.append(list(map(int,input().split())))\n\ncount = 0\nfor j in range(N):\n    count += list_seki[j][1]+1-list_seki[j][0]\n\nprint(count)"}
{"label": 84, "index": 10812, "code": "n=int(input())\nans=0\nfor _ in range(n):\n    l,r=map(int,input().split())\n    ans+=r-l+1\nprint(ans)\n"}
{"label": 84, "index": 10813, "code": "N = int(input())\na = []\nanswer = 0\nfor i in range(N):\n\ta.append(list(map(int, input().split())))\n\tanswer = answer + a[i][1] - a[i][0] + 1\n\nprint(answer)"}
{"label": 84, "index": 10814, "code": "n = raw_input()\n\nn = int (n)\n\nans=0\n\nfor i in range(0,n):\n    a,b=raw_input().split(' ')\n    a = int (a)\n    b = int (b)\n    ans+=b-a;\n    ans+=1\n\nprint ans\n"}
{"label": 84, "index": 10815, "code": "c=[0]*100010\nN=int(input())\nfor _ in range(N):\n  a,b=map(int,input().split())\n  c[a] += 1\n  c[b+1] -= 1\nfor i in range(len(c)-1):\n  c[i+1] += c[i]\nprint(sum(c))"}
{"label": 84, "index": 10816, "code": "value = int(input())\npeople = 0\nwhile True:\n\ttry:\n\t\tseat = input()\n\t\tif seat:\n\t\t\tstring_seat = seat.split()\n\t\t\tseat_list = []\n\t\t\tseat_list = [int(x) for x in (string_seat)]\n\t\t\tpeople += seat_list[len(seat_list)-1] - seat_list[0]+1\n\texcept EOFError:\n\t\tbreak\n# while True:\n# \tseat = input()\n# \tif seat:\n# \t\tstring_seat = seat.split()\n# \t\tseat_list = []\n# \t\tseat_list = [int(x) for x in (string_seat)]\n# \t\tpeople += aaa(seat_list)\n# \telse:\n# \t\tbreak\nprint(people)\n"}
{"label": 84, "index": 10817, "code": "N = input()\nN = int(N)\n\nseats = []\n\nfor i in range(N):\n    inputs = input().split()\n    seats.append([int(inputs[0]), int(inputs[1])])\n\nans = 0\nfor i in seats:\n    ans += i[1] - i[0] + 1\n\nprint(ans)"}
{"label": 84, "index": 10818, "code": "n = int(input())\nans = 0\nfor _ in range(n):\n    l, r = map(int, input().split())\n    ans += r - l + 1\nprint(ans)\n"}
{"label": 84, "index": 10819, "code": "N = int(input())\npeople_total = 0\nfor _ in range(N):\n  new_input = input()\n  l, r = map(int, new_input.split(\" \"))\n  people_total += r - l + 1\n\nprint(people_total)\n\n"}
{"label": 84, "index": 10820, "code": "N = int(input())\nseat = [0 for i in range(100000+1)]\nfor i in range(N):\n    l, r = [int(i) for i in input().split()]\n    for j in range(l, r+1):\n        seat[j] = 1\nprint(sum(seat))"}
{"label": 84, "index": 10821, "code": "num=int(raw_input())\noutput=0\nfor i in range(num):\n    tmp=map(int, raw_input().split(\" \"))\n    output+=tmp[1]-tmp[0]+1\n\nprint output"}
{"label": 84, "index": 10822, "code": "count = 0\nx = int(input())\nfor i in range(x):\n    l,r = map(int,input().split())\n    count += (r-l+1)\nprint(count)\n"}
{"label": 84, "index": 10823, "code": "# -*- coding: utf-8 -*-\n\"\"\"\n\"\"\"\n\n\ndef solve(data):\n    total = 0\n    for b, e in data:\n        num = e - b + 1\n        total += num\n    return total\n\n\ndef main():\n    N = int(input())\n    data = []\n    for _ in range(N):\n        data.append([int(x) for x in input().split(' ')])\n    result = solve(data)\n    print(result)\n\n\nif __name__ == '__main__':\n    main()\n    \n"}
{"label": 84, "index": 10824, "code": "def B_Theater(N, C):\n    people = 0\n    for i in range(0, len(C), 2):\n        people += C[i + 1] - C[i] + 1\n    return people\n\nN = int(input())\nC = [[int(i) for i in input().split()] for i in range(N)]\nx = []\nfor s in C:\n    x.extend(s)\nC=x\nprint(B_Theater(N, C))"}
{"label": 84, "index": 10825, "code": "N = int(input())\nsum = 0\nfor i in range(N):\n    i, j = list(map(int, input().split(' ')))\n    sum += j - i + 1\nprint(sum)"}
{"label": 84, "index": 10826, "code": "z = 0\nfor _ in xrange(input()):\n    (l,r) = map(int,raw_input().split(' '))\n    z += r-l+1\nprint z\n"}
{"label": 84, "index": 10827, "code": "#ABC073B\n\nn=int(raw_input())\nres=0\nfor i in xrange(n):\n l,r=map(int,raw_input().split())\n res+=r-l+1\nprint res\n"}
{"label": 84, "index": 10828, "code": "N = int(input())\nlr = [list(map(int, input().split())) for n in range(N)]\n\nres = 0\nwhile lr:\n    tlr = lr.pop()\n    res += tlr[1] - tlr[0] + 1\n\nprint(res)"}
{"label": 84, "index": 10829, "code": "n=int(raw_input())\nnumber=0\nwhile n !=0:\n    a ,b=map(int, raw_input().split())\n    number+=b-a+1\n    n-=1\nprint(number)\n"}
{"label": 84, "index": 10830, "code": "n = int(input())\na = [list(map(int, input().split())) for i in range(n)]\nx = 0\n\nfor i in range(n):\n    x += a[i][1]-a[i][0]+1\n\nprint(x)\n"}
{"label": 84, "index": 10831, "code": "# B\nN = int(input())\nres = 0\nfor _ in range(N):\n    l, r = map(int, input().split())\n    res += r - l + 1\n    \nprint(res)"}
{"label": 84, "index": 10832, "code": "N=int(input())\nans=N\nfor i in range(N):\n  a,b=map(int,input().split())\n  ans+=b-a\nprint(ans)"}
{"label": 84, "index": 10833, "code": "import sys\n\ndef main():\n    N = int(input())\n\n    a =[]\n    for i in range(N):\n        a.append(list(map(int,input().split())))\n\n\n    count = 0\n\n    for b in a:\n        count = count + (b[1]-b[0]+1)\n\n    print(count)\n\n\nif __name__=='__main__':\n    main()\n"}
{"label": 84, "index": 10834, "code": "n = int(input())\ns = n\nfor _ in range(n):\n  a, b = map(int, input().split(\" \"))\n  s += b - a\nprint(s)"}
{"label": 84, "index": 10835, "code": "n=int(raw_input())\nres = 0\nfor i in range(n) :\n    x,y = map(int,raw_input().split())\n    res += y-x+1\nprint res"}
{"label": 84, "index": 10836, "code": "group_num = int(input())\nnumber_of_customer = 0\nfor _ in range(group_num):\n    l = list(map(int, input().split()))\n    number_of_customer += l[1] - l[0] + 1\nprint (number_of_customer)\n"}
{"label": 84, "index": 10837, "code": "N = int(input())\t\t\t\t\t\t# 5\n\nsum=0\nfor i in range(N):\n\tl, r = map(int, input().split())\t\t# 5 7\n\tsum += r - l + 1\n\nprint(sum)\n"}
{"label": 84, "index": 10838, "code": "N = int(input())\nanswer = 0\nfor i in range(N):\n\tl, r = map(int, input().split())\n\tanswer += r - l + 1\nprint(answer)"}
{"label": 84, "index": 10839, "code": "c=[0]*100010\nN=int(input())\nfor _ in range(N):\n  a,b=map(int,input().split())\n  c[a] += 1\n  c[b+1] -= 1\nfor i in range(len(c)-1):\n  c[i+1] += c[i]\nprint(sum(c))"}
{"label": 84, "index": 10840, "code": "N = int(input())\nnum = 0\n\nfor i in range(N):\n    s, l = map(int, input().split())\n    ans = l - s + 1\n    num += ans\n\nprint(num)"}
{"label": 84, "index": 10841, "code": "# -*- coding: utf-8 -*-\n\nimport sys\n\n\ndef main():\n    count = 0\n    for line in sys.stdin:\n        if len(line.rstrip().split(\" \")) == 1:\n            continue\n        start, end = map(int, line.rstrip().split(\" \"))\n        count += end - start + 1\n    print(count)\n\n\nif __name__ == \"__main__\":\n    main()\n"}
{"label": 84, "index": 10842, "code": "a = int(input())\nt = 0 \nfor i in range(a):\n   b,c = map(int,input().split())\n   if b >= c:\n      t += (b - c) + 1\n   else:\n      t += (c - b) + 1\nprint(t)\n"}
{"label": 84, "index": 10843, "code": "# coding: utf-8\n\nN = int(input())\n\nres = 0\nfor i in range(N):\n    l, r = tuple(map(int, input().split()))\n    res += r - l + 1\n\nprint(res)\n"}
{"label": 84, "index": 10844, "code": "n = int(input())\nlr_list= []\n\ncount =0\nfor _ in range(n):\n#     lr_list.append([int(x) for x in input().split()])\n    x, y = [int(x) for x in input().split()]\n#     print(x,y)\n    count += y-x+1\n\nprint(count)\n"}
{"label": 84, "index": 10845, "code": "N = int(input())\npeople = [list(map(int, input().split())) for i in range(N)]\nans = 0\n\nfor p in people:\n    ans += (p[1] - p[0]) + 1\n\nprint(ans)\n"}
{"label": 84, "index": 10846, "code": "ans = 0\nfor i in range(int(input())):\n  r1, r2 = input().split()\n  ans += int(r2) - int(r1) + 1\nprint(ans)"}
{"label": 84, "index": 10847, "code": "N = int(input())\n\nsum = 0\nfor i in range(N):\n    a = list(map(int,input().split()))\n    sum += a[1] - a[0] + 1\nprint(sum)\n"}
{"label": 84, "index": 10848, "code": "s = 0\nfor i in range(int(input())):\n    l, r = map(int, input().split())\n    s += r - l + 1\nprint(s)\n"}
{"label": 84, "index": 10849, "code": "N = int(input())\n\nans = 0\n\nfor _ in range(N):\n    l, r = map(int, input().split())\n    ans += r - l + 1\n    \nprint(ans)"}
{"label": 84, "index": 10850, "code": "N = input()\nans = 0\nfor _ in range(N):\n    l, r = map(int, raw_input().split())\n    ans += r-l+1\nprint ans\n"}
{"label": 84, "index": 10851, "code": "audience = []\ntotal = 0\ngroups = int(raw_input())\n\nfor line in xrange(groups):\n    audience.append(raw_input())\n\nfor line in audience:\n    group = map(int, line.split())\n    total += group[1] - group[0] + 1\n\nprint total"}
{"label": 84, "index": 10852, "code": "ans = 0\nfor i in range(int(input())):\n    a,b = map(int,input().split())\n    ans += b-a+1\nprint(ans)"}
{"label": 84, "index": 10853, "code": "from collections import defaultdict\nfrom itertools import product, groupby\nfrom math import pi\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right\nINF = 10 ** 10\n\n\ndef main():\n    N = int(input())\n    ans = 0\n    for _ in range(N):\n        l, r = map(int, input().split())\n        ans += r - l + 1\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 84, "index": 10854, "code": "# coding: utf-8\n# Here your code !\nans = 0\nN = int(input())\nfor i in range(N):\n    a , b = map(int,input().split())\n    ans = ans + b - a +1\nprint(ans)"}
{"label": 84, "index": 10855, "code": "if __name__ == '__main__':\n    N = int(input())\n    ans = 0\n    for i in range(N):\n        l = list(map(int, input().split()))\n        ans += abs(l[1]-l[0]+1)\n    print(ans)"}
{"label": 84, "index": 10856, "code": "def spaceinput():\n    return list(map(int,input().split(\" \")))\n\n\n\n\nN=int(input())\nl=list()\nfor i in range(N):\n    l.append(spaceinput())\n\nsum=0\nfor sl in l:\n    sum+= sl[1]-sl[0]+1\n\nprint(sum)\n"}
{"label": 84, "index": 10857, "code": "import sys\n\n# sys.stdin = open('b1.in')\n\n\ndef read_int_list():\n    return list(map(int, input().split()))\n\n\ndef read_str_list():\n    return input().split()\n\n\ndef read_int():\n    return int(input())\n\n\ndef read_str():\n    return input()\n\n\ndef main():\n    n = read_int()\n    res = 0\n    for i in range(n):\n        l, r = read_int_list()\n        r0 = r - l + 1\n        res += r0\n    print(res)\n\n\nmain()\n"}
{"label": 84, "index": 10858, "code": "N = int(input())\n\nsum_num = 0\nfor i in range(N):\n    l, r = map(int, input().split())\n    sum_num += r - l + 1\n\nprint(sum_num)"}
{"label": 84, "index": 10859, "code": "N = int(raw_input())\nanswer = 0\nfor n in xrange(N):\n  l, r = map(int, raw_input().split(' '))\n  answer += r - l + 1\nprint answer"}
{"label": 84, "index": 10860, "code": "#!/usr/bin/env python\nimport sys\nif __name__ == '__main__':\n    line = sys.stdin.readline()\n    N = int(line)\n    count = 0\n    for i in range(N):\n    \tline = sys.stdin.readline().split(\" \")\n    \tcount += int(line[1]) - int(line[0]) + 1\n    print(count)\n"}
{"label": 84, "index": 10861, "code": "N = int(input())\nsum = 0\nfor i in range(N):\n    l, r = map(int, input().split())\n    sum += r - l + 1\nprint(sum)\n"}
{"label": 84, "index": 10862, "code": "n=int(input())\nx=0\nfor i in range(n):\n  a,b=map(int,input().split())\n  x=x+b-a+1\nprint(x)"}
{"label": 84, "index": 10863, "code": "n = int(input())\ne = [[int(i) for i in input().split()] for i in range(n)]\nresult = 0\nfor i in e:\n    result += i[1] - i[0]\n\nprint(result + n)\n\n\n    \n         "}
{"label": 84, "index": 10864, "code": "#N\u3092\u30bb\u30c3\u30c8\u3059\u308b\nN = int(input())\npeople = 0\nfor i in range(N):\n    l,r = map(int,input().split())\n    people = people + (r - l + 1)\nprint(people)"}
{"label": 84, "index": 10865, "code": "# coding:utf-8\n\nn=int(input())\nsum=0\nfor i in range(0, n):\n    l_r=input()\n    l=int(l_r.split(\" \")[0])\n    r=int(l_r.split(\" \")[1])\n    sum+=r-l+1\n\nprint(sum)"}
{"label": 84, "index": 10866, "code": "N = int(input())\nans = 0\nfor _ in range(N):\n    l, r = map(int, input().split())\n    ans += r - l + 1\nprint(ans)\n"}
{"label": 84, "index": 10867, "code": "N=input()\nnum=0\nfor i in range(N):\n    x=map(int,raw_input().split())\n    temp_num=len(range(x[0],x[1]+1))\n    num=num+temp_num\nprint num    "}
{"label": 84, "index": 10868, "code": "N = int(input())\na = [list(map(int, input().split())) for i in range(N)]\n\nans = 0\nfor x in a:\n  ans += x[1] - x[0] + 1\n  \nprint(ans)\n"}
{"label": 84, "index": 10869, "code": "N = int(input())\na = 0\nfor i in range(N):\n    l, r = map(int, input().split())\n    a += r - l + 1\nprint(a)\n"}
{"label": 84, "index": 10870, "code": "n = int(input())\nans = 0\nfor i in range(n):\n    l, r = list(map(int, input().split()))\n    ans += r - l + 1\n\nprint(ans)"}
{"label": 84, "index": 10871, "code": "print(sum([1+len(range(*list(map(int,input().split())))) for i in range(int(input()))]))"}
{"label": 84, "index": 10872, "code": "# coding: utf-8\nimport sys\n\n\ndef main():\n\n    NumCount = 0\n\n    lines = sys.stdin.readlines()\n    for i,line in enumerate(lines):\n        if i==0:\n            continue\n        else:\n            value = line.split()\n            if len(value)==1:\n                NumCount += 1\n            else:\n                NumCount += int(value[1])-int(value[0]) + 1\n    print(NumCount)\n    return\n\n\nif __name__=='__main__':\n    main()\n"}
{"label": 84, "index": 10873, "code": "N = int(input())\nsum = 0\nfor n in range(N):\n    a, b = [int(i) for i in input().split()]\n    sum += b-a+1\n\nprint(sum)"}
{"label": 84, "index": 10874, "code": "N=int(input())\nans=N\nfor i in range(N):\n  a,b=map(int,input().split())\n  ans+=b-a\nprint(ans)"}
{"label": 84, "index": 10875, "code": "N=int(input())\nans=0\nfor i in range(N):\n l,r=map(int, input().split())\n ans+=r-l+1\nprint(ans)"}
{"label": 84, "index": 10876, "code": "N = int(input())\ntotal = 0\n\nfor i in range(N):\n    group = input().split()\n    start, end = int(group[0]), int(group[1])\n    total += end - start + 1\n\nprint(total)"}
{"label": 84, "index": 10877, "code": "n = int(input())\nprint(sum([-int(eval(input().replace(' ', '-')))+1 for i in range(n)]))\n"}
{"label": 84, "index": 10878, "code": "n = int(input())\nans = 0\nfor i in range(n):\n    a,b = map(int,input().split())\n    ans += (b - a) + 1\nprint(ans)"}
{"label": 84, "index": 10879, "code": "N = int(input())\n\ncount = 0\nfor i in range(N):\n    inlist = [int(_) for _ in input().split()]\n    count += inlist[1] - inlist[0] + 1\n\nprint(count)\n"}
{"label": 84, "index": 10880, "code": "# -*- coding:utf-8 -*-\nN = int(input())\nans = 0\nfor tmp in range(N):\n    l, r = map(int, input().split())\n    ans += r-l+1\nprint(ans)"}
{"label": 84, "index": 10881, "code": "n = int(input())\n\nsum = 0\n\nfor i in range(n):\n    l, r = map(int, input().split(\" \"))\n\n    sum += r - l + 1\n\nprint(sum)"}
{"label": 84, "index": 10882, "code": "N = int(input())\n\ns = 0\nfor _ in range(N):\n    l, r = [int(x) for x in input().split(' ')]\n    s += r - l + 1\n\nprint(s)\n"}
{"label": 84, "index": 10883, "code": "N = int(input())\nsum = 0\nfor i in range(N):\n  l, r = [int(n) for n in input().split()]\n  sum += r-l+1\nprint(sum)"}
{"label": 84, "index": 10884, "code": "n = int(input())\nans = 0\nfor _ in range(n):\n  l, r = map(int, input().split())\n  ans += r - l + 1\n  \nprint(ans)"}
{"label": 84, "index": 10885, "code": "itera = input()\nitera = int(itera)\ntotal = 0\n\nfor i in range(0, itera):\n\tvar1, var2 = input().split()\n\tvar1 = int(var1)\n\tvar2 = int(var2)\n\ttotal += (var2+1)-var1\n\nprint(total)"}
{"label": 84, "index": 10886, "code": "N=int(input())\npeople=0\nfor i in range(N):\n    left,right=map(int,input().split())\n    number = right - left +1\n    people += number\nprint(people)"}
{"label": 84, "index": 10887, "code": "N = int(raw_input())\ntemp = 0\nfor i in range(0,N):\n a = raw_input().split(\" \")\n temp += int(a[1]) - int(a[0])+1\nprint temp"}
{"label": 84, "index": 10888, "code": "N = int(input())\nX = [list(map(int, input().split())) for _ in range(N)]\n\nans = 0\nfor l, r in X:\n    ans += r - l + 1\nprint(ans)\n"}
{"label": 84, "index": 10889, "code": "n = int(input())\n\nhito = 0\nfor i in range(n):\n    lr = list(map(int,input().split()))\n    hito += (lr[1] - lr[0] +1 )\n    \nprint(hito)"}
{"label": 84, "index": 10890, "code": "n = int(input())\np = 0\nfor _ in range(n):\n  i,j = [int(k) for k in input().split()]\n  p += j-i+1\nprint(p)"}
{"label": 84, "index": 10891, "code": "N = int(input())\nL = []\nR = []\nfor i in range(N):\n    l, r = list(map(int, input().split()))\n    L.append(l)\n    R.append(r)\ntotal = 0\nfor i in range(N):\n    total += R[i] - L[i] + 1\n\nprint(total)"}
{"label": 84, "index": 10892, "code": "N = int(input())\nans = 0\n\nfor i in range(N):\n    a, b = map(int, input().split())\n    ans += b-a+1\n\nprint(ans)"}
{"label": 84, "index": 10893, "code": "n = int(input())\nans = 0\nfor i in range(n):\n    l, r = list(map(int, input().split()))\n    ans += r - l + 1\nprint(ans)"}
{"label": 84, "index": 10894, "code": "N = int(input())\nans = 0\nfor i in range(N):\n    L,R = map(int,input().split())\n    ans += R-L +1\n\nprint(ans)\n\n"}
{"label": 84, "index": 10895, "code": "n = int(input())\nans = 0\nfor i in range(n):\n    l, r = map(int, input().split())\n    ans += r - l + 1\nprint(ans)\n"}
{"label": 84, "index": 10896, "code": "N = int(input())\nans = 0\n\nfor i in range(N):\n    l, r = map(int, input().split())\n    ans += r-l+1\n\nprint(ans)\n"}
{"label": 84, "index": 10897, "code": "ans = 0\nfor i in range(input()):\n    l, r = map(int, raw_input().split())\n    ans += r - l + 1\nprint ans"}
{"label": 84, "index": 10898, "code": "N = int(input())\ntotal = 0\nfor i in range(N):\n    l,r = map(int,input().split())\n    total += (r - l) + 1\nprint(total)\n"}
{"label": 84, "index": 10899, "code": "#!/usr/bin/python3\n\nn = int(input())\n\nt = 0\nfor i in range(n):\n    c = list(map(int, input().split()))\n    t += c[1] - c[0] + 1\n\nprint(t)"}
{"label": 84, "index": 10900, "code": "n = int(input())\nans = 0\nfor i in range(n):\n    l, r = map(int,input().split())\n    ans += (r - l + 1)\n\nprint(ans)\n"}
{"label": 84, "index": 10901, "code": "n=int(input())\nans=0\nfor i in range(n):\n    a,b=map(int,input().split())\n    ans += b-a+1\n\nprint(ans)"}
{"label": 84, "index": 10902, "code": "N = int(input())\np = 0\nfor _ in range(N):\n    l, r = map(int, input().split())\n    p += r - l +1\nprint(p)"}
{"label": 84, "index": 10903, "code": "num = int(input())\nans = 0\nfor a in range(num):\n    temp = input().split(\" \")\n    for b in range(len(temp)):\n        temp[b] = int(temp[b])\n    ans += (temp[1] - temp[0]) + 1\nprint(ans)"}
{"label": 84, "index": 10904, "code": "N=int(input())\n\nans=0\n\nfor i in range(N):\n\ta=[int(i) for i in input().split()]\n\tans+=(a[1]-a[0]+1)\nprint(ans)"}
{"label": 84, "index": 10905, "code": "N = int(input())\ntotal = 0\nfor i in range(N):\n    tmp = list(map(int,input().split()))\n    total += tmp[1]-tmp[0]+1\nprint(total)\n    \n    "}
{"label": 84, "index": 10906, "code": "N = int(input())\nsum = 0\n\nfor num in range(N):\n\ta, b = (int(_) for _ in raw_input().split()) \n\tsum += b - a + 1\n\nprint(sum)"}
{"label": 84, "index": 10907, "code": "N = int(input())\n\nans = 0\nfor i in range(N):\n    l, r = map(int, input().split())\n    ans += r - l + 1\n\nprint(ans)\n"}
{"label": 84, "index": 10908, "code": "N = input()\nans = 0\nfor i in xrange(N):\n    l, r = map(int, raw_input().split())\n    ans += r - l + 1\nprint ans\n"}
{"label": 84, "index": 10909, "code": "N= int(input())\n\nL = []\nR = []\nfor i in range(N):\n\tl, r= map(int, input().split())\n\tL.append(l)\n\tR.append(r)\n\nQ=[]\nP=0\nfor x in range(N):\n    P=R[x]-L[x]+1\n    Q.append(P)\n    \nprint(sum(Q))"}
{"label": 84, "index": 10910, "code": "n = int(input())\nans = 0\nfor tc in range(n):\n  l, r = map(int, input().split())\n  ans += (r - l) + 1\nprint(ans)"}
{"label": 84, "index": 10911, "code": "N = int(input())\nf = lambda l,r: r-l+1\nprint(sum(f(*map(int,input().split())) for i in range(N)))"}
{"label": 84, "index": 10912, "code": "n = int(raw_input())\ns = 0\nfor _ in range(n):\n    l,r = map(int, raw_input().split())\n    s += r - l + 1\nprint s\n"}
{"label": 84, "index": 10913, "code": "sum=0\nfor i in range(int(input())):\n  l,r=[int(x) for x in  input().split()]\n  sum = sum + r - l + 1\nprint(sum)\n\n\n"}
{"label": 84, "index": 10914, "code": "import numpy as np\n\n\ndef getInput():\n    \"\"\"\n\n    :return: list of list of str. 1st dim: row, 2nd dim: column.\n    \"\"\"\n    separator = ' '\n    ret_array = []\n    while True:\n        try:\n            row = input().split(sep=separator)\n            ret_array.append(row)\n        except EOFError:\n            break\n    return ret_array\n\n\ng = getInput()\n\n# number\nN = np.array(list(map(int, g[0])), dtype=np.int32)\n# l,r\nl = []\nr = []\nfor row_idx in range(1, len(g)):\n    l.append(int(g[row_idx][0]))\n    r.append(int(g[row_idx][1]))\n\nl = np.array(l, dtype=np.int32)\nr = np.array(r, dtype=np.int32)\n\ns = r-l+1\n\nprint(s.sum())\n"}
{"label": 84, "index": 10915, "code": "# coding: utf-8\n\nseat = [0] * 100000\nn = input()\nfor _ in xrange(n):\n    l, r = map(int, raw_input().split())\n    for j in xrange(l-1, r):\n        seat[j] = 1\n\nprint seat.count(1)\n"}
{"label": 84, "index": 10916, "code": "import numpy as np\nhoge = input()\nN = int(hoge)\ndata = np.zeros((N,2))\nnum = 0\nfor i in range(N):\n    hoge = input()\n    hoge = hoge.strip().split(\" \")\n    num += int(hoge[1])-int(hoge[0])+1\nprint(num)"}
{"label": 84, "index": 10917, "code": "n = int(input())\nans = 0\nfor i in range(n):\n    a, b = list(map(int, input().split()))\n    ans += b - a +1\nprint(ans)"}
{"label": 84, "index": 10918, "code": "n = int(input().strip())\ntotal = 0\nfor _ in range(n):\n    l, r = [int(x) for x in input().strip().split()]\n    total += r - l + 1\nprint(total)"}
{"label": 84, "index": 10919, "code": "N = input()\ncus = 0\n\nfor i in range(N):\n    l = (map(int, raw_input().split()))\n    cus += (l[1] - l[0] + 1)\n\nprint cus\n"}
{"label": 85, "index": 10920, "code": "from collections import Counter\nN = int(input())\nnumbers = [int(input()) for i in range(N)]\n\nnum_cnt = Counter(numbers)\n\nans_box = list(filter(lambda x:x%2==1 , num_cnt.values()))\nprint(len(ans_box))"}
{"label": 85, "index": 10921, "code": "def Write_and_Erase():\n\n    numbers = []\n    try:\n        LOCAL_FLAG\n        N = 3\n        numbers = [6, 2, 6]\n        # N = 4\n        # numbers = [2, 5, 5, 2]\n        N = 6\n        numbers = [12, 22, 16, 22, 18, 12]\n\n    except NameError:\n        N = int(input())\n        for i in range(N):\n            numbers.append(int(input()))\n\n    onPaper = set([numbers[0]])\n    for i in range(1, N):\n        if numbers[i] in onPaper:\n            onPaper.remove(numbers[i])\n        else:\n            onPaper.add(numbers[i])\n\n    # print(onPaper)\n    print(len(onPaper))\n\n\nWrite_and_Erase()"}
{"label": 85, "index": 10922, "code": "from collections import Counter\n\ndef main():\n    N = int(input())\n    A = []\n\n    for _ in range(N):\n        A.append(int(input()))\n\n    ans = 0\n    counter = Counter(A)\n    for _, cnt in counter.most_common():\n        if cnt % 2 == 1:\n            ans += 1\n\n    print(ans)\n    \nmain()"}
{"label": 85, "index": 10923, "code": "n = int(input())\nA = [int(input()) for i in range(n)]\n\nB = set()\nfor a in A:\n    if a in B:\n        B.remove(a)\n    else:\n        B.add(a)\nprint(len(B))\n        \n"}
{"label": 85, "index": 10924, "code": "N = input()\nS = set()\nfor _ in range(N):\n    A = input()\n    if A in S:\n        S.remove(A)\n    else:\n        S.add(A)\nprint len(S)\n"}
{"label": 85, "index": 10925, "code": "a=input()\nb=[]\nfor i in range(a):\n    b.append(input())\nb.sort()\nc=[]\npre=0\ntime=0\nfor i in b:\n    if pre==i:\n        time+=1\n    else:\n        if time%2==1:\n            c.append(pre)\n        pre=i\n        time=1\nif time%2!=0 and pre!=0:\n    c.append(pre)\nprint len(c)"}
{"label": 85, "index": 10926, "code": "import numpy as np\nN=input()\nx=[]\ndict={}\nfor i in range(N):\n    a=raw_input()\n    if a in dict:\n        if dict[a]==1:\n            dict[a]=0\n        else:\n            dict[a]=1\n    else:\n        dict[a]=1\n\nprint np.sum(np.array(dict.values())%2)\n"}
{"label": 85, "index": 10927, "code": "d = {}\nfor i in range(input()):\n  a = input()\n  d[a] = d.get(a, 0) + 1\n\nprint len(filter(lambda x: x % 2, map(lambda x: d[x], d)))\n"}
{"label": 85, "index": 10928, "code": "import functools\nimport collections\nn = int(input())\nprint(sum(\n    map(\n        lambda x: x % 2,\n        functools.reduce(\n            lambda d, v: d.update({v: d[v]+1}) or d,\n            [int(input()) for i in range(n)],\n            collections.defaultdict(lambda: 0),\n        ).values(),\n    )\n))\n"}
{"label": 85, "index": 10929, "code": "from collections import Counter\n\nn = int(input())\ncnt = Counter(int(input()) for _ in range(n))\nprint(sum(1 for k, v in cnt.most_common() if v % 2 == 1))"}
{"label": 85, "index": 10930, "code": "from collections import Counter\nprint(sum([i % 2 for i in Counter([input() for _ in range(int(input()))]).values()]))"}
{"label": 85, "index": 10931, "code": "n = int(input())\nd = dict()\nfor i in range(n):\n    a = int(input())\n    if a in d:\n        if d[a] == 0:\n            d[a] = 1\n        else:\n            d[a] = 0\n    else:\n        d[a] = 1\n\nprint(sum(d.values()))\n"}
{"label": 85, "index": 10932, "code": "n = int(input())\nm = set()\nwhile n:\n    x = int(input())\n    if x in m:\n        m.remove(x)\n    else:\n        m.add(x)\n    n -= 1\nprint(len(m))\n"}
{"label": 85, "index": 10933, "code": "n=int(input())\n\nleft=set()\nfor _ in range(n):\n    i=input()\n    if i in left:\n        left.remove(i)\n    else:\n        left.add(i)\nprint(len(left))"}
{"label": 85, "index": 10934, "code": "# coding=utf-8\nN = int(raw_input().rstrip())\nA = {}\nfor i in range(N):\n    a = int(raw_input())\n    if a in A:\n        if A[a] == 1:\n            A[a] = 0\n        else:\n            A[a] = 1\n    else:\n        A[a] = 1\nprint sum(A.values())"}
{"label": 85, "index": 10935, "code": "import sys\n\nstdin = sys.stdin\n\nni = lambda: int(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nns = lambda: stdin.readline()\n\nn = ni()\ns = set()\nfor i in range(n):\n    x = ni()\n    if x in s:\n        s.remove(x)\n    else:\n        s.add(x)\nprint(len(s))"}
{"label": 85, "index": 10936, "code": "# -*- coding: utf-8 -*-\n\"\"\"\n\"\"\"\n\n\nMemo = []\ndef solve(data):\n    global Memo\n    for d in data:\n        if d in Memo:\n            Memo.remove(d)\n        else:\n            Memo.append(d)\n    return len(Memo)\n\n\ndef solve2(data):\n    from collections import Counter\n    c = Counter(data).most_common()\n    remaining = [x for x in c if x[1]%2==1]\n    return len(remaining)\n\n\ndef main():\n    N = int(input())\n    data = [int(input()) for _ in range(N)]\n    result = solve2(data)\n    print(result)\n\n\nif __name__ == '__main__':\n    main()\n    "}
{"label": 85, "index": 10937, "code": "n=int(raw_input())\nli={}\nwhile n !=0:\n    a = raw_input()\n    if a in li:\n        del li[a]\n    else:\n        li[a]=a\n    n-=1\nprint(len(li))"}
{"label": 85, "index": 10938, "code": "import collections\nN = int(input())\nanswer = 0\nflag = collections.defaultdict(int)\n\nfor i in range(N):\n  a = int(input())\n  flag[a] = (flag[a]+1)%2\n\nlist = list(flag.values())\n\nfor i in range(len(list)):\n  if list[i] == 1:\n    answer+=1\n\nprint(answer)"}
{"label": 85, "index": 10939, "code": "N = int(input())\nfrom collections import Counter\nc = []\nfor i in range(N):\n    c.append(int(input()))\n\nc=Counter(c)\nprint(sum([1 for k, v in c.items() if v % 2 != 0]))"}
{"label": 85, "index": 10940, "code": "def C_WriteandErase(N, A):\n    import collections\n    count_dict = collections.Counter(A)  # \u8a00\u3063\u305f\u6570\u5b57\u306e\u51fa\u73fe\u56de\u6570\n    ans = 0\n    for k, v in count_dict.items():  # \u6570\u5b57k\u306fv\u56de\u51fa\u305f\u3053\u3068\u3092\u610f\u5473\u3059\u308b\n        if v % 2 == 0:  # k\u304c\u5076\u6570\u56de\u51fa\u305f\u306a\u3089\u3001k\u306f\u7d19\u306b\u6b8b\u3089\u306a\u3044\n            pass\n        else:\n            ans += 1  # k\u304c\u5947\u6570\u56de\u51fa\u305f\u306a\u3089\u3001\u305d\u306e\u6570\u5b57\u306f\u6b8b\u3063\u3066\u3044\u308b\n    return ans\n\nN = int(input())\nA = [int(input()) for i in range(N)]\nprint(C_WriteandErase(N, A))"}
{"label": 85, "index": 10941, "code": "N = int(input())\n\na = [int(input()) for i in range(N)]\n\na = sorted(a)\n\nt = 0\nb = False\nans = 0\nfor i in range(N):\n    if not a[i] == t:\n        if b:\n            ans += 1\n        t = a[i]\n        b = True\n    else:\n        if b:\n            b = False\n        else:\n            b = True\nif b:\n    ans += 1\n\n\nprint(ans)"}
{"label": 85, "index": 10942, "code": "n=int(input())\nbuff=[]\nans=1\nfor i in range(n):\n    buff.append(input())\n\na=sorted(buff)\n\nfor i in range(1,n):\n    if a[i] == a[i-1]:\n        a[i-1]= -1\n        a[i]= -1\n        if ans>0:\n            ans -= 1\n    else:\n        ans += 1\n\nprint(ans)\n"}
{"label": 85, "index": 10943, "code": "N = int(input())\nset = set([])\nfor _ in range(N):\n    p = int(input())\n    if p not in set:\n        set.add(p)\n    else:\n        set.remove(p)\nprint(len(set))"}
{"label": 85, "index": 10944, "code": "import sys\nfrom collections import Counter\n\n# sys.stdin = open('c1.in')\n\n\ndef read_int_list():\n    return list(map(int, input().split()))\n\n\ndef read_str_list():\n    return input().split()\n\n\ndef read_int():\n    return int(input())\n\n\ndef read_str():\n    return input()\n\n\ndef main():\n    n = read_int()\n    c = Counter()\n    for i in range(n):\n        a = read_int()\n        c[a] += 1\n\n    res = 0\n    for j in c:\n        if c[j] % 2 != 0:\n            res += 1\n    print(res)\n\n\nmain()\n"}
{"label": 85, "index": 10945, "code": "\n\nN=int(input())\na=[]\nfor i in range(N):\n    a.append(int(input()))\n\nchk={}\n\nfor sa in a:\n    if sa in chk:\n        if chk[sa]==1:\n            chk[sa]=0\n        else:\n            chk[sa]=1\n    else:\n        chk[sa]=1\n\n\nprint(sum(chk.values()))\n"}
{"label": 85, "index": 10946, "code": "dict = {}\nN = int(raw_input())\nfor i in range(0,N):\n j = raw_input()\n try:\n  del dict[j]\n except:\n  dict[j]=1\nprint len(dict)"}
{"label": 85, "index": 10947, "code": "\ndef solve():  # 073C - Write and Erase\n    N = int(input())\n    joisino_list = {}\n    cnt = 0\n\n    for _ in range(N):\n        a = int(input())\n\n        if a in joisino_list:\n            joisino_list[a] += 1\n        else:\n            joisino_list[a] = 1\n\n    for i in joisino_list.values():\n        if i % 2:\n            cnt += 1\n\n    print(cnt)\n    \n  \nsolve()"}
{"label": 85, "index": 10948, "code": "import collections as cl\nimport numpy as np\n\n# \u30c7\u30d0\u30c3\u30b0\u7528\nDEBUG = False\n#DEBUG = True\n\n# \u5ba3\u8a00\nresult = 0\nA = []\nELEM_MAX = 10000\n\n# \u5165\u529b\u90e8\nif DEBUG:\n    N = '10'\n    a = '1 2 3 4 5'\n\nelse:\n    N = int(input())\n\n    for i in range(N):\n        a = int(input())\n        A.append(a)\n\n# \u51e6\u7406\u90e8\nA_counter = cl.Counter(A)\nfor val in A_counter.values():\n    result += val % 2\n\n# \u51fa\u529b\u90e8\nprint(result)"}
{"label": 85, "index": 10949, "code": "time = int(input())\nans = []\nn = 0\nfor i in range(time):\n    ans.append(input())\nans.sort(key=int)\nwhile n+1 < len(ans):\n    if ans[n] == ans[int(n + 1)]:\n        ans.pop(n)\n        ans.pop(n)\n    else:\n        n += 1\nprint(len(ans))"}
{"label": 85, "index": 10950, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\n\ndef main():\n    N = int(input())\n\n    nums = set()\n    for _ in range(N):\n        a = int(input())\n        if a in nums:\n            nums.remove(a)\n        else:\n            nums.add(a)\n\n    print(len(nums))\n\nif __name__ == \"__main__\": main()\n"}
{"label": 85, "index": 10951, "code": "from sys import stdin\nn = int(stdin.readline())\ndi = {}\nfor i in xrange(n):\n m = int(stdin.readline())\n di[m] = di.get(m,0)^1\nans = 0\nfor i in di:\n ans += di[i]\nprint ans"}
{"label": 85, "index": 10952, "code": "N = input()\n\nl = []\n\nfor i in range(N):\n    l.append(input())\n\nl.sort()\n\nptr = 0\nres = 0\nwhile ptr < N:\n    cc = l[ptr]\n    f = 0\n    while (ptr < N and l[ptr] == cc):\n        f += 1\n        ptr += 1\n    res += f%2\n\nprint res\n"}
{"label": 85, "index": 10953, "code": "n=int(input())\nbuff=[]\nans=1\nfor i in range(n):\n    buff.append(input())\n\na=sorted(buff)\n\nfor i in range(1,n):\n    if a[i] == a[i-1]:\n        a[i-1]= -1\n        a[i]= -1\n        if ans>0:\n            ans -= 1\n    else:\n        ans += 1\n\nprint(ans)"}
{"label": 85, "index": 10954, "code": "import collections as col\n\n\nn = int(input())\nary = []\nfor _ in range(n):\n    ary.append(input())\n\nary = col.Counter(ary)\n\nprint(len([v for v in ary.values() if v%2 != 0]))"}
{"label": 85, "index": 10955, "code": "n = int(input())\na = [int(input()) for i in range(n)]\n\na.sort()\n\nfor i in range(n-1):\n    if a[i] == a[i+1]:\n        a[i] = 0\n        a[i+1] = 0\n\nprint(len(a)-a.count(0))\n"}
{"label": 85, "index": 10956, "code": "n=int(input())\na=[int(input()) for i in range(n)]\nb=[]\n\nm=0\ncount=[0 for i in range(n)]\ncount[m]=1\n\nans_count=0\na.sort()\n\nfor i in range(n-1):\n    if a[m]==a[i+1]:\n        count[m]=count[m]+1\n    else:\n        m=i+1\n        count[m]=1\n\nfor i in range(n):\n     ans_count=ans_count+count[i]%2\n\nprint(ans_count)"}
{"label": 85, "index": 10957, "code": "N = int(input())\ns = set()\nfor i in range(N):\n    j = int(input())\n    if j in s:\n        s.remove(j)\n    else:\n         s.add(j)\n\nprint(len(s))\n"}
{"label": 85, "index": 10958, "code": "n=int(raw_input())\nli={}\nwhile n !=0:\n    a = raw_input()\n    if a in li:\n        del li[a]\n    else:\n        li[a]=a\n    n-=1\nprint(len(li))\n"}
{"label": 85, "index": 10959, "code": "n = int(input())\ncard = set()\n\nfor i in range(n):\n    num = int(input())\n    if num in card:\n        card.remove(num)\n    else:\n        card.add(num)\nprint(len(card))"}
{"label": 85, "index": 10960, "code": "from collections import Counter\nN=int(input())\nc=Counter([ input() for _ in range(N) ])\nprint(len([ 1 for k in c.keys() if c[k]%2==1]))"}
{"label": 85, "index": 10961, "code": "N=int(input())\n\nA=[int(input()) for i in range(N)]\nA.sort()\nans=N\n\nflag=False\n\nfor i in range(N-1):\n\tif flag==True:\n\t\tflag=False\n\t\tcontinue\n\telif A[i]==A[i+1]:\n\t\tans-=2\n\t\tflag=True\n#print(A)\nprint(ans)"}
{"label": 85, "index": 10962, "code": "n=int(raw_input())\nres = set([])\nfor i in range(n) :\n    x = int(raw_input())\n    if x in res :\n        res.remove(x)\n    else :\n        res.add(x)\nprint len(res)"}
{"label": 85, "index": 10963, "code": "from collections import Counter\n\nN = int(input())\nA = [int(input()) for _ in range(N)]\n\nans = 0\nc = Counter(A)\nfor x in c:\n    if c[x] % 2 != 0:\n        ans += 1\nprint(ans)\n"}
{"label": 85, "index": 10964, "code": "from collections import Counter\n\ndef main():\n    n = int(input())\n    c = Counter()\n    for _ in range(n):\n        x = int(input())\n        c[x] += 1\n    ans = 0\n    for cc in c.values():\n        if cc % 2 == 1:\n            ans += 1\n    print(ans)\n    \nif __name__ == '__main__':\n    main()"}
{"label": 85, "index": 10965, "code": "n = int(input())\nA = [int(input()) for i in range(n)]\n \nB = set()\nlenB = 0\nfor a in A:\n    if a in B:\n        B.remove(a)\n        lenB -= 1\n    else:\n        B.add(a)\n        lenB += 1\nprint(lenB)"}
{"label": 85, "index": 10966, "code": "N = int(input())\nA = []\nfor i in range(N):\n    A.append(int(input()))\nsortedA = sorted(A)\n\ncount = 1\noddA = []\nfor i in range(len(sortedA)):\n    if i+1==len(sortedA):\n        if count%2==1:\n            oddA.append(sortedA[i])\n        count = 1\n    else:\n        if sortedA[i]==sortedA[i+1]:\n            count += 1\n        else:\n            if count%2==1:\n                oddA.append(sortedA[i])\n            count = 1\n\nprint(len(oddA))"}
{"label": 85, "index": 10967, "code": "d = dict()\nfor i in range(int(input())):\n  elem = int(input())\n  if elem in d:\n    del d[elem]\n  else:\n    d[elem] = i\nprint(len(d))"}
{"label": 85, "index": 10968, "code": "from collections import defaultdict \n\nN = int(raw_input())\nd = defaultdict(int)\nfor i in xrange(N):\n    A = int(raw_input())\n    d[A] = (d[A] + 1) % 2\nans = 0\nfor v in d.values():\n    ans += v\nprint ans\n"}
{"label": 85, "index": 10969, "code": "number_set = set()\nN = int(input())\n\nfor i in range(N):\n    new_num = input()\n    if new_num in number_set:\n        number_set.remove(new_num)\n    else:\n        number_set.add(new_num)\n\nprint(len(number_set))"}
{"label": 85, "index": 10970, "code": "# -*- coding: utf-8 -*-\n\nimport os\nimport sys\nimport math\nimport numpy as np\n\n\nN = int(input())\nA = np.array([int(input()) for i in range(N)])\n\ncounter = {}\n\nfor a in A:\n    if a in counter.keys():\n        counter[a] = abs(counter[a] - 1)\n    else:\n        counter[a] = 1\n\nprint(sum(counter.values()))"}
{"label": 85, "index": 10971, "code": "import numpy as np\nhoge = input()\nN = int(hoge)\npaper ={}\nfor i in range(N):\n    hoge = input()\n    hoge = hoge.strip()\n    if hoge in paper:\n        paper.pop(hoge)\n    else:\n        paper[hoge] = 1\n    \nprint(len(paper))"}
{"label": 85, "index": 10972, "code": "from collections import Counter\nc = Counter([int(raw_input()) for _ in range(int(raw_input()))])\nprint len(filter(lambda x: x % 2 == 1, c.values()))\n"}
{"label": 85, "index": 10973, "code": "N = int(input())\nd = {}\nfor i in range(N):\n    a = int(input())\n    if a in d:\n        d[a] = 1 - d[a]\n    else:\n        d[a] = 1\nprint(sum(d.values()))\n"}
{"label": 85, "index": 10974, "code": "print(sum([1 if a in s else -1 for s in [set()] for _ in [0]*(int(input())) for a in [int(input())] if (a not in s and not s.add(a)) or not s.remove(a)]))"}
{"label": 85, "index": 10975, "code": "N=int(input())\nA=[int(input()) for i in range(N)]\nA.sort()\ni=0\nans=0\nwhile i<N:\n  p=A[i]\n  count=0\n  for j in range(i,N):\n    if A[j]==A[i]:\n      count+=1\n    else:\n      break\n  if count%2==1: ans+=1\n  i+=count\nprint(ans)"}
{"label": 85, "index": 10976, "code": "import numpy as np\n\nn = int(input())\n\na = np.zeros(n, dtype = int)\n\nfor i in range(n):\n    a[i] = int(input())\n\na = np.sort(a)\n\nsum = 0\nfor i in range(n):\n    if(i == 0):\n        flag = 1\n    elif(a[i - 1] == a[i]):\n        flag += 1\n    else:\n        if(flag % 2 == 1):\n            sum += 1\n        else:\n            flag = 1\n\nif(flag % 2 == 1):\n    sum += 1\n\nprint(sum)"}
{"label": 85, "index": 10977, "code": "# -*- coding: utf-8 -*-\nimport heapq\nimport math\n\nN = int(input())\nA = []\nfor i in range(N):\n    A.append(int(input()))\nA = sorted(A)\nnum = 0\nbef = None\ncount = 0\nfor a in A:\n    if bef is None:\n        bef = a\n    if bef == a:\n        count += 1\n    else:\n        if count % 2 == 1:\n            num += 1\n        count = 1\n    bef = a\nif count % 2 == 1:\n    num += 1\n\nprint(num)\n"}
{"label": 85, "index": 10978, "code": "a = int(input())\ns = set()\nt = 0\nfor i in range(a):\n   nb = int(input())\n   if nb in s:\n      s.remove(nb)\n      t -= 1\n   else:\n      s.add(nb)\n      t += 1\nprint(t)"}
{"label": 85, "index": 10979, "code": "N = input()\nS = set()\nfor i in xrange(N):\n    a = int(raw_input())\n    if a in S:\n        S.discard(a)\n    else:\n        S.add(a)\nprint len(S)\n"}
{"label": 85, "index": 10980, "code": "# -*- coding:utf-8 -*-\nN = int(input())\nans = 0\narray = []\nd = {}\nfor tmp in range(N):\n    a = int(input())\n    array.append(a)\n    if a not in d:\n        d[a] = 1\n    else:\n        d[a] += 1\narray = list(set(array))\nfor tmp in range(len(array)):\n    if d[array[tmp]]%2 == 1:\n        ans += 1\n    else:\n        pass\nprint(ans)"}
{"label": 85, "index": 10981, "code": "N = int(input())\ncard = set()\n\nfor i in range(N):\n    A = int(input())\n    if A in card:\n        card.remove(A)\n    else:\n        card.add(A)\nprint(len(card))"}
{"label": 85, "index": 10982, "code": "def i1():\n return int(input())\ndef i2():\n return [int(i) for i in input().split()]\nfrom collections import defaultdict\nd = defaultdict(int)\nn=i1()\na=0\nfor i in range(n):\n    d[i1()]+=1\nfor i in d.values():\n    if i%2==1:\n      a+=1\nprint(a)"}
{"label": 85, "index": 10983, "code": "from collections import Counter\n\nN = int(input())\nA = []\n\nfor _ in range(N):\n    A.append(int(input()))\n\nans = 0\ncounter = Counter(A)\nfor _, cnt in counter.most_common():\n    if cnt % 2 == 1:\n        ans += 1\n        \nprint(ans)"}
{"label": 85, "index": 10984, "code": "from collections import Counter\n\nn = int(input())\nc = Counter(int(input()) for _ in range(n))\nprint(sum(v & 1 for v in c.values()))\n"}
{"label": 85, "index": 10985, "code": "N = int(input())\nResult = set()\nfor i in range(N):\n    number = int(input())\n    if  number in Result:\n        Result.remove(number)\n    else:\n        Result.add(number)\nprint(len(Result))"}
{"label": 85, "index": 10986, "code": "N = input()\na = [input() for i in range(N)]\n#print a\n\ndict={}\n\n\nfor i in range(N):\n\tif a[i] in dict:\n\t\tdict[ a[i] ]+=1 \n\telse:\n\t\tdict[ a[i] ]=1\n\n#print dict\n\ncnt=0\nfor key,value in dict.items():\t\t\t\n\tcnt+=value%2\n\nprint cnt\n\n"}
{"label": 85, "index": 10987, "code": "from collections import defaultdict\nd = defaultdict(int)\nn = int(raw_input())\nfor _ in range(n):\n    d[int(raw_input())] += 1\nprint len(filter(lambda x: x % 2 == 1, d.values()))\n"}
{"label": 85, "index": 10988, "code": "num=int(raw_input())\ntmp={}\nfor i in range(num):\n    a=int(raw_input())\n    if a in tmp:\n        tmp[a]+=1\n    else:\n        tmp[a]=1\n\noutput=0\nfor i in tmp:\n    if tmp[i]%2 ==1:\n        output+=1\nprint output"}
{"label": 85, "index": 10989, "code": "N = int(raw_input())\nd = {}\nfor n in xrange(N):\n  a = int(raw_input())\n  d[a] = d.get(a, 0) + 1\n\nanswer = 0\nfor x in d.itervalues():\n  if x % 2 == 1:\n    answer += 1\n\nprint answer"}
{"label": 85, "index": 10990, "code": "N = input()\nN = int(N)\n\na_list = {}\n\nans = 0\n\nfor i in range(N):\n    a = input()\n    a = int(a)\n    if a not in a_list:\n        a_list[a] = 1\n    else:\n        a_list[a] = (a_list[a] + 1) % 2\n    if a_list[a]:\n        ans += 1\n    else:\n        ans -= 1\n\nprint(ans)"}
{"label": 85, "index": 10991, "code": "from collections import Counter\n\nN=int(input())\n\nA=[]\n\nfor i in range(N):\n    a=int(input())\n    A.append(a)\n\nC=Counter(A)\n\nD=C.values()\n\ncnt = 0\n\nfor x in D:\n    if x%2!=0:\n        cnt += 1\n    else:\n        pass\n    \nprint(cnt)"}
{"label": 85, "index": 10992, "code": "from collections import Counter\n\nif __name__ == '__main__':\n    N = int(input())\n    A = []\n    for i in range(N):\n        A.append(int(input()))\n\n    counter_a = Counter(A)\n\n    ans = 0\n    for count in counter_a.values():\n        if count % 2 != 0:\n            ans += 1\n    # print(counter_a.values())\n    print(ans)\n"}
{"label": 85, "index": 10993, "code": "from collections import Counter\n\nN = int(input())\na = [int(input()) for i in range(N)]\n\ncounter = Counter(a)\n\nans = 0\nfor num in counter:\n\tif counter[num] % 2 == 1:\n\t\tans += 1\n\n        \nprint(ans)\n"}
{"label": 85, "index": 10994, "code": "num = int(input())\nary = []\nans = 0\nfor a in range(num):\n    ary.append(int(input()))\nary.sort()\nikkomae = ary[0]\ncount = 1\nfor a in range(num):\n    ind = a + 1\n    if ind == num:\n        break\n    imano = ary[ind]\n    if ikkomae == imano:\n        count+=1\n    else:\n        if(count%2==1):\n            ans+=1\n        count = 1\n    ikkomae = imano\nif(count%2==1):\n    ans+=1\nprint(ans)\n        "}
{"label": 85, "index": 10995, "code": "import numpy as np\nfrom collections import Counter\nn = int(input())\nnum_l=[input() for i in range(n)]\nndarr=np.array(list(Counter(num_l).values()))\nprint(len(ndarr[ndarr%2 != 0]))"}
{"label": 85, "index": 10996, "code": "# coding;utf-8\n\nn=int(input())\nans_dict={}\nfor i in range(0, n):\n    a=input()\n    if not a in ans_dict:\n        ans_dict[a]=1\n    else:\n        ans_dict[a]+=1\nsum=0\nfor thing in ans_dict:\n    if ans_dict[thing]%2:\n        sum+=1\nprint(sum)\n"}
{"label": 85, "index": 10997, "code": "N = int(input())\nA = []\n\ns = set()\n\nfor _ in range(N):\n    inp = input()\n    if inp in s:\n        s.remove(inp)\n    else:\n        s.add(inp)\n\nprint(len(s))\n\n"}
{"label": 85, "index": 10998, "code": "N = input()\nnum = {}\nfor _ in xrange(N):\n    a = raw_input().strip()\n    if a in num: \n        num[a] += 1\n    else:\n        num[a] = 1\nc = 0\nfor key in num:\n    if(num[key]%2 == 1): c += 1\nprint c\n\n"}
{"label": 85, "index": 10999, "code": "N = int(input())\nans = set()\nfor i in range(N):\n    A = int(input())\n    if A in ans:\n        ans.remove(A)\n    else:\n        ans.add(A)\n        \nprint(len(ans))"}
{"label": 85, "index": 11000, "code": "import collections\n\nN = int(input())\nA = [int(input()) for _ in range(N)]\n\nd = collections.Counter(A)\nprint(sum([1 for k, v in d.items() if v % 2] ))"}
{"label": 85, "index": 11001, "code": "N = int(input())\ns = set()\nfor i in range(N):\n  a = int(input())\n  if a in s:\n    s.remove(a)\n  else:\n    s.add(a)\n\nprint(len(s))"}
{"label": 85, "index": 11002, "code": "#Write and Erase\n\nN = int(input())\nA = []\nfor i in range(N):\n    A.append(int(input()))\n    \nimport collections\nc = collections.Counter(A)\n\ncnt = 0\nfor i in c.values():\n    cnt += i%2\nprint(cnt)"}
{"label": 85, "index": 11003, "code": "import collections\n\nN = int(input())\n\ndef mod2(n):\n    a = n % 2\n    return a\n\nlis = []\nfor i in range(N):\n    a = int(input())\n    lis.append(a)\n\ncount = collections.Counter(lis)\n\nprint(sum(map(mod2, count.values())))"}
{"label": 85, "index": 11004, "code": "n = int(input())\nh = set()\nfor i in range(n):\n    a = int(input())\n    if a in h:\n        h.remove(a)\n    else:\n        h.add(a)\nprint(len(h))"}
{"label": 85, "index": 11005, "code": "n = int(input())\npool = []\nans = 0\nfor i in range(n):\n    a = int(input())\n    pool.append(a)\npool.sort()\n\nptr = 0\nwhile ptr < len(pool):\n    cc = pool[ptr]\n    f = 0\n    while ptr < len(pool) and pool[ptr] == cc:\n        ptr += 1\n        f += 1\n    ans += f%2\nprint(ans)\n"}
{"label": 85, "index": 11006, "code": "from collections import defaultdict\n\nn = int(input())\nl = defaultdict(int)\nfor _ in range(n):\n    a = input()\n    l[a] += 1\nans = 0\nfor i in l.values():\n    if i % 2 == 1:\n        ans += 1\n    else:\n        pass\nprint(ans)"}
{"label": 85, "index": 11007, "code": "#ABC073C\nimport sys\n\nn=int(raw_input())\ndic={}\nfor i in xrange(n):\n a=int(raw_input())\n if a in dic:\n  dic[a]^=1\n else:\n  dic[a]=1\n\nres=0\nfor i in dic:\n if dic[i]==1:\n  res+=1\nprint res\n"}
{"label": 85, "index": 11008, "code": "N = int(input())\nA = [int(input()) for _ in range(N)]\nA.sort()\n\n\ndef customCount(idx):\n    target = A[idx]\n    cnt = 1\n    idx += 1\n    while True:\n        if idx == N or A[idx] != target:\n            return cnt\n        else:\n            idx += 1\n            cnt += 1\n\n\nindex = 0\nresult = 0\nwhile True:\n    num = customCount(index)\n    index += num\n    if (num % 2) == 1:\n        result += 1\n    if N <= index:\n        break\nprint(result)"}
{"label": 85, "index": 11009, "code": "#!/usr/bin/python3\n\nn = int(input())\n\nnum = {}\nfor i in range(n):\n    a = input()\n    if a in num:\n        num[a] += 1\n    else:\n        num[a] = 1\n\nt = 0\nfor i in num.keys():\n    if num[i] % 2:\n        t += 1\n\nprint(t)"}
{"label": 85, "index": 11010, "code": "n = int(input().strip())\n\nd = {}\nfor _ in range(n):\n    a = int(input().strip())\n    d[a] = not d.get(a, False)\ntotal = 0\nfor v in d.values():\n    if v:\n        total += 1\nprint(total)"}
{"label": 85, "index": 11011, "code": "N = int(input())\nfrom collections import defaultdict\n\npaper_nums = defaultdict(lambda:int()) \nfor _ in range(N):\n  input_num = int(input())\n  if input_num in paper_nums:\n    paper_nums.pop(input_num)\n  else:\n    paper_nums[input_num]\nprint(len(paper_nums))\n"}
{"label": 85, "index": 11012, "code": "N = int(input())\ns = set()\nfor i in range(N):\n\ta = input()\n\tif a in s:\n\t\ts.remove(a)\n\telse:\n\t\ts.add(a)\nprint(len(s))"}
{"label": 85, "index": 11013, "code": "from collections import Counter\n\nN = int(input())\ntell_list = [input() for _ in range(N)]\ncount = 0\ntell_count = Counter(tell_list)\nfor num in tell_count.most_common():\n    count += num[1] % 2\nprint(count)"}
{"label": 85, "index": 11014, "code": "#!usr/bim/python\n#! -*- coding: utf-8 -*-\n\nn = raw_input()\nn = int(n)\n\nal = []\n\nfor i in range(n):\n    a = raw_input()\n    a = int(a)\n    al.append(a)\n\nal.sort()\n\nnum = 0\n\ni = 0\nwhile i < n:\n    if i == n-1:\n        num += 1\n        break\n    if al[i] == al[i+1]:\n        i += 2\n    else:\n        num += 1\n        i += 1\n\nprint num\n"}
{"label": 85, "index": 11015, "code": "N=int(input())\nA=set()\nfor i in range(N):\n    a=int(input())\n    if a not in A:\n        A.add(a)\n    else:\n        A.remove(a)\nprint(len(A))"}
{"label": 85, "index": 11016, "code": "from collections import defaultdict\n\ndef main():\n    d = defaultdict(lambda: 0)\n    n = int(input())\n    for _ in range(n):\n        x = int(input())\n        d[x] += 1\n\n    cnt = 0\n    for key, value in sorted(d.items(), key=lambda x: x[1], reverse=True):\n        if value%2 == 1:\n            cnt += 1\n    print(cnt)\n    \n\nif __name__ == \"__main__\":\n    main()"}
{"label": 85, "index": 11017, "code": "N = int(input())\ns = set()\nfor i in range(N):\n  A = int(input())\n  if A not in s:\n    s.add(A)\n  else:\n    s.remove(A)\nprint(len(s))"}
{"label": 85, "index": 11018, "code": "# coding: utf-8\ndef get_ln_inputs():\n    return input().split()\n\n\ndef get_ln_int_inputs():\n    return list(map(int, get_ln_inputs()))\n\n\ndef main():\n    N = get_ln_int_inputs()[0]\n    A = list()\n    for _ in range(N):\n        A.append(get_ln_int_inputs()[0])\n\n    res = {}\n    for a in A:\n        if not a in res:\n            res[a] = 1\n        else:\n            del res[a]\n    print(len(res))\n    return\n\n\nmain()"}
{"label": 85, "index": 11019, "code": "from collections import defaultdict\nn = int(input())\ndd=defaultdict(int)\nfor _ in range(n):\n    a=input()\n    dd[a]+=1\n    dd[a]%=2\nans=0\nfor k in dd.keys():\n    if dd[k]==1:\n        ans+=1\nprint(ans)\n"}
{"label": 85, "index": 11020, "code": "N = int(input())\ns = set()\nfor i in range(N):\n    A = input()\n    if A in s:\n        s.remove(A)\n    else:\n        s.add(A)\nprint(len(s))\n"}
{"label": 85, "index": 11021, "code": "from collections import defaultdict\nlst= defaultdict(bool)\nfor i in range(int(input())):\n    t = input()\n    lst[t] = not lst[t]\n\nprint(len([x for x in lst if lst[x]]))\n"}
{"label": 85, "index": 11022, "code": "d={}\nfor i in range(input()):a=input();d[a]=d.get(a,0)+1\nprint len(filter(lambda x:x%2,map(lambda x:d[x],d)))\n"}
{"label": 85, "index": 11023, "code": "n = int(input())\n\nf = {}\nfor i in range(n):\n    a = int(input())\n    if not f.get(a):\n        f[a] = True\n    else:\n        f[a] = None\n\nprint(sum(1 for i in f if f[i]))\n"}
{"label": 85, "index": 11024, "code": "ans=set()\nN=int(input())\nfor i in range(N):\n l=input()\n if l in ans:\n  ans.remove(l)\n else:\n  ans.add(l)\nprint(len(ans))"}
{"label": 85, "index": 11025, "code": "import sys\n\nwritten = set()\n\nN = int(sys.stdin.readline())\n\nfor i in range(N):\n    tmp = int(sys.stdin.readline())\n    if tmp in written:\n        written.remove(tmp)\n    else:\n        written.add(tmp)\nprint(len(written))"}
{"label": 85, "index": 11026, "code": "# coding: utf-8\ndic = {}\nfor i in range(int(input())):\n    s = input()\n    if s in dic:\n        dic[s] = (dic[s] + 1) % 2\n    else:\n        dic[s] = 1\nans = 0\nfor n in dic.items():\n    if n[1] == 1:\n        ans += 1\nprint(ans)"}
{"label": 85, "index": 11027, "code": "from collections import Counter\nn=int(input())\na=[int(input()) for i in range(n)]\nans=0\nfor k,v in Counter(a).items():\n    if v%2!=0:\n        ans+=1\nprint(ans)"}
{"label": 85, "index": 11028, "code": "#!/usr/bin/python\n\nimport sys\n\ndef main(argv):\n    line = sys.stdin.readline()\n    while line:\n        N = int(line)\n        sheet = set()\n        for i in xrange(N):\n            a = sys.stdin.readline()\n            if a in sheet:\n                sheet.remove(a)\n            else:\n                sheet.add(a)\n        print(len(sheet))\n        line = sys.stdin.readline()\n        \n\nif __name__ == \"__main__\":\n    main(sys.argv)"}
{"label": 85, "index": 11029, "code": "from collections import defaultdict, Counter\nfrom itertools import product, groupby\nfrom math import pi\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right\nINF = 10 ** 10\n\n\ndef main():\n    N = int(input())\n    c = Counter([int(input()) for _ in range(N)])\n    ans = 0\n    for k, v in c.items():\n        ans += v % 2 != 0\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 85, "index": 11030, "code": "\nN = int(input())\nx = [int(input()) for i in range(N)]\n\nx.sort()\ni=0\nwhile i < N-1:\n    if x[i]==x[i+1]:\n        del x[i+1]\n        del x[i]\n        N-=2\n        continue\n    i+=1\nprint(len(x))"}
{"label": 85, "index": 11031, "code": "N = int(input())\n\na = {}\nfor i in range(N):\n    a_i = int(input())\n    if a_i in a:\n        del a[a_i]\n    else:\n        a[a_i] = 1\n\nprint(len(a))"}
{"label": 85, "index": 11032, "code": "n = int(input())\n\nmoji = set()\nfor i in range(n):\n    a = int(input())\n    if a in moji:\n        moji.remove(a)\n    else:\n        moji.add(a)\n        \n    \nprint(len(moji))"}
{"label": 85, "index": 11033, "code": "def main():\n    N = int(input())\n    A = tuple(int(input()) for _ in range(N))\n\n    num = dict()\n    for n in A:\n        num[n] = num.get(n, 0) + 1\n\n    ans = 0\n    for v in num.values():\n        ans += v % 2\n\n    print(ans)\n\nmain()\n"}
{"label": 85, "index": 11034, "code": "N = int(input())\nlist1 = [int(input()) for i in range(N)]\n\ndict2 = {}\nfor i in list1:\n    if(i in dict2):\n        dict2[i] += 1\n    else:\n        dict2[i] = 1\n\ncount = 0;\nfor i in dict2.values():\n    if i % 2 == 1:\n        count += 1\nprint(count)"}
{"label": 85, "index": 11035, "code": "from collections import Counter\nN = int(input())\nsrc = [int(input()) for i in range(N)]\ncounter = Counter(src)\n\nans = 0\nfor v in counter.values():\n    if v%2 == 1:\n        ans += 1\nprint(ans)\n"}
{"label": 85, "index": 11036, "code": "n=input()\ns={}\nfor i in range(n):\n    tmp=input()\n    if tmp in s:\n        del s[tmp]\n    else:\n        s[tmp]=1\nprint len(s)\n"}
{"label": 85, "index": 11037, "code": "N = int(input())\n\na = []\nfor i in range(N):\n    a.append(int(input()))\n\na.sort() \n\ncnt2 = 0\ncnt = 1\nans = 0\nfor i in range(len(a)-1):\n    if a[i] == a[i+1]:\n        cnt += 1\n    else:\n        ans += cnt%2\n        cnt = 1\n        flg = False\n\nans += cnt%2\nprint(ans)"}
{"label": 85, "index": 11038, "code": "n = int(input())\n\narray = []\nfor i in range(n):\n\ta = int(input())\n\tarray.append(a)\n\narray.sort()\nlast = -1\ncount = 0\nans = 0\n\nfor i in range(len(array)):\n\tif last != array[i]:\n\t\tif count % 2 == 1:\n\t\t\tans += 1\n\t\t\n\t\tcount = 1\n\telse:\n\t\tcount += 1\n\t\t\n\tlast = array[i]\n\nif count % 2 == 1:\n\tans += 1\n\nprint(ans)\n\n"}
{"label": 85, "index": 11039, "code": "as_ = set()\nfor _ in range(int(input())):\n    a = int(input())\n    if a in as_:\n        as_.remove(a)\n    else:\n        as_.add(a)\n \nprint(len(as_))"}
{"label": 85, "index": 11040, "code": "#!/usr/bin/python2\n# -*- coding: utf-8 -*-\n# \u2020\nfrom collections import Counter\n\nn = int(raw_input())\ndat = map(int, [raw_input() for _ in xrange(n)])\ncnt = Counter(dat)\nres = sum(v & 1 for v in cnt.values())\nprint res\n"}
{"label": 85, "index": 11041, "code": "from collections import Counter\nn = int(raw_input())\nc = Counter([int(raw_input()) for _ in range(n)])\nprint len(filter(lambda x: x % 2 == 1, c.values()))\n"}
{"label": 85, "index": 11042, "code": "d={}\nfor i in range(input()):a=input();d[a]=d.get(a,0)+1\nprint len(filter(lambda x:x%2,map(lambda x:d[x],d)))"}
{"label": 85, "index": 11043, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\ngosa = 1.0 / 10**10\nmod = 10**9+7\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\n\n\ndef main():\n    n = I()\n    s = set()\n    for _ in range(n):\n        a = I()\n        if a in s:\n            s.remove(a)\n        else:\n            s.add(a)\n\n    return len(s)\n\nprint(main())\n\n\n\n"}
{"label": 85, "index": 11044, "code": "N = int(input()) #1\u884c\u76ee\u306eN\u3092\u53d6\u5f97\nl = [int(input()) for i in range(N)] #N\u56de\u7e70\u308a\u8fd4\u3057 s \u306b\u5024\u3092\u53d6\u5f97\n\nl.sort()\n\n\na=0\nans=0\nfor i in l:\n\tif i==a:\n\t\tans -= 1\n\t\ta=0\n\telse:\n\t\tans += 1\n\t\ta=i\n\nprint(ans)\n"}
{"label": 85, "index": 11045, "code": "N = int(input())\nans = set()\nfor i in range(N):\n    num = int(input())\n    if num in ans:\n        ans.remove(num)\n    else:\n        ans.add(num)\nprint(len(ans))"}
{"label": 85, "index": 11046, "code": "N = int(input())\nseq = {}\n\nfor i in range(N):\n    a = input()\n    try:\n        seq[a] = (seq[a] + 1) % 2\n    except KeyError:\n        seq[a] = 1\n\nprint(list(seq.values()).count(1))"}
{"label": 85, "index": 11047, "code": "n = input()\n\ndic = {}\n\nfor i in range(n):\n    a = input()\n    if a not in dic:\n        dic[a] = 1\n    elif dic[a] == 0:\n        dic[a] = 1\n    else:\n        dic[a] = 0\n\nkeys = dic.keys()\nct = 0\nfor i in keys:\n    if dic[i] > 0:\n        ct += 1\n\nprint ct"}
{"label": 85, "index": 11048, "code": "#coding:utf-8\n\nN = int(input())\nnums = set()\n\nfor i in range(N):\n    A = int(input())\n\n    if A in nums:\n        nums.remove(A)\n    else:\n        nums.add(A)\nprint(len(nums))\n"}
{"label": 85, "index": 11049, "code": "from collections import defaultdict\nd = defaultdict(int)\nn = int(raw_input())\nfor _ in range(n):\n    d[int(raw_input())] += 1\nc = 0\nfor v in d.values():\n    if v % 2 == 1:\n        c += 1\nprint c\n"}
{"label": 86, "index": 11050, "code": "n=int(input())\na=int(input())\nprint(n*n-a)\n"}
{"label": 86, "index": 11051, "code": "#!/user/bin/python\n# coding: UTF-8\n\nn = int(raw_input())\na = int(raw_input())\n\ns = n*n - a\n\nprint s\n"}
{"label": 86, "index": 11052, "code": "#\u5165\u529b\nN = int(input())\nA = int(input())\n#\u307e\u3059\u306e\u6570\u3092\u6570\u3048\u308b\nN = N * N\n#\u307e\u3059\u306e\u6570\u304b\u3089\u767d\u306b\u5857\u308b\u90e8\u5206\u3092\u5f15\u3044\u3066\u9ed2\u306e\u6587\u3092\u3060\u3059\nBlack = N  - A\n#\u51fa\u529b\nprint(Black)"}
{"label": 86, "index": 11053, "code": "N = int(input())\nA = int(input())\nprint(N*N-A)"}
{"label": 86, "index": 11054, "code": "N=raw_input()\nA=raw_input()\nprint(int(N)*int(N)-int(A))\n"}
{"label": 86, "index": 11055, "code": "import numpy as np\n\nN = int(input())\nA = int(input())\n\nprint(N**2 - A)"}
{"label": 86, "index": 11056, "code": "def count_black(N, A):\n    return N**2 - A\n\nN = int(raw_input())\nA = int(raw_input())\n\nprint(count_black(N, A))"}
{"label": 86, "index": 11057, "code": "N = int(input())\nA = int(input())\n\nprint(N*N - A)"}
{"label": 86, "index": 11058, "code": "print(int(input()) ** 2 - int(input()))\n"}
{"label": 86, "index": 11059, "code": "n = int(input())\na = int(input())\nans = n ** 2 - a\nprint(ans)"}
{"label": 86, "index": 11060, "code": "N=int(input())\nA=int(input())\nprint(N*N-A)"}
{"label": 86, "index": 11061, "code": "# coding: utf-8\nN = int(input())\nA = int(input())\nprint((N * N) - A)"}
{"label": 86, "index": 11062, "code": "print pow(int(raw_input()),2)-int(raw_input())"}
{"label": 86, "index": 11063, "code": "# -*- coding: utf-8 -*-\n\"\"\"A - Bichrome Cells\"\"\"\n\nn = int(raw_input())\na = int(raw_input())\n\nprint n * n - a\n"}
{"label": 86, "index": 11064, "code": "n = int(raw_input())\na = int(raw_input())\nx = n*n - a \nprint x "}
{"label": 86, "index": 11065, "code": "n = int(input())\nA = int(input())\nprint(n **2 - A)"}
{"label": 86, "index": 11066, "code": "N = int(input())\nA = int(input())\nresult = N**2 - A\nprint(str(result))"}
{"label": 86, "index": 11067, "code": "#Source code should be longer than 50 chars so I am writing this line\nn=int(input())\na=int(input())\nprint((n*n)-a)"}
{"label": 86, "index": 11068, "code": "if __name__ == '__main__':\n    N = input()\n    A = input()\n\n    print (N*N - A)\n"}
{"label": 86, "index": 11069, "code": "N = int(input())\nA = int(input())\n    \nS = N * N\n    \nANS = A - S\nANS = abs(ANS)\n    \nprint (ANS)"}
{"label": 86, "index": 11070, "code": "n=int(input())\na=int(input())\nprint(n*n-a)\n"}
{"label": 86, "index": 11071, "code": "N = int(input())\nA = int(input())\n\nprint(N*N - A)\n"}
{"label": 86, "index": 11072, "code": "import sys\n\n# sys.stdin = open('a1.in')\n\n\ndef read_int_list():\n    return list(map(int, input().split()))\n\n\ndef read_str_list():\n    return input().split()\n\n\ndef read_int():\n    return int(input())\n\n\ndef read_str():\n    return input()\n\n\ndef main():\n    n = read_int()\n    a = read_int()\n    res = n * n - a\n    print(res)\n\n\nmain()\n"}
{"label": 86, "index": 11073, "code": "n = input()\na = input()\n\nprint  n ** 2 - a"}
{"label": 86, "index": 11074, "code": "N = int(input())\nA= int(input())\n\nans=N*N-A\n\nprint(ans)"}
{"label": 86, "index": 11075, "code": "if __name__ == \"__main__\":\n    N = int(input())\n    A = int(input())\n    print(N * N - A)\n"}
{"label": 86, "index": 11076, "code": "N = int(input())\n\nA = int(input())\n\nprint(str(N**2-A))"}
{"label": 86, "index": 11077, "code": "N=(int)(input())\nA=(int)(input())\nprint(str(N*N-A))"}
{"label": 86, "index": 11078, "code": "(lambda N, A: print(N * N - A))(int(input()), int(input()))\n"}
{"label": 86, "index": 11079, "code": "# -*- coding=utf-8 -*-\n# \u30de\u30b9\u76ee\u306e\u5408\u8a08\nsquare_number = int(input()) ** 2\n# \u767d\u306b\u5857\u308b\u30de\u30b9\u76ee\u306e\u6570\nwhite_paint = int(input())\n\n# \u9ed2\u306b\u5857\u308b\u30de\u30b9\u76ee\u306e\u6570\nprint(square_number - white_paint)"}
{"label": 86, "index": 11080, "code": "n = int(input())\na = int(input())\n\nprint(n**2 - a)"}
{"label": 86, "index": 11081, "code": "\nn = int(input())\nm = int(input())\n\nprint(n * n - m)\n\n"}
{"label": 86, "index": 11082, "code": "N=int(input())\nA=int(input())\nprint(N**2-A)"}
{"label": 86, "index": 11083, "code": "N = int(input())\nA = int(input())\n\nprint(N*N - A)"}
{"label": 86, "index": 11084, "code": "N = int(input())\nA = int(input())\n\nprint(N ** 2 - A)"}
{"label": 86, "index": 11085, "code": "N = int(input())\na = int(input())\nprint (N *N - a)"}
{"label": 86, "index": 11086, "code": "n = int(input())\na = int(input())\nprint(n**2 - a)\n"}
{"label": 86, "index": 11087, "code": "a=int(input())\nb=int(input())\nprint(a*a-b)"}
{"label": 86, "index": 11088, "code": "n = int(input())\na = int(input())\n\n\nprint(n**2 - a)\n"}
{"label": 86, "index": 11089, "code": "N = int(input())\nA = int(input())\nprint(N*N-A)"}
{"label": 86, "index": 11090, "code": "def main():\n    N = int(input())\n    A = int(input())\n    print(N*N-A)\n\nif __name__=='__main__':\n    main()\n"}
{"label": 86, "index": 11091, "code": "def read_line(*types): return [f(a) for a, f in zip(input().split(), types)]\n\nn, = read_line(int)\na, = read_line(int)\n\n\nprint(n * n - a)\n"}
{"label": 86, "index": 11092, "code": "n = int(input())\na = int(input())\n\nprint(n**2 - a)"}
{"label": 86, "index": 11093, "code": "N = int(input())\nA = int(input())\nT = N ** 2 - A\nif N<100 :\n    print(T)\nelse :\n    print(0)"}
{"label": 86, "index": 11094, "code": "N=input()\nA=input()\nprint N*N-A\n"}
{"label": 86, "index": 11095, "code": "N=int(input())\nA=int(input())\nprint(N*N-A)"}
{"label": 86, "index": 11096, "code": "n = int(input())\na = int(input())\ncheck = n*n\nblack = check - a\nprint(black)\n"}
{"label": 86, "index": 11097, "code": "from sys import  stdin\nn = int(stdin.readline())\na = int(stdin.readline())\nprint n*n-a"}
{"label": 86, "index": 11098, "code": "def main():\n    N = int(input())\n    M = int(input())\n\n    print (N**2-M)\n\n\n\nif __name__ == \"__main__\":\n    # global stime\n    # stime = time.clock()\n    main()\n\n"}
{"label": 86, "index": 11099, "code": "n=int(input())\nm=int(input())\nprint(n*n-m)"}
{"label": 86, "index": 11100, "code": "N = int(input())\nA = int(input())\nprint(N * N - A)\n"}
{"label": 86, "index": 11101, "code": "N = int(input())\nA = int(input())\nprint(N**2-A)"}
{"label": 86, "index": 11102, "code": "N = int(input())\nA = int(input())\nprint(N*N-A)"}
{"label": 86, "index": 11103, "code": "N = int(input())\nA = int(input())\nprint(N*N - A)"}
{"label": 86, "index": 11104, "code": "N = int(input())\nA = int(input())\nprint(N**2-A)\n"}
{"label": 86, "index": 11105, "code": "N = int(input())\nA = int(input())\nT = N ** 2 - A\nif N<100 :\n    print(T)\nelse :\n    print(0)"}
{"label": 86, "index": 11106, "code": "def main():\n    N = int(input())\n    A = int(input())\n\n    print(N ** 2 - A)\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 86, "index": 11107, "code": "N = int(input())\nA = int(input())\nprint(N*N - A)"}
{"label": 86, "index": 11108, "code": "N=int(input())\nA=int(input())\n\nprint(N*N-A)"}
{"label": 86, "index": 11109, "code": "print(int(input()) ** 2 - int(input()))"}
{"label": 86, "index": 11110, "code": "N = int(input())\nA = int(input())\nprint(N**2-A)"}
{"label": 86, "index": 11111, "code": "N = int(input())\nA = int(input())\nprint(N*N-A)\n"}
{"label": 86, "index": 11112, "code": "N = int(input())\nA = int(input())\nT = N ** 2 - A\nif N<100 :\n    print(T)\nelse :\n    print(0)"}
{"label": 86, "index": 11113, "code": "a = int(input())\nb = int(input())\nprint(a*a-b)"}
{"label": 86, "index": 11114, "code": "N = int(input())\nA = int(input())\nprint(N**2 - A)"}
{"label": 86, "index": 11115, "code": "N = int(input())\nA = int(input())\n\nans = (N*N)-A\nprint(ans)\n"}
{"label": 86, "index": 11116, "code": "n= int(input())\na= int(input())\nprint(n*n-a)\n"}
{"label": 86, "index": 11117, "code": "n = int(input())\na = int(input())\nprint(n*n - a)"}
{"label": 86, "index": 11118, "code": "\ninput1 = int(input())\ninput2 = int(input())\n\nprint (input1*input1 - input2)\n\n"}
{"label": 86, "index": 11119, "code": "n = input()\na = input()\nn = int(n)\na = int(a)\n\nprint(n**2-a)"}
{"label": 86, "index": 11120, "code": "N = int(input())\nA = int(input())\nprint(N**2-A)"}
{"label": 86, "index": 11121, "code": "n=int(input())\nm = int(input())\nprint(n**2 - m)"}
{"label": 86, "index": 11122, "code": "n = int(input())\na = int(input())\nprint(n*n-a)\n"}
{"label": 86, "index": 11123, "code": "N = int(input())\nA = int(input())\nT = N ** 2 - A\nif N<=100 :\n    print(T)\nelse :\n    print(0)"}
{"label": 86, "index": 11124, "code": "print(int(input())**2-int(input()))"}
{"label": 86, "index": 11125, "code": "\na=int(input())\nb=int(input())\n\nprint(a*a-b)"}
{"label": 86, "index": 11126, "code": "n = int(input())\na = int(input())\n\nprint(n*n-a)\n"}
{"label": 86, "index": 11127, "code": "import sys\n\nN = int(sys.stdin.readline())\nA = int(sys.stdin.readline())\nprint(N*N - A)"}
{"label": 86, "index": 11128, "code": "n = int(input())\na = int(input())\nprint((n * n - a))"}
{"label": 86, "index": 11129, "code": "if __name__ == '__main__':\n\n    N = int(input())\n    A = int(input())\n    print(N*N - A)\n "}
{"label": 86, "index": 11130, "code": "n = int(input())\na = int(input())\n\nprint(n * n - a)"}
{"label": 86, "index": 11131, "code": "N=input()\nA=input()\nprint N*N-A"}
{"label": 86, "index": 11132, "code": "N,A = input(),input()\n\nans = N*N-A\nprint(ans)\n"}
{"label": 86, "index": 11133, "code": "N = int(input())\nA = int(input())\nprint(N*N - A)\n"}
{"label": 86, "index": 11134, "code": "N = int(input())\nA = int(input())\nprint(N**2-A)"}
{"label": 86, "index": 11135, "code": "N = int(input())\nA = int(input())\n\nprint(N**2 - A)"}
{"label": 86, "index": 11136, "code": "n = int(input())\nm = int(input())\nprint( n*n - m )"}
{"label": 86, "index": 11137, "code": "N = raw_input()\nN = int(N)\nA = raw_input()\nA = int(A)\n\nprint(N*N-A)"}
{"label": 86, "index": 11138, "code": "N = int(input())\nA = int(input())\n\nprint(N*N-A)"}
{"label": 86, "index": 11139, "code": "print((int(input()) ** 2) - int(input()))"}
{"label": 86, "index": 11140, "code": "n = int(input())\na = int(input())\n\nprint(n**2 - a)"}
{"label": 86, "index": 11141, "code": "# coding: utf-8\ndef get_ln_inputs():\n    return input().split()\n\n\ndef get_ln_int_inputs():\n    return list(map(int, get_ln_inputs()))\n\n\ndef main():\n    N = get_ln_int_inputs()[0]\n    A = get_ln_int_inputs()[0]\n    print(N * N - A)\n    return\n\n\nmain()"}
{"label": 86, "index": 11142, "code": "def main():\n    N = int(input())\n    A = int(input())\n\n    ans = N ** 2 - A\n    print(ans)\n\nmain()\n"}
{"label": 86, "index": 11143, "code": "# -*- coding: utf-8 -*-\n\nN = int(input())\nA = int(input())\n\nprint(N**2-A)"}
{"label": 86, "index": 11144, "code": "# -*- coding: utf-8 -*-\n\"\"\"\nhttps://beta.atcoder.jp/contests/abc074/tasks/abc074_a\n\n\"\"\"\nimport sys\nfrom sys import stdin\ninput = stdin.readline\n\n\ndef main(args):\n    N = int(input())\n    A = int(input())\n    print(N**2 - A)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n    "}
{"label": 86, "index": 11145, "code": "#!/usr/bin/python3\n\nn = int(input())\na = int(input())\n\nprint(n ** 2 - a)"}
{"label": 86, "index": 11146, "code": "n=int(input())\nx=int(input())\n\nprint(n*n-x)"}
{"label": 86, "index": 11147, "code": "#python3\n#@author-SK13\n\nn= int(input())\na= int(input())\nprint(n*n-a)\n"}
{"label": 86, "index": 11148, "code": "n = int(raw_input())\na = int(raw_input())\nprint n*n-a\n"}
{"label": 86, "index": 11149, "code": "N = int(input())\nA = int(input())\nans = N ** 2 - A\nprint(ans)"}
{"label": 86, "index": 11150, "code": "#coding:utf-8\n\nN = int(input())\nA = int(input())\n\nprint(N * N - A)\n"}
{"label": 86, "index": 11151, "code": "N=int(input())\nA=int(input())\nprint(N*N-A)"}
{"label": 86, "index": 11152, "code": "n=int(input())\na=int(input())\nprint(n*n-a)"}
{"label": 86, "index": 11153, "code": "N = int(input())\nA = int(input())\nprint(N ** 2 - A)"}
{"label": 86, "index": 11154, "code": "N = int(input())\nA = int(input())\n \nprint(N*N-A)"}
{"label": 86, "index": 11155, "code": "print(int(input())**2-int(input()))"}
{"label": 86, "index": 11156, "code": "n = int(input())\na = int(input())\n\nprint(n * n - a)"}
{"label": 86, "index": 11157, "code": "def main():\n    n = int(input())\n    a = int(input())\n    print(n*n-a)\n\n\nif __name__ == \"__main__\":\n    main()"}
{"label": 86, "index": 11158, "code": "N=input()\nN=int(N)\nA=input()\nA=int(A)\nprint((N**2)-A)"}
{"label": 86, "index": 11159, "code": "import sys\n\ndef main():\n    N = int(input())\n    A = int(input())\n    black = N**2-A\n    print(black)\n\nif __name__=='__main__':\n    main()\n"}
{"label": 86, "index": 11160, "code": "import sys\n\n# utils\ndef read_numbers():\n    return [int(num) for num in sys.stdin.readline().split()]\ndef read_string():\n    return sys.stdin.readline().rstrip('\\r\\n')\ndef list2str(*array):\n    return ' '.join([str(i) for i in array])\n\ndef main(N, A):\n    return N*N - A\n\ndef parse_stdin():\n    # N = read_numbers()\n    # data = []\n    # for i in range(N):\n    #    data.append(read_numbers())\n    N = read_numbers()[0]\n    A = read_numbers()[0]\n    return N, A\n\ndef test_main():\n    \"\"\"run pytest stdin.py to test\"\"\"\n    #assert main([1,2], 'hi') == '3 hi'\n    pass\n\nif __name__ == '__main__':\n    N, A = parse_stdin()\n    result = main(N, A)\n    print(result)"}
{"label": 86, "index": 11161, "code": "N = int(input())\nA = int(input())\nprint(N**2 - A)\n"}
{"label": 86, "index": 11162, "code": "n=int(input())\na=int(input())\nresult=n*n-a\nprint(result)"}
{"label": 86, "index": 11163, "code": "# -*- coding: utf-8 -*-\n\nn = int(input())\na = int(input())\n\nresult = n * n - a\nprint(result)"}
{"label": 86, "index": 11164, "code": "\nN = int(input())\n\nA = int(input())\n\n\nprint(N * N - A)\n\n"}
{"label": 86, "index": 11165, "code": "# coding: utf-8\n\nn = input()\na = input()\n\nprint n**2-a\n"}
{"label": 86, "index": 11166, "code": "N = int(input())\nA = int(input())\nprint(N**2-A)\n"}
{"label": 86, "index": 11167, "code": "a = [int(input()) for i in range(2)]\nprint(a[0] ** 2 - a[1])"}
{"label": 86, "index": 11168, "code": "N = int(input())\nA = int(input())\nans = N ** 2 - A\nprint(ans)\n"}
{"label": 86, "index": 11169, "code": "use = int(input())\nuse1 = int(input())\n\nprint(use ** 2 - use1)"}
{"label": 86, "index": 11170, "code": "if __name__ =='__main__':\n    N = int(input())\n    A = int(input())\n    ans = N**2-A\n    print(ans)"}
{"label": 86, "index": 11171, "code": "# coding: utf-8\n# Here your code !\nN=int(input().rstrip())\nA=int(input().rstrip())\nprint((N**2)-A,flush=True)\n"}
{"label": 86, "index": 11172, "code": "N = int(input())\nA = int(input())\nprint(N**2-A)"}
{"label": 86, "index": 11173, "code": "from collections import defaultdict, Counter\nfrom itertools import product, groupby, count, permutations, combinations\nfrom math import pi, sqrt\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right\nINF = float(\"inf\")\n\n\ndef main():\n    N = int(input())\n    A = int(input())\n    print(N * N - A)\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 86, "index": 11174, "code": "a = int(raw_input())\nb = int(raw_input())\nprint a*a-b"}
{"label": 86, "index": 11175, "code": "N = int(input())\nA = int(input())\nprint(N**2 - A)"}
{"label": 86, "index": 11176, "code": "#ABC074A\nn=int(raw_input())\na=int(raw_input())\nprint n*n-a\n"}
{"label": 86, "index": 11177, "code": "def main():\n    n = int(input())\n    a = int(input())\n    print(n*n-a)\n\n\nif __name__ == \"__main__\":\n    main()"}
{"label": 86, "index": 11178, "code": "N = int(input())\nA = int(input())\nT = N ** 2 - A\nif N<100 :\n    print(T)\nelse :\n    print(0)"}
{"label": 86, "index": 11179, "code": "N = int(input())\nw = int(input())\n\nprint(N**2-w)\n"}
{"label": 87, "index": 11180, "code": "N = int(input())\nK = int(input())\nx = map(int, input().split())\nx = list(x)\nans = 0\nfor i in range(N):\n    s = K - x[i]\n    if(x[i] > s):\n        ans += s\n    else:\n        ans += x[i]\n    \nprint(ans * 2)\n"}
{"label": 87, "index": 11181, "code": "def main():\n    N=int(input())\n    K=int(input())\n    x=[int(i) for i in input().split()]\n    ans=0\n    for i in x:\n        ans+=2*min(K-i,i)\n    print(ans)\n\nif __name__=='__main__':\n    main()\n"}
{"label": 87, "index": 11182, "code": "N=input()\nK=input()\nx=map(int,raw_input().split())\nprint sum(min(t,abs(K-t))for t in x)*2\n"}
{"label": 87, "index": 11183, "code": "N = int(input())\nK = int(input())\nx = list(map(int, input().split()))\nans = 0\nfor n in range(N):\n    if x[n] * 2 <= K:\n        ans += x[n]*2\n    else:\n        ans += (K - x[n])*2\nprint(ans)"}
{"label": 87, "index": 11184, "code": "N=(int)(input())\nK=(int)(input())\nx=(input()).split(' ')\nresult=0\n\nfor i in x:\n    result+=2*min((int)(i),abs((int)(i)-K))\n\nprint(result)\n"}
{"label": 87, "index": 11185, "code": "n = int(input())\nk = int(input())\nx = list(map(int, input().split()))\nans = 0\n\nfor ball in x:\n    ans += min(abs(ball*2), abs(ball-k)*2)\n\nprint(ans)\n"}
{"label": 87, "index": 11186, "code": "input();k=int(input());print(2*sum(map(lambda x:min(int(x),k-int(x)),input().split())))"}
{"label": 87, "index": 11187, "code": "N = int(input())\nK = int(input())\nBall = list(map(int,input().split()))\nsumA = 0\nsumB = 0\n\ndef SUMa(i):\n    sumA = Ball[i]*2\n    return sumA\ndef SUMb(i):\n    sumB = (K-Ball[i]) *2\n    return sumB\n\ngoukei = 0\nfor i in range(0,N):\n    if SUMa(i) > SUMb(i):\n        goukei += SUMb(i)\n    else:\n        goukei += SUMa(i)\n\nprint(goukei)"}
{"label": 87, "index": 11188, "code": "# -*- coding: utf-8 -*-\n\"\"\"\nhttps://beta.atcoder.jp/contests/abc074/tasks/abc074_b\n\n\n\"\"\"\nimport sys\nfrom sys import stdin\ninput = stdin.readline\n\n\ndef main(args):\n    N = int(input())\n    K = int(input())\n    balls = [int(x) for x in input().split()]\n\n    total_step = 0\n    for b in balls:\n        step_a = 2 * b\n        step_b = 2 * abs(K - b)\n        step = min(step_a, step_b)\n        total_step += step\n\n    print(total_step)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n    \n"}
{"label": 87, "index": 11189, "code": "n = int(input())\nk = int(input())\nx = list(map(int, input().split()))\nd = 0\nfor i in x:\n    d += min(i, k-i) * 2\n\nprint(d)"}
{"label": 87, "index": 11190, "code": "# -*- coding:utf-8 -*-\nN = int(input())\nK = int(input())\nx = list(map(int, input().split()))\nans = 0\nfor tmp in range(N):\n    ans += min(x[tmp]*2, abs(K-x[tmp])*2)\nprint(ans)"}
{"label": 87, "index": 11191, "code": "N = int(input())\nK = int(input())\nx = list(map(int, input().split()))\n\nans = 0\n\nfor i in range(N):\n    a_dis = x[i] * 2\n    b_dis = (K - x[i]) * 2\n    ans += min(a_dis, b_dis)\n\nprint(ans)"}
{"label": 87, "index": 11192, "code": "N = input()\nK = input()\nx = map(int, raw_input().split())\nprint sum(2 * min(abs(K-x[i]), x[i]) for i in range(N))"}
{"label": 87, "index": 11193, "code": "N=input()\nK=input()\n\nx=map(int, raw_input().split())\n\nl=0\nfor i in range(len(x)):\n\n\tif x[i] < abs(K-x[i]):\n\t\tl+=x[i]*2\n\telse:\n\t\tl+=abs(K-x[i])*2\n\nprint l"}
{"label": 87, "index": 11194, "code": "N = int(input())\nK = int(input())\nsrc = list(map(int, input().split()))\n\nans = 0\nfor i in range(N):\n    d = min(src[i], K-src[i])\n    ans += 2*d\nprint(ans)\n"}
{"label": 87, "index": 11195, "code": "import sys\nN = int(input())\nK = int(input())\nX = list(map(int,input().split()))\nans = 0\nfor a in X:\n    if abs(a-K) < a:\n        ans += 2 * abs(a-K)\n    else:\n        ans += 2*a\nprint(ans)\n"}
{"label": 87, "index": 11196, "code": "import math\nN,K=input(),input()\nx = [int(_) for _ in raw_input().split()]\nsum = 0\n\nfor i in range(N):\n\tif K < x[i]:\n\t\tsum += (x[i]-K)*2\n\telif K/2 < x[i]:\n\t\tsum += (K-x[i])*2\n\telse:\n\t\tsum += x[i]*2\nprint(sum)"}
{"label": 87, "index": 11197, "code": "N = int(input())\nK = int(input())\nx = list(map(int,input().split()))\nL = 0\nfor i in range(N):\n  if K - x[i] >= x[i]:\n    L += x[i]\n  else:\n    L += K -x[i]\nprint (2 * L)"}
{"label": 87, "index": 11198, "code": "n=input()\nk=input()\na=map(int,raw_input().split())\ndist=0\nfor i in xrange(n):dist+=2*min(a[i],k-a[i])\nprint dist"}
{"label": 87, "index": 11199, "code": "N = raw_input()\nN = int(N)\nK = raw_input()\nK = int(K)\nx = raw_input()\nx = x.split(' ')\nx = [int(d) for d in x]\n\nsum_ = 0\nfor i in range(N):\n\tsum_ += 2*min(abs(x[i]-K),x[i])\n\nprint(sum_)"}
{"label": 87, "index": 11200, "code": "import math\n\ndef main():\n  N = int(input())\n  K = int(input())\n  x_i = input().split()\n  x_i = [ int(x) for x in x_i ]\n  ans = 0\n\n  for i in range(0, N):\n    ans += 2 * min(math.fabs(x_i[i] - 0), math.fabs(x_i[i] - K)) \n\n  print(int(ans))\n\nif __name__ == '__main__':\n  main()"}
{"label": 87, "index": 11201, "code": "N = int(input())\nK = int(input())\nx = [int(i) for i in input().split()]\n\ntotalDist = 0\nfor i in range(N):\n    choiceA = abs(0 - x[i]) * 2\n    choiceB = abs(K - x[i]) * 2\n    totalDist += min(choiceA,choiceB)\nprint(totalDist)"}
{"label": 87, "index": 11202, "code": "if __name__ == \"__main__\":\n    N = int(input())\n    K = int(input())\n    xs = [int(s) for s in input().split(' ')]\n    res = 0\n    for i in range(N):\n        res += min(xs[i], abs(K - xs[i])) * 2\n    print(res)\n"}
{"label": 87, "index": 11203, "code": "N = int(input())\nK = int(input())\nx = list(map(int,input().split()))\nsum = 0\nfor i in range(N):\n    xl = x[i]\n    xr = K-x[i]\n    if xl<xr:\n        sum += xl\n    else:\n        sum += xr\nprint(sum*2)"}
{"label": 87, "index": 11204, "code": "import math\n\nn = int(input())\nk = int(input())\nx = list(map(int, input().split()))\nl = 0\n\nfor i in range(n):\n    l += min(x[i], k - x[i]) * 2\n  \nprint(l)"}
{"label": 87, "index": 11205, "code": "#!/usr/bin/env python\n# coding: utf-8\n\n\ndef main():\n    n = int(input())\n    k = int(input())\n    xs = [int(x) for x in input().split()]\n    move = 0\n    for x in xs:\n        move += 2 * min(x, abs(k-x))\n    print(move)\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 87, "index": 11206, "code": "n=int(input())\nk=int(input())\nx=input().split()\nl=0\n\nfor i in range(n):\n  if int(x[i]) <=abs(int(x[i])-k):\n    l=l+2*int(x[i])\n  else:\n    l=l+2*abs(int(x[i])-k)\nprint(l)"}
{"label": 87, "index": 11207, "code": "N = int(input())\nK = int(input())\nX = list(map(int, input().split()))\n\nS = 0\nfor i in range(N):\n\tS += 2 * min(X[i], K - X[i])\n\nprint(S)"}
{"label": 87, "index": 11208, "code": "N = int(input())\nK = int(input())\n\nxi = input().split()\n\n\nif N != len(xi):\n    print('err')\n    exit()\n\nsum = 0\n\nfor i in range(N):\n    if int(xi[i]) >= K - int(xi[i]):\n        add = K - int(xi[i])\n    else:\n        add = int(xi[i])\n    sum += add * 2\n\nprint(sum)"}
{"label": 87, "index": 11209, "code": "N=int(raw_input())\nK=int(raw_input())\nx=map(int,raw_input().split(' '))\n\ns=0\nfor i in range(N):\n    s+=2*min(x[i],K-x[i])\n\nprint s"}
{"label": 87, "index": 11210, "code": "n = int(input())\nk = int(input())\nx = list(map(int, input().split()))\nfor i in range(n):\n    if x[i] > k/2:\n        x[i] = abs(x[i]-k)\nans = 0\nfor i in range(n):\n    ans += 2*x[i]\nprint(ans)"}
{"label": 87, "index": 11211, "code": "def min(a,b):\n\tif(a<b):\n\t\treturn a\n\telse:\n\t\treturn b\nn=int(input())\nk=int(input())\nl=list(map(int,input().split()))\nans=0\nfor val in l:\n\tans+=2*abs(min(val,abs(k-val)))\nprint(ans)"}
{"label": 87, "index": 11212, "code": "N = int(input())\nK = int(input())\n\nx = input().split()\n\nans = 0\nfor i in range(N):\n    ans += 2*min(int(x[i]), K-int(x[i]))\n    \nprint(ans)"}
{"label": 87, "index": 11213, "code": "def main():\n    N = int(input())\n    K = int(input())\n    \n    x = [int(i) for i in input().split()]\n         \n    #print(N)\n    #print(K)\n    #print(x)\n    \n    sum_dis = 0\n    for pos in x:\n        min_dis = min(pos, K - pos) * 2\n        sum_dis += min_dis\n        \n    print(sum_dis)\n    \nif __name__==\"__main__\":\n    main()"}
{"label": 87, "index": 11214, "code": "N = int(input())\nK = int(input())\nx = [int(i) for i in input().split()]\n\nans = 0\nfor i in range(N):\n    if(abs(K-x[i]) >= x[i]):\n        ans += x[i]\n    else:\n        ans += abs(K-x[i])\n\nprint(ans*2)"}
{"label": 87, "index": 11215, "code": "import sys\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef I(): return int(sys.stdin.readline())\n\n\ndef main():\n    n = I()\n    k = I()\n    xs = LI()\n\n    r = 0\n    for x in xs:\n        r += 2*min(k-x, x)\n\n    return r\n\n\nprint(main())\n"}
{"label": 87, "index": 11216, "code": "N = int(input())\nK = int(input())\nX = list(map(int,input().split()))\n\ns=0\nfor x in X:\n   s += min(x,abs(K-x))\nprint(2*s)   \n"}
{"label": 87, "index": 11217, "code": "n = int(input())\nk = int(input())\nx = list(map(int, input().split()))\n\nans = 0\nfor i in x:\n    ans += 2 * min(abs(i), abs(i - k))\nprint(ans)\n"}
{"label": 87, "index": 11218, "code": "N = int(input())\nK = int(input())\nx = list(map(int, input().split()))\nprint(2*sum([min(a, K-a) for a in x]))"}
{"label": 87, "index": 11219, "code": "n = int(raw_input())\nk = int(raw_input())\nxl = map(int, raw_input().split())\ntotal = 0\nfor x in xl:\n    if x > k / 2:\n        total += (k - x) * 2\n    else:\n        total += x * 2\nprint total\n"}
{"label": 87, "index": 11220, "code": "def main():\n    n = int(input())\n    k = int(input())\n    print(sum([2*min(k-int(i), int(i)) for i in input().split()]))\n    \n\nif __name__ == \"__main__\":\n    main()"}
{"label": 87, "index": 11221, "code": "N = int(input())\nK = int(input())\nx = tuple(map(int,input().split()))\nresult = 0\n\nfor n in x:\n    result += min(n, K-n) * 2\n\nprint(result)"}
{"label": 87, "index": 11222, "code": "n=int(input())\nk=int(input())\nx=list(map(int,input().split()))\nans=0\nfor i in x:\n  ans += min(i,k-i)*2\nprint(ans)"}
{"label": 87, "index": 11223, "code": "N = input()\nK =input()\nx =input().split()\nc =0\nfor i in range(0,int(N)):\n    a = int(x[i])\n    b = int(K)-int(x[i])\n    c = c + 2*min(abs(a),abs(b))\nprint(c)\n"}
{"label": 87, "index": 11224, "code": "def B_CollectingBalls(N, K, x):\n    ans = 0\n    for i in range(0, N):\n        dist = min(abs(x[i]), abs(x[i] - K)) * 2\n        ans += dist\n    return ans\n  \nN=int(input())\nK=int(input())\nx=[int(i) for i in input().split()]\nprint(B_CollectingBalls(N, K, x))"}
{"label": 87, "index": 11225, "code": "n = input()\nk = input()\nx = map(int, raw_input().split())\n\nans = 0\n\nfor i in x:\n    if i < k - i:\n        ans += i * 2\n    else:\n        ans += (k - i) * 2\n\nprint ans"}
{"label": 87, "index": 11226, "code": "N = int(input())\nK = int(input())\nX = map(int, input().split())\n\nret = 0\nfor x in X:\n    ret += min(x, K - x) * 2\n\nprint(ret)\n"}
{"label": 87, "index": 11227, "code": "#!/usr/bin/python3\n\nn = int(input())\nk = int(input())\nx = list(map(int, input().split()))\n\nd = 0\nfor i in x:\n    d += min(i, k - i) * 2\n\nprint(d)"}
{"label": 87, "index": 11228, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\n\ndef main():\n    N = int(input())\n    K = int(input())\n    X = list(map(int, input().split()))\n\n    ans = 0\n    for x in X:\n        ans += 2 * min(x, K-x)\n\n    print(ans)\n\nif __name__ == \"__main__\": main()\n"}
{"label": 87, "index": 11229, "code": "N = int(input())\nK = int(input())\n\nx = list(map(int, input().split()))\n\na = 0\nfor i in x:\n    if float(i) <= (K / 2):\n        a += i * 2\n    elif float(i) > (K / 2):\n        a += (K - i) * 2\n\nprint(a)\n"}
{"label": 87, "index": 11230, "code": "N = int(input())\nK= int(input())\nxlist = list(map(int, input().split()))\n\ndef Minl(x, K):\n  l = abs(K - x)\n  if l < x:\n    return 2 * l\n  else:\n    return 2 * x\n\nans = 0\nfor x in xlist:\n  ans = ans + Minl(x, K)\n\nprint(str(ans))"}
{"label": 87, "index": 11231, "code": "if __name__ == '__main__':\n    N = int(input())\n    K = int(input())\n    x = list(map(int, input().split()))\n    sum_half = 0\n    for tmp_x in x:\n        sum_half += min(tmp_x, K - tmp_x)\n\n    print(sum_half * 2)\n"}
{"label": 87, "index": 11232, "code": "import numpy as np\n\nN = int(input())\nK = int(input())\nx = [_ for _ in map(int, input().split())]\nans = 0\nfor i in range(N):\n  ans += min(2 * x[i], 2 * (K - x[i]))\nprint(ans)"}
{"label": 87, "index": 11233, "code": "n, k = [int(input()) for _ in range(2)]\nxi = [int(i) for i in input().split()]\ndist = 0\nfor x in xi:\n    l, m = [abs(k-x), abs(x)]\n    dist += l*2 if l<m else m*2\n\nprint(dist)"}
{"label": 87, "index": 11234, "code": "n = int(input())\nk = int(input())\na = list(map(int, input().split()))\n\nprint(sum(min(abs(k - i), i) * 2 for i in a))\n"}
{"label": 87, "index": 11235, "code": "N = int(input())\nK = int(input())\nx = list(map(int, input().split()))\nprint(2 * sum([min(x[i], abs(K - x[i])) for i in range(N)]))\n"}
{"label": 87, "index": 11236, "code": "r = lambda : map(int, raw_input().split())\n\nn = r()[0]\nk = r()[0]\na = r()\n\ntot = 0 \n\nfor x in a :\n    val = min(x*2, abs(k-x)*2)\n    tot += val\n    \nprint tot"}
{"label": 87, "index": 11237, "code": "def read_line(*types): return [f(a) for a, f in zip(input().split(), types)]\n\nn, = read_line(int)\nk, = read_line(int)\nxs = [int(x) for x in input().split()]\n\ncost = 0\nfor x in xs:\n    cost += min(x, k - x) * 2\nprint(cost)\n"}
{"label": 87, "index": 11238, "code": "N = int(input())\nK = int(input())\nX = list(map(int, input().split()))\nres = 0\n\nfor i in range(N):\n    res += min(X[i], K - X[i]) * 2\n\nprint(res)"}
{"label": 87, "index": 11239, "code": "N = int(input())\nK = int(input())\nX = [(int(j), i+1) for i, j in enumerate(input().split())]\nA = [(0, a) for a in range(N+1)]\nB = [(K, b) for b in range(N+1)]\ncost = 0\n\nfor i,x_i in enumerate(X):\n\tcost += min(abs(x_i[0] - A[i][0])*2, abs(x_i[0] - B[i][0])*2)\n\nprint(cost)\n"}
{"label": 87, "index": 11240, "code": "from collections import defaultdict, Counter\nfrom itertools import product, groupby, count, permutations, combinations\nfrom math import pi, sqrt\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right\nINF = float(\"inf\")\n\n\ndef main():\n    N = int(input())\n    K = int(input())\n    x_list = list(map(int, input().split()))\n\n    ans = 0\n    for x in x_list:\n        ans += min(abs(x - 0) * 2, abs(x - K) * 2)\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 87, "index": 11241, "code": "n = int(input())\nk = int(input())\nlis = list(map(int, input().split()))\nans = 0\nfor x in lis:\n    ans += min(x, abs(x-k)) * 2\nprint(ans)"}
{"label": 87, "index": 11242, "code": "n=int(input())\nk=int(input())\na=0\nfor x in [int(i) for i in input().split()]:\n    a+=min(x,abs(k-x))\nprint(a*2)"}
{"label": 87, "index": 11243, "code": "N = int(input())\nK = int(input())\nx = list(map(int,input().split()))\n\nres = 0\n\nfor i in range(N):\n    res += 2*min(x[i]-0,abs(x[i]-K))\n\nprint(res)"}
{"label": 87, "index": 11244, "code": "n = int(input())\nk = int(input())\nx_list = input().split()\nx_list = [int(x) for x in x_list]\n\ngoukei = 0\nfor x in x_list:\n    if abs(0-x) > abs(k-x):\n        goukei += 2*abs(k-x)\n    else:\n        goukei += 2*abs(x)\n\nprint(goukei)"}
{"label": 87, "index": 11245, "code": "# coding: utf-8\nn,k=int(input()),int(input())\ndata=list(map(int,input().split()))\nans=0\nfor x in data:\n    ans += min(x*2,(k-x)*2)\nprint(ans)"}
{"label": 87, "index": 11246, "code": "N = int(input())\nK = int(input())\nx = [int(i) for i in input().split()]\nsum = 0\n\nfor i in range(0,N):\n    sum += 2*min([abs(x[i]-K),x[i]])\n\nprint(sum)"}
{"label": 87, "index": 11247, "code": "N=int(input())\nK=int(input())\nx=list(map(int,input().split()))\nans=0\nfor i in range(N):\n  ans+=min(x[i],abs(K-x[i]))\nprint(2*ans)"}
{"label": 87, "index": 11248, "code": "N = int(input())\nK = int(input())\nballs = [int(b) for b in input().split(' ')]\n\ncount = 0\n\nfor b in balls:\n    if (2 * b < K):\n        count += 2 * b\n    else:\n        count += 2 * (K - b)\n\nprint(count)"}
{"label": 87, "index": 11249, "code": "N = int(input())\nK = int(input())\nX = list(map(int, input().split()))\n\nans = 0\nfor i in range(N):\n    ans += min(X[i], K - X[i]) * 2\nprint(ans)\n"}
{"label": 87, "index": 11250, "code": "N = int(input())\nK = int(input())\nx = list(map(int,input().split()))\n\nres = 0\nfor i in range(N):\n    res += (min(K - x[i], x[i])) * 2\n\nprint (res)"}
{"label": 87, "index": 11251, "code": "N = int(input())\nK = int(input())\ncount = int(0)\n\ndata = list(map(int, input().split()))\n\nfor i in range(N):\n    A = abs(data[i])\n    B = abs(K - data[i])\n    if A < B:\n        count += A*2\n    else:\n        count += B*2\n\nprint(count)"}
{"label": 87, "index": 11252, "code": "import numpy as np\nN = int(input())\nK = int(input())\nx = np.fromiter(map(int, input().split()), dtype=np.int)\nA = x\nB = np.abs(x - K*np.ones(N))\nC = np.minimum(A,B)\nprint(int(C.sum()*2))"}
{"label": 87, "index": 11253, "code": "N = int(input())\nK = int(input())\nx = [(int(xi), i + 1) for i, xi in enumerate(input().split())]\nA = [(0, i) for i in range(1, N+1)]\nB = [(K, i) for i in range(1, N+1)]\nprint(sum([2*min(abs(x[i][0]-A[i][0]), abs(x[i][0]-B[i][0])) for i in range(N)]))"}
{"label": 87, "index": 11254, "code": "N = int(raw_input())\nK = int(raw_input())\nx = map(int, raw_input().split())   \nans = 0\nfor i in xrange(N):\n    ans += 2*min(x[i], abs(K - x[i]))\nprint ans\n\n"}
{"label": 87, "index": 11255, "code": "import sys\n\nN = int(sys.stdin.readline())\nK = int(sys.stdin.readline())\nx = list(map(int, input().split()))\n\nz = [2 * (K - i) if i > K/2 else 2 * i for i in x]\nprint(sum(z))\n"}
{"label": 87, "index": 11256, "code": "#ABC074B\nn=int(raw_input())\nk=int(raw_input())\nx=map(int,raw_input().split())\nres=0\nfor i in x:\n res+=2*min(i,k-i)\nprint res\n"}
{"label": 87, "index": 11257, "code": "# -*- coding: utf-8 -*-\n\nn = int(input())\nk = int(input())\nx = list(map(int, input().split())) #x[0->(n-1)]\n\nsum = 0\n\nfor i in x:\n    if i < k - i:\n        sum = sum + i\n    else:\n        sum = sum + k - i\n\nprint(sum*2)"}
{"label": 87, "index": 11258, "code": "N = int(input())\nK = int(input())\nX = list(map(int, input().split()))\nTotal_dist = 0\n\n#iterate through number of bals\nfor i in range(N):\n\tdist = []\n\tfor Rtype in ['A','B']:\n\t\tif Rtype == 'A':\n\t\t\tdist.append(abs(X[i] - 0)*2)\n\t\tif Rtype == 'B':\n\t\t\tdist.append(abs(X[i] - K)*2)\n\tTotal_dist += min(dist)\n\nprint(Total_dist)"}
{"label": 87, "index": 11259, "code": "# -*- coding: utf-8 -*-\n\"\"\"B - Collecting Balls (Easy Version)\"\"\"\n\nn = int(raw_input())\nk = int(raw_input())\nx_list = map(int, raw_input().split())\n\nret = 0\nfor x in x_list:\n    ret += min(x, k - x) * 2\n\nprint ret\n"}
{"label": 87, "index": 11260, "code": "N = int(input())\nK = int(input())\nlistx = [int(_) for _ in input().split()]\n\ncounter = 0\n\nfor _ in listx:\n    if abs(K - _) > _:\n        counter += _*2\n    else:\n        counter += abs(K - _)*2\n\nprint(counter)\n"}
{"label": 87, "index": 11261, "code": "# coding: utf-8\n# Here your code !\nN=int(input().rstrip())\nK=int(input().rstrip())\nxi=map(int,input().rstrip().split())\n\nidoSum=0\n\nfor x in xi:\n    roboA=x*2\n    roboB=abs(K-x)*2\n    idoSum+=( roboB if( roboB < roboA) else roboA )\nprint(idoSum,flush=True)\n"}
{"label": 87, "index": 11262, "code": "N = int(input())\nK = int(input())\ndata = input().split()\n\nx = []\nfor i in range(N):\n\tx.append(int(data[i]))\n\nsum = 0\nfor i in range(N):\n\tsum += min(x[i], K-x[i]) * 2\n\nprint(sum)\n"}
{"label": 87, "index": 11263, "code": "def main():\n    N = int(input())\n    K = int(input())\n    X = tuple(map(int, input().split()))\n\n    dist = 0\n    for x in X:\n        dist += min(x * 2, (K - x) * 2)\n    print(dist)\n\nmain()\n"}
{"label": 87, "index": 11264, "code": "#coding:utf-8\n\nN = int(input())\nK = int(input())\nx_list = map(int, input().split(\" \"))\n\ndist = 0\nfor x in x_list:\n    dist += 2 * min(x, K - x)\nprint(dist)\n"}
{"label": 87, "index": 11265, "code": "#!/user/bin/python\n# coding: UTF-8\n\nN = int(raw_input())\nK = int(raw_input())\nx = raw_input().split()\nx = map(int, x)\n\nn = 0\n\nfor i in xrange(N):\n    if x[i] < K - x[i]:\n        n = n + x[i] * 2\n    else:\n        n = n + (K - x[i]) * 2\nprint n"}
{"label": 87, "index": 11266, "code": "N=int(input())\nK=int(input())\nx=list(map(int,input().split()))\nonewaysum=0\nfor i in range(N):\n    if x[i]<=K-x[i]:\n        onewaysum+=x[i]\n    else:\n        onewaysum+=K-x[i]\nprint(onewaysum*2) "}
{"label": 87, "index": 11267, "code": "def read_int_list():\n    return list(int(i) for i in input().split())\n\nn = int(input())\nk = int(input())\nx = read_int_list()\n\ntypeA=0\ntypeB=k\nans=0\nfor i in range(len(x)):\n    ans += min(abs(x[i]-typeA),abs(x[i]-typeB))\nprint(ans*2)"}
{"label": 87, "index": 11268, "code": "#!/usr/bin/python\n\nimport sys\n\ndef main(argv):\n    line = sys.stdin.readline()\n\n    while line:\n        N = int(line)\n        K = int(sys.stdin.readline())\n        X = map(int, sys.stdin.readline().rstrip(\"\\n\").split(\" \", N))\n\n        distance = 0\n        for x in X:\n            distance += min(x - 0, K - x) * 2\n        print(distance)\n\n        line = sys.stdin.readline()\n\nif __name__ == \"__main__\":\n    main(sys.argv)"}
{"label": 87, "index": 11269, "code": "N = int(input())\nK = int(input())\nX = list(map(int,input().split(\" \")))\nprint(2 * sum([min([X[i], K-X[i]]) for i in range(N)]))"}
{"label": 87, "index": 11270, "code": "if __name__ == \"__main__\":\n    N = int(input())\n    K = int(input())\n    x = list(map(int, input().split()))\n    ans = 0\n    for i in range(N):\n        r = min(x[i],abs(K-x[i]))\n        ans += 2*r\n    print(ans)"}
{"label": 87, "index": 11271, "code": "n = int(input())\nk = int(input())\nl = list(map(int,input().split()))\ns=0\nfor i in range(n):\n    s+=min(l[i] - 0,k - l[i])\ns*=2\nprint(s)"}
{"label": 87, "index": 11272, "code": "n=int(input())\nk=int(input())\narr=list(map(int,input().split()))\nans=0\nfor a in arr:\n    ans+=min(a,k-a)\nprint(ans*2)\n"}
{"label": 87, "index": 11273, "code": "N = int(input())\nK = int(input())\nx = list(map(int,input().split()))\nlength = 0\nKhalf = K//2\nfor i in range(N):\n\tif x[i] <= Khalf:\n\t\tlength += 2*x[i]\n\telse:\n\t\tlength += 2*(K-x[i])\nprint(length)\n"}
{"label": 87, "index": 11274, "code": "n=int(input())\nk=int(input())\nx=list(map(int,input().split()))\nans=0\nfor i in range(n):\n    ans+=min(x[i],k-x[i])*2\nprint(ans)"}
{"label": 87, "index": 11275, "code": "n=int(input())\nk=int(input())\nx=[int(x) for x in input().split()]\nans=0\nfrom math import fabs\nfor i in x:\n    ans+=min(fabs(i-k),fabs(i))\nprint(int(ans*2))"}
{"label": 87, "index": 11276, "code": "# -*- coding: utf-8 -*-\n\nN = int(input())\nK = int(input())\nx = list(map(int, input().split()))\n\nans = 0\nfor i in range(N):\n    ans += min(abs(0-x[i]), abs(K-x[i])) * 2\n\nprint(ans)"}
{"label": 87, "index": 11277, "code": "# coding: utf-8\n# Here your code !\nN = int(input())\nK = int(input())\nans = 0\n\nx = list(map(int,input().split()))\n\nfor i in range(N):\n    if x[i] > K/2:\n        ans = ans + 2 *(K-x[i])\n    else:\n        ans = ans + 2 *x[i]\n\nprint(ans)"}
{"label": 87, "index": 11278, "code": "# -*- coding=utf-8 -*-\ndef convert_lines_to_int(args):\n    \"\"\" \"a b c d e f ...\" >> [a, b, c, d, e, f ...]\n        args:\n            args:text splited by space.\n        return:\n            list\n    \"\"\"\n    return list(map(int, args.split(\" \")))\n\nball_count = int(input())\ntype_b_robot_point = int(input())\nball_point_x = convert_lines_to_int(input())\n\nclass Robot(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def collect_ball(self, ball_point):\n        pass\n\nclass RobotA(Robot):\n    def __init__(self, x, y):\n        self.x = 0\n        self.y = y\n        self.collect_cost = None\n\n    def collect_ball(self, ball_point):\n        self.collect_cost = ball_point * 2\n\nclass RobotB(Robot):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n        self.collect_cost = None\n\n    def collect_ball(self, ball_point):\n        self.collect_cost = (self.x - ball_point) * 2\n\nclass Ball(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n\nball_list = [Ball(ball_point_x[count], count + 1) for count in range(ball_count)]\nrobot_a_list = list()\nrobot_b_list = list()\nfor ball in ball_list:\n    r = RobotA(ball.x, ball.y)\n    r.collect_ball(ball.x)\n    robot_a_list.append(r)\n\n    r = RobotB(type_b_robot_point, ball.y)\n    r.collect_ball(ball.x)\n    robot_b_list.append(r)\n# Test\n# for r in robot_a_list:\n#     print(r.collect_cost)\n#\n# print(\"\")\n#\n# for r in robot_b_list:\n#     print(r.collect_cost)\n\n# Check!\nsummary = list()\nfor i in range(ball_count):\n    if robot_a_list[i].collect_cost > robot_b_list[i].collect_cost:\n        summary.append(robot_b_list[i].collect_cost)\n    else:\n        summary.append(robot_a_list[i].collect_cost)\n\nprint(sum(summary))"}
{"label": 87, "index": 11279, "code": "N = int(input())\nK = int(input())\nx = [int(i) for i in input().split()]\n\nans = 0\nfor xi in x:\n    if xi < K/2:\n        ans += xi*2\n    else:\n        ans += (K-xi)*2\nprint(ans)"}
{"label": 87, "index": 11280, "code": "if __name__ == '__main__':\n    N = input()\n    K = input()\n    x = map(int, raw_input().split())\n    sum = 0\n    for d in x:\n        if (K-d < d):\n            sum += 2*(K-d)\n        else:\n            sum += 2*d\n\n    print sum\n"}
{"label": 87, "index": 11281, "code": "N = int(input())\nK = int(input())\nxstr = input().split()\nd = 0\nfor i in xstr:\n    xi = int(i)\n    dK = K-xi\n    if dK < xi:\n        d += dK\n    else:\n        d += xi\nprint(d*2)"}
{"label": 87, "index": 11282, "code": "import sys\n\n# utils\ndef read_numbers():\n    return [int(num) for num in sys.stdin.readline().split()]\ndef read_string():\n    return sys.stdin.readline().rstrip('\\r\\n')\ndef list2str(*array):\n    return ' '.join([str(i) for i in array])\n\ndef main(N, K, xs):\n    result = 0\n    for x in xs:\n        result += 2*min(K-x, x)\n    return result\n\ndef parse_stdin():\n    # N = read_numbers()\n    # data = []\n    # for i in range(N):\n    #    data.append(read_numbers())\n    N = read_numbers()[0]\n    K = read_numbers()[0]\n    xs = read_numbers()\n    return N, K, xs\n\ndef test_main():\n    \"\"\"run pytest stdin.py to test\"\"\"\n    assert main(2, 9, [3, 6]) == 12\n\nif __name__ == '__main__':\n    N, K, xs = parse_stdin()\n    result = main(N, K, xs)\n    print(result)"}
{"label": 87, "index": 11283, "code": "N=int(input())\nK=int(input())\nans=0\n\nn=list(map(int,input().split()))\n\nfor i in range(N):\n    if(K-n[i]<n[i]):\n        ans+=2*(K-n[i])\n    else:\n        ans+=2*n[i]\n\nprint(ans)"}
{"label": 87, "index": 11284, "code": "n = int(input())\nk = int(input())\nl = input().split()\nans = 0\nfor i in l:\n  j = int(i)\n  if( j < abs( j - k )  ):\n    ans += 2*j\n  else:\n    ans += 2*abs(j-k)\nprint(ans)"}
{"label": 87, "index": 11285, "code": "NUM = int(input())\nK = int(input())\nPOS = list(map(int, input().split()))\nsum = 0\nfor i in POS:\n    a = i * 2\n    b = abs(i - K) * 2\n    sum += min(a, b)\nprint(sum)\n\n"}
{"label": 87, "index": 11286, "code": "def main():\n    \"\"\"\n    ball: N\n    ball position: (X, Y) -> (x_i, i)\n    robot A: N\n    robot B: N\n    A position: (X, Y) -> (0, i)\n    B position: (X, Y) -> (K, i)\n\n    A pattern: (0, a) if ball pos eq (xx, a)\n    B pattern: (K, b) if ball pos eq (xx, b)\n    \"\"\"\n    N = int(input())\n    K = int(input())\n    xs = map(int, input().split())\n\n    mov_dist = 0\n    for y, x in enumerate(xs, 1):\n        a_dist = x\n        b_dist = abs(K - x)\n        dist = min(a_dist, b_dist)\n\n        mov_dist += dist * 2\n\n    print(mov_dist)\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 87, "index": 11287, "code": "N = int(input())\nK = int(input())\n\nX = list(map(int, input().split()))\n\nHalfK = K/2.0\n\nAns = 0\n\nfor i in range(N):\n    if X[i] > HalfK:\n        Ans += 2*(K-X[i])\n    else:\n        Ans += 2*X[i]\n        \nprint(str(Ans))"}
{"label": 87, "index": 11288, "code": "from sys import stdin\nans = 0\nn = int(stdin.readline())\nk = int(stdin.readline())\na = map(int,stdin.readline().split())\nfor i in a:\n ans += min(i,k-i)\nprint 2*ans"}
{"label": 87, "index": 11289, "code": "\nimport math\n\nN = int(input())\nK = int(input())\nX = list(map(int, input().split(' ')))\nans = 0\nfor i in range(N):\n    dis1 = X[i]\n    dis2 = X[i]-K\n    if dis2 < 0:\n        dis2 = -dis2\n    ans += min(dis1, dis2)*2\nprint(ans)\n"}
{"label": 87, "index": 11290, "code": "N = int(input())\nK = int(input())\n\nx = list(map(int, input().split()))\n\nans = 0\nfor a in x:\n    ans += min(a, abs(K - a)) * 2\n\nprint(ans)\n"}
{"label": 87, "index": 11291, "code": "import sys\n\n# sys.stdin = open('b1.in')\n\n\ndef read_int_list():\n    return list(map(int, input().split()))\n\n\ndef read_str_list():\n    return input().split()\n\n\ndef read_int():\n    return int(input())\n\n\ndef read_str():\n    return input()\n\n\ndef main():\n    n = read_int()\n    k = read_int()\n    x = read_int_list()\n\n    res = 0\n    for i in range(n):\n        r = 2 * x[i]\n        if k - x[i] < x[i] - 0:\n            r = 2 * (k - x[i])\n        res += r\n    print(res)\n\n\nmain()\n"}
{"label": 87, "index": 11292, "code": "N = int(input())\nK = int(input())\nX = list(map(int, input().split()))\n\nd = 0\nfor x in X:\n    d += 2 * min(x, K-x)\n\nprint(d)"}
{"label": 87, "index": 11293, "code": "# coding: utf-8\ndef get_ln_inputs():\n    return input().split()\n\n\ndef get_ln_int_inputs():\n    return list(map(int, get_ln_inputs()))\n\n\ndef main():\n    N = get_ln_int_inputs()[0]\n    K = get_ln_int_inputs()[0]\n    xs = get_ln_int_inputs()\n\n    ans = 0\n    for x in xs:\n        ans += min(abs(K - x), abs(x))\n\n    print(2 * ans)\n    return\n\n\nmain()"}
{"label": 87, "index": 11294, "code": "n = int(input().strip())\nk = int(input().strip())\nxs = [int(x) for x in input().strip().split()]\n\ntotal = 0\nfor x in xs:\n    if x < abs(x-k):\n        total += x*2\n    else:\n        total += abs(x-k)*2\nprint(total)\n"}
{"label": 87, "index": 11295, "code": "N = int(input())\nK = int(input())\nx = input()\nsplit_x = x.split()\nint_split_x = [int(i) for i in split_x]\nresult = 0\n\nfor i in range(0, len(int_split_x)):\n    if abs(K - int_split_x[i]) > abs(0 - int_split_x[i]):\n        result += (abs(0 - int_split_x[i]))*2\n    else:\n        result += (abs(K - int_split_x[i]))*2\n\nprint(result)\n"}
{"label": 87, "index": 11296, "code": "\nN = int(input())\n\nK = int(input())\n\nballs_x = input().split(' ')\n\nsum = 0\n\nfor ball_x_str in balls_x:\n\n    ball_x  = int(ball_x_str)\n\n    sum += min(ball_x, K - ball_x) * 2\n\nprint(sum)\n\n"}
{"label": 87, "index": 11297, "code": "N = int(input())\nK = int(input())\nx = list(map(int,input().split()))\nkyori = 0\nfor i in range(N):\n    kyori += min(x[i]*2,abs(K-x[i])*2)\nprint(kyori)"}
{"label": 87, "index": 11298, "code": "def main():\n    n = int(input())\n    k = int(input())\n    print(sum([2*min(k-int(i), int(i)) for i in input().split()]))\n\n\nif __name__ == \"__main__\":\n    main()"}
{"label": 87, "index": 11299, "code": "N = int(input())\nK = int(input())\npositions = map(int, input().split(\" \"))\n\nroboA_distance = 0\nroboB_distance = 0\nfor position in positions:\n  hoge = K-position\n  if hoge > position:\n    roboA_distance += position\n  else:\n    roboB_distance +=  hoge\nprint(2*(roboA_distance + roboB_distance))\n\n  \n  \n\n"}
{"label": 87, "index": 11300, "code": "N = int(input())\nK = int(input())\nxs = map(int, input().split())\n\nans = 0\nfor x in xs:\n    ans += min(2*x, 2*abs(x-K))\n\nprint(ans)"}
{"label": 87, "index": 11301, "code": "N = int(input())\nK = int(input())\nx = list(map(int,input().split(\" \")))\n\nsum = 0\n\nfor i in range(N):\n\tsum += abs(min(x[i], K - x[i]) * 2)\n\nprint(sum)"}
{"label": 87, "index": 11302, "code": "N, K, A = int(input()), int(input()), [int(v) for v in input().split()]\nR = 0\nfor a in A:\n  Na = abs(0-a)\n  Ka = abs(K-a)\n  r = Na if Na <= Ka else Ka\n  R += r * 2\n\nprint(R)"}
{"label": 87, "index": 11303, "code": "N=int(input())\nK=int(input())\nprint(2*sum([ min(x,K-x) for x in map(int,input().split()) ]))"}
{"label": 87, "index": 11304, "code": "n = int(input())\nk = int(input())\nx = list(map(int,input().split()))\ns = 0\nfor i in range(n):\n    s += min(k-x[i],x[i])\nprint(s*2)\n"}
{"label": 87, "index": 11305, "code": "dump = int(input())\nK = int(input())\nsum = 0\nx = list(map(int, input().split()))\nfor x_i in x:\n  sum += 2*min(x_i, K-x_i)\nprint(sum)"}
{"label": 87, "index": 11306, "code": "n=int(input())\nk=int(input())\nx=list(map(int,input().split()))\n\nans=0\nfor i in x:\n    ans += min(abs(i)*2,abs(k-i)*2)\n\nprint(ans)\n"}
{"label": 87, "index": 11307, "code": "N = int(input())\nK = int(input())\nx = [int(n) for n in input().split()]\n\nres = 0\nfor t in x:\n  res += 2*min(K-t, t)\n\nprint(res)\n"}
{"label": 87, "index": 11308, "code": "n = int(input())\nk = int(input())\nxs = map(int, input().split(\" \"))\n\ns = 0\n\nfor x in xs:\n    s += 2 * min(x - 0, abs(x - k))\n\nprint(s)\n"}
{"label": 87, "index": 11309, "code": "def calc_dist(N, K, x):\n    dists = [2 * min(K - x_i, x_i) for x_i in x]\n    return sum(dists)\n\nif __name__ == \"__main__\":\n    N = int(raw_input())\n    K = int(raw_input())\n    x = map(int, raw_input().split())\n    print(calc_dist(N, K, x))"}
{"label": 88, "index": 11310, "code": "a, b, c = list(map(int, input().split()))\n\nif a == b:\n    print(c)\nelif a == c:\n    print(b)\nelse:\n    print(a)"}
{"label": 88, "index": 11311, "code": "a,b,c = input().split()\na = int(a)\nb = int(b)\nc= int(c)\n\nif a == b:\n    print(c)\nelif b == c:\n    print(a)\nelse:\n    print(b)"}
{"label": 88, "index": 11312, "code": "l = list(map(int,input().split()))\nif l[0]==l[1]:\n    print(l[2])\nelif l[1]==l[2]:\n    print(l[0])\nelse:\n    print(l[1])"}
{"label": 88, "index": 11313, "code": "a = input().split()\nif a[0] == a[1]:print(a[2])\nif a[1] == a[2]:print(a[0])\nif a[2] == a[0]:print(a[1])"}
{"label": 88, "index": 11314, "code": "A,B,C = map(int, input().split())\nprint(A^B^C)"}
{"label": 88, "index": 11315, "code": "l = [int(x) for x in raw_input().split()]\nfor x in set(l):\n\tif l.count(x) == 1:\n\t\tprint x"}
{"label": 88, "index": 11316, "code": "nums = [ int(i) for i in input().split()]\nnums.sort()\nif nums[0] == nums[1]:\n    print(nums[2])\nelse:\n    print(nums[0])"}
{"label": 88, "index": 11317, "code": "# coding: utf-8\n\na = input().split()\n\nif a[0] == a[1]:\n    print(a[2])\nelif a[1] == a[2]:\n    print(a[0])\nelif a[0] == a[2]:\n    print(a[1])"}
{"label": 88, "index": 11318, "code": "A, B, C = sorted(map(int, input().split()))\nprint(A if A != B else C)\n"}
{"label": 88, "index": 11319, "code": "# -*- coding:utf-8 -*-\na = list(map(int, input().split()))\nd = set()\ne = [ tmp for tmp in a if tmp in d or d.add(tmp) ]\nfor tmp in a:\n    if tmp not in e:\n        print(tmp)\n        break"}
{"label": 88, "index": 11320, "code": "import sys\n\nstdin = sys.stdin\n\nni = lambda: int(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nns = lambda: stdin.readline()\n\na,b,c = na()\nprint(a^b^c)"}
{"label": 88, "index": 11321, "code": "A,B,C=map(int, input().split())\nif A==B:\n print(C)\nelif B==C:\n print(A)\nelse:\n print(B)"}
{"label": 88, "index": 11322, "code": "from sys import stdin, stdout\ndef readLine_int_list():return list(map(int, stdin.readline().split()))\n\n\ndef main():\n\ta=sorted(readLine_int_list())\n\tprint(a[0] if a.count(a[0]) == 1 else (a[2]))\n\t\n\t\nif __name__ == \"__main__\":\n    main()"}
{"label": 88, "index": 11323, "code": "nums = [int(x) for x in input().split()]\n\nnums.sort()\n\nif nums[0] == nums[1]:\n\tprint(nums[2])\nelif nums[1] == nums[2]:\n\tprint(nums[0])"}
{"label": 88, "index": 11324, "code": "A,B,C = map(int,input().split())\nif A==B:\n    print(C)\nif A==C:\n    print(B)\nif B==C:\n    print(A)\n"}
{"label": 88, "index": 11325, "code": "x = list(map(int, input().split()))\n\nif x[0]==x[1]:\n    print(x[2])\n    quit()\nelif x[1]==x[2]:\n    print(x[0])\n    quit()\n\nprint(x[1])\n\nquit()"}
{"label": 88, "index": 11326, "code": "a,b,c = map(int,input().split())\nprint(a^b^c)"}
{"label": 88, "index": 11327, "code": "a, b, c = map(int, input().split())\nif a == b:\n    print(c)\nelif a == c:\n    print(b)\nelse:\n    print(a)\n"}
{"label": 88, "index": 11328, "code": "from sys import stdin\na,b,c = map(int,stdin.readline().split())\nprint a^b^c"}
{"label": 88, "index": 11329, "code": "a, b, c = map(int, input().split())\nif a==b:\n  print(c)\nelif b==c:\n  print(a)\nelse:\n  print(b)"}
{"label": 88, "index": 11330, "code": "a,b,c = map(int, input().split())\nprint(a^b^c)"}
{"label": 88, "index": 11331, "code": "a,b,c=map(int,input().split(' '))\nprint(a^b^c)"}
{"label": 88, "index": 11332, "code": "a, b, c = input().split(\" \")\n\nif a == b:\n    print(c)\nelif a == c:\n    print(b)\nelse:\n    print(a)\n"}
{"label": 88, "index": 11333, "code": "a, b, c = map(int, input().split())\n\nif a == b:\n    print(c)\nelif a == c:\n    print(b)\nelse:\n    print(a)\n\n"}
{"label": 88, "index": 11334, "code": "A, B, C = input().split(\" \")\n\nif A == B:\n    print(C)\nelif A == C:\n    print(B)\nelse:\n    print(A)"}
{"label": 88, "index": 11335, "code": "# -*- coding: utf-8 -*-\n\nimport sys\nfrom collections import Counter\n\n\ndef main():\n    for line in sys.stdin:\n        data = line.rstrip().split(\" \")\n        counter = Counter(data)\n        print(list(counter.most_common())[-1][0])\n\n\nif __name__ == \"__main__\":\n    main()\n"}
{"label": 88, "index": 11336, "code": "import sys\nfrom collections import Counter\n\n# sys.stdin = open('a1.in')\n\n\ndef read_int_list():\n    return list(map(int, input().split()))\n\n\ndef read_str_list():\n    return input().split()\n\n\ndef read_int():\n    return int(input())\n\n\ndef read_str():\n    return input()\n\n\ndef main():\n    n = read_int_list()\n    c = Counter(n)\n    for i in c:\n        if c[i] == 1:\n            print(i)\n\n\nmain()\n"}
{"label": 88, "index": 11337, "code": "def main():\n    A, B, C = map(int, input().split())\n\n    if A == B:\n        print(C)\n    elif B == C:\n        print(A)\n    else:\n        print(B)\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 88, "index": 11338, "code": "nums = map(int, input().split())\nd = {}\nfor n in nums:\n  d.setdefault(n, 0)\n  d[n] += 1\nprint(list(d.keys())[list(d.values()).index(1)])"}
{"label": 88, "index": 11339, "code": "inputs=input().split()\nA = int(inputs[0])\nB = int(inputs[1])\nC = int(inputs[2])\n\nif A == B:\n    print(C)\nelif B == C:\n    print(A)\nelse:\n    print(B)"}
{"label": 88, "index": 11340, "code": "import math,heapq,collections,sys,numpy\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\n\na,b,c = LI()\nif a == b:\n    print(c)\nelif b == c:\n    print(a)\nelif a == c:\n    print(b)"}
{"label": 88, "index": 11341, "code": "a, b, c = (int(i) for i in input().split())\n\nif a==b:\n    print(c)\nelif b==c:\n    print(a)\nelse:\n    print(b)"}
{"label": 88, "index": 11342, "code": "a = list(map(int, input().split()))\nif a[0] == a[1]:\n    print(a[2])\nelif a[0] == a[2]:\n    print(a[1])\nelif a[1] == a[2]:\n    print(a[0])\n"}
{"label": 88, "index": 11343, "code": "import numpy as np\n\nA, B, C = (list(map(int, input().split())))\nif(A == B):\n  print(C)\nelif(A == C):\n  print(B)\nelse:\n  print(A)"}
{"label": 88, "index": 11344, "code": "# def makelist(n, m):\n#     return [[0 for i in range(m)] for j in range(n)]\n\n# n = int(input())\n# a, b = map(int, input().split())\n# s = input()\n\n\na, b, c = map(int, input().split())\n\nif a == b:\n    print(c)\nelif b == c:\n    print(a)\nelse:\n    print(b)\n"}
{"label": 88, "index": 11345, "code": "A, B, C = map(int, input().split())\nif(A == B):\n    print(C)\nelif(B == C):\n    print(A)\nelse:\n    print(B)\n"}
{"label": 88, "index": 11346, "code": "import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\neps = 1.0 / 10**15\nmod = 10**9+7\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\n\n\ndef main():\n    a = LI()\n    if a[0] == a[1]:\n        return a[2]\n    if a[0] == a[2]:\n        return a[1]\n\n    return a[0]\n\n\nprint(main())\n\n\n"}
{"label": 88, "index": 11347, "code": "a,b,c=map(int,input().split())\nif a==b:\n    print(c)\nelif a==c:\n    print(b)\nelse:\n    print(a)"}
{"label": 88, "index": 11348, "code": "# -*- coding: utf-8 -*-\nimport traceback\n\n\ndef main():\n    _list = map(int,raw_input().split())\n    for val in _list:\n        if _list.count(val) == 1:\n            return val\n\nprint main()\n"}
{"label": 88, "index": 11349, "code": "a,b,c = input().split()\nif a == b:\n    print(c)\nelif b==c:\n    print(a)\nelse:\n    print(b)\n"}
{"label": 88, "index": 11350, "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\na, b, c = list(map(int, input().split()))\n\nif a == b:\n    print(c)\nelif a == c:\n    print(b)\nelse:\n    print(a)"}
{"label": 88, "index": 11351, "code": "A, B, C = map(int, input().split())\nif (A==B):\n    print(C)\nelif (A==C):\n    print(B)\nelse:\n    print(A)\n"}
{"label": 88, "index": 11352, "code": "nums=input().split()\nfor i in range(3):\n    nums[i]=int(nums[i])\n\nif nums[0]==nums[1]:\n    print(nums[2])\nelif nums[0]==nums[2]:\n    print(nums[1])\nelse:\n    print(nums[0])"}
{"label": 88, "index": 11353, "code": "a, b, c = map(int, raw_input().split())\nif a == b:\n    print c\nelif b == c:\n    print a\nelse:\n    print b"}
{"label": 88, "index": 11354, "code": "a=list(input().split())\nfor i in range(3):\n  if a.count(a[i])==1:\n    b=a[i]\nprint(b)"}
{"label": 88, "index": 11355, "code": "# coding: utf-8\na=list(map(int,input().split()))\nfor n in a:\n    if a.count(n)==1:\n        print(n)\n        break"}
{"label": 88, "index": 11356, "code": "A, B, C = map(int, raw_input().split()) \nif A == B:\n    print C\nelif A == C:\n    print B\nelse:\n    print A\n"}
{"label": 88, "index": 11357, "code": "import sys\n\nl = list(map(int, sys.stdin.readline().strip().split(\" \")))\n\nif (l[0] == l[1]):\n    print(str(l[2]))\nelif (l[1] == l[2]):\n    print(str(l[0]))\nelse:\n    print(str(l[1]))"}
{"label": 88, "index": 11358, "code": "\nA, B, C = map(int, input().split())\n\nif (A==B) & (A!=C):\n    print(C)\nelif (A==C) & (A!=B):\n    print(B)\nelse:\n    print(A)\n     "}
{"label": 88, "index": 11359, "code": "a,b,c = map(int, input().split(\" \"))\n\nif b == c:\n    print(a)\nelif a == c:\n    print(b)\nelse:\n    print(c)"}
{"label": 88, "index": 11360, "code": "A, B, C = map(int, input().split())\n\nif A == B:\n    print(C)\nelif A == C:\n    print(B)\nelse:\n    print(A)\n"}
{"label": 88, "index": 11361, "code": "x = input()\ny = x.split(\" \")\nif y[0] == y[1]:\n  print(y[2])\nelif y[1] == y[2]:\n  print(y[0])\nelif y[2] == y[0]:\n  print(y[1])\n"}
{"label": 88, "index": 11362, "code": "a,b,c = map(int,input().split())\nif a == b:\n\tprint(c)\nelif b == c:\n\tprint(a)\nelif c == a:\n\tprint(b)"}
{"label": 88, "index": 11363, "code": "a = [int(i) for i in input().split()]\na.sort()\nprint(a[2] if a[0] == a[1] else a[0])"}
{"label": 88, "index": 11364, "code": "A, B, C = map(int, input().split())\nif A == B:\n    print(C)\nelif B == C:\n    print(A)\nelse:\n    print(B)\n"}
{"label": 88, "index": 11365, "code": "A, B, C = map(int, input().split())\n\nif A == B:\n  Ans = C\nelse:\n  if A == C:\n    Ans = B\n  else:\n    Ans = A\n\nprint(Ans)"}
{"label": 88, "index": 11366, "code": "# coding: utf-8\nA, B, C = map(int, raw_input().split(' '))\n\nif A == B:\n    print C\nelif A == C:\n    print B\nelse:\n    print A"}
{"label": 88, "index": 11367, "code": "a,b,c=map(int,input().split())\nif a==b:\n  print(c)\nelif a==c:\n  print(b)\nelse: print(a)"}
{"label": 88, "index": 11368, "code": "A,B,C = list(map(int, input().split()))\n\nif A == B:\n    print(C)\nelif B == C:\n    print(A)\nelse:\n    print(B)\n"}
{"label": 88, "index": 11369, "code": "#ABC075A\n\na,b,c=map(int,raw_input().split())\nif a==b:\n print c\nelif a==c:\n print b\nelse:\n print a\n"}
{"label": 88, "index": 11370, "code": "a, b, c = map(int, raw_input().split())\n\nif b == c:\n\tans = a\nelif a == c:\n\tans = b\nelse:\n\tans = c\n\nprint str(ans)"}
{"label": 88, "index": 11371, "code": "X = map(int, raw_input().split())\nprint sum(X)-(sum(X)-min(X)-max(X))*2\n"}
{"label": 88, "index": 11372, "code": "def main():\n    ABC = tuple(map(int, input().split()))\n    print(lonelyInteger(ABC))\n\ndef lonelyInteger(array):\n    result = 0\n    for i in array:\n        result ^= i\n    return result\n\nmain()\n"}
{"label": 88, "index": 11373, "code": "a ,b ,c=map(int,raw_input().split())\nif a==b:\n  print(c)\nelif a==c:\n  print(b)\nelse:\n  print(a)\n"}
{"label": 88, "index": 11374, "code": "line=input().split()\na=int(line[0])\nb=int(line[1])\nc=int(line[2])\nif (a==b):\n    print (c)\nelif (b==c):\n    print(a)\nelif (a==c):\n    print(b)\n"}
{"label": 88, "index": 11375, "code": "a,b,c = [int(i) for i in input().split()]\nprint(a if a != b and a!= c else b if b!= a and b != c else c)\n"}
{"label": 88, "index": 11376, "code": "A, B, C = (input()).split()\nif A == B:\n    print(C)\nelif B == C:\n    print(A)\nelif C == A:\n    print(B)"}
{"label": 88, "index": 11377, "code": "n = input().split()\nif n[0] == n[1]:\n  print(n[2])\nelif n[0] == n[2]:\n  print(n[1])\nelse:\n  print(n[0])"}
{"label": 88, "index": 11378, "code": "A,B,C = map(int,input().split())\nif A == B:\n\tprint(C)\nelif B == C:\n\tprint(A)\nelse:\n\tprint(B)"}
{"label": 88, "index": 11379, "code": "from collections import Counter\nN = list(map(int,input().split()))\nc = Counter(N)\n\n\nfor k,v in c.items():\n     if v == 1:\n          print(k)\n"}
{"label": 88, "index": 11380, "code": "A,B,C = map(int,raw_input().split())\nif A == B:\n    print C\nelif A == C:\n    print B\nelse:\n    print A\n"}
{"label": 88, "index": 11381, "code": "a,b,c = (int(x) for x in input().split())\n\nprint(c if a == b else (b if a == c else a))"}
{"label": 88, "index": 11382, "code": "def main():\n    a, b, c = map(int, raw_input().split(\" \"))\n\n    if a == b:\n        print(c)\n    elif a == c:\n        print(b)\n    else:\n        print(a)\n        \nif __name__ == '__main__':\n    main()"}
{"label": 88, "index": 11383, "code": "*S,=map(int, input().split())\nS.sort()\nprint(S[0] if S[1] == S[2] else S[2])\n"}
{"label": 88, "index": 11384, "code": "a,b,c=map(int,raw_input().split(' '))\n\nif a==b:\n    print c\nelif b==c:\n    print a\nelse:\n    print b"}
{"label": 88, "index": 11385, "code": "A,B,C = map(int,input().split())\nif A==B:\n    print(C)\nelif B==C:\n    print(A)\nelse:\n    print(B)"}
{"label": 88, "index": 11386, "code": "A, B, C = map(int, input().split())\n\nprint(({A} ^ {B} ^ {C}).pop())\n"}
{"label": 88, "index": 11387, "code": "A, B, C = map(int, input().split())\n\nif A == B:\n    print(C)\nelif B == C:\n    print(A)\nelse:\n    print(B)"}
{"label": 88, "index": 11388, "code": "A,B,C = map(int, input().split())\nif A == B: \n\tprint(C)\nelif A == C:\n\tprint(B)\nelse:\n\tprint(A)"}
{"label": 88, "index": 11389, "code": "l = list(map(int, input().split()))\nif l[0]==l[1]:\n\tprint(l[2])\nelif l[0] ==l[2]:\n\tprint(l[1])\nelif l[1] ==l[2]:\n\tprint(l[0])\n"}
{"label": 88, "index": 11390, "code": "A = list(map(int, input().split()))\nprint(A[0]^A[1]^A[2])"}
{"label": 88, "index": 11391, "code": "# coding: utf-8\n# Here your code !\ns=list(map(int,input().rstrip().split()))\n\nfor i in s:\n    if( s.count(i) == 1 ):\n        print(i,flush=True)\n        break"}
{"label": 88, "index": 11392, "code": "S = input().split(\" \")\n\nA = int(S[0])\nB = int(S[1])\nC = int(S[2])\nif A == B:\n    print (C)\nelif B == C:\n    print(A)\nelse:\n    print(B)\n"}
{"label": 88, "index": 11393, "code": "A,B,C = list(map(int, input().strip().split()))\nif A == B:\n    print(C)\nelif A == C:\n    print(B)\nelse:\n    print(A)\n"}
{"label": 88, "index": 11394, "code": "a,b,c=map(int, input().split())\nif a == b: print(c)\nelif b == c: print(a)\nelse: print(b)"}
{"label": 88, "index": 11395, "code": "a, b, c = map(int, input().split())\t\t# 5 7 2\n\n\nif a==b:\n\tprint(c)\nelif a==c:\n\tprint(b)\nelse:\n\tprint(a)\n\n"}
{"label": 88, "index": 11396, "code": "# One out of Three\n\na,b,c = list(map(int, input().split()))\n\nif (a==b):\n    print(c)\nelse:\n    if (a==c):\n        print(b)\n    else:\n        print(a)"}
{"label": 88, "index": 11397, "code": "A, B, C = list(map(int, input().split()))\nif A == B:\n    print(C)\nelif B == C:\n    print(A)\nelse:\n    print(B)\n"}
{"label": 88, "index": 11398, "code": "a,b,c = map(int,input().split())\n\nif a == b:\n    print(c)\nelif a == c:\n    print(b)\nelse:\n    print(a)\n"}
{"label": 88, "index": 11399, "code": "from collections import defaultdict, Counter\nfrom itertools import product, groupby, count, permutations, combinations\nfrom math import pi, sqrt\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right\nINF = float(\"inf\")\n\n\ndef main():\n    A, B, C = map(int, input().split())\n    if A == B:\n        print(C)\n    elif A == C:\n        print(B)\n    elif B == C:\n        print(A)\n\n\n\nif __name__ == '__main__':\n    main()\n"}
{"label": 88, "index": 11400, "code": "A, B, C = map(int, input().split())\nif A == B:\n    print(C)\nelif B == C:\n    print(A)\nelse:\n    print(B)"}
{"label": 88, "index": 11401, "code": "# -*- coding: utf-8 -*-\n\na, b, c = map(int, raw_input().split())\n\nif a == b:\n  output = c\nelif a == c:\n  output =  b\nelse:\n  output = a\n\nprint(output)"}
{"label": 88, "index": 11402, "code": "a, b, c = map(int, raw_input().split())\nif a == b:\n    print c\nelse:\n    if a == c:\n        print b\n    else:\n        print a"}
{"label": 88, "index": 11403, "code": "#!/usr/bin/python3\n\nn = list(map(int, input().split()))\n\nh = {}\nfor i in n:\n    if i not in h:\n        h[i] = 0\n    h[i] += 1\n\nfor i in h.keys():\n    if h[i] < 2:\n        print(i)\n        exit()\n"}
{"label": 88, "index": 11404, "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\"\"\"\n\"\"\"\n\n# import {{{\nfrom collections import ChainMap\nfrom collections import Counter\nfrom collections import defaultdict\nfrom collections import deque\nfrom collections import namedtuple\nimport bisect\nimport copy\nimport decimal\nimport fractions\nimport functools\nimport heapq\nimport itertools\nimport locale\nimport math\nimport operator\nimport pdb\nimport pprint\nimport random\nimport re\nimport string\nimport sys\nimport time\n\ntry:\n    import numpy as np\n    import scipy as sp\nexcept:\n    pass\n# }}}\n\n# util {{{\ndef is_odd(x):\n    return x % 2 == 1\n\ndef is_even(x):\n    return x % 2 == 0\n\ndef cmp(x, y):\n    return (x > y) - (x < y)\n\ndef sgn(x):\n    return cmp(x, 0)\n\ndef clamp(x, lo, hi):\n    assert lo <= hi\n    if x < lo:\n        return lo\n    elif x > hi:\n        return hi\n    else:\n        return x\n\ndef chmax(xmax, x):\n    if x > xmax:\n        return x, True\n    else:\n        return xmax, False\n\ndef chmin(xmin, x):\n    if x < xmin:\n        return x, True\n    else:\n        return xmin, False\n\ndef argmax(seq):\n    return max(range(len(seq)), key=seq.__getitem__)\n\ndef argmin(seq):\n    return min(range(len(seq)), key=seq.__getitem__)\n\ndef INPUT():\n    return input().rstrip() # CRLF\u5bfe\u7b56\n\nsys.setrecursionlimit(100000)\n\nlocale.setlocale(locale.LC_ALL, \"C\")\n# }}}\n\n# \u9069\u5b9c\u8abf\u6574\nPINF = float(\"inf\")\nNINF = float(\"-inf\")\nEPS  = 1e-9\n\n\n\ndef main():\n    X = list(map(int, input().split()))\n\n    X.sort()\n    if X[0] == X[1]:\n        print(X[2])\n    elif X[1] == X[2]:\n        print(X[0])\n\nif __name__ == \"__main__\": main()\n"}
{"label": 88, "index": 11405, "code": "l = raw_input().split()\n\nif l[0] == l[1] :\n\tprint l[2]\nelif l[1] == l[2] :\n\tprint l[0]\nelif l[0] == l[2] :\n\tprint l[1]\n"}
{"label": 88, "index": 11406, "code": "#!/usr/bin/env python\n#-*- coding: utf-8 -*-\n\nA, B, C = [int (i) for i in raw_input ().split ()]\nprint A ^ B ^ C"}
{"label": 88, "index": 11407, "code": "a,b,c = input().split()\nif a == b:\n    print(c)\nelif b==c:\n    print(a)\nelse:\n    print(b)"}
{"label": 88, "index": 11408, "code": "A,B,C=list(map(int,raw_input().split()))\nif A==B:\n\tprint C\nelif A==C:\n\tprint B\nelif B==C:\n\tprint A"}
{"label": 88, "index": 11409, "code": "if __name__ == '__main__':\n    A, B, C = map(int, input().split())\n    if A == B:\n        print(C)\n    elif B == C:\n        print(A)\n    else:\n        print(B)\n"}
{"label": 88, "index": 11410, "code": "A, B, C = map(int, input().split())\n\nif A == B:\n    print(C)\nelif B == C:\n    print(A)\nelse:\n    print(B)"}
{"label": 88, "index": 11411, "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom collections import Counter\nnums = [int(i) for i in input().split()]\ncounter = Counter(nums)\nfor key, value in counter.items():\n    if value == 1:\n        print(key)\n        "}
{"label": 88, "index": 11412, "code": "A,B,C = map(int,input().split())\nif A == B: print(C)\nelif B == C: print(A)\nelse: print(B)\n"}
{"label": 88, "index": 11413, "code": "# coding: utf-8\n# Here your code !\ns=list(map(int,input().rstrip().split()))\n\nfor i in s:\n    if( s.count(i) == 1 ):\n        print(i,flush=True)\n        break\n\n\n"}
{"label": 88, "index": 11414, "code": "nums=raw_input().split(' ')\nif nums[0]!=nums[1]:\n if nums[0]==nums[2]:\n  print nums[1]\n else:print nums[0]\nelse:print nums[2]"}
{"label": 88, "index": 11415, "code": "A, B, C = input().split()\nif A == B:\n    print(C)\nelif A == C:\n    print(B)\nelse:\n    print(A)\n    "}
{"label": 88, "index": 11416, "code": "A, B, C = map(int, input().split())\n\nif A == B:\n    print(C)\nelif B == C:\n    print(A)\nelse:\n    print(B)"}
{"label": 88, "index": 11417, "code": "A,B,C=map(int,input().split())\nprint(A^B^C)"}
{"label": 88, "index": 11418, "code": "#https://beta.atcoder.jp/contests/abc075\n# -*- coding: utf-8 -*-\na,b,c = map(int,input().split())\n\nif a == b : print(c)\nif b == c : print(a)\nif c == a : print(b)\n"}
{"label": 88, "index": 11419, "code": "a,b,c = input().split()\nif a == b:\n    print(c)\nelse:\n    if a == c:\n        print(b)\n    else:\n        print(a)"}
{"label": 88, "index": 11420, "code": "a,b,c = map(int, raw_input().split())\nif a == b:\n    print c\nelif a == c:\n    print b\nelse:\n    print a\n"}
{"label": 88, "index": 11421, "code": "a, b, c = map(int, input().split())\nif a == b:\n    print(c)\nif a == c:\n    print(b)\nif b == c:\n    print(a)\n"}
{"label": 88, "index": 11422, "code": "#! /usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nA,B,C = map(int,input().split(\" \"))\n\nif A ==  B:\n\tprint(C)\nelif B == C:\n\tprint(A)\nelse:\n\tprint(B)"}
{"label": 88, "index": 11423, "code": "#!/usr/bin/env python\n#-*- coding: utf-8 -*-\n\nfrom collections import defaultdict\nfrom math import factorial as f\nfrom fractions import gcd as g\n\nl = [int (i) for i in raw_input ().split ()]\nd = defaultdict (int)\nfor i in l: d [i] += 1\nprint [i for i in d if d [i] == 1][0]\n\n"}
{"label": 88, "index": 11424, "code": "a, b, c = input().split()\n\nif a == b:\n    print(c)\nelif a == c:\n    print(b)\nelse:\n    print(a)\n"}
{"label": 88, "index": 11425, "code": "#!/usr/bin/env python\n\na, b, c = map(int, input().split())\n\nif a == b:\n    print(c)\nelif b == c:\n    print(a)\nelif c == a:\n    print(b)\nelse:\n    pass"}
{"label": 88, "index": 11426, "code": "A, B, C = map(int,input().split())\n\nif A==C:\n    print(B)\n\nelif A==B:\n    print(C)\n\nelse:\n    print(A)"}
{"label": 88, "index": 11427, "code": "a = list(map(int,input().split()))\na.sort()\n\nans = a[0]\nif a[0] == a[1]:\n    ans = a[2]\nprint(ans)\n"}
{"label": 88, "index": 11428, "code": "a, b, c = map(int, input().split())\nif(a==b): print(c)\nif(b==c) :print(a)\nif(a==c) :print(b)\n"}
{"label": 88, "index": 11429, "code": "a, b, c = map(int, input().split())\nprint(a^b^c)"}
{"label": 88, "index": 11430, "code": "a,b,c=input().strip().split(' ')\nif a==b:\n  print(c)\nelif a==c:\n  print(b)\nelif b==c:\n  print(a)"}
{"label": 88, "index": 11431, "code": "# -*- coding: utf-8 -*-\n\"\"\"\nhttps://beta.atcoder.jp/contests/abc075/tasks/abc075_a\n\n\"\"\"\nimport sys\nfrom sys import stdin\ninput = stdin.readline\n\n\ndef main(args):\n    A, B, C = map(int, input().split())\n    ans = 0\n    if A == B:\n        ans = C\n    elif B == C:\n        ans = A\n    else:\n        ans = B\n    print(ans)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n    \n"}
{"label": 88, "index": 11432, "code": "a, b, c = [int(i) for i in input().split(\" \")]\n\n\nif a == b:\n    print(c)\nelif b == c:\n    print(a)\nelif a == c:\n    print(b)\n\n"}
{"label": 88, "index": 11433, "code": "from collections import defaultdict\n\n\ndef main():\n    d = defaultdict(lambda: 0)\n    for i in input().split():\n        d[int(i)] += 1\n    d = {v:k for k, v in d.items()}\n    print(d[1])\n    \n\nif __name__ == \"__main__\":\n    main()"}
{"label": 88, "index": 11434, "code": "from collections import Counter\n\nnum = list(map(int,input().split()))\nc = Counter(num)\n\nprint(c.most_common()[1][0])"}
{"label": 88, "index": 11435, "code": "a, b, c = map(int, input().split())\n\nif a == b:\n    x = c\nelif b == c:\n    x= a\nelse:\n    x = b\n\nprint(x)\n"}
{"label": 88, "index": 11436, "code": "a,b,c = map(int,input().split())\nif a == b:\n    print(c)\nelif a == c:\n    print(b)\nelse:\n    print(a)"}
{"label": 88, "index": 11437, "code": "a,b,c=[int(i) for i in input().split()]\n\nif a==b:\n  print(c)\nelif b==c:\n  print(a)\nelse:\n  print(b)"}
{"label": 88, "index": 11438, "code": "num = input().split()\nnum = [int(x) for x in num]\n\nfor i in num:\n    if num.count(i) == 1:\n        print(i)"}
{"label": 88, "index": 11439, "code": "a,b,c=input().split()\n\nif a==c:\n    print(b)\nelif b==c:\n    print(a)\nelse:\n    print(c)"}
